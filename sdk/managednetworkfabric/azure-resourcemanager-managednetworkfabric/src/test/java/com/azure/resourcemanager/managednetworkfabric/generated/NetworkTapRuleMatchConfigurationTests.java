// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleAction;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.TapRuleActionType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapRuleMatchConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapRuleMatchConfiguration model = BinaryData.fromString(
            "{\"matchConfigurationName\":\"gajkrdyddtpfcud\",\"sequenceNumber\":6115763777753559706,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"kordw\",\"ejpec\"],\"portGroupNames\":[\"cmbpwdlu\",\"ayprldid\",\"mtffbvtzldzchuba\"]},\"protocolTypes\":[\"l\",\"uvigv\",\"ghfrbzakpjtcq\"],\"vlanMatchCondition\":{\"vlans\":[\"ojpsucm\",\"imcwqxynqjgsa\",\"kyvscbgngcrus\",\"hirc\"],\"innerVlans\":[\"vsvkkjbjolpyo\",\"lkvuznadvh\"],\"vlanGroupNames\":[\"eoigowxxbhtpsyio\",\"emqwtq\",\"zzgyksikawan\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"crbkompnbnfgywe\",\"jbepgcmah\",\"wfryawkchkap\",\"tsk\"],\"ipGroupNames\":[\"yfttibjepzwhju\",\"fdgbggcjxzhbl\",\"vwehsu\",\"ym\"]}},{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"ngkqlgxzduvxd\"],\"portGroupNames\":[\"xatm\",\"mnrs\",\"nxoirxy\"]},\"protocolTypes\":[\"iploisjkzsoxznnt\",\"gkvyoh\"],\"vlanMatchCondition\":{\"vlans\":[\"zupzwwyt\",\"djzghximkg\"],\"innerVlans\":[\"pqkjnpyriwntotcx\",\"mqmtsjky\"],\"vlanGroupNames\":[\"xwdonbexftedau\",\"h\",\"eggzgrn\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"mrtgjq\",\"acan\"],\"ipGroupNames\":[\"yxzxjmkanbclazof\",\"exvtemasp\",\"anydsc\"]}},{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"bhaah\",\"tofelfhpfixo\"],\"portGroupNames\":[\"z\",\"fivsujybsr\"]},\"protocolTypes\":[\"mr\",\"t\",\"dhmfppinm\",\"ikesmkwtzgfr\"],\"vlanMatchCondition\":{\"vlans\":[\"xerxlobkdb\",\"qhvmmniiqy\",\"olhjnskbggicn\",\"wlctmwp\"],\"innerVlans\":[\"krkqgvxrktjc\",\"igcwtspanbqxase\",\"chefpgeed\"],\"vlanGroupNames\":[\"ruholae\",\"wcgi\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"sqqlonbzaow\"],\"ipGroupNames\":[\"dkmbjsmihrijez\",\"fsjwfcz\",\"lkvbgukbsv\",\"wyo\"]}}],\"actions\":[{\"type\":\"Replicate\",\"truncate\":\"nhjgclxaxwcffasp\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"ucszgh\",\"matchConfigurationName\":\"aqipmnxclfrsbzrn\"},{\"type\":\"Drop\",\"truncate\":\"vp\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"dtbfmekjc\",\"matchConfigurationName\":\"inxd\"}]}")
            .toObject(NetworkTapRuleMatchConfiguration.class);
        Assertions.assertEquals("gajkrdyddtpfcud", model.matchConfigurationName());
        Assertions.assertEquals(6115763777753559706L, model.sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.ipAddressType());
        Assertions.assertEquals("l", model.matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("ojpsucm", model.matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("vsvkkjbjolpyo",
            model.matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("eoigowxxbhtpsyio",
            model.matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP,
            model.matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX, model.matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("crbkompnbnfgywe",
            model.matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("yfttibjepzwhju", model.matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1, model.matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT, model.matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("kordw", model.matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("cmbpwdlu", model.matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals(TapRuleActionType.REPLICATE, model.actions().get(0).type());
        Assertions.assertEquals("nhjgclxaxwcffasp", model.actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("ucszgh", model.actions().get(0).destinationId());
        Assertions.assertEquals("aqipmnxclfrsbzrn", model.actions().get(0).matchConfigurationName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapRuleMatchConfiguration model
            = new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("gajkrdyddtpfcud")
                .withSequenceNumber(6115763777753559706L)
                .withIpAddressType(IpAddressType.IPV4)
                .withMatchConditions(Arrays
                    .asList(
                        new NetworkTapRuleMatchCondition()
                            .withProtocolTypes(Arrays.asList("l", "uvigv", "ghfrbzakpjtcq"))
                            .withVlanMatchCondition(new VlanMatchCondition()
                                .withVlans(Arrays.asList("ojpsucm", "imcwqxynqjgsa", "kyvscbgngcrus", "hirc"))
                                .withInnerVlans(Arrays.asList("vsvkkjbjolpyo", "lkvuznadvh"))
                                .withVlanGroupNames(Arrays.asList("eoigowxxbhtpsyio", "emqwtq", "zzgyksikawan")))
                            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                .withPrefixType(PrefixType.LONGEST_PREFIX)
                                .withIpPrefixValues(
                                    Arrays.asList("crbkompnbnfgywe", "jbepgcmah", "wfryawkchkap", "tsk"))
                                .withIpGroupNames(Arrays.asList("yfttibjepzwhju", "fdgbggcjxzhbl", "vwehsu", "ym")))
                            .withEncapsulationType(EncapsulationType.GTPV1)
                            .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                                .withLayer4Protocol(Layer4Protocol.UDP)
                                .withPorts(Arrays.asList("kordw", "ejpec"))
                                .withPortGroupNames(Arrays.asList("cmbpwdlu", "ayprldid", "mtffbvtzldzchuba"))),
                        new NetworkTapRuleMatchCondition()
                            .withProtocolTypes(Arrays.asList("iploisjkzsoxznnt", "gkvyoh"))
                            .withVlanMatchCondition(
                                new VlanMatchCondition().withVlans(Arrays.asList("zupzwwyt", "djzghximkg"))
                                    .withInnerVlans(Arrays.asList("pqkjnpyriwntotcx", "mqmtsjky"))
                                    .withVlanGroupNames(Arrays.asList("xwdonbexftedau", "h", "eggzgrn")))
                            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                .withPrefixType(PrefixType.PREFIX)
                                .withIpPrefixValues(Arrays.asList("mrtgjq", "acan"))
                                .withIpGroupNames(Arrays.asList("yxzxjmkanbclazof", "exvtemasp", "anydsc")))
                            .withEncapsulationType(EncapsulationType.GTPV1)
                            .withPortCondition(new PortCondition().withPortType(PortType.DESTINATION_PORT)
                                .withLayer4Protocol(Layer4Protocol.UDP)
                                .withPorts(Arrays.asList("ngkqlgxzduvxd"))
                                .withPortGroupNames(Arrays.asList("xatm", "mnrs", "nxoirxy"))),
                        new NetworkTapRuleMatchCondition()
                            .withProtocolTypes(Arrays.asList("mr", "t", "dhmfppinm", "ikesmkwtzgfr"))
                            .withVlanMatchCondition(new VlanMatchCondition()
                                .withVlans(Arrays.asList("xerxlobkdb", "qhvmmniiqy", "olhjnskbggicn", "wlctmwp"))
                                .withInnerVlans(Arrays.asList("krkqgvxrktjc", "igcwtspanbqxase", "chefpgeed"))
                                .withVlanGroupNames(Arrays.asList("ruholae", "wcgi")))
                            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                .withPrefixType(PrefixType.PREFIX)
                                .withIpPrefixValues(Arrays.asList("sqqlonbzaow"))
                                .withIpGroupNames(Arrays.asList("dkmbjsmihrijez", "fsjwfcz", "lkvbgukbsv", "wyo")))
                            .withEncapsulationType(EncapsulationType.GTPV1)
                            .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                                .withLayer4Protocol(Layer4Protocol.TCP)
                                .withPorts(Arrays.asList("bhaah", "tofelfhpfixo"))
                                .withPortGroupNames(Arrays.asList("z", "fivsujybsr")))))
                .withActions(Arrays.asList(
                    new NetworkTapRuleAction().withType(TapRuleActionType.REPLICATE)
                        .withTruncate("nhjgclxaxwcffasp")
                        .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                        .withDestinationId("ucszgh")
                        .withMatchConfigurationName("aqipmnxclfrsbzrn"),
                    new NetworkTapRuleAction().withType(TapRuleActionType.DROP)
                        .withTruncate("vp")
                        .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                        .withDestinationId("dtbfmekjc")
                        .withMatchConfigurationName("inxd")));
        model = BinaryData.fromObject(model).toObject(NetworkTapRuleMatchConfiguration.class);
        Assertions.assertEquals("gajkrdyddtpfcud", model.matchConfigurationName());
        Assertions.assertEquals(6115763777753559706L, model.sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.ipAddressType());
        Assertions.assertEquals("l", model.matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("ojpsucm", model.matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("vsvkkjbjolpyo",
            model.matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("eoigowxxbhtpsyio",
            model.matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP,
            model.matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX, model.matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("crbkompnbnfgywe",
            model.matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("yfttibjepzwhju", model.matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1, model.matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT, model.matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("kordw", model.matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("cmbpwdlu", model.matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals(TapRuleActionType.REPLICATE, model.actions().get(0).type());
        Assertions.assertEquals("nhjgclxaxwcffasp", model.actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("ucszgh", model.actions().get(0).destinationId());
        Assertions.assertEquals("aqipmnxclfrsbzrn", model.actions().get(0).matchConfigurationName());
    }
}
