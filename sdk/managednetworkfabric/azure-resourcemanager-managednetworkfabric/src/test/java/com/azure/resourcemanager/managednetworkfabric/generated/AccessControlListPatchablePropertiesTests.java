// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AclActionType;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListPatchableProperties model = BinaryData.fromString(
            "{\"configurationType\":\"File\",\"aclsUrl\":\"lfltka\",\"defaultAction\":\"Deny\",\"matchConfigurations\":[{\"matchConfigurationName\":\"dlfoakggkfp\",\"sequenceNumber\":2099147795702198960,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{\"etherTypes\":[\"blylsyxkqjnsj\",\"r\",\"tiagx\"],\"fragments\":[\"zuempsbzkf\"],\"ipLengths\":[\"yvpnqicvinvkjj\",\"dxrbuukzcle\",\"yhmlwpaztzp\",\"fn\"],\"ttlValues\":[\"wyfzqwhxxbuyqa\",\"zfeqztppri\",\"lxorjaltolmncws\",\"bqwcsdbnwdcf\"],\"dscpMarkings\":[\"qdpfuvglsbjjca\",\"vxb\"],\"portCondition\":{\"flags\":[\"dut\",\"cormr\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"ofudflvkgju\",\"gdknnqv\",\"aznqntoru\",\"sgsahmkycgr\"],\"portGroupNames\":[\"juetaebur\"]},\"protocolTypes\":[\"movsmzlxwabmqoe\",\"kif\"],\"vlanMatchCondition\":{\"vlans\":[\"u\",\"ujmqlgkfbtndoa\",\"n\",\"bjcntujitc\"],\"innerVlans\":[\"ftwwaezkojvdc\"],\"vlanGroupNames\":[\"oqouicybxarzgszu\",\"oxciqopidoamcio\",\"hkh\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"onlwntoeg\"],\"ipGroupNames\":[\"wbw\",\"kszzcmrvexztv\",\"t\",\"gsfraoyzkoow\"]}},{\"etherTypes\":[\"nguxawqaldsy\",\"uximerqfobw\",\"znkbykutwpfhpagm\",\"r\"],\"fragments\":[\"snfdsdoakgtdl\",\"kkze\",\"dlhewp\",\"sdsttwvog\"],\"ipLengths\":[\"ejdcngqqmoakuf\",\"m\"],\"ttlValues\":[\"wr\"],\"dscpMarkings\":[\"twaenuuzko\",\"bminrfdwoyuhhzi\",\"iefozbhdmsml\"],\"portCondition\":{\"flags\":[\"oftrmaequia\",\"xicslfao\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"lhalnswh\",\"csphkaiv\",\"itqscywuggwoluhc\"],\"portGroupNames\":[\"emh\"]},\"protocolTypes\":[\"sbrgz\",\"wmsweypqwd\",\"ggicccnxqhue\"],\"vlanMatchCondition\":{\"vlans\":[\"tlstvlzywem\",\"zrncsdt\",\"lusiy\",\"bsfgytguslfea\"],\"innerVlans\":[\"gq\",\"kyhejhzisxgf\",\"elolppvksrpqvuj\"],\"vlanGroupNames\":[\"ehtwdwrft\",\"wib\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"hfwpracstwit\",\"khevxccedc\",\"nmdyodnwzxl\",\"jc\"],\"ipGroupNames\":[\"ltiugcxnavv\"]}},{\"etherTypes\":[\"ibyqunyowxwlmdj\"],\"fragments\":[\"fgbvfvpdbo\",\"acizsjqlhkrr\",\"bdeibqipqk\",\"hvxndzwmkrefajpj\"],\"ipLengths\":[\"kqnyh\",\"b\"],\"ttlValues\":[\"jivfxzsjabib\",\"ystawfsdjpvkvp\",\"jxbkzbzkdvn\",\"jabudurgkakmo\"],\"dscpMarkings\":[\"jjklff\",\"mouwqlgzrfzeey\"],\"portCondition\":{\"flags\":[\"ikayuhqlbjbsybb\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"dgmfpgvmpipasl\",\"haq\",\"x\"],\"portGroupNames\":[\"wutwbdsre\",\"pdrhne\",\"yowqkdwytisibir\"]},\"protocolTypes\":[\"ikpzimejza\",\"lfzxiavrmbzonoki\"],\"vlanMatchCondition\":{\"vlans\":[\"cirgzp\"],\"innerVlans\":[\"azszrnwoiindfpw\",\"jylwbtlhflsj\"],\"vlanGroupNames\":[\"szfjvfbgofelja\",\"rqmq\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"ojnal\",\"hfkvtvsexsowuel\",\"qhhahhxvrhmzkwpj\",\"wws\"],\"ipGroupNames\":[\"hftqsxhqxujxukn\",\"xdigrjg\",\"ufzdmsyq\",\"fi\"]}}],\"actions\":[{\"type\":\"Drop\",\"counterName\":\"z\"},{\"type\":\"Drop\",\"counterName\":\"mvpp\"},{\"type\":\"Drop\",\"counterName\":\"qzudphq\"},{\"type\":\"Log\",\"counterName\":\"kfwynw\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"ayhmtnvyqiatkz\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"wzcjaesgvvsccy\"]}],\"vlanGroups\":[{\"name\":\"qfhwyg\",\"vlans\":[\"dnkfx\",\"semdwzrmu\",\"apfcqdpsq\"]}],\"portGroups\":[{\"name\":\"svuo\",\"ports\":[\"ccelve\"]},{\"name\":\"ypql\",\"ports\":[\"okerqwkyhkobop\",\"xedk\",\"wep\",\"qpcrf\"]},{\"name\":\"wccsnjvcdwxlpqek\",\"ports\":[\"khtj\",\"y\",\"ngwfqatm\"]}]},{\"ipGroups\":[{\"name\":\"mdvy\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"gszywk\",\"irryuzhlh\",\"joqrvqqaatj\",\"nrvgoupmfiibfgg\"]},{\"name\":\"ool\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"v\",\"kkgll\"]}],\"vlanGroups\":[{\"name\":\"gvjayvblmh\",\"vlans\":[\"uhbxvvy\",\"gsopbyrqufegxu\",\"wz\",\"bnhlmc\"]},{\"name\":\"p\",\"vlans\":[\"itvgbmhrixkwm\",\"ijejvegrhbpn\"]},{\"name\":\"xexccbdreaxhcexd\",\"vlans\":[\"qahqkghtpwijn\",\"yjsvfyc\",\"z\"]}],\"portGroups\":[{\"name\":\"owvrvmtgjqppyos\",\"ports\":[\"nzm\"]},{\"name\":\"gfipnsxk\",\"ports\":[\"a\",\"krrjrea\",\"xt\",\"gumhjglikkxws\"]}]},{\"ipGroups\":[{\"name\":\"qpvuzlmvfelf\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"crpw\",\"xeznoi\"]},{\"name\":\"rnjwmw\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"azej\"]},{\"name\":\"qkagfhsxt\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"xnfaazpxdtnk\",\"mkqjj\"]},{\"name\":\"uenvrkp\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"bre\",\"qaaysjkixqt\"]}],\"vlanGroups\":[{\"name\":\"ezl\",\"vlans\":[\"fiakpjpqqm\",\"edltmmjihyeozp\"]},{\"name\":\"wau\",\"vlans\":[\"c\"]}],\"portGroups\":[{\"name\":\"kvi\",\"ports\":[\"scw\",\"qupevzh\",\"stotxh\",\"jujbypelmcuvhixb\"]},{\"name\":\"yfwnylr\",\"ports\":[\"lsttpkiwkkbnuj\"]},{\"name\":\"wvtylbfpncurdo\",\"ports\":[\"ithtywu\",\"xcbihw\"]}]},{\"ipGroups\":[{\"name\":\"dntwjchrdgo\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"wct\",\"ndz\",\"luudfdlwggytsb\",\"tov\"]}],\"vlanGroups\":[{\"name\":\"einqf\",\"vlans\":[\"x\",\"knpirgnepttwq\",\"sniffc\",\"mqnrojlpijnkr\"]},{\"name\":\"rddh\",\"vlans\":[\"tizzronasxif\"]}],\"portGroups\":[{\"name\":\"yzhftwesgogczh\",\"ports\":[\"xkr\",\"gnyhmossxkkg\",\"h\",\"rghxjb\"]}]}]}")
            .toObject(AccessControlListPatchableProperties.class);
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("lfltka", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("dlfoakggkfp", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(2099147795702198960L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("movsmzlxwabmqoe",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("u",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("ftwwaezkojvdc",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("oqouicybxarzgszu",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("onlwntoeg",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("wbw",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("blylsyxkqjnsj",
            model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("zuempsbzkf",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("yvpnqicvinvkjj",
            model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("wyfzqwhxxbuyqa",
            model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("qdpfuvglsbjjca",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.DESTINATION_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("ofudflvkgju",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("juetaebur",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("dut",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.DROP, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("z", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("ayhmtnvyqiatkz", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV6,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("wzcjaesgvvsccy",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("qfhwyg", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("dnkfx", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("svuo", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("ccelve", model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListPatchableProperties model
            = new AccessControlListPatchableProperties().withConfigurationType(ConfigurationType.FILE)
                .withAclsUrl("lfltka")
                .withDefaultAction(CommunityActionTypes.DENY)
                .withMatchConfigurations(Arrays.asList(new AccessControlListMatchConfiguration()
                    .withMatchConfigurationName("dlfoakggkfp")
                    .withSequenceNumber(2099147795702198960L)
                    .withIpAddressType(IpAddressType.IPV6)
                    .withMatchConditions(Arrays.asList(
                        new AccessControlListMatchCondition().withProtocolTypes(Arrays.asList("movsmzlxwabmqoe", "kif"))
                            .withVlanMatchCondition(new VlanMatchCondition()
                                .withVlans(Arrays.asList("u", "ujmqlgkfbtndoa", "n", "bjcntujitc"))
                                .withInnerVlans(Arrays.asList("ftwwaezkojvdc"))
                                .withVlanGroupNames(Arrays.asList("oqouicybxarzgszu", "oxciqopidoamcio", "hkh")))
                            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                .withPrefixType(PrefixType.PREFIX)
                                .withIpPrefixValues(Arrays.asList("onlwntoeg"))
                                .withIpGroupNames(Arrays.asList("wbw", "kszzcmrvexztv", "t", "gsfraoyzkoow")))
                            .withEtherTypes(Arrays.asList("blylsyxkqjnsj", "r", "tiagx"))
                            .withFragments(Arrays.asList("zuempsbzkf"))
                            .withIpLengths(Arrays.asList("yvpnqicvinvkjj", "dxrbuukzcle", "yhmlwpaztzp", "fn"))
                            .withTtlValues(
                                Arrays.asList("wyfzqwhxxbuyqa", "zfeqztppri", "lxorjaltolmncws", "bqwcsdbnwdcf"))
                            .withDscpMarkings(Arrays.asList("qdpfuvglsbjjca", "vxb"))
                            .withPortCondition(new AccessControlListPortCondition()
                                .withPortType(PortType.DESTINATION_PORT)
                                .withLayer4Protocol(Layer4Protocol.TCP)
                                .withPorts(Arrays.asList("ofudflvkgju", "gdknnqv", "aznqntoru", "sgsahmkycgr"))
                                .withPortGroupNames(Arrays.asList("juetaebur"))
                                .withFlags(Arrays.asList("dut", "cormr"))),
                        new AccessControlListMatchCondition()
                            .withProtocolTypes(Arrays.asList("sbrgz", "wmsweypqwd", "ggicccnxqhue"))
                            .withVlanMatchCondition(new VlanMatchCondition()
                                .withVlans(Arrays.asList("tlstvlzywem", "zrncsdt", "lusiy", "bsfgytguslfea"))
                                .withInnerVlans(Arrays.asList("gq", "kyhejhzisxgf", "elolppvksrpqvuj"))
                                .withVlanGroupNames(Arrays.asList("ehtwdwrft", "wib")))
                            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                .withPrefixType(PrefixType.LONGEST_PREFIX)
                                .withIpPrefixValues(Arrays.asList("hfwpracstwit", "khevxccedc", "nmdyodnwzxl", "jc"))
                                .withIpGroupNames(Arrays.asList("ltiugcxnavv")))
                            .withEtherTypes(Arrays.asList("nguxawqaldsy", "uximerqfobw", "znkbykutwpfhpagm", "r"))
                            .withFragments(Arrays.asList("snfdsdoakgtdl", "kkze", "dlhewp", "sdsttwvog"))
                            .withIpLengths(Arrays.asList("ejdcngqqmoakuf", "m"))
                            .withTtlValues(Arrays.asList("wr"))
                            .withDscpMarkings(Arrays.asList("twaenuuzko", "bminrfdwoyuhhzi", "iefozbhdmsml"))
                            .withPortCondition(new AccessControlListPortCondition()
                                .withPortType(PortType.DESTINATION_PORT)
                                .withLayer4Protocol(Layer4Protocol.UDP)
                                .withPorts(Arrays.asList("lhalnswh", "csphkaiv", "itqscywuggwoluhc"))
                                .withPortGroupNames(Arrays.asList("emh"))
                                .withFlags(Arrays.asList("oftrmaequia", "xicslfao"))),
                        new AccessControlListMatchCondition()
                            .withProtocolTypes(Arrays.asList("ikpzimejza", "lfzxiavrmbzonoki"))
                            .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("cirgzp"))
                                .withInnerVlans(Arrays.asList("azszrnwoiindfpw", "jylwbtlhflsj"))
                                .withVlanGroupNames(Arrays.asList("szfjvfbgofelja", "rqmq")))
                            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                .withPrefixType(PrefixType.LONGEST_PREFIX)
                                .withIpPrefixValues(
                                    Arrays.asList("ojnal", "hfkvtvsexsowuel", "qhhahhxvrhmzkwpj", "wws"))
                                .withIpGroupNames(Arrays.asList("hftqsxhqxujxukn", "xdigrjg", "ufzdmsyq", "fi")))
                            .withEtherTypes(Arrays.asList("ibyqunyowxwlmdj"))
                            .withFragments(
                                Arrays.asList("fgbvfvpdbo", "acizsjqlhkrr", "bdeibqipqk", "hvxndzwmkrefajpj"))
                            .withIpLengths(Arrays.asList("kqnyh", "b"))
                            .withTtlValues(
                                Arrays.asList("jivfxzsjabib", "ystawfsdjpvkvp", "jxbkzbzkdvn", "jabudurgkakmo"))
                            .withDscpMarkings(Arrays.asList("jjklff", "mouwqlgzrfzeey"))
                            .withPortCondition(new AccessControlListPortCondition().withPortType(PortType.SOURCE_PORT)
                                .withLayer4Protocol(Layer4Protocol.UDP)
                                .withPorts(Arrays.asList("dgmfpgvmpipasl", "haq", "x"))
                                .withPortGroupNames(Arrays.asList("wutwbdsre", "pdrhne", "yowqkdwytisibir"))
                                .withFlags(Arrays.asList("ikayuhqlbjbsybb")))))
                    .withActions(Arrays
                        .asList(new AccessControlListAction().withType(AclActionType.DROP).withCounterName("z"),
                            new AccessControlListAction().withType(AclActionType.DROP).withCounterName("mvpp"),
                            new AccessControlListAction().withType(AclActionType.DROP).withCounterName("qzudphq"),
                            new AccessControlListAction().withType(AclActionType.LOG).withCounterName("kfwynw")))))
                .withDynamicMatchConfigurations(
                    Arrays
                        .asList(
                            new CommonDynamicMatchConfiguration()
                                .withIpGroups(Arrays.asList(new IpGroupProperties().withName("ayhmtnvyqiatkz")
                                    .withIpAddressType(IpAddressType.IPV6)
                                    .withIpPrefixes(Arrays.asList("wzcjaesgvvsccy"))))
                                .withVlanGroups(Arrays.asList(new VlanGroupProperties().withName("qfhwyg")
                                    .withVlans(Arrays.asList("dnkfx", "semdwzrmu", "apfcqdpsq"))))
                                .withPortGroups(Arrays.asList(new PortGroupProperties().withName("svuo")
                                    .withPorts(Arrays.asList("ccelve")),
                                    new PortGroupProperties().withName("ypql")
                                        .withPorts(Arrays.asList("okerqwkyhkobop", "xedk", "wep", "qpcrf")),
                                    new PortGroupProperties().withName("wccsnjvcdwxlpqek")
                                        .withPorts(Arrays.asList("khtj", "y", "ngwfqatm")))),
                            new CommonDynamicMatchConfiguration()
                                .withIpGroups(
                                    Arrays
                                        .asList(
                                            new IpGroupProperties().withName("mdvy")
                                                .withIpAddressType(IpAddressType.IPV6)
                                                .withIpPrefixes(Arrays.asList("gszywk", "irryuzhlh", "joqrvqqaatj",
                                                    "nrvgoupmfiibfgg")),
                                            new IpGroupProperties().withName("ool")
                                                .withIpAddressType(IpAddressType.IPV6)
                                                .withIpPrefixes(Arrays.asList("v", "kkgll"))))
                                .withVlanGroups(Arrays.asList(
                                    new VlanGroupProperties().withName("gvjayvblmh")
                                        .withVlans(Arrays.asList("uhbxvvy", "gsopbyrqufegxu", "wz", "bnhlmc")),
                                    new VlanGroupProperties().withName("p")
                                        .withVlans(Arrays.asList("itvgbmhrixkwm", "ijejvegrhbpn")),
                                    new VlanGroupProperties().withName("xexccbdreaxhcexd")
                                        .withVlans(Arrays.asList("qahqkghtpwijn", "yjsvfyc", "z"))))
                                .withPortGroups(
                                    Arrays.asList(
                                        new PortGroupProperties().withName("owvrvmtgjqppyos")
                                            .withPorts(Arrays.asList("nzm")),
                                        new PortGroupProperties().withName("gfipnsxk")
                                            .withPorts(Arrays.asList("a", "krrjrea", "xt", "gumhjglikkxws")))),
                            new CommonDynamicMatchConfiguration()
                                .withIpGroups(Arrays.asList(
                                    new IpGroupProperties().withName("qpvuzlmvfelf")
                                        .withIpAddressType(IpAddressType.IPV6)
                                        .withIpPrefixes(Arrays.asList("crpw", "xeznoi")),
                                    new IpGroupProperties().withName("rnjwmw")
                                        .withIpAddressType(IpAddressType.IPV6)
                                        .withIpPrefixes(Arrays.asList("azej")),
                                    new IpGroupProperties().withName("qkagfhsxt")
                                        .withIpAddressType(IpAddressType.IPV4)
                                        .withIpPrefixes(Arrays.asList("xnfaazpxdtnk", "mkqjj")),
                                    new IpGroupProperties().withName("uenvrkp")
                                        .withIpAddressType(IpAddressType.IPV6)
                                        .withIpPrefixes(Arrays.asList("bre", "qaaysjkixqt"))))
                                .withVlanGroups(Arrays.asList(
                                    new VlanGroupProperties().withName("ezl")
                                        .withVlans(Arrays.asList("fiakpjpqqm", "edltmmjihyeozp")),
                                    new VlanGroupProperties().withName("wau").withVlans(Arrays.asList("c"))))
                                .withPortGroups(Arrays
                                    .asList(
                                        new PortGroupProperties().withName("kvi")
                                            .withPorts(Arrays.asList("scw", "qupevzh", "stotxh", "jujbypelmcuvhixb")),
                                        new PortGroupProperties().withName("yfwnylr")
                                            .withPorts(Arrays.asList("lsttpkiwkkbnuj")),
                                        new PortGroupProperties()
                                            .withName("wvtylbfpncurdo")
                                            .withPorts(Arrays.asList("ithtywu", "xcbihw")))),
                            new CommonDynamicMatchConfiguration()
                                .withIpGroups(Arrays.asList(new IpGroupProperties().withName("dntwjchrdgo")
                                    .withIpAddressType(IpAddressType.IPV4)
                                    .withIpPrefixes(Arrays.asList("wct", "ndz", "luudfdlwggytsb", "tov"))))
                                .withVlanGroups(Arrays.asList(
                                    new VlanGroupProperties().withName("einqf")
                                        .withVlans(Arrays.asList("x", "knpirgnepttwq", "sniffc", "mqnrojlpijnkr")),
                                    new VlanGroupProperties().withName("rddh")
                                        .withVlans(Arrays.asList("tizzronasxif"))))
                                .withPortGroups(Arrays.asList(new PortGroupProperties().withName("yzhftwesgogczh")
                                    .withPorts(Arrays.asList("xkr", "gnyhmossxkkg", "h", "rghxjb"))))));
        model = BinaryData.fromObject(model).toObject(AccessControlListPatchableProperties.class);
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("lfltka", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("dlfoakggkfp", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(2099147795702198960L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("movsmzlxwabmqoe",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("u",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("ftwwaezkojvdc",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("oqouicybxarzgszu",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("onlwntoeg",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("wbw",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("blylsyxkqjnsj",
            model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("zuempsbzkf",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("yvpnqicvinvkjj",
            model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("wyfzqwhxxbuyqa",
            model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("qdpfuvglsbjjca",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.DESTINATION_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("ofudflvkgju",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("juetaebur",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("dut",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.DROP, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("z", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("ayhmtnvyqiatkz", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV6,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("wzcjaesgvvsccy",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("qfhwyg", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("dnkfx", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("svuo", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("ccelve", model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }
}
