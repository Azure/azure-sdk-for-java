// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L2IsolationDomainInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L2IsolationDomainInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L2IsolationDomainInner model = BinaryData.fromString(
            "{\"properties\":{\"networkFabricId\":\"e\",\"vlanId\":76777618,\"mtu\":246722999,\"configurationState\":\"Accepted\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"Disabled\",\"annotation\":\"bzkkd\"},\"location\":\"hqsycljselp\",\"tags\":{\"by\":\"afvafh\",\"rsofpltdbmairrh\":\"ccbevxrhyzdf\",\"npq\":\"hfnrac\",\"uuj\":\"g\"},\"id\":\"ouhdawsigrb\",\"name\":\"bxsjybvitvqkj\",\"type\":\"az\"}")
            .toObject(L2IsolationDomainInner.class);
        Assertions.assertEquals("hqsycljselp", model.location());
        Assertions.assertEquals("afvafh", model.tags().get("by"));
        Assertions.assertEquals("e", model.networkFabricId());
        Assertions.assertEquals(76777618, model.vlanId());
        Assertions.assertEquals(246722999, model.mtu());
        Assertions.assertEquals("bzkkd", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L2IsolationDomainInner model = new L2IsolationDomainInner().withLocation("hqsycljselp")
            .withTags(mapOf("by", "afvafh", "rsofpltdbmairrh", "ccbevxrhyzdf", "npq", "hfnrac", "uuj", "g"))
            .withNetworkFabricId("e")
            .withVlanId(76777618)
            .withMtu(246722999)
            .withAnnotation("bzkkd");
        model = BinaryData.fromObject(model).toObject(L2IsolationDomainInner.class);
        Assertions.assertEquals("hqsycljselp", model.location());
        Assertions.assertEquals("afvafh", model.tags().get("by"));
        Assertions.assertEquals("e", model.networkFabricId());
        Assertions.assertEquals(76777618, model.vlanId());
        Assertions.assertEquals(246722999, model.mtu());
        Assertions.assertEquals("bzkkd", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
