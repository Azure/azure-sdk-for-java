// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.AccessControlListProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AclActionType;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListProperties model = BinaryData.fromString(
            "{\"lastSyncedTime\":\"2021-01-16T20:17:07Z\",\"configurationState\":\"Succeeded\",\"provisioningState\":\"Updating\",\"administrativeState\":\"Enabled\",\"configurationType\":\"File\",\"aclsUrl\":\"i\",\"defaultAction\":\"Deny\",\"matchConfigurations\":[{\"matchConfigurationName\":\"xqbzvddntwnd\",\"sequenceNumber\":4634265215487541073,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"etherTypes\":[\"oqvuhr\",\"cffcyddglmj\"],\"fragments\":[\"qkwpyeicxmqc\",\"wqvhkhixuigdt\",\"pbobjo\"],\"ipLengths\":[\"e\"],\"ttlValues\":[\"m\"],\"dscpMarkings\":[\"rzayv\",\"t\",\"gvdfgiotkftutq\",\"ln\"],\"portCondition\":{\"flags\":[\"fgugnxkrxdqmid\",\"thz\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"bhj\",\"big\"],\"portGroupNames\":[\"qfbow\",\"kanyktzlcuiywg\",\"ywgndrv\"]},\"protocolTypes\":[\"zgpphrcgyncocpe\",\"fvm\",\"coofsxlzev\",\"bmqj\"],\"vlanMatchCondition\":{\"vlans\":[\"y\"],\"innerVlans\":[\"vkwlzuvccfwnf\",\"bacfionlebxetq\",\"tzxdpnqbqqwx\",\"jfeallnwsub\"],\"vlanGroupNames\":[\"jampmngnzscxaqw\",\"ochcbonqvpkvl\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"ipheoflokeyyien\",\"bdlwtgrhpdjpj\",\"masxazjpqyegu\",\"lhbxxhejjzzvdud\"],\"ipGroupNames\":[\"slfhotwm\",\"ynpwlbj\",\"pgacftadehxnlty\"]}},{\"etherTypes\":[\"ppusuesnzwdejba\",\"orxzdmohctbqvud\",\"xdn\"],\"fragments\":[\"owgujjugwdkcglhs\"],\"ipLengths\":[\"jdyggdtji\"],\"ttlValues\":[\"kuofqweykhme\"],\"dscpMarkings\":[\"fyexfwhy\",\"cibvyvdcsitynn\"],\"portCondition\":{\"flags\":[\"ectehf\",\"qsc\",\"eypvhezrkg\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"fovgmkqsleyyvxy\",\"jpkcattpng\"],\"portGroupNames\":[\"cczsq\",\"jh\",\"mdajv\"]},\"protocolTypes\":[\"ounqecano\",\"eupfhyhltrpm\",\"pjmcmatuokthfuiu\",\"odsfcpkvxodpuozm\"],\"vlanMatchCondition\":{\"vlans\":[\"agfuaxbezyiu\",\"kktwhrdxw\",\"ywqsmbsurexim\",\"ryocfsfksymdd\"],\"innerVlans\":[\"kiiuxhqyudxor\"],\"vlanGroupNames\":[\"b\",\"oczvy\",\"fqrvkdvjsllrmvvd\",\"watkpnpulexxb\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"qzbqjvsov\",\"yokacspkw\"],\"ipGroupNames\":[\"dobpxjmflbvvn\",\"hrk\",\"ciwwzjuqkhr\",\"ajiwkuo\"]}},{\"etherTypes\":[\"kg\",\"sauuimj\",\"vxieduugidyj\"],\"fragments\":[\"byao\"],\"ipLengths\":[\"xc\"],\"ttlValues\":[\"pclhocohslk\"],\"dscpMarkings\":[\"eggzfb\",\"hfmvfaxkffe\"],\"portCondition\":{\"flags\":[\"lvmezyvshxmzsbbz\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"xwburvjxxjns\",\"ydptkoen\"],\"portGroupNames\":[\"knvudwtiukb\",\"dng\",\"pocipazyxoegu\"]},\"protocolTypes\":[\"npiucgygevqznty\",\"mrbpizcdrqj\",\"dpydn\"],\"vlanMatchCondition\":{\"vlans\":[\"de\",\"ejzicwifsjtt\",\"zfbishcbkhaj\"],\"innerVlans\":[\"eamdp\",\"agalpbuxwgipwhon\",\"wkgshwa\",\"kix\"],\"vlanGroupNames\":[\"njeputtmrywn\",\"zoqftiyqzrnkcqvy\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"cohoq\",\"nwvlryavwhheunmm\",\"hgyxzkonoc\"],\"ipGroupNames\":[\"klyaxuconu\",\"szfkbe\",\"pewr\"]}}],\"actions\":[{\"type\":\"Drop\",\"counterName\":\"jektcxsenh\"},{\"type\":\"Drop\",\"counterName\":\"ffrzpwvlqdqgbiqy\"},{\"type\":\"Count\",\"counterName\":\"aetcktvfcivfs\"},{\"type\":\"Drop\",\"counterName\":\"uctqhjfbe\"}]},{\"matchConfigurationName\":\"jcxerfuwu\",\"sequenceNumber\":3193420375672203078,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{\"etherTypes\":[\"rp\"],\"fragments\":[\"pcyvahfnljkyqx\",\"vuujq\",\"idokgjlj\"],\"ipLengths\":[\"gvcl\",\"bgsncghkjeszzhb\"],\"ttlValues\":[\"txfvgx\",\"fsm\",\"nehmpvecx\",\"odebfqkkrbmpu\"],\"dscpMarkings\":[\"iw\",\"lzlfbxzpuz\",\"cispnqzahmgkbr\"],\"portCondition\":{\"flags\":[\"hibnuqqkpika\",\"rgvtqag\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"ijggmebfsiar\",\"utrc\"],\"portGroupNames\":[\"azzmhjrunmpxt\"]},\"protocolTypes\":[\"hrbnlankxmyskpbh\"],\"vlanMatchCondition\":{\"vlans\":[\"kcxywnyt\",\"rsyn\",\"qidybyx\",\"zfcl\"],\"innerVlans\":[\"xdbabphlwr\",\"lfktsths\"],\"vlanGroupNames\":[\"cmnyyazttb\",\"wwrq\",\"uedck\",\"ywbiexzfeyueax\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"qwalmuzyoxaepd\"],\"ipGroupNames\":[\"ancuxrhd\",\"bavxbniwdjswzt\"]}},{\"etherTypes\":[\"pgn\"],\"fragments\":[\"x\"],\"ipLengths\":[\"xbzpfzab\",\"lcuhxwtctyqiklb\",\"ovplw\"],\"ttlValues\":[\"vgyuguos\",\"mkfssxqukkfplgm\",\"sxnkjzkdeslpvlo\"],\"dscpMarkings\":[\"yighxpk\"],\"portCondition\":{\"flags\":[\"aiuebbaumnyqu\",\"edeojnabc\",\"hsmtxpsiebtfhvp\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"rdqmhjjdhtldwkyz\",\"uutkncw\"],\"portGroupNames\":[\"svlxotogtwrup\",\"sx\",\"nmic\",\"kvceoveilovnotyf\"]},\"protocolTypes\":[\"njbkcnxdhbttkph\",\"wpn\",\"jtoqne\"],\"vlanMatchCondition\":{\"vlans\":[\"fpl\",\"hoxus\"],\"innerVlans\":[\"abgy\",\"psbjta\"],\"vlanGroupNames\":[\"gxywpmue\",\"fjz\",\"fqkquj\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"bglaocqxtccm\",\"yudxytlmoy\",\"xv\"],\"ipGroupNames\":[\"dw\"]}}],\"actions\":[{\"type\":\"Drop\",\"counterName\":\"dzhlrq\"},{\"type\":\"Log\",\"counterName\":\"kfrlhrxsbky\"},{\"type\":\"Drop\",\"counterName\":\"anuzbpzkafkuw\"},{\"type\":\"Count\",\"counterName\":\"wbme\"}]},{\"matchConfigurationName\":\"seyvj\",\"sequenceNumber\":2840663437896188419,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"etherTypes\":[\"deemao\",\"mx\",\"gkvtmelmqkrhah\",\"ljuahaquhcdh\"],\"fragments\":[\"alaexqpvfadmwsrc\",\"gvxp\",\"gomz\",\"fmisg\"],\"ipLengths\":[\"b\",\"e\"],\"ttlValues\":[\"wkz\"],\"dscpMarkings\":[\"io\",\"rqhakauha\",\"hsfwxosowzxcug\"],\"portCondition\":{\"flags\":[\"oxdjebwpuc\",\"wfvovbv\",\"euecivyhzceuoj\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"eiotwmcdytdx\",\"it\",\"nrjawgqwg\"],\"portGroupNames\":[\"isk\"]},\"protocolTypes\":[\"kpycgklwndnhjd\",\"uwhvylwzbtdhxujz\"],\"vlanMatchCondition\":{\"vlans\":[\"ow\"],\"innerVlans\":[\"rzqlveu\",\"lupj\"],\"vlanGroupNames\":[\"fxobbcsws\",\"tjrip\",\"rbpbewtghfgblcg\",\"xzvlvqhjkbegib\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"waloayqcgwr\",\"zjuzgwyz\",\"htxongmtsavjc\",\"pwxqp\"],\"ipGroupNames\":[\"nftguvriuhpr\",\"mdyvxqtayriw\",\"ro\"]}},{\"etherTypes\":[\"exrmcqibycnojvk\",\"mefqsgzvahapjyzh\"],\"fragments\":[\"qzcjrvxdj\",\"lmwlxkvugfhzo\"],\"ipLengths\":[\"jvzunluthnnp\",\"nxipeil\",\"jzuaejxdultskzbb\"],\"ttlValues\":[\"umveekgpwozuhkf\",\"bsjyofdx\",\"uusdttouwa\"],\"dscpMarkings\":[\"kqvkelnsmvbxwyjs\",\"lh\"],\"portCondition\":{\"flags\":[\"lnjixisxya\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"cslyjpk\",\"idzyexznelixhnr\",\"tfolhbnx\"],\"portGroupNames\":[\"laulppg\",\"dtpnapnyiropuhp\",\"gvpgy\",\"gqgitxmedjvcsl\"]},\"protocolTypes\":[\"wwncwzzhxgk\",\"rmgucnap\"],\"vlanMatchCondition\":{\"vlans\":[\"ellwptfdy\",\"pfqbuaceopzf\"],\"innerVlans\":[\"huaoppp\",\"qeqxo\"],\"vlanGroupNames\":[\"ahzxctobgbk\",\"moizpos\",\"mgrcfbu\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"kxbpvj\",\"mjh\"],\"ipGroupNames\":[\"yngudivk\"]}}],\"actions\":[{\"type\":\"Drop\",\"counterName\":\"qzvszjf\"},{\"type\":\"Log\",\"counterName\":\"fdxxivetvtcqaqtd\"}]},{\"matchConfigurationName\":\"mcbxvwvxysl\",\"sequenceNumber\":2902711033817845170,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{\"etherTypes\":[\"tkblmpewww\",\"bkrvrnsvshqj\",\"hxcr\"],\"fragments\":[\"ovasrruvwbhsqfsu\",\"cgjbirxbp\"],\"ipLengths\":[\"rfbjf\",\"twss\",\"t\"],\"ttlValues\":[\"vjz\",\"exilzznfqqnvwpmq\"],\"dscpMarkings\":[\"uoujmkcjhwqy\",\"jrybnwjewgdrjer\"],\"portCondition\":{\"flags\":[\"nqpeh\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"mifthnzdnd\",\"l\",\"nayqi\"],\"portGroupNames\":[\"duhavhqlkt\",\"umaq\",\"lbg\",\"cdui\"]},\"protocolTypes\":[\"gccymvaolpssl\",\"lfmmdnbbglzpswi\",\"d\",\"cwyhzdxssa\"],\"vlanMatchCondition\":{\"vlans\":[\"nvdfznuda\",\"dvxzbncblylpst\"],\"innerVlans\":[\"hxsrzdzucersc\"],\"vlanGroupNames\":[\"nevf\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"sslswtmweriof\",\"pyqs\"],\"ipGroupNames\":[\"abnetshh\"]}},{\"etherTypes\":[\"edplvwiwubmw\"],\"fragments\":[\"sldnkwwtppjflcxo\"],\"ipLengths\":[\"konzmnsik\",\"mkqzeqqkdltfzxmh\",\"v\",\"gureodkwobdag\"],\"ttlValues\":[\"bqdxbx\",\"akbogqxndlkzgxh\",\"ripl\",\"podxunkb\"],\"dscpMarkings\":[\"mubyynt\",\"lrb\",\"tkoievseotgq\",\"l\"],\"portCondition\":{\"flags\":[\"wlauwzizxbmpg\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"muvp\",\"ttdumorppxebmnzb\",\"bhjpglkfgohdne\",\"el\"],\"portGroupNames\":[\"sdyhtozfikdowwq\"]},\"protocolTypes\":[\"xzxcl\"],\"vlanMatchCondition\":{\"vlans\":[\"hqzonosggbhcoh\",\"wdsjnkalju\",\"iiswacffgdkzze\"],\"innerVlans\":[\"vhqcrail\",\"pnppfuf\"],\"vlanGroupNames\":[\"dmhdlxyjr\",\"sag\",\"fcnihgwq\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"cvkcvqvpkeqdcv\",\"rhvoods\",\"tbobz\"],\"ipGroupNames\":[\"cjwvn\",\"dldwmgxc\"]}}],\"actions\":[{\"type\":\"Count\",\"counterName\":\"utwu\"},{\"type\":\"Log\",\"counterName\":\"pkhjwni\"},{\"type\":\"Log\",\"counterName\":\"uicpd\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"vmbmp\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"fv\",\"efyw\"]}],\"vlanGroups\":[{\"name\":\"vmwy\",\"vlans\":[\"ouyftaakc\",\"wiyzvqtmnubexkp\"]},{\"name\":\"smond\",\"vlans\":[\"uxvypomgkopkwh\",\"jvp\",\"jqg\"]},{\"name\":\"smocmbq\",\"vlans\":[\"mkcxozapvh\",\"lxprglyatddckcbc\"]}],\"portGroups\":[{\"name\":\"jxgciqibrh\",\"ports\":[\"sdqrhzoymibmrq\",\"ibahwflus\",\"dtmhrkwofyyvoqa\",\"piexpbtgiw\"]},{\"name\":\"oenwashr\",\"ports\":[\"kcnqxwbpo\",\"ulpiuj\"]},{\"name\":\"asipqiio\",\"ports\":[\"qerpqlpqwcc\",\"uqgbdbutauvfbt\",\"uwhhmhykojoxafn\"]},{\"name\":\"lpichk\",\"ports\":[\"kcdyhbpk\",\"pwdreqnovvqf\",\"vljxywsu\",\"syrsndsytgadgvra\"]}]},{\"ipGroups\":[{\"name\":\"e\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"rwlqu\",\"ijfqkacewiipfp\",\"bjibwwiftohq\",\"vpuvks\"]}],\"vlanGroups\":[{\"name\":\"aknynfsynljphuop\",\"vlans\":[\"lqiyntorzihl\",\"osjswsr\",\"slyzrpzbchckqq\"]}],\"portGroups\":[{\"name\":\"xiy\",\"ports\":[\"i\",\"ynkedyatrwyhqmib\",\"yhwitsmypyynpcdp\",\"mnzgmwznmabi\"]},{\"name\":\"sorgj\",\"ports\":[\"ldtlwwr\",\"kdmtncvokotll\"]},{\"name\":\"yhgsy\",\"ports\":[\"gjltdtbnnhado\",\"crkvcikhnv\",\"amqgxqquezikyw\",\"gxk\"]}]},{\"ipGroups\":[{\"name\":\"tmelw\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"cjzkzivgvvcna\",\"rhyrnxxmueed\",\"drd\"]}],\"vlanGroups\":[{\"name\":\"wq\",\"vlans\":[\"healmfmtda\"]},{\"name\":\"gdv\",\"vlans\":[\"piohgwxrtfu\",\"xepxgyqagvrvmn\",\"k\",\"kghimdblxgwimfnj\"]},{\"name\":\"j\",\"vlans\":[\"szkkfoqre\",\"fkzikfj\"]}],\"portGroups\":[{\"name\":\"a\",\"ports\":[\"wczelpci\",\"elsfeaen\",\"abfatkl\"]}]},{\"ipGroups\":[{\"name\":\"jhwuaanozjos\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"l\",\"jrvxaglrv\"]},{\"name\":\"jwosytxitcskfck\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"ekkezzikhlyfjh\",\"gqggebdunygae\"]},{\"name\":\"db\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"xllrxcyjm\",\"a\"]},{\"name\":\"uvarmywdmjsjq\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"x\",\"rw\",\"yc\"]}],\"vlanGroups\":[{\"name\":\"p\",\"vlans\":[\"gymare\",\"n\",\"jxqugjhky\",\"ubeddg\"]},{\"name\":\"ofwq\",\"vlans\":[\"alkrmn\"]},{\"name\":\"jpxac\",\"vlans\":[\"dfnbyxbaaabjyv\",\"yffimrzrtuzqogs\",\"xnevfdnwn\"]}],\"portGroups\":[{\"name\":\"zsyyceuzso\",\"ports\":[\"ud\",\"frxtrthzvaytdwk\"]},{\"name\":\"rqubpaxhexiil\",\"ports\":[\"dtiirqt\",\"qoaxoruzfgs\"]},{\"name\":\"yfxrx\",\"ports\":[\"ptramxj\",\"zwl\"]},{\"name\":\"wxuqlcvydypatdoo\",\"ports\":[\"kniod\",\"oo\"]}]}],\"annotation\":\"wnujhemmsbvdk\"}")
            .toObject(AccessControlListProperties.class);
        Assertions.assertEquals("wnujhemmsbvdk", model.annotation());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("i", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("xqbzvddntwnd", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(4634265215487541073L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("zgpphrcgyncocpe",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("y",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("vkwlzuvccfwnf",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("jampmngnzscxaqw",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("ipheoflokeyyien",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("slfhotwm",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("oqvuhr",
            model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("qkwpyeicxmqc",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("e", model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("m", model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("rzayv",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.DESTINATION_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("bhj",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("qfbow",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("fgugnxkrxdqmid",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.DROP, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("jektcxsenh", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("vmbmp", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV6,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("fv", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("vmwy", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("ouyftaakc",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("jxgciqibrh", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("sdqrhzoymibmrq",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListProperties model
            = new AccessControlListProperties().withAnnotation("wnujhemmsbvdk")
                .withConfigurationType(ConfigurationType.FILE)
                .withAclsUrl("i")
                .withDefaultAction(CommunityActionTypes.DENY)
                .withMatchConfigurations(
                    Arrays.asList(
                        new AccessControlListMatchConfiguration().withMatchConfigurationName("xqbzvddntwnd")
                            .withSequenceNumber(4634265215487541073L)
                            .withIpAddressType(IpAddressType.IPV4)
                            .withMatchConditions(Arrays.asList(
                                new AccessControlListMatchCondition()
                                    .withProtocolTypes(Arrays.asList("zgpphrcgyncocpe", "fvm", "coofsxlzev", "bmqj"))
                                    .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("y"))
                                        .withInnerVlans(Arrays.asList("vkwlzuvccfwnf", "bacfionlebxetq", "tzxdpnqbqqwx",
                                            "jfeallnwsub"))
                                        .withVlanGroupNames(Arrays.asList("jampmngnzscxaqw", "ochcbonqvpkvl")))
                                    .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                        .withPrefixType(PrefixType.PREFIX)
                                        .withIpPrefixValues(Arrays.asList("ipheoflokeyyien", "bdlwtgrhpdjpj",
                                            "masxazjpqyegu", "lhbxxhejjzzvdud"))
                                        .withIpGroupNames(Arrays.asList("slfhotwm", "ynpwlbj", "pgacftadehxnlty")))
                                    .withEtherTypes(Arrays.asList("oqvuhr", "cffcyddglmj"))
                                    .withFragments(Arrays.asList("qkwpyeicxmqc", "wqvhkhixuigdt", "pbobjo"))
                                    .withIpLengths(Arrays.asList("e"))
                                    .withTtlValues(Arrays.asList("m"))
                                    .withDscpMarkings(Arrays.asList("rzayv", "t", "gvdfgiotkftutq", "ln"))
                                    .withPortCondition(
                                        new AccessControlListPortCondition().withPortType(
                                            PortType.DESTINATION_PORT)
                                            .withLayer4Protocol(Layer4Protocol.UDP)
                                            .withPorts(Arrays.asList("bhj", "big"))
                                            .withPortGroupNames(Arrays.asList("qfbow", "kanyktzlcuiywg", "ywgndrv"))
                                            .withFlags(Arrays.asList("fgugnxkrxdqmid", "thz"))),
                                new AccessControlListMatchCondition()
                                    .withProtocolTypes(Arrays.asList("ounqecano", "eupfhyhltrpm", "pjmcmatuokthfuiu",
                                        "odsfcpkvxodpuozm"))
                                    .withVlanMatchCondition(
                                        new VlanMatchCondition()
                                            .withVlans(Arrays.asList("agfuaxbezyiu", "kktwhrdxw", "ywqsmbsurexim",
                                                "ryocfsfksymdd"))
                                            .withInnerVlans(Arrays.asList("kiiuxhqyudxor"))
                                            .withVlanGroupNames(
                                                Arrays.asList("b", "oczvy", "fqrvkdvjsllrmvvd", "watkpnpulexxb")))
                                    .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                        .withPrefixType(PrefixType.PREFIX)
                                        .withIpPrefixValues(Arrays.asList("qzbqjvsov", "yokacspkw"))
                                        .withIpGroupNames(
                                            Arrays.asList("dobpxjmflbvvn", "hrk", "ciwwzjuqkhr", "ajiwkuo")))
                                    .withEtherTypes(Arrays.asList("ppusuesnzwdejba", "orxzdmohctbqvud", "xdn"))
                                    .withFragments(Arrays.asList("owgujjugwdkcglhs"))
                                    .withIpLengths(Arrays.asList("jdyggdtji"))
                                    .withTtlValues(Arrays.asList("kuofqweykhme"))
                                    .withDscpMarkings(Arrays.asList("fyexfwhy", "cibvyvdcsitynn"))
                                    .withPortCondition(
                                        new AccessControlListPortCondition().withPortType(
                                            PortType.SOURCE_PORT)
                                            .withLayer4Protocol(Layer4Protocol.UDP)
                                            .withPorts(Arrays.asList("fovgmkqsleyyvxy", "jpkcattpng"))
                                            .withPortGroupNames(Arrays.asList("cczsq", "jh", "mdajv"))
                                            .withFlags(Arrays.asList("ectehf", "qsc", "eypvhezrkg"))),
                                new AccessControlListMatchCondition()
                                    .withProtocolTypes(Arrays.asList("npiucgygevqznty", "mrbpizcdrqj", "dpydn"))
                                    .withVlanMatchCondition(
                                        new VlanMatchCondition()
                                            .withVlans(Arrays.asList("de", "ejzicwifsjtt", "zfbishcbkhaj"))
                                            .withInnerVlans(
                                                Arrays.asList("eamdp", "agalpbuxwgipwhon", "wkgshwa", "kix"))
                                            .withVlanGroupNames(Arrays.asList("njeputtmrywn", "zoqftiyqzrnkcqvy")))
                                    .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                        .withPrefixType(PrefixType.LONGEST_PREFIX)
                                        .withIpPrefixValues(Arrays.asList("cohoq", "nwvlryavwhheunmm", "hgyxzkonoc"))
                                        .withIpGroupNames(Arrays.asList("klyaxuconu", "szfkbe", "pewr")))
                                    .withEtherTypes(Arrays.asList("kg", "sauuimj", "vxieduugidyj"))
                                    .withFragments(Arrays.asList("byao"))
                                    .withIpLengths(Arrays.asList("xc"))
                                    .withTtlValues(Arrays.asList("pclhocohslk"))
                                    .withDscpMarkings(Arrays.asList("eggzfb", "hfmvfaxkffe"))
                                    .withPortCondition(
                                        new AccessControlListPortCondition().withPortType(PortType.SOURCE_PORT)
                                            .withLayer4Protocol(Layer4Protocol.UDP)
                                            .withPorts(Arrays.asList("xwburvjxxjns", "ydptkoen"))
                                            .withPortGroupNames(Arrays.asList("knvudwtiukb", "dng", "pocipazyxoegu"))
                                            .withFlags(Arrays.asList("lvmezyvshxmzsbbz")))))
                            .withActions(
                                Arrays
                                    .asList(
                                        new AccessControlListAction().withType(AclActionType.DROP)
                                            .withCounterName("jektcxsenh"),
                                        new AccessControlListAction().withType(AclActionType.DROP)
                                            .withCounterName("ffrzpwvlqdqgbiqy"),
                                        new AccessControlListAction().withType(AclActionType.COUNT)
                                            .withCounterName("aetcktvfcivfs"),
                                        new AccessControlListAction().withType(AclActionType.DROP)
                                            .withCounterName("uctqhjfbe"))),
                        new AccessControlListMatchConfiguration().withMatchConfigurationName("jcxerfuwu")
                            .withSequenceNumber(3193420375672203078L)
                            .withIpAddressType(IpAddressType.IPV6)
                            .withMatchConditions(Arrays.asList(new AccessControlListMatchCondition()
                                .withProtocolTypes(Arrays.asList("hrbnlankxmyskpbh"))
                                .withVlanMatchCondition(new VlanMatchCondition()
                                    .withVlans(Arrays.asList("kcxywnyt", "rsyn", "qidybyx", "zfcl"))
                                    .withInnerVlans(Arrays.asList("xdbabphlwr", "lfktsths"))
                                    .withVlanGroupNames(Arrays.asList("cmnyyazttb", "wwrq", "uedck", "ywbiexzfeyueax")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                    .withPrefixType(PrefixType.PREFIX)
                                    .withIpPrefixValues(Arrays.asList("qwalmuzyoxaepd"))
                                    .withIpGroupNames(Arrays.asList("ancuxrhd", "bavxbniwdjswzt")))
                                .withEtherTypes(Arrays.asList("rp"))
                                .withFragments(Arrays.asList("pcyvahfnljkyqx", "vuujq", "idokgjlj"))
                                .withIpLengths(Arrays.asList("gvcl", "bgsncghkjeszzhb"))
                                .withTtlValues(Arrays.asList("txfvgx", "fsm", "nehmpvecx", "odebfqkkrbmpu"))
                                .withDscpMarkings(Arrays.asList("iw", "lzlfbxzpuz", "cispnqzahmgkbr"))
                                .withPortCondition(new AccessControlListPortCondition()
                                    .withPortType(PortType.SOURCE_PORT)
                                    .withLayer4Protocol(Layer4Protocol.UDP)
                                    .withPorts(Arrays.asList("ijggmebfsiar", "utrc"))
                                    .withPortGroupNames(Arrays.asList("azzmhjrunmpxt"))
                                    .withFlags(Arrays.asList("hibnuqqkpika", "rgvtqag"))),
                                new AccessControlListMatchCondition()
                                    .withProtocolTypes(Arrays.asList("njbkcnxdhbttkph", "wpn", "jtoqne"))
                                    .withVlanMatchCondition(
                                        new VlanMatchCondition().withVlans(Arrays.asList("fpl", "hoxus"))
                                            .withInnerVlans(Arrays.asList("abgy", "psbjta"))
                                            .withVlanGroupNames(Arrays.asList("gxywpmue", "fjz", "fqkquj")))
                                    .withIpCondition(
                                        new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                            .withPrefixType(PrefixType.LONGEST_PREFIX)
                                            .withIpPrefixValues(Arrays.asList("bglaocqxtccm", "yudxytlmoy", "xv"))
                                            .withIpGroupNames(Arrays.asList("dw")))
                                    .withEtherTypes(Arrays.asList("pgn"))
                                    .withFragments(Arrays.asList("x"))
                                    .withIpLengths(Arrays.asList("xbzpfzab", "lcuhxwtctyqiklb", "ovplw"))
                                    .withTtlValues(Arrays.asList("vgyuguos", "mkfssxqukkfplgm", "sxnkjzkdeslpvlo"))
                                    .withDscpMarkings(Arrays.asList("yighxpk"))
                                    .withPortCondition(
                                        new AccessControlListPortCondition().withPortType(PortType.SOURCE_PORT)
                                            .withLayer4Protocol(Layer4Protocol.TCP)
                                            .withPorts(Arrays.asList("rdqmhjjdhtldwkyz", "uutkncw"))
                                            .withPortGroupNames(Arrays.asList("svlxotogtwrup", "sx", "nmic",
                                                "kvceoveilovnotyf"))
                                            .withFlags(
                                                Arrays.asList("aiuebbaumnyqu", "edeojnabc", "hsmtxpsiebtfhvp")))))
                            .withActions(Arrays.asList(new AccessControlListAction().withType(AclActionType.DROP)
                                .withCounterName("dzhlrq"),
                                new AccessControlListAction().withType(AclActionType.LOG)
                                    .withCounterName("kfrlhrxsbky"),
                                new AccessControlListAction().withType(AclActionType.DROP)
                                    .withCounterName("anuzbpzkafkuw"),
                                new AccessControlListAction().withType(AclActionType.COUNT).withCounterName("wbme"))),
                        new AccessControlListMatchConfiguration().withMatchConfigurationName("seyvj")
                            .withSequenceNumber(2840663437896188419L)
                            .withIpAddressType(IpAddressType.IPV4)
                            .withMatchConditions(
                                Arrays.asList(
                                    new AccessControlListMatchCondition()
                                        .withProtocolTypes(Arrays.asList("kpycgklwndnhjd", "uwhvylwzbtdhxujz"))
                                        .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("ow"))
                                            .withInnerVlans(Arrays.asList("rzqlveu", "lupj"))
                                            .withVlanGroupNames(Arrays.asList("fxobbcsws", "tjrip", "rbpbewtghfgblcg",
                                                "xzvlvqhjkbegib")))
                                        .withIpCondition(
                                            new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                                .withPrefixType(PrefixType.LONGEST_PREFIX)
                                                .withIpPrefixValues(
                                                    Arrays.asList("waloayqcgwr", "zjuzgwyz", "htxongmtsavjc", "pwxqp"))
                                                .withIpGroupNames(Arrays.asList("nftguvriuhpr", "mdyvxqtayriw", "ro")))
                                        .withEtherTypes(Arrays.asList("deemao", "mx", "gkvtmelmqkrhah", "ljuahaquhcdh"))
                                        .withFragments(Arrays.asList("alaexqpvfadmwsrc", "gvxp", "gomz", "fmisg"))
                                        .withIpLengths(Arrays.asList("b", "e"))
                                        .withTtlValues(Arrays.asList("wkz"))
                                        .withDscpMarkings(Arrays.asList("io", "rqhakauha", "hsfwxosowzxcug"))
                                        .withPortCondition(
                                            new AccessControlListPortCondition().withPortType(PortType.SOURCE_PORT)
                                                .withLayer4Protocol(Layer4Protocol.TCP)
                                                .withPorts(Arrays.asList("eiotwmcdytdx", "it", "nrjawgqwg"))
                                                .withPortGroupNames(Arrays.asList("isk"))
                                                .withFlags(Arrays.asList("oxdjebwpuc", "wfvovbv", "euecivyhzceuoj"))),
                                    new AccessControlListMatchCondition()
                                        .withProtocolTypes(Arrays.asList("wwncwzzhxgk", "rmgucnap"))
                                        .withVlanMatchCondition(new VlanMatchCondition()
                                            .withVlans(Arrays.asList("ellwptfdy", "pfqbuaceopzf"))
                                            .withInnerVlans(Arrays.asList("huaoppp", "qeqxo"))
                                            .withVlanGroupNames(Arrays.asList("ahzxctobgbk", "moizpos", "mgrcfbu")))
                                        .withIpCondition(
                                            new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                                .withPrefixType(PrefixType.PREFIX)
                                                .withIpPrefixValues(Arrays.asList("kxbpvj", "mjh"))
                                                .withIpGroupNames(Arrays.asList("yngudivk")))
                                        .withEtherTypes(Arrays.asList("exrmcqibycnojvk", "mefqsgzvahapjyzh"))
                                        .withFragments(Arrays.asList("qzcjrvxdj", "lmwlxkvugfhzo"))
                                        .withIpLengths(Arrays.asList("jvzunluthnnp", "nxipeil", "jzuaejxdultskzbb"))
                                        .withTtlValues(Arrays.asList("umveekgpwozuhkf", "bsjyofdx", "uusdttouwa"))
                                        .withDscpMarkings(Arrays.asList("kqvkelnsmvbxwyjs", "lh"))
                                        .withPortCondition(new AccessControlListPortCondition()
                                            .withPortType(PortType.DESTINATION_PORT)
                                            .withLayer4Protocol(Layer4Protocol.UDP)
                                            .withPorts(Arrays.asList("cslyjpk", "idzyexznelixhnr", "tfolhbnx"))
                                            .withPortGroupNames(
                                                Arrays.asList("laulppg", "dtpnapnyiropuhp", "gvpgy", "gqgitxmedjvcsl"))
                                            .withFlags(Arrays.asList("lnjixisxya")))))
                            .withActions(Arrays.asList(
                                new AccessControlListAction().withType(AclActionType.DROP).withCounterName("qzvszjf"),
                                new AccessControlListAction()
                                    .withType(AclActionType.LOG)
                                    .withCounterName("fdxxivetvtcqaqtd"))),
                        new AccessControlListMatchConfiguration().withMatchConfigurationName("mcbxvwvxysl")
                            .withSequenceNumber(2902711033817845170L)
                            .withIpAddressType(IpAddressType.IPV6)
                            .withMatchConditions(Arrays.asList(
                                new AccessControlListMatchCondition()
                                    .withProtocolTypes(
                                        Arrays.asList("gccymvaolpssl", "lfmmdnbbglzpswi", "d", "cwyhzdxssa"))
                                    .withVlanMatchCondition(
                                        new VlanMatchCondition().withVlans(Arrays.asList("nvdfznuda", "dvxzbncblylpst"))
                                            .withInnerVlans(Arrays.asList("hxsrzdzucersc"))
                                            .withVlanGroupNames(Arrays.asList("nevf")))
                                    .withIpCondition(
                                        new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                            .withPrefixType(PrefixType.LONGEST_PREFIX)
                                            .withIpPrefixValues(Arrays.asList("sslswtmweriof", "pyqs"))
                                            .withIpGroupNames(Arrays.asList("abnetshh")))
                                    .withEtherTypes(Arrays.asList("tkblmpewww", "bkrvrnsvshqj", "hxcr"))
                                    .withFragments(Arrays.asList("ovasrruvwbhsqfsu", "cgjbirxbp"))
                                    .withIpLengths(Arrays.asList("rfbjf", "twss", "t"))
                                    .withTtlValues(Arrays.asList("vjz", "exilzznfqqnvwpmq"))
                                    .withDscpMarkings(Arrays.asList("uoujmkcjhwqy", "jrybnwjewgdrjer"))
                                    .withPortCondition(
                                        new AccessControlListPortCondition().withPortType(PortType.SOURCE_PORT)
                                            .withLayer4Protocol(Layer4Protocol.TCP)
                                            .withPorts(Arrays.asList("mifthnzdnd", "l", "nayqi"))
                                            .withPortGroupNames(Arrays.asList("duhavhqlkt", "umaq", "lbg", "cdui"))
                                            .withFlags(Arrays.asList("nqpeh"))),
                                new AccessControlListMatchCondition().withProtocolTypes(Arrays.asList("xzxcl"))
                                    .withVlanMatchCondition(new VlanMatchCondition()
                                        .withVlans(Arrays.asList("hqzonosggbhcoh", "wdsjnkalju", "iiswacffgdkzze"))
                                        .withInnerVlans(Arrays.asList("vhqcrail", "pnppfuf"))
                                        .withVlanGroupNames(Arrays.asList("dmhdlxyjr", "sag", "fcnihgwq")))
                                    .withIpCondition(
                                        new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                            .withPrefixType(PrefixType.PREFIX)
                                            .withIpPrefixValues(Arrays.asList("cvkcvqvpkeqdcv", "rhvoods", "tbobz"))
                                            .withIpGroupNames(Arrays.asList("cjwvn", "dldwmgxc")))
                                    .withEtherTypes(Arrays.asList("edplvwiwubmw"))
                                    .withFragments(Arrays.asList("sldnkwwtppjflcxo"))
                                    .withIpLengths(Arrays.asList("konzmnsik", "mkqzeqqkdltfzxmh", "v", "gureodkwobdag"))
                                    .withTtlValues(Arrays.asList("bqdxbx", "akbogqxndlkzgxh", "ripl", "podxunkb"))
                                    .withDscpMarkings(Arrays.asList("mubyynt", "lrb", "tkoievseotgq", "l"))
                                    .withPortCondition(new AccessControlListPortCondition()
                                        .withPortType(PortType.DESTINATION_PORT)
                                        .withLayer4Protocol(Layer4Protocol.UDP)
                                        .withPorts(Arrays.asList("muvp", "ttdumorppxebmnzb", "bhjpglkfgohdne", "el"))
                                        .withPortGroupNames(Arrays.asList("sdyhtozfikdowwq"))
                                        .withFlags(Arrays.asList("wlauwzizxbmpg")))))
                            .withActions(Arrays.asList(
                                new AccessControlListAction().withType(AclActionType.COUNT).withCounterName("utwu"),
                                new AccessControlListAction().withType(AclActionType.LOG).withCounterName("pkhjwni"),
                                new AccessControlListAction().withType(AclActionType.LOG).withCounterName("uicpd")))))
                .withDynamicMatchConfigurations(Arrays.asList(
                    new CommonDynamicMatchConfiguration()
                        .withIpGroups(Arrays.asList(new IpGroupProperties().withName("vmbmp")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("fv", "efyw"))))
                        .withVlanGroups(Arrays.asList(
                            new VlanGroupProperties().withName("vmwy")
                                .withVlans(Arrays.asList("ouyftaakc", "wiyzvqtmnubexkp")),
                            new VlanGroupProperties().withName("smond")
                                .withVlans(Arrays.asList("uxvypomgkopkwh", "jvp", "jqg")),
                            new VlanGroupProperties().withName("smocmbq")
                                .withVlans(Arrays.asList("mkcxozapvh", "lxprglyatddckcbc"))))
                        .withPortGroups(Arrays.asList(new PortGroupProperties()
                            .withName("jxgciqibrh")
                            .withPorts(Arrays.asList("sdqrhzoymibmrq", "ibahwflus", "dtmhrkwofyyvoqa", "piexpbtgiw")),
                            new PortGroupProperties().withName("oenwashr")
                                .withPorts(Arrays.asList("kcnqxwbpo", "ulpiuj")),
                            new PortGroupProperties().withName("asipqiio")
                                .withPorts(Arrays.asList("qerpqlpqwcc", "uqgbdbutauvfbt", "uwhhmhykojoxafn")),
                            new PortGroupProperties().withName("lpichk")
                                .withPorts(Arrays.asList("kcdyhbpk", "pwdreqnovvqf", "vljxywsu", "syrsndsytgadgvra")))),
                    new CommonDynamicMatchConfiguration()
                        .withIpGroups(Arrays.asList(new IpGroupProperties().withName("e")
                            .withIpAddressType(IpAddressType.IPV4)
                            .withIpPrefixes(Arrays.asList("rwlqu", "ijfqkacewiipfp", "bjibwwiftohq", "vpuvks"))))
                        .withVlanGroups(Arrays.asList(new VlanGroupProperties().withName("aknynfsynljphuop")
                            .withVlans(Arrays.asList("lqiyntorzihl", "osjswsr", "slyzrpzbchckqq"))))
                        .withPortGroups(Arrays.asList(
                            new PortGroupProperties().withName("xiy")
                                .withPorts(Arrays.asList("i", "ynkedyatrwyhqmib", "yhwitsmypyynpcdp", "mnzgmwznmabi")),
                            new PortGroupProperties().withName("sorgj")
                                .withPorts(Arrays.asList("ldtlwwr", "kdmtncvokotll")),
                            new PortGroupProperties().withName("yhgsy")
                                .withPorts(Arrays.asList("gjltdtbnnhado", "crkvcikhnv", "amqgxqquezikyw", "gxk")))),
                    new CommonDynamicMatchConfiguration()
                        .withIpGroups(Arrays.asList(new IpGroupProperties().withName("tmelw")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("cjzkzivgvvcna", "rhyrnxxmueed", "drd"))))
                        .withVlanGroups(Arrays.asList(
                            new VlanGroupProperties().withName("wq").withVlans(Arrays.asList("healmfmtda")),
                            new VlanGroupProperties().withName("gdv")
                                .withVlans(Arrays.asList("piohgwxrtfu", "xepxgyqagvrvmn", "k", "kghimdblxgwimfnj")),
                            new VlanGroupProperties().withName("j").withVlans(Arrays.asList("szkkfoqre", "fkzikfj"))))
                        .withPortGroups(Arrays.asList(new PortGroupProperties().withName("a")
                            .withPorts(Arrays.asList("wczelpci", "elsfeaen", "abfatkl")))),
                    new CommonDynamicMatchConfiguration()
                        .withIpGroups(Arrays.asList(
                            new IpGroupProperties().withName("jhwuaanozjos")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("l", "jrvxaglrv")),
                            new IpGroupProperties().withName("jwosytxitcskfck")
                                .withIpAddressType(IpAddressType.IPV6)
                                .withIpPrefixes(Arrays.asList("ekkezzikhlyfjh", "gqggebdunygae")),
                            new IpGroupProperties().withName("db")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("xllrxcyjm", "a")),
                            new IpGroupProperties().withName("uvarmywdmjsjq")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("x", "rw", "yc"))))
                        .withVlanGroups(Arrays.asList(
                            new VlanGroupProperties().withName("p")
                                .withVlans(Arrays.asList("gymare", "n", "jxqugjhky", "ubeddg")),
                            new VlanGroupProperties().withName("ofwq").withVlans(Arrays.asList("alkrmn")),
                            new VlanGroupProperties().withName("jpxac")
                                .withVlans(Arrays.asList("dfnbyxbaaabjyv", "yffimrzrtuzqogs", "xnevfdnwn"))))
                        .withPortGroups(Arrays.asList(
                            new PortGroupProperties().withName("zsyyceuzso")
                                .withPorts(Arrays.asList("ud", "frxtrthzvaytdwk")),
                            new PortGroupProperties().withName("rqubpaxhexiil")
                                .withPorts(Arrays.asList("dtiirqt", "qoaxoruzfgs")),
                            new PortGroupProperties().withName("yfxrx").withPorts(Arrays.asList("ptramxj", "zwl")),
                            new PortGroupProperties().withName("wxuqlcvydypatdoo")
                                .withPorts(Arrays.asList("kniod", "oo"))))));
        model = BinaryData.fromObject(model).toObject(AccessControlListProperties.class);
        Assertions.assertEquals("wnujhemmsbvdk", model.annotation());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("i", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("xqbzvddntwnd", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(4634265215487541073L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("zgpphrcgyncocpe",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("y",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("vkwlzuvccfwnf",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("jampmngnzscxaqw",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("ipheoflokeyyien",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("slfhotwm",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("oqvuhr",
            model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("qkwpyeicxmqc",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("e", model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("m", model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("rzayv",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.DESTINATION_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("bhj",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("qfbow",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("fgugnxkrxdqmid",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.DROP, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("jektcxsenh", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("vmbmp", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV6,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("fv", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("vmwy", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("ouyftaakc",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("jxgciqibrh", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("sdqrhzoymibmrq",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }
}
