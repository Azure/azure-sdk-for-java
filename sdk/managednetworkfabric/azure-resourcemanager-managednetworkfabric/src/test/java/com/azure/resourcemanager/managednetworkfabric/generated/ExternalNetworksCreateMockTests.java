// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetwork;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPropertiesOptionAProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.RouteTargetInformation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExternalNetworksCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"peeringOption\":\"OptionB\",\"optionBProperties\":{\"importRouteTargets\":[\"b\"],\"exportRouteTargets\":[\"kdium\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"xwkscw\",\"shfihvlmsc\",\"ylaulpuex\",\"igxztyecxdslsp\"],\"importIpv6RouteTargets\":[\"d\",\"fyhsb\"],\"exportIpv4RouteTargets\":[\"lvsvsylt\",\"prqtfk\"],\"exportIpv6RouteTargets\":[\"rk\",\"monxdwfcuhbgftf\",\"qukkmvzeneg\",\"dqrjylwqqsemjhh\"]}},\"optionAProperties\":{\"mtu\":1599997113,\"vlanId\":896629323,\"fabricASN\":5038093681676520074,\"peerASN\":9185497905507567277,\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":977899252,\"multiplier\":1091646992},\"ingressAclId\":\"pfzwufifnj\",\"egressAclId\":\"hmjkykqf\",\"primaryIpv4Prefix\":\"mcyk\",\"primaryIpv6Prefix\":\"ysmkbndnrihpja\",\"secondaryIpv4Prefix\":\"cbeejnoignydlkr\",\"secondaryIpv6Prefix\":\"sbnmrmhkipjardvd\"},\"configurationState\":\"ErrorProvisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"MAT\",\"networkToNetworkInterconnectId\":\"a\",\"importRoutePolicyId\":\"npbie\",\"exportRoutePolicyId\":\"unddvjlpbjszqj\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"jvaycxrwknsb\",\"importIpv6RoutePolicyId\":\"ypbrzwi\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"cyhkecebtpgvut\",\"exportIpv6RoutePolicyId\":\"usfdywqrq\"},\"annotation\":\"wkendgr\"},\"id\":\"ff\",\"name\":\"xqqnugt\",\"type\":\"uyuwgnyj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ExternalNetwork response = manager.externalNetworks()
            .define("fnatntmcaxbqpm")
            .withExistingL3IsolationDomain("y", "yhutwedigivktecc")
            .withPeeringOption(PeeringOption.OPTIONA)
            .withOptionBProperties(new L3OptionBProperties().withImportRouteTargets(Arrays.asList("qcnb"))
                .withExportRouteTargets(Arrays.asList("tghnmelzvrchm"))
                .withRouteTargets(new RouteTargetInformation()
                    .withImportIpv4RouteTargets(Arrays.asList("rmwy", "h", "iyplgqqqgrbrhh"))
                    .withImportIpv6RouteTargets(Arrays.asList("gtip", "aoylwhfm", "bweasgypjixd"))
                    .withExportIpv4RouteTargets(Arrays.asList("ad", "d", "qeuwdvclsxdqdch", "zibixrgsrwxxqkwa"))
                    .withExportIpv6RouteTargets(Arrays.asList("b", "dgosijiqexqw"))))
            .withOptionAProperties(
                new ExternalNetworkPropertiesOptionAProperties().withPrimaryIpv4Prefix("cocdxvbeqzjd")
                    .withPrimaryIpv6Prefix("tutpdwnee")
                    .withSecondaryIpv4Prefix("ytlxugjr")
                    .withSecondaryIpv6Prefix("nffaofkvfruxzkfb")
                    .withMtu(376721612)
                    .withVlanId(1278621206)
                    .withPeerAsn(3208270147193306727L)
                    .withBfdConfiguration(
                        new BfdConfiguration().withIntervalInMilliSeconds(850094035).withMultiplier(1851940928))
                    .withIngressAclId("kvthwtamvmb")
                    .withEgressAclId("vxhfmuhkezuuc"))
            .withNetworkToNetworkInterconnectId("stvymdqaymqmyrnz")
            .withImportRoutePolicyId("bqkfnoxhvo")
            .withExportRoutePolicyId("dgfkrqsjrvpakxr")
            .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("xwejuguvnx")
                .withImportIpv6RoutePolicyId("hpzurnzoytkbead"))
            .withExportRoutePolicy(new ExportRoutePolicy().withExportIpv4RoutePolicyId("nrozo")
                .withExportIpv6RoutePolicyId("oxcbpkiwseac"))
            .withAnnotation("axdrpanhsxw")
            .create();

        Assertions.assertEquals(PeeringOption.OPTIONB, response.peeringOption());
        Assertions.assertEquals("b", response.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("kdium", response.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("xwkscw", response.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("d", response.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("lvsvsylt",
            response.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("rk", response.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals("mcyk", response.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("ysmkbndnrihpja", response.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("cbeejnoignydlkr", response.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("sbnmrmhkipjardvd", response.optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals(1599997113, response.optionAProperties().mtu());
        Assertions.assertEquals(896629323, response.optionAProperties().vlanId());
        Assertions.assertEquals(9185497905507567277L, response.optionAProperties().peerAsn());
        Assertions.assertEquals(977899252, response.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1091646992, response.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("pfzwufifnj", response.optionAProperties().ingressAclId());
        Assertions.assertEquals("hmjkykqf", response.optionAProperties().egressAclId());
        Assertions.assertEquals("a", response.networkToNetworkInterconnectId());
        Assertions.assertEquals("npbie", response.importRoutePolicyId());
        Assertions.assertEquals("unddvjlpbjszqj", response.exportRoutePolicyId());
        Assertions.assertEquals("jvaycxrwknsb", response.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("ypbrzwi", response.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("cyhkecebtpgvut", response.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("usfdywqrq", response.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("wkendgr", response.annotation());
    }
}
