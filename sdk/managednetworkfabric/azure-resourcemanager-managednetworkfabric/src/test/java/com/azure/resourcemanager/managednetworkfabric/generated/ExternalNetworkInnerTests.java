// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.ExternalNetworkInner;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPropertiesOptionAProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.RouteTargetInformation;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ExternalNetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExternalNetworkInner model = BinaryData.fromString(
            "{\"properties\":{\"peeringOption\":\"OptionB\",\"optionBProperties\":{\"importRouteTargets\":[\"wnsnlaimouxwks\",\"mud\",\"fco\"],\"exportRouteTargets\":[\"cziu\",\"wswjrkbqsjh\",\"tqqvy\",\"scyrfwbivqv\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"yzwvbhlimbyqec\",\"ood\",\"ikcdrdaasax\",\"obsmf\"],\"importIpv6RouteTargets\":[\"yjvzukosr\",\"awn\"],\"exportIpv4RouteTargets\":[\"lnk\",\"ywsxvjabjqqaxu\",\"vym\"],\"exportIpv6RouteTargets\":[\"dndoabhjxw\",\"qweuip\",\"pvksmit\"]}},\"optionAProperties\":{\"mtu\":996599116,\"vlanId\":47040018,\"fabricASN\":7489455954873500564,\"peerASN\":8923092334275652635,\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":967945302,\"multiplier\":1996640929},\"ingressAclId\":\"rakkld\",\"egressAclId\":\"c\",\"primaryIpv4Prefix\":\"cmfcnrjajq\",\"primaryIpv6Prefix\":\"txjtielnzqgx\",\"secondaryIpv4Prefix\":\"fbbmtlp\",\"secondaryIpv6Prefix\":\"gynoiprnzcali\"},\"configurationState\":\"ErrorDeprovisioning\",\"provisioningState\":\"Updating\",\"administrativeState\":\"Disabled\",\"networkToNetworkInterconnectId\":\"aqzi\",\"importRoutePolicyId\":\"qimiymqr\",\"exportRoutePolicyId\":\"guhfupe\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"vvoqsbpkf\",\"importIpv6RoutePolicyId\":\"nfkgxsyaowuzowpu\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"kc\",\"exportIpv6RoutePolicyId\":\"gukxrztiochluti\"},\"annotation\":\"qrudjizcbfzmcr\"},\"id\":\"fhi\",\"name\":\"c\",\"type\":\"mfbcpaqktkrum\"}")
            .toObject(ExternalNetworkInner.class);
        Assertions.assertEquals(PeeringOption.OPTIONB, model.peeringOption());
        Assertions.assertEquals("wnsnlaimouxwks", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("cziu", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("yzwvbhlimbyqec",
            model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("yjvzukosr", model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("lnk", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("dndoabhjxw", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals("cmfcnrjajq", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("txjtielnzqgx", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("fbbmtlp", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("gynoiprnzcali", model.optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals(996599116, model.optionAProperties().mtu());
        Assertions.assertEquals(47040018, model.optionAProperties().vlanId());
        Assertions.assertEquals(8923092334275652635L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(967945302, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1996640929, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("rakkld", model.optionAProperties().ingressAclId());
        Assertions.assertEquals("c", model.optionAProperties().egressAclId());
        Assertions.assertEquals("aqzi", model.networkToNetworkInterconnectId());
        Assertions.assertEquals("qimiymqr", model.importRoutePolicyId());
        Assertions.assertEquals("guhfupe", model.exportRoutePolicyId());
        Assertions.assertEquals("vvoqsbpkf", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("nfkgxsyaowuzowpu", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("kc", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("gukxrztiochluti", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("qrudjizcbfzmcr", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExternalNetworkInner model = new ExternalNetworkInner().withPeeringOption(PeeringOption.OPTIONB)
            .withOptionBProperties(
                new L3OptionBProperties().withImportRouteTargets(Arrays.asList("wnsnlaimouxwks", "mud", "fco"))
                    .withExportRouteTargets(Arrays.asList("cziu", "wswjrkbqsjh", "tqqvy", "scyrfwbivqv"))
                    .withRouteTargets(new RouteTargetInformation()
                        .withImportIpv4RouteTargets(Arrays.asList("yzwvbhlimbyqec", "ood", "ikcdrdaasax", "obsmf"))
                        .withImportIpv6RouteTargets(Arrays.asList("yjvzukosr", "awn"))
                        .withExportIpv4RouteTargets(Arrays.asList("lnk", "ywsxvjabjqqaxu", "vym"))
                        .withExportIpv6RouteTargets(Arrays.asList("dndoabhjxw", "qweuip", "pvksmit"))))
            .withOptionAProperties(new ExternalNetworkPropertiesOptionAProperties().withPrimaryIpv4Prefix("cmfcnrjajq")
                .withPrimaryIpv6Prefix("txjtielnzqgx")
                .withSecondaryIpv4Prefix("fbbmtlp")
                .withSecondaryIpv6Prefix("gynoiprnzcali")
                .withMtu(996599116)
                .withVlanId(47040018)
                .withPeerAsn(8923092334275652635L)
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(967945302).withMultiplier(1996640929))
                .withIngressAclId("rakkld")
                .withEgressAclId("c"))
            .withNetworkToNetworkInterconnectId("aqzi")
            .withImportRoutePolicyId("qimiymqr")
            .withExportRoutePolicyId("guhfupe")
            .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("vvoqsbpkf")
                .withImportIpv6RoutePolicyId("nfkgxsyaowuzowpu"))
            .withExportRoutePolicy(new ExportRoutePolicy().withExportIpv4RoutePolicyId("kc")
                .withExportIpv6RoutePolicyId("gukxrztiochluti"))
            .withAnnotation("qrudjizcbfzmcr");
        model = BinaryData.fromObject(model).toObject(ExternalNetworkInner.class);
        Assertions.assertEquals(PeeringOption.OPTIONB, model.peeringOption());
        Assertions.assertEquals("wnsnlaimouxwks", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("cziu", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("yzwvbhlimbyqec",
            model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("yjvzukosr", model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("lnk", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("dndoabhjxw", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals("cmfcnrjajq", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("txjtielnzqgx", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("fbbmtlp", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("gynoiprnzcali", model.optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals(996599116, model.optionAProperties().mtu());
        Assertions.assertEquals(47040018, model.optionAProperties().vlanId());
        Assertions.assertEquals(8923092334275652635L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(967945302, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1996640929, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("rakkld", model.optionAProperties().ingressAclId());
        Assertions.assertEquals("c", model.optionAProperties().egressAclId());
        Assertions.assertEquals("aqzi", model.networkToNetworkInterconnectId());
        Assertions.assertEquals("qimiymqr", model.importRoutePolicyId());
        Assertions.assertEquals("guhfupe", model.exportRoutePolicyId());
        Assertions.assertEquals("vvoqsbpkf", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("nfkgxsyaowuzowpu", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("kc", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("gukxrztiochluti", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("qrudjizcbfzmcr", model.annotation());
    }
}
