// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.RouteTargetInformation;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPatchablePropertiesOptionAProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VpnConfigurationPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VpnConfigurationPatchableProperties model =
            BinaryData
                .fromString(
                    "{\"networkToNetworkInterconnectId\":\"gzrujlqc\",\"peeringOption\":\"OptionB\",\"optionBProperties\":{\"importRouteTargets\":[\"eiqbcbgvsbts\"],\"exportRouteTargets\":[\"oxa\",\"hxuvjhxm\",\"rqstjcme\",\"wmlgicvnpv\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"jnaqyq\",\"pslzmvcds\",\"mwbitekdtfo\"],\"importIpv6RouteTargets\":[\"iy\",\"x\",\"ich\"],\"exportIpv4RouteTargets\":[\"fzdqekiv\",\"cpzcvdizul\",\"qtbhtr\"],\"exportIpv6RouteTargets\":[\"zlp\"]}},\"optionAProperties\":{\"primaryIpv4Prefix\":\"mxmdutzfkgilnou\",\"primaryIpv6Prefix\":\"cgndjgdp\",\"secondaryIpv4Prefix\":\"ggqqyeqfcb\",\"secondaryIpv6Prefix\":\"lpyuflqjf\",\"mtu\":1679929434,\"vlanId\":446521105,\"peerASN\":4335062738283435533,\"bfdConfiguration\":{\"administrativeState\":\"RMA\",\"intervalInMilliSeconds\":1471378108,\"multiplier\":373324841}}}")
                .toObject(VpnConfigurationPatchableProperties.class);
        Assertions.assertEquals("gzrujlqc", model.networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONB, model.peeringOption());
        Assertions.assertEquals("eiqbcbgvsbts", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("oxa", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("jnaqyq", model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("iy", model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("fzdqekiv", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("zlp", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(1679929434, model.optionAProperties().mtu());
        Assertions.assertEquals(446521105, model.optionAProperties().vlanId());
        Assertions.assertEquals(4335062738283435533L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(1471378108, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(373324841, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("mxmdutzfkgilnou", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("cgndjgdp", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("ggqqyeqfcb", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("lpyuflqjf", model.optionAProperties().secondaryIpv6Prefix());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VpnConfigurationPatchableProperties model =
            new VpnConfigurationPatchableProperties()
                .withNetworkToNetworkInterconnectId("gzrujlqc")
                .withPeeringOption(PeeringOption.OPTIONB)
                .withOptionBProperties(
                    new OptionBProperties()
                        .withImportRouteTargets(Arrays.asList("eiqbcbgvsbts"))
                        .withExportRouteTargets(Arrays.asList("oxa", "hxuvjhxm", "rqstjcme", "wmlgicvnpv"))
                        .withRouteTargets(
                            new RouteTargetInformation()
                                .withImportIpv4RouteTargets(Arrays.asList("jnaqyq", "pslzmvcds", "mwbitekdtfo"))
                                .withImportIpv6RouteTargets(Arrays.asList("iy", "x", "ich"))
                                .withExportIpv4RouteTargets(Arrays.asList("fzdqekiv", "cpzcvdizul", "qtbhtr"))
                                .withExportIpv6RouteTargets(Arrays.asList("zlp"))))
                .withOptionAProperties(
                    new VpnConfigurationPatchablePropertiesOptionAProperties()
                        .withMtu(1679929434)
                        .withVlanId(446521105)
                        .withPeerAsn(4335062738283435533L)
                        .withBfdConfiguration(
                            new BfdConfiguration().withIntervalInMilliSeconds(1471378108).withMultiplier(373324841))
                        .withPrimaryIpv4Prefix("mxmdutzfkgilnou")
                        .withPrimaryIpv6Prefix("cgndjgdp")
                        .withSecondaryIpv4Prefix("ggqqyeqfcb")
                        .withSecondaryIpv6Prefix("lpyuflqjf"));
        model = BinaryData.fromObject(model).toObject(VpnConfigurationPatchableProperties.class);
        Assertions.assertEquals("gzrujlqc", model.networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONB, model.peeringOption());
        Assertions.assertEquals("eiqbcbgvsbts", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("oxa", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("jnaqyq", model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("iy", model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("fzdqekiv", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("zlp", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(1679929434, model.optionAProperties().mtu());
        Assertions.assertEquals(446521105, model.optionAProperties().vlanId());
        Assertions.assertEquals(4335062738283435533L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(1471378108, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(373324841, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("mxmdutzfkgilnou", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("cgndjgdp", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("ggqqyeqfcb", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("lpyuflqjf", model.optionAProperties().secondaryIpv6Prefix());
    }
}
