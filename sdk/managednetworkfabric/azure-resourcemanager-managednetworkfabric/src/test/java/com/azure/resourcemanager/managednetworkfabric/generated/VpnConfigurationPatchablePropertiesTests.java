// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.RouteTargetInformation;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPatchablePropertiesOptionAProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VpnConfigurationPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VpnConfigurationPatchableProperties model = BinaryData.fromString(
            "{\"networkToNetworkInterconnectId\":\"ylajam\",\"peeringOption\":\"OptionA\",\"optionBProperties\":{\"importRouteTargets\":[\"tpzcr\",\"yklleynqanhkiggl\",\"lwalhvu\",\"hg\"],\"exportRouteTargets\":[\"etxdqcmyctajqzj\",\"alec\",\"bibiwks\",\"egyxsbfpzvoik\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"czfzwushlc\",\"pblalhhez\",\"fkissaidqzsaa\"],\"importIpv6RouteTargets\":[\"sgptotxjq\",\"ia\"],\"exportIpv4RouteTargets\":[\"lrtbfij\",\"z\",\"aoijolb\"],\"exportIpv6RouteTargets\":[\"ktwieope\",\"e\",\"xq\",\"wrswyiljp\"]}},\"optionAProperties\":{\"primaryIpv4Prefix\":\"gxyxyauxredd\",\"primaryIpv6Prefix\":\"mcnltmwytkujsqyc\",\"secondaryIpv4Prefix\":\"oxfab\",\"secondaryIpv6Prefix\":\"gpwb\",\"mtu\":382092821,\"vlanId\":1878226203,\"peerASN\":1952930394496589738,\"bfdConfiguration\":{\"administrativeState\":\"RMA\",\"intervalInMilliSeconds\":1968581632,\"multiplier\":216296759}}}")
            .toObject(VpnConfigurationPatchableProperties.class);
        Assertions.assertEquals("ylajam", model.networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONA, model.peeringOption());
        Assertions.assertEquals("tpzcr", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("etxdqcmyctajqzj", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("czfzwushlc", model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("sgptotxjq", model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("lrtbfij", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("ktwieope", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(382092821, model.optionAProperties().mtu());
        Assertions.assertEquals(1878226203, model.optionAProperties().vlanId());
        Assertions.assertEquals(1952930394496589738L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(1968581632, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(216296759, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("gxyxyauxredd", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("mcnltmwytkujsqyc", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("oxfab", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("gpwb", model.optionAProperties().secondaryIpv6Prefix());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VpnConfigurationPatchableProperties model
            = new VpnConfigurationPatchableProperties().withNetworkToNetworkInterconnectId("ylajam")
                .withPeeringOption(PeeringOption.OPTIONA)
                .withOptionBProperties(new OptionBProperties()
                    .withImportRouteTargets(Arrays.asList("tpzcr", "yklleynqanhkiggl", "lwalhvu", "hg"))
                    .withExportRouteTargets(Arrays.asList("etxdqcmyctajqzj", "alec", "bibiwks", "egyxsbfpzvoik"))
                    .withRouteTargets(new RouteTargetInformation()
                        .withImportIpv4RouteTargets(Arrays.asList("czfzwushlc", "pblalhhez", "fkissaidqzsaa"))
                        .withImportIpv6RouteTargets(Arrays.asList("sgptotxjq", "ia"))
                        .withExportIpv4RouteTargets(Arrays.asList("lrtbfij", "z", "aoijolb"))
                        .withExportIpv6RouteTargets(Arrays.asList("ktwieope", "e", "xq", "wrswyiljp"))))
                .withOptionAProperties(new VpnConfigurationPatchablePropertiesOptionAProperties().withMtu(382092821)
                    .withVlanId(1878226203)
                    .withPeerAsn(1952930394496589738L)
                    .withBfdConfiguration(
                        new BfdConfiguration().withIntervalInMilliSeconds(1968581632).withMultiplier(216296759))
                    .withPrimaryIpv4Prefix("gxyxyauxredd")
                    .withPrimaryIpv6Prefix("mcnltmwytkujsqyc")
                    .withSecondaryIpv4Prefix("oxfab")
                    .withSecondaryIpv6Prefix("gpwb"));
        model = BinaryData.fromObject(model).toObject(VpnConfigurationPatchableProperties.class);
        Assertions.assertEquals("ylajam", model.networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONA, model.peeringOption());
        Assertions.assertEquals("tpzcr", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("etxdqcmyctajqzj", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("czfzwushlc", model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("sgptotxjq", model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("lrtbfij", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("ktwieope", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(382092821, model.optionAProperties().mtu());
        Assertions.assertEquals(1878226203, model.optionAProperties().vlanId());
        Assertions.assertEquals(1952930394496589738L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(1968581632, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(216296759, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("gxyxyauxredd", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("mcnltmwytkujsqyc", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("oxfab", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("gpwb", model.optionAProperties().secondaryIpv6Prefix());
    }
}
