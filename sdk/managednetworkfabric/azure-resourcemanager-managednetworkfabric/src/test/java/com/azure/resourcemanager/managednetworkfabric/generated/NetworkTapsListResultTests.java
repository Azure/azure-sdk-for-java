// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapInner;
import com.azure.resourcemanager.managednetworkfabric.models.DestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.IsolationDomainProperties;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapPropertiesDestinationsItem;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapsListResult;
import com.azure.resourcemanager.managednetworkfabric.models.PollingType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapsListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"networkPacketBrokerId\":\"mslub\",\"sourceTapRuleId\":\"nyfuysjhv\",\"destinations\":[{\"name\":\"lfswarmybwmro\",\"destinationType\":\"Direct\",\"destinationId\":\"syqnipehfww\",\"isolationDomainProperties\":{},\"destinationTapRuleId\":\"nxiajuvj\"},{\"name\":\"fjisosfzlnraxnf\",\"destinationType\":\"IsolationDomain\",\"destinationId\":\"ax\",\"isolationDomainProperties\":{},\"destinationTapRuleId\":\"jixgofqdqws\"},{\"name\":\"ihuvrqpbxdoicqpk\",\"destinationType\":\"IsolationDomain\",\"destinationId\":\"dprpensbmzjrituk\",\"isolationDomainProperties\":{},\"destinationTapRuleId\":\"hbfexmizz\"}],\"pollingType\":\"Push\",\"configurationState\":\"Accepted\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"Disabled\",\"annotation\":\"ndu\"},\"location\":\"uwdvolxt\",\"tags\":{\"s\":\"ic\",\"mjfgoxedrmra\":\"lzbki\",\"yiog\":\"hvchvv\",\"wxcsmx\":\"ntnwzruzso\"},\"id\":\"lcappnvcebspci\",\"name\":\"yomhkdwuwedupb\",\"type\":\"mzkwhjjsqwhae\"}],\"nextLink\":\"fv\"}")
                .toObject(NetworkTapsListResult.class);
        Assertions.assertEquals("uwdvolxt", model.value().get(0).location());
        Assertions.assertEquals("ic", model.value().get(0).tags().get("s"));
        Assertions.assertEquals("mslub", model.value().get(0).networkPacketBrokerId());
        Assertions.assertEquals("lfswarmybwmro", model.value().get(0).destinations().get(0).name());
        Assertions.assertEquals(DestinationType.DIRECT, model.value().get(0).destinations().get(0).destinationType());
        Assertions.assertEquals("syqnipehfww", model.value().get(0).destinations().get(0).destinationId());
        Assertions.assertEquals("nxiajuvj", model.value().get(0).destinations().get(0).destinationTapRuleId());
        Assertions.assertEquals(PollingType.PUSH, model.value().get(0).pollingType());
        Assertions.assertEquals("ndu", model.value().get(0).annotation());
        Assertions.assertEquals("fv", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapsListResult model =
            new NetworkTapsListResult()
                .withValue(
                    Arrays
                        .asList(
                            new NetworkTapInner()
                                .withLocation("uwdvolxt")
                                .withTags(
                                    mapOf("s", "ic", "mjfgoxedrmra", "lzbki", "yiog", "hvchvv", "wxcsmx", "ntnwzruzso"))
                                .withNetworkPacketBrokerId("mslub")
                                .withDestinations(
                                    Arrays
                                        .asList(
                                            new NetworkTapPropertiesDestinationsItem()
                                                .withName("lfswarmybwmro")
                                                .withDestinationType(DestinationType.DIRECT)
                                                .withDestinationId("syqnipehfww")
                                                .withIsolationDomainProperties(new IsolationDomainProperties())
                                                .withDestinationTapRuleId("nxiajuvj"),
                                            new NetworkTapPropertiesDestinationsItem()
                                                .withName("fjisosfzlnraxnf")
                                                .withDestinationType(DestinationType.ISOLATION_DOMAIN)
                                                .withDestinationId("ax")
                                                .withIsolationDomainProperties(new IsolationDomainProperties())
                                                .withDestinationTapRuleId("jixgofqdqws"),
                                            new NetworkTapPropertiesDestinationsItem()
                                                .withName("ihuvrqpbxdoicqpk")
                                                .withDestinationType(DestinationType.ISOLATION_DOMAIN)
                                                .withDestinationId("dprpensbmzjrituk")
                                                .withIsolationDomainProperties(new IsolationDomainProperties())
                                                .withDestinationTapRuleId("hbfexmizz")))
                                .withPollingType(PollingType.PUSH)
                                .withAnnotation("ndu")))
                .withNextLink("fv");
        model = BinaryData.fromObject(model).toObject(NetworkTapsListResult.class);
        Assertions.assertEquals("uwdvolxt", model.value().get(0).location());
        Assertions.assertEquals("ic", model.value().get(0).tags().get("s"));
        Assertions.assertEquals("mslub", model.value().get(0).networkPacketBrokerId());
        Assertions.assertEquals("lfswarmybwmro", model.value().get(0).destinations().get(0).name());
        Assertions.assertEquals(DestinationType.DIRECT, model.value().get(0).destinations().get(0).destinationType());
        Assertions.assertEquals("syqnipehfww", model.value().get(0).destinations().get(0).destinationId());
        Assertions.assertEquals("nxiajuvj", model.value().get(0).destinations().get(0).destinationTapRuleId());
        Assertions.assertEquals(PollingType.PUSH, model.value().get(0).pollingType());
        Assertions.assertEquals("ndu", model.value().get(0).annotation());
        Assertions.assertEquals("fv", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
