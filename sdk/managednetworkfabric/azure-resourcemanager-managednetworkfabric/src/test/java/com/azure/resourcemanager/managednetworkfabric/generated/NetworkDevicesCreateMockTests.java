// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkDevice;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkDevicesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"version\":\"gl\",\"networkDeviceSku\":\"sfgb\",\"networkDeviceRole\":\"ToR\",\"networkRackId\":\"azlycx\",\"managementIpv4Address\":\"brukhqbuoyr\",\"managementIpv6Address\":\"kgqdmvvvjm\",\"configurationState\":\"Accepted\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"MAT\",\"hostName\":\"sveamsea\",\"serialNumber\":\"uvhxiohglmufzuuy\",\"annotation\":\"haeem\"},\"location\":\"osdpxtsdyw\",\"tags\":{\"mixaqgfpuhhzwr\":\"fvwgwphwxiav\",\"lixa\":\"jumlkjsvkbt\",\"jmsngmluyr\":\"phkgminhecjgdj\"},\"id\":\"kpismmrmrj\",\"name\":\"jthizsabcylz\",\"type\":\"ietumzenkrdr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkDevice response = manager.networkDevices()
            .define("ihatajdt")
            .withRegion("bhgjajkvwkocx")
            .withExistingResourceGroup("kxsqkuzabrs")
            .withTags(mapOf("bgvlpg", "zllvna"))
            .withNetworkDeviceSku("jyiehkxgfuzqqnz")
            .withHostname("acrktjoygyns")
            .withSerialNumber("gzbbnuglquarbruv")
            .withAnnotation("eyxwrmupzpe")
            .create();

        Assertions.assertEquals("osdpxtsdyw", response.location());
        Assertions.assertEquals("fvwgwphwxiav", response.tags().get("mixaqgfpuhhzwr"));
        Assertions.assertEquals("sfgb", response.networkDeviceSku());
        Assertions.assertEquals("sveamsea", response.hostname());
        Assertions.assertEquals("uvhxiohglmufzuuy", response.serialNumber());
        Assertions.assertEquals("haeem", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
