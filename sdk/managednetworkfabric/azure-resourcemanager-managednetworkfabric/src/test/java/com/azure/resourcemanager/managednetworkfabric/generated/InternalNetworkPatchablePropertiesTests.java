// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InternalNetworkPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternalNetworkPatchableProperties model = BinaryData.fromString(
            "{\"mtu\":1321268747,\"connectedIPv4Subnets\":[{\"prefix\":\"ailfemjjzak\",\"annotation\":\"jiqul\"},{\"prefix\":\"qx\",\"annotation\":\"mvrscmqerndbrny\"},{\"prefix\":\"ofltfnnxrkadjfy\",\"annotation\":\"fmu\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"ri\",\"annotation\":\"ohykfkxbbcbrw\"},{\"prefix\":\"iutgnjizbeewoiy\",\"annotation\":\"vzbjuyrsrzi\"},{\"prefix\":\"c\",\"annotation\":\"xgbdsuifrevka\"}],\"importRoutePolicyId\":\"ezkiswqjmdghsypa\",\"exportRoutePolicyId\":\"bjufptbjczjnciu\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"vldaswv\",\"importIpv6RoutePolicyId\":\"i\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"zlgcndhzxrrf\",\"exportIpv6RoutePolicyId\":\"srhkhgsnxuwwkpph\"},\"ingressAclId\":\"sbzxl\",\"egressAclId\":\"xomeikjclwzacn\",\"isMonitoringEnabled\":\"False\"}")
            .toObject(InternalNetworkPatchableProperties.class);
        Assertions.assertEquals(1321268747, model.mtu());
        Assertions.assertEquals("jiqul", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("ailfemjjzak", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("ohykfkxbbcbrw", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("ri", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("ezkiswqjmdghsypa", model.importRoutePolicyId());
        Assertions.assertEquals("bjufptbjczjnciu", model.exportRoutePolicyId());
        Assertions.assertEquals("vldaswv", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("i", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("zlgcndhzxrrf", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("srhkhgsnxuwwkpph", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("sbzxl", model.ingressAclId());
        Assertions.assertEquals("xomeikjclwzacn", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.isMonitoringEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternalNetworkPatchableProperties model = new InternalNetworkPatchableProperties().withMtu(1321268747)
            .withConnectedIPv4Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("jiqul").withPrefix("ailfemjjzak"),
                    new ConnectedSubnet().withAnnotation("mvrscmqerndbrny").withPrefix("qx"),
                    new ConnectedSubnet().withAnnotation("fmu").withPrefix("ofltfnnxrkadjfy")))
            .withConnectedIPv6Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("ohykfkxbbcbrw").withPrefix("ri"),
                    new ConnectedSubnet().withAnnotation("vzbjuyrsrzi").withPrefix("iutgnjizbeewoiy"),
                    new ConnectedSubnet().withAnnotation("xgbdsuifrevka").withPrefix("c")))
            .withImportRoutePolicyId("ezkiswqjmdghsypa")
            .withExportRoutePolicyId("bjufptbjczjnciu")
            .withImportRoutePolicy(
                new ImportRoutePolicy().withImportIpv4RoutePolicyId("vldaswv").withImportIpv6RoutePolicyId("i"))
            .withExportRoutePolicy(new ExportRoutePolicy().withExportIpv4RoutePolicyId("zlgcndhzxrrf")
                .withExportIpv6RoutePolicyId("srhkhgsnxuwwkpph"))
            .withIngressAclId("sbzxl")
            .withEgressAclId("xomeikjclwzacn")
            .withIsMonitoringEnabled(IsMonitoringEnabled.FALSE);
        model = BinaryData.fromObject(model).toObject(InternalNetworkPatchableProperties.class);
        Assertions.assertEquals(1321268747, model.mtu());
        Assertions.assertEquals("jiqul", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("ailfemjjzak", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("ohykfkxbbcbrw", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("ri", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("ezkiswqjmdghsypa", model.importRoutePolicyId());
        Assertions.assertEquals("bjufptbjczjnciu", model.exportRoutePolicyId());
        Assertions.assertEquals("vldaswv", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("i", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("zlgcndhzxrrf", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("srhkhgsnxuwwkpph", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("sbzxl", model.ingressAclId());
        Assertions.assertEquals("xomeikjclwzacn", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.isMonitoringEnabled());
    }
}
