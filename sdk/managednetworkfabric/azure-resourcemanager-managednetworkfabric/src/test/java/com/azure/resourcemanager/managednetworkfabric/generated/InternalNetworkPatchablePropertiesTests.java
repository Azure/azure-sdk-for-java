// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InternalNetworkPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternalNetworkPatchableProperties model =
            BinaryData
                .fromString(
                    "{\"mtu\":1826528390,\"connectedIPv4Subnets\":[{\"prefix\":\"cayer\",\"annotation\":\"ransyby\"},{\"prefix\":\"polwzrghsrlei\",\"annotation\":\"fscjfn\"},{\"prefix\":\"jwvuag\",\"annotation\":\"wtltngvmreuptrk\"},{\"prefix\":\"zmijajwo\",\"annotation\":\"fsvagh\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"nwlslrcigtzjcvbx\",\"annotation\":\"a\"},{\"prefix\":\"snsso\",\"annotation\":\"xpavid\"},{\"prefix\":\"ievw\",\"annotation\":\"cvvy\"},{\"prefix\":\"zslp\",\"annotation\":\"gcbdsvalpnptw\"}],\"importRoutePolicyId\":\"kx\",\"exportRoutePolicyId\":\"azwu\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"qvn\",\"importIpv6RoutePolicyId\":\"bfe\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"diuhzzgql\",\"exportIpv6RoutePolicyId\":\"aewzgiudjp\"},\"ingressAclId\":\"qhttqhnmhkre\",\"egressAclId\":\"dsuxheqdgcrux\",\"isMonitoringEnabled\":\"False\"}")
                .toObject(InternalNetworkPatchableProperties.class);
        Assertions.assertEquals(1826528390, model.mtu());
        Assertions.assertEquals("ransyby", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("cayer", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("a", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("nwlslrcigtzjcvbx", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("kx", model.importRoutePolicyId());
        Assertions.assertEquals("azwu", model.exportRoutePolicyId());
        Assertions.assertEquals("qvn", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("bfe", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("diuhzzgql", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("aewzgiudjp", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("qhttqhnmhkre", model.ingressAclId());
        Assertions.assertEquals("dsuxheqdgcrux", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.isMonitoringEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternalNetworkPatchableProperties model =
            new InternalNetworkPatchableProperties()
                .withMtu(1826528390)
                .withConnectedIPv4Subnets(
                    Arrays
                        .asList(
                            new ConnectedSubnet().withAnnotation("ransyby").withPrefix("cayer"),
                            new ConnectedSubnet().withAnnotation("fscjfn").withPrefix("polwzrghsrlei"),
                            new ConnectedSubnet().withAnnotation("wtltngvmreuptrk").withPrefix("jwvuag"),
                            new ConnectedSubnet().withAnnotation("fsvagh").withPrefix("zmijajwo")))
                .withConnectedIPv6Subnets(
                    Arrays
                        .asList(
                            new ConnectedSubnet().withAnnotation("a").withPrefix("nwlslrcigtzjcvbx"),
                            new ConnectedSubnet().withAnnotation("xpavid").withPrefix("snsso"),
                            new ConnectedSubnet().withAnnotation("cvvy").withPrefix("ievw"),
                            new ConnectedSubnet().withAnnotation("gcbdsvalpnptw").withPrefix("zslp")))
                .withImportRoutePolicyId("kx")
                .withExportRoutePolicyId("azwu")
                .withImportRoutePolicy(
                    new ImportRoutePolicy().withImportIpv4RoutePolicyId("qvn").withImportIpv6RoutePolicyId("bfe"))
                .withExportRoutePolicy(
                    new ExportRoutePolicy()
                        .withExportIpv4RoutePolicyId("diuhzzgql")
                        .withExportIpv6RoutePolicyId("aewzgiudjp"))
                .withIngressAclId("qhttqhnmhkre")
                .withEgressAclId("dsuxheqdgcrux")
                .withIsMonitoringEnabled(IsMonitoringEnabled.FALSE);
        model = BinaryData.fromObject(model).toObject(InternalNetworkPatchableProperties.class);
        Assertions.assertEquals(1826528390, model.mtu());
        Assertions.assertEquals("ransyby", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("cayer", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("a", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("nwlslrcigtzjcvbx", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("kx", model.importRoutePolicyId());
        Assertions.assertEquals("azwu", model.exportRoutePolicyId());
        Assertions.assertEquals("qvn", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("bfe", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("diuhzzgql", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("aewzgiudjp", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("qhttqhnmhkre", model.ingressAclId());
        Assertions.assertEquals("dsuxheqdgcrux", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.isMonitoringEnabled());
    }
}
