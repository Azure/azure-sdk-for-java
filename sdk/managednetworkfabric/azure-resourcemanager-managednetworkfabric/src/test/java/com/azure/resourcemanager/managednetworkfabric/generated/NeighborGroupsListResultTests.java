// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NeighborGroupInner;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupDestination;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NeighborGroupsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NeighborGroupsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"networkTapIds\":[\"hci\"],\"networkTapRuleIds\":[\"dv\"],\"provisioningState\":\"Deleting\",\"destination\":{\"ipv4Addresses\":[\"qhs\"],\"ipv6Addresses\":[\"fpwpqbyejuwyqwd\",\"igmghginztx\",\"ujkhnjcmrnkfmkh\"]},\"annotation\":\"twmlmhjnqtqeah\"},\"location\":\"dvragpokddxejhh\",\"tags\":{\"tbkewkqynspg\":\"uavt\",\"qokmyrljial\":\"voffbkkwvdxae\"},\"id\":\"bn\",\"name\":\"brqlpbcjtrpz\",\"type\":\"yudivbxnhsqeaeo\"},{\"properties\":{\"networkTapIds\":[\"lwgdhuruz\"],\"networkTapRuleIds\":[\"arogatmolji\"],\"provisioningState\":\"Updating\",\"destination\":{\"ipv4Addresses\":[\"mzvfkneerz\",\"trknsjulu\"],\"ipv6Addresses\":[\"bnhrxlelfjhkeiz\",\"pihtdmiwjekpt\",\"caydbjzcqymlcfnz\",\"mhsurlgwqkpmm\"]},\"annotation\":\"stauolawi\"},\"location\":\"momsgvvj\",\"tags\":{\"q\":\"lrlohewjjmajnkdf\",\"kzfzqxjosho\":\"onswae\",\"znlw\":\"totryegpkhxrme\",\"ze\":\"bfokxkhu\"},\"id\":\"ufgjblcdr\",\"name\":\"yfcemftz\",\"type\":\"yykyalu\"}],\"nextLink\":\"kd\"}")
            .toObject(NeighborGroupsListResult.class);
        Assertions.assertEquals("dvragpokddxejhh", model.value().get(0).location());
        Assertions.assertEquals("uavt", model.value().get(0).tags().get("tbkewkqynspg"));
        Assertions.assertEquals("qhs", model.value().get(0).destination().ipv4Addresses().get(0));
        Assertions.assertEquals("fpwpqbyejuwyqwd", model.value().get(0).destination().ipv6Addresses().get(0));
        Assertions.assertEquals("twmlmhjnqtqeah", model.value().get(0).annotation());
        Assertions.assertEquals("kd", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NeighborGroupsListResult model
            = new NeighborGroupsListResult()
                .withValue(Arrays.asList(
                    new NeighborGroupInner().withLocation("dvragpokddxejhh")
                        .withTags(mapOf("tbkewkqynspg", "uavt", "qokmyrljial", "voffbkkwvdxae"))
                        .withDestination(new NeighborGroupDestination().withIpv4Addresses(Arrays.asList("qhs"))
                            .withIpv6Addresses(Arrays.asList("fpwpqbyejuwyqwd", "igmghginztx", "ujkhnjcmrnkfmkh")))
                        .withAnnotation("twmlmhjnqtqeah"),
                    new NeighborGroupInner().withLocation("momsgvvj")
                        .withTags(mapOf("q", "lrlohewjjmajnkdf", "kzfzqxjosho", "onswae", "znlw", "totryegpkhxrme",
                            "ze", "bfokxkhu"))
                        .withDestination(
                            new NeighborGroupDestination().withIpv4Addresses(Arrays.asList("mzvfkneerz", "trknsjulu"))
                                .withIpv6Addresses(Arrays.asList("bnhrxlelfjhkeiz", "pihtdmiwjekpt", "caydbjzcqymlcfnz",
                                    "mhsurlgwqkpmm")))
                        .withAnnotation("stauolawi")))
                .withNextLink("kd");
        model = BinaryData.fromObject(model).toObject(NeighborGroupsListResult.class);
        Assertions.assertEquals("dvragpokddxejhh", model.value().get(0).location());
        Assertions.assertEquals("uavt", model.value().get(0).tags().get("tbkewkqynspg"));
        Assertions.assertEquals("qhs", model.value().get(0).destination().ipv4Addresses().get(0));
        Assertions.assertEquals("fpwpqbyejuwyqwd", model.value().get(0).destination().ipv6Addresses().get(0));
        Assertions.assertEquals("twmlmhjnqtqeah", model.value().get(0).annotation());
        Assertions.assertEquals("kd", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
