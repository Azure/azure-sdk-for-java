// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleAction;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRulePatch;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.TapRuleActionType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapRulePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapRulePatch model = BinaryData.fromString(
            "{\"properties\":{\"configurationType\":\"Inline\",\"tapRulesUrl\":\"jmtf\",\"matchConfigurations\":[{\"matchConfigurationName\":\"lnirupkq\",\"sequenceNumber\":1991980702958146147,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"encapsulationType\":\"None\",\"portCondition\":{\"layer4Protocol\":\"UDP\"},\"protocolTypes\":[\"wmehfxrttxbmsenn\",\"fab\",\"camalect\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Log\",\"truncate\":\"xmsynbkd\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"fxuzmsvzyqrbrn\",\"matchConfigurationName\":\"jtlxfikjkxara\"},{\"type\":\"Mirror\",\"truncate\":\"asnjeglht\",\"isTimestampEnabled\":\"True\",\"destinationId\":\"zpcjcnwjzbqblxr\",\"matchConfigurationName\":\"vdsvoqizawwsds\"},{\"type\":\"Goto\",\"truncate\":\"hjxsa\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"uffhxf\",\"matchConfigurationName\":\"mwzrdqyoybmr\"}]},{\"matchConfigurationName\":\"to\",\"sequenceNumber\":8522857147817918154,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"layer4Protocol\":\"UDP\"},\"protocolTypes\":[\"qphkv\",\"yzadcrxylaypdt\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Goto\",\"truncate\":\"huriwhjdfr\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"h\",\"matchConfigurationName\":\"nkcclpctuog\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"s\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"oebnxsqcowscuyfq\",\"amfbqh\",\"u\"]},{\"name\":\"afuzpnxqpwnik\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"grb\",\"ct\",\"vgoo\",\"qsazmzlpcxi\"]},{\"name\":\"hxxrqicf\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"dthkvpyeyoafinm\"]},{\"name\":\"qup\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"fwkyluobdxw\"]}],\"vlanGroups\":[{\"name\":\"clcvqs\",\"vlans\":[\"ay\"]},{\"name\":\"vwbzmfxlrymf\",\"vlans\":[\"piywqnp\",\"ydrf\",\"gcnyxbyxmkhm\",\"ync\"]},{\"name\":\"u\",\"vlans\":[\"styygjq\",\"ulmwqgmhmqmiwx\",\"fvvzucqfgufjnbx\"]}],\"portGroups\":[{\"name\":\"dukinhlxh\",\"ports\":[\"kekzouyveww\",\"zrdwcg\",\"dohgcandxfhhhte\",\"tdqtdnnckkplj\"]},{\"name\":\"hvvfkdxccyijjimh\",\"ports\":[\"rqnjxmvvsduydwnw\",\"ruhhqldrdymnswx\"]},{\"name\":\"xqwqnghxnim\",\"ports\":[\"jrxgunnq\",\"ypu\",\"tnylqu\"]}]},{\"ipGroups\":[{\"name\":\"vyumgmmueb\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"gsqufmjxcyo\",\"eqcazisvbrqgcy\",\"pgawepk\",\"on\"]},{\"name\":\"pghlr\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"lxb\",\"ibrv\",\"ztaflvsmfj\"]},{\"name\":\"vfjcqrttjfuqm\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"feqb\",\"vdostwyg\"]},{\"name\":\"mw\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"wzz\"]}],\"vlanGroups\":[{\"name\":\"lcjgpvcqzvzrbvg\",\"vlans\":[\"lxrmxvm\"]},{\"name\":\"wynbgovazoymd\",\"vlans\":[\"plkhwwdkatveqmg\",\"cswzeyxrye\",\"r\"]},{\"name\":\"p\",\"vlans\":[\"kl\",\"smfasgtlv\"]}],\"portGroups\":[{\"name\":\"ilosjaemcezevft\",\"ports\":[\"l\"]}]},{\"ipGroups\":[{\"name\":\"yghz\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"wtpcflcezswwvw\"]},{\"name\":\"tdjtvbfpfhru\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"cjnqs\",\"xd\"]},{\"name\":\"umxquk\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"hclqddnhfkne\",\"weddpnyzc\",\"yjsmkaq\",\"dqabnwvpaq\"]}],\"vlanGroups\":[{\"name\":\"bbigcfd\",\"vlans\":[\"xnfbmjyyrqa\",\"dwovocyt\"]}],\"portGroups\":[{\"name\":\"ayokrwfmihw\",\"ports\":[\"hedb\",\"o\",\"dczvothmkh\",\"aozvbwfcnjhbpoel\"]},{\"name\":\"cmyhrhjvszfqb\",\"ports\":[\"dwpppqwojoe\",\"zz\"]},{\"name\":\"ytdxmlynz\",\"ports\":[\"apbkrbuoggtdl\",\"lcuhaizi\",\"vaylz\",\"ohlpsftqkr\"]},{\"name\":\"hvbvvcpwtqsus\",\"ports\":[\"mzy\"]}]}],\"annotation\":\"fetev\"},\"tags\":{\"hfhfsat\":\"fknwacycsyotct\"}}")
            .toObject(NetworkTapRulePatch.class);
        Assertions.assertEquals("fknwacycsyotct", model.tags().get("hfhfsat"));
        Assertions.assertEquals(ConfigurationType.INLINE, model.configurationType());
        Assertions.assertEquals("jmtf", model.tapRulesUrl());
        Assertions.assertEquals("lnirupkq", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(1991980702958146147L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("wmehfxrttxbmsenn",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals(EncapsulationType.NONE,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(TapRuleActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("xmsynbkd", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.FALSE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("fxuzmsvzyqrbrn", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("jtlxfikjkxara",
            model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("s", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("oebnxsqcowscuyfq",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("clcvqs", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("ay", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("dukinhlxh", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("kekzouyveww",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
        Assertions.assertEquals("fetev", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapRulePatch model
            = new NetworkTapRulePatch().withTags(mapOf("hfhfsat", "fknwacycsyotct"))
                .withConfigurationType(ConfigurationType.INLINE)
                .withTapRulesUrl("jmtf")
                .withMatchConfigurations(Arrays.asList(
                    new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("lnirupkq")
                        .withSequenceNumber(1991980702958146147L)
                        .withIpAddressType(IpAddressType.IPV4)
                        .withMatchConditions(Arrays.asList(new NetworkTapRuleMatchCondition()
                            .withProtocolTypes(Arrays.asList("wmehfxrttxbmsenn", "fab", "camalect"))
                            .withVlanMatchCondition(new VlanMatchCondition())
                            .withIpCondition(new IpMatchCondition())
                            .withEncapsulationType(EncapsulationType.NONE)
                            .withPortCondition(new PortCondition().withLayer4Protocol(Layer4Protocol.UDP))))
                        .withActions(Arrays.asList(
                            new NetworkTapRuleAction().withType(TapRuleActionType.LOG)
                                .withTruncate("xmsynbkd")
                                .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                                .withDestinationId("fxuzmsvzyqrbrn")
                                .withMatchConfigurationName("jtlxfikjkxara"),
                            new NetworkTapRuleAction().withType(TapRuleActionType.MIRROR)
                                .withTruncate("asnjeglht")
                                .withIsTimestampEnabled(BooleanEnumProperty.TRUE)
                                .withDestinationId("zpcjcnwjzbqblxr")
                                .withMatchConfigurationName("vdsvoqizawwsds"),
                            new NetworkTapRuleAction().withType(TapRuleActionType.GOTO)
                                .withTruncate("hjxsa")
                                .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                                .withDestinationId("uffhxf")
                                .withMatchConfigurationName("mwzrdqyoybmr"))),
                    new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("to")
                        .withSequenceNumber(8522857147817918154L)
                        .withIpAddressType(IpAddressType.IPV4)
                        .withMatchConditions(Arrays.asList(new NetworkTapRuleMatchCondition()
                            .withProtocolTypes(Arrays.asList("qphkv", "yzadcrxylaypdt"))
                            .withVlanMatchCondition(new VlanMatchCondition())
                            .withIpCondition(new IpMatchCondition())
                            .withEncapsulationType(EncapsulationType.GTPV1)
                            .withPortCondition(new PortCondition().withLayer4Protocol(Layer4Protocol.UDP))))
                        .withActions(Arrays.asList(new NetworkTapRuleAction().withType(TapRuleActionType.GOTO)
                            .withTruncate("huriwhjdfr")
                            .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                            .withDestinationId("h")
                            .withMatchConfigurationName("nkcclpctuog")))))
                .withDynamicMatchConfigurations(Arrays.asList(
                    new CommonDynamicMatchConfiguration()
                        .withIpGroups(Arrays.asList(
                            new IpGroupProperties().withName("s")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("oebnxsqcowscuyfq", "amfbqh", "u")),
                            new IpGroupProperties().withName("afuzpnxqpwnik")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("grb", "ct", "vgoo", "qsazmzlpcxi")),
                            new IpGroupProperties().withName("hxxrqicf")
                                .withIpAddressType(IpAddressType.IPV6)
                                .withIpPrefixes(Arrays.asList("dthkvpyeyoafinm")),
                            new IpGroupProperties().withName("qup")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("fwkyluobdxw"))))
                        .withVlanGroups(
                            Arrays.asList(new VlanGroupProperties().withName("clcvqs").withVlans(Arrays.asList("ay")),
                                new VlanGroupProperties().withName("vwbzmfxlrymf")
                                    .withVlans(Arrays.asList("piywqnp", "ydrf", "gcnyxbyxmkhm", "ync")),
                                new VlanGroupProperties().withName("u")
                                    .withVlans(Arrays.asList("styygjq", "ulmwqgmhmqmiwx", "fvvzucqfgufjnbx"))))
                        .withPortGroups(
                            Arrays.asList(new PortGroupProperties().withName("dukinhlxh")
                                .withPorts(Arrays.asList("kekzouyveww", "zrdwcg", "dohgcandxfhhhte", "tdqtdnnckkplj")),
                                new PortGroupProperties().withName("hvvfkdxccyijjimh")
                                    .withPorts(Arrays.asList("rqnjxmvvsduydwnw", "ruhhqldrdymnswx")),
                                new PortGroupProperties().withName("xqwqnghxnim")
                                    .withPorts(Arrays.asList("jrxgunnq", "ypu", "tnylqu")))),
                    new CommonDynamicMatchConfiguration()
                        .withIpGroups(Arrays.asList(
                            new IpGroupProperties().withName("vyumgmmueb")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("gsqufmjxcyo", "eqcazisvbrqgcy", "pgawepk", "on")),
                            new IpGroupProperties().withName("pghlr")
                                .withIpAddressType(IpAddressType.IPV6)
                                .withIpPrefixes(Arrays.asList("lxb", "ibrv", "ztaflvsmfj")),
                            new IpGroupProperties().withName("vfjcqrttjfuqm")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("feqb", "vdostwyg")),
                            new IpGroupProperties().withName("mw")
                                .withIpAddressType(IpAddressType.IPV4)
                                .withIpPrefixes(Arrays.asList("wzz"))))
                        .withVlanGroups(Arrays.asList(
                            new VlanGroupProperties().withName("lcjgpvcqzvzrbvg").withVlans(Arrays.asList("lxrmxvm")),
                            new VlanGroupProperties().withName("wynbgovazoymd")
                                .withVlans(Arrays.asList("plkhwwdkatveqmg", "cswzeyxrye", "r")),
                            new VlanGroupProperties().withName("p").withVlans(Arrays.asList("kl", "smfasgtlv"))))
                        .withPortGroups(Arrays.asList(
                            new PortGroupProperties().withName("ilosjaemcezevft").withPorts(Arrays.asList("l")))),
                    new CommonDynamicMatchConfiguration()
                        .withIpGroups(Arrays.asList(
                            new IpGroupProperties().withName("yghz")
                                .withIpAddressType(IpAddressType.IPV6)
                                .withIpPrefixes(Arrays.asList("wtpcflcezswwvw")),
                            new IpGroupProperties().withName("tdjtvbfpfhru")
                                .withIpAddressType(IpAddressType.IPV6)
                                .withIpPrefixes(Arrays.asList("cjnqs", "xd")),
                            new IpGroupProperties().withName("umxquk")
                                .withIpAddressType(IpAddressType.IPV6)
                                .withIpPrefixes(Arrays.asList("hclqddnhfkne", "weddpnyzc", "yjsmkaq", "dqabnwvpaq"))))
                        .withVlanGroups(Arrays.asList(new VlanGroupProperties().withName("bbigcfd")
                            .withVlans(Arrays.asList("xnfbmjyyrqa", "dwovocyt"))))
                        .withPortGroups(Arrays.asList(
                            new PortGroupProperties().withName("ayokrwfmihw")
                                .withPorts(Arrays.asList("hedb", "o", "dczvothmkh", "aozvbwfcnjhbpoel")),
                            new PortGroupProperties().withName("cmyhrhjvszfqb")
                                .withPorts(Arrays.asList("dwpppqwojoe", "zz")),
                            new PortGroupProperties().withName("ytdxmlynz")
                                .withPorts(Arrays.asList("apbkrbuoggtdl", "lcuhaizi", "vaylz", "ohlpsftqkr")),
                            new PortGroupProperties().withName("hvbvvcpwtqsus").withPorts(Arrays.asList("mzy"))))))
                .withAnnotation("fetev");
        model = BinaryData.fromObject(model).toObject(NetworkTapRulePatch.class);
        Assertions.assertEquals("fknwacycsyotct", model.tags().get("hfhfsat"));
        Assertions.assertEquals(ConfigurationType.INLINE, model.configurationType());
        Assertions.assertEquals("jmtf", model.tapRulesUrl());
        Assertions.assertEquals("lnirupkq", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(1991980702958146147L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("wmehfxrttxbmsenn",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals(EncapsulationType.NONE,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(TapRuleActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("xmsynbkd", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.FALSE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("fxuzmsvzyqrbrn", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("jtlxfikjkxara",
            model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("s", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("oebnxsqcowscuyfq",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("clcvqs", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("ay", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("dukinhlxh", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("kekzouyveww",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
        Assertions.assertEquals("fetev", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
