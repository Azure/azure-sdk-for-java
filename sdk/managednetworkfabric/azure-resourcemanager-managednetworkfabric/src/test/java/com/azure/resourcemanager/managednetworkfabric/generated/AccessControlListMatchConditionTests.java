// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListMatchConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListMatchCondition model =
            BinaryData
                .fromString(
                    "{\"etherTypes\":[\"pmdtz\"],\"fragments\":[\"tfvnz\",\"yj\"],\"ipLengths\":[\"p\",\"opv\",\"bdb\"],\"ttlValues\":[\"qqihedsvqwthmk\",\"ibcysihsgqc\",\"dhohsdtmcdzsuf\"],\"dscpMarkings\":[\"dxbzlmcmuap\",\"vhdbevwqqxey\"],\"portCondition\":{\"flags\":[\"qzinkfkbg\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"eqocljmygvk\",\"qkjjeokbz\"],\"portGroupNames\":[\"zrxcczurt\",\"e\",\"pqxbkwvzgnzvdf\",\"zdix\"]},\"protocolTypes\":[\"pnodawopqhe\"],\"vlanMatchCondition\":{\"vlans\":[\"mcgsbostzelnd\"],\"innerVlans\":[\"utmzlbiojlvfhrbb\",\"neqvcwwyyurmo\"],\"vlanGroupNames\":[\"prprsnmokay\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"pbzpcpiljhahz\"],\"ipGroupNames\":[\"h\",\"dbn\",\"ieholewjwi\"]}}")
                .toObject(AccessControlListMatchCondition.class);
        Assertions.assertEquals("pnodawopqhe", model.protocolTypes().get(0));
        Assertions.assertEquals("mcgsbostzelnd", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("utmzlbiojlvfhrbb", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("prprsnmokay", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("pbzpcpiljhahz", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("h", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("pmdtz", model.etherTypes().get(0));
        Assertions.assertEquals("tfvnz", model.fragments().get(0));
        Assertions.assertEquals("p", model.ipLengths().get(0));
        Assertions.assertEquals("qqihedsvqwthmk", model.ttlValues().get(0));
        Assertions.assertEquals("dxbzlmcmuap", model.dscpMarkings().get(0));
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("eqocljmygvk", model.portCondition().ports().get(0));
        Assertions.assertEquals("zrxcczurt", model.portCondition().portGroupNames().get(0));
        Assertions.assertEquals("qzinkfkbg", model.portCondition().flags().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListMatchCondition model =
            new AccessControlListMatchCondition()
                .withProtocolTypes(Arrays.asList("pnodawopqhe"))
                .withVlanMatchCondition(
                    new VlanMatchCondition()
                        .withVlans(Arrays.asList("mcgsbostzelnd"))
                        .withInnerVlans(Arrays.asList("utmzlbiojlvfhrbb", "neqvcwwyyurmo"))
                        .withVlanGroupNames(Arrays.asList("prprsnmokay")))
                .withIpCondition(
                    new IpMatchCondition()
                        .withType(SourceDestinationType.SOURCE_IP)
                        .withPrefixType(PrefixType.PREFIX)
                        .withIpPrefixValues(Arrays.asList("pbzpcpiljhahz"))
                        .withIpGroupNames(Arrays.asList("h", "dbn", "ieholewjwi")))
                .withEtherTypes(Arrays.asList("pmdtz"))
                .withFragments(Arrays.asList("tfvnz", "yj"))
                .withIpLengths(Arrays.asList("p", "opv", "bdb"))
                .withTtlValues(Arrays.asList("qqihedsvqwthmk", "ibcysihsgqc", "dhohsdtmcdzsuf"))
                .withDscpMarkings(Arrays.asList("dxbzlmcmuap", "vhdbevwqqxey"))
                .withPortCondition(
                    new AccessControlListPortCondition()
                        .withPortType(PortType.SOURCE_PORT)
                        .withLayer4Protocol(Layer4Protocol.UDP)
                        .withPorts(Arrays.asList("eqocljmygvk", "qkjjeokbz"))
                        .withPortGroupNames(Arrays.asList("zrxcczurt", "e", "pqxbkwvzgnzvdf", "zdix"))
                        .withFlags(Arrays.asList("qzinkfkbg")));
        model = BinaryData.fromObject(model).toObject(AccessControlListMatchCondition.class);
        Assertions.assertEquals("pnodawopqhe", model.protocolTypes().get(0));
        Assertions.assertEquals("mcgsbostzelnd", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("utmzlbiojlvfhrbb", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("prprsnmokay", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("pbzpcpiljhahz", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("h", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("pmdtz", model.etherTypes().get(0));
        Assertions.assertEquals("tfvnz", model.fragments().get(0));
        Assertions.assertEquals("p", model.ipLengths().get(0));
        Assertions.assertEquals("qqihedsvqwthmk", model.ttlValues().get(0));
        Assertions.assertEquals("dxbzlmcmuap", model.dscpMarkings().get(0));
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("eqocljmygvk", model.portCondition().ports().get(0));
        Assertions.assertEquals("zrxcczurt", model.portCondition().portGroupNames().get(0));
        Assertions.assertEquals("qzinkfkbg", model.portCondition().flags().get(0));
    }
}
