// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListMatchConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListMatchCondition model = BinaryData.fromString(
            "{\"etherTypes\":[\"pmguaadraufac\",\"kahzo\",\"ajjziuxxpshne\",\"kulfg\"],\"fragments\":[\"ubkwdle\",\"rds\"],\"ipLengths\":[\"jbazpjuohminy\",\"lnorwmdu\",\"wpklvxw\",\"ygdxpgpqchis\"],\"ttlValues\":[\"nnbj\",\"rxgibbd\"],\"dscpMarkings\":[\"onfo\",\"auorsukokw\",\"qplhlvnu\"],\"portCondition\":{\"flags\":[\"lrphwzsoldw\",\"yuqdu\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"wrbiorkt\",\"lywjhh\"],\"portGroupNames\":[\"hxmsivfo\",\"iloxggdufiq\"]},\"protocolTypes\":[\"euzaof\",\"chvcyyysfgdo\",\"cubiipuipw\",\"qonmacj\"],\"vlanMatchCondition\":{\"vlans\":[\"zshq\"],\"innerVlans\":[\"m\",\"ev\"],\"vlanGroupNames\":[\"b\",\"rrilbywdxsmic\",\"wrwfscjfnyns\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"oqytibyowbblgy\",\"vutpthjoxo\"],\"ipGroupNames\":[\"sks\",\"pi\"]}}")
            .toObject(AccessControlListMatchCondition.class);
        Assertions.assertEquals("euzaof", model.protocolTypes().get(0));
        Assertions.assertEquals("zshq", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("m", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("b", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("oqytibyowbblgy", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("sks", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("pmguaadraufac", model.etherTypes().get(0));
        Assertions.assertEquals("ubkwdle", model.fragments().get(0));
        Assertions.assertEquals("jbazpjuohminy", model.ipLengths().get(0));
        Assertions.assertEquals("nnbj", model.ttlValues().get(0));
        Assertions.assertEquals("onfo", model.dscpMarkings().get(0));
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("wrbiorkt", model.portCondition().ports().get(0));
        Assertions.assertEquals("hxmsivfo", model.portCondition().portGroupNames().get(0));
        Assertions.assertEquals("lrphwzsoldw", model.portCondition().flags().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListMatchCondition model = new AccessControlListMatchCondition()
            .withProtocolTypes(Arrays.asList("euzaof", "chvcyyysfgdo", "cubiipuipw", "qonmacj"))
            .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("zshq"))
                .withInnerVlans(Arrays.asList("m", "ev"))
                .withVlanGroupNames(Arrays.asList("b", "rrilbywdxsmic", "wrwfscjfnyns")))
            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                .withPrefixType(PrefixType.LONGEST_PREFIX)
                .withIpPrefixValues(Arrays.asList("oqytibyowbblgy", "vutpthjoxo"))
                .withIpGroupNames(Arrays.asList("sks", "pi")))
            .withEtherTypes(Arrays.asList("pmguaadraufac", "kahzo", "ajjziuxxpshne", "kulfg"))
            .withFragments(Arrays.asList("ubkwdle", "rds"))
            .withIpLengths(Arrays.asList("jbazpjuohminy", "lnorwmdu", "wpklvxw", "ygdxpgpqchis"))
            .withTtlValues(Arrays.asList("nnbj", "rxgibbd"))
            .withDscpMarkings(Arrays.asList("onfo", "auorsukokw", "qplhlvnu"))
            .withPortCondition(new AccessControlListPortCondition().withPortType(PortType.SOURCE_PORT)
                .withLayer4Protocol(Layer4Protocol.UDP)
                .withPorts(Arrays.asList("wrbiorkt", "lywjhh"))
                .withPortGroupNames(Arrays.asList("hxmsivfo", "iloxggdufiq"))
                .withFlags(Arrays.asList("lrphwzsoldw", "yuqdu")));
        model = BinaryData.fromObject(model).toObject(AccessControlListMatchCondition.class);
        Assertions.assertEquals("euzaof", model.protocolTypes().get(0));
        Assertions.assertEquals("zshq", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("m", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("b", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("oqytibyowbblgy", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("sks", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("pmguaadraufac", model.etherTypes().get(0));
        Assertions.assertEquals("ubkwdle", model.fragments().get(0));
        Assertions.assertEquals("jbazpjuohminy", model.ipLengths().get(0));
        Assertions.assertEquals("nnbj", model.ttlValues().get(0));
        Assertions.assertEquals("onfo", model.dscpMarkings().get(0));
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("wrbiorkt", model.portCondition().ports().get(0));
        Assertions.assertEquals("hxmsivfo", model.portCondition().portGroupNames().get(0));
        Assertions.assertEquals("lrphwzsoldw", model.portCondition().flags().get(0));
    }
}
