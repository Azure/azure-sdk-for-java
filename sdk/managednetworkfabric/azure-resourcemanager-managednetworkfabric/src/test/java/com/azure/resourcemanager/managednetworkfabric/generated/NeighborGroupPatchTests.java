// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupDestination;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupPatch;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NeighborGroupPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NeighborGroupPatch model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"destination\":{\"ipv4Addresses\":[\"lciichgjs\",\"smvxodgw\",\"f\",\"zsifcuvbdujgcwx\"],\"ipv6Addresses\":[\"bbwjtrdxrizagb\",\"giarksykpgdqxw\",\"b\"]},\"annotation\":\"wiqrxhaclcdosq\"},\"tags\":{\"xkpbqwun\":\"jqgkifmmainwhe\",\"elwgvydjufbnkl\":\"obuizaz\"}}")
                .toObject(NeighborGroupPatch.class);
        Assertions.assertEquals("jqgkifmmainwhe", model.tags().get("xkpbqwun"));
        Assertions.assertEquals("lciichgjs", model.destination().ipv4Addresses().get(0));
        Assertions.assertEquals("bbwjtrdxrizagb", model.destination().ipv6Addresses().get(0));
        Assertions.assertEquals("wiqrxhaclcdosq", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NeighborGroupPatch model =
            new NeighborGroupPatch()
                .withTags(mapOf("xkpbqwun", "jqgkifmmainwhe", "elwgvydjufbnkl", "obuizaz"))
                .withDestination(
                    new NeighborGroupDestination()
                        .withIpv4Addresses(Arrays.asList("lciichgjs", "smvxodgw", "f", "zsifcuvbdujgcwx"))
                        .withIpv6Addresses(Arrays.asList("bbwjtrdxrizagb", "giarksykpgdqxw", "b")))
                .withAnnotation("wiqrxhaclcdosq");
        model = BinaryData.fromObject(model).toObject(NeighborGroupPatch.class);
        Assertions.assertEquals("jqgkifmmainwhe", model.tags().get("xkpbqwun"));
        Assertions.assertEquals("lciichgjs", model.destination().ipv4Addresses().get(0));
        Assertions.assertEquals("bbwjtrdxrizagb", model.destination().ipv6Addresses().get(0));
        Assertions.assertEquals("wiqrxhaclcdosq", model.annotation());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
