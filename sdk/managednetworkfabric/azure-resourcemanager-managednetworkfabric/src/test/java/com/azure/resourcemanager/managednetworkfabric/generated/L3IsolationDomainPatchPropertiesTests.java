// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L3IsolationDomainPatchProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRoute;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnetRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeConnectedSubnets;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeStaticRoutes;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class L3IsolationDomainPatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3IsolationDomainPatchProperties model = BinaryData.fromString(
            "{\"redistributeConnectedSubnets\":\"True\",\"redistributeStaticRoutes\":\"False\",\"aggregateRouteConfiguration\":{\"ipv4Routes\":[{\"prefix\":\"wkd\"}],\"ipv6Routes\":[{\"prefix\":\"rucpcunnuz\"},{\"prefix\":\"qumoeno\"},{\"prefix\":\"naie\"},{\"prefix\":\"hqhsknd\"}]},\"connectedSubnetRoutePolicy\":{\"exportRoutePolicyId\":\"qkaadlknw\",\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"nniyopetxi\",\"exportIpv6RoutePolicyId\":\"nrlyxnuc\"}},\"annotation\":\"p\"}")
            .toObject(L3IsolationDomainPatchProperties.class);
        Assertions.assertEquals("p", model.annotation());
        Assertions.assertEquals(RedistributeConnectedSubnets.TRUE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.FALSE, model.redistributeStaticRoutes());
        Assertions.assertEquals("wkd", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("rucpcunnuz", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("qkaadlknw", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("nniyopetxi",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("nrlyxnuc",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3IsolationDomainPatchProperties model
            = new L3IsolationDomainPatchProperties().withAnnotation("p")
                .withRedistributeConnectedSubnets(RedistributeConnectedSubnets.TRUE)
                .withRedistributeStaticRoutes(RedistributeStaticRoutes.FALSE)
                .withAggregateRouteConfiguration(new AggregateRouteConfiguration()
                    .withIpv4Routes(Arrays.asList(new AggregateRoute().withPrefix("wkd")))
                    .withIpv6Routes(Arrays.asList(new AggregateRoute().withPrefix("rucpcunnuz"),
                        new AggregateRoute().withPrefix("qumoeno"), new AggregateRoute().withPrefix("naie"),
                        new AggregateRoute().withPrefix("hqhsknd"))))
                .withConnectedSubnetRoutePolicy(new ConnectedSubnetRoutePolicy().withExportRoutePolicyId("qkaadlknw")
                    .withExportRoutePolicy(new L3ExportRoutePolicy().withExportIpv4RoutePolicyId("nniyopetxi")
                        .withExportIpv6RoutePolicyId("nrlyxnuc")));
        model = BinaryData.fromObject(model).toObject(L3IsolationDomainPatchProperties.class);
        Assertions.assertEquals("p", model.annotation());
        Assertions.assertEquals(RedistributeConnectedSubnets.TRUE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.FALSE, model.redistributeStaticRoutes());
        Assertions.assertEquals("wkd", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("rucpcunnuz", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("qkaadlknw", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("nniyopetxi",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("nrlyxnuc",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
    }
}
