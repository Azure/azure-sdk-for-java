// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BgpConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPatch;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborAddress;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InternalNetworkPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternalNetworkPatch model = BinaryData.fromString(
            "{\"properties\":{\"bgpConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Enabled\",\"intervalInMilliSeconds\":1115141290,\"multiplier\":1604281070},\"defaultRouteOriginate\":\"False\",\"allowAS\":1640336764,\"allowASOverride\":\"Enable\",\"fabricASN\":5940630190503622951,\"peerASN\":8920710926846800663,\"ipv4ListenRangePrefixes\":[\"uyvpirf\",\"jpnqnoowsbeden\"],\"ipv6ListenRangePrefixes\":[\"k\",\"bhxv\"],\"ipv4NeighborAddress\":[{\"address\":\"lgmnhjevdyzn\",\"configurationState\":\"Provisioning\"}],\"ipv6NeighborAddress\":[{\"address\":\"skmqozzkivyhj\",\"configurationState\":\"Failed\"},{\"address\":\"zji\",\"configurationState\":\"Accepted\"},{\"address\":\"hefkwabsolronqq\",\"configurationState\":\"Provisioning\"}],\"annotation\":\"lqxsjxtelex\"},\"staticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Enabled\",\"intervalInMilliSeconds\":267543853,\"multiplier\":95279837},\"ipv4Routes\":[{\"prefix\":\"qocarkuzlbc\",\"nextHop\":[\"dtsnxawqytllhdyz\",\"yckzex\",\"xak\",\"kywymxgaabj\"]},{\"prefix\":\"dtfohfaog\",\"nextHop\":[\"kiwrsiw\",\"y\",\"quryk\",\"rra\"]}],\"ipv6Routes\":[{\"prefix\":\"kcsueho\",\"nextHop\":[\"dac\",\"cbgydlqi\",\"ywmhmptyrilkfbnr\",\"qxvztpbnfnqtxjt\"]},{\"prefix\":\"m\",\"nextHop\":[\"swbnfddepldwqjns\",\"zygleexahvm\"]}]},\"mtu\":1943613509,\"connectedIPv4Subnets\":[{\"prefix\":\"rcarycsjj\",\"annotation\":\"voaqajuvehzptdmk\"},{\"prefix\":\"rbhmpfulubef\",\"annotation\":\"bpmfbfununmpzkrv\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"fkd\",\"annotation\":\"hlzvfictnkjj\"},{\"prefix\":\"gcwn\",\"annotation\":\"bkgfyrtogmhmjpjs\"},{\"prefix\":\"dfpdqwtygevg\",\"annotation\":\"sehar\"}],\"importRoutePolicyId\":\"fv\",\"exportRoutePolicyId\":\"rxtmbpjptnvw\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"sidqpxlbtpakft\",\"importIpv6RoutePolicyId\":\"atw\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"yutrymd\",\"exportIpv6RoutePolicyId\":\"fj\"},\"ingressAclId\":\"y\",\"egressAclId\":\"jqdvdwkqpldrlefg\",\"isMonitoringEnabled\":\"False\",\"annotation\":\"uagntetaou\"}}")
            .toObject(InternalNetworkPatch.class);
        Assertions.assertEquals("lqxsjxtelex", model.bgpConfiguration().annotation());
        Assertions.assertEquals(1115141290, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1604281070, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1640336764, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(8920710926846800663L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("uyvpirf", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("k", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("lgmnhjevdyzn", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("skmqozzkivyhj", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(267543853,
            model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(95279837, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("qocarkuzlbc", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("dtsnxawqytllhdyz",
            model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("kcsueho", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("dac", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(1943613509, model.mtu());
        Assertions.assertEquals("voaqajuvehzptdmk", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("rcarycsjj", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("hlzvfictnkjj", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("fkd", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("fv", model.importRoutePolicyId());
        Assertions.assertEquals("rxtmbpjptnvw", model.exportRoutePolicyId());
        Assertions.assertEquals("sidqpxlbtpakft", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("atw", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("yutrymd", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("fj", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("y", model.ingressAclId());
        Assertions.assertEquals("jqdvdwkqpldrlefg", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.isMonitoringEnabled());
        Assertions.assertEquals("uagntetaou", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternalNetworkPatch model = new InternalNetworkPatch()
            .withBgpConfiguration(new BgpConfiguration().withAnnotation("lqxsjxtelex")
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(1115141290).withMultiplier(1604281070))
                .withDefaultRouteOriginate(BooleanEnumProperty.FALSE)
                .withAllowAS(1640336764)
                .withAllowASOverride(AllowASOverride.ENABLE)
                .withPeerAsn(8920710926846800663L)
                .withIpv4ListenRangePrefixes(Arrays.asList("uyvpirf", "jpnqnoowsbeden"))
                .withIpv6ListenRangePrefixes(Arrays.asList("k", "bhxv"))
                .withIpv4NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("lgmnhjevdyzn")))
                .withIpv6NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("skmqozzkivyhj"),
                    new NeighborAddress().withAddress("zji"), new NeighborAddress().withAddress("hefkwabsolronqq"))))
            .withStaticRouteConfiguration(new StaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(267543853).withMultiplier(95279837))
                .withIpv4Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("qocarkuzlbc")
                        .withNextHop(Arrays.asList("dtsnxawqytllhdyz", "yckzex", "xak", "kywymxgaabj")),
                    new StaticRouteProperties().withPrefix("dtfohfaog")
                        .withNextHop(Arrays.asList("kiwrsiw", "y", "quryk", "rra"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("kcsueho")
                        .withNextHop(Arrays.asList("dac", "cbgydlqi", "ywmhmptyrilkfbnr", "qxvztpbnfnqtxjt")),
                    new StaticRouteProperties().withPrefix("m")
                        .withNextHop(Arrays.asList("swbnfddepldwqjns", "zygleexahvm")))))
            .withMtu(1943613509)
            .withConnectedIPv4Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("voaqajuvehzptdmk").withPrefix("rcarycsjj"),
                    new ConnectedSubnet().withAnnotation("bpmfbfununmpzkrv").withPrefix("rbhmpfulubef")))
            .withConnectedIPv6Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("hlzvfictnkjj").withPrefix("fkd"),
                    new ConnectedSubnet().withAnnotation("bkgfyrtogmhmjpjs").withPrefix("gcwn"),
                    new ConnectedSubnet().withAnnotation("sehar").withPrefix("dfpdqwtygevg")))
            .withImportRoutePolicyId("fv")
            .withExportRoutePolicyId("rxtmbpjptnvw")
            .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("sidqpxlbtpakft")
                .withImportIpv6RoutePolicyId("atw"))
            .withExportRoutePolicy(
                new ExportRoutePolicy().withExportIpv4RoutePolicyId("yutrymd").withExportIpv6RoutePolicyId("fj"))
            .withIngressAclId("y")
            .withEgressAclId("jqdvdwkqpldrlefg")
            .withIsMonitoringEnabled(IsMonitoringEnabled.FALSE)
            .withAnnotation("uagntetaou");
        model = BinaryData.fromObject(model).toObject(InternalNetworkPatch.class);
        Assertions.assertEquals("lqxsjxtelex", model.bgpConfiguration().annotation());
        Assertions.assertEquals(1115141290, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1604281070, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1640336764, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(8920710926846800663L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("uyvpirf", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("k", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("lgmnhjevdyzn", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("skmqozzkivyhj", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(267543853,
            model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(95279837, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("qocarkuzlbc", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("dtsnxawqytllhdyz",
            model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("kcsueho", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("dac", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(1943613509, model.mtu());
        Assertions.assertEquals("voaqajuvehzptdmk", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("rcarycsjj", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("hlzvfictnkjj", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("fkd", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("fv", model.importRoutePolicyId());
        Assertions.assertEquals("rxtmbpjptnvw", model.exportRoutePolicyId());
        Assertions.assertEquals("sidqpxlbtpakft", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("atw", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("yutrymd", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("fj", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("y", model.ingressAclId());
        Assertions.assertEquals("jqdvdwkqpldrlefg", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.isMonitoringEnabled());
        Assertions.assertEquals("uagntetaou", model.annotation());
    }
}
