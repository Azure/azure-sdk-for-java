// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternalNetworkInner;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.Extension;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesBgpConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborAddress;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InternalNetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternalNetworkInner model = BinaryData.fromString(
            "{\"properties\":{\"vlanId\":525504138,\"bgpConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":85439569,\"multiplier\":1597212903},\"defaultRouteOriginate\":\"True\",\"allowAS\":1088975953,\"allowASOverride\":\"Disable\",\"fabricASN\":2387743890431883353,\"peerASN\":3699317304286967094,\"ipv4ListenRangePrefixes\":[\"unlpirykycndz\",\"qi\",\"jreuykbbmn\",\"aglt\"],\"ipv6ListenRangePrefixes\":[\"eeonqlnfwm\",\"ymvqdbpbhfckdvez\",\"rcssbzhddubbnq\"],\"ipv4NeighborAddress\":[{\"address\":\"kalehp\",\"configurationState\":\"ErrorProvisioning\"},{\"address\":\"ugiqjtiogqg\",\"configurationState\":\"Provisioning\"},{\"address\":\"i\",\"configurationState\":\"Deprovisioned\"},{\"address\":\"aj\",\"configurationState\":\"DeferredControl\"}],\"ipv6NeighborAddress\":[{\"address\":\"pnbonhpcz\",\"configurationState\":\"Succeeded\"},{\"address\":\"tp\",\"configurationState\":\"Provisioning\"},{\"address\":\"csehchkhufm\",\"configurationState\":\"Succeeded\"},{\"address\":\"q\",\"configurationState\":\"PendingCommit\"}],\"annotation\":\"dzulo\"},\"staticRouteConfiguration\":{\"extension\":\"NoExtension\",\"bfdConfiguration\":{\"administrativeState\":\"Enabled\",\"intervalInMilliSeconds\":1301701466,\"multiplier\":353038412},\"ipv4Routes\":[{\"prefix\":\"senwphpzf\",\"nextHop\":[\"qjcli\",\"ftujwjjufw\",\"eqrkuorhtss\",\"uqnmdvhazcvj\"]}],\"ipv6Routes\":[{\"prefix\":\"qswbqerzwx\",\"nextHop\":[\"txtd\",\"ukvlb\"]},{\"prefix\":\"ktg\",\"nextHop\":[\"tyouambewreswmow\",\"gmmuteyxey\"]}]},\"configurationState\":\"Provisioning\",\"provisioningState\":\"Failed\",\"administrativeState\":\"RMA\",\"mtu\":529739852,\"connectedIPv4Subnets\":[{\"prefix\":\"spxlzde\",\"annotation\":\"grijwaiufanrayb\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"qfrojsydgrhyd\",\"annotation\":\"gywezskiec\"},{\"prefix\":\"f\",\"annotation\":\"zmxieqvdsmaklix\"}],\"importRoutePolicyId\":\"ah\",\"exportRoutePolicyId\":\"xalybxawoijpo\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"lxp\",\"importIpv6RoutePolicyId\":\"wjdjodqhykin\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"emehllizh\",\"exportIpv6RoutePolicyId\":\"umoqodkad\"},\"ingressAclId\":\"yibngqladywrxwh\",\"egressAclId\":\"tlu\",\"isMonitoringEnabled\":\"True\",\"extension\":\"NPB\",\"annotation\":\"zsn\"},\"id\":\"emlowuowhl\",\"name\":\"lnwy\",\"type\":\"mouvbl\"}")
            .toObject(InternalNetworkInner.class);
        Assertions.assertEquals(525504138, model.vlanId());
        Assertions.assertEquals("dzulo", model.bgpConfiguration().annotation());
        Assertions.assertEquals(85439569, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1597212903, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1088975953, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.DISABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(3699317304286967094L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("unlpirykycndz", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("eeonqlnfwm", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("kalehp", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("pnbonhpcz", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(1301701466,
            model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(353038412, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("senwphpzf", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("qjcli", model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("qswbqerzwx", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("txtd", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(Extension.NO_EXTENSION, model.staticRouteConfiguration().extension());
        Assertions.assertEquals(529739852, model.mtu());
        Assertions.assertEquals("grijwaiufanrayb", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("spxlzde", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("gywezskiec", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("qfrojsydgrhyd", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("ah", model.importRoutePolicyId());
        Assertions.assertEquals("xalybxawoijpo", model.exportRoutePolicyId());
        Assertions.assertEquals("lxp", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("wjdjodqhykin", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("emehllizh", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("umoqodkad", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("yibngqladywrxwh", model.ingressAclId());
        Assertions.assertEquals("tlu", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.TRUE, model.isMonitoringEnabled());
        Assertions.assertEquals(Extension.NPB, model.extension());
        Assertions.assertEquals("zsn", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternalNetworkInner model = new InternalNetworkInner().withVlanId(525504138)
            .withBgpConfiguration(new InternalNetworkPropertiesBgpConfiguration().withAnnotation("dzulo")
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(85439569).withMultiplier(1597212903))
                .withDefaultRouteOriginate(BooleanEnumProperty.TRUE)
                .withAllowAS(1088975953)
                .withAllowASOverride(AllowASOverride.DISABLE)
                .withPeerAsn(3699317304286967094L)
                .withIpv4ListenRangePrefixes(Arrays.asList("unlpirykycndz", "qi", "jreuykbbmn", "aglt"))
                .withIpv6ListenRangePrefixes(Arrays.asList("eeonqlnfwm", "ymvqdbpbhfckdvez", "rcssbzhddubbnq"))
                .withIpv4NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("kalehp"),
                    new NeighborAddress().withAddress("ugiqjtiogqg"), new NeighborAddress().withAddress("i"),
                    new NeighborAddress().withAddress("aj")))
                .withIpv6NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("pnbonhpcz"),
                    new NeighborAddress().withAddress("tp"), new NeighborAddress().withAddress("csehchkhufm"),
                    new NeighborAddress().withAddress("q"))))
            .withStaticRouteConfiguration(new InternalNetworkPropertiesStaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(1301701466).withMultiplier(353038412))
                .withIpv4Routes(Arrays.asList(new StaticRouteProperties().withPrefix("senwphpzf")
                    .withNextHop(Arrays.asList("qjcli", "ftujwjjufw", "eqrkuorhtss", "uqnmdvhazcvj"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("qswbqerzwx").withNextHop(Arrays.asList("txtd", "ukvlb")),
                    new StaticRouteProperties().withPrefix("ktg")
                        .withNextHop(Arrays.asList("tyouambewreswmow", "gmmuteyxey"))))
                .withExtension(Extension.NO_EXTENSION))
            .withMtu(529739852)
            .withConnectedIPv4Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("grijwaiufanrayb").withPrefix("spxlzde")))
            .withConnectedIPv6Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("gywezskiec").withPrefix("qfrojsydgrhyd"),
                    new ConnectedSubnet().withAnnotation("zmxieqvdsmaklix").withPrefix("f")))
            .withImportRoutePolicyId("ah")
            .withExportRoutePolicyId("xalybxawoijpo")
            .withImportRoutePolicy(
                new ImportRoutePolicy().withImportIpv4RoutePolicyId("lxp").withImportIpv6RoutePolicyId("wjdjodqhykin"))
            .withExportRoutePolicy(new ExportRoutePolicy().withExportIpv4RoutePolicyId("emehllizh")
                .withExportIpv6RoutePolicyId("umoqodkad"))
            .withIngressAclId("yibngqladywrxwh")
            .withEgressAclId("tlu")
            .withIsMonitoringEnabled(IsMonitoringEnabled.TRUE)
            .withExtension(Extension.NPB)
            .withAnnotation("zsn");
        model = BinaryData.fromObject(model).toObject(InternalNetworkInner.class);
        Assertions.assertEquals(525504138, model.vlanId());
        Assertions.assertEquals("dzulo", model.bgpConfiguration().annotation());
        Assertions.assertEquals(85439569, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1597212903, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1088975953, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.DISABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(3699317304286967094L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("unlpirykycndz", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("eeonqlnfwm", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("kalehp", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("pnbonhpcz", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(1301701466,
            model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(353038412, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("senwphpzf", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("qjcli", model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("qswbqerzwx", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("txtd", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(Extension.NO_EXTENSION, model.staticRouteConfiguration().extension());
        Assertions.assertEquals(529739852, model.mtu());
        Assertions.assertEquals("grijwaiufanrayb", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("spxlzde", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("gywezskiec", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("qfrojsydgrhyd", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("ah", model.importRoutePolicyId());
        Assertions.assertEquals("xalybxawoijpo", model.exportRoutePolicyId());
        Assertions.assertEquals("lxp", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("wjdjodqhykin", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("emehllizh", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("umoqodkad", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("yibngqladywrxwh", model.ingressAclId());
        Assertions.assertEquals("tlu", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.TRUE, model.isMonitoringEnabled());
        Assertions.assertEquals(Extension.NPB, model.extension());
        Assertions.assertEquals("zsn", model.annotation());
    }
}
