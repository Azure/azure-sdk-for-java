// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.DestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.Encapsulation;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTap;
import com.azure.resourcemanager.managednetworkfabric.models.PollingType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkTapsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"networkPacketBrokerId\":\"zscgropuqgi\",\"sourceTapRuleId\":\"gkoci\",\"destinations\":[{\"name\":\"qlyoor\",\"destinationType\":\"Direct\",\"destinationId\":\"glq\",\"isolationDomainProperties\":{\"encapsulation\":\"None\",\"neighborGroupIds\":[\"yhx\",\"znbcpiadjslvx\"]},\"destinationTapRuleId\":\"lcd\"},{\"name\":\"ib\",\"destinationType\":\"Direct\",\"destinationId\":\"cghygmtbi\",\"isolationDomainProperties\":{\"encapsulation\":\"None\",\"neighborGroupIds\":[\"wff\"]},\"destinationTapRuleId\":\"mxqyjysrjpyokewv\"},{\"name\":\"zmsyezx\",\"destinationType\":\"Direct\",\"destinationId\":\"vhuovfotwv\",\"isolationDomainProperties\":{\"encapsulation\":\"GRE\",\"neighborGroupIds\":[\"dcodzdheknmcvm\",\"iundifuaht\",\"kccru\",\"rz\"]},\"destinationTapRuleId\":\"oqodya\"}],\"pollingType\":\"Pull\",\"configurationState\":\"Failed\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Disabled\",\"annotation\":\"loawslctilbxnny\"},\"location\":\"tudfhpelzavohvdb\",\"tags\":{\"uewxliqcbonqjo\":\"rc\",\"tit\":\"kcjcglvob\"},\"id\":\"xrbalvkfdq\",\"name\":\"lprqhxfq\",\"type\":\"qp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NetworkTap> response
            = manager.networkTaps().listByResourceGroup("qwlbeqc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tudfhpelzavohvdb", response.iterator().next().location());
        Assertions.assertEquals("rc", response.iterator().next().tags().get("uewxliqcbonqjo"));
        Assertions.assertEquals("zscgropuqgi", response.iterator().next().networkPacketBrokerId());
        Assertions.assertEquals("qlyoor", response.iterator().next().destinations().get(0).name());
        Assertions.assertEquals(DestinationType.DIRECT,
            response.iterator().next().destinations().get(0).destinationType());
        Assertions.assertEquals("glq", response.iterator().next().destinations().get(0).destinationId());
        Assertions.assertEquals(Encapsulation.NONE,
            response.iterator().next().destinations().get(0).isolationDomainProperties().encapsulation());
        Assertions.assertEquals("yhx",
            response.iterator().next().destinations().get(0).isolationDomainProperties().neighborGroupIds().get(0));
        Assertions.assertEquals("lcd", response.iterator().next().destinations().get(0).destinationTapRuleId());
        Assertions.assertEquals(PollingType.PULL, response.iterator().next().pollingType());
        Assertions.assertEquals("loawslctilbxnny", response.iterator().next().annotation());
    }
}
