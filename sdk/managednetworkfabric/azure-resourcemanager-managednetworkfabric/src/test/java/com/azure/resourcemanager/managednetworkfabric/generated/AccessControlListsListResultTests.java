// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.AccessControlListInner;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListsListResult;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListsListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"lastSyncedTime\":\"2021-08-20T21:04:40Z\",\"configurationState\":\"DeferredControl\",\"provisioningState\":\"Failed\",\"administrativeState\":\"Enabled\",\"configurationType\":\"File\",\"aclsUrl\":\"aiancznvodr\",\"matchConfigurations\":[{\"matchConfigurationName\":\"lxydkxrxv\",\"sequenceNumber\":731559020622365295,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{},{},{}],\"actions\":[{},{},{},{}]},{\"matchConfigurationName\":\"jnqkhy\",\"sequenceNumber\":7281626165756330252,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{}],\"actions\":[{},{}]},{\"matchConfigurationName\":\"rqlrqffawe\",\"sequenceNumber\":49967768153129763,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{},{},{},{}],\"actions\":[{}]},{\"matchConfigurationName\":\"av\",\"sequenceNumber\":1106225492612051465,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{}],\"actions\":[{},{},{}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{}],\"vlanGroups\":[{}],\"portGroups\":[{},{},{},{}]},{\"ipGroups\":[{},{}],\"vlanGroups\":[{}],\"portGroups\":[{},{},{},{}]},{\"ipGroups\":[{},{}],\"vlanGroups\":[{}],\"portGroups\":[{},{}]}],\"annotation\":\"duusioycblevpmcl\"},\"location\":\"yxkyxlz\",\"tags\":{\"taf\":\"gkzz\"},\"id\":\"bzf\",\"name\":\"ovwmbjlzqsczpgvd\",\"type\":\"napfdqwowftpt\"}],\"nextLink\":\"wjtkschgcgqyhl\"}")
                .toObject(AccessControlListsListResult.class);
        Assertions.assertEquals("yxkyxlz", model.value().get(0).location());
        Assertions.assertEquals("gkzz", model.value().get(0).tags().get("taf"));
        Assertions.assertEquals(ConfigurationType.FILE, model.value().get(0).configurationType());
        Assertions.assertEquals("aiancznvodr", model.value().get(0).aclsUrl());
        Assertions
            .assertEquals("lxydkxrxv", model.value().get(0).matchConfigurations().get(0).matchConfigurationName());
        Assertions
            .assertEquals(731559020622365295L, model.value().get(0).matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.value().get(0).matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("duusioycblevpmcl", model.value().get(0).annotation());
        Assertions.assertEquals("wjtkschgcgqyhl", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListsListResult model =
            new AccessControlListsListResult()
                .withValue(
                    Arrays
                        .asList(
                            new AccessControlListInner()
                                .withLocation("yxkyxlz")
                                .withTags(mapOf("taf", "gkzz"))
                                .withConfigurationType(ConfigurationType.FILE)
                                .withAclsUrl("aiancznvodr")
                                .withMatchConfigurations(
                                    Arrays
                                        .asList(
                                            new AccessControlListMatchConfiguration()
                                                .withMatchConfigurationName("lxydkxrxv")
                                                .withSequenceNumber(731559020622365295L)
                                                .withIpAddressType(IpAddressType.IPV6)
                                                .withMatchConditions(
                                                    Arrays
                                                        .asList(
                                                            new AccessControlListMatchCondition(),
                                                            new AccessControlListMatchCondition(),
                                                            new AccessControlListMatchCondition()))
                                                .withActions(
                                                    Arrays
                                                        .asList(
                                                            new AccessControlListAction(),
                                                            new AccessControlListAction(),
                                                            new AccessControlListAction(),
                                                            new AccessControlListAction())),
                                            new AccessControlListMatchConfiguration()
                                                .withMatchConfigurationName("jnqkhy")
                                                .withSequenceNumber(7281626165756330252L)
                                                .withIpAddressType(IpAddressType.IPV6)
                                                .withMatchConditions(
                                                    Arrays.asList(new AccessControlListMatchCondition()))
                                                .withActions(
                                                    Arrays
                                                        .asList(
                                                            new AccessControlListAction(),
                                                            new AccessControlListAction())),
                                            new AccessControlListMatchConfiguration()
                                                .withMatchConfigurationName("rqlrqffawe")
                                                .withSequenceNumber(49967768153129763L)
                                                .withIpAddressType(IpAddressType.IPV4)
                                                .withMatchConditions(
                                                    Arrays
                                                        .asList(
                                                            new AccessControlListMatchCondition(),
                                                            new AccessControlListMatchCondition(),
                                                            new AccessControlListMatchCondition(),
                                                            new AccessControlListMatchCondition()))
                                                .withActions(Arrays.asList(new AccessControlListAction())),
                                            new AccessControlListMatchConfiguration()
                                                .withMatchConfigurationName("av")
                                                .withSequenceNumber(1106225492612051465L)
                                                .withIpAddressType(IpAddressType.IPV6)
                                                .withMatchConditions(
                                                    Arrays.asList(new AccessControlListMatchCondition()))
                                                .withActions(
                                                    Arrays
                                                        .asList(
                                                            new AccessControlListAction(),
                                                            new AccessControlListAction(),
                                                            new AccessControlListAction()))))
                                .withDynamicMatchConfigurations(
                                    Arrays
                                        .asList(
                                            new CommonDynamicMatchConfiguration()
                                                .withIpGroups(Arrays.asList(new IpGroupProperties()))
                                                .withVlanGroups(Arrays.asList(new VlanGroupProperties()))
                                                .withPortGroups(
                                                    Arrays
                                                        .asList(
                                                            new PortGroupProperties(),
                                                            new PortGroupProperties(),
                                                            new PortGroupProperties(),
                                                            new PortGroupProperties())),
                                            new CommonDynamicMatchConfiguration()
                                                .withIpGroups(
                                                    Arrays.asList(new IpGroupProperties(), new IpGroupProperties()))
                                                .withVlanGroups(Arrays.asList(new VlanGroupProperties()))
                                                .withPortGroups(
                                                    Arrays
                                                        .asList(
                                                            new PortGroupProperties(),
                                                            new PortGroupProperties(),
                                                            new PortGroupProperties(),
                                                            new PortGroupProperties())),
                                            new CommonDynamicMatchConfiguration()
                                                .withIpGroups(
                                                    Arrays.asList(new IpGroupProperties(), new IpGroupProperties()))
                                                .withVlanGroups(Arrays.asList(new VlanGroupProperties()))
                                                .withPortGroups(
                                                    Arrays
                                                        .asList(new PortGroupProperties(), new PortGroupProperties()))))
                                .withAnnotation("duusioycblevpmcl")))
                .withNextLink("wjtkschgcgqyhl");
        model = BinaryData.fromObject(model).toObject(AccessControlListsListResult.class);
        Assertions.assertEquals("yxkyxlz", model.value().get(0).location());
        Assertions.assertEquals("gkzz", model.value().get(0).tags().get("taf"));
        Assertions.assertEquals(ConfigurationType.FILE, model.value().get(0).configurationType());
        Assertions.assertEquals("aiancznvodr", model.value().get(0).aclsUrl());
        Assertions
            .assertEquals("lxydkxrxv", model.value().get(0).matchConfigurations().get(0).matchConfigurationName());
        Assertions
            .assertEquals(731559020622365295L, model.value().get(0).matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.value().get(0).matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("duusioycblevpmcl", model.value().get(0).annotation());
        Assertions.assertEquals("wjtkschgcgqyhl", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
