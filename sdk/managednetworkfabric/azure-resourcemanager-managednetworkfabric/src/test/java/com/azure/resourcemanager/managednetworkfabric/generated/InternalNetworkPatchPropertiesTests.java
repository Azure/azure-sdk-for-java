// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternalNetworkPatchProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BgpConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborAddress;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InternalNetworkPatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternalNetworkPatchProperties model = BinaryData.fromString(
            "{\"bgpConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"RMA\",\"intervalInMilliSeconds\":1340286391,\"multiplier\":2065842575},\"defaultRouteOriginate\":\"False\",\"allowAS\":1132415165,\"allowASOverride\":\"Enable\",\"fabricASN\":7575593636037986210,\"peerASN\":771473352350641992,\"ipv4ListenRangePrefixes\":[\"dphmtybkcgsuth\",\"llnmwyn\",\"fxexlfciatxtjrr\"],\"ipv6ListenRangePrefixes\":[\"dskjhhxdlaj\",\"oxcxscvslx\",\"hu\",\"vkrmukmyjmkx\"],\"ipv4NeighborAddress\":[{\"address\":\"slojfkqidnqt\",\"configurationState\":\"Rejected\"},{\"address\":\"hqxc\",\"configurationState\":\"ErrorDeprovisioning\"}],\"ipv6NeighborAddress\":[{\"address\":\"tnq\",\"configurationState\":\"Deprovisioned\"}],\"annotation\":\"ld\"},\"staticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":1527865804,\"multiplier\":26223808},\"ipv4Routes\":[{\"prefix\":\"qkzn\",\"nextHop\":[\"hllxricctkw\"]},{\"prefix\":\"uqqoaj\",\"nextHop\":[\"iygle\",\"rwvaexhdc\",\"rceqnkbrupob\",\"hdmljz\"]},{\"prefix\":\"cvumepjpbi\",\"nextHop\":[\"zpphepif\",\"xleqircc\",\"cly\"]},{\"prefix\":\"cgxvrpj\",\"nextHop\":[\"czuod\",\"cpunettepdjx\",\"eskoy\"]}],\"ipv6Routes\":[{\"prefix\":\"ylpckaewsedv\",\"nextHop\":[\"kwxe\",\"qphr\"]},{\"prefix\":\"fn\",\"nextHop\":[\"ctmjtsghpbcbc\",\"zarpzeqacdldt\",\"mpypefcpczshnuq\"]}]},\"mtu\":830792514,\"connectedIPv4Subnets\":[{\"prefix\":\"upfkhuytuszxhmtv\",\"annotation\":\"egw\"},{\"prefix\":\"iukvzwydwt\",\"annotation\":\"aokgkskjivbsshaj\"},{\"prefix\":\"fukpeexpgeu\",\"annotation\":\"lh\"},{\"prefix\":\"uitrdexyiono\",\"annotation\":\"inbd\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"xcwqqrsmpc\",\"annotation\":\"prtug\"}],\"importRoutePolicyId\":\"bzbcyksiv\",\"exportRoutePolicyId\":\"ogd\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"fcmkr\",\"importIpv6RoutePolicyId\":\"sjcwjjxsgmbawvif\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"eci\",\"exportIpv6RoutePolicyId\":\"ocjxw\"},\"ingressAclId\":\"ooz\",\"egressAclId\":\"txvcm\",\"isMonitoringEnabled\":\"True\",\"annotation\":\"lcpx\"}")
            .toObject(InternalNetworkPatchProperties.class);
        Assertions.assertEquals("lcpx", model.annotation());
        Assertions.assertEquals("ld", model.bgpConfiguration().annotation());
        Assertions.assertEquals(1340286391, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(2065842575, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1132415165, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(771473352350641992L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("dphmtybkcgsuth", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("dskjhhxdlaj", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("slojfkqidnqt", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("tnq", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(1527865804,
            model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(26223808, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("qkzn", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("hllxricctkw", model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("ylpckaewsedv", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("kwxe", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(830792514, model.mtu());
        Assertions.assertEquals("egw", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("upfkhuytuszxhmtv", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("prtug", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("xcwqqrsmpc", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("bzbcyksiv", model.importRoutePolicyId());
        Assertions.assertEquals("ogd", model.exportRoutePolicyId());
        Assertions.assertEquals("fcmkr", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("sjcwjjxsgmbawvif", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("eci", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("ocjxw", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("ooz", model.ingressAclId());
        Assertions.assertEquals("txvcm", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.TRUE, model.isMonitoringEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternalNetworkPatchProperties model = new InternalNetworkPatchProperties().withAnnotation("lcpx")
            .withBgpConfiguration(new BgpConfiguration().withAnnotation("ld")
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(1340286391).withMultiplier(2065842575))
                .withDefaultRouteOriginate(BooleanEnumProperty.FALSE)
                .withAllowAS(1132415165)
                .withAllowASOverride(AllowASOverride.ENABLE)
                .withPeerAsn(771473352350641992L)
                .withIpv4ListenRangePrefixes(Arrays.asList("dphmtybkcgsuth", "llnmwyn", "fxexlfciatxtjrr"))
                .withIpv6ListenRangePrefixes(Arrays.asList("dskjhhxdlaj", "oxcxscvslx", "hu", "vkrmukmyjmkx"))
                .withIpv4NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("slojfkqidnqt"),
                    new NeighborAddress().withAddress("hqxc")))
                .withIpv6NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("tnq"))))
            .withStaticRouteConfiguration(new StaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(1527865804).withMultiplier(26223808))
                .withIpv4Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("qkzn").withNextHop(Arrays.asList("hllxricctkw")),
                    new StaticRouteProperties().withPrefix("uqqoaj")
                        .withNextHop(Arrays.asList("iygle", "rwvaexhdc", "rceqnkbrupob", "hdmljz")),
                    new StaticRouteProperties().withPrefix("cvumepjpbi")
                        .withNextHop(Arrays.asList("zpphepif", "xleqircc", "cly")),
                    new StaticRouteProperties().withPrefix("cgxvrpj")
                        .withNextHop(Arrays.asList("czuod", "cpunettepdjx", "eskoy"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("ylpckaewsedv").withNextHop(Arrays.asList("kwxe", "qphr")),
                    new StaticRouteProperties().withPrefix("fn")
                        .withNextHop(Arrays.asList("ctmjtsghpbcbc", "zarpzeqacdldt", "mpypefcpczshnuq")))))
            .withMtu(830792514)
            .withConnectedIPv4Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("egw").withPrefix("upfkhuytuszxhmtv"),
                    new ConnectedSubnet().withAnnotation("aokgkskjivbsshaj").withPrefix("iukvzwydwt"),
                    new ConnectedSubnet().withAnnotation("lh").withPrefix("fukpeexpgeu"),
                    new ConnectedSubnet().withAnnotation("inbd").withPrefix("uitrdexyiono")))
            .withConnectedIPv6Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("prtug").withPrefix("xcwqqrsmpc")))
            .withImportRoutePolicyId("bzbcyksiv")
            .withExportRoutePolicyId("ogd")
            .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("fcmkr")
                .withImportIpv6RoutePolicyId("sjcwjjxsgmbawvif"))
            .withExportRoutePolicy(
                new ExportRoutePolicy().withExportIpv4RoutePolicyId("eci").withExportIpv6RoutePolicyId("ocjxw"))
            .withIngressAclId("ooz")
            .withEgressAclId("txvcm")
            .withIsMonitoringEnabled(IsMonitoringEnabled.TRUE);
        model = BinaryData.fromObject(model).toObject(InternalNetworkPatchProperties.class);
        Assertions.assertEquals("lcpx", model.annotation());
        Assertions.assertEquals("ld", model.bgpConfiguration().annotation());
        Assertions.assertEquals(1340286391, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(2065842575, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1132415165, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(771473352350641992L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("dphmtybkcgsuth", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("dskjhhxdlaj", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("slojfkqidnqt", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("tnq", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(1527865804,
            model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(26223808, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("qkzn", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("hllxricctkw", model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("ylpckaewsedv", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("kwxe", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(830792514, model.mtu());
        Assertions.assertEquals("egw", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("upfkhuytuszxhmtv", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("prtug", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("xcwqqrsmpc", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("bzbcyksiv", model.importRoutePolicyId());
        Assertions.assertEquals("ogd", model.exportRoutePolicyId());
        Assertions.assertEquals("fcmkr", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("sjcwjjxsgmbawvif", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("eci", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("ocjxw", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("ooz", model.ingressAclId());
        Assertions.assertEquals("txvcm", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.TRUE, model.isMonitoringEnabled());
    }
}
