// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternalNetworkProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.Extension;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesBgpConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborAddress;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InternalNetworkPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternalNetworkProperties model = BinaryData.fromString(
            "{\"vlanId\":397269197,\"bgpConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":244721827,\"multiplier\":2037693383},\"defaultRouteOriginate\":\"False\",\"allowAS\":1284555207,\"allowASOverride\":\"Disable\",\"fabricASN\":8681531274121612481,\"peerASN\":2057762139557191940,\"ipv4ListenRangePrefixes\":[\"jdrqcrjidhftu\",\"vhdxlwyo\",\"bfqz\",\"kfnjyixhafrat\"],\"ipv6ListenRangePrefixes\":[\"bjroumzzn\",\"al\"],\"ipv4NeighborAddress\":[{\"address\":\"uzgfxonjtpusl\",\"configurationState\":\"Rejected\"},{\"address\":\"vtio\",\"configurationState\":\"Deprovisioned\"},{\"address\":\"d\",\"configurationState\":\"Deprovisioning\"},{\"address\":\"gryfqiuasig\",\"configurationState\":\"ErrorDeprovisioning\"}],\"ipv6NeighborAddress\":[{\"address\":\"nequy\",\"configurationState\":\"Accepted\"},{\"address\":\"oqgrmtqjkqevadr\",\"configurationState\":\"ErrorDeprovisioning\"},{\"address\":\"uawvcmjzk\",\"configurationState\":\"ErrorDeprovisioning\"},{\"address\":\"isczskoswo\",\"configurationState\":\"Rejected\"}],\"annotation\":\"zugamxzkrrcoiis\"},\"staticRouteConfiguration\":{\"extension\":\"NoExtension\",\"bfdConfiguration\":{\"administrativeState\":\"Enabled\",\"intervalInMilliSeconds\":77234697,\"multiplier\":6478909},\"ipv4Routes\":[{\"prefix\":\"dsbezaxyfu\",\"nextHop\":[\"xuizhyhnepkpet\",\"arxqiubx\",\"ukecpx\",\"azvdhctmmkosz\"]},{\"prefix\":\"dblnsntrp\",\"nextHop\":[\"qkio\",\"kb\"]}],\"ipv6Routes\":[{\"prefix\":\"hklbnldpvcbh\",\"nextHop\":[\"zyqu\",\"usqxutrpbrr\"]},{\"prefix\":\"yuuatvlmbjwcolbm\",\"nextHop\":[\"b\",\"w\",\"pcpahprzrvxhmtf\"]}]},\"configurationState\":\"Provisioned\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Enabled\",\"mtu\":1998287589,\"connectedIPv4Subnets\":[{\"prefix\":\"gxnoqrxtdis\",\"annotation\":\"evhdlmydid\"},{\"prefix\":\"hepfwwtjfdoes\",\"annotation\":\"hmwcdbck\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"kxkxhnegk\",\"annotation\":\"z\"},{\"prefix\":\"bhtmeplvuk\",\"annotation\":\"brlbpgs\"},{\"prefix\":\"bagn\",\"annotation\":\"jhgem\"}],\"importRoutePolicyId\":\"wakywalhjymxcgq\",\"exportRoutePolicyId\":\"gdrclssolj\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"vtfycnlbvgjcodk\",\"importIpv6RoutePolicyId\":\"ji\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"s\",\"exportIpv6RoutePolicyId\":\"k\"},\"ingressAclId\":\"bcufqbvntn\",\"egressAclId\":\"mqso\",\"isMonitoringEnabled\":\"True\",\"extension\":\"NPB\",\"annotation\":\"gnlykm\"}")
            .toObject(InternalNetworkProperties.class);
        Assertions.assertEquals("gnlykm", model.annotation());
        Assertions.assertEquals(397269197, model.vlanId());
        Assertions.assertEquals("zugamxzkrrcoiis", model.bgpConfiguration().annotation());
        Assertions.assertEquals(244721827, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(2037693383, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1284555207, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.DISABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(2057762139557191940L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("jdrqcrjidhftu", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("bjroumzzn", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("uzgfxonjtpusl", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("nequy", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(77234697, model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(6478909, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("dsbezaxyfu", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("xuizhyhnepkpet",
            model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("hklbnldpvcbh", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("zyqu", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(Extension.NO_EXTENSION, model.staticRouteConfiguration().extension());
        Assertions.assertEquals(1998287589, model.mtu());
        Assertions.assertEquals("evhdlmydid", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("gxnoqrxtdis", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("z", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("kxkxhnegk", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("wakywalhjymxcgq", model.importRoutePolicyId());
        Assertions.assertEquals("gdrclssolj", model.exportRoutePolicyId());
        Assertions.assertEquals("vtfycnlbvgjcodk", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("ji", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("s", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("k", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("bcufqbvntn", model.ingressAclId());
        Assertions.assertEquals("mqso", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.TRUE, model.isMonitoringEnabled());
        Assertions.assertEquals(Extension.NPB, model.extension());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternalNetworkProperties model = new InternalNetworkProperties().withAnnotation("gnlykm")
            .withVlanId(397269197)
            .withBgpConfiguration(new InternalNetworkPropertiesBgpConfiguration().withAnnotation("zugamxzkrrcoiis")
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(244721827).withMultiplier(2037693383))
                .withDefaultRouteOriginate(BooleanEnumProperty.FALSE)
                .withAllowAS(1284555207)
                .withAllowASOverride(AllowASOverride.DISABLE)
                .withPeerAsn(2057762139557191940L)
                .withIpv4ListenRangePrefixes(Arrays.asList("jdrqcrjidhftu", "vhdxlwyo", "bfqz", "kfnjyixhafrat"))
                .withIpv6ListenRangePrefixes(Arrays.asList("bjroumzzn", "al"))
                .withIpv4NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("uzgfxonjtpusl"),
                    new NeighborAddress().withAddress("vtio"), new NeighborAddress().withAddress("d"),
                    new NeighborAddress().withAddress("gryfqiuasig")))
                .withIpv6NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("nequy"),
                    new NeighborAddress().withAddress("oqgrmtqjkqevadr"),
                    new NeighborAddress().withAddress("uawvcmjzk"), new NeighborAddress().withAddress("isczskoswo"))))
            .withStaticRouteConfiguration(new InternalNetworkPropertiesStaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(77234697).withMultiplier(6478909))
                .withIpv4Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("dsbezaxyfu")
                        .withNextHop(Arrays.asList("xuizhyhnepkpet", "arxqiubx", "ukecpx", "azvdhctmmkosz")),
                    new StaticRouteProperties().withPrefix("dblnsntrp").withNextHop(Arrays.asList("qkio", "kb"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("hklbnldpvcbh")
                        .withNextHop(Arrays.asList("zyqu", "usqxutrpbrr")),
                    new StaticRouteProperties().withPrefix("yuuatvlmbjwcolbm")
                        .withNextHop(Arrays.asList("b", "w", "pcpahprzrvxhmtf"))))
                .withExtension(Extension.NO_EXTENSION))
            .withMtu(1998287589)
            .withConnectedIPv4Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("evhdlmydid").withPrefix("gxnoqrxtdis"),
                    new ConnectedSubnet().withAnnotation("hmwcdbck").withPrefix("hepfwwtjfdoes")))
            .withConnectedIPv6Subnets(Arrays.asList(new ConnectedSubnet().withAnnotation("z").withPrefix("kxkxhnegk"),
                new ConnectedSubnet().withAnnotation("brlbpgs").withPrefix("bhtmeplvuk"),
                new ConnectedSubnet().withAnnotation("jhgem").withPrefix("bagn")))
            .withImportRoutePolicyId("wakywalhjymxcgq")
            .withExportRoutePolicyId("gdrclssolj")
            .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("vtfycnlbvgjcodk")
                .withImportIpv6RoutePolicyId("ji"))
            .withExportRoutePolicy(
                new ExportRoutePolicy().withExportIpv4RoutePolicyId("s").withExportIpv6RoutePolicyId("k"))
            .withIngressAclId("bcufqbvntn")
            .withEgressAclId("mqso")
            .withIsMonitoringEnabled(IsMonitoringEnabled.TRUE)
            .withExtension(Extension.NPB);
        model = BinaryData.fromObject(model).toObject(InternalNetworkProperties.class);
        Assertions.assertEquals("gnlykm", model.annotation());
        Assertions.assertEquals(397269197, model.vlanId());
        Assertions.assertEquals("zugamxzkrrcoiis", model.bgpConfiguration().annotation());
        Assertions.assertEquals(244721827, model.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(2037693383, model.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1284555207, model.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.DISABLE, model.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(2057762139557191940L, model.bgpConfiguration().peerAsn());
        Assertions.assertEquals("jdrqcrjidhftu", model.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("bjroumzzn", model.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("uzgfxonjtpusl", model.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("nequy", model.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(77234697, model.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(6478909, model.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("dsbezaxyfu", model.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("xuizhyhnepkpet",
            model.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("hklbnldpvcbh", model.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("zyqu", model.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(Extension.NO_EXTENSION, model.staticRouteConfiguration().extension());
        Assertions.assertEquals(1998287589, model.mtu());
        Assertions.assertEquals("evhdlmydid", model.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("gxnoqrxtdis", model.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("z", model.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("kxkxhnegk", model.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("wakywalhjymxcgq", model.importRoutePolicyId());
        Assertions.assertEquals("gdrclssolj", model.exportRoutePolicyId());
        Assertions.assertEquals("vtfycnlbvgjcodk", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("ji", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("s", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("k", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("bcufqbvntn", model.ingressAclId());
        Assertions.assertEquals("mqso", model.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.TRUE, model.isMonitoringEnabled());
        Assertions.assertEquals(Extension.NPB, model.extension());
    }
}
