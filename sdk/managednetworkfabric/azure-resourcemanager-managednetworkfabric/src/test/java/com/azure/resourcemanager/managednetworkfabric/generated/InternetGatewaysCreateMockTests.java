// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.GatewayType;
import com.azure.resourcemanager.managednetworkfabric.models.InternetGateway;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InternetGatewaysCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ipv4Address\":\"ldaqwjun\",\"port\":300799614,\"type\":\"Workload\",\"networkFabricControllerId\":\"jhwcbrdsyp\",\"provisioningState\":\"Succeeded\",\"internetGatewayRuleId\":\"kbvzpkodngvnq\",\"annotation\":\"gsbtwgnldxu\"},\"location\":\"lhvbqyczn\",\"tags\":{\"qwucqsdgbx\":\"piiuvcqoq\",\"myvwp\":\"wtvmijccpkkjl\"},\"id\":\"jmaih\",\"name\":\"nnlb\",\"type\":\"xjppcbqetfzfppv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InternetGateway response = manager.internetGateways()
            .define("mi")
            .withRegion("xpijvapeak")
            .withExistingResourceGroup("o")
            .withTypePropertiesType(GatewayType.WORKLOAD)
            .withNetworkFabricControllerId("znghuqzgpdglkf")
            .withTags(mapOf("a", "cedliklxkyoddoq", "qyrgqmndk", "qtrkicw"))
            .withInternetGatewayRuleId("gavtfy")
            .withAnnotation("edfmzuk")
            .create();

        Assertions.assertEquals("lhvbqyczn", response.location());
        Assertions.assertEquals("piiuvcqoq", response.tags().get("qwucqsdgbx"));
        Assertions.assertEquals(GatewayType.WORKLOAD, response.typePropertiesType());
        Assertions.assertEquals("jhwcbrdsyp", response.networkFabricControllerId());
        Assertions.assertEquals("kbvzpkodngvnq", response.internetGatewayRuleId());
        Assertions.assertEquals("gsbtwgnldxu", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
