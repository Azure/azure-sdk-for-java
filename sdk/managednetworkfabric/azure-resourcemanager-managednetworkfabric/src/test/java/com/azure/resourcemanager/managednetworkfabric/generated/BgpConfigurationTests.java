// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BgpConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborAddress;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BgpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BgpConfiguration model = BinaryData.fromString(
            "{\"bfdConfiguration\":{\"administrativeState\":\"RMA\",\"intervalInMilliSeconds\":826879471,\"multiplier\":1682795627},\"defaultRouteOriginate\":\"False\",\"allowAS\":367335862,\"allowASOverride\":\"Enable\",\"fabricASN\":9149739822165155444,\"peerASN\":1426374752263433647,\"ipv4ListenRangePrefixes\":[\"a\",\"wmzwdfkbnrzorpdl\",\"bqc\",\"qjf\"],\"ipv6ListenRangePrefixes\":[\"saetgzdgvpyig\",\"aqqilzdcduwjoed\"],\"ipv4NeighborAddress\":[{\"address\":\"caifpaurww\",\"configurationState\":\"Provisioned\"},{\"address\":\"jqqacdmkx\",\"configurationState\":\"ErrorProvisioning\"}],\"ipv6NeighborAddress\":[{\"address\":\"wcyz\",\"configurationState\":\"Succeeded\"}],\"annotation\":\"ciqchxrtuicd\"}")
            .toObject(BgpConfiguration.class);
        Assertions.assertEquals("ciqchxrtuicd", model.annotation());
        Assertions.assertEquals(826879471, model.bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1682795627, model.bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.defaultRouteOriginate());
        Assertions.assertEquals(367335862, model.allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.allowASOverride());
        Assertions.assertEquals(1426374752263433647L, model.peerAsn());
        Assertions.assertEquals("a", model.ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("saetgzdgvpyig", model.ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("caifpaurww", model.ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("wcyz", model.ipv6NeighborAddress().get(0).address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BgpConfiguration model = new BgpConfiguration().withAnnotation("ciqchxrtuicd")
            .withBfdConfiguration(
                new BfdConfiguration().withIntervalInMilliSeconds(826879471).withMultiplier(1682795627))
            .withDefaultRouteOriginate(BooleanEnumProperty.FALSE)
            .withAllowAS(367335862)
            .withAllowASOverride(AllowASOverride.ENABLE)
            .withPeerAsn(1426374752263433647L)
            .withIpv4ListenRangePrefixes(Arrays.asList("a", "wmzwdfkbnrzorpdl", "bqc", "qjf"))
            .withIpv6ListenRangePrefixes(Arrays.asList("saetgzdgvpyig", "aqqilzdcduwjoed"))
            .withIpv4NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("caifpaurww"),
                new NeighborAddress().withAddress("jqqacdmkx")))
            .withIpv6NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("wcyz")));
        model = BinaryData.fromObject(model).toObject(BgpConfiguration.class);
        Assertions.assertEquals("ciqchxrtuicd", model.annotation());
        Assertions.assertEquals(826879471, model.bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1682795627, model.bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.defaultRouteOriginate());
        Assertions.assertEquals(367335862, model.allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.allowASOverride());
        Assertions.assertEquals(1426374752263433647L, model.peerAsn());
        Assertions.assertEquals("a", model.ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("saetgzdgvpyig", model.ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("caifpaurww", model.ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("wcyz", model.ipv6NeighborAddress().get(0).address());
    }
}
