// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkToNetworkInterconnectProperties;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.IsManagementType;
import com.azure.resourcemanager.managednetworkfabric.models.Layer2Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NniType;
import com.azure.resourcemanager.managednetworkfabric.models.NpbStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkToNetworkInterconnectPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkToNetworkInterconnectProperties model = BinaryData.fromString(
            "{\"nniType\":\"CE\",\"isManagementType\":\"True\",\"useOptionB\":\"True\",\"layer2Configuration\":{\"mtu\":1239120549,\"interfaces\":[\"qna\"]},\"optionBLayer3Configuration\":{\"peerASN\":5874584824497919701,\"vlanId\":656596398,\"fabricASN\":1053496185156483112,\"primaryIpv4Prefix\":\"opbtsixhgv\",\"primaryIpv6Prefix\":\"xmndztgsqjayqmar\",\"secondaryIpv4Prefix\":\"eibpgbrhbjdqkn\",\"secondaryIpv6Prefix\":\"nmotpuwnnoh\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":14114597,\"multiplier\":735481406},\"ipv4Routes\":[{\"prefix\":\"ypwyiulayno\",\"nextHop\":[\"gkfh\",\"xttpfs\",\"wgsghqucumldd\",\"uqmllfeothxu\"]},{\"prefix\":\"rigrjdljlkq\",\"nextHop\":[\"krbzkuas\",\"axklpruulh\",\"l\",\"oizwxvs\"]},{\"prefix\":\"ksgfyyskyekg\",\"nextHop\":[\"xczvfcckwrtwle\"]},{\"prefix\":\"yveszr\",\"nextHop\":[\"hpdhwynctaczcnjf\",\"bbfnvjxitzovnkr\",\"iklsmni\",\"qlcoqksyiibhyx\"]}],\"ipv6Routes\":[{\"prefix\":\"bu\",\"nextHop\":[\"vqdorbccqcd\",\"thojvlirknucos\",\"wrdtnagzlgpy\"]},{\"prefix\":\"ixihzqj\",\"nextHop\":[\"smuydqfttk\",\"cybdueurgm\",\"dcpks\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"jermhzic\",\"importIpv6RoutePolicyId\":\"fdjhyaaknyukibxi\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"phzwxqte\",\"exportIpv6RoutePolicyId\":\"iilhvtozyagj\"},\"egressAclId\":\"xkbylhyyxgffklv\",\"ingressAclId\":\"rwtrdgscnvqeonsg\",\"configurationState\":\"Provisioning\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"RMA\"}")
            .toObject(NetworkToNetworkInterconnectProperties.class);
        Assertions.assertEquals(NniType.CE, model.nniType());
        Assertions.assertEquals(IsManagementType.TRUE, model.isManagementType());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, model.useOptionB());
        Assertions.assertEquals(1239120549, model.layer2Configuration().mtu());
        Assertions.assertEquals("qna", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("opbtsixhgv", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("xmndztgsqjayqmar", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("eibpgbrhbjdqkn", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("nmotpuwnnoh", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(5874584824497919701L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(656596398, model.optionBLayer3Configuration().vlanId());
        Assertions.assertEquals(14114597,
            model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(735481406, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("ypwyiulayno", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("gkfh", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("bu", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("vqdorbccqcd",
            model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("jermhzic", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("fdjhyaaknyukibxi", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("phzwxqte", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("iilhvtozyagj", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("xkbylhyyxgffklv", model.egressAclId());
        Assertions.assertEquals("rwtrdgscnvqeonsg", model.ingressAclId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkToNetworkInterconnectProperties model = new NetworkToNetworkInterconnectProperties()
            .withNniType(NniType.CE)
            .withIsManagementType(IsManagementType.TRUE)
            .withUseOptionB(BooleanEnumProperty.TRUE)
            .withLayer2Configuration(new Layer2Configuration().withMtu(1239120549).withInterfaces(Arrays.asList("qna")))
            .withOptionBLayer3Configuration(new NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration()
                .withPrimaryIpv4Prefix("opbtsixhgv")
                .withPrimaryIpv6Prefix("xmndztgsqjayqmar")
                .withSecondaryIpv4Prefix("eibpgbrhbjdqkn")
                .withSecondaryIpv6Prefix("nmotpuwnnoh")
                .withPeerAsn(5874584824497919701L)
                .withVlanId(656596398))
            .withNpbStaticRouteConfiguration(new NpbStaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(14114597).withMultiplier(735481406))
                .withIpv4Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("ypwyiulayno")
                        .withNextHop(Arrays.asList("gkfh", "xttpfs", "wgsghqucumldd", "uqmllfeothxu")),
                    new StaticRouteProperties().withPrefix("rigrjdljlkq")
                        .withNextHop(Arrays.asList("krbzkuas", "axklpruulh", "l", "oizwxvs")),
                    new StaticRouteProperties().withPrefix("ksgfyyskyekg").withNextHop(Arrays.asList("xczvfcckwrtwle")),
                    new StaticRouteProperties().withPrefix("yveszr")
                        .withNextHop(
                            Arrays.asList("hpdhwynctaczcnjf", "bbfnvjxitzovnkr", "iklsmni", "qlcoqksyiibhyx"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("bu")
                        .withNextHop(Arrays.asList("vqdorbccqcd", "thojvlirknucos", "wrdtnagzlgpy")),
                    new StaticRouteProperties().withPrefix("ixihzqj")
                        .withNextHop(Arrays.asList("smuydqfttk", "cybdueurgm", "dcpks")))))
            .withImportRoutePolicy(new ImportRoutePolicyInformation().withImportIpv4RoutePolicyId("jermhzic")
                .withImportIpv6RoutePolicyId("fdjhyaaknyukibxi"))
            .withExportRoutePolicy(new ExportRoutePolicyInformation().withExportIpv4RoutePolicyId("phzwxqte")
                .withExportIpv6RoutePolicyId("iilhvtozyagj"))
            .withEgressAclId("xkbylhyyxgffklv")
            .withIngressAclId("rwtrdgscnvqeonsg");
        model = BinaryData.fromObject(model).toObject(NetworkToNetworkInterconnectProperties.class);
        Assertions.assertEquals(NniType.CE, model.nniType());
        Assertions.assertEquals(IsManagementType.TRUE, model.isManagementType());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, model.useOptionB());
        Assertions.assertEquals(1239120549, model.layer2Configuration().mtu());
        Assertions.assertEquals("qna", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("opbtsixhgv", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("xmndztgsqjayqmar", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("eibpgbrhbjdqkn", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("nmotpuwnnoh", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(5874584824497919701L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(656596398, model.optionBLayer3Configuration().vlanId());
        Assertions.assertEquals(14114597,
            model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(735481406, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("ypwyiulayno", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("gkfh", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("bu", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("vqdorbccqcd",
            model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("jermhzic", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("fdjhyaaknyukibxi", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("phzwxqte", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("iilhvtozyagj", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("xkbylhyyxgffklv", model.egressAclId());
        Assertions.assertEquals("rwtrdgscnvqeonsg", model.ingressAclId());
    }
}
