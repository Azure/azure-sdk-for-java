// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkRackInner;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkRackType;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkRacksListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkRacksListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkRacksListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"networkRackType\":\"Combined\",\"networkFabricId\":\"gapvdgtfpeerscdx\",\"networkDevices\":[\"njrcuf\"],\"provisioningState\":\"Canceled\",\"annotation\":\"cnrgfdtnc\"},\"location\":\"psa\",\"tags\":{\"qiqmlfvhlq\":\"meub\"},\"id\":\"skkqjmxptuei\",\"name\":\"uugkw\",\"type\":\"rq\"}],\"nextLink\":\"pahu\"}")
                .toObject(NetworkRacksListResult.class);
        Assertions.assertEquals("psa", model.value().get(0).location());
        Assertions.assertEquals("meub", model.value().get(0).tags().get("qiqmlfvhlq"));
        Assertions.assertEquals(NetworkRackType.COMBINED, model.value().get(0).networkRackType());
        Assertions.assertEquals("gapvdgtfpeerscdx", model.value().get(0).networkFabricId());
        Assertions.assertEquals("cnrgfdtnc", model.value().get(0).annotation());
        Assertions.assertEquals("pahu", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkRacksListResult model =
            new NetworkRacksListResult()
                .withValue(
                    Arrays
                        .asList(
                            new NetworkRackInner()
                                .withLocation("psa")
                                .withTags(mapOf("qiqmlfvhlq", "meub"))
                                .withNetworkRackType(NetworkRackType.COMBINED)
                                .withNetworkFabricId("gapvdgtfpeerscdx")
                                .withAnnotation("cnrgfdtnc")))
                .withNextLink("pahu");
        model = BinaryData.fromObject(model).toObject(NetworkRacksListResult.class);
        Assertions.assertEquals("psa", model.value().get(0).location());
        Assertions.assertEquals("meub", model.value().get(0).tags().get("qiqmlfvhlq"));
        Assertions.assertEquals(NetworkRackType.COMBINED, model.value().get(0).networkRackType());
        Assertions.assertEquals("gapvdgtfpeerscdx", model.value().get(0).networkFabricId());
        Assertions.assertEquals("cnrgfdtnc", model.value().get(0).annotation());
        Assertions.assertEquals("pahu", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
