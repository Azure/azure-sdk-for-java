// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L3IsolationDomainProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRoute;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnetRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeConnectedSubnets;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeStaticRoutes;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class L3IsolationDomainPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3IsolationDomainProperties model = BinaryData.fromString(
            "{\"networkFabricId\":\"jb\",\"configurationState\":\"DeferredControl\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"Disabled\",\"redistributeConnectedSubnets\":\"True\",\"redistributeStaticRoutes\":\"True\",\"aggregateRouteConfiguration\":{\"ipv4Routes\":[{\"prefix\":\"fwwvuatbwbqam\"}],\"ipv6Routes\":[{\"prefix\":\"liys\"},{\"prefix\":\"pkcvmwf\"},{\"prefix\":\"uxx\"}]},\"connectedSubnetRoutePolicy\":{\"exportRoutePolicyId\":\"ywbo\",\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"qmiciijqp\",\"exportIpv6RoutePolicyId\":\"fbojxjmcsmyqwix\"}},\"annotation\":\"pwnkwywzwo\"}")
            .toObject(L3IsolationDomainProperties.class);
        Assertions.assertEquals("pwnkwywzwo", model.annotation());
        Assertions.assertEquals("jb", model.networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.TRUE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.TRUE, model.redistributeStaticRoutes());
        Assertions.assertEquals("fwwvuatbwbqam", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("liys", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("ywbo", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("qmiciijqp",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("fbojxjmcsmyqwix",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3IsolationDomainProperties model = new L3IsolationDomainProperties().withAnnotation("pwnkwywzwo")
            .withNetworkFabricId("jb")
            .withRedistributeConnectedSubnets(RedistributeConnectedSubnets.TRUE)
            .withRedistributeStaticRoutes(RedistributeStaticRoutes.TRUE)
            .withAggregateRouteConfiguration(new AggregateRouteConfiguration()
                .withIpv4Routes(Arrays.asList(new AggregateRoute().withPrefix("fwwvuatbwbqam")))
                .withIpv6Routes(Arrays.asList(new AggregateRoute().withPrefix("liys"),
                    new AggregateRoute().withPrefix("pkcvmwf"), new AggregateRoute().withPrefix("uxx"))))
            .withConnectedSubnetRoutePolicy(new ConnectedSubnetRoutePolicy().withExportRoutePolicyId("ywbo")
                .withExportRoutePolicy(new L3ExportRoutePolicy().withExportIpv4RoutePolicyId("qmiciijqp")
                    .withExportIpv6RoutePolicyId("fbojxjmcsmyqwix")));
        model = BinaryData.fromObject(model).toObject(L3IsolationDomainProperties.class);
        Assertions.assertEquals("pwnkwywzwo", model.annotation());
        Assertions.assertEquals("jb", model.networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.TRUE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.TRUE, model.redistributeStaticRoutes());
        Assertions.assertEquals("fwwvuatbwbqam", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("liys", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("ywbo", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("qmiciijqp",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("fbojxjmcsmyqwix",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
    }
}
