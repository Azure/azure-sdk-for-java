// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRoute;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnetRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3IsolationDomainPatch;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeConnectedSubnets;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeStaticRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3IsolationDomainPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3IsolationDomainPatch model = BinaryData.fromString(
            "{\"properties\":{\"redistributeConnectedSubnets\":\"False\",\"redistributeStaticRoutes\":\"True\",\"aggregateRouteConfiguration\":{\"ipv4Routes\":[{\"prefix\":\"ynq\"},{\"prefix\":\"aekqsykvwj\"},{\"prefix\":\"qpkevmyltjc\"},{\"prefix\":\"spxklu\"}],\"ipv6Routes\":[{\"prefix\":\"lfg\"}]},\"connectedSubnetRoutePolicy\":{\"exportRoutePolicyId\":\"n\",\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"t\",\"exportIpv6RoutePolicyId\":\"osewxi\"}},\"annotation\":\"xvkqm\"},\"tags\":{\"f\":\"xvpif\",\"yzeyuubeid\":\"ify\",\"gygvfltgvdiho\":\"zlfytoit\"}}")
            .toObject(L3IsolationDomainPatch.class);
        Assertions.assertEquals("xvpif", model.tags().get("f"));
        Assertions.assertEquals(RedistributeConnectedSubnets.FALSE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.TRUE, model.redistributeStaticRoutes());
        Assertions.assertEquals("ynq", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("lfg", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("n", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("t", model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("osewxi",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("xvkqm", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3IsolationDomainPatch model = new L3IsolationDomainPatch()
            .withTags(mapOf("f", "xvpif", "yzeyuubeid", "ify", "gygvfltgvdiho", "zlfytoit"))
            .withRedistributeConnectedSubnets(RedistributeConnectedSubnets.FALSE)
            .withRedistributeStaticRoutes(RedistributeStaticRoutes.TRUE)
            .withAggregateRouteConfiguration(new AggregateRouteConfiguration()
                .withIpv4Routes(
                    Arrays.asList(new AggregateRoute().withPrefix("ynq"), new AggregateRoute().withPrefix("aekqsykvwj"),
                        new AggregateRoute().withPrefix("qpkevmyltjc"), new AggregateRoute().withPrefix("spxklu")))
                .withIpv6Routes(Arrays.asList(new AggregateRoute().withPrefix("lfg"))))
            .withConnectedSubnetRoutePolicy(
                new ConnectedSubnetRoutePolicy().withExportRoutePolicyId("n")
                    .withExportRoutePolicy(new L3ExportRoutePolicy().withExportIpv4RoutePolicyId("t")
                        .withExportIpv6RoutePolicyId("osewxi")))
            .withAnnotation("xvkqm");
        model = BinaryData.fromObject(model).toObject(L3IsolationDomainPatch.class);
        Assertions.assertEquals("xvpif", model.tags().get("f"));
        Assertions.assertEquals(RedistributeConnectedSubnets.FALSE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.TRUE, model.redistributeStaticRoutes());
        Assertions.assertEquals("ynq", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("lfg", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("n", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("t", model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("osewxi",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("xvkqm", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
