// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.IsManagementType;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnect;
import com.azure.resourcemanager.managednetworkfabric.models.NniType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkToNetworkInterconnectsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"nniType\":\"CE\",\"isManagementType\":\"True\",\"useOptionB\":\"True\",\"layer2Configuration\":{\"mtu\":351886188,\"interfaces\":[\"nofkwhgyzwf\",\"fdbvooelmikdsqq\"]},\"optionBLayer3Configuration\":{\"peerASN\":5964055036515197618,\"vlanId\":1150172749,\"fabricASN\":6749661156074905652,\"primaryIpv4Prefix\":\"qmlmwjwsmnwb\",\"primaryIpv6Prefix\":\"cvemmriyz\",\"secondaryIpv4Prefix\":\"quesxplcsinbulo\",\"secondaryIpv6Prefix\":\"xhcynnmv\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":1962708584,\"multiplier\":2038824069},\"ipv4Routes\":[{\"prefix\":\"idsjqc\",\"nextHop\":[\"z\"]},{\"prefix\":\"rtfdlgp\",\"nextHop\":[\"yjl\",\"kalbcyuwahwzagv\",\"idzcephn\",\"nuhgy\"]},{\"prefix\":\"zkhi\",\"nextHop\":[\"rwpekiprjb\",\"ertj\"]},{\"prefix\":\"airpwj\",\"nextHop\":[\"giwsywp\",\"jtvqopugrsergiuz\",\"qefzypult\",\"mcbcen\"]}],\"ipv6Routes\":[{\"prefix\":\"huepikwcxoasgukq\",\"nextHop\":[\"iy\",\"bfvkiwmqnwm\"]},{\"prefix\":\"tcctirgyu\",\"nextHop\":[\"x\"]},{\"prefix\":\"zhdmcg\",\"nextHop\":[\"brybfarkhko\",\"c\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"wmoyhd\",\"importIpv6RoutePolicyId\":\"jhqnzc\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"pxoy\",\"exportIpv6RoutePolicyId\":\"mjn\"},\"egressAclId\":\"wu\",\"ingressAclId\":\"yxfknj\",\"configurationState\":\"Provisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"RMA\"},\"id\":\"avntvklkw\",\"name\":\"isn\",\"type\":\"paymk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkToNetworkInterconnect response = manager.networkToNetworkInterconnects()
            .getWithResponse("ampqepef", "mubplzoepeqlhb", "y", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(NniType.CE, response.nniType());
        Assertions.assertEquals(IsManagementType.TRUE, response.isManagementType());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, response.useOptionB());
        Assertions.assertEquals(351886188, response.layer2Configuration().mtu());
        Assertions.assertEquals("nofkwhgyzwf", response.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("qmlmwjwsmnwb", response.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("cvemmriyz", response.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("quesxplcsinbulo", response.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("xhcynnmv", response.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(5964055036515197618L, response.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(1150172749, response.optionBLayer3Configuration().vlanId());
        Assertions.assertEquals(1962708584,
            response.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(2038824069, response.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("idsjqc", response.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("z", response.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("huepikwcxoasgukq",
            response.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("iy", response.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("wmoyhd", response.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("jhqnzc", response.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("pxoy", response.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("mjn", response.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("wu", response.egressAclId());
        Assertions.assertEquals("yxfknj", response.ingressAclId());
    }
}
