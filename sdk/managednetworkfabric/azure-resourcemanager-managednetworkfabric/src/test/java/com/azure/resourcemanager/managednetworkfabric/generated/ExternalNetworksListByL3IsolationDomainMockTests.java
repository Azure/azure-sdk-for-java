// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetwork;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExternalNetworksListByL3IsolationDomainMockTests {
    @Test
    public void testListByL3IsolationDomain() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"peeringOption\":\"OptionA\",\"optionBProperties\":{\"importRouteTargets\":[\"pncjqbgbnoqnowv\"],\"exportRouteTargets\":[\"ytzgwjekyqirv\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"nvgpppdil\",\"dvxlfhlzzga\",\"sp\",\"wwblscrmzqu\"],\"importIpv6RouteTargets\":[\"wkgouxnro\",\"ht\",\"esywywnvgy\"],\"exportIpv4RouteTargets\":[\"ifrzcwuejmxlfzl\"],\"exportIpv6RouteTargets\":[\"rgrlhchra\"]}},\"optionAProperties\":{\"mtu\":919359758,\"vlanId\":1922580391,\"fabricASN\":6531716369463258640,\"peerASN\":7016612731921186008,\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":1047331940,\"multiplier\":809850020},\"ingressAclId\":\"rgmnkgtlhzkrazk\",\"egressAclId\":\"iy\",\"primaryIpv4Prefix\":\"znvzmsv\",\"primaryIpv6Prefix\":\"gheqzhehgvmmnoyz\",\"secondaryIpv4Prefix\":\"bn\",\"secondaryIpv6Prefix\":\"luzypkfcdf\"},\"configurationState\":\"PendingCommit\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Disabled\",\"networkToNetworkInterconnectId\":\"tnoilqcdvhyefqh\",\"importRoutePolicyId\":\"tsqmbwc\",\"exportRoutePolicyId\":\"waaqakv\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"axxra\",\"importIpv6RoutePolicyId\":\"lreq\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"mmd\",\"exportIpv6RoutePolicyId\":\"hzumxucznbabowrc\"},\"annotation\":\"nmjwkowxqzk\"},\"id\":\"gvejhmnaph\",\"name\":\"skmpeajzzypa\",\"type\":\"amzmzfnt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ExternalNetwork> response = manager.externalNetworks()
            .listByL3IsolationDomain("nj", "dijoxqswsychdc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(PeeringOption.OPTIONA, response.iterator().next().peeringOption());
        Assertions.assertEquals("pncjqbgbnoqnowv",
            response.iterator().next().optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("ytzgwjekyqirv",
            response.iterator().next().optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("nvgpppdil",
            response.iterator().next().optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("wkgouxnro",
            response.iterator().next().optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("ifrzcwuejmxlfzl",
            response.iterator().next().optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("rgrlhchra",
            response.iterator().next().optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals("znvzmsv", response.iterator().next().optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("gheqzhehgvmmnoyz", response.iterator().next().optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("bn", response.iterator().next().optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("luzypkfcdf", response.iterator().next().optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals(919359758, response.iterator().next().optionAProperties().mtu());
        Assertions.assertEquals(1922580391, response.iterator().next().optionAProperties().vlanId());
        Assertions.assertEquals(7016612731921186008L, response.iterator().next().optionAProperties().peerAsn());
        Assertions.assertEquals(1047331940,
            response.iterator().next().optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(809850020,
            response.iterator().next().optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("rgmnkgtlhzkrazk", response.iterator().next().optionAProperties().ingressAclId());
        Assertions.assertEquals("iy", response.iterator().next().optionAProperties().egressAclId());
        Assertions.assertEquals("tnoilqcdvhyefqh", response.iterator().next().networkToNetworkInterconnectId());
        Assertions.assertEquals("tsqmbwc", response.iterator().next().importRoutePolicyId());
        Assertions.assertEquals("waaqakv", response.iterator().next().exportRoutePolicyId());
        Assertions.assertEquals("axxra", response.iterator().next().importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("lreq", response.iterator().next().importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("mmd", response.iterator().next().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("hzumxucznbabowrc",
            response.iterator().next().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("nmjwkowxqzk", response.iterator().next().annotation());
    }
}
