// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkRackInner;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkRackType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkRackInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkRackInner model = BinaryData.fromString(
            "{\"properties\":{\"networkRackType\":\"Combined\",\"networkFabricId\":\"wmlgicvnpv\",\"networkDevices\":[\"gjnaqyqipsl\",\"mvcdsvmwbitek\"],\"provisioningState\":\"Deleting\",\"annotation\":\"bvfiybxqi\"},\"location\":\"gybfzdqekiv\",\"tags\":{\"ulrqtbht\":\"zcvdi\"},\"id\":\"ezp\",\"name\":\"lpryf\",\"type\":\"xmdutzfkgilnou\"}")
            .toObject(NetworkRackInner.class);
        Assertions.assertEquals("gybfzdqekiv", model.location());
        Assertions.assertEquals("zcvdi", model.tags().get("ulrqtbht"));
        Assertions.assertEquals(NetworkRackType.COMBINED, model.networkRackType());
        Assertions.assertEquals("wmlgicvnpv", model.networkFabricId());
        Assertions.assertEquals("bvfiybxqi", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkRackInner model = new NetworkRackInner().withLocation("gybfzdqekiv")
            .withTags(mapOf("ulrqtbht", "zcvdi"))
            .withNetworkRackType(NetworkRackType.COMBINED)
            .withNetworkFabricId("wmlgicvnpv")
            .withAnnotation("bvfiybxqi");
        model = BinaryData.fromObject(model).toObject(NetworkRackInner.class);
        Assertions.assertEquals("gybfzdqekiv", model.location());
        Assertions.assertEquals("zcvdi", model.tags().get("ulrqtbht"));
        Assertions.assertEquals(NetworkRackType.COMBINED, model.networkRackType());
        Assertions.assertEquals("wmlgicvnpv", model.networkFabricId());
        Assertions.assertEquals("bvfiybxqi", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
