// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.ActionIpCommunityProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ActionIpExtendedCommunityProperties;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityIdList;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunityIdList;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyPatch;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyStatementProperties;
import com.azure.resourcemanager.managednetworkfabric.models.StatementActionProperties;
import com.azure.resourcemanager.managednetworkfabric.models.StatementConditionProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RoutePolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoutePolicyPatch model = BinaryData.fromString(
            "{\"properties\":{\"defaultAction\":\"Permit\",\"statements\":[{\"sequenceNumber\":5960291481089340541,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"hjcwwva\",\"ipExtendedCommunityIds\":[\"kfavhkhpsp\",\"weifdyfa\"],\"ipCommunityIds\":[\"ng\",\"wnrdp\"]},\"action\":{\"localPreference\":5849652728940512099,\"actionType\":\"Deny\",\"ipCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}},\"ipExtendedCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}}},\"annotation\":\"szamijxejpd\"},{\"sequenceNumber\":7302281233372122767,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"utiye\",\"ipExtendedCommunityIds\":[\"hhjtvh\",\"sznsyovqmqcud\",\"toqwrnfc\"],\"ipCommunityIds\":[\"hlokmxwawfubk\",\"gejjxum\",\"wynjmoozm\"]},\"action\":{\"localPreference\":5927456601729899613,\"actionType\":\"Deny\",\"ipCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}},\"ipExtendedCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}}},\"annotation\":\"o\"},{\"sequenceNumber\":125614563308320468,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"dtstia\",\"ipExtendedCommunityIds\":[\"rnuhcfhepisqbc\",\"lr\",\"i\",\"mmemsoqgblcye\"],\"ipCommunityIds\":[\"bobaqca\",\"ebckcesrsixwnlpj\"]},\"action\":{\"localPreference\":1096091315863363994,\"actionType\":\"Permit\",\"ipCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}},\"ipExtendedCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}}},\"annotation\":\"idzfpsfy\"},{\"sequenceNumber\":7384396009518029284,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"mlxrqkekn\",\"ipExtendedCommunityIds\":[\"qafz\",\"ptriysjrgtruwpu\",\"p\",\"rcek\"],\"ipCommunityIds\":[\"oyd\",\"edggwgclvbwatza\",\"rjbjngoarsr\"]},\"action\":{\"localPreference\":9662774513548733,\"actionType\":\"Permit\",\"ipCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}},\"ipExtendedCommunityProperties\":{\"delete\":{},\"set\":{},\"add\":{}}},\"annotation\":\"pimrxirqwipzes\"}]},\"tags\":{\"vzjoyxjgahxue\":\"inytkmlfupjzcx\",\"cerfcvcpvf\":\"rdaktnytk\"}}")
            .toObject(RoutePolicyPatch.class);
        Assertions.assertEquals("inytkmlfupjzcx", model.tags().get("vzjoyxjgahxue"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.defaultAction());
        Assertions.assertEquals("szamijxejpd", model.statements().get(0).annotation());
        Assertions.assertEquals(5960291481089340541L, model.statements().get(0).sequenceNumber());
        Assertions.assertEquals("ng", model.statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND, model.statements().get(0).condition().type());
        Assertions.assertEquals("hjcwwva", model.statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("kfavhkhpsp", model.statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(5849652728940512099L, model.statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.DENY, model.statements().get(0).action().actionType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoutePolicyPatch model = new RoutePolicyPatch()
            .withTags(mapOf("vzjoyxjgahxue", "inytkmlfupjzcx", "cerfcvcpvf", "rdaktnytk"))
            .withDefaultAction(CommunityActionTypes.PERMIT)
            .withStatements(Arrays.asList(
                new RoutePolicyStatementProperties().withAnnotation("szamijxejpd")
                    .withSequenceNumber(5960291481089340541L)
                    .withCondition(new StatementConditionProperties().withIpCommunityIds(Arrays.asList("ng", "wnrdp"))
                        .withType(RoutePolicyConditionType.AND)
                        .withIpPrefixId("hjcwwva")
                        .withIpExtendedCommunityIds(Arrays.asList("kfavhkhpsp", "weifdyfa")))
                    .withAction(new StatementActionProperties().withLocalPreference(5849652728940512099L)
                        .withActionType(RoutePolicyActionType.DENY)
                        .withIpCommunityProperties(new ActionIpCommunityProperties().withAdd(new IpCommunityIdList())
                            .withDelete(new IpCommunityIdList())
                            .withSet(new IpCommunityIdList()))
                        .withIpExtendedCommunityProperties(
                            new ActionIpExtendedCommunityProperties().withAdd(new IpExtendedCommunityIdList())
                                .withDelete(new IpExtendedCommunityIdList())
                                .withSet(new IpExtendedCommunityIdList()))),
                new RoutePolicyStatementProperties().withAnnotation("o")
                    .withSequenceNumber(7302281233372122767L)
                    .withCondition(new StatementConditionProperties()
                        .withIpCommunityIds(Arrays.asList("hlokmxwawfubk", "gejjxum", "wynjmoozm"))
                        .withType(RoutePolicyConditionType.OR)
                        .withIpPrefixId("utiye")
                        .withIpExtendedCommunityIds(Arrays.asList("hhjtvh", "sznsyovqmqcud", "toqwrnfc")))
                    .withAction(new StatementActionProperties().withLocalPreference(5927456601729899613L)
                        .withActionType(RoutePolicyActionType.DENY)
                        .withIpCommunityProperties(new ActionIpCommunityProperties().withAdd(new IpCommunityIdList())
                            .withDelete(new IpCommunityIdList())
                            .withSet(new IpCommunityIdList()))
                        .withIpExtendedCommunityProperties(
                            new ActionIpExtendedCommunityProperties().withAdd(new IpExtendedCommunityIdList())
                                .withDelete(new IpExtendedCommunityIdList())
                                .withSet(new IpExtendedCommunityIdList()))),
                new RoutePolicyStatementProperties().withAnnotation("idzfpsfy")
                    .withSequenceNumber(125614563308320468L)
                    .withCondition(new StatementConditionProperties()
                        .withIpCommunityIds(Arrays.asList("bobaqca", "ebckcesrsixwnlpj"))
                        .withType(RoutePolicyConditionType.OR)
                        .withIpPrefixId("dtstia")
                        .withIpExtendedCommunityIds(Arrays.asList("rnuhcfhepisqbc", "lr", "i", "mmemsoqgblcye")))
                    .withAction(new StatementActionProperties().withLocalPreference(1096091315863363994L)
                        .withActionType(RoutePolicyActionType.PERMIT)
                        .withIpCommunityProperties(new ActionIpCommunityProperties().withAdd(new IpCommunityIdList())
                            .withDelete(new IpCommunityIdList())
                            .withSet(new IpCommunityIdList()))
                        .withIpExtendedCommunityProperties(
                            new ActionIpExtendedCommunityProperties().withAdd(new IpExtendedCommunityIdList())
                                .withDelete(new IpExtendedCommunityIdList())
                                .withSet(new IpExtendedCommunityIdList()))),
                new RoutePolicyStatementProperties().withAnnotation("pimrxirqwipzes")
                    .withSequenceNumber(7384396009518029284L)
                    .withCondition(new StatementConditionProperties()
                        .withIpCommunityIds(Arrays.asList("oyd", "edggwgclvbwatza", "rjbjngoarsr"))
                        .withType(RoutePolicyConditionType.AND)
                        .withIpPrefixId("mlxrqkekn")
                        .withIpExtendedCommunityIds(Arrays.asList("qafz", "ptriysjrgtruwpu", "p", "rcek")))
                    .withAction(new StatementActionProperties().withLocalPreference(9662774513548733L)
                        .withActionType(RoutePolicyActionType.PERMIT)
                        .withIpCommunityProperties(new ActionIpCommunityProperties().withAdd(new IpCommunityIdList())
                            .withDelete(new IpCommunityIdList())
                            .withSet(new IpCommunityIdList()))
                        .withIpExtendedCommunityProperties(
                            new ActionIpExtendedCommunityProperties().withAdd(new IpExtendedCommunityIdList())
                                .withDelete(new IpExtendedCommunityIdList())
                                .withSet(new IpExtendedCommunityIdList())))));
        model = BinaryData.fromObject(model).toObject(RoutePolicyPatch.class);
        Assertions.assertEquals("inytkmlfupjzcx", model.tags().get("vzjoyxjgahxue"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.defaultAction());
        Assertions.assertEquals("szamijxejpd", model.statements().get(0).annotation());
        Assertions.assertEquals(5960291481089340541L, model.statements().get(0).sequenceNumber());
        Assertions.assertEquals("ng", model.statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND, model.statements().get(0).condition().type());
        Assertions.assertEquals("hjcwwva", model.statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("kfavhkhpsp", model.statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(5849652728940512099L, model.statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.DENY, model.statements().get(0).action().actionType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
