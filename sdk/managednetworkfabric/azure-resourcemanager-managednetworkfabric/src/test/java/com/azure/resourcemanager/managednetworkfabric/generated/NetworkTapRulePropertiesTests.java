// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapRuleProperties;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleAction;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.PollingIntervalInSeconds;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.TapRuleActionType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapRuleProperties model = BinaryData.fromString(
            "{\"networkTapId\":\"uynhbokayrgwybr\",\"pollingIntervalInSeconds\":60,\"lastSyncedTime\":\"2021-05-22T17:45:37Z\",\"configurationState\":\"Succeeded\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Enabled\",\"configurationType\":\"File\",\"tapRulesUrl\":\"igsioctqkm\",\"matchConfigurations\":[{\"matchConfigurationName\":\"xvzfffhtjnwos\",\"sequenceNumber\":4567273419330613691,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{\"encapsulationType\":\"None\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"riomxeezwyhj\"],\"portGroupNames\":[\"iqegm\",\"db\",\"ohcwhpyv\"]},\"protocolTypes\":[\"detsz\",\"canzb\",\"ekwuyckyvn\",\"nsm\"],\"vlanMatchCondition\":{\"vlans\":[\"wjbct\",\"bpzujqjtotdxp\"],\"innerVlans\":[\"slhwuusieckty\",\"h\",\"uxidhhxomilddxj\"],\"vlanGroupNames\":[\"gxwjwil\",\"qrslaate\",\"twujjzgx\",\"gqwlxrhg\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"kbkkteoze\",\"ogmkorvvmvmco\",\"nqhlbs\",\"osnqliwkmzojfe\"],\"ipGroupNames\":[\"lhtgmkn\",\"zgbjbhrpgi\",\"sttcucrcmm\"]}},{\"encapsulationType\":\"None\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"f\"],\"portGroupNames\":[\"sld\",\"tohqclna\",\"h\",\"gsiqikvllr\"]},\"protocolTypes\":[\"mgl\"],\"vlanMatchCondition\":{\"vlans\":[\"km\",\"rawrqkzawbunmp\",\"klwzlw\"],\"innerVlans\":[\"rne\",\"zltkaszfj\",\"xscbduxapgrcqe\",\"mvrdjomlnwsbv\"],\"vlanGroupNames\":[\"sflxkqesd\",\"ed\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"inm\",\"hymcq\",\"dklt\",\"dhqnufbxweiib\"],\"ipGroupNames\":[\"jovf\",\"ybydhui\",\"aouwudh\"]}},{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"wvumosqircamqprl\",\"brugejcvjkjycz\",\"mtagelajdyol\"],\"portGroupNames\":[\"yxqfmzsizzhravr\"]},\"protocolTypes\":[\"jymgqbgcxhn\",\"xgzxlermkmer\",\"hskirhnp\"],\"vlanMatchCondition\":{\"vlans\":[\"bkfukdljq\",\"vtsdydshkpafy\"],\"innerVlans\":[\"owwzizznyufpqzst\",\"fgufyjfdkqiy\"],\"vlanGroupNames\":[\"jokgwesymzqh\",\"qpfzlpejtznxlue\",\"ujqbbgsimwejl\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"bdwbcp\",\"aswkuhydtnaczkf\",\"fatgawphnski\",\"dwgtqcumecsaa\"],\"ipGroupNames\":[\"qbdiuycsbskowkr\"]}},{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"mqowiuasfgqg\",\"cyhfaimqvdru\",\"zkgyfpeoe\",\"gfmq\"],\"portGroupNames\":[\"kixvlzjxplh\"]},\"protocolTypes\":[\"asyntv\",\"jy\"],\"vlanMatchCondition\":{\"vlans\":[\"qrvvbq\",\"knmp\"],\"innerVlans\":[\"xgiqasifubn\"],\"vlanGroupNames\":[\"tlpwqpjnxjkhtups\",\"yo\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"wkztsmsfbevyl\",\"znfhkqytk\"],\"ipGroupNames\":[\"do\",\"gfzdgjfcycrsvl\",\"yyhigqkzjuqw\"]}}],\"actions\":[{\"type\":\"Mirror\",\"truncate\":\"x\",\"isTimestampEnabled\":\"True\",\"destinationId\":\"yoipnfdb\",\"matchConfigurationName\":\"oscienezfvbe\"},{\"type\":\"Mirror\",\"truncate\":\"kbpjnrte\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"thr\",\"matchConfigurationName\":\"mdudsy\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"ktjhffe\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"youergaghp\",\"zxkpyehhfdyld\"]},{\"name\":\"yedzfzq\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"tdereunokakzw\",\"pjlwyxe\"]},{\"name\":\"nmxrfomckewvmyi\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"jjtpdyzoutxfptof\",\"gnuywezygva\",\"gaaqw\"]},{\"name\":\"gjpytpmpvdnogehl\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"tbnukkfaxz\",\"vbxxyjisskobqoc\"]}],\"vlanGroups\":[{\"name\":\"oewyhxessmvrkd\",\"vlans\":[\"eqfbd\"]}],\"portGroups\":[{\"name\":\"esbrujbjpppktl\",\"ports\":[\"bfm\"]},{\"name\":\"ieat\",\"ports\":[\"rnminzqplgtkih\"]},{\"name\":\"ikzsrzfffji\",\"ports\":[\"bpntogkensckhb\",\"carmoyfx\",\"kwykuqdndxl\"]}]}],\"annotation\":\"h\"}")
            .toObject(NetworkTapRuleProperties.class);
        Assertions.assertEquals("h", model.annotation());
        Assertions.assertEquals(PollingIntervalInSeconds.SIX_ZERO, model.pollingIntervalInSeconds());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("igsioctqkm", model.tapRulesUrl());
        Assertions.assertEquals("xvzfffhtjnwos", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(4567273419330613691L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("detsz",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("wjbct",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("slhwuusieckty",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("gxwjwil",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("kbkkteoze",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("lhtgmkn",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.NONE,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("riomxeezwyhj",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("iqegm",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals(TapRuleActionType.MIRROR, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("x", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.TRUE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("yoipnfdb", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("oscienezfvbe",
            model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("ktjhffe", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("youergaghp",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("oewyhxessmvrkd", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("eqfbd", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("esbrujbjpppktl", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("bfm", model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapRuleProperties model = new NetworkTapRuleProperties().withAnnotation("h")
            .withPollingIntervalInSeconds(PollingIntervalInSeconds.SIX_ZERO)
            .withConfigurationType(ConfigurationType.FILE)
            .withTapRulesUrl("igsioctqkm")
            .withMatchConfigurations(Arrays.asList(new NetworkTapRuleMatchConfiguration()
                .withMatchConfigurationName("xvzfffhtjnwos")
                .withSequenceNumber(4567273419330613691L)
                .withIpAddressType(IpAddressType.IPV6)
                .withMatchConditions(Arrays.asList(new NetworkTapRuleMatchCondition()
                    .withProtocolTypes(Arrays.asList("detsz", "canzb", "ekwuyckyvn", "nsm"))
                    .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("wjbct", "bpzujqjtotdxp"))
                        .withInnerVlans(Arrays.asList("slhwuusieckty", "h", "uxidhhxomilddxj"))
                        .withVlanGroupNames(Arrays.asList("gxwjwil", "qrslaate", "twujjzgx", "gqwlxrhg")))
                    .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                        .withPrefixType(PrefixType.PREFIX)
                        .withIpPrefixValues(Arrays.asList("kbkkteoze", "ogmkorvvmvmco", "nqhlbs", "osnqliwkmzojfe"))
                        .withIpGroupNames(Arrays.asList("lhtgmkn", "zgbjbhrpgi", "sttcucrcmm")))
                    .withEncapsulationType(EncapsulationType.NONE)
                    .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                        .withLayer4Protocol(Layer4Protocol.UDP)
                        .withPorts(Arrays.asList("riomxeezwyhj"))
                        .withPortGroupNames(Arrays.asList("iqegm", "db", "ohcwhpyv"))),
                    new NetworkTapRuleMatchCondition().withProtocolTypes(Arrays.asList("mgl"))
                        .withVlanMatchCondition(
                            new VlanMatchCondition().withVlans(Arrays.asList("km", "rawrqkzawbunmp", "klwzlw"))
                                .withInnerVlans(Arrays.asList("rne", "zltkaszfj", "xscbduxapgrcqe", "mvrdjomlnwsbv"))
                                .withVlanGroupNames(Arrays.asList("sflxkqesd", "ed")))
                        .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                            .withPrefixType(PrefixType.LONGEST_PREFIX)
                            .withIpPrefixValues(Arrays.asList("inm", "hymcq", "dklt", "dhqnufbxweiib"))
                            .withIpGroupNames(Arrays.asList("jovf", "ybydhui", "aouwudh")))
                        .withEncapsulationType(EncapsulationType.NONE)
                        .withPortCondition(new PortCondition().withPortType(PortType.DESTINATION_PORT)
                            .withLayer4Protocol(Layer4Protocol.TCP)
                            .withPorts(Arrays.asList("f"))
                            .withPortGroupNames(Arrays.asList("sld", "tohqclna", "h", "gsiqikvllr"))),
                    new NetworkTapRuleMatchCondition()
                        .withProtocolTypes(Arrays.asList("jymgqbgcxhn", "xgzxlermkmer", "hskirhnp"))
                        .withVlanMatchCondition(
                            new VlanMatchCondition().withVlans(Arrays.asList("bkfukdljq", "vtsdydshkpafy"))
                                .withInnerVlans(Arrays.asList("owwzizznyufpqzst", "fgufyjfdkqiy"))
                                .withVlanGroupNames(Arrays.asList("jokgwesymzqh", "qpfzlpejtznxlue", "ujqbbgsimwejl")))
                        .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                            .withPrefixType(PrefixType.LONGEST_PREFIX)
                            .withIpPrefixValues(
                                Arrays.asList("bdwbcp", "aswkuhydtnaczkf", "fatgawphnski", "dwgtqcumecsaa"))
                            .withIpGroupNames(Arrays.asList("qbdiuycsbskowkr")))
                        .withEncapsulationType(EncapsulationType.GTPV1)
                        .withPortCondition(new PortCondition().withPortType(PortType.DESTINATION_PORT)
                            .withLayer4Protocol(Layer4Protocol.UDP)
                            .withPorts(Arrays.asList("wvumosqircamqprl", "brugejcvjkjycz", "mtagelajdyol"))
                            .withPortGroupNames(Arrays.asList("yxqfmzsizzhravr"))),
                    new NetworkTapRuleMatchCondition().withProtocolTypes(Arrays.asList("asyntv", "jy"))
                        .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("qrvvbq", "knmp"))
                            .withInnerVlans(Arrays.asList("xgiqasifubn"))
                            .withVlanGroupNames(Arrays.asList("tlpwqpjnxjkhtups", "yo")))
                        .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                            .withPrefixType(PrefixType.LONGEST_PREFIX)
                            .withIpPrefixValues(Arrays.asList("wkztsmsfbevyl", "znfhkqytk"))
                            .withIpGroupNames(Arrays.asList("do", "gfzdgjfcycrsvl", "yyhigqkzjuqw")))
                        .withEncapsulationType(EncapsulationType.GTPV1)
                        .withPortCondition(new PortCondition().withPortType(PortType.DESTINATION_PORT)
                            .withLayer4Protocol(Layer4Protocol.TCP)
                            .withPorts(Arrays.asList("mqowiuasfgqg", "cyhfaimqvdru", "zkgyfpeoe", "gfmq"))
                            .withPortGroupNames(Arrays.asList("kixvlzjxplh")))))
                .withActions(Arrays.asList(
                    new NetworkTapRuleAction().withType(TapRuleActionType.MIRROR)
                        .withTruncate("x")
                        .withIsTimestampEnabled(BooleanEnumProperty.TRUE)
                        .withDestinationId("yoipnfdb")
                        .withMatchConfigurationName("oscienezfvbe"),
                    new NetworkTapRuleAction().withType(TapRuleActionType.MIRROR)
                        .withTruncate("kbpjnrte")
                        .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                        .withDestinationId("thr")
                        .withMatchConfigurationName("mdudsy")))))
            .withDynamicMatchConfigurations(Arrays.asList(new CommonDynamicMatchConfiguration()
                .withIpGroups(Arrays.asList(
                    new IpGroupProperties().withName("ktjhffe")
                        .withIpAddressType(IpAddressType.IPV4)
                        .withIpPrefixes(Arrays.asList("youergaghp", "zxkpyehhfdyld")),
                    new IpGroupProperties().withName("yedzfzq")
                        .withIpAddressType(IpAddressType.IPV6)
                        .withIpPrefixes(Arrays.asList("tdereunokakzw", "pjlwyxe")),
                    new IpGroupProperties().withName("nmxrfomckewvmyi")
                        .withIpAddressType(IpAddressType.IPV4)
                        .withIpPrefixes(Arrays.asList("jjtpdyzoutxfptof", "gnuywezygva", "gaaqw")),
                    new IpGroupProperties().withName("gjpytpmpvdnogehl")
                        .withIpAddressType(IpAddressType.IPV4)
                        .withIpPrefixes(Arrays.asList("tbnukkfaxz", "vbxxyjisskobqoc"))))
                .withVlanGroups(Arrays
                    .asList(new VlanGroupProperties().withName("oewyhxessmvrkd").withVlans(Arrays.asList("eqfbd"))))
                .withPortGroups(
                    Arrays.asList(new PortGroupProperties().withName("esbrujbjpppktl").withPorts(Arrays.asList("bfm")),
                        new PortGroupProperties().withName("ieat").withPorts(Arrays.asList("rnminzqplgtkih")),
                        new PortGroupProperties().withName("ikzsrzfffji")
                            .withPorts(Arrays.asList("bpntogkensckhb", "carmoyfx", "kwykuqdndxl"))))));
        model = BinaryData.fromObject(model).toObject(NetworkTapRuleProperties.class);
        Assertions.assertEquals("h", model.annotation());
        Assertions.assertEquals(PollingIntervalInSeconds.SIX_ZERO, model.pollingIntervalInSeconds());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("igsioctqkm", model.tapRulesUrl());
        Assertions.assertEquals("xvzfffhtjnwos", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(4567273419330613691L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("detsz",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("wjbct",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("slhwuusieckty",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("gxwjwil",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("kbkkteoze",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("lhtgmkn",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.NONE,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("riomxeezwyhj",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("iqegm",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals(TapRuleActionType.MIRROR, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("x", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.TRUE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("yoipnfdb", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("oscienezfvbe",
            model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("ktjhffe", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("youergaghp",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("oewyhxessmvrkd", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("eqfbd", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("esbrujbjpppktl", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("bfm", model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }
}
