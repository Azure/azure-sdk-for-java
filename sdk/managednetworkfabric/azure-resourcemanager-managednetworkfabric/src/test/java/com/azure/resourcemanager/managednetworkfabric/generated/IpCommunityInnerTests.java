// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpCommunityInner;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityRule;
import com.azure.resourcemanager.managednetworkfabric.models.WellKnownCommunities;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IpCommunityInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpCommunityInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"configurationState\":\"Failed\",\"provisioningState\":\"Updating\",\"administrativeState\":\"MAT\",\"ipCommunityRules\":[{\"action\":\"Permit\",\"sequenceNumber\":1037126378625413919,\"wellKnownCommunities\":[\"GShut\",\"NoAdvertise\",\"LocalAS\"],\"communityMembers\":[\"ijo\"]},{\"action\":\"Deny\",\"sequenceNumber\":4159181794530217054,\"wellKnownCommunities\":[\"LocalAS\",\"NoExport\"],\"communityMembers\":[\"yzyzjd\",\"r\",\"jb\",\"xjeaoqaqbzgyh\"]},{\"action\":\"Permit\",\"sequenceNumber\":3671581328871244489,\"wellKnownCommunities\":[\"NoExport\",\"GShut\"],\"communityMembers\":[\"bqamteuliyslpk\",\"vmwfauxxep\",\"ywbo\"]},{\"action\":\"Deny\",\"sequenceNumber\":667749683088481045,\"wellKnownCommunities\":[\"LocalAS\",\"NoExport\",\"LocalAS\",\"NoExport\"],\"communityMembers\":[\"pkzfbojxj\",\"cs\",\"yqwixvcpwnkwywzw\",\"falickduoiqtamty\"]}],\"annotation\":\"kn\"},\"location\":\"wzawnvsbcfhzagxn\",\"tags\":{\"mwrzregzgyufutrw\":\"cvd\",\"hmeott\":\"weryekzk\"},\"id\":\"w\",\"name\":\"yos\",\"type\":\"wwhnhjtfvpn\"}")
                .toObject(IpCommunityInner.class);
        Assertions.assertEquals("wzawnvsbcfhzagxn", model.location());
        Assertions.assertEquals("cvd", model.tags().get("mwrzregzgyufutrw"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipCommunityRules().get(0).action());
        Assertions.assertEquals(1037126378625413919L, model.ipCommunityRules().get(0).sequenceNumber());
        Assertions
            .assertEquals(WellKnownCommunities.GSHUT, model.ipCommunityRules().get(0).wellKnownCommunities().get(0));
        Assertions.assertEquals("ijo", model.ipCommunityRules().get(0).communityMembers().get(0));
        Assertions.assertEquals("kn", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpCommunityInner model =
            new IpCommunityInner()
                .withLocation("wzawnvsbcfhzagxn")
                .withTags(mapOf("mwrzregzgyufutrw", "cvd", "hmeott", "weryekzk"))
                .withIpCommunityRules(
                    Arrays
                        .asList(
                            new IpCommunityRule()
                                .withAction(CommunityActionTypes.PERMIT)
                                .withSequenceNumber(1037126378625413919L)
                                .withWellKnownCommunities(
                                    Arrays
                                        .asList(
                                            WellKnownCommunities.GSHUT,
                                            WellKnownCommunities.NO_ADVERTISE,
                                            WellKnownCommunities.LOCAL_AS))
                                .withCommunityMembers(Arrays.asList("ijo")),
                            new IpCommunityRule()
                                .withAction(CommunityActionTypes.DENY)
                                .withSequenceNumber(4159181794530217054L)
                                .withWellKnownCommunities(
                                    Arrays.asList(WellKnownCommunities.LOCAL_AS, WellKnownCommunities.NO_EXPORT))
                                .withCommunityMembers(Arrays.asList("yzyzjd", "r", "jb", "xjeaoqaqbzgyh")),
                            new IpCommunityRule()
                                .withAction(CommunityActionTypes.PERMIT)
                                .withSequenceNumber(3671581328871244489L)
                                .withWellKnownCommunities(
                                    Arrays.asList(WellKnownCommunities.NO_EXPORT, WellKnownCommunities.GSHUT))
                                .withCommunityMembers(Arrays.asList("bqamteuliyslpk", "vmwfauxxep", "ywbo")),
                            new IpCommunityRule()
                                .withAction(CommunityActionTypes.DENY)
                                .withSequenceNumber(667749683088481045L)
                                .withWellKnownCommunities(
                                    Arrays
                                        .asList(
                                            WellKnownCommunities.LOCAL_AS,
                                            WellKnownCommunities.NO_EXPORT,
                                            WellKnownCommunities.LOCAL_AS,
                                            WellKnownCommunities.NO_EXPORT))
                                .withCommunityMembers(
                                    Arrays.asList("pkzfbojxj", "cs", "yqwixvcpwnkwywzw", "falickduoiqtamty"))))
                .withAnnotation("kn");
        model = BinaryData.fromObject(model).toObject(IpCommunityInner.class);
        Assertions.assertEquals("wzawnvsbcfhzagxn", model.location());
        Assertions.assertEquals("cvd", model.tags().get("mwrzregzgyufutrw"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipCommunityRules().get(0).action());
        Assertions.assertEquals(1037126378625413919L, model.ipCommunityRules().get(0).sequenceNumber());
        Assertions
            .assertEquals(WellKnownCommunities.GSHUT, model.ipCommunityRules().get(0).wellKnownCommunities().get(0));
        Assertions.assertEquals("ijo", model.ipCommunityRules().get(0).communityMembers().get(0));
        Assertions.assertEquals("kn", model.annotation());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
