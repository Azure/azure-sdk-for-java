// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.RoutePolicyProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ActionIpCommunityProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ActionIpExtendedCommunityProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityIdList;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunityIdList;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyStatementProperties;
import com.azure.resourcemanager.managednetworkfabric.models.StatementActionProperties;
import com.azure.resourcemanager.managednetworkfabric.models.StatementConditionProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RoutePolicyPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoutePolicyProperties model = BinaryData.fromString(
            "{\"networkFabricId\":\"zipplxg\",\"addressFamilyType\":\"IPv4\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Enabled\",\"defaultAction\":\"Deny\",\"statements\":[{\"sequenceNumber\":244241643935550643,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"z\",\"ipExtendedCommunityIds\":[\"kwxfugfzizyxd\",\"yjnqzbrqcakmfckv\",\"yjucamnsb\"],\"ipCommunityIds\":[\"twhmucjiuhcxyveh\",\"klely\",\"dvpqfbxgy\"]},\"action\":{\"localPreference\":535781383491737294,\"actionType\":\"Continue\",\"ipCommunityProperties\":{\"delete\":{\"ipCommunityIds\":[\"qlefnohey\"]},\"set\":{\"ipCommunityIds\":[\"pkyll\",\"ey\",\"nj\",\"w\"]},\"add\":{\"ipCommunityIds\":[\"w\",\"wrsvevcn\",\"qswxhqhgkhtbzvul\"]}},\"ipExtendedCommunityProperties\":{\"delete\":{\"ipExtendedCommunityIds\":[\"ncpmyh\",\"xgdmvghcmixmlwkf\"]},\"set\":{\"ipExtendedCommunityIds\":[\"yjrtalqeebu\",\"fyim\",\"oaezktomsgoihlq\"]},\"add\":{\"ipExtendedCommunityIds\":[\"aazbaeeekfzt\",\"n\",\"bfb\"]}}},\"annotation\":\"ow\"},{\"sequenceNumber\":1344289763375947200,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"xhmewyaol\",\"ipExtendedCommunityIds\":[\"x\",\"rdpuyytbpkrp\",\"hqetp\",\"enefnoafpcnrx\"],\"ipCommunityIds\":[\"xowvhufcmuaj\",\"blx\",\"htozfrfaw\",\"nnsvrfajynihti\"]},\"action\":{\"localPreference\":7910534423394817555,\"actionType\":\"Continue\",\"ipCommunityProperties\":{\"delete\":{\"ipCommunityIds\":[\"uctblfehbgcgyoh\",\"cmeqljxdum\"]},\"set\":{\"ipCommunityIds\":[\"onebldxa\",\"mdfjwcngkwxjsj\",\"uvohufzdtsrp\"]},\"add\":{\"ipCommunityIds\":[\"zacrzhnsbylgmgbh\",\"qczouanbfulvcxgl\",\"oqwb\"]}},\"ipExtendedCommunityProperties\":{\"delete\":{\"ipExtendedCommunityIds\":[\"bzbwbgwzhbhfljey\",\"dpiov\",\"lhrwyakzuafapwx\"]},\"set\":{\"ipExtendedCommunityIds\":[\"atjiobnirgoextqd\",\"wtgntimznupb\",\"tbsetko\"]},\"add\":{\"ipExtendedCommunityIds\":[\"hedaakghcrzmm\"]}}},\"annotation\":\"yvdhdgdiwmlg\"},{\"sequenceNumber\":8604498652692523406,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"qjisjmolzcaqf\",\"ipExtendedCommunityIds\":[\"hgkrv\"],\"ipCommunityIds\":[\"cvytv\",\"ejqaw\"]},\"action\":{\"localPreference\":5965499479787157061,\"actionType\":\"Permit\",\"ipCommunityProperties\":{\"delete\":{\"ipCommunityIds\":[\"czbdypbbimh\",\"bozvo\"]},\"set\":{\"ipCommunityIds\":[\"lnh\"]},\"add\":{\"ipCommunityIds\":[\"uzlybqs\",\"ibvylkv\"]}},\"ipExtendedCommunityProperties\":{\"delete\":{\"ipExtendedCommunityIds\":[\"nwqhawvcnvi\",\"lbylmgjzrycwpbgu\",\"whm\"]},\"set\":{\"ipExtendedCommunityIds\":[\"knsastlpsmgomi\",\"ttrvlvvjmxokxxa\",\"qecjrzvlcivqx\",\"emklphx\"]},\"add\":{\"ipExtendedCommunityIds\":[\"ojk\",\"gnfbrzj\",\"fsunh\"]}}},\"annotation\":\"vlahxczywy\"}],\"annotation\":\"ahwcorewcnn\"}")
            .toObject(RoutePolicyProperties.class);
        Assertions.assertEquals("ahwcorewcnn", model.annotation());
        Assertions.assertEquals("zipplxg", model.networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV4, model.addressFamilyType());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("ow", model.statements().get(0).annotation());
        Assertions.assertEquals(244241643935550643L, model.statements().get(0).sequenceNumber());
        Assertions.assertEquals("twhmucjiuhcxyveh", model.statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND, model.statements().get(0).condition().type());
        Assertions.assertEquals("z", model.statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("kwxfugfzizyxd", model.statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(535781383491737294L, model.statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.CONTINUE, model.statements().get(0).action().actionType());
        Assertions.assertEquals("w",
            model.statements().get(0).action().ipCommunityProperties().add().ipCommunityIds().get(0));
        Assertions.assertEquals("qlefnohey",
            model.statements().get(0).action().ipCommunityProperties().delete().ipCommunityIds().get(0));
        Assertions.assertEquals("pkyll",
            model.statements().get(0).action().ipCommunityProperties().set().ipCommunityIds().get(0));
        Assertions.assertEquals("aazbaeeekfzt",
            model.statements().get(0).action().ipExtendedCommunityProperties().add().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals("ncpmyh",
            model.statements()
                .get(0)
                .action()
                .ipExtendedCommunityProperties()
                .delete()
                .ipExtendedCommunityIds()
                .get(0));
        Assertions.assertEquals("yjrtalqeebu",
            model.statements().get(0).action().ipExtendedCommunityProperties().set().ipExtendedCommunityIds().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoutePolicyProperties model = new RoutePolicyProperties().withAnnotation("ahwcorewcnn")
            .withNetworkFabricId("zipplxg")
            .withAddressFamilyType(AddressFamilyType.IPV4)
            .withDefaultAction(CommunityActionTypes.DENY)
            .withStatements(Arrays.asList(
                new RoutePolicyStatementProperties().withAnnotation("ow")
                    .withSequenceNumber(244241643935550643L)
                    .withCondition(new StatementConditionProperties()
                        .withIpCommunityIds(Arrays.asList("twhmucjiuhcxyveh", "klely", "dvpqfbxgy"))
                        .withType(RoutePolicyConditionType.AND)
                        .withIpPrefixId("z")
                        .withIpExtendedCommunityIds(Arrays.asList("kwxfugfzizyxd", "yjnqzbrqcakmfckv", "yjucamnsb")))
                    .withAction(
                        new StatementActionProperties().withLocalPreference(535781383491737294L)
                            .withActionType(RoutePolicyActionType.CONTINUE)
                            .withIpCommunityProperties(new ActionIpCommunityProperties()
                                .withAdd(new IpCommunityIdList()
                                    .withIpCommunityIds(Arrays.asList("w", "wrsvevcn", "qswxhqhgkhtbzvul")))
                                .withDelete(new IpCommunityIdList().withIpCommunityIds(Arrays.asList("qlefnohey")))
                                .withSet(new IpCommunityIdList()
                                    .withIpCommunityIds(Arrays.asList("pkyll", "ey", "nj", "w"))))
                            .withIpExtendedCommunityProperties(new ActionIpExtendedCommunityProperties()
                                .withAdd(new IpExtendedCommunityIdList()
                                    .withIpExtendedCommunityIds(Arrays.asList("aazbaeeekfzt", "n", "bfb")))
                                .withDelete(new IpExtendedCommunityIdList()
                                    .withIpExtendedCommunityIds(Arrays.asList("ncpmyh", "xgdmvghcmixmlwkf")))
                                .withSet(new IpExtendedCommunityIdList().withIpExtendedCommunityIds(
                                    Arrays.asList("yjrtalqeebu", "fyim", "oaezktomsgoihlq"))))),
                new RoutePolicyStatementProperties().withAnnotation("yvdhdgdiwmlg")
                    .withSequenceNumber(1344289763375947200L)
                    .withCondition(new StatementConditionProperties()
                        .withIpCommunityIds(Arrays.asList("xowvhufcmuaj", "blx", "htozfrfaw", "nnsvrfajynihti"))
                        .withType(RoutePolicyConditionType.AND)
                        .withIpPrefixId("xhmewyaol")
                        .withIpExtendedCommunityIds(Arrays.asList("x", "rdpuyytbpkrp", "hqetp", "enefnoafpcnrx")))
                    .withAction(new StatementActionProperties().withLocalPreference(7910534423394817555L)
                        .withActionType(RoutePolicyActionType.CONTINUE)
                        .withIpCommunityProperties(new ActionIpCommunityProperties()
                            .withAdd(new IpCommunityIdList()
                                .withIpCommunityIds(Arrays.asList("zacrzhnsbylgmgbh", "qczouanbfulvcxgl", "oqwb")))
                            .withDelete(new IpCommunityIdList()
                                .withIpCommunityIds(Arrays.asList("uctblfehbgcgyoh", "cmeqljxdum")))
                            .withSet(new IpCommunityIdList()
                                .withIpCommunityIds(Arrays.asList("onebldxa", "mdfjwcngkwxjsj", "uvohufzdtsrp"))))
                        .withIpExtendedCommunityProperties(new ActionIpExtendedCommunityProperties()
                            .withAdd(new IpExtendedCommunityIdList()
                                .withIpExtendedCommunityIds(Arrays.asList("hedaakghcrzmm")))
                            .withDelete(new IpExtendedCommunityIdList().withIpExtendedCommunityIds(
                                Arrays.asList("bzbwbgwzhbhfljey", "dpiov", "lhrwyakzuafapwx")))
                            .withSet(new IpExtendedCommunityIdList().withIpExtendedCommunityIds(
                                Arrays.asList("atjiobnirgoextqd", "wtgntimznupb", "tbsetko"))))),
                new RoutePolicyStatementProperties().withAnnotation("vlahxczywy")
                    .withSequenceNumber(8604498652692523406L)
                    .withCondition(
                        new StatementConditionProperties().withIpCommunityIds(Arrays.asList("cvytv", "ejqaw"))
                            .withType(RoutePolicyConditionType.OR)
                            .withIpPrefixId("qjisjmolzcaqf")
                            .withIpExtendedCommunityIds(Arrays.asList("hgkrv")))
                    .withAction(new StatementActionProperties().withLocalPreference(5965499479787157061L)
                        .withActionType(RoutePolicyActionType.PERMIT)
                        .withIpCommunityProperties(new ActionIpCommunityProperties()
                            .withAdd(new IpCommunityIdList().withIpCommunityIds(Arrays.asList("uzlybqs", "ibvylkv")))
                            .withDelete(
                                new IpCommunityIdList().withIpCommunityIds(Arrays.asList("czbdypbbimh", "bozvo")))
                            .withSet(new IpCommunityIdList().withIpCommunityIds(Arrays.asList("lnh"))))
                        .withIpExtendedCommunityProperties(new ActionIpExtendedCommunityProperties()
                            .withAdd(new IpExtendedCommunityIdList()
                                .withIpExtendedCommunityIds(Arrays.asList("ojk", "gnfbrzj", "fsunh")))
                            .withDelete(new IpExtendedCommunityIdList()
                                .withIpExtendedCommunityIds(Arrays.asList("nwqhawvcnvi", "lbylmgjzrycwpbgu", "whm")))
                            .withSet(new IpExtendedCommunityIdList().withIpExtendedCommunityIds(
                                Arrays.asList("knsastlpsmgomi", "ttrvlvvjmxokxxa", "qecjrzvlcivqx", "emklphx")))))));
        model = BinaryData.fromObject(model).toObject(RoutePolicyProperties.class);
        Assertions.assertEquals("ahwcorewcnn", model.annotation());
        Assertions.assertEquals("zipplxg", model.networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV4, model.addressFamilyType());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("ow", model.statements().get(0).annotation());
        Assertions.assertEquals(244241643935550643L, model.statements().get(0).sequenceNumber());
        Assertions.assertEquals("twhmucjiuhcxyveh", model.statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND, model.statements().get(0).condition().type());
        Assertions.assertEquals("z", model.statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("kwxfugfzizyxd", model.statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(535781383491737294L, model.statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.CONTINUE, model.statements().get(0).action().actionType());
        Assertions.assertEquals("w",
            model.statements().get(0).action().ipCommunityProperties().add().ipCommunityIds().get(0));
        Assertions.assertEquals("qlefnohey",
            model.statements().get(0).action().ipCommunityProperties().delete().ipCommunityIds().get(0));
        Assertions.assertEquals("pkyll",
            model.statements().get(0).action().ipCommunityProperties().set().ipCommunityIds().get(0));
        Assertions.assertEquals("aazbaeeekfzt",
            model.statements().get(0).action().ipExtendedCommunityProperties().add().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals("ncpmyh",
            model.statements()
                .get(0)
                .action()
                .ipExtendedCommunityProperties()
                .delete()
                .ipExtendedCommunityIds()
                .get(0));
        Assertions.assertEquals("yjrtalqeebu",
            model.statements().get(0).action().ipExtendedCommunityProperties().set().ipExtendedCommunityIds().get(0));
    }
}
