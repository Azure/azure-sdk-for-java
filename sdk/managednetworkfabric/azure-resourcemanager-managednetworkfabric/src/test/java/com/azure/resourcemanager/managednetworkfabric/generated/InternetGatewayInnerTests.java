// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternetGatewayInner;
import com.azure.resourcemanager.managednetworkfabric.models.GatewayType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InternetGatewayInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternetGatewayInner model = BinaryData.fromString(
            "{\"properties\":{\"ipv4Address\":\"qcy\",\"port\":905465654,\"type\":\"Infrastructure\",\"networkFabricControllerId\":\"qofyuicdhzbdy\",\"provisioningState\":\"Accepted\",\"internetGatewayRuleId\":\"bdvibidmhmwffpl\",\"annotation\":\"u\"},\"location\":\"pckc\",\"tags\":{\"oxoyyukp\":\"vwe\"},\"id\":\"aimmoiroqb\",\"name\":\"shbraga\",\"type\":\"yyrmfsvbp\"}")
            .toObject(InternetGatewayInner.class);
        Assertions.assertEquals("pckc", model.location());
        Assertions.assertEquals("vwe", model.tags().get("oxoyyukp"));
        Assertions.assertEquals(GatewayType.INFRASTRUCTURE, model.typePropertiesType());
        Assertions.assertEquals("qofyuicdhzbdy", model.networkFabricControllerId());
        Assertions.assertEquals("bdvibidmhmwffpl", model.internetGatewayRuleId());
        Assertions.assertEquals("u", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternetGatewayInner model = new InternetGatewayInner().withLocation("pckc")
            .withTags(mapOf("oxoyyukp", "vwe"))
            .withTypePropertiesType(GatewayType.INFRASTRUCTURE)
            .withNetworkFabricControllerId("qofyuicdhzbdy")
            .withInternetGatewayRuleId("bdvibidmhmwffpl")
            .withAnnotation("u");
        model = BinaryData.fromObject(model).toObject(InternetGatewayInner.class);
        Assertions.assertEquals("pckc", model.location());
        Assertions.assertEquals("vwe", model.tags().get("oxoyyukp"));
        Assertions.assertEquals(GatewayType.INFRASTRUCTURE, model.typePropertiesType());
        Assertions.assertEquals("qofyuicdhzbdy", model.networkFabricControllerId());
        Assertions.assertEquals("bdvibidmhmwffpl", model.internetGatewayRuleId());
        Assertions.assertEquals("u", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
