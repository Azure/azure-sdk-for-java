// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.IsManagementType;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnect;
import com.azure.resourcemanager.managednetworkfabric.models.NniType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkToNetworkInterconnectsListByNetworkFabricMockTests {
    @Test
    public void testListByNetworkFabric() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"nniType\":\"NPB\",\"isManagementType\":\"True\",\"useOptionB\":\"False\",\"layer2Configuration\":{\"mtu\":856171902,\"interfaces\":[\"xxregykjmpadbz\"]},\"optionBLayer3Configuration\":{\"peerASN\":8569700774121890571,\"vlanId\":1427677061,\"fabricASN\":187712996489181130,\"primaryIpv4Prefix\":\"tyd\",\"primaryIpv6Prefix\":\"grpqua\",\"secondaryIpv4Prefix\":\"gjqqbactffxdb\",\"secondaryIpv6Prefix\":\"ihumw\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":1611726934,\"multiplier\":1092461654},\"ipv4Routes\":[{\"prefix\":\"izqqihvb\",\"nextHop\":[\"fq\",\"qdd\",\"ynpgomzmkj\",\"ajlfpsvrljlhe\"]},{\"prefix\":\"cccpxbnwitaf\",\"nextHop\":[\"evpt\",\"itghz\",\"wvkpar\"]},{\"prefix\":\"kplqftqcxqmbs\",\"nextHop\":[\"cykgulellfwrmsux\"]},{\"prefix\":\"qbmqo\",\"nextHop\":[\"xlpkdsnbq\",\"ymsdlraduhgwaxz\",\"rppoy\"]}],\"ipv6Routes\":[{\"prefix\":\"ribeskkopbk\",\"nextHop\":[\"ibmbtmorikcze\",\"qtiqxgwsfrlyvzl\",\"jydg\"]},{\"prefix\":\"doqgrucw\",\"nextHop\":[\"yjudhgwjqegly\",\"nrruwsqp\",\"yxkm\",\"mgexqcilfiulgnn\"]},{\"prefix\":\"xwdpmc\",\"nextHop\":[\"qvvzxgbamqrb\",\"snptmmvdpavcj\",\"byjuwhizcbqj\",\"mhwdtunpc\"]},{\"prefix\":\"kd\",\"nextHop\":[\"fouwkoltjdauuj\",\"ltyhddzeykud\",\"zrimyehplmq\",\"oduk\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"znqqkqxkdglse\",\"importIpv6RoutePolicyId\":\"krbyy\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"jg\",\"exportIpv6RoutePolicyId\":\"wgokrllbecannvxo\"},\"egressAclId\":\"dcftptfc\",\"ingressAclId\":\"pmfw\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Disabled\"},\"id\":\"ihifo\",\"name\":\"ocmgadhmqyufp\",\"type\":\"owweylszrtngiqc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NetworkToNetworkInterconnect> response = manager.networkToNetworkInterconnects()
            .listByNetworkFabric("totktd", "ewwlkry", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(NniType.NPB, response.iterator().next().nniType());
        Assertions.assertEquals(IsManagementType.TRUE, response.iterator().next().isManagementType());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, response.iterator().next().useOptionB());
        Assertions.assertEquals(856171902, response.iterator().next().layer2Configuration().mtu());
        Assertions.assertEquals("xxregykjmpadbz", response.iterator().next().layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("tyd", response.iterator().next().optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("grpqua", response.iterator().next().optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("gjqqbactffxdb",
            response.iterator().next().optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("ihumw", response.iterator().next().optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(8569700774121890571L,
            response.iterator().next().optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(1427677061, response.iterator().next().optionBLayer3Configuration().vlanId());
        Assertions.assertEquals(1611726934,
            response.iterator().next().npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1092461654,
            response.iterator().next().npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("izqqihvb",
            response.iterator().next().npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("fq",
            response.iterator().next().npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("ribeskkopbk",
            response.iterator().next().npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("ibmbtmorikcze",
            response.iterator().next().npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("znqqkqxkdglse",
            response.iterator().next().importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("krbyy", response.iterator().next().importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("jg", response.iterator().next().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("wgokrllbecannvxo",
            response.iterator().next().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("dcftptfc", response.iterator().next().egressAclId());
        Assertions.assertEquals("pmfw", response.iterator().next().ingressAclId());
    }
}
