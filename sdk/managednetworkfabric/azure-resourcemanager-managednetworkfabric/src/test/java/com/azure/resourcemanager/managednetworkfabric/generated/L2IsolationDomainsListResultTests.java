// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L2IsolationDomainInner;
import com.azure.resourcemanager.managednetworkfabric.models.L2IsolationDomainsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L2IsolationDomainsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L2IsolationDomainsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"networkFabricId\":\"lmdgglmepjp\",\"vlanId\":188221031,\"mtu\":978481957,\"configurationState\":\"Provisioned\",\"provisioningState\":\"Updating\",\"administrativeState\":\"MAT\",\"annotation\":\"szngafpgyl\"},\"location\":\"ecjujcng\",\"tags\":{\"oknub\":\"yedmzrgj\",\"coqra\":\"oitpkpztrgdgx\",\"qi\":\"wugyx\"},\"id\":\"we\",\"name\":\"alwvskbu\",\"type\":\"z\"},{\"properties\":{\"networkFabricId\":\"caqt\",\"vlanId\":1536605508,\"mtu\":324493870,\"configurationState\":\"Succeeded\",\"provisioningState\":\"Updating\",\"administrativeState\":\"MAT\",\"annotation\":\"sxzakuejkm\"},\"location\":\"iztjof\",\"tags\":{\"yeji\":\"ovjufycsjmlbe\",\"rtudawlpjfel\":\"iuxegth\",\"bgqnz\":\"erppt\",\"ialwc\":\"nhii\"},\"id\":\"gckbb\",\"name\":\"ccgzpraoxnyu\",\"type\":\"fa\"}],\"nextLink\":\"gftipwc\"}")
            .toObject(L2IsolationDomainsListResult.class);
        Assertions.assertEquals("ecjujcng", model.value().get(0).location());
        Assertions.assertEquals("yedmzrgj", model.value().get(0).tags().get("oknub"));
        Assertions.assertEquals("lmdgglmepjp", model.value().get(0).networkFabricId());
        Assertions.assertEquals(188221031, model.value().get(0).vlanId());
        Assertions.assertEquals(978481957, model.value().get(0).mtu());
        Assertions.assertEquals("szngafpgyl", model.value().get(0).annotation());
        Assertions.assertEquals("gftipwc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L2IsolationDomainsListResult model = new L2IsolationDomainsListResult().withValue(Arrays.asList(
            new L2IsolationDomainInner().withLocation("ecjujcng")
                .withTags(mapOf("oknub", "yedmzrgj", "coqra", "oitpkpztrgdgx", "qi", "wugyx"))
                .withNetworkFabricId("lmdgglmepjp")
                .withVlanId(188221031)
                .withMtu(978481957)
                .withAnnotation("szngafpgyl"),
            new L2IsolationDomainInner().withLocation("iztjof")
                .withTags(mapOf("yeji", "ovjufycsjmlbe", "rtudawlpjfel", "iuxegth", "bgqnz", "erppt", "ialwc", "nhii"))
                .withNetworkFabricId("caqt")
                .withVlanId(1536605508)
                .withMtu(324493870)
                .withAnnotation("sxzakuejkm")))
            .withNextLink("gftipwc");
        model = BinaryData.fromObject(model).toObject(L2IsolationDomainsListResult.class);
        Assertions.assertEquals("ecjujcng", model.value().get(0).location());
        Assertions.assertEquals("yedmzrgj", model.value().get(0).tags().get("oknub"));
        Assertions.assertEquals("lmdgglmepjp", model.value().get(0).networkFabricId());
        Assertions.assertEquals(188221031, model.value().get(0).vlanId());
        Assertions.assertEquals(978481957, model.value().get(0).mtu());
        Assertions.assertEquals("szngafpgyl", model.value().get(0).annotation());
        Assertions.assertEquals("gftipwc", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
