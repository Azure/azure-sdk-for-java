// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkDevicePatchParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkDevicePatchParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkDevicePatchParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"hostName\":\"awkikcdgfh\",\"serialNumber\":\"sd\",\"annotation\":\"ey\"},\"tags\":{\"gxsur\":\"dedecfiwh\",\"bgullc\":\"jqrshz\"}}")
                .toObject(NetworkDevicePatchParameters.class);
        Assertions.assertEquals("dedecfiwh", model.tags().get("gxsur"));
        Assertions.assertEquals("awkikcdgfh", model.hostname());
        Assertions.assertEquals("sd", model.serialNumber());
        Assertions.assertEquals("ey", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkDevicePatchParameters model =
            new NetworkDevicePatchParameters()
                .withTags(mapOf("gxsur", "dedecfiwh", "bgullc", "jqrshz"))
                .withHostname("awkikcdgfh")
                .withSerialNumber("sd")
                .withAnnotation("ey");
        model = BinaryData.fromObject(model).toObject(NetworkDevicePatchParameters.class);
        Assertions.assertEquals("dedecfiwh", model.tags().get("gxsur"));
        Assertions.assertEquals("awkikcdgfh", model.hostname());
        Assertions.assertEquals("sd", model.serialNumber());
        Assertions.assertEquals("ey", model.annotation());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
