// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.L2IsolationDomain;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L2IsolationDomainsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"networkFabricId\":\"haezcldkc\",\"vlanId\":2146258576,\"mtu\":113095323,\"configurationState\":\"PendingCommit\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Enabled\",\"annotation\":\"jstfs\"},\"location\":\"cjakgkqwx\",\"tags\":{\"wdjox\":\"oqzh\"},\"id\":\"kbd\",\"name\":\"sobvcnsb\",\"type\":\"oeznl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        L2IsolationDomain response = manager.l2IsolationDomains()
            .define("jnzpqhqqsa")
            .withRegion("cv")
            .withExistingResourceGroup("rvqrwwbdrwroqk")
            .withNetworkFabricId("kyu")
            .withVlanId(2097989242)
            .withTags(mapOf("jocrhnxzmfvmw", "suowtolkyqf", "rawwhyxf", "nrtc"))
            .withMtu(696018233)
            .withAnnotation("nhekzazvgeytlpls")
            .create();

        Assertions.assertEquals("cjakgkqwx", response.location());
        Assertions.assertEquals("oqzh", response.tags().get("wdjox"));
        Assertions.assertEquals("haezcldkc", response.networkFabricId());
        Assertions.assertEquals(2146258576, response.vlanId());
        Assertions.assertEquals(113095323, response.mtu());
        Assertions.assertEquals("jstfs", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
