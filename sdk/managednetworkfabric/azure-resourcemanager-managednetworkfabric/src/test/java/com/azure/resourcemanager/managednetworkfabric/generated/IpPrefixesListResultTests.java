// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpPrefixInner;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixesListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IpPrefixesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpPrefixesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"configurationState\":\"ErrorProvisioning\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"MAT\",\"ipPrefixRules\":[{\"action\":\"Permit\",\"sequenceNumber\":932286244659176936,\"networkPrefix\":\"a\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"dnwqapfg\"}],\"annotation\":\"pcvessm\"},\"location\":\"h\",\"tags\":{\"dqq\":\"ip\",\"blhtjq\":\"tekva\"},\"id\":\"qyv\",\"name\":\"eh\",\"type\":\"a\"},{\"properties\":{\"configurationState\":\"ErrorDeprovisioning\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"Enabled\",\"ipPrefixRules\":[{\"action\":\"Permit\",\"sequenceNumber\":5431502201952850372,\"networkPrefix\":\"xivzrrry\",\"condition\":\"Range\",\"subnetMaskLength\":\"ipsk\"}],\"annotation\":\"zatvfuzka\"},\"location\":\"jvvruxwigsyei\",\"tags\":{\"kileplkcsmknhwtb\":\"smjtgrqgdg\",\"oygbdgwumgxd\":\"aedorvvmqf\"},\"id\":\"dhp\",\"name\":\"bgd\",\"type\":\"xjd\"},{\"properties\":{\"configurationState\":\"ErrorProvisioning\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"RMA\",\"ipPrefixRules\":[{\"action\":\"Permit\",\"sequenceNumber\":6883686834742004480,\"networkPrefix\":\"llcolsrsxapte\",\"condition\":\"Range\",\"subnetMaskLength\":\"cgjokjljnhvlq\"}],\"annotation\":\"ek\"},\"location\":\"eksnbksdqhjvyk\",\"tags\":{\"hhus\":\"sl\"},\"id\":\"cpoq\",\"name\":\"avnwqj\",\"type\":\"g\"},{\"properties\":{\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Enabled\",\"ipPrefixRules\":[{\"action\":\"Deny\",\"sequenceNumber\":424186973430303992,\"networkPrefix\":\"wfd\",\"condition\":\"GreaterThanOrEqualTo\",\"subnetMaskLength\":\"ztensvkzykjtj\"},{\"action\":\"Permit\",\"sequenceNumber\":2113099919480363245,\"networkPrefix\":\"fwushcdpkupn\",\"condition\":\"Range\",\"subnetMaskLength\":\"jfbp\"},{\"action\":\"Deny\",\"sequenceNumber\":8039859701811063701,\"networkPrefix\":\"eoiojfizfavkjzw\",\"condition\":\"GreaterThanOrEqualTo\",\"subnetMaskLength\":\"aykmmf\"}],\"annotation\":\"bfw\"},\"location\":\"zxmdew\",\"tags\":{\"jwwviy\":\"xkrplbjaz\",\"suhbrnn\":\"y\"},\"id\":\"jxsqwjhqkbiwetp\",\"name\":\"zycyqiqyhg\",\"type\":\"se\"}],\"nextLink\":\"lexbsf\"}")
            .toObject(IpPrefixesListResult.class);
        Assertions.assertEquals("h", model.value().get(0).location());
        Assertions.assertEquals("ip", model.value().get(0).tags().get("dqq"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.value().get(0).ipPrefixRules().get(0).action());
        Assertions.assertEquals(932286244659176936L, model.value().get(0).ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("a", model.value().get(0).ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.LESSER_THAN_OR_EQUAL_TO,
            model.value().get(0).ipPrefixRules().get(0).condition());
        Assertions.assertEquals("dnwqapfg", model.value().get(0).ipPrefixRules().get(0).subnetMaskLength());
        Assertions.assertEquals("pcvessm", model.value().get(0).annotation());
        Assertions.assertEquals("lexbsf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpPrefixesListResult model = new IpPrefixesListResult().withValue(Arrays.asList(
            new IpPrefixInner().withLocation("h")
                .withTags(mapOf("dqq", "ip", "blhtjq", "tekva"))
                .withIpPrefixRules(Arrays.asList(new IpPrefixRule().withAction(CommunityActionTypes.PERMIT)
                    .withSequenceNumber(932286244659176936L)
                    .withNetworkPrefix("a")
                    .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                    .withSubnetMaskLength("dnwqapfg")))
                .withAnnotation("pcvessm"),
            new IpPrefixInner().withLocation("jvvruxwigsyei")
                .withTags(mapOf("kileplkcsmknhwtb", "smjtgrqgdg", "oygbdgwumgxd", "aedorvvmqf"))
                .withIpPrefixRules(Arrays.asList(new IpPrefixRule().withAction(CommunityActionTypes.PERMIT)
                    .withSequenceNumber(5431502201952850372L)
                    .withNetworkPrefix("xivzrrry")
                    .withCondition(Condition.RANGE)
                    .withSubnetMaskLength("ipsk")))
                .withAnnotation("zatvfuzka"),
            new IpPrefixInner().withLocation("eksnbksdqhjvyk")
                .withTags(mapOf("hhus", "sl"))
                .withIpPrefixRules(Arrays.asList(new IpPrefixRule().withAction(CommunityActionTypes.PERMIT)
                    .withSequenceNumber(6883686834742004480L)
                    .withNetworkPrefix("llcolsrsxapte")
                    .withCondition(Condition.RANGE)
                    .withSubnetMaskLength("cgjokjljnhvlq")))
                .withAnnotation("ek"),
            new IpPrefixInner().withLocation("zxmdew")
                .withTags(mapOf("jwwviy", "xkrplbjaz", "suhbrnn", "y"))
                .withIpPrefixRules(Arrays.asList(
                    new IpPrefixRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(424186973430303992L)
                        .withNetworkPrefix("wfd")
                        .withCondition(Condition.GREATER_THAN_OR_EQUAL_TO)
                        .withSubnetMaskLength("ztensvkzykjtj"),
                    new IpPrefixRule().withAction(CommunityActionTypes.PERMIT)
                        .withSequenceNumber(2113099919480363245L)
                        .withNetworkPrefix("fwushcdpkupn")
                        .withCondition(Condition.RANGE)
                        .withSubnetMaskLength("jfbp"),
                    new IpPrefixRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(8039859701811063701L)
                        .withNetworkPrefix("eoiojfizfavkjzw")
                        .withCondition(Condition.GREATER_THAN_OR_EQUAL_TO)
                        .withSubnetMaskLength("aykmmf")))
                .withAnnotation("bfw")))
            .withNextLink("lexbsf");
        model = BinaryData.fromObject(model).toObject(IpPrefixesListResult.class);
        Assertions.assertEquals("h", model.value().get(0).location());
        Assertions.assertEquals("ip", model.value().get(0).tags().get("dqq"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.value().get(0).ipPrefixRules().get(0).action());
        Assertions.assertEquals(932286244659176936L, model.value().get(0).ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("a", model.value().get(0).ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.LESSER_THAN_OR_EQUAL_TO,
            model.value().get(0).ipPrefixRules().get(0).condition());
        Assertions.assertEquals("dnwqapfg", model.value().get(0).ipPrefixRules().get(0).subnetMaskLength());
        Assertions.assertEquals("pcvessm", model.value().get(0).annotation());
        Assertions.assertEquals("lexbsf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
