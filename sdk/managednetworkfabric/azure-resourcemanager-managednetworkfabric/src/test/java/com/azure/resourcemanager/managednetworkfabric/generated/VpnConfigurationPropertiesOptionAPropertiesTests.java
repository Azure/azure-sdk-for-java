// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPropertiesOptionAProperties;
import org.junit.jupiter.api.Assertions;

public final class VpnConfigurationPropertiesOptionAPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VpnConfigurationPropertiesOptionAProperties model = BinaryData.fromString(
            "{\"primaryIpv4Prefix\":\"wly\",\"primaryIpv6Prefix\":\"chpqvctsfaeuhww\",\"secondaryIpv4Prefix\":\"nstvzuzhasup\",\"secondaryIpv6Prefix\":\"p\",\"mtu\":959912911,\"vlanId\":898786188,\"peerASN\":6273140630685430619,\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":1867491707,\"multiplier\":1083168713}}")
            .toObject(VpnConfigurationPropertiesOptionAProperties.class);
        Assertions.assertEquals(959912911, model.mtu());
        Assertions.assertEquals(898786188, model.vlanId());
        Assertions.assertEquals(6273140630685430619L, model.peerAsn());
        Assertions.assertEquals(1867491707, model.bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1083168713, model.bfdConfiguration().multiplier());
        Assertions.assertEquals("wly", model.primaryIpv4Prefix());
        Assertions.assertEquals("chpqvctsfaeuhww", model.primaryIpv6Prefix());
        Assertions.assertEquals("nstvzuzhasup", model.secondaryIpv4Prefix());
        Assertions.assertEquals("p", model.secondaryIpv6Prefix());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VpnConfigurationPropertiesOptionAProperties model
            = new VpnConfigurationPropertiesOptionAProperties().withMtu(959912911)
                .withVlanId(898786188)
                .withPeerAsn(6273140630685430619L)
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(1867491707).withMultiplier(1083168713))
                .withPrimaryIpv4Prefix("wly")
                .withPrimaryIpv6Prefix("chpqvctsfaeuhww")
                .withSecondaryIpv4Prefix("nstvzuzhasup")
                .withSecondaryIpv6Prefix("p");
        model = BinaryData.fromObject(model).toObject(VpnConfigurationPropertiesOptionAProperties.class);
        Assertions.assertEquals(959912911, model.mtu());
        Assertions.assertEquals(898786188, model.vlanId());
        Assertions.assertEquals(6273140630685430619L, model.peerAsn());
        Assertions.assertEquals(1867491707, model.bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1083168713, model.bfdConfiguration().multiplier());
        Assertions.assertEquals("wly", model.primaryIpv4Prefix());
        Assertions.assertEquals("chpqvctsfaeuhww", model.primaryIpv6Prefix());
        Assertions.assertEquals("nstvzuzhasup", model.secondaryIpv4Prefix());
        Assertions.assertEquals("p", model.secondaryIpv6Prefix());
    }
}
