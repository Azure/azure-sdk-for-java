// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.Extension;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetwork;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InternalNetworksListByL3IsolationDomainMockTests {
    @Test
    public void testListByL3IsolationDomain() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"vlanId\":341895282,\"bgpConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":590116963,\"multiplier\":294196937},\"defaultRouteOriginate\":\"True\",\"allowAS\":922115529,\"allowASOverride\":\"Disable\",\"fabricASN\":410752828832351795,\"peerASN\":2311581557755890267,\"ipv4ListenRangePrefixes\":[\"zjnnuwwv\",\"zrfxajtbcqj\",\"bkj\"],\"ipv6ListenRangePrefixes\":[\"xrj\",\"yzrieitq\",\"lzuwtbdzqajxkmp\",\"bfhlgeehbd\"],\"ipv4NeighborAddress\":[{\"address\":\"nlx\",\"configurationState\":\"PendingCommit\"}],\"ipv6NeighborAddress\":[{\"address\":\"nb\",\"configurationState\":\"Deprovisioning\"},{\"address\":\"oubukqmie\",\"configurationState\":\"Accepted\"}],\"annotation\":\"obvveq\"},\"staticRouteConfiguration\":{\"extension\":\"NoExtension\",\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":1576770702,\"multiplier\":1851687022},\"ipv4Routes\":[{\"prefix\":\"ecdsysxnkuhvhn\",\"nextHop\":[\"evzcrrwnk\",\"gdwq\",\"mxsfqeaxdqe\",\"uvmsaq\"]},{\"prefix\":\"viawg\",\"nextHop\":[\"wu\",\"vvzfzn\",\"gpbcbkcpympd\",\"ieasklkqcl\"]},{\"prefix\":\"fusrgnoskkhbmj\",\"nextHop\":[\"lyyuahvyeikbvqzr\",\"rgbqau\"]}],\"ipv6Routes\":[{\"prefix\":\"kxjnohafwmf\",\"nextHop\":[\"jly\",\"tugpeametsdwxfa\",\"txc\"]},{\"prefix\":\"fegs\",\"nextHop\":[\"b\",\"hou\",\"vkandhooimazkm\"]},{\"prefix\":\"f\",\"nextHop\":[\"gdmfvybfmpot\",\"lopfigrx\"]},{\"prefix\":\"trcodbqeogldmxxb\",\"nextHop\":[\"s\",\"vamsxrwq\",\"wdflgq\",\"plze\"]}]},\"configurationState\":\"PendingCommit\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"MAT\",\"mtu\":1102010974,\"connectedIPv4Subnets\":[{\"prefix\":\"ta\",\"annotation\":\"xt\"},{\"prefix\":\"fcyatbxdwr\",\"annotation\":\"vtkmx\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"shnugfbpeigkf\",\"annotation\":\"ovriqtuzwbkqcgz\"},{\"prefix\":\"gtdjhtbarptxurs\",\"annotation\":\"yyumhzpst\"},{\"prefix\":\"cqacvttyh\",\"annotation\":\"ilnsz\"}],\"importRoutePolicyId\":\"buwuu\",\"exportRoutePolicyId\":\"ydscizvkayioxpq\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"blclef\",\"importIpv6RoutePolicyId\":\"mbodvdgfua\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"jymcfvvzc\",\"exportIpv6RoutePolicyId\":\"yuq\"},\"ingressAclId\":\"cktnbpkfnxrl\",\"egressAclId\":\"mlzvvrmesfhq\",\"isMonitoringEnabled\":\"False\",\"extension\":\"NoExtension\",\"annotation\":\"revfwcbawapn\"},\"id\":\"tq\",\"name\":\"mkmzvag\",\"type\":\"xfblsxyfq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<InternalNetwork> response = manager.internalNetworks()
            .listByL3IsolationDomain("pnseptvdticca", "lgzwkopxdkb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(341895282, response.iterator().next().vlanId());
        Assertions.assertEquals("obvveq", response.iterator().next().bgpConfiguration().annotation());
        Assertions.assertEquals(590116963,
            response.iterator().next().bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(294196937,
            response.iterator().next().bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.TRUE,
            response.iterator().next().bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(922115529, response.iterator().next().bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.DISABLE,
            response.iterator().next().bgpConfiguration().allowASOverride());
        Assertions.assertEquals(2311581557755890267L, response.iterator().next().bgpConfiguration().peerAsn());
        Assertions.assertEquals("zjnnuwwv",
            response.iterator().next().bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("xrj", response.iterator().next().bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("nlx",
            response.iterator().next().bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("nb",
            response.iterator().next().bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(1576770702,
            response.iterator().next().staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1851687022,
            response.iterator().next().staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("ecdsysxnkuhvhn",
            response.iterator().next().staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("evzcrrwnk",
            response.iterator().next().staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("kxjnohafwmf",
            response.iterator().next().staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("jly",
            response.iterator().next().staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(Extension.NO_EXTENSION,
            response.iterator().next().staticRouteConfiguration().extension());
        Assertions.assertEquals(1102010974, response.iterator().next().mtu());
        Assertions.assertEquals("xt", response.iterator().next().connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("ta", response.iterator().next().connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("ovriqtuzwbkqcgz",
            response.iterator().next().connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("shnugfbpeigkf", response.iterator().next().connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("buwuu", response.iterator().next().importRoutePolicyId());
        Assertions.assertEquals("ydscizvkayioxpq", response.iterator().next().exportRoutePolicyId());
        Assertions.assertEquals("blclef", response.iterator().next().importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("mbodvdgfua", response.iterator().next().importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("jymcfvvzc", response.iterator().next().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("yuq", response.iterator().next().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("cktnbpkfnxrl", response.iterator().next().ingressAclId());
        Assertions.assertEquals("mlzvvrmesfhq", response.iterator().next().egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, response.iterator().next().isMonitoringEnabled());
        Assertions.assertEquals(Extension.NO_EXTENSION, response.iterator().next().extension());
        Assertions.assertEquals("revfwcbawapn", response.iterator().next().annotation());
    }
}
