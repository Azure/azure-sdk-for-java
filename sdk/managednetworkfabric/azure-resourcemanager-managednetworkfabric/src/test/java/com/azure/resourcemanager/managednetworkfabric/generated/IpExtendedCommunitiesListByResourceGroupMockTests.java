// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IpExtendedCommunitiesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"configurationState\":\"ErrorProvisioning\",\"provisioningState\":\"Updating\",\"administrativeState\":\"MAT\",\"ipExtendedCommunityRules\":[{\"action\":\"Permit\",\"sequenceNumber\":8880320550954967024,\"routeTargets\":[\"aujbfomfbozpj\",\"xefppq\",\"wdnnjjthpsnxebyc\"]},{\"action\":\"Deny\",\"sequenceNumber\":7875316579641726370,\"routeTargets\":[\"xubnn\"]},{\"action\":\"Deny\",\"sequenceNumber\":7308374102330148260,\"routeTargets\":[\"cxnouspdyzssjl\",\"ykdygjvgs\",\"jlf\",\"h\"]},{\"action\":\"Deny\",\"sequenceNumber\":1052579675599113124,\"routeTargets\":[\"xcrbcrgyoimm\",\"szzcctvk\"]}],\"annotation\":\"nhtvagw\"},\"location\":\"wcnvpnyldjdkjvdr\",\"tags\":{\"nrjlqdoqejexf\":\"kxiox\",\"drklpdyehjrwc\":\"lhuhdkubgyw\",\"yw\":\"lvxboc\"},\"id\":\"fvuhzmolhveolngs\",\"name\":\"mhwdxqupyml\",\"type\":\"klmnjqzmqynhitr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IpExtendedCommunity> response
            = manager.ipExtendedCommunities().listByResourceGroup("efpubaldjcgldryv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wcnvpnyldjdkjvdr", response.iterator().next().location());
        Assertions.assertEquals("kxiox", response.iterator().next().tags().get("nrjlqdoqejexf"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT,
            response.iterator().next().ipExtendedCommunityRules().get(0).action());
        Assertions.assertEquals(8880320550954967024L,
            response.iterator().next().ipExtendedCommunityRules().get(0).sequenceNumber());
        Assertions.assertEquals("aujbfomfbozpj",
            response.iterator().next().ipExtendedCommunityRules().get(0).routeTargets().get(0));
        Assertions.assertEquals("nhtvagw", response.iterator().next().annotation());
    }
}
