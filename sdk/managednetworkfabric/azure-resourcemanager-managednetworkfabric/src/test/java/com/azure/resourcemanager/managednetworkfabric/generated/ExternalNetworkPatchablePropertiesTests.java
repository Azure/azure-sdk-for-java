// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import org.junit.jupiter.api.Assertions;

public final class ExternalNetworkPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExternalNetworkPatchableProperties model =
            BinaryData
                .fromString(
                    "{\"importRoutePolicyId\":\"euscplhyv\",\"exportRoutePolicyId\":\"xlyzkxit\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"ezsvkolrupjov\",\"importIpv6RoutePolicyId\":\"zsayebrazw\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"zbtz\",\"exportIpv6RoutePolicyId\":\"kykipfsdyepfnoc\"}}")
                .toObject(ExternalNetworkPatchableProperties.class);
        Assertions.assertEquals("euscplhyv", model.importRoutePolicyId());
        Assertions.assertEquals("xlyzkxit", model.exportRoutePolicyId());
        Assertions.assertEquals("ezsvkolrupjov", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("zsayebrazw", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("zbtz", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("kykipfsdyepfnoc", model.exportRoutePolicy().exportIpv6RoutePolicyId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExternalNetworkPatchableProperties model =
            new ExternalNetworkPatchableProperties()
                .withImportRoutePolicyId("euscplhyv")
                .withExportRoutePolicyId("xlyzkxit")
                .withImportRoutePolicy(
                    new ImportRoutePolicy()
                        .withImportIpv4RoutePolicyId("ezsvkolrupjov")
                        .withImportIpv6RoutePolicyId("zsayebrazw"))
                .withExportRoutePolicy(
                    new ExportRoutePolicy()
                        .withExportIpv4RoutePolicyId("zbtz")
                        .withExportIpv6RoutePolicyId("kykipfsdyepfnoc"));
        model = BinaryData.fromObject(model).toObject(ExternalNetworkPatchableProperties.class);
        Assertions.assertEquals("euscplhyv", model.importRoutePolicyId());
        Assertions.assertEquals("xlyzkxit", model.exportRoutePolicyId());
        Assertions.assertEquals("ezsvkolrupjov", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("zsayebrazw", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("zbtz", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("kykipfsdyepfnoc", model.exportRoutePolicy().exportIpv6RoutePolicyId());
    }
}
