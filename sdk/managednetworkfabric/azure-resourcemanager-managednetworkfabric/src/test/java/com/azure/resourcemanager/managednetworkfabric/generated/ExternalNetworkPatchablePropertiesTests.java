// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import org.junit.jupiter.api.Assertions;

public final class ExternalNetworkPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExternalNetworkPatchableProperties model = BinaryData.fromString(
            "{\"networkToNetworkInterconnectId\":\"vnyttzgi\",\"importRoutePolicyId\":\"yri\",\"exportRoutePolicyId\":\"gm\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"hlqtxnrflkn\",\"importIpv6RoutePolicyId\":\"ndpgfjodhda\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"wfhipxwgsab\",\"exportIpv6RoutePolicyId\":\"ipowza\"}}")
            .toObject(ExternalNetworkPatchableProperties.class);
        Assertions.assertEquals("vnyttzgi", model.networkToNetworkInterconnectId());
        Assertions.assertEquals("yri", model.importRoutePolicyId());
        Assertions.assertEquals("gm", model.exportRoutePolicyId());
        Assertions.assertEquals("hlqtxnrflkn", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("ndpgfjodhda", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("wfhipxwgsab", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("ipowza", model.exportRoutePolicy().exportIpv6RoutePolicyId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExternalNetworkPatchableProperties model
            = new ExternalNetworkPatchableProperties().withNetworkToNetworkInterconnectId("vnyttzgi")
                .withImportRoutePolicyId("yri")
                .withExportRoutePolicyId("gm")
                .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("hlqtxnrflkn")
                    .withImportIpv6RoutePolicyId("ndpgfjodhda"))
                .withExportRoutePolicy(new ExportRoutePolicy().withExportIpv4RoutePolicyId("wfhipxwgsab")
                    .withExportIpv6RoutePolicyId("ipowza"));
        model = BinaryData.fromObject(model).toObject(ExternalNetworkPatchableProperties.class);
        Assertions.assertEquals("vnyttzgi", model.networkToNetworkInterconnectId());
        Assertions.assertEquals("yri", model.importRoutePolicyId());
        Assertions.assertEquals("gm", model.exportRoutePolicyId());
        Assertions.assertEquals("hlqtxnrflkn", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("ndpgfjodhda", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("wfhipxwgsab", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("ipowza", model.exportRoutePolicy().exportIpv6RoutePolicyId());
    }
}
