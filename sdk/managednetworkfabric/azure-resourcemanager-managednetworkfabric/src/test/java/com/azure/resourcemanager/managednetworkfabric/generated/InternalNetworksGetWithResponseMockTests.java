// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetwork;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InternalNetworksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"disabledOnResources\":[\"ztgeqmgqzgwld\",\"ychillcecfe\",\"uwaoaguhicqlli\",\"stacsjvhrweftkwq\"],\"administrativeState\":\"Disabled\",\"bgpDisabledOnResources\":[\"sse\",\"aepwamcxtcz\",\"upeuknijduyye\"],\"bfdDisabledOnResources\":[\"djfbocyv\",\"hulrtywikdmhla\"],\"bfdForStaticRoutesDisabledOnResources\":[\"lgbhgauacdi\",\"mxu\"],\"provisioningState\":\"Succeeded\",\"vlanId\":2084049172,\"mtu\":950653208,\"connectedIPv4Subnets\":[],\"connectedIPv6Subnets\":[],\"staticRouteConfiguration\":{\"ipv4Routes\":[],\"ipv6Routes\":[]},\"bgpConfiguration\":{\"defaultRouteOriginate\":\"True\",\"allowAS\":275538982,\"allowASOverride\":\"Enable\",\"fabricASN\":264605971,\"peerASN\":207616404,\"ipv4ListenRangePrefixes\":[],\"ipv6ListenRangePrefixes\":[],\"ipv4NeighborAddress\":[],\"ipv6NeighborAddress\":[],\"annotation\":\"jchnta\"},\"importRoutePolicyId\":\"ay\",\"exportRoutePolicyId\":\"b\",\"annotation\":\"pzealbmqkyojw\"},\"id\":\"fkmbtsuahxsgxj\",\"name\":\"mmzrrscub\",\"type\":\"wsdrnpxqwodif\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        InternalNetwork response =
            manager
                .internalNetworks()
                .getWithResponse("bsjuscvsfx", "gctmgxuupbezq", "cydrtceukdqkk", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(2084049172, response.vlanId());
        Assertions.assertEquals(950653208, response.mtu());
        Assertions.assertEquals("jchnta", response.bgpConfiguration().annotation());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, response.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(275538982, response.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, response.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(207616404, response.bgpConfiguration().peerAsn());
        Assertions.assertEquals("ay", response.importRoutePolicyId());
        Assertions.assertEquals("b", response.exportRoutePolicyId());
        Assertions.assertEquals("pzealbmqkyojw", response.annotation());
    }
}
