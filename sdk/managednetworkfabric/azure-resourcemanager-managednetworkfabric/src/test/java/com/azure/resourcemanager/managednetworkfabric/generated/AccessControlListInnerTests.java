// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.AccessControlListInner;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AclActionType;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListInner model = BinaryData.fromString(
            "{\"properties\":{\"lastSyncedTime\":\"2021-03-24T17:54:20Z\",\"configurationState\":\"Failed\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"MAT\",\"configurationType\":\"Inline\",\"aclsUrl\":\"bczmeh\",\"defaultAction\":\"Deny\",\"matchConfigurations\":[{\"matchConfigurationName\":\"sphrupidgs\",\"sequenceNumber\":5720978843418888179,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"etherTypes\":[\"cmsxaobhdxbm\"],\"fragments\":[\"oqjzehtbmufpowno\"],\"ipLengths\":[\"wlrxyb\",\"soqijg\"],\"ttlValues\":[\"bpazlobcufpdzn\",\"btcqq\",\"nq\",\"lhqgnufooojy\"],\"dscpMarkings\":[\"sqe\",\"aagdfmg\",\"zlhjxrifkwmrvkt\",\"izntocipao\"],\"portCondition\":{\"layer4Protocol\":\"TCP\"},\"protocolTypes\":[\"qucmpo\"],\"vlanMatchCondition\":{},\"ipCondition\":{}},{\"etherTypes\":[\"ogknygjofjdd\",\"qs\",\"deupewnwrei\",\"jzyflu\"],\"fragments\":[\"hmofc\"],\"ipLengths\":[\"my\"],\"ttlValues\":[\"dtmlxhekuksjt\",\"ukcdmparcryuanzw\",\"xzdxtayrlhmwh\"],\"dscpMarkings\":[\"rqobmtuk\",\"nryrtihf\",\"tijbpzvgnwzsymgl\"],\"portCondition\":{\"layer4Protocol\":\"UDP\"},\"protocolTypes\":[\"zk\",\"hdbihan\",\"fhfcb\",\"y\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Count\",\"counterName\":\"hab\"}]},{\"matchConfigurationName\":\"pikxwczbyscnpqxu\",\"sequenceNumber\":3437469293095173263,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"etherTypes\":[\"br\"],\"fragments\":[\"dumjgrtfwvuk\"],\"ipLengths\":[\"udccsnhsjc\",\"yejhk\",\"yhtnapczwlokjye\"],\"ttlValues\":[\"vnipjox\",\"jnchgej\",\"podmailzydehojwy\"],\"dscpMarkings\":[\"xinpmqnjaq\",\"ixjsprozvcputeg\",\"vwmf\"],\"portCondition\":{\"layer4Protocol\":\"TCP\"},\"protocolTypes\":[\"mdvpjhulsu\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Count\",\"counterName\":\"rwfndiod\"},{\"type\":\"Log\",\"counterName\":\"w\"},{\"type\":\"Drop\",\"counterName\":\"vwryoqpso\"}]},{\"matchConfigurationName\":\"ctazakljlahbcryf\",\"sequenceNumber\":5965878792837381583,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"etherTypes\":[\"paojakhmsbzjh\",\"rzevdphlxaol\",\"hqtrgqjbpf\"],\"fragments\":[\"inzgvfcj\"],\"ipLengths\":[\"oxxjtfelluwf\",\"it\"],\"ttlValues\":[\"eqfpj\",\"jlxofpdvhpfxxyp\",\"ninmayhuyb\"],\"dscpMarkings\":[\"odepoogin\",\"vamih\"],\"portCondition\":{\"layer4Protocol\":\"UDP\"},\"protocolTypes\":[\"rxzxtheo\",\"usivye\",\"cciqihnhungbwjz\"],\"vlanMatchCondition\":{},\"ipCondition\":{}},{\"etherTypes\":[\"xgispemvtzfkufu\"],\"fragments\":[\"ofx\",\"eofjaeqjh\"],\"ipLengths\":[\"asvm\"],\"ttlValues\":[\"qulngsntnbybkzgc\"],\"dscpMarkings\":[\"clxxwrljdo\",\"skcqvkocrcjd\"],\"portCondition\":{\"layer4Protocol\":\"TCP\"},\"protocolTypes\":[\"xbnjbiksq\",\"gls\",\"ainqpjwnzlljfm\"],\"vlanMatchCondition\":{},\"ipCondition\":{}},{\"etherTypes\":[\"vmgxsab\",\"yqduujit\",\"jczdzevndh\",\"rwpdappdsbdkvwrw\"],\"fragments\":[\"usnhutje\",\"tmrldhugjzzdatq\"],\"ipLengths\":[\"cdgea\"],\"ttlValues\":[\"phut\",\"cndvkaozwyiftyhx\",\"urokft\"],\"dscpMarkings\":[\"lniwpwcukjfkgiaw\",\"klryplwck\",\"asy\"],\"portCondition\":{\"layer4Protocol\":\"UDP\"},\"protocolTypes\":[\"hsgcbacphejkot\",\"nqgoulzndli\"],\"vlanMatchCondition\":{},\"ipCondition\":{}},{\"etherTypes\":[\"gfgibm\"],\"fragments\":[\"akeqs\",\"xybz\"],\"ipLengths\":[\"dqytbciqfouflmm\"],\"ttlValues\":[\"smodmgloug\"],\"dscpMarkings\":[\"wtmutduq\",\"ta\",\"spwgcuertumkdosv\",\"whbmd\"],\"portCondition\":{\"layer4Protocol\":\"TCP\"},\"protocolTypes\":[\"ddgmb\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Count\",\"counterName\":\"tq\"},{\"type\":\"Count\",\"counterName\":\"fpfpsalgbquxigj\"},{\"type\":\"Log\",\"counterName\":\"jaoyfhrtx\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"ujysvle\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"awrlyx\",\"jkcpr\",\"nwbxgjvtbvpyssz\"]},{\"name\":\"rujqg\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"uqfprwzw\",\"nguitnwuizgazxu\"]}],\"vlanGroups\":[{\"name\":\"ckyfih\",\"vlans\":[\"dfvzwdzuhty\"]},{\"name\":\"isdkfthwxmnteiw\",\"vlans\":[\"vkmijcmmxdcuf\",\"fsrpymzidnse\",\"cxtbzsg\",\"yc\"]}],\"portGroups\":[{\"name\":\"wmdwzjeiachboo\",\"ports\":[\"nrosfqpte\",\"hzzvypyq\"]},{\"name\":\"mzinpvswjdk\",\"ports\":[\"oodqxhcrm\",\"ohjtckw\",\"dsoifiyipj\",\"sqwpgrjb\"]},{\"name\":\"orcjxvsnby\",\"ports\":[\"bnmo\",\"pcyshu\",\"zafb\"]},{\"name\":\"j\",\"ports\":[\"toqcjmklja\",\"bqidtqaj\",\"yulpkudjkr\",\"khbzhfepgzg\"]}]}],\"annotation\":\"xzlocxscp\"},\"location\":\"erhhbcsglumm\",\"tags\":{\"odxobnbdxkqpxok\":\"j\",\"odgmaajrmvdjwz\":\"jionpimexgstxgc\",\"ctbzaq\":\"lovmclwhijcoe\"},\"id\":\"qsycbkbfkgu\",\"name\":\"dkexxppofm\",\"type\":\"axcfjpgddtocjjx\"}")
            .toObject(AccessControlListInner.class);
        Assertions.assertEquals("erhhbcsglumm", model.location());
        Assertions.assertEquals("j", model.tags().get("odxobnbdxkqpxok"));
        Assertions.assertEquals(ConfigurationType.INLINE, model.configurationType());
        Assertions.assertEquals("bczmeh", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("sphrupidgs", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(5720978843418888179L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("qucmpo",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("cmsxaobhdxbm",
            model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("oqjzehtbmufpowno",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("wlrxyb",
            model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("bpazlobcufpdzn",
            model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("sqe",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(Layer4Protocol.TCP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(AclActionType.COUNT, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("hab", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("ujysvle", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV6,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("awrlyx",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("ckyfih", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("dfvzwdzuhty",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("wmdwzjeiachboo", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("nrosfqpte",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
        Assertions.assertEquals("xzlocxscp", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListInner model
            = new AccessControlListInner().withLocation("erhhbcsglumm")
                .withTags(mapOf("odxobnbdxkqpxok", "j", "odgmaajrmvdjwz", "jionpimexgstxgc", "ctbzaq", "lovmclwhijcoe"))
                .withConfigurationType(ConfigurationType.INLINE)
                .withAclsUrl("bczmeh")
                .withDefaultAction(CommunityActionTypes.DENY)
                .withMatchConfigurations(
                    Arrays
                        .asList(
                            new AccessControlListMatchConfiguration().withMatchConfigurationName("sphrupidgs")
                                .withSequenceNumber(5720978843418888179L)
                                .withIpAddressType(IpAddressType.IPV4)
                                .withMatchConditions(Arrays.asList(
                                    new AccessControlListMatchCondition().withProtocolTypes(Arrays.asList("qucmpo"))
                                        .withVlanMatchCondition(new VlanMatchCondition())
                                        .withIpCondition(new IpMatchCondition())
                                        .withEtherTypes(Arrays.asList("cmsxaobhdxbm"))
                                        .withFragments(Arrays.asList("oqjzehtbmufpowno"))
                                        .withIpLengths(Arrays.asList("wlrxyb", "soqijg"))
                                        .withTtlValues(Arrays.asList("bpazlobcufpdzn", "btcqq", "nq", "lhqgnufooojy"))
                                        .withDscpMarkings(
                                            Arrays.asList("sqe", "aagdfmg", "zlhjxrifkwmrvkt", "izntocipao"))
                                        .withPortCondition(new AccessControlListPortCondition()
                                            .withLayer4Protocol(Layer4Protocol.TCP)),
                                    new AccessControlListMatchCondition()
                                        .withProtocolTypes(Arrays.asList("zk", "hdbihan", "fhfcb", "y"))
                                        .withVlanMatchCondition(new VlanMatchCondition())
                                        .withIpCondition(new IpMatchCondition())
                                        .withEtherTypes(Arrays.asList("ogknygjofjdd", "qs", "deupewnwrei", "jzyflu"))
                                        .withFragments(Arrays.asList("hmofc"))
                                        .withIpLengths(Arrays.asList("my"))
                                        .withTtlValues(
                                            Arrays.asList("dtmlxhekuksjt", "ukcdmparcryuanzw", "xzdxtayrlhmwh"))
                                        .withDscpMarkings(Arrays.asList("rqobmtuk", "nryrtihf", "tijbpzvgnwzsymgl"))
                                        .withPortCondition(new AccessControlListPortCondition()
                                            .withLayer4Protocol(Layer4Protocol.UDP))))
                                .withActions(
                                    Arrays.asList(new AccessControlListAction().withType(AclActionType.COUNT)
                                        .withCounterName("hab"))),
                            new AccessControlListMatchConfiguration().withMatchConfigurationName("pikxwczbyscnpqxu")
                                .withSequenceNumber(3437469293095173263L)
                                .withIpAddressType(IpAddressType.IPV4)
                                .withMatchConditions(Arrays.asList(
                                    new AccessControlListMatchCondition().withProtocolTypes(Arrays.asList("mdvpjhulsu"))
                                        .withVlanMatchCondition(new VlanMatchCondition())
                                        .withIpCondition(new IpMatchCondition())
                                        .withEtherTypes(Arrays.asList("br"))
                                        .withFragments(Arrays.asList("dumjgrtfwvuk"))
                                        .withIpLengths(Arrays.asList("udccsnhsjc", "yejhk", "yhtnapczwlokjye"))
                                        .withTtlValues(Arrays.asList("vnipjox", "jnchgej", "podmailzydehojwy"))
                                        .withDscpMarkings(Arrays.asList("xinpmqnjaq", "ixjsprozvcputeg", "vwmf"))
                                        .withPortCondition(new AccessControlListPortCondition()
                                            .withLayer4Protocol(Layer4Protocol.TCP))))
                                .withActions(
                                    Arrays.asList(
                                        new AccessControlListAction().withType(AclActionType.COUNT)
                                            .withCounterName("rwfndiod"),
                                        new AccessControlListAction().withType(AclActionType.LOG).withCounterName("w"),
                                        new AccessControlListAction().withType(AclActionType.DROP)
                                            .withCounterName("vwryoqpso"))),
                            new AccessControlListMatchConfiguration().withMatchConfigurationName("ctazakljlahbcryf")
                                .withSequenceNumber(5965878792837381583L)
                                .withIpAddressType(IpAddressType.IPV4)
                                .withMatchConditions(
                                    Arrays
                                        .asList(
                                            new AccessControlListMatchCondition()
                                                .withProtocolTypes(
                                                    Arrays.asList("rxzxtheo", "usivye", "cciqihnhungbwjz"))
                                                .withVlanMatchCondition(new VlanMatchCondition())
                                                .withIpCondition(new IpMatchCondition())
                                                .withEtherTypes(
                                                    Arrays.asList("paojakhmsbzjh", "rzevdphlxaol", "hqtrgqjbpf"))
                                                .withFragments(Arrays.asList("inzgvfcj"))
                                                .withIpLengths(Arrays.asList("oxxjtfelluwf", "it"))
                                                .withTtlValues(Arrays.asList("eqfpj", "jlxofpdvhpfxxyp", "ninmayhuyb"))
                                                .withDscpMarkings(Arrays.asList("odepoogin", "vamih"))
                                                .withPortCondition(new AccessControlListPortCondition()
                                                    .withLayer4Protocol(Layer4Protocol.UDP)),
                                            new AccessControlListMatchCondition()
                                                .withProtocolTypes(Arrays.asList("xbnjbiksq", "gls", "ainqpjwnzlljfm"))
                                                .withVlanMatchCondition(new VlanMatchCondition())
                                                .withIpCondition(new IpMatchCondition())
                                                .withEtherTypes(Arrays.asList("xgispemvtzfkufu"))
                                                .withFragments(Arrays.asList("ofx", "eofjaeqjh"))
                                                .withIpLengths(Arrays.asList("asvm"))
                                                .withTtlValues(Arrays.asList("qulngsntnbybkzgc"))
                                                .withDscpMarkings(Arrays.asList("clxxwrljdo", "skcqvkocrcjd"))
                                                .withPortCondition(new AccessControlListPortCondition()
                                                    .withLayer4Protocol(Layer4Protocol.TCP)),
                                            new AccessControlListMatchCondition()
                                                .withProtocolTypes(Arrays.asList("hsgcbacphejkot", "nqgoulzndli"))
                                                .withVlanMatchCondition(new VlanMatchCondition())
                                                .withIpCondition(new IpMatchCondition())
                                                .withEtherTypes(Arrays
                                                    .asList("vmgxsab", "yqduujit", "jczdzevndh", "rwpdappdsbdkvwrw"))
                                                .withFragments(Arrays.asList("usnhutje", "tmrldhugjzzdatq"))
                                                .withIpLengths(Arrays.asList("cdgea"))
                                                .withTtlValues(Arrays.asList("phut", "cndvkaozwyiftyhx", "urokft"))
                                                .withDscpMarkings(Arrays.asList("lniwpwcukjfkgiaw", "klryplwck", "asy"))
                                                .withPortCondition(new AccessControlListPortCondition()
                                                    .withLayer4Protocol(Layer4Protocol.UDP)),
                                            new AccessControlListMatchCondition()
                                                .withProtocolTypes(Arrays.asList("ddgmb"))
                                                .withVlanMatchCondition(new VlanMatchCondition())
                                                .withIpCondition(new IpMatchCondition())
                                                .withEtherTypes(Arrays.asList("gfgibm"))
                                                .withFragments(Arrays.asList("akeqs", "xybz"))
                                                .withIpLengths(Arrays.asList("dqytbciqfouflmm"))
                                                .withTtlValues(Arrays.asList("smodmgloug"))
                                                .withDscpMarkings(
                                                    Arrays.asList("wtmutduq", "ta", "spwgcuertumkdosv", "whbmd"))
                                                .withPortCondition(new AccessControlListPortCondition()
                                                    .withLayer4Protocol(Layer4Protocol.TCP))))
                                .withActions(Arrays.asList(
                                    new AccessControlListAction().withType(AclActionType.COUNT).withCounterName("tq"),
                                    new AccessControlListAction().withType(AclActionType.COUNT)
                                        .withCounterName("fpfpsalgbquxigj"),
                                    new AccessControlListAction().withType(AclActionType.LOG)
                                        .withCounterName("jaoyfhrtx")))))
                .withDynamicMatchConfigurations(Arrays.asList(new CommonDynamicMatchConfiguration()
                    .withIpGroups(Arrays.asList(
                        new IpGroupProperties().withName("ujysvle")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("awrlyx", "jkcpr", "nwbxgjvtbvpyssz")),
                        new IpGroupProperties().withName("rujqg")
                            .withIpAddressType(IpAddressType.IPV4)
                            .withIpPrefixes(Arrays.asList("uqfprwzw", "nguitnwuizgazxu"))))
                    .withVlanGroups(Arrays.asList(
                        new VlanGroupProperties().withName("ckyfih").withVlans(Arrays.asList("dfvzwdzuhty")),
                        new VlanGroupProperties().withName("isdkfthwxmnteiw")
                            .withVlans(Arrays.asList("vkmijcmmxdcuf", "fsrpymzidnse", "cxtbzsg", "yc"))))
                    .withPortGroups(Arrays.asList(
                        new PortGroupProperties().withName("wmdwzjeiachboo")
                            .withPorts(Arrays.asList("nrosfqpte", "hzzvypyq")),
                        new PortGroupProperties()
                            .withName("mzinpvswjdk")
                            .withPorts(Arrays.asList("oodqxhcrm", "ohjtckw", "dsoifiyipj", "sqwpgrjb")),
                        new PortGroupProperties().withName("orcjxvsnby")
                            .withPorts(Arrays.asList("bnmo", "pcyshu", "zafb")),
                        new PortGroupProperties().withName("j")
                            .withPorts(Arrays.asList("toqcjmklja", "bqidtqaj", "yulpkudjkr", "khbzhfepgzg"))))))
                .withAnnotation("xzlocxscp");
        model = BinaryData.fromObject(model).toObject(AccessControlListInner.class);
        Assertions.assertEquals("erhhbcsglumm", model.location());
        Assertions.assertEquals("j", model.tags().get("odxobnbdxkqpxok"));
        Assertions.assertEquals(ConfigurationType.INLINE, model.configurationType());
        Assertions.assertEquals("bczmeh", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("sphrupidgs", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(5720978843418888179L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("qucmpo",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("cmsxaobhdxbm",
            model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("oqjzehtbmufpowno",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("wlrxyb",
            model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("bpazlobcufpdzn",
            model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("sqe",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(Layer4Protocol.TCP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(AclActionType.COUNT, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("hab", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("ujysvle", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV6,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("awrlyx",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("ckyfih", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("dfvzwdzuhty",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("wmdwzjeiachboo", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("nrosfqpte",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
        Assertions.assertEquals("xzlocxscp", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
