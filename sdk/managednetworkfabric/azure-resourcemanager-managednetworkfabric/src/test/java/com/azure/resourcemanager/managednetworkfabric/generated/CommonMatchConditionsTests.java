// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.CommonMatchConditions;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CommonMatchConditionsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommonMatchConditions model =
            BinaryData
                .fromString(
                    "{\"protocolTypes\":[\"kvntjlrigjkskyri\"],\"vlanMatchCondition\":{\"vlans\":[\"idsxwaabzmifry\"],\"innerVlans\":[\"mmaxrizkzobgo\",\"xlhslnel\",\"ieixynllxe\"],\"vlanGroupNames\":[\"rojphslhcawjutif\",\"wfmvigorqjbt\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"afhonqj\",\"jeick\"],\"ipGroupNames\":[\"cpopmxel\",\"wcltyjede\"]}}")
                .toObject(CommonMatchConditions.class);
        Assertions.assertEquals("kvntjlrigjkskyri", model.protocolTypes().get(0));
        Assertions.assertEquals("idsxwaabzmifry", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("mmaxrizkzobgo", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("rojphslhcawjutif", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("afhonqj", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("cpopmxel", model.ipCondition().ipGroupNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommonMatchConditions model =
            new CommonMatchConditions()
                .withProtocolTypes(Arrays.asList("kvntjlrigjkskyri"))
                .withVlanMatchCondition(
                    new VlanMatchCondition()
                        .withVlans(Arrays.asList("idsxwaabzmifry"))
                        .withInnerVlans(Arrays.asList("mmaxrizkzobgo", "xlhslnel", "ieixynllxe"))
                        .withVlanGroupNames(Arrays.asList("rojphslhcawjutif", "wfmvigorqjbt")))
                .withIpCondition(
                    new IpMatchCondition()
                        .withType(SourceDestinationType.SOURCE_IP)
                        .withPrefixType(PrefixType.PREFIX)
                        .withIpPrefixValues(Arrays.asList("afhonqj", "jeick"))
                        .withIpGroupNames(Arrays.asList("cpopmxel", "wcltyjede")));
        model = BinaryData.fromObject(model).toObject(CommonMatchConditions.class);
        Assertions.assertEquals("kvntjlrigjkskyri", model.protocolTypes().get(0));
        Assertions.assertEquals("idsxwaabzmifry", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("mmaxrizkzobgo", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("rojphslhcawjutif", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("afhonqj", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("cpopmxel", model.ipCondition().ipGroupNames().get(0));
    }
}
