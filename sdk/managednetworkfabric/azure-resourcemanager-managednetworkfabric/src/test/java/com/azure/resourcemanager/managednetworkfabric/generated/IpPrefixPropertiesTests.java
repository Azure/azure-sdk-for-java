// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpPrefixProperties;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpPrefixPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpPrefixProperties model = BinaryData.fromString(
            "{\"configurationState\":\"Deprovisioned\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"RMA\",\"ipPrefixRules\":[{\"action\":\"Deny\",\"sequenceNumber\":5435314181058093460,\"networkPrefix\":\"gyipem\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"v\"},{\"action\":\"Deny\",\"sequenceNumber\":5139152311796566006,\"networkPrefix\":\"ejdtxptl\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"homewjjstliu\"},{\"action\":\"Deny\",\"sequenceNumber\":3810638848978413172,\"networkPrefix\":\"moaiancz\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"rrslblxydkx\"},{\"action\":\"Permit\",\"sequenceNumber\":7966232904898723422,\"networkPrefix\":\"bxiwkgfbqljn\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"chocokulehur\"}],\"annotation\":\"rqffaweyurk\"}")
            .toObject(IpPrefixProperties.class);
        Assertions.assertEquals("rqffaweyurk", model.annotation());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(5435314181058093460L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("gyipem", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.LESSER_THAN_OR_EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("v", model.ipPrefixRules().get(0).subnetMaskLength());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpPrefixProperties model = new IpPrefixProperties().withAnnotation("rqffaweyurk")
            .withIpPrefixRules(Arrays.asList(
                new IpPrefixRule().withAction(CommunityActionTypes.DENY)
                    .withSequenceNumber(5435314181058093460L)
                    .withNetworkPrefix("gyipem")
                    .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                    .withSubnetMaskLength("v"),
                new IpPrefixRule().withAction(CommunityActionTypes.DENY)
                    .withSequenceNumber(5139152311796566006L)
                    .withNetworkPrefix("ejdtxptl")
                    .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                    .withSubnetMaskLength("homewjjstliu"),
                new IpPrefixRule().withAction(CommunityActionTypes.DENY)
                    .withSequenceNumber(3810638848978413172L)
                    .withNetworkPrefix("moaiancz")
                    .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                    .withSubnetMaskLength("rrslblxydkx"),
                new IpPrefixRule().withAction(CommunityActionTypes.PERMIT)
                    .withSequenceNumber(7966232904898723422L)
                    .withNetworkPrefix("bxiwkgfbqljn")
                    .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                    .withSubnetMaskLength("chocokulehur")));
        model = BinaryData.fromObject(model).toObject(IpPrefixProperties.class);
        Assertions.assertEquals("rqffaweyurk", model.annotation());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(5435314181058093460L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("gyipem", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.LESSER_THAN_OR_EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("v", model.ipPrefixRules().get(0).subnetMaskLength());
    }
}
