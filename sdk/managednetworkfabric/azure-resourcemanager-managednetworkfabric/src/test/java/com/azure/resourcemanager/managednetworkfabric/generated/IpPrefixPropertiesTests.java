// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpPrefixProperties;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpPrefixPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpPrefixProperties model =
            BinaryData
                .fromString(
                    "{\"configurationState\":\"Failed\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Enabled\",\"ipPrefixRules\":[{\"action\":\"Deny\",\"sequenceNumber\":1091451108549371592,\"networkPrefix\":\"ipfohykfkx\",\"condition\":\"Range\",\"subnetMaskLength\":\"r\"}],\"annotation\":\"iutgnjizbeewoiy\"}")
                .toObject(IpPrefixProperties.class);
        Assertions.assertEquals("iutgnjizbeewoiy", model.annotation());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(1091451108549371592L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("ipfohykfkx", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.RANGE, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("r", model.ipPrefixRules().get(0).subnetMaskLength());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpPrefixProperties model =
            new IpPrefixProperties()
                .withAnnotation("iutgnjizbeewoiy")
                .withIpPrefixRules(
                    Arrays
                        .asList(
                            new IpPrefixRule()
                                .withAction(CommunityActionTypes.DENY)
                                .withSequenceNumber(1091451108549371592L)
                                .withNetworkPrefix("ipfohykfkx")
                                .withCondition(Condition.RANGE)
                                .withSubnetMaskLength("r")));
        model = BinaryData.fromObject(model).toObject(IpPrefixProperties.class);
        Assertions.assertEquals("iutgnjizbeewoiy", model.annotation());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(1091451108549371592L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("ipfohykfkx", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.RANGE, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("r", model.ipPrefixRules().get(0).subnetMaskLength());
    }
}
