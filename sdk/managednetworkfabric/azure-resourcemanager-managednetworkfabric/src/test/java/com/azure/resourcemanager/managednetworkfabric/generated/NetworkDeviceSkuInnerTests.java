// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkDeviceSkuInner;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.DeviceInterfaceProperties;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkDeviceRoleName;
import com.azure.resourcemanager.managednetworkfabric.models.SupportedConnectorProperties;
import com.azure.resourcemanager.managednetworkfabric.models.SupportedVersionProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkDeviceSkuInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkDeviceSkuInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"model\":\"bvcpxtzhi\",\"manufacturer\":\"qbtimpk\",\"supportedVersions\":[{\"version\":\"rnsihqhudsmus\",\"vendorOsVersion\":\"awja\",\"vendorFirmwareVersion\":\"wj\",\"isDefault\":\"False\"},{\"version\":\"mnn\",\"vendorOsVersion\":\"xyxvqban\",\"vendorFirmwareVersion\":\"jtgirnb\",\"isDefault\":\"True\"},{\"version\":\"ddorgmynltwmpft\",\"vendorOsVersion\":\"oeajogsy\",\"vendorFirmwareVersion\":\"etamfddrvlkpzwb\",\"isDefault\":\"False\"}],\"supportedRoleTypes\":[\"Management\"],\"interfaces\":[{\"identifier\":\"drmuhka\",\"interfaceType\":\"j\",\"supportedConnectorTypes\":[{\"connectorType\":\"ucvkhhwmjpjbw\",\"maxSpeedInMbps\":430534456}]}],\"provisioningState\":\"Deleting\"},\"id\":\"qrrihufoihp\",\"name\":\"iybxvgnzuzpb\",\"type\":\"kzcscpiuzvkun\"}")
                .toObject(NetworkDeviceSkuInner.class);
        Assertions.assertEquals("bvcpxtzhi", model.model());
        Assertions.assertEquals("qbtimpk", model.manufacturer());
        Assertions.assertEquals("rnsihqhudsmus", model.supportedVersions().get(0).version());
        Assertions.assertEquals("awja", model.supportedVersions().get(0).vendorOsVersion());
        Assertions.assertEquals("wj", model.supportedVersions().get(0).vendorFirmwareVersion());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.supportedVersions().get(0).isDefault());
        Assertions.assertEquals(NetworkDeviceRoleName.MANAGEMENT, model.supportedRoleTypes().get(0));
        Assertions.assertEquals("drmuhka", model.interfaces().get(0).identifier());
        Assertions.assertEquals("j", model.interfaces().get(0).interfaceType());
        Assertions
            .assertEquals("ucvkhhwmjpjbw", model.interfaces().get(0).supportedConnectorTypes().get(0).connectorType());
        Assertions.assertEquals(430534456, model.interfaces().get(0).supportedConnectorTypes().get(0).maxSpeedInMbps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkDeviceSkuInner model =
            new NetworkDeviceSkuInner()
                .withModel("bvcpxtzhi")
                .withManufacturer("qbtimpk")
                .withSupportedVersions(
                    Arrays
                        .asList(
                            new SupportedVersionProperties()
                                .withVersion("rnsihqhudsmus")
                                .withVendorOsVersion("awja")
                                .withVendorFirmwareVersion("wj")
                                .withIsDefault(BooleanEnumProperty.FALSE),
                            new SupportedVersionProperties()
                                .withVersion("mnn")
                                .withVendorOsVersion("xyxvqban")
                                .withVendorFirmwareVersion("jtgirnb")
                                .withIsDefault(BooleanEnumProperty.TRUE),
                            new SupportedVersionProperties()
                                .withVersion("ddorgmynltwmpft")
                                .withVendorOsVersion("oeajogsy")
                                .withVendorFirmwareVersion("etamfddrvlkpzwb")
                                .withIsDefault(BooleanEnumProperty.FALSE)))
                .withSupportedRoleTypes(Arrays.asList(NetworkDeviceRoleName.MANAGEMENT))
                .withInterfaces(
                    Arrays
                        .asList(
                            new DeviceInterfaceProperties()
                                .withIdentifier("drmuhka")
                                .withInterfaceType("j")
                                .withSupportedConnectorTypes(
                                    Arrays
                                        .asList(
                                            new SupportedConnectorProperties()
                                                .withConnectorType("ucvkhhwmjpjbw")
                                                .withMaxSpeedInMbps(430534456)))));
        model = BinaryData.fromObject(model).toObject(NetworkDeviceSkuInner.class);
        Assertions.assertEquals("bvcpxtzhi", model.model());
        Assertions.assertEquals("qbtimpk", model.manufacturer());
        Assertions.assertEquals("rnsihqhudsmus", model.supportedVersions().get(0).version());
        Assertions.assertEquals("awja", model.supportedVersions().get(0).vendorOsVersion());
        Assertions.assertEquals("wj", model.supportedVersions().get(0).vendorFirmwareVersion());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, model.supportedVersions().get(0).isDefault());
        Assertions.assertEquals(NetworkDeviceRoleName.MANAGEMENT, model.supportedRoleTypes().get(0));
        Assertions.assertEquals("drmuhka", model.interfaces().get(0).identifier());
        Assertions.assertEquals("j", model.interfaces().get(0).interfaceType());
        Assertions
            .assertEquals("ucvkhhwmjpjbw", model.interfaces().get(0).supportedConnectorTypes().get(0).connectorType());
        Assertions.assertEquals(430534456, model.interfaces().get(0).supportedConnectorTypes().get(0).maxSpeedInMbps());
    }
}
