// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.RouteTargetInformation;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPropertiesOptionAProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VpnConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VpnConfigurationProperties model = BinaryData.fromString(
            "{\"networkToNetworkInterconnectId\":\"lc\",\"administrativeState\":\"RMA\",\"peeringOption\":\"OptionB\",\"optionBProperties\":{\"importRouteTargets\":[\"tfx\",\"crqmipfjwfoygi\",\"mshxxba\",\"zabulnvgsk\"],\"exportRouteTargets\":[\"xjdzjs\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"hxqqmqip\",\"y\",\"hfnzocx\",\"tfshksnyzm\"],\"importIpv6RouteTargets\":[\"mwbwmbnlslce\",\"iqdktwtkvih\",\"pfliwo\",\"nguuzhwvla\"],\"exportIpv4RouteTargets\":[\"mhjhaus\",\"b\",\"ekymffztsilscvqs\",\"eiihfymko\"],\"exportIpv6RouteTargets\":[\"yese\"]}},\"optionAProperties\":{\"primaryIpv4Prefix\":\"cigzhogsmgbv\",\"primaryIpv6Prefix\":\"dwrqbeb\",\"secondaryIpv4Prefix\":\"fveglabtvkb\",\"secondaryIpv6Prefix\":\"znhtf\",\"mtu\":458206255,\"vlanId\":728176337,\"peerASN\":2002416946820305929,\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":2147211144,\"multiplier\":674933767}}}")
            .toObject(VpnConfigurationProperties.class);
        Assertions.assertEquals("lc", model.networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONB, model.peeringOption());
        Assertions.assertEquals("tfx", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("xjdzjs", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("hxqqmqip", model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("mwbwmbnlslce",
            model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("mhjhaus", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("yese", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(458206255, model.optionAProperties().mtu());
        Assertions.assertEquals(728176337, model.optionAProperties().vlanId());
        Assertions.assertEquals(2002416946820305929L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(2147211144, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(674933767, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("cigzhogsmgbv", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("dwrqbeb", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("fveglabtvkb", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("znhtf", model.optionAProperties().secondaryIpv6Prefix());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VpnConfigurationProperties model = new VpnConfigurationProperties().withNetworkToNetworkInterconnectId("lc")
            .withPeeringOption(PeeringOption.OPTIONB)
            .withOptionBProperties(new OptionBProperties()
                .withImportRouteTargets(Arrays.asList("tfx", "crqmipfjwfoygi", "mshxxba", "zabulnvgsk"))
                .withExportRouteTargets(Arrays.asList("xjdzjs"))
                .withRouteTargets(new RouteTargetInformation()
                    .withImportIpv4RouteTargets(Arrays.asList("hxqqmqip", "y", "hfnzocx", "tfshksnyzm"))
                    .withImportIpv6RouteTargets(Arrays.asList("mwbwmbnlslce", "iqdktwtkvih", "pfliwo", "nguuzhwvla"))
                    .withExportIpv4RouteTargets(Arrays.asList("mhjhaus", "b", "ekymffztsilscvqs", "eiihfymko"))
                    .withExportIpv6RouteTargets(Arrays.asList("yese"))))
            .withOptionAProperties(new VpnConfigurationPropertiesOptionAProperties().withMtu(458206255)
                .withVlanId(728176337)
                .withPeerAsn(2002416946820305929L)
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(2147211144).withMultiplier(674933767))
                .withPrimaryIpv4Prefix("cigzhogsmgbv")
                .withPrimaryIpv6Prefix("dwrqbeb")
                .withSecondaryIpv4Prefix("fveglabtvkb")
                .withSecondaryIpv6Prefix("znhtf"));
        model = BinaryData.fromObject(model).toObject(VpnConfigurationProperties.class);
        Assertions.assertEquals("lc", model.networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONB, model.peeringOption());
        Assertions.assertEquals("tfx", model.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("xjdzjs", model.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("hxqqmqip", model.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("mwbwmbnlslce",
            model.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("mhjhaus", model.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("yese", model.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(458206255, model.optionAProperties().mtu());
        Assertions.assertEquals(728176337, model.optionAProperties().vlanId());
        Assertions.assertEquals(2002416946820305929L, model.optionAProperties().peerAsn());
        Assertions.assertEquals(2147211144, model.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(674933767, model.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("cigzhogsmgbv", model.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("dwrqbeb", model.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("fveglabtvkb", model.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("znhtf", model.optionAProperties().secondaryIpv6Prefix());
    }
}
