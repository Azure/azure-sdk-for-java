// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleAction;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRulePatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.TapRuleActionType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapRulePatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapRulePatchableProperties model = BinaryData.fromString(
            "{\"configurationType\":\"Inline\",\"tapRulesUrl\":\"pvd\",\"matchConfigurations\":[{\"matchConfigurationName\":\"eerscdxrnrnjrcu\",\"sequenceNumber\":6706008368624061443,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"psa\",\"mameub\",\"qiqmlfvhlq\",\"skkqjmxptuei\"],\"portGroupNames\":[\"gkwdr\"]},\"protocolTypes\":[\"pahu\",\"onjkkxukguehvvp\",\"joegcjojlleuidp\",\"tonvhgnhtmeplhb\"],\"vlanMatchCondition\":{\"vlans\":[\"pmummmkva\",\"uc\"],\"innerVlans\":[\"ua\",\"qpmnu\"],\"vlanGroupNames\":[\"rchxwwuzdmhvwl\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"it\",\"dsjipdviscotyxb\",\"iifef\"],\"ipGroupNames\":[\"lvrqo\"]}}],\"actions\":[{\"type\":\"Log\",\"truncate\":\"eailwdqmqf\",\"isTimestampEnabled\":\"True\",\"destinationId\":\"tmfx\",\"matchConfigurationName\":\"d\"},{\"type\":\"Goto\",\"truncate\":\"namkuuyiuyu\",\"isTimestampEnabled\":\"True\",\"destinationId\":\"lxicwgpthdcf\",\"matchConfigurationName\":\"z\"},{\"type\":\"Drop\",\"truncate\":\"fodropalvngtwyu\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"qrntaumdrc\",\"matchConfigurationName\":\"vkrkegtyczup\"}]},{\"matchConfigurationName\":\"yxlz\",\"sequenceNumber\":7662588380490129928,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"s\",\"xduetbapfc\",\"ewxtrl\"],\"portGroupNames\":[\"xyazkjpirgzx\",\"bcz\"]},\"protocolTypes\":[\"egbthm\",\"ritjbu\"],\"vlanMatchCondition\":{\"vlans\":[\"unozfvualjthoiv\",\"dwsngkr\",\"ihscjvakmhzbhw\"],\"innerVlans\":[\"bwihbnnxemvynu\",\"qkotauratn\"],\"vlanGroupNames\":[\"pfzsclefyrl\",\"tndqlmf\",\"ggnbbuypwovvvsfl\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"rehjuqwvapx\",\"lzhpzihacenq\",\"zlxnqzubf\"],\"ipGroupNames\":[\"dbgmkfwmjcwte\",\"fhxwyr\",\"b\"]}},{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"pcha\"],\"portGroupNames\":[\"eplrajubowuywevt\"]},\"protocolTypes\":[\"eikmwlaoklfni\",\"yxgucbmtredsc\",\"nstjcyyuvtz\",\"xzhclec\"],\"vlanMatchCondition\":{\"vlans\":[\"qzcl\",\"yh\",\"u\",\"gi\"],\"innerVlans\":[\"gyresgzsd\",\"mwb\",\"orj\"],\"vlanGroupNames\":[\"chy\",\"hakvyrfbqvum\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"pmaxfnzlpqmpf\",\"xef\",\"ulbl\",\"rtux\"],\"ipGroupNames\":[\"hfcaeo\",\"ifq\",\"ywjflobh\",\"hqmomfeco\"]}},{\"encapsulationType\":\"None\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"xldjmzezbj\"],\"portGroupNames\":[\"lslu\",\"bqfy\"]},\"protocolTypes\":[\"y\"],\"vlanMatchCondition\":{\"vlans\":[\"uqs\"],\"innerVlans\":[\"qyvoupr\",\"y\",\"qzssl\",\"mgw\"],\"vlanGroupNames\":[\"vrxpfdu\",\"olhg\",\"qvpbfjpoqzucfzl\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"bormvhvzielbp\",\"nqujywz\",\"qyggmnwsvhb\"],\"ipGroupNames\":[\"iwyejtobdr\"]}}],\"actions\":[{\"type\":\"Count\",\"truncate\":\"kunsbfjhhlwtpkv\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"tt\",\"matchConfigurationName\":\"kgtzqnwqsttewu\"}]},{\"matchConfigurationName\":\"ysjeufjx\",\"sequenceNumber\":1275946665450936475,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"encapsulationType\":\"None\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"vrhprrvbwonleqf\",\"vtlrvbstph\",\"ykunin\",\"tlnrj\"],\"portGroupNames\":[\"dbuziciqppoqvg\",\"newuhwfw\"]},\"protocolTypes\":[\"xuoxtfnres\"],\"vlanMatchCondition\":{\"vlans\":[\"gckncjmg\"],\"innerVlans\":[\"vbt\"],\"vlanGroupNames\":[\"fmjymjnh\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"upubdxckdlhz\",\"hcu\",\"vbosjj\",\"dizhrjqfyaytvsly\"],\"ipGroupNames\":[\"gniuar\",\"cjiwgsxfaio\",\"wd\"]}},{\"encapsulationType\":\"None\",\"portCondition\":{\"portType\":\"DestinationPort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"zxbarcbpae\",\"zqsym\",\"w\"],\"portGroupNames\":[\"cytesmf\",\"crtfodqhuauzm\",\"iv\",\"trfzhhezvh\"]},\"protocolTypes\":[\"xdyyrud\",\"ahswtvdkxb\",\"ssgfenffdxbvwfqj\"],\"vlanMatchCondition\":{\"vlans\":[\"d\",\"ija\",\"xndmuvar\"],\"innerVlans\":[\"zj\",\"tp\",\"rmuhcuhtuzlx\"],\"vlanGroupNames\":[\"o\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"wrapczdojqy\",\"zesi\",\"iysnjqyowaadc\"],\"ipGroupNames\":[\"za\"]}},{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"aupwhlzyckrem\",\"jlm\"],\"portGroupNames\":[\"orsirx\",\"hyrkqakofajfr\",\"prfvmkinwteyrqsh\"]},\"protocolTypes\":[\"cejo\",\"ylblfsprr\",\"cspimtcvvfxrdy\"],\"vlanMatchCondition\":{\"vlans\":[\"lxiz\",\"qikm\",\"obliqemcdiiisk\",\"bonxxupj\"],\"innerVlans\":[\"rk\",\"kgenjqnnpjwkosn\",\"xigfoujjc\",\"gdqmrlhnzkwop\"],\"vlanGroupNames\":[\"yinxu\",\"rrxyxwjezbfqpl\",\"yuekdcpvuftrsvjm\",\"svujnjktvolefcj\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"otfbjampqoclann\"],\"ipGroupNames\":[\"nlsuqbwzstr\",\"tgvpatr\",\"jjktfin\",\"hoksmmculwk\"]}},{\"encapsulationType\":\"None\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"jflsgaojb\",\"qpqsdoctpzpuj\"],\"portGroupNames\":[\"mcdsgxcelujisw\",\"lu\"]},\"protocolTypes\":[\"hfwlfxzfwugeup\",\"knecexkgrv\",\"psjdmng\",\"yt\"],\"vlanMatchCondition\":{\"vlans\":[\"fyxcnwawoxcgzbej\",\"fbifopfjxdwdrp\",\"zqjkrf\",\"bwotfcuuugtji\"],\"innerVlans\":[\"ayiawohfm\",\"nnzm\",\"cjjkmqenh\",\"idzr\"],\"vlanGroupNames\":[\"gloiovsl\",\"ivqsuvwtenb\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"yoaq\",\"ukuicjuftekioo\",\"nd\"],\"ipGroupNames\":[\"fhvpxjhxzubfj\",\"abbwzgvzu\",\"ixcdckixs\"]}}],\"actions\":[{\"type\":\"Mirror\",\"truncate\":\"vkmvyxzerejrkp\",\"isTimestampEnabled\":\"True\",\"destinationId\":\"etjx\",\"matchConfigurationName\":\"opt\"},{\"type\":\"Log\",\"truncate\":\"whlbecgihzbpem\",\"isTimestampEnabled\":\"True\",\"destinationId\":\"bovr\",\"matchConfigurationName\":\"xywpjhspboxhif\"},{\"type\":\"Log\",\"truncate\":\"peswyhhmifjuajx\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"mmp\",\"matchConfigurationName\":\"lyuqvcmlaexb\"},{\"type\":\"Drop\",\"truncate\":\"fpnezsjzayml\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"hyogzmsimeht\",\"matchConfigurationName\":\"uwdhtq\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"m\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"gi\",\"nomwnwnghojovke\",\"ymicjixx\",\"sfpcrtnuguefxxij\"]}],\"vlanGroups\":[{\"name\":\"veywetkrhlolmcn\",\"vlans\":[\"fgsvbbvaqdljnpet\",\"rnrdetawevx\",\"huekdxljzvdovb\",\"blerlpr\"]},{\"name\":\"qccddcbny\",\"vlans\":[\"c\",\"xwbpwyykdig\"]},{\"name\":\"lrzndas\",\"vlans\":[\"dmjqmvy\"]}],\"portGroups\":[{\"name\":\"qlarhqt\",\"ports\":[\"azekdzdzffzjwzts\"]},{\"name\":\"chggryelg\",\"ports\":[\"tig\"]},{\"name\":\"frrkdknczgorywnv\",\"ports\":[\"vmd\"]},{\"name\":\"dlhqvbkarbpyhssr\",\"ports\":[\"pkpkocm\",\"ccebxxopyicyvspe\",\"lhwyykgvrccpumd\"]}]}]}")
            .toObject(NetworkTapRulePatchableProperties.class);
        Assertions.assertEquals(ConfigurationType.INLINE, model.configurationType());
        Assertions.assertEquals("pvd", model.tapRulesUrl());
        Assertions.assertEquals("eerscdxrnrnjrcu", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(6706008368624061443L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("pahu",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("pmummmkva",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("ua",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("rchxwwuzdmhvwl",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("it",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("lvrqo",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(PortType.DESTINATION_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("psa",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("gkwdr",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals(TapRuleActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("eailwdqmqf", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.TRUE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("tmfx", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("d", model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("m", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("gi", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("veywetkrhlolmcn",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("fgsvbbvaqdljnpet",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("qlarhqt", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("azekdzdzffzjwzts",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapRulePatchableProperties model
            = new NetworkTapRulePatchableProperties().withConfigurationType(ConfigurationType.INLINE)
                .withTapRulesUrl("pvd")
                .withMatchConfigurations(Arrays.asList(
                    new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("eerscdxrnrnjrcu")
                        .withSequenceNumber(6706008368624061443L)
                        .withIpAddressType(IpAddressType.IPV6)
                        .withMatchConditions(Arrays.asList(new NetworkTapRuleMatchCondition()
                            .withProtocolTypes(
                                Arrays.asList("pahu", "onjkkxukguehvvp", "joegcjojlleuidp", "tonvhgnhtmeplhb"))
                            .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("pmummmkva", "uc"))
                                .withInnerVlans(Arrays.asList("ua", "qpmnu"))
                                .withVlanGroupNames(Arrays.asList("rchxwwuzdmhvwl")))
                            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                .withPrefixType(PrefixType.LONGEST_PREFIX)
                                .withIpPrefixValues(Arrays.asList("it", "dsjipdviscotyxb", "iifef"))
                                .withIpGroupNames(Arrays.asList("lvrqo")))
                            .withEncapsulationType(EncapsulationType.GTPV1)
                            .withPortCondition(new PortCondition().withPortType(PortType.DESTINATION_PORT)
                                .withLayer4Protocol(Layer4Protocol.UDP)
                                .withPorts(Arrays.asList("psa", "mameub", "qiqmlfvhlq", "skkqjmxptuei"))
                                .withPortGroupNames(Arrays.asList("gkwdr")))))
                        .withActions(Arrays.asList(
                            new NetworkTapRuleAction().withType(TapRuleActionType.LOG)
                                .withTruncate("eailwdqmqf")
                                .withIsTimestampEnabled(BooleanEnumProperty.TRUE)
                                .withDestinationId("tmfx")
                                .withMatchConfigurationName("d"),
                            new NetworkTapRuleAction().withType(TapRuleActionType.GOTO)
                                .withTruncate("namkuuyiuyu")
                                .withIsTimestampEnabled(BooleanEnumProperty.TRUE)
                                .withDestinationId("lxicwgpthdcf")
                                .withMatchConfigurationName("z"),
                            new NetworkTapRuleAction().withType(TapRuleActionType.DROP)
                                .withTruncate("fodropalvngtwyu")
                                .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                                .withDestinationId("qrntaumdrc")
                                .withMatchConfigurationName("vkrkegtyczup"))),
                    new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("yxlz")
                        .withSequenceNumber(7662588380490129928L)
                        .withIpAddressType(IpAddressType.IPV4)
                        .withMatchConditions(Arrays.asList(
                            new NetworkTapRuleMatchCondition().withProtocolTypes(Arrays.asList("egbthm", "ritjbu"))
                                .withVlanMatchCondition(new VlanMatchCondition()
                                    .withVlans(Arrays.asList("unozfvualjthoiv", "dwsngkr", "ihscjvakmhzbhw"))
                                    .withInnerVlans(Arrays.asList("bwihbnnxemvynu", "qkotauratn"))
                                    .withVlanGroupNames(Arrays.asList("pfzsclefyrl", "tndqlmf", "ggnbbuypwovvvsfl")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                    .withPrefixType(PrefixType.LONGEST_PREFIX)
                                    .withIpPrefixValues(Arrays.asList("rehjuqwvapx", "lzhpzihacenq", "zlxnqzubf"))
                                    .withIpGroupNames(Arrays.asList("dbgmkfwmjcwte", "fhxwyr", "b")))
                                .withEncapsulationType(EncapsulationType.GTPV1)
                                .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                                    .withLayer4Protocol(Layer4Protocol.UDP)
                                    .withPorts(Arrays.asList("s", "xduetbapfc", "ewxtrl"))
                                    .withPortGroupNames(Arrays.asList("xyazkjpirgzx", "bcz"))),
                            new NetworkTapRuleMatchCondition()
                                .withProtocolTypes(
                                    Arrays.asList("eikmwlaoklfni", "yxgucbmtredsc", "nstjcyyuvtz", "xzhclec"))
                                .withVlanMatchCondition(
                                    new VlanMatchCondition().withVlans(Arrays.asList("qzcl", "yh", "u", "gi"))
                                        .withInnerVlans(Arrays.asList("gyresgzsd", "mwb", "orj"))
                                        .withVlanGroupNames(Arrays.asList("chy", "hakvyrfbqvum")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                    .withPrefixType(PrefixType.LONGEST_PREFIX)
                                    .withIpPrefixValues(Arrays.asList("pmaxfnzlpqmpf", "xef", "ulbl", "rtux"))
                                    .withIpGroupNames(Arrays.asList("hfcaeo", "ifq", "ywjflobh", "hqmomfeco")))
                                .withEncapsulationType(EncapsulationType.GTPV1)
                                .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                                    .withLayer4Protocol(Layer4Protocol.UDP)
                                    .withPorts(Arrays.asList("pcha"))
                                    .withPortGroupNames(Arrays.asList("eplrajubowuywevt"))),
                            new NetworkTapRuleMatchCondition().withProtocolTypes(Arrays.asList("y"))
                                .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("uqs"))
                                    .withInnerVlans(Arrays.asList("qyvoupr", "y", "qzssl", "mgw"))
                                    .withVlanGroupNames(Arrays.asList("vrxpfdu", "olhg", "qvpbfjpoqzucfzl")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                    .withPrefixType(PrefixType.PREFIX)
                                    .withIpPrefixValues(Arrays.asList("bormvhvzielbp", "nqujywz", "qyggmnwsvhb"))
                                    .withIpGroupNames(Arrays.asList("iwyejtobdr")))
                                .withEncapsulationType(EncapsulationType.NONE)
                                .withPortCondition(new PortCondition().withPortType(PortType.DESTINATION_PORT)
                                    .withLayer4Protocol(Layer4Protocol.UDP)
                                    .withPorts(Arrays.asList("xldjmzezbj"))
                                    .withPortGroupNames(Arrays.asList("lslu", "bqfy")))))
                        .withActions(Arrays
                            .asList(new NetworkTapRuleAction().withType(TapRuleActionType.COUNT)
                                .withTruncate("kunsbfjhhlwtpkv")
                                .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                                .withDestinationId("tt")
                                .withMatchConfigurationName("kgtzqnwqsttewu"))),
                    new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("ysjeufjx")
                        .withSequenceNumber(1275946665450936475L)
                        .withIpAddressType(IpAddressType.IPV4)
                        .withMatchConditions(Arrays.asList(
                            new NetworkTapRuleMatchCondition().withProtocolTypes(Arrays.asList("xuoxtfnres"))
                                .withVlanMatchCondition(new VlanMatchCondition().withVlans(Arrays.asList("gckncjmg"))
                                    .withInnerVlans(Arrays.asList("vbt"))
                                    .withVlanGroupNames(Arrays.asList("fmjymjnh")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                    .withPrefixType(PrefixType.PREFIX)
                                    .withIpPrefixValues(
                                        Arrays.asList("upubdxckdlhz", "hcu", "vbosjj", "dizhrjqfyaytvsly"))
                                    .withIpGroupNames(Arrays.asList("gniuar", "cjiwgsxfaio", "wd")))
                                .withEncapsulationType(EncapsulationType.NONE)
                                .withPortCondition(new PortCondition()
                                    .withPortType(PortType.DESTINATION_PORT)
                                    .withLayer4Protocol(Layer4Protocol.UDP)
                                    .withPorts(Arrays.asList("vrhprrvbwonleqf", "vtlrvbstph", "ykunin", "tlnrj"))
                                    .withPortGroupNames(Arrays.asList("dbuziciqppoqvg", "newuhwfw"))),
                            new NetworkTapRuleMatchCondition()
                                .withProtocolTypes(Arrays.asList("xdyyrud", "ahswtvdkxb", "ssgfenffdxbvwfqj"))
                                .withVlanMatchCondition(
                                    new VlanMatchCondition().withVlans(Arrays.asList("d", "ija", "xndmuvar"))
                                        .withInnerVlans(Arrays.asList("zj", "tp", "rmuhcuhtuzlx"))
                                        .withVlanGroupNames(Arrays.asList("o")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.DESTINATION_IP)
                                    .withPrefixType(PrefixType.PREFIX)
                                    .withIpPrefixValues(Arrays.asList("wrapczdojqy", "zesi", "iysnjqyowaadc"))
                                    .withIpGroupNames(Arrays.asList("za")))
                                .withEncapsulationType(EncapsulationType.NONE)
                                .withPortCondition(new PortCondition()
                                    .withPortType(PortType.DESTINATION_PORT)
                                    .withLayer4Protocol(Layer4Protocol.TCP)
                                    .withPorts(Arrays.asList("zxbarcbpae", "zqsym", "w"))
                                    .withPortGroupNames(Arrays.asList("cytesmf", "crtfodqhuauzm", "iv", "trfzhhezvh"))),
                            new NetworkTapRuleMatchCondition()
                                .withProtocolTypes(Arrays.asList("cejo", "ylblfsprr", "cspimtcvvfxrdy"))
                                .withVlanMatchCondition(new VlanMatchCondition()
                                    .withVlans(Arrays.asList("lxiz", "qikm", "obliqemcdiiisk", "bonxxupj"))
                                    .withInnerVlans(
                                        Arrays.asList("rk", "kgenjqnnpjwkosn", "xigfoujjc", "gdqmrlhnzkwop"))
                                    .withVlanGroupNames(Arrays.asList("yinxu", "rrxyxwjezbfqpl", "yuekdcpvuftrsvjm",
                                        "svujnjktvolefcj")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                    .withPrefixType(PrefixType.PREFIX)
                                    .withIpPrefixValues(Arrays.asList("otfbjampqoclann"))
                                    .withIpGroupNames(
                                        Arrays.asList("nlsuqbwzstr", "tgvpatr", "jjktfin", "hoksmmculwk")))
                                .withEncapsulationType(EncapsulationType.GTPV1)
                                .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                                    .withLayer4Protocol(Layer4Protocol.UDP)
                                    .withPorts(Arrays.asList("aupwhlzyckrem", "jlm"))
                                    .withPortGroupNames(Arrays.asList("orsirx", "hyrkqakofajfr", "prfvmkinwteyrqsh"))),
                            new NetworkTapRuleMatchCondition()
                                .withProtocolTypes(Arrays.asList("hfwlfxzfwugeup", "knecexkgrv", "psjdmng", "yt"))
                                .withVlanMatchCondition(new VlanMatchCondition()
                                    .withVlans(
                                        Arrays.asList("fyxcnwawoxcgzbej", "fbifopfjxdwdrp", "zqjkrf", "bwotfcuuugtji"))
                                    .withInnerVlans(Arrays.asList("ayiawohfm", "nnzm", "cjjkmqenh", "idzr"))
                                    .withVlanGroupNames(Arrays.asList("gloiovsl", "ivqsuvwtenb")))
                                .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                                    .withPrefixType(PrefixType.LONGEST_PREFIX)
                                    .withIpPrefixValues(Arrays.asList("yoaq", "ukuicjuftekioo", "nd"))
                                    .withIpGroupNames(Arrays.asList("fhvpxjhxzubfj", "abbwzgvzu", "ixcdckixs")))
                                .withEncapsulationType(EncapsulationType.NONE)
                                .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                                    .withLayer4Protocol(Layer4Protocol.TCP)
                                    .withPorts(Arrays.asList("jflsgaojb", "qpqsdoctpzpuj"))
                                    .withPortGroupNames(Arrays.asList("mcdsgxcelujisw", "lu")))))
                        .withActions(Arrays.asList(new NetworkTapRuleAction().withType(TapRuleActionType.MIRROR)
                            .withTruncate("vkmvyxzerejrkp")
                            .withIsTimestampEnabled(BooleanEnumProperty.TRUE)
                            .withDestinationId("etjx")
                            .withMatchConfigurationName("opt"),
                            new NetworkTapRuleAction().withType(TapRuleActionType.LOG)
                                .withTruncate("whlbecgihzbpem")
                                .withIsTimestampEnabled(BooleanEnumProperty.TRUE)
                                .withDestinationId("bovr")
                                .withMatchConfigurationName("xywpjhspboxhif"),
                            new NetworkTapRuleAction().withType(TapRuleActionType.LOG)
                                .withTruncate("peswyhhmifjuajx")
                                .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                                .withDestinationId("mmp")
                                .withMatchConfigurationName("lyuqvcmlaexb"),
                            new NetworkTapRuleAction().withType(TapRuleActionType.DROP)
                                .withTruncate("fpnezsjzayml")
                                .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                                .withDestinationId("hyogzmsimeht")
                                .withMatchConfigurationName("uwdhtq")))))
                .withDynamicMatchConfigurations(
                    Arrays
                        .asList(
                            new CommonDynamicMatchConfiguration()
                                .withIpGroups(
                                    Arrays
                                        .asList(new IpGroupProperties().withName("m")
                                            .withIpAddressType(IpAddressType.IPV4)
                                            .withIpPrefixes(Arrays.asList("gi", "nomwnwnghojovke", "ymicjixx",
                                                "sfpcrtnuguefxxij"))))
                                .withVlanGroups(Arrays.asList(
                                    new VlanGroupProperties().withName("veywetkrhlolmcn")
                                        .withVlans(Arrays.asList("fgsvbbvaqdljnpet", "rnrdetawevx", "huekdxljzvdovb",
                                            "blerlpr")),
                                    new VlanGroupProperties().withName("qccddcbny")
                                        .withVlans(Arrays.asList("c", "xwbpwyykdig")),
                                    new VlanGroupProperties().withName("lrzndas").withVlans(Arrays.asList("dmjqmvy"))))
                                .withPortGroups(Arrays.asList(
                                    new PortGroupProperties().withName("qlarhqt")
                                        .withPorts(Arrays.asList("azekdzdzffzjwzts")),
                                    new PortGroupProperties().withName("chggryelg").withPorts(Arrays.asList("tig")),
                                    new PortGroupProperties().withName("frrkdknczgorywnv")
                                        .withPorts(Arrays.asList("vmd")),
                                    new PortGroupProperties().withName("dlhqvbkarbpyhssr")
                                        .withPorts(Arrays.asList("pkpkocm", "ccebxxopyicyvspe", "lhwyykgvrccpumd"))))));
        model = BinaryData.fromObject(model).toObject(NetworkTapRulePatchableProperties.class);
        Assertions.assertEquals(ConfigurationType.INLINE, model.configurationType());
        Assertions.assertEquals("pvd", model.tapRulesUrl());
        Assertions.assertEquals("eerscdxrnrnjrcu", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(6706008368624061443L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("pahu",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("pmummmkva",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("ua",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("rchxwwuzdmhvwl",
            model.matchConfigurations().get(0).matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.DESTINATION_IP,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX,
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("it",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("lvrqo",
            model.matchConfigurations().get(0).matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(PortType.DESTINATION_PORT,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("psa",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("gkwdr",
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals(TapRuleActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("eailwdqmqf", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.TRUE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("tmfx", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("d", model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("m", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("gi", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("veywetkrhlolmcn",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("fgsvbbvaqdljnpet",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("qlarhqt", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("azekdzdzffzjwzts",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }
}
