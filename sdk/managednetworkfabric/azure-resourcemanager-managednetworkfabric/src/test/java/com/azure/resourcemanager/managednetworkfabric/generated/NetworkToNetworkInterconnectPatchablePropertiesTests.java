// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkToNetworkInterconnectPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.Layer2Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NpbStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.OptionBLayer3Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkToNetworkInterconnectPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkToNetworkInterconnectPatchableProperties model = BinaryData.fromString(
            "{\"layer2Configuration\":{\"mtu\":531102382,\"interfaces\":[\"injmuymve\"]},\"optionBLayer3Configuration\":{\"peerASN\":1336534665211813170,\"vlanId\":292634348,\"fabricASN\":1543166083084223809,\"primaryIpv4Prefix\":\"aictdscnkzzohn\",\"primaryIpv6Prefix\":\"d\",\"secondaryIpv4Prefix\":\"zeqozre\",\"secondaryIpv6Prefix\":\"bzq\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"RMA\",\"intervalInMilliSeconds\":1141758238,\"multiplier\":407529894},\"ipv4Routes\":[{\"prefix\":\"exozonynp\",\"nextHop\":[\"eudpab\"]}],\"ipv6Routes\":[{\"prefix\":\"uwzosgyjxvcvaso\",\"nextHop\":[\"r\"]},{\"prefix\":\"xzv\",\"nextHop\":[\"b\",\"wgzygbaduvecovsd\",\"hzrtd\"]},{\"prefix\":\"akrlimzfvppkeqsi\",\"nextHop\":[\"mclngygnhrko\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"dta\",\"importIpv6RoutePolicyId\":\"opggorwjoqtrotp\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"pofyrlmwkptsk\",\"exportIpv6RoutePolicyId\":\"jgvhxcc\"},\"egressAclId\":\"kakmkookbputmgvm\",\"ingressAclId\":\"akmlwktfowzkroyr\"}")
            .toObject(NetworkToNetworkInterconnectPatchableProperties.class);
        Assertions.assertEquals(531102382, model.layer2Configuration().mtu());
        Assertions.assertEquals("injmuymve", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("aictdscnkzzohn", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("d", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("zeqozre", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("bzq", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(1336534665211813170L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(292634348, model.optionBLayer3Configuration().vlanId());
        Assertions.assertEquals(1141758238,
            model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(407529894, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("exozonynp", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("eudpab", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("uwzosgyjxvcvaso", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("r", model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("dta", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("opggorwjoqtrotp", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("pofyrlmwkptsk", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("jgvhxcc", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("kakmkookbputmgvm", model.egressAclId());
        Assertions.assertEquals("akmlwktfowzkroyr", model.ingressAclId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkToNetworkInterconnectPatchableProperties model = new NetworkToNetworkInterconnectPatchableProperties()
            .withLayer2Configuration(
                new Layer2Configuration().withMtu(531102382).withInterfaces(Arrays.asList("injmuymve")))
            .withOptionBLayer3Configuration(new OptionBLayer3Configuration().withPrimaryIpv4Prefix("aictdscnkzzohn")
                .withPrimaryIpv6Prefix("d")
                .withSecondaryIpv4Prefix("zeqozre")
                .withSecondaryIpv6Prefix("bzq")
                .withPeerAsn(1336534665211813170L)
                .withVlanId(292634348))
            .withNpbStaticRouteConfiguration(new NpbStaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(1141758238).withMultiplier(407529894))
                .withIpv4Routes(Arrays
                    .asList(new StaticRouteProperties().withPrefix("exozonynp").withNextHop(Arrays.asList("eudpab"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("uwzosgyjxvcvaso").withNextHop(Arrays.asList("r")),
                    new StaticRouteProperties().withPrefix("xzv")
                        .withNextHop(Arrays.asList("b", "wgzygbaduvecovsd", "hzrtd")),
                    new StaticRouteProperties().withPrefix("akrlimzfvppkeqsi")
                        .withNextHop(Arrays.asList("mclngygnhrko")))))
            .withImportRoutePolicy(new ImportRoutePolicyInformation().withImportIpv4RoutePolicyId("dta")
                .withImportIpv6RoutePolicyId("opggorwjoqtrotp"))
            .withExportRoutePolicy(new ExportRoutePolicyInformation().withExportIpv4RoutePolicyId("pofyrlmwkptsk")
                .withExportIpv6RoutePolicyId("jgvhxcc"))
            .withEgressAclId("kakmkookbputmgvm")
            .withIngressAclId("akmlwktfowzkroyr");
        model = BinaryData.fromObject(model).toObject(NetworkToNetworkInterconnectPatchableProperties.class);
        Assertions.assertEquals(531102382, model.layer2Configuration().mtu());
        Assertions.assertEquals("injmuymve", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("aictdscnkzzohn", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("d", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("zeqozre", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("bzq", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(1336534665211813170L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(292634348, model.optionBLayer3Configuration().vlanId());
        Assertions.assertEquals(1141758238,
            model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(407529894, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("exozonynp", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("eudpab", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("uwzosgyjxvcvaso", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("r", model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("dta", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("opggorwjoqtrotp", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("pofyrlmwkptsk", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("jgvhxcc", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("kakmkookbputmgvm", model.egressAclId());
        Assertions.assertEquals("akmlwktfowzkroyr", model.ingressAclId());
    }
}
