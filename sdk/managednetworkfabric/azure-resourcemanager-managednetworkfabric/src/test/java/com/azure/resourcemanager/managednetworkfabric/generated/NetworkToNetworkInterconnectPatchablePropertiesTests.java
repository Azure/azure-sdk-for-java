// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkToNetworkInterconnectPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.Layer2Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NpbStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.OptionBLayer3Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkToNetworkInterconnectPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkToNetworkInterconnectPatchableProperties model =
            BinaryData
                .fromString(
                    "{\"layer2Configuration\":{\"mtu\":1117433456,\"interfaces\":[\"ocvvujexayglxrk\",\"jnmzp\",\"slavxjfiuof\",\"ieidzlv\"]},\"optionBLayer3Configuration\":{\"peerASN\":7453153406196405101,\"vlanId\":1065564623,\"fabricASN\":542794385312423541,\"primaryIpv4Prefix\":\"yhydvikmfn\",\"primaryIpv6Prefix\":\"millxgjs\",\"secondaryIpv4Prefix\":\"zwgsoriobije\",\"secondaryIpv6Prefix\":\"dye\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Enabled\",\"intervalInMilliSeconds\":1616248740,\"multiplier\":1318748653},\"ipv4Routes\":[{\"prefix\":\"wybriopdwe\",\"nextHop\":[\"tnorwaigsioct\"]},{\"prefix\":\"kmv\",\"nextHop\":[\"nx\"]},{\"prefix\":\"zfffhtjnwo\",\"nextHop\":[\"tfjxtvlx\",\"zqfcwrriomxee\"]},{\"prefix\":\"wyhjmbjiqegmxdbs\",\"nextHop\":[\"cwhpy\"]}],\"ipv6Routes\":[{\"prefix\":\"gdetszwcanzbjek\",\"nextHop\":[\"yckyvne\",\"smuffiwjb\",\"tvbpzujqj\"]},{\"prefix\":\"otdxpo\",\"nextHop\":[\"slhwuusieckty\",\"h\",\"uxidhhxomilddxj\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"gxwjwil\",\"importIpv6RoutePolicyId\":\"rslaatep\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"jjzgxqgqw\",\"exportIpv6RoutePolicyId\":\"rhgtvhv\"},\"egressAclId\":\"qykbkkt\",\"ingressAclId\":\"zejogmkorvvmvm\"}")
                .toObject(NetworkToNetworkInterconnectPatchableProperties.class);
        Assertions.assertEquals(1117433456, model.layer2Configuration().mtu());
        Assertions.assertEquals("ocvvujexayglxrk", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("yhydvikmfn", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("millxgjs", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("zwgsoriobije", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("dye", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(7453153406196405101L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(1065564623, model.optionBLayer3Configuration().vlanId());
        Assertions
            .assertEquals(1616248740, model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1318748653, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("wybriopdwe", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions
            .assertEquals("tnorwaigsioct", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("gdetszwcanzbjek", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("yckyvne", model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("gxwjwil", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("rslaatep", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("jjzgxqgqw", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("rhgtvhv", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("qykbkkt", model.egressAclId());
        Assertions.assertEquals("zejogmkorvvmvm", model.ingressAclId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkToNetworkInterconnectPatchableProperties model =
            new NetworkToNetworkInterconnectPatchableProperties()
                .withLayer2Configuration(
                    new Layer2Configuration()
                        .withMtu(1117433456)
                        .withInterfaces(Arrays.asList("ocvvujexayglxrk", "jnmzp", "slavxjfiuof", "ieidzlv")))
                .withOptionBLayer3Configuration(
                    new OptionBLayer3Configuration()
                        .withPrimaryIpv4Prefix("yhydvikmfn")
                        .withPrimaryIpv6Prefix("millxgjs")
                        .withSecondaryIpv4Prefix("zwgsoriobije")
                        .withSecondaryIpv6Prefix("dye")
                        .withPeerAsn(7453153406196405101L)
                        .withVlanId(1065564623))
                .withNpbStaticRouteConfiguration(
                    new NpbStaticRouteConfiguration()
                        .withBfdConfiguration(
                            new BfdConfiguration().withIntervalInMilliSeconds(1616248740).withMultiplier(1318748653))
                        .withIpv4Routes(
                            Arrays
                                .asList(
                                    new StaticRouteProperties()
                                        .withPrefix("wybriopdwe")
                                        .withNextHop(Arrays.asList("tnorwaigsioct")),
                                    new StaticRouteProperties().withPrefix("kmv").withNextHop(Arrays.asList("nx")),
                                    new StaticRouteProperties()
                                        .withPrefix("zfffhtjnwo")
                                        .withNextHop(Arrays.asList("tfjxtvlx", "zqfcwrriomxee")),
                                    new StaticRouteProperties()
                                        .withPrefix("wyhjmbjiqegmxdbs")
                                        .withNextHop(Arrays.asList("cwhpy"))))
                        .withIpv6Routes(
                            Arrays
                                .asList(
                                    new StaticRouteProperties()
                                        .withPrefix("gdetszwcanzbjek")
                                        .withNextHop(Arrays.asList("yckyvne", "smuffiwjb", "tvbpzujqj")),
                                    new StaticRouteProperties()
                                        .withPrefix("otdxpo")
                                        .withNextHop(Arrays.asList("slhwuusieckty", "h", "uxidhhxomilddxj")))))
                .withImportRoutePolicy(
                    new ImportRoutePolicyInformation()
                        .withImportIpv4RoutePolicyId("gxwjwil")
                        .withImportIpv6RoutePolicyId("rslaatep"))
                .withExportRoutePolicy(
                    new ExportRoutePolicyInformation()
                        .withExportIpv4RoutePolicyId("jjzgxqgqw")
                        .withExportIpv6RoutePolicyId("rhgtvhv"))
                .withEgressAclId("qykbkkt")
                .withIngressAclId("zejogmkorvvmvm");
        model = BinaryData.fromObject(model).toObject(NetworkToNetworkInterconnectPatchableProperties.class);
        Assertions.assertEquals(1117433456, model.layer2Configuration().mtu());
        Assertions.assertEquals("ocvvujexayglxrk", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("yhydvikmfn", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("millxgjs", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("zwgsoriobije", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("dye", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(7453153406196405101L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(1065564623, model.optionBLayer3Configuration().vlanId());
        Assertions
            .assertEquals(1616248740, model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1318748653, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("wybriopdwe", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions
            .assertEquals("tnorwaigsioct", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("gdetszwcanzbjek", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("yckyvne", model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("gxwjwil", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("rslaatep", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("jjzgxqgqw", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("rhgtvhv", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("qykbkkt", model.egressAclId());
        Assertions.assertEquals("zejogmkorvvmvm", model.ingressAclId());
    }
}
