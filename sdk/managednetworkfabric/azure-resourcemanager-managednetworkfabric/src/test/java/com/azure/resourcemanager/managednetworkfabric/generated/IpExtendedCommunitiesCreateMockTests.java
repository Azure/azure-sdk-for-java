// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunity;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunityRule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IpExtendedCommunitiesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"configurationState\":\"DeferredControl\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"RMA\",\"ipExtendedCommunityRules\":[{\"action\":\"Permit\",\"sequenceNumber\":1711996139104785096,\"routeTargets\":[\"nguhbnhogsezre\",\"eggpdtyzpxlit\",\"kejmgemudupehsk\"]},{\"action\":\"Deny\",\"sequenceNumber\":3023047299258548814,\"routeTargets\":[\"hrype\"]},{\"action\":\"Deny\",\"sequenceNumber\":5734677290528862693,\"routeTargets\":[\"kapvnpeukgn\",\"fakeqnitro\",\"lcsvktfpsrows\",\"vfxjtxlawmv\"]}],\"annotation\":\"qabjropxfqdmllz\"},\"location\":\"jyuwq\",\"tags\":{\"trhqdoxdeg\":\"gdpvhwirilam\"},\"id\":\"cdedpkwdtobpgdci\",\"name\":\"pdaqermn\",\"type\":\"dlirqqclsaqifep\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IpExtendedCommunity response = manager.ipExtendedCommunities()
            .define("lislxyljzbkd")
            .withRegion("i")
            .withExistingResourceGroup("tkajqhsnsej")
            .withIpExtendedCommunityRules(Arrays.asList(
                new IpExtendedCommunityRule().withAction(CommunityActionTypes.DENY)
                    .withSequenceNumber(1053364534586372657L)
                    .withRouteTargets(Arrays.asList("tvrpeawzzkv", "ccozvqxsphtra", "trmsukxt", "ytgcpt")),
                new IpExtendedCommunityRule().withAction(CommunityActionTypes.PERMIT)
                    .withSequenceNumber(1590788620746051426L)
                    .withRouteTargets(Arrays.asList("egyckmemfvrc", "lcl")),
                new IpExtendedCommunityRule().withAction(CommunityActionTypes.PERMIT)
                    .withSequenceNumber(6350842390036956791L)
                    .withRouteTargets(Arrays.asList("j"))))
            .withTags(mapOf("ebvsewfzvvpay", "lx", "dcyandblkb", "qwh", "qctfvxu", "tcvpvdfmo"))
            .withAnnotation("mwrv")
            .create();

        Assertions.assertEquals("jyuwq", response.location());
        Assertions.assertEquals("gdpvhwirilam", response.tags().get("trhqdoxdeg"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, response.ipExtendedCommunityRules().get(0).action());
        Assertions.assertEquals(1711996139104785096L, response.ipExtendedCommunityRules().get(0).sequenceNumber());
        Assertions.assertEquals("nguhbnhogsezre", response.ipExtendedCommunityRules().get(0).routeTargets().get(0));
        Assertions.assertEquals("qabjropxfqdmllz", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
