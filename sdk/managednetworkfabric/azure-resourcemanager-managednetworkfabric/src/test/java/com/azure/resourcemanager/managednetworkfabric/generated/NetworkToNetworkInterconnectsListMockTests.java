// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnect;
import com.azure.resourcemanager.managednetworkfabric.models.NniType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NetworkToNetworkInterconnectsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"nniType\":\"NPB\",\"administrativeState\":\"Enabled\",\"isManagementType\":\"True\",\"useOptionB\":\"True\",\"layer2Configuration\":{\"portCount\":1023506502,\"mtu\":219417114,\"interfaces\":[]},\"layer3Configuration\":{\"importRoutePolicyId\":\"jceagb\",\"exportRoutePolicyId\":\"vl\",\"peerASN\":1205168137,\"vlanId\":1027959968,\"fabricASN\":1094803086,\"primaryIpv4Prefix\":\"hxgonoyjf\",\"primaryIpv6Prefix\":\"puby\",\"secondaryIpv4Prefix\":\"clkfkee\",\"secondaryIpv6Prefix\":\"vop\"},\"provisioningState\":\"Updating\"},\"id\":\"oqujlyegqavn\",\"name\":\"gflqqbtnyjp\",\"type\":\"lxdbfvabmvms\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NetworkToNetworkInterconnect> response =
            manager
                .networkToNetworkInterconnects()
                .list("fczlfsyqkfrbzgow", "xqmjeajcxn", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(NniType.NPB, response.iterator().next().nniType());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, response.iterator().next().isManagementType());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, response.iterator().next().useOptionB());
        Assertions.assertEquals(1023506502, response.iterator().next().layer2Configuration().portCount());
        Assertions.assertEquals(219417114, response.iterator().next().layer2Configuration().mtu());
        Assertions.assertEquals("hxgonoyjf", response.iterator().next().layer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("puby", response.iterator().next().layer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("clkfkee", response.iterator().next().layer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("vop", response.iterator().next().layer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals("jceagb", response.iterator().next().layer3Configuration().importRoutePolicyId());
        Assertions.assertEquals("vl", response.iterator().next().layer3Configuration().exportRoutePolicyId());
        Assertions.assertEquals(1205168137, response.iterator().next().layer3Configuration().peerAsn());
        Assertions.assertEquals(1027959968, response.iterator().next().layer3Configuration().vlanId());
    }
}
