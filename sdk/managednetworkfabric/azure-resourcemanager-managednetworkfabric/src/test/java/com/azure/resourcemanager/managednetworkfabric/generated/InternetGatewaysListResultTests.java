// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternetGatewayInner;
import com.azure.resourcemanager.managednetworkfabric.models.GatewayType;
import com.azure.resourcemanager.managednetworkfabric.models.InternetGatewaysListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InternetGatewaysListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternetGatewaysListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"ipv4Address\":\"hbhlvbm\",\"port\":453041096,\"type\":\"Workload\",\"networkFabricControllerId\":\"bsxtkcudfbsfarfs\",\"provisioningState\":\"Accepted\",\"internetGatewayRuleId\":\"kjxnqpvwgfstmhq\",\"annotation\":\"izmdksa\"},\"location\":\"fcluqvo\",\"tags\":{\"w\":\"cjimryvwgcwwpbmz\",\"bvopwndyqle\":\"sydsxwefohe\",\"lowkxxpvb\":\"llklmtk\",\"k\":\"dfjmzsyzfhotlh\"},\"id\":\"yych\",\"name\":\"nsjlpjrtws\",\"type\":\"hv\"},{\"properties\":{\"ipv4Address\":\"icphvtrrmhw\",\"port\":231529095,\"type\":\"Workload\",\"networkFabricControllerId\":\"pyf\",\"provisioningState\":\"Failed\",\"internetGatewayRuleId\":\"vjglrocuyzlwhhme\",\"annotation\":\"ooclutnp\"},\"location\":\"emc\",\"tags\":{\"jxsglhsr\":\"mmyky\",\"ylmbkzudni\":\"rye\",\"tjewlpxuzzj\":\"rfih\",\"otoihiqa\":\"nrefqyh\"},\"id\":\"ydiw\",\"name\":\"brkwpzdqt\",\"type\":\"hcspo\"}],\"nextLink\":\"qaxsipietgbebjf\"}")
            .toObject(InternetGatewaysListResult.class);
        Assertions.assertEquals("fcluqvo", model.value().get(0).location());
        Assertions.assertEquals("cjimryvwgcwwpbmz", model.value().get(0).tags().get("w"));
        Assertions.assertEquals(GatewayType.WORKLOAD, model.value().get(0).typePropertiesType());
        Assertions.assertEquals("bsxtkcudfbsfarfs", model.value().get(0).networkFabricControllerId());
        Assertions.assertEquals("kjxnqpvwgfstmhq", model.value().get(0).internetGatewayRuleId());
        Assertions.assertEquals("izmdksa", model.value().get(0).annotation());
        Assertions.assertEquals("qaxsipietgbebjf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternetGatewaysListResult model = new InternetGatewaysListResult().withValue(Arrays.asList(
            new InternetGatewayInner().withLocation("fcluqvo")
                .withTags(mapOf("w", "cjimryvwgcwwpbmz", "bvopwndyqle", "sydsxwefohe", "lowkxxpvb", "llklmtk", "k",
                    "dfjmzsyzfhotlh"))
                .withTypePropertiesType(GatewayType.WORKLOAD)
                .withNetworkFabricControllerId("bsxtkcudfbsfarfs")
                .withInternetGatewayRuleId("kjxnqpvwgfstmhq")
                .withAnnotation("izmdksa"),
            new InternetGatewayInner().withLocation("emc")
                .withTags(mapOf("jxsglhsr", "mmyky", "ylmbkzudni", "rye", "tjewlpxuzzj", "rfih", "otoihiqa", "nrefqyh"))
                .withTypePropertiesType(GatewayType.WORKLOAD)
                .withNetworkFabricControllerId("pyf")
                .withInternetGatewayRuleId("vjglrocuyzlwhhme")
                .withAnnotation("ooclutnp")))
            .withNextLink("qaxsipietgbebjf");
        model = BinaryData.fromObject(model).toObject(InternetGatewaysListResult.class);
        Assertions.assertEquals("fcluqvo", model.value().get(0).location());
        Assertions.assertEquals("cjimryvwgcwwpbmz", model.value().get(0).tags().get("w"));
        Assertions.assertEquals(GatewayType.WORKLOAD, model.value().get(0).typePropertiesType());
        Assertions.assertEquals("bsxtkcudfbsfarfs", model.value().get(0).networkFabricControllerId());
        Assertions.assertEquals("kjxnqpvwgfstmhq", model.value().get(0).internetGatewayRuleId());
        Assertions.assertEquals("izmdksa", model.value().get(0).annotation());
        Assertions.assertEquals("qaxsipietgbebjf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
