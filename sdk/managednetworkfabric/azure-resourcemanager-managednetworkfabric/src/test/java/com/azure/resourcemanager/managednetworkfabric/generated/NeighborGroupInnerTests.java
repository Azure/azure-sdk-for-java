// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NeighborGroupInner;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupDestination;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NeighborGroupInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NeighborGroupInner model = BinaryData.fromString(
            "{\"properties\":{\"networkTapIds\":[\"kiiwvmtu\"],\"networkTapRuleIds\":[\"ymdjfua\",\"roqvqpilrgu\",\"canlduwzorxs\"],\"provisioningState\":\"Failed\",\"destination\":{\"ipv4Addresses\":[\"lxymxkqvfqe\",\"dxcltuubwyvpj\",\"owcpjqduqgixexky\",\"fbwljavhuerkjdd\"],\"ipv6Addresses\":[\"liegftcvbi\",\"ftksd\",\"gdnk\",\"fgmwd\"]},\"annotation\":\"eb\"},\"location\":\"czldbglzoutbaaqg\",\"tags\":{\"nzjotvmr\":\"ajclyzgsnorbjg\",\"ayfluiyuosnu\":\"khlobvvjbhvhdi\",\"hbuubpy\":\"dtelvhyibdrqrs\"},\"id\":\"owtjo\",\"name\":\"ztfwfqchvcz\",\"type\":\"vjnn\"}")
            .toObject(NeighborGroupInner.class);
        Assertions.assertEquals("czldbglzoutbaaqg", model.location());
        Assertions.assertEquals("ajclyzgsnorbjg", model.tags().get("nzjotvmr"));
        Assertions.assertEquals("lxymxkqvfqe", model.destination().ipv4Addresses().get(0));
        Assertions.assertEquals("liegftcvbi", model.destination().ipv6Addresses().get(0));
        Assertions.assertEquals("eb", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NeighborGroupInner model = new NeighborGroupInner().withLocation("czldbglzoutbaaqg")
            .withTags(
                mapOf("nzjotvmr", "ajclyzgsnorbjg", "ayfluiyuosnu", "khlobvvjbhvhdi", "hbuubpy", "dtelvhyibdrqrs"))
            .withDestination(new NeighborGroupDestination()
                .withIpv4Addresses(Arrays.asList("lxymxkqvfqe", "dxcltuubwyvpj", "owcpjqduqgixexky", "fbwljavhuerkjdd"))
                .withIpv6Addresses(Arrays.asList("liegftcvbi", "ftksd", "gdnk", "fgmwd")))
            .withAnnotation("eb");
        model = BinaryData.fromObject(model).toObject(NeighborGroupInner.class);
        Assertions.assertEquals("czldbglzoutbaaqg", model.location());
        Assertions.assertEquals("ajclyzgsnorbjg", model.tags().get("nzjotvmr"));
        Assertions.assertEquals("lxymxkqvfqe", model.destination().ipv4Addresses().get(0));
        Assertions.assertEquals("liegftcvbi", model.destination().ipv6Addresses().get(0));
        Assertions.assertEquals("eb", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
