// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.Layer2Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnectPatch;
import com.azure.resourcemanager.managednetworkfabric.models.NpbStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.OptionBLayer3Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkToNetworkInterconnectPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkToNetworkInterconnectPatch model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"layer2Configuration\":{\"mtu\":900871116,\"interfaces\":[\"xxcrxoxdjxld\",\"a\",\"yyi\"]},\"optionBLayer3Configuration\":{\"peerASN\":8054036118396352474,\"vlanId\":1445832439,\"fabricASN\":1738690679590398351,\"primaryIpv4Prefix\":\"bvxvza\",\"primaryIpv6Prefix\":\"doyqx\",\"secondaryIpv4Prefix\":\"nkfthmcxqqxmyz\",\"secondaryIpv6Prefix\":\"a\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":2046617315,\"multiplier\":1805323615},\"ipv4Routes\":[{\"prefix\":\"qr\",\"nextHop\":[\"a\"]}],\"ipv6Routes\":[{\"prefix\":\"znllaslk\",\"nextHop\":[\"hjqjpv\",\"aihxjtgzgtaiywbq\",\"roigbsfsgsaenwld\",\"mhljqlxspm\"]},{\"prefix\":\"jc\",\"nextHop\":[\"y\",\"dsxebuhsxrz\"]},{\"prefix\":\"mgsdaluyckhefrbh\",\"nextHop\":[\"uerbgpxebjl\"]},{\"prefix\":\"dcaytujraxd\",\"nextHop\":[\"ryjmgtnsewou\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"msvvylj\",\"importIpv6RoutePolicyId\":\"kepo\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"qqylmpctwjwds\",\"exportIpv6RoutePolicyId\":\"zmk\"},\"egressAclId\":\"rxxxoteehkhowgom\",\"ingressAclId\":\"hxow\"},\"id\":\"c\",\"name\":\"apnpxraqawbmp\",\"type\":\"p\"}")
                .toObject(NetworkToNetworkInterconnectPatch.class);
        Assertions.assertEquals(900871116, model.layer2Configuration().mtu());
        Assertions.assertEquals("xxcrxoxdjxld", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("bvxvza", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("doyqx", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("nkfthmcxqqxmyz", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("a", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(8054036118396352474L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(1445832439, model.optionBLayer3Configuration().vlanId());
        Assertions
            .assertEquals(2046617315, model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1805323615, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("qr", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("a", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("znllaslk", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("hjqjpv", model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("msvvylj", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("kepo", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("qqylmpctwjwds", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("zmk", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("rxxxoteehkhowgom", model.egressAclId());
        Assertions.assertEquals("hxow", model.ingressAclId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkToNetworkInterconnectPatch model =
            new NetworkToNetworkInterconnectPatch()
                .withLayer2Configuration(
                    new Layer2Configuration()
                        .withMtu(900871116)
                        .withInterfaces(Arrays.asList("xxcrxoxdjxld", "a", "yyi")))
                .withOptionBLayer3Configuration(
                    new OptionBLayer3Configuration()
                        .withPrimaryIpv4Prefix("bvxvza")
                        .withPrimaryIpv6Prefix("doyqx")
                        .withSecondaryIpv4Prefix("nkfthmcxqqxmyz")
                        .withSecondaryIpv6Prefix("a")
                        .withPeerAsn(8054036118396352474L)
                        .withVlanId(1445832439))
                .withNpbStaticRouteConfiguration(
                    new NpbStaticRouteConfiguration()
                        .withBfdConfiguration(
                            new BfdConfiguration().withIntervalInMilliSeconds(2046617315).withMultiplier(1805323615))
                        .withIpv4Routes(
                            Arrays.asList(new StaticRouteProperties().withPrefix("qr").withNextHop(Arrays.asList("a"))))
                        .withIpv6Routes(
                            Arrays
                                .asList(
                                    new StaticRouteProperties()
                                        .withPrefix("znllaslk")
                                        .withNextHop(
                                            Arrays
                                                .asList(
                                                    "hjqjpv", "aihxjtgzgtaiywbq", "roigbsfsgsaenwld", "mhljqlxspm")),
                                    new StaticRouteProperties()
                                        .withPrefix("jc")
                                        .withNextHop(Arrays.asList("y", "dsxebuhsxrz")),
                                    new StaticRouteProperties()
                                        .withPrefix("mgsdaluyckhefrbh")
                                        .withNextHop(Arrays.asList("uerbgpxebjl")),
                                    new StaticRouteProperties()
                                        .withPrefix("dcaytujraxd")
                                        .withNextHop(Arrays.asList("ryjmgtnsewou")))))
                .withImportRoutePolicy(
                    new ImportRoutePolicyInformation()
                        .withImportIpv4RoutePolicyId("msvvylj")
                        .withImportIpv6RoutePolicyId("kepo"))
                .withExportRoutePolicy(
                    new ExportRoutePolicyInformation()
                        .withExportIpv4RoutePolicyId("qqylmpctwjwds")
                        .withExportIpv6RoutePolicyId("zmk"))
                .withEgressAclId("rxxxoteehkhowgom")
                .withIngressAclId("hxow");
        model = BinaryData.fromObject(model).toObject(NetworkToNetworkInterconnectPatch.class);
        Assertions.assertEquals(900871116, model.layer2Configuration().mtu());
        Assertions.assertEquals("xxcrxoxdjxld", model.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("bvxvza", model.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("doyqx", model.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("nkfthmcxqqxmyz", model.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("a", model.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(8054036118396352474L, model.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(1445832439, model.optionBLayer3Configuration().vlanId());
        Assertions
            .assertEquals(2046617315, model.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1805323615, model.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("qr", model.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("a", model.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("znllaslk", model.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("hjqjpv", model.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("msvvylj", model.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("kepo", model.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("qqylmpctwjwds", model.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("zmk", model.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("rxxxoteehkhowgom", model.egressAclId());
        Assertions.assertEquals("hxow", model.ingressAclId());
    }
}
