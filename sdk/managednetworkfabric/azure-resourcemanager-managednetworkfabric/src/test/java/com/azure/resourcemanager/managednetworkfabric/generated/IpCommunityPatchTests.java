// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityPatch;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityRule;
import com.azure.resourcemanager.managednetworkfabric.models.WellKnownCommunities;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IpCommunityPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpCommunityPatch model = BinaryData.fromString(
            "{\"properties\":{\"ipCommunityRules\":[{\"action\":\"Permit\",\"sequenceNumber\":8815374333697807058,\"wellKnownCommunities\":[\"NoExport\",\"GShut\",\"LocalAS\",\"Internet\"],\"communityMembers\":[\"wrxaomzisg\",\"rrczezkhhltnj\",\"dhqoawj\"]}]},\"tags\":{\"rrueqthwmg\":\"ueayfbpcmsplb\",\"gdhxi\":\"mbscbbx\",\"opedbwdpyqyybxub\":\"d\"}}")
            .toObject(IpCommunityPatch.class);
        Assertions.assertEquals("ueayfbpcmsplb", model.tags().get("rrueqthwmg"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipCommunityRules().get(0).action());
        Assertions.assertEquals(8815374333697807058L, model.ipCommunityRules().get(0).sequenceNumber());
        Assertions.assertEquals(WellKnownCommunities.NO_EXPORT,
            model.ipCommunityRules().get(0).wellKnownCommunities().get(0));
        Assertions.assertEquals("wrxaomzisg", model.ipCommunityRules().get(0).communityMembers().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpCommunityPatch model = new IpCommunityPatch()
            .withTags(mapOf("rrueqthwmg", "ueayfbpcmsplb", "gdhxi", "mbscbbx", "opedbwdpyqyybxub", "d"))
            .withIpCommunityRules(Arrays.asList(new IpCommunityRule().withAction(CommunityActionTypes.PERMIT)
                .withSequenceNumber(8815374333697807058L)
                .withWellKnownCommunities(Arrays.asList(WellKnownCommunities.NO_EXPORT, WellKnownCommunities.GSHUT,
                    WellKnownCommunities.LOCAL_AS, WellKnownCommunities.INTERNET))
                .withCommunityMembers(Arrays.asList("wrxaomzisg", "rrczezkhhltnj", "dhqoawj"))));
        model = BinaryData.fromObject(model).toObject(IpCommunityPatch.class);
        Assertions.assertEquals("ueayfbpcmsplb", model.tags().get("rrueqthwmg"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipCommunityRules().get(0).action());
        Assertions.assertEquals(8815374333697807058L, model.ipCommunityRules().get(0).sequenceNumber());
        Assertions.assertEquals(WellKnownCommunities.NO_EXPORT,
            model.ipCommunityRules().get(0).wellKnownCommunities().get(0));
        Assertions.assertEquals("wrxaomzisg", model.ipCommunityRules().get(0).communityMembers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
