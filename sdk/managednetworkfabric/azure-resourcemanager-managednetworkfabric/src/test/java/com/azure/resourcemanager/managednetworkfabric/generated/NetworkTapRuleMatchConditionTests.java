// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapRuleMatchConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapRuleMatchCondition model = BinaryData.fromString(
            "{\"encapsulationType\":\"None\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"gyxzmxynofxl\"],\"portGroupNames\":[\"oqxt\",\"nzujsji\",\"krpskcjhmm\"]},\"protocolTypes\":[\"nivdqtkyk\",\"axnlsfgnysca\",\"cptbzetxygxxicee\"],\"vlanMatchCondition\":{\"vlans\":[\"yuveoxmpz\",\"wahdrdvhaztkxbi\",\"zfgxmbry\"],\"innerVlans\":[\"ibio\",\"iqsykqfdqwdrt\"],\"vlanGroupNames\":[\"daglmrcok\",\"zertkounz\",\"iywhubymfpop\",\"k\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"wt\"],\"ipGroupNames\":[\"w\"]}}")
            .toObject(NetworkTapRuleMatchCondition.class);
        Assertions.assertEquals("nivdqtkyk", model.protocolTypes().get(0));
        Assertions.assertEquals("yuveoxmpz", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("ibio", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("daglmrcok", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("wt", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("w", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.NONE, model.encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("gyxzmxynofxl", model.portCondition().ports().get(0));
        Assertions.assertEquals("oqxt", model.portCondition().portGroupNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapRuleMatchCondition model = new NetworkTapRuleMatchCondition()
            .withProtocolTypes(Arrays.asList("nivdqtkyk", "axnlsfgnysca", "cptbzetxygxxicee"))
            .withVlanMatchCondition(
                new VlanMatchCondition().withVlans(Arrays.asList("yuveoxmpz", "wahdrdvhaztkxbi", "zfgxmbry"))
                    .withInnerVlans(Arrays.asList("ibio", "iqsykqfdqwdrt"))
                    .withVlanGroupNames(Arrays.asList("daglmrcok", "zertkounz", "iywhubymfpop", "k")))
            .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                .withPrefixType(PrefixType.PREFIX)
                .withIpPrefixValues(Arrays.asList("wt"))
                .withIpGroupNames(Arrays.asList("w")))
            .withEncapsulationType(EncapsulationType.NONE)
            .withPortCondition(new PortCondition().withPortType(PortType.SOURCE_PORT)
                .withLayer4Protocol(Layer4Protocol.TCP)
                .withPorts(Arrays.asList("gyxzmxynofxl"))
                .withPortGroupNames(Arrays.asList("oqxt", "nzujsji", "krpskcjhmm")));
        model = BinaryData.fromObject(model).toObject(NetworkTapRuleMatchCondition.class);
        Assertions.assertEquals("nivdqtkyk", model.protocolTypes().get(0));
        Assertions.assertEquals("yuveoxmpz", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("ibio", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("daglmrcok", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("wt", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("w", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.NONE, model.encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("gyxzmxynofxl", model.portCondition().ports().get(0));
        Assertions.assertEquals("oqxt", model.portCondition().portGroupNames().get(0));
    }
}
