// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapRuleMatchConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapRuleMatchCondition model =
            BinaryData
                .fromString(
                    "{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"ause\",\"nczk\",\"ihvtuwyjsqw\"],\"portGroupNames\":[\"oszjgz\",\"nkfnyskwwunq\"]},\"protocolTypes\":[\"avoj\"],\"vlanMatchCondition\":{\"vlans\":[\"ipcuk\",\"bljp\",\"prrv\"],\"innerVlans\":[\"luqalpc\",\"fjjfxtizt\"],\"vlanGroupNames\":[\"tahhhsa\",\"xxsri\",\"rcwbaae\",\"yyefmxwoqotiiqb\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"tistyikjhorlx\",\"pypkennycntrq\",\"xwtdmbqjtsuhqh\"],\"ipGroupNames\":[\"tdyqav\",\"x\",\"qmzxsyaks\",\"npaami\"]}}")
                .toObject(NetworkTapRuleMatchCondition.class);
        Assertions.assertEquals("avoj", model.protocolTypes().get(0));
        Assertions.assertEquals("ipcuk", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("luqalpc", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("tahhhsa", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("tistyikjhorlx", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("tdyqav", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1, model.encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("ause", model.portCondition().ports().get(0));
        Assertions.assertEquals("oszjgz", model.portCondition().portGroupNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapRuleMatchCondition model =
            new NetworkTapRuleMatchCondition()
                .withProtocolTypes(Arrays.asList("avoj"))
                .withVlanMatchCondition(
                    new VlanMatchCondition()
                        .withVlans(Arrays.asList("ipcuk", "bljp", "prrv"))
                        .withInnerVlans(Arrays.asList("luqalpc", "fjjfxtizt"))
                        .withVlanGroupNames(Arrays.asList("tahhhsa", "xxsri", "rcwbaae", "yyefmxwoqotiiqb")))
                .withIpCondition(
                    new IpMatchCondition()
                        .withType(SourceDestinationType.SOURCE_IP)
                        .withPrefixType(PrefixType.PREFIX)
                        .withIpPrefixValues(Arrays.asList("tistyikjhorlx", "pypkennycntrq", "xwtdmbqjtsuhqh"))
                        .withIpGroupNames(Arrays.asList("tdyqav", "x", "qmzxsyaks", "npaami")))
                .withEncapsulationType(EncapsulationType.GTPV1)
                .withPortCondition(
                    new PortCondition()
                        .withPortType(PortType.SOURCE_PORT)
                        .withLayer4Protocol(Layer4Protocol.UDP)
                        .withPorts(Arrays.asList("ause", "nczk", "ihvtuwyjsqw"))
                        .withPortGroupNames(Arrays.asList("oszjgz", "nkfnyskwwunq")));
        model = BinaryData.fromObject(model).toObject(NetworkTapRuleMatchCondition.class);
        Assertions.assertEquals("avoj", model.protocolTypes().get(0));
        Assertions.assertEquals("ipcuk", model.vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("luqalpc", model.vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("tahhhsa", model.vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.ipCondition().prefixType());
        Assertions.assertEquals("tistyikjhorlx", model.ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("tdyqav", model.ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1, model.encapsulationType());
        Assertions.assertEquals(PortType.SOURCE_PORT, model.portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.UDP, model.portCondition().layer4Protocol());
        Assertions.assertEquals("ause", model.portCondition().ports().get(0));
        Assertions.assertEquals("oszjgz", model.portCondition().portGroupNames().get(0));
    }
}
