// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.IsManagementType;
import com.azure.resourcemanager.managednetworkfabric.models.Layer2Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnect;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NniType;
import com.azure.resourcemanager.managednetworkfabric.models.NpbStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NetworkToNetworkInterconnectsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"nniType\":\"NPB\",\"isManagementType\":\"True\",\"useOptionB\":\"False\",\"layer2Configuration\":{\"mtu\":1968483512,\"interfaces\":[\"jteqlujmmkn\"]},\"optionBLayer3Configuration\":{\"peerASN\":4438901580001692200,\"vlanId\":924454791,\"fabricASN\":6960325120499186636,\"primaryIpv4Prefix\":\"ztasflgme\",\"primaryIpv6Prefix\":\"eohlerptjwvzap\",\"secondaryIpv4Prefix\":\"deeagigbpabacpl\",\"secondaryIpv6Prefix\":\"rjr\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Enabled\",\"intervalInMilliSeconds\":2014985311,\"multiplier\":14274432},\"ipv4Routes\":[{\"prefix\":\"zlxlbdu\",\"nextHop\":[\"d\",\"qeyqrlgpkypb\",\"kpardo\",\"dtedxz\"]},{\"prefix\":\"yhbzmgzsyt\",\"nextHop\":[\"fslrxvsqsbqrqb\",\"iqfstkd\"]},{\"prefix\":\"yjzijxefyd\",\"nextHop\":[\"ffkzlchrkiwp\"]},{\"prefix\":\"dnhflxnnitru\",\"nextHop\":[\"tfrdlfewexbrvb\",\"yriyraybi\",\"ksnijclfdprez\"]}],\"ipv6Routes\":[{\"prefix\":\"xeigyddp\",\"nextHop\":[\"mbxerz\"]},{\"prefix\":\"pcr\",\"nextHop\":[\"wvcnmrbizxqldm\",\"zbcujdz\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"ermjemnyuhoqpbf\",\"importIpv6RoutePolicyId\":\"cbweab\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"mkuquvcgvn\",\"exportIpv6RoutePolicyId\":\"lcldoyohu\"},\"egressAclId\":\"uclopn\",\"ingressAclId\":\"sylwsmdo\",\"configurationState\":\"Rejected\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"RMA\"},\"id\":\"bgbhtpo\",\"name\":\"iustkqywab\",\"type\":\"lgrrsk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkToNetworkInterconnect response =
            manager
                .networkToNetworkInterconnects()
                .define("tvucyackgkavpmgt")
                .withExistingNetworkFabric("djeepukuofz", "i")
                .withUseOptionB(BooleanEnumProperty.TRUE)
                .withNniType(NniType.NPB)
                .withIsManagementType(IsManagementType.TRUE)
                .withLayer2Configuration(
                    new Layer2Configuration()
                        .withMtu(398547649)
                        .withInterfaces(Arrays.asList("kpcesmurj", "bpnxohagcoj", "my")))
                .withOptionBLayer3Configuration(
                    new NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration()
                        .withPrimaryIpv4Prefix("gd")
                        .withPrimaryIpv6Prefix("b")
                        .withSecondaryIpv4Prefix("iweyuigyzsebk")
                        .withSecondaryIpv6Prefix("ykg")
                        .withPeerAsn(8015179779925025737L)
                        .withVlanId(1032326080))
                .withNpbStaticRouteConfiguration(
                    new NpbStaticRouteConfiguration()
                        .withBfdConfiguration(
                            new BfdConfiguration().withIntervalInMilliSeconds(1164527855).withMultiplier(1602290007))
                        .withIpv4Routes(
                            Arrays
                                .asList(
                                    new StaticRouteProperties()
                                        .withPrefix("unypfkvjg")
                                        .withNextHop(Arrays.asList("bbncjxrwaqgmztlr", "b")),
                                    new StaticRouteProperties()
                                        .withPrefix("kwoupmqffgjsqq")
                                        .withNextHop(Arrays.asList("irooglwujobdq", "uppavqo")),
                                    new StaticRouteProperties()
                                        .withPrefix("ijpmegnkrv")
                                        .withNextHop(Arrays.asList("bibtrwg")),
                                    new StaticRouteProperties()
                                        .withPrefix("jfat")
                                        .withNextHop(Arrays.asList("dxqhje", "hg", "myomjeflgnieeq"))))
                        .withIpv6Routes(
                            Arrays
                                .asList(
                                    new StaticRouteProperties()
                                        .withPrefix("xxxnnduxkepga")
                                        .withNextHop(Arrays.asList("ijbiterqfuterrca", "l", "fqddwwpgc")))))
                .withImportRoutePolicy(
                    new ImportRoutePolicyInformation()
                        .withImportIpv4RoutePolicyId("upqkvmyguee")
                        .withImportIpv6RoutePolicyId("xzwvcvtjdq"))
                .withExportRoutePolicy(
                    new ExportRoutePolicyInformation()
                        .withExportIpv4RoutePolicyId("wxjafb")
                        .withExportIpv6RoutePolicyId("p"))
                .withEgressAclId("zdbjzxrpx")
                .withIngressAclId("raupirvdonka")
                .create();

        Assertions.assertEquals(NniType.NPB, response.nniType());
        Assertions.assertEquals(IsManagementType.TRUE, response.isManagementType());
        Assertions.assertEquals(BooleanEnumProperty.FALSE, response.useOptionB());
        Assertions.assertEquals(1968483512, response.layer2Configuration().mtu());
        Assertions.assertEquals("jteqlujmmkn", response.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("ztasflgme", response.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("eohlerptjwvzap", response.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("deeagigbpabacpl", response.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("rjr", response.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(4438901580001692200L, response.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(924454791, response.optionBLayer3Configuration().vlanId());
        Assertions
            .assertEquals(
                2014985311, response.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(14274432, response.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("zlxlbdu", response.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("d", response.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("xeigyddp", response.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("mbxerz", response.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("ermjemnyuhoqpbf", response.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("cbweab", response.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("mkuquvcgvn", response.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("lcldoyohu", response.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("uclopn", response.egressAclId());
        Assertions.assertEquals("sylwsmdo", response.ingressAclId());
    }
}
