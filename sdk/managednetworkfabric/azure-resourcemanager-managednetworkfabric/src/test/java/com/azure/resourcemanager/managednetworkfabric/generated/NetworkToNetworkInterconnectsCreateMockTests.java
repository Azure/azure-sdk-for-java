// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicyInformation;
import com.azure.resourcemanager.managednetworkfabric.models.IsManagementType;
import com.azure.resourcemanager.managednetworkfabric.models.Layer2Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnect;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration;
import com.azure.resourcemanager.managednetworkfabric.models.NniType;
import com.azure.resourcemanager.managednetworkfabric.models.NpbStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkToNetworkInterconnectsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"nniType\":\"CE\",\"isManagementType\":\"True\",\"useOptionB\":\"True\",\"layer2Configuration\":{\"mtu\":1256241884,\"interfaces\":[\"npftkgm\",\"mvxbiubzgh\"]},\"optionBLayer3Configuration\":{\"peerASN\":5097067213361369198,\"vlanId\":117467872,\"fabricASN\":5506702297759334648,\"primaryIpv4Prefix\":\"usnaqsvruuh\",\"primaryIpv6Prefix\":\"cppmmwhjerlurgi\",\"secondaryIpv4Prefix\":\"nbxlep\",\"secondaryIpv6Prefix\":\"c\"},\"npbStaticRouteConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":504409694,\"multiplier\":1654510108},\"ipv4Routes\":[{\"prefix\":\"uv\",\"nextHop\":[\"oiihrfcowlas\",\"wifywxjjylaq\",\"xevfdarvj\"]},{\"prefix\":\"wgkynxlwrjgot\",\"nextHop\":[\"mcktkal\",\"piybfnkylzri\",\"nqlwogq\"]}],\"ipv6Routes\":[{\"prefix\":\"uaiuvemqcb\",\"nextHop\":[\"ivexiathm\",\"ryywyfcenkbfxqc\",\"pggeciradmx\"]},{\"prefix\":\"kbutb\",\"nextHop\":[\"cxzayvcse\",\"dhrodyiit\"]}]},\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"djtgo\",\"importIpv6RoutePolicyId\":\"ybseckgaxm\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"zj\",\"exportIpv6RoutePolicyId\":\"tfstdwqdvzc\"},\"egressAclId\":\"kvw\",\"ingressAclId\":\"tkreisojhuswm\",\"configurationState\":\"PendingCommit\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"RMA\"},\"id\":\"wav\",\"name\":\"mqpaalwidt\",\"type\":\"bwedjrikzppgij\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkToNetworkInterconnect response = manager.networkToNetworkInterconnects()
            .define("dcabnnxhcxcts")
            .withExistingNetworkFabric("zqnbs", "ujcmtc")
            .withUseOptionB(BooleanEnumProperty.FALSE)
            .withNniType(NniType.CE)
            .withIsManagementType(IsManagementType.FALSE)
            .withLayer2Configuration(new Layer2Configuration().withMtu(350719333)
                .withInterfaces(Arrays.asList("xaknwkjzvqpsym", "upyjtrxxzwds", "qhye", "nakdmtpjksdlulyt")))
            .withOptionBLayer3Configuration(new NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration()
                .withPrimaryIpv4Prefix("vukvupuplug")
                .withPrimaryIpv6Prefix("ynv")
                .withSecondaryIpv4Prefix("vctqda")
                .withSecondaryIpv6Prefix("dsfpzpjbsilbnr")
                .withPeerAsn(5457969906808324083L)
                .withVlanId(386929467))
            .withNpbStaticRouteConfiguration(new NpbStaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(248672969).withMultiplier(276846830))
                .withIpv4Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("rgfb")
                        .withNextHop(Arrays.asList("szwkbcstzuwbgae", "maxdwxrwq")),
                    new StaticRouteProperties().withPrefix("bvwsd").withNextHop(Arrays.asList("kxyrlkgjhomywl")),
                    new StaticRouteProperties().withPrefix("pghhuluqyfvgpq")
                        .withNextHop(Arrays.asList("iqmbriskmbuihtq", "vyqmmczuguvlieeg")),
                    new StaticRouteProperties().withPrefix("nqwhfjoxse")
                        .withNextHop(Arrays.asList("scgqcr", "aucftotedhjxdl"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("f").withNextHop(Arrays.asList("jqvjyqmpmsknaxrh")))))
            .withImportRoutePolicy(new ImportRoutePolicyInformation().withImportIpv4RoutePolicyId("qufudpypboq")
                .withImportIpv6RoutePolicyId("fxfpwmaj"))
            .withExportRoutePolicy(new ExportRoutePolicyInformation().withExportIpv4RoutePolicyId("ijfdjjrvsvhmsmri")
                .withExportIpv6RoutePolicyId("dnbwlbqntdderrx"))
            .withEgressAclId("wuzpsvcm")
            .withIngressAclId("fstyyysq")
            .create();

        Assertions.assertEquals(NniType.CE, response.nniType());
        Assertions.assertEquals(IsManagementType.TRUE, response.isManagementType());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, response.useOptionB());
        Assertions.assertEquals(1256241884, response.layer2Configuration().mtu());
        Assertions.assertEquals("npftkgm", response.layer2Configuration().interfaces().get(0));
        Assertions.assertEquals("usnaqsvruuh", response.optionBLayer3Configuration().primaryIpv4Prefix());
        Assertions.assertEquals("cppmmwhjerlurgi", response.optionBLayer3Configuration().primaryIpv6Prefix());
        Assertions.assertEquals("nbxlep", response.optionBLayer3Configuration().secondaryIpv4Prefix());
        Assertions.assertEquals("c", response.optionBLayer3Configuration().secondaryIpv6Prefix());
        Assertions.assertEquals(5097067213361369198L, response.optionBLayer3Configuration().peerAsn());
        Assertions.assertEquals(117467872, response.optionBLayer3Configuration().vlanId());
        Assertions.assertEquals(504409694,
            response.npbStaticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1654510108, response.npbStaticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("uv", response.npbStaticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("oiihrfcowlas",
            response.npbStaticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("uaiuvemqcb", response.npbStaticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("ivexiathm",
            response.npbStaticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("djtgo", response.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("ybseckgaxm", response.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("zj", response.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("tfstdwqdvzc", response.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("kvw", response.egressAclId());
        Assertions.assertEquals("tkreisojhuswm", response.ingressAclId());
    }
}
