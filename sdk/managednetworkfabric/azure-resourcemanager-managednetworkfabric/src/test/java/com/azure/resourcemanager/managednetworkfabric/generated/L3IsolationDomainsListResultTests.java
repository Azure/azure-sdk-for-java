// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L3IsolationDomainInner;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRoute;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnetRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3IsolationDomainsListResult;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeConnectedSubnets;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeStaticRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3IsolationDomainsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3IsolationDomainsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"networkFabricId\":\"kwqpat\",\"configurationState\":\"PendingCommit\",\"provisioningState\":\"Updating\",\"administrativeState\":\"Disabled\",\"redistributeConnectedSubnets\":\"False\",\"redistributeStaticRoutes\":\"False\",\"aggregateRouteConfiguration\":{\"ipv4Routes\":[{\"prefix\":\"uzqymtuowog\"},{\"prefix\":\"gitsqh\"}],\"ipv6Routes\":[{\"prefix\":\"rzcdbanf\"}]},\"connectedSubnetRoutePolicy\":{\"exportRoutePolicyId\":\"scxmxeat\",\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"mwnrdj\",\"exportIpv6RoutePolicyId\":\"bqbnaomhjrmkuh\"}},\"annotation\":\"xljalfihc\"},\"location\":\"obcancdexxqcw\",\"tags\":{\"zrltixldzyyf\":\"fgvaknokzwj\"},\"id\":\"tpq\",\"name\":\"ixymmpujivyql\",\"type\":\"juvsmbmslzoyovw\"}],\"nextLink\":\"bpqvybefg\"}")
            .toObject(L3IsolationDomainsListResult.class);
        Assertions.assertEquals("obcancdexxqcw", model.value().get(0).location());
        Assertions.assertEquals("fgvaknokzwj", model.value().get(0).tags().get("zrltixldzyyf"));
        Assertions.assertEquals("kwqpat", model.value().get(0).networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.FALSE,
            model.value().get(0).redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.FALSE, model.value().get(0).redistributeStaticRoutes());
        Assertions.assertEquals("uzqymtuowog",
            model.value().get(0).aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("rzcdbanf",
            model.value().get(0).aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("scxmxeat", model.value().get(0).connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("mwnrdj",
            model.value().get(0).connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("bqbnaomhjrmkuh",
            model.value().get(0).connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("xljalfihc", model.value().get(0).annotation());
        Assertions.assertEquals("bpqvybefg", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3IsolationDomainsListResult model = new L3IsolationDomainsListResult()
            .withValue(Arrays.asList(new L3IsolationDomainInner().withLocation("obcancdexxqcw")
                .withTags(mapOf("zrltixldzyyf", "fgvaknokzwj"))
                .withNetworkFabricId("kwqpat")
                .withRedistributeConnectedSubnets(RedistributeConnectedSubnets.FALSE)
                .withRedistributeStaticRoutes(RedistributeStaticRoutes.FALSE)
                .withAggregateRouteConfiguration(new AggregateRouteConfiguration()
                    .withIpv4Routes(Arrays.asList(new AggregateRoute().withPrefix("uzqymtuowog"),
                        new AggregateRoute().withPrefix("gitsqh")))
                    .withIpv6Routes(Arrays.asList(new AggregateRoute().withPrefix("rzcdbanf"))))
                .withConnectedSubnetRoutePolicy(new ConnectedSubnetRoutePolicy().withExportRoutePolicyId("scxmxeat")
                    .withExportRoutePolicy(new L3ExportRoutePolicy().withExportIpv4RoutePolicyId("mwnrdj")
                        .withExportIpv6RoutePolicyId("bqbnaomhjrmkuh")))
                .withAnnotation("xljalfihc")))
            .withNextLink("bpqvybefg");
        model = BinaryData.fromObject(model).toObject(L3IsolationDomainsListResult.class);
        Assertions.assertEquals("obcancdexxqcw", model.value().get(0).location());
        Assertions.assertEquals("fgvaknokzwj", model.value().get(0).tags().get("zrltixldzyyf"));
        Assertions.assertEquals("kwqpat", model.value().get(0).networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.FALSE,
            model.value().get(0).redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.FALSE, model.value().get(0).redistributeStaticRoutes());
        Assertions.assertEquals("uzqymtuowog",
            model.value().get(0).aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("rzcdbanf",
            model.value().get(0).aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("scxmxeat", model.value().get(0).connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("mwnrdj",
            model.value().get(0).connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("bqbnaomhjrmkuh",
            model.value().get(0).connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("xljalfihc", model.value().get(0).annotation());
        Assertions.assertEquals("bpqvybefg", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
