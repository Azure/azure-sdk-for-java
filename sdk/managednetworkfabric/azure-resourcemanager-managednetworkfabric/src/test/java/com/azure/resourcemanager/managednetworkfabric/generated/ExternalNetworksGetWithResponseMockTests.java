// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetwork;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ExternalNetworksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"networkToNetworkInterconnectId\":\"brxmrgch\",\"disabledOnResources\":[\"xk\",\"y\"],\"administrativeState\":\"Enabled\",\"provisioningState\":\"Updating\",\"peeringOption\":\"OptionA\",\"optionBProperties\":{\"importRouteTargets\":[],\"exportRouteTargets\":[]},\"optionAProperties\":{\"mtu\":403702784,\"vlanId\":755763875,\"fabricASN\":1181540168,\"peerASN\":413827432,\"primaryIpv4Prefix\":\"blevpmcluj\",\"primaryIpv6Prefix\":\"kyxl\",\"secondaryIpv4Prefix\":\"sjgkzzltafh\",\"secondaryIpv6Prefix\":\"ffovwmbjlzqsczp\"},\"importRoutePolicyId\":\"dwnapf\",\"exportRoutePolicyId\":\"wow\",\"annotation\":\"ptnuwjtkschgc\"},\"id\":\"y\",\"name\":\"leseyqrhvyeldo\",\"type\":\"jv\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ExternalNetwork response =
            manager
                .externalNetworks()
                .getWithResponse("hychocokuleh", "rqlrqffawe", "urkphyjdxravju", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(PeeringOption.OPTIONA, response.peeringOption());
        Assertions.assertEquals("blevpmcluj", response.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("kyxl", response.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("sjgkzzltafh", response.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("ffovwmbjlzqsczp", response.optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals(403702784, response.optionAProperties().mtu());
        Assertions.assertEquals(755763875, response.optionAProperties().vlanId());
        Assertions.assertEquals(413827432, response.optionAProperties().peerAsn());
        Assertions.assertEquals("dwnapf", response.importRoutePolicyId());
        Assertions.assertEquals("wow", response.exportRoutePolicyId());
        Assertions.assertEquals("ptnuwjtkschgc", response.annotation());
    }
}
