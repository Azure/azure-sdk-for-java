// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetwork;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExternalNetworksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"peeringOption\":\"OptionA\",\"optionBProperties\":{\"importRouteTargets\":[\"gdungaypx\",\"a\",\"bxsnx\",\"ksznf\"],\"exportRouteTargets\":[\"prvgrandzkt\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"pczlqbo\",\"mzgmrolh\"],\"importIpv6RouteTargets\":[\"dkhx\",\"ev\"],\"exportIpv4RouteTargets\":[\"nbwaxadxgnp\",\"htuhalpq\",\"ld\"],\"exportIpv6RouteTargets\":[\"kexznpnytkqjarl\"]}},\"optionAProperties\":{\"mtu\":1673458542,\"vlanId\":1381920113,\"fabricASN\":1720411984017904155,\"peerASN\":2629702164412375511,\"bfdConfiguration\":{\"administrativeState\":\"RMA\",\"intervalInMilliSeconds\":773691533,\"multiplier\":1218418747},\"ingressAclId\":\"gxuupc\",\"egressAclId\":\"gqnaidvss\",\"primaryIpv4Prefix\":\"yoggkztzttjnkn\",\"primaryIpv6Prefix\":\"qgzkuobc\",\"secondaryIpv4Prefix\":\"bna\",\"secondaryIpv6Prefix\":\"iz\"},\"configurationState\":\"ErrorProvisioning\",\"provisioningState\":\"Updating\",\"administrativeState\":\"MAT\",\"networkToNetworkInterconnectId\":\"pnnh\",\"importRoutePolicyId\":\"mkffeonmnvm\",\"exportRoutePolicyId\":\"yiqywlpxmli\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"egcr\",\"importIpv6RoutePolicyId\":\"bkilxstekbirhyv\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"vriemors\",\"exportIpv6RoutePolicyId\":\"fiukltr\"},\"annotation\":\"ioguoxcsdqo\"},\"id\":\"denmjogx\",\"name\":\"rggyci\",\"type\":\"bnqinrsxvvm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ExternalNetwork response = manager.externalNetworks()
            .getWithResponse("vrsksdzmhwt", "yppwfbwoet", "izrf", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(PeeringOption.OPTIONA, response.peeringOption());
        Assertions.assertEquals("gdungaypx", response.optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("prvgrandzkt", response.optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("pczlqbo", response.optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("dkhx", response.optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("nbwaxadxgnp",
            response.optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("kexznpnytkqjarl",
            response.optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals("yoggkztzttjnkn", response.optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("qgzkuobc", response.optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("bna", response.optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("iz", response.optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals(1673458542, response.optionAProperties().mtu());
        Assertions.assertEquals(1381920113, response.optionAProperties().vlanId());
        Assertions.assertEquals(2629702164412375511L, response.optionAProperties().peerAsn());
        Assertions.assertEquals(773691533, response.optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1218418747, response.optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("gxuupc", response.optionAProperties().ingressAclId());
        Assertions.assertEquals("gqnaidvss", response.optionAProperties().egressAclId());
        Assertions.assertEquals("pnnh", response.networkToNetworkInterconnectId());
        Assertions.assertEquals("mkffeonmnvm", response.importRoutePolicyId());
        Assertions.assertEquals("yiqywlpxmli", response.exportRoutePolicyId());
        Assertions.assertEquals("egcr", response.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("bkilxstekbirhyv", response.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("vriemors", response.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("fiukltr", response.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("ioguoxcsdqo", response.annotation());
    }
}
