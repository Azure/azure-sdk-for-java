// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L3IsolationDomainInner;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRoute;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnetRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeConnectedSubnets;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeStaticRoutes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3IsolationDomainInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3IsolationDomainInner model = BinaryData.fromString(
            "{\"properties\":{\"networkFabricId\":\"byubhiqdxyurnpn\",\"configurationState\":\"ErrorProvisioning\",\"provisioningState\":\"Updating\",\"administrativeState\":\"RMA\",\"redistributeConnectedSubnets\":\"True\",\"redistributeStaticRoutes\":\"True\",\"aggregateRouteConfiguration\":{\"ipv4Routes\":[{\"prefix\":\"yl\"}],\"ipv6Routes\":[{\"prefix\":\"gvxvatv\"},{\"prefix\":\"rkdlb\"},{\"prefix\":\"bqxvhcsyhzlwxae\"}]},\"connectedSubnetRoutePolicy\":{\"exportRoutePolicyId\":\"ur\",\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"ndsbdw\",\"exportIpv6RoutePolicyId\":\"derzmwnto\"}},\"annotation\":\"gttmvmmagoaqyl\"},\"location\":\"ztj\",\"tags\":{\"xitp\":\"zjcg\",\"tbdrvcqgue\":\"inzcpdltkrlgj\",\"eqdurelyujlfyoum\":\"zhomp\",\"brzmqxucycijoclx\":\"ckyeclcdigpta\"},\"id\":\"utgjcyz\",\"name\":\"zjd\",\"type\":\"r\"}")
            .toObject(L3IsolationDomainInner.class);
        Assertions.assertEquals("ztj", model.location());
        Assertions.assertEquals("zjcg", model.tags().get("xitp"));
        Assertions.assertEquals("byubhiqdxyurnpn", model.networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.TRUE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.TRUE, model.redistributeStaticRoutes());
        Assertions.assertEquals("yl", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("gvxvatv", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("ur", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("ndsbdw",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("derzmwnto",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("gttmvmmagoaqyl", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3IsolationDomainInner model
            = new L3IsolationDomainInner().withLocation("ztj")
                .withTags(mapOf("xitp", "zjcg", "tbdrvcqgue", "inzcpdltkrlgj", "eqdurelyujlfyoum", "zhomp",
                    "brzmqxucycijoclx", "ckyeclcdigpta"))
                .withNetworkFabricId("byubhiqdxyurnpn")
                .withRedistributeConnectedSubnets(RedistributeConnectedSubnets.TRUE)
                .withRedistributeStaticRoutes(RedistributeStaticRoutes.TRUE)
                .withAggregateRouteConfiguration(new AggregateRouteConfiguration()
                    .withIpv4Routes(Arrays.asList(new AggregateRoute().withPrefix("yl")))
                    .withIpv6Routes(Arrays.asList(new AggregateRoute().withPrefix("gvxvatv"),
                        new AggregateRoute().withPrefix("rkdlb"), new AggregateRoute().withPrefix("bqxvhcsyhzlwxae"))))
                .withConnectedSubnetRoutePolicy(new ConnectedSubnetRoutePolicy().withExportRoutePolicyId("ur")
                    .withExportRoutePolicy(new L3ExportRoutePolicy().withExportIpv4RoutePolicyId("ndsbdw")
                        .withExportIpv6RoutePolicyId("derzmwnto")))
                .withAnnotation("gttmvmmagoaqyl");
        model = BinaryData.fromObject(model).toObject(L3IsolationDomainInner.class);
        Assertions.assertEquals("ztj", model.location());
        Assertions.assertEquals("zjcg", model.tags().get("xitp"));
        Assertions.assertEquals("byubhiqdxyurnpn", model.networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.TRUE, model.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.TRUE, model.redistributeStaticRoutes());
        Assertions.assertEquals("yl", model.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("gvxvatv", model.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("ur", model.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("ndsbdw",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("derzmwnto",
            model.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("gttmvmmagoaqyl", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
