// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefix;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IpPrefixesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"configurationState\":\"ErrorDeprovisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Disabled\",\"ipPrefixRules\":[{\"action\":\"Permit\",\"sequenceNumber\":4520960034287352179,\"networkPrefix\":\"bdj\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"xotudamkiyao\"}],\"annotation\":\"hulzugifgsp\"},\"location\":\"dlnoc\",\"tags\":{\"wm\":\"gimizlukj\",\"mspppoeszthjt\":\"ksr\"},\"id\":\"yjskdiylg\",\"name\":\"zuqix\",\"type\":\"sybqowgvmxwbo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IpPrefix response = manager.ipPrefixes()
            .define("chmeodhzj")
            .withRegion("owqrzvuxn")
            .withExistingResourceGroup("zje")
            .withTags(mapOf("mjdhypngo", "ohshzultdb", "zukekytkzvt", "bdxvrivptbczsuzg", "inha", "maatvogpyc",
                "khwfjudapbq", "hbdxsbypl"))
            .withIpPrefixRules(Arrays.asList(new IpPrefixRule().withAction(CommunityActionTypes.PERMIT)
                .withSequenceNumber(5837362985759110973L)
                .withNetworkPrefix("eqkwqphfvsfts")
                .withCondition(Condition.GREATER_THAN_OR_EQUAL_TO)
                .withSubnetMaskLength("p")))
            .withAnnotation("achdtezgfctu")
            .create();

        Assertions.assertEquals("dlnoc", response.location());
        Assertions.assertEquals("gimizlukj", response.tags().get("wm"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, response.ipPrefixRules().get(0).action());
        Assertions.assertEquals(4520960034287352179L, response.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("bdj", response.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.LESSER_THAN_OR_EQUAL_TO, response.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("xotudamkiyao", response.ipPrefixRules().get(0).subnetMaskLength());
        Assertions.assertEquals("hulzugifgsp", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
