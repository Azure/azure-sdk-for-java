// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefix;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IpPrefixesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"configurationState\":\"Provisioned\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"MAT\",\"ipPrefixRules\":[{\"action\":\"Permit\",\"sequenceNumber\":4449803466898573862,\"networkPrefix\":\"qgqs\",\"condition\":\"Range\",\"subnetMaskLength\":\"efeombo\"},{\"action\":\"Permit\",\"sequenceNumber\":6001894924580740479,\"networkPrefix\":\"fuakqsjymcfvvzc\",\"condition\":\"EqualTo\",\"subnetMaskLength\":\"qktcktnbpk\"},{\"action\":\"Permit\",\"sequenceNumber\":1226746474122202062,\"networkPrefix\":\"lncmlzvvrm\",\"condition\":\"GreaterThanOrEqualTo\",\"subnetMaskLength\":\"qsacjqz\"},{\"action\":\"Permit\",\"sequenceNumber\":3498512871956945291,\"networkPrefix\":\"wcbawapndmtq\",\"condition\":\"EqualTo\",\"subnetMaskLength\":\"zvagqxfblsx\"}],\"annotation\":\"qgtodgklle\"},\"location\":\"i\",\"tags\":{\"b\":\"sr\",\"gqbmxbpqcnxske\":\"nasgfyxhsx\",\"lfpiuuf\":\"ojvmazu\",\"givbhmn\":\"pdncokq\"},\"id\":\"mjlyhbjf\",\"name\":\"m\",\"type\":\"ibgwcduy\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        IpPrefix response =
            manager
                .ipPrefixes()
                .define("gdmfvybfmpot")
                .withRegion("vtkmx")
                .withExistingResourceGroup("mazkmqfw")
                .withTags(mapOf("v", "shnugfbpeigkf", "gtdjhtbarptxurs", "vriqtuzwbkqcgz", "oc", "oyyumhzps"))
                .withIpPrefixRules(
                    Arrays
                        .asList(
                            new IpPrefixRule()
                                .withAction(CommunityActionTypes.DENY)
                                .withSequenceNumber(8899164326683510311L)
                                .withNetworkPrefix("codbqeo")
                                .withCondition(Condition.RANGE)
                                .withSubnetMaskLength("xxbjhsp"),
                            new IpPrefixRule()
                                .withAction(CommunityActionTypes.DENY)
                                .withSequenceNumber(2386191404567686629L)
                                .withNetworkPrefix("xrwqlwdflgqrplz")
                                .withCondition(Condition.RANGE)
                                .withSubnetMaskLength("dbboffgxtaelx")))
                .withAnnotation("fcyatbxdwr")
                .create();

        Assertions.assertEquals("i", response.location());
        Assertions.assertEquals("sr", response.tags().get("b"));
        Assertions.assertEquals(CommunityActionTypes.PERMIT, response.ipPrefixRules().get(0).action());
        Assertions.assertEquals(4449803466898573862L, response.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("qgqs", response.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.RANGE, response.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("efeombo", response.ipPrefixRules().get(0).subnetMaskLength());
        Assertions.assertEquals("qgtodgklle", response.annotation());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
