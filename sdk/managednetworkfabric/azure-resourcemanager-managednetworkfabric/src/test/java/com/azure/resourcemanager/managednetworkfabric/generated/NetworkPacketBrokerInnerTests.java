// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkPacketBrokerInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkPacketBrokerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkPacketBrokerInner model = BinaryData.fromString(
            "{\"properties\":{\"networkFabricId\":\"khglaqjsg\",\"networkDeviceIds\":[\"tujrzxrkn\",\"fdrld\",\"yehi\",\"ittugyu\"],\"sourceInterfaceIds\":[\"lda\",\"urf\",\"azcsozjvx\"],\"networkTapIds\":[\"iggbnv\",\"xofwalzy\",\"whoea\"],\"neighborGroupIds\":[\"obdoey\"],\"provisioningState\":\"Canceled\"},\"location\":\"imtwuuhau\",\"tags\":{\"zjy\":\"kwmnfeub\",\"nqd\":\"kwfugiphrrkuu\",\"opueo\":\"rhzz\"},\"id\":\"usvwluj\",\"name\":\"pwnibittozt\",\"type\":\"dqumqvfm\"}")
            .toObject(NetworkPacketBrokerInner.class);
        Assertions.assertEquals("imtwuuhau", model.location());
        Assertions.assertEquals("kwmnfeub", model.tags().get("zjy"));
        Assertions.assertEquals("khglaqjsg", model.networkFabricId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkPacketBrokerInner model = new NetworkPacketBrokerInner().withLocation("imtwuuhau")
            .withTags(mapOf("zjy", "kwmnfeub", "nqd", "kwfugiphrrkuu", "opueo", "rhzz"))
            .withNetworkFabricId("khglaqjsg");
        model = BinaryData.fromObject(model).toObject(NetworkPacketBrokerInner.class);
        Assertions.assertEquals("imtwuuhau", model.location());
        Assertions.assertEquals("kwmnfeub", model.tags().get("zjy"));
        Assertions.assertEquals("khglaqjsg", model.networkFabricId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
