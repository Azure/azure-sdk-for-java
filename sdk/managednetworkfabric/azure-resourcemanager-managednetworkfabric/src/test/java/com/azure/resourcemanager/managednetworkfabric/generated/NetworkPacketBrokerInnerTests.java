// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkPacketBrokerInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkPacketBrokerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkPacketBrokerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"networkFabricId\":\"ugejcvjkjyczcmt\",\"networkDeviceIds\":[\"lajdyoljeqyxq\",\"mzsizzhravrcjk\"],\"sourceInterfaceIds\":[\"gqb\",\"cxhnqxgzxlerm\",\"merghski\"],\"networkTapIds\":[\"pupkcbkfukd\",\"jqnvtsdyd\",\"hkpafyaloowwzizz\"],\"neighborGroupIds\":[\"f\"],\"provisioningState\":\"Accepted\"},\"location\":\"ti\",\"tags\":{\"qiyv\":\"fyjfd\"},\"id\":\"djokgwesym\",\"name\":\"qh\",\"type\":\"qpfzlpejtznxlue\"}")
                .toObject(NetworkPacketBrokerInner.class);
        Assertions.assertEquals("ti", model.location());
        Assertions.assertEquals("fyjfd", model.tags().get("qiyv"));
        Assertions.assertEquals("ugejcvjkjyczcmt", model.networkFabricId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkPacketBrokerInner model =
            new NetworkPacketBrokerInner()
                .withLocation("ti")
                .withTags(mapOf("qiyv", "fyjfd"))
                .withNetworkFabricId("ugejcvjkjyczcmt");
        model = BinaryData.fromObject(model).toObject(NetworkPacketBrokerInner.class);
        Assertions.assertEquals("ti", model.location());
        Assertions.assertEquals("fyjfd", model.tags().get("qiyv"));
        Assertions.assertEquals("ugejcvjkjyczcmt", model.networkFabricId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
