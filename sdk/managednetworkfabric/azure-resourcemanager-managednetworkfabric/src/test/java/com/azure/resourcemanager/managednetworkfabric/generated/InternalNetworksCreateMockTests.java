// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.Extension;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetwork;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesBgpConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborAddress;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InternalNetworksCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"vlanId\":2065783866,\"bgpConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"RMA\",\"intervalInMilliSeconds\":153419128,\"multiplier\":1244711113},\"defaultRouteOriginate\":\"True\",\"allowAS\":429345111,\"allowASOverride\":\"Enable\",\"fabricASN\":2331153992242910204,\"peerASN\":7849127751955317721,\"ipv4ListenRangePrefixes\":[\"hob\",\"vyuepacoeroh\",\"xtigukfkbsyc\"],\"ipv6ListenRangePrefixes\":[\"mbnpeenlq\",\"qyv\",\"fb\",\"avqdvfjdsqephtos\"],\"ipv4NeighborAddress\":[{\"address\":\"arjwgu\",\"configurationState\":\"PendingCommit\"},{\"address\":\"xaeypyqoizf\",\"configurationState\":\"Deprovisioning\"}],\"ipv6NeighborAddress\":[{\"address\":\"qbwscjw\",\"configurationState\":\"Deprovisioning\"},{\"address\":\"miflrvfe\",\"configurationState\":\"Succeeded\"},{\"address\":\"shwfrhhas\",\"configurationState\":\"Deprovisioned\"},{\"address\":\"uznwwum\",\"configurationState\":\"Accepted\"}],\"annotation\":\"cilbwtpwbjlpfwuq\"},\"staticRouteConfiguration\":{\"extension\":\"NoExtension\",\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":730470737,\"multiplier\":832295437},\"ipv4Routes\":[{\"prefix\":\"lizm\",\"nextHop\":[\"xghamrplanchqot\",\"mxlmxejwyvjzb\"]},{\"prefix\":\"wvtuek\",\"nextHop\":[\"ypqsmpsbeqie\",\"u\"]},{\"prefix\":\"hjuwndalnjjhrgkj\",\"nextHop\":[\"cpihlzyxvtajfj\",\"toidnekurdgcpzan\",\"qvengn\"]},{\"prefix\":\"uelrnanbrpkocu\",\"nextHop\":[\"bagegjtjltckiwx\",\"gfagijxmdbo\"]}],\"ipv6Routes\":[{\"prefix\":\"hxhahuq\",\"nextHop\":[\"nvzsodmokrqd\",\"sgkq\"]}]},\"configurationState\":\"Deprovisioned\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Disabled\",\"mtu\":1930831324,\"connectedIPv4Subnets\":[{\"prefix\":\"yzzl\",\"annotation\":\"jhzppdb\"},{\"prefix\":\"bmc\",\"annotation\":\"o\"},{\"prefix\":\"prsmivapesbfz\",\"annotation\":\"ejrwwsfvt\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"xtmblm\",\"annotation\":\"leuo\"},{\"prefix\":\"elvsprbxjt\",\"annotation\":\"ujtoudodexwmvssr\"}],\"importRoutePolicyId\":\"iexuwemtg\",\"exportRoutePolicyId\":\"ebymmcgskscbsx\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"xicjojxolknsh\",\"importIpv6RoutePolicyId\":\"akptbhmbg\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"lbnatlnc\",\"exportIpv6RoutePolicyId\":\"zcdkxo\"},\"ingressAclId\":\"d\",\"egressAclId\":\"vhbujkaho\",\"isMonitoringEnabled\":\"True\",\"extension\":\"NPB\",\"annotation\":\"dzccqtwsrbfbsd\"},\"id\":\"cdzfbvexrv\",\"name\":\"h\",\"type\":\"mfsnqpvjtshl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InternalNetwork response = manager.internalNetworks()
            .define("nhdikatzmtuvfn")
            .withExistingL3IsolationDomain("eqcrjv", "jskqsfnmiwapd")
            .withVlanId(1678496031)
            .withBgpConfiguration(new InternalNetworkPropertiesBgpConfiguration().withAnnotation("wfogbv")
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(2133761517).withMultiplier(1219338426))
                .withDefaultRouteOriginate(BooleanEnumProperty.TRUE)
                .withAllowAS(830031798)
                .withAllowASOverride(AllowASOverride.ENABLE)
                .withPeerAsn(1457459029942100829L)
                .withIpv4ListenRangePrefixes(Arrays.asList("odincfbaoboiahk", "psvax", "ksaxyeedvpmodkt"))
                .withIpv6ListenRangePrefixes(Arrays.asList("ydvvgkmorbpcjesf", "vuztnsvmsh", "kg", "gf"))
                .withIpv4NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("ehhlclpkryrcbmjj"),
                    new NeighborAddress().withAddress("ivrfnztx")))
                .withIpv6NeighborAddress(Arrays.asList(new NeighborAddress().withAddress("tjviilohlgrjc"),
                    new NeighborAddress().withAddress("hz"))))
            .withStaticRouteConfiguration(new InternalNetworkPropertiesStaticRouteConfiguration()
                .withBfdConfiguration(
                    new BfdConfiguration().withIntervalInMilliSeconds(965402508).withMultiplier(1411400151))
                .withIpv4Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("uomsxhdkhmemxk")
                        .withNextHop(Arrays.asList("apesnbyoullyfz", "nxrmxxjv", "batjgzkm")),
                    new StaticRouteProperties().withPrefix("fwzlmpx").withNextHop(Arrays.asList("djsiommdz"))))
                .withIpv6Routes(Arrays.asList(
                    new StaticRouteProperties().withPrefix("ulxrcbdnpfcg")
                        .withNextHop(Arrays.asList("ttowqx", "cpbzxpz", "oovhatiywtcvzu")),
                    new StaticRouteProperties().withPrefix("pkfeomotquqlqe").withNextHop(Arrays.asList("sgqp")),
                    new StaticRouteProperties().withPrefix("k")
                        .withNextHop(Arrays.asList("pfv", "sqmmetwtlafnkjte", "bdpnuvhgcgrllyy", "smocbxhrchm")),
                    new StaticRouteProperties().withPrefix("tvzhu")
                        .withNextHop(Arrays.asList("dykg", "skwvb", "cawwayqtsrn", "otgnmzebcreluedc"))))
                .withExtension(Extension.NPB))
            .withMtu(721985116)
            .withConnectedIPv4Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("jklfsdntkqiym").withPrefix("hllxwknoo"),
                    new ConnectedSubnet().withAnnotation("dlhmks").withPrefix("ddslwnl"),
                    new ConnectedSubnet().withAnnotation("pm").withPrefix("ybnnnlpqdnnska")))
            .withConnectedIPv6Subnets(
                Arrays.asList(new ConnectedSubnet().withAnnotation("rndzzywxqr").withPrefix("wknrdvvmb"),
                    new ConnectedSubnet().withAnnotation("tnnefputlkszuxjm").withPrefix("qxtkd"),
                    new ConnectedSubnet().withAnnotation("a").withPrefix("zs"),
                    new ConnectedSubnet().withAnnotation("fguamrvamu").withPrefix("fwqjzybmfqdnpp")))
            .withImportRoutePolicyId("gdwpjbb")
            .withExportRoutePolicyId("kgc")
            .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("spjvsyydjlhd")
                .withImportIpv6RoutePolicyId("csqvyee"))
            .withExportRoutePolicy(new ExportRoutePolicy().withExportIpv4RoutePolicyId("ulojwumfjdymeq")
                .withExportIpv6RoutePolicyId("xpfyxdjspnonx"))
            .withIngressAclId("hq")
            .withEgressAclId("hnatwvgcmcvdjl")
            .withIsMonitoringEnabled(IsMonitoringEnabled.FALSE)
            .withExtension(Extension.NO_EXTENSION)
            .withAnnotation("twllqypmjc")
            .create();

        Assertions.assertEquals(2065783866, response.vlanId());
        Assertions.assertEquals("cilbwtpwbjlpfwuq", response.bgpConfiguration().annotation());
        Assertions.assertEquals(153419128, response.bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1244711113, response.bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.TRUE, response.bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(429345111, response.bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, response.bgpConfiguration().allowASOverride());
        Assertions.assertEquals(7849127751955317721L, response.bgpConfiguration().peerAsn());
        Assertions.assertEquals("hob", response.bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("mbnpeenlq", response.bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals("arjwgu", response.bgpConfiguration().ipv4NeighborAddress().get(0).address());
        Assertions.assertEquals("qbwscjw", response.bgpConfiguration().ipv6NeighborAddress().get(0).address());
        Assertions.assertEquals(730470737,
            response.staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(832295437, response.staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("lizm", response.staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("xghamrplanchqot",
            response.staticRouteConfiguration().ipv4Routes().get(0).nextHop().get(0));
        Assertions.assertEquals("hxhahuq", response.staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("nvzsodmokrqd",
            response.staticRouteConfiguration().ipv6Routes().get(0).nextHop().get(0));
        Assertions.assertEquals(Extension.NO_EXTENSION, response.staticRouteConfiguration().extension());
        Assertions.assertEquals(1930831324, response.mtu());
        Assertions.assertEquals("jhzppdb", response.connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("yzzl", response.connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("leuo", response.connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("xtmblm", response.connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("iexuwemtg", response.importRoutePolicyId());
        Assertions.assertEquals("ebymmcgskscbsx", response.exportRoutePolicyId());
        Assertions.assertEquals("xicjojxolknsh", response.importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("akptbhmbg", response.importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("lbnatlnc", response.exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("zcdkxo", response.exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("d", response.ingressAclId());
        Assertions.assertEquals("vhbujkaho", response.egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.TRUE, response.isMonitoringEnabled());
        Assertions.assertEquals(Extension.NPB, response.extension());
        Assertions.assertEquals("dzccqtwsrbfbsd", response.annotation());
    }
}
