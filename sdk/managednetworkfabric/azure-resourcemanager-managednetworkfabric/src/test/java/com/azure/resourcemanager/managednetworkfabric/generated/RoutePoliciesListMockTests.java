// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RoutePoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"networkFabricId\":\"gsdo\",\"addressFamilyType\":\"IPv4\",\"configurationState\":\"Deprovisioned\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Disabled\",\"defaultAction\":\"Permit\",\"statements\":[{\"sequenceNumber\":8892366462938685872,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"lmczcxouaneu\",\"ipExtendedCommunityIds\":[\"qztakov\",\"lvwpvdmtfcstucmi\"],\"ipCommunityIds\":[\"snu\",\"q\",\"sqitiuttkasxjkcl\"]},\"action\":{\"localPreference\":5014050499766158651,\"actionType\":\"Permit\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"etbhlbhkijqgcvqe\"},{\"sequenceNumber\":8806210245617066019,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"x\",\"ipExtendedCommunityIds\":[\"uh\",\"izoak\"],\"ipCommunityIds\":[\"yvobevfbmxz\"]},\"action\":{\"localPreference\":8738446998224680215,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"kp\"},{\"sequenceNumber\":5054072910955069059,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"byil\",\"ipExtendedCommunityIds\":[\"b\",\"meuyxhcwu\",\"t\",\"go\"],\"ipCommunityIds\":[\"oji\"]},\"action\":{\"localPreference\":2708035609660166820,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"iplxrifbsb\"},{\"sequenceNumber\":7442335067660473618,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"bbpoijs\",\"ipExtendedCommunityIds\":[\"utjit\"],\"ipCommunityIds\":[\"knarscxnk\",\"pjinz\",\"sxrsmvnn\"]},\"action\":{\"localPreference\":5504107041706044506,\"actionType\":\"Permit\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"zwwqchxow\"}],\"annotation\":\"vuxqactoqqehnqi\"},\"location\":\"gnvuolv\",\"tags\":{\"eq\":\"nlbkizebbrwl\"},\"id\":\"isoiqgetzgwywy\",\"name\":\"bwuamo\",\"type\":\"opqqiyjrehe\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RoutePolicy> response = manager.routePolicies().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gnvuolv", response.iterator().next().location());
        Assertions.assertEquals("nlbkizebbrwl", response.iterator().next().tags().get("eq"));
        Assertions.assertEquals("gsdo", response.iterator().next().networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV4, response.iterator().next().addressFamilyType());
        Assertions.assertEquals(CommunityActionTypes.PERMIT, response.iterator().next().defaultAction());
        Assertions.assertEquals("etbhlbhkijqgcvqe", response.iterator().next().statements().get(0).annotation());
        Assertions.assertEquals(8892366462938685872L, response.iterator().next().statements().get(0).sequenceNumber());
        Assertions.assertEquals("snu",
            response.iterator().next().statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND,
            response.iterator().next().statements().get(0).condition().type());
        Assertions.assertEquals("lmczcxouaneu",
            response.iterator().next().statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("qztakov",
            response.iterator().next().statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(5014050499766158651L,
            response.iterator().next().statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.PERMIT,
            response.iterator().next().statements().get(0).action().actionType());
        Assertions.assertEquals("vuxqactoqqehnqi", response.iterator().next().annotation());
    }
}
