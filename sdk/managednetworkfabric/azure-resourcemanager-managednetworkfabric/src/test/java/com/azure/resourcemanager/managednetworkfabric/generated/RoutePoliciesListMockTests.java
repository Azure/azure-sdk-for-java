// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RoutePoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"networkFabricId\":\"megynheamzlqvaj\",\"addressFamilyType\":\"IPv4\",\"configurationState\":\"DeferredControl\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"RMA\",\"statements\":[{\"sequenceNumber\":7612994205190515504,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"fgqlwwojwvvqcj\",\"ipExtendedCommunityIds\":[\"verbfvehuwe\",\"itqeyonmoig\"],\"ipCommunityIds\":[\"oj\"]},\"action\":{\"localPreference\":4607293649535362986,\"actionType\":\"Permit\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"juypcnbucbej\"},{\"sequenceNumber\":372456818114172365,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"pspaxhfuwygssssj\",\"ipExtendedCommunityIds\":[\"epylmssdv\"],\"ipCommunityIds\":[\"cciyzrdjf\"]},\"action\":{\"localPreference\":1960598591150483132,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"yksdelr\"},{\"sequenceNumber\":5120928967891277285,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"bhtueynxkxqnw\",\"ipExtendedCommunityIds\":[\"qsbncadfapzebjeg\",\"wgverbywu\",\"veisjbpzdwhxputk\"],\"ipCommunityIds\":[\"srwzvdfeya\"]},\"action\":{\"localPreference\":1509508135091447171,\"actionType\":\"Deny\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"iyjzu\"}],\"annotation\":\"xb\"},\"location\":\"tj\",\"tags\":{\"fyevhurklow\":\"mdypsxkw\",\"lyoix\":\"drvzcl\",\"nqizvsih\":\"ei\"},\"id\":\"mtxjca\",\"name\":\"hs\",\"type\":\"uqqtzrnubod\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RoutePolicy> response = manager.routePolicies().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tj", response.iterator().next().location());
        Assertions.assertEquals("mdypsxkw", response.iterator().next().tags().get("fyevhurklow"));
        Assertions.assertEquals("megynheamzlqvaj", response.iterator().next().networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV4, response.iterator().next().addressFamilyType());
        Assertions.assertEquals("juypcnbucbej", response.iterator().next().statements().get(0).annotation());
        Assertions.assertEquals(7612994205190515504L, response.iterator().next().statements().get(0).sequenceNumber());
        Assertions
            .assertEquals("oj", response.iterator().next().statements().get(0).condition().ipCommunityIds().get(0));
        Assertions
            .assertEquals(
                RoutePolicyConditionType.AND, response.iterator().next().statements().get(0).condition().type());
        Assertions
            .assertEquals("fgqlwwojwvvqcj", response.iterator().next().statements().get(0).condition().ipPrefixId());
        Assertions
            .assertEquals(
                "verbfvehuwe",
                response.iterator().next().statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions
            .assertEquals(
                4607293649535362986L, response.iterator().next().statements().get(0).action().localPreference());
        Assertions
            .assertEquals(
                RoutePolicyActionType.PERMIT, response.iterator().next().statements().get(0).action().actionType());
        Assertions.assertEquals("xb", response.iterator().next().annotation());
    }
}
