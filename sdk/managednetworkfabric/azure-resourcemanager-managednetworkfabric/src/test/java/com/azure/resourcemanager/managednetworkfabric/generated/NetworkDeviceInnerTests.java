// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkDeviceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkDeviceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkDeviceInner model = BinaryData.fromString(
            "{\"properties\":{\"version\":\"ffofwan\",\"networkDeviceSku\":\"k\",\"networkDeviceRole\":\"TS\",\"networkRackId\":\"w\",\"managementIpv4Address\":\"cgwdfriwgybjp\",\"managementIpv6Address\":\"ok\",\"configurationState\":\"Provisioned\",\"provisioningState\":\"Updating\",\"administrativeState\":\"RMA\",\"hostName\":\"dgbyfgwewqkjvxp\",\"serialNumber\":\"pxsoohu\",\"annotation\":\"lcsklt\"},\"location\":\"uugggzlfbgrd\",\"tags\":{\"mdylperp\":\"bsr\",\"cmfpfbodet\":\"lttjzgcz\",\"muqkevzgjypanhx\":\"esrgvtshuvftwai\",\"wot\":\"pdxxzetwwz\"},\"id\":\"xl\",\"name\":\"fhglhrfo\",\"type\":\"qwec\"}")
            .toObject(NetworkDeviceInner.class);
        Assertions.assertEquals("uugggzlfbgrd", model.location());
        Assertions.assertEquals("bsr", model.tags().get("mdylperp"));
        Assertions.assertEquals("k", model.networkDeviceSku());
        Assertions.assertEquals("dgbyfgwewqkjvxp", model.hostname());
        Assertions.assertEquals("pxsoohu", model.serialNumber());
        Assertions.assertEquals("lcsklt", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkDeviceInner model = new NetworkDeviceInner().withLocation("uugggzlfbgrd")
            .withTags(mapOf("mdylperp", "bsr", "cmfpfbodet", "lttjzgcz", "muqkevzgjypanhx", "esrgvtshuvftwai", "wot",
                "pdxxzetwwz"))
            .withNetworkDeviceSku("k")
            .withHostname("dgbyfgwewqkjvxp")
            .withSerialNumber("pxsoohu")
            .withAnnotation("lcsklt");
        model = BinaryData.fromObject(model).toObject(NetworkDeviceInner.class);
        Assertions.assertEquals("uugggzlfbgrd", model.location());
        Assertions.assertEquals("bsr", model.tags().get("mdylperp"));
        Assertions.assertEquals("k", model.networkDeviceSku());
        Assertions.assertEquals("dgbyfgwewqkjvxp", model.hostname());
        Assertions.assertEquals("pxsoohu", model.serialNumber());
        Assertions.assertEquals("lcsklt", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
