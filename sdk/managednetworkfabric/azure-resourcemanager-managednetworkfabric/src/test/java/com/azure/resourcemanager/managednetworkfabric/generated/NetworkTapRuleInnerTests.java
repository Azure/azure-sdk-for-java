// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapRuleInner;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleAction;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.PollingIntervalInSeconds;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.TapRuleActionType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"networkTapId\":\"ae\",\"pollingIntervalInSeconds\":90,\"lastSyncedTime\":\"2021-09-15T09:06:41Z\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"MAT\",\"configurationType\":\"File\",\"tapRulesUrl\":\"fooy\",\"matchConfigurations\":[{\"matchConfigurationName\":\"dtzcqi\",\"sequenceNumber\":3768764619279475619,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{\"encapsulationType\":\"GTPv1\",\"portCondition\":{\"layer4Protocol\":\"TCP\"},\"protocolTypes\":[\"xlantolamlbijuxk\",\"llczipvwdt\",\"ckzdqiqdlra\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Log\",\"truncate\":\"wxsuy\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"rfgslglhpry\",\"matchConfigurationName\":\"zihuioaeo\"}]},{\"matchConfigurationName\":\"ajtfey\",\"sequenceNumber\":8432449142241405654,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"encapsulationType\":\"None\",\"portCondition\":{\"layer4Protocol\":\"UDP\"},\"protocolTypes\":[\"beuuqutkzwtjwwg\",\"zytijcx\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Redirect\",\"truncate\":\"dydhqkkkb\",\"isTimestampEnabled\":\"False\",\"destinationId\":\"catuqbhpowcnx\",\"matchConfigurationName\":\"zdlys\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"katprytgrhzbq\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"wrp\"]}],\"vlanGroups\":[{\"name\":\"ht\",\"vlans\":[\"zcttbqgdirdam\"]},{\"name\":\"zjgcfjfx\",\"vlans\":[\"jjirmuydgftt\",\"dofgeoagfuoftnx\"]},{\"name\":\"wxmdaj\",\"vlans\":[\"g\",\"gsevmdm\"]},{\"name\":\"nlrstgf\",\"vlans\":[\"j\",\"n\",\"idt\",\"vamyyznmrgcdo\"]}],\"portGroups\":[{\"name\":\"cgytoxuw\",\"ports\":[\"nzqsaqmebgszpl\",\"sdekpdzz\"]}]},{\"ipGroups\":[{\"name\":\"pgvokyejidbd\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"nycwz\",\"lv\",\"wsnmrkkyjt\",\"epwpwfk\"]},{\"name\":\"uxuva\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"dofuckclb\"]},{\"name\":\"luevsolzwilfng\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"ebuuxjx\",\"fxfjwp\",\"kktpmbmxbmbr\",\"gzzxljbkhxsd\"]},{\"name\":\"au\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"weqjfyxydgto\",\"vq\",\"vwglgwzpv\",\"akglhpsesrfga\"]}],\"vlanGroups\":[{\"name\":\"dvxcgdhyhgoqgsoy\",\"vlans\":[\"yjrcbqpb\",\"spglq\",\"o\"]},{\"name\":\"dahneaoovty\",\"vlans\":[\"ivfwjlofze\",\"fsr\"]}],\"portGroups\":[{\"name\":\"la\",\"ports\":[\"foc\",\"hapejov\"]},{\"name\":\"wxn\",\"ports\":[\"hnoyrzaaoeeh\",\"mjenvjeatea\",\"xc\"]},{\"name\":\"oxdjxldnaryy\",\"ports\":[\"kd\",\"lrndwdbvxvza\",\"edoyqxlunkft\",\"mcxqqxmyzklao\"]}]},{\"ipGroups\":[{\"name\":\"hrvmzrqrazadi\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"aslkskhjqjpvba\",\"hxjtgzgtai\"]},{\"name\":\"b\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"gbsfsgsaenwldf\",\"hljqlxsp\",\"rjc\"]}],\"vlanGroups\":[{\"name\":\"dsxebuhsxrz\",\"vlans\":[\"sdaluyckhefrbhs\",\"uerbgpxebjl\",\"dcaytujraxd\"]}],\"portGroups\":[{\"name\":\"jmgtnsew\",\"ports\":[\"ly\"]},{\"name\":\"vvyljurkepose\",\"ports\":[\"ylmpctwjwdsd\",\"zmk\",\"erxxxoteehkhowgo\",\"vvh\"]},{\"name\":\"wpcbapnpxr\",\"ports\":[\"wbmpspfeylqloc\",\"vujex\"]}]}],\"annotation\":\"glxrkgjnm\"},\"location\":\"aslavxj\",\"tags\":{\"pieidzlvssqy\":\"o\"},\"id\":\"jopackyhydv\",\"name\":\"kmfngpmillxgjs\",\"type\":\"izwgsoriobijeiyd\"}")
            .toObject(NetworkTapRuleInner.class);
        Assertions.assertEquals("aslavxj", model.location());
        Assertions.assertEquals("o", model.tags().get("pieidzlvssqy"));
        Assertions.assertEquals(PollingIntervalInSeconds.NINE_ZERO, model.pollingIntervalInSeconds());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("fooy", model.tapRulesUrl());
        Assertions.assertEquals("dtzcqi", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(3768764619279475619L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("xlantolamlbijuxk",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(Layer4Protocol.TCP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(TapRuleActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("wxsuy", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.FALSE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("rfgslglhpry", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("zihuioaeo",
            model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("katprytgrhzbq", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("wrp", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("ht", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("zcttbqgdirdam",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("cgytoxuw", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("nzqsaqmebgszpl",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
        Assertions.assertEquals("glxrkgjnm", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapRuleInner model = new NetworkTapRuleInner().withLocation("aslavxj")
            .withTags(mapOf("pieidzlvssqy", "o"))
            .withPollingIntervalInSeconds(PollingIntervalInSeconds.NINE_ZERO)
            .withConfigurationType(ConfigurationType.FILE)
            .withTapRulesUrl("fooy")
            .withMatchConfigurations(Arrays.asList(
                new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("dtzcqi")
                    .withSequenceNumber(3768764619279475619L)
                    .withIpAddressType(IpAddressType.IPV6)
                    .withMatchConditions(Arrays.asList(new NetworkTapRuleMatchCondition()
                        .withProtocolTypes(Arrays.asList("xlantolamlbijuxk", "llczipvwdt", "ckzdqiqdlra"))
                        .withVlanMatchCondition(new VlanMatchCondition())
                        .withIpCondition(new IpMatchCondition())
                        .withEncapsulationType(EncapsulationType.GTPV1)
                        .withPortCondition(new PortCondition().withLayer4Protocol(Layer4Protocol.TCP))))
                    .withActions(Arrays.asList(new NetworkTapRuleAction().withType(TapRuleActionType.LOG)
                        .withTruncate("wxsuy")
                        .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                        .withDestinationId("rfgslglhpry")
                        .withMatchConfigurationName("zihuioaeo"))),
                new NetworkTapRuleMatchConfiguration().withMatchConfigurationName("ajtfey")
                    .withSequenceNumber(8432449142241405654L)
                    .withIpAddressType(IpAddressType.IPV4)
                    .withMatchConditions(Arrays.asList(new NetworkTapRuleMatchCondition()
                        .withProtocolTypes(Arrays.asList("beuuqutkzwtjwwg", "zytijcx"))
                        .withVlanMatchCondition(new VlanMatchCondition())
                        .withIpCondition(new IpMatchCondition())
                        .withEncapsulationType(EncapsulationType.NONE)
                        .withPortCondition(new PortCondition().withLayer4Protocol(Layer4Protocol.UDP))))
                    .withActions(Arrays.asList(new NetworkTapRuleAction().withType(TapRuleActionType.REDIRECT)
                        .withTruncate("dydhqkkkb")
                        .withIsTimestampEnabled(BooleanEnumProperty.FALSE)
                        .withDestinationId("catuqbhpowcnx")
                        .withMatchConfigurationName("zdlys")))))
            .withDynamicMatchConfigurations(Arrays.asList(
                new CommonDynamicMatchConfiguration()
                    .withIpGroups(Arrays.asList(new IpGroupProperties().withName("katprytgrhzbq")
                        .withIpAddressType(IpAddressType.IPV4)
                        .withIpPrefixes(Arrays.asList("wrp"))))
                    .withVlanGroups(Arrays.asList(
                        new VlanGroupProperties().withName("ht").withVlans(Arrays.asList("zcttbqgdirdam")),
                        new VlanGroupProperties().withName("zjgcfjfx")
                            .withVlans(Arrays.asList("jjirmuydgftt", "dofgeoagfuoftnx")),
                        new VlanGroupProperties().withName("wxmdaj").withVlans(Arrays.asList("g", "gsevmdm")),
                        new VlanGroupProperties().withName("nlrstgf")
                            .withVlans(Arrays.asList("j", "n", "idt", "vamyyznmrgcdo"))))
                    .withPortGroups(Arrays.asList(new PortGroupProperties().withName("cgytoxuw")
                        .withPorts(Arrays.asList("nzqsaqmebgszpl", "sdekpdzz")))),
                new CommonDynamicMatchConfiguration()
                    .withIpGroups(Arrays.asList(
                        new IpGroupProperties().withName("pgvokyejidbd")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("nycwz", "lv", "wsnmrkkyjt", "epwpwfk")),
                        new IpGroupProperties().withName("uxuva")
                            .withIpAddressType(IpAddressType.IPV4)
                            .withIpPrefixes(Arrays.asList("dofuckclb")),
                        new IpGroupProperties().withName("luevsolzwilfng")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("ebuuxjx", "fxfjwp", "kktpmbmxbmbr", "gzzxljbkhxsd")),
                        new IpGroupProperties().withName("au")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("weqjfyxydgto", "vq", "vwglgwzpv", "akglhpsesrfga"))))
                    .withVlanGroups(Arrays.asList(
                        new VlanGroupProperties().withName("dvxcgdhyhgoqgsoy")
                            .withVlans(Arrays.asList("yjrcbqpb", "spglq", "o")),
                        new VlanGroupProperties().withName("dahneaoovty")
                            .withVlans(Arrays.asList("ivfwjlofze", "fsr"))))
                    .withPortGroups(Arrays.asList(
                        new PortGroupProperties().withName("la").withPorts(Arrays.asList("foc", "hapejov")),
                        new PortGroupProperties().withName("wxn")
                            .withPorts(Arrays.asList("hnoyrzaaoeeh", "mjenvjeatea", "xc")),
                        new PortGroupProperties().withName("oxdjxldnaryy")
                            .withPorts(Arrays.asList("kd", "lrndwdbvxvza", "edoyqxlunkft", "mcxqqxmyzklao")))),
                new CommonDynamicMatchConfiguration()
                    .withIpGroups(Arrays.asList(
                        new IpGroupProperties().withName("hrvmzrqrazadi")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("aslkskhjqjpvba", "hxjtgzgtai")),
                        new IpGroupProperties().withName("b")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("gbsfsgsaenwldf", "hljqlxsp", "rjc"))))
                    .withVlanGroups(Arrays.asList(new VlanGroupProperties().withName("dsxebuhsxrz")
                        .withVlans(Arrays.asList("sdaluyckhefrbhs", "uerbgpxebjl", "dcaytujraxd"))))
                    .withPortGroups(
                        Arrays.asList(new PortGroupProperties().withName("jmgtnsew").withPorts(Arrays.asList("ly")),
                            new PortGroupProperties().withName("vvyljurkepose")
                                .withPorts(Arrays.asList("ylmpctwjwdsd", "zmk", "erxxxoteehkhowgo", "vvh")),
                            new PortGroupProperties().withName("wpcbapnpxr")
                                .withPorts(Arrays.asList("wbmpspfeylqloc", "vujex"))))))
            .withAnnotation("glxrkgjnm");
        model = BinaryData.fromObject(model).toObject(NetworkTapRuleInner.class);
        Assertions.assertEquals("aslavxj", model.location());
        Assertions.assertEquals("o", model.tags().get("pieidzlvssqy"));
        Assertions.assertEquals(PollingIntervalInSeconds.NINE_ZERO, model.pollingIntervalInSeconds());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("fooy", model.tapRulesUrl());
        Assertions.assertEquals("dtzcqi", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(3768764619279475619L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("xlantolamlbijuxk",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals(EncapsulationType.GTPV1,
            model.matchConfigurations().get(0).matchConditions().get(0).encapsulationType());
        Assertions.assertEquals(Layer4Protocol.TCP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(TapRuleActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("wxsuy", model.matchConfigurations().get(0).actions().get(0).truncate());
        Assertions.assertEquals(BooleanEnumProperty.FALSE,
            model.matchConfigurations().get(0).actions().get(0).isTimestampEnabled());
        Assertions.assertEquals("rfgslglhpry", model.matchConfigurations().get(0).actions().get(0).destinationId());
        Assertions.assertEquals("zihuioaeo",
            model.matchConfigurations().get(0).actions().get(0).matchConfigurationName());
        Assertions.assertEquals("katprytgrhzbq", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("wrp", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("ht", model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("zcttbqgdirdam",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("cgytoxuw", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("nzqsaqmebgszpl",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
        Assertions.assertEquals("glxrkgjnm", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
