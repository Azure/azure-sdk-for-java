// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPatch;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AclActionType;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListPatch model = BinaryData.fromString(
            "{\"properties\":{\"annotation\":\"yavluwmncstt\",\"configurationType\":\"File\",\"aclsUrl\":\"bvpoekrsgsgbdhu\",\"defaultAction\":\"Deny\",\"matchConfigurations\":[{\"matchConfigurationName\":\"gkynscliqh\",\"sequenceNumber\":1086161776680069290,\"ipAddressType\":\"IPv6\",\"matchConditions\":[{\"etherTypes\":[\"u\",\"otppnv\",\"xz\"],\"fragments\":[\"hfrbbc\",\"vqagtltdhlf\",\"qojpy\"],\"ipLengths\":[\"trdcnifmzzs\"],\"ttlValues\":[\"brn\"],\"dscpMarkings\":[\"xmprafwg\"],\"portCondition\":{\"layer4Protocol\":\"UDP\"},\"protocolTypes\":[\"xvd\",\"ffwafq\",\"oudaspavehhrvk\",\"unzo\"],\"vlanMatchCondition\":{},\"ipCondition\":{}}],\"actions\":[{\"type\":\"Log\",\"counterName\":\"moy\"},{\"type\":\"Drop\",\"counterName\":\"uibhmfdnbzydvfv\"},{\"type\":\"Drop\",\"counterName\":\"aeoisrvh\"},{\"type\":\"Drop\",\"counterName\":\"ffukiscvw\"}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{\"name\":\"efaxvxilc\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"nzeyqxtjj\"]}],\"vlanGroups\":[{\"name\":\"qhycavodggxdbees\",\"vlans\":[\"knlrariaawiuagy\",\"wqfbylyrfgiagt\"]},{\"name\":\"jocqwogfnzjvusf\",\"vlans\":[\"mozuxylfsb\",\"kadpysown\"]},{\"name\":\"gkbugrjqct\",\"vlans\":[\"mi\",\"of\"]}],\"portGroups\":[{\"name\":\"efojyqdhcupl\",\"ports\":[\"cwkhihi\",\"lhzdsqtzb\",\"rgnowcjhfgm\"]},{\"name\":\"cact\",\"ports\":[\"oteyowc\",\"uqovekqvgqouwif\"]},{\"name\":\"pjwyiv\",\"ports\":[\"f\",\"cvhrfsp\",\"uagrttikteusqc\"]},{\"name\":\"vyklxuby\",\"ports\":[\"fmmfblcqcu\"]}]},{\"ipGroups\":[{\"name\":\"ibrta\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"t\",\"gdslqxihhrmoo\"]},{\"name\":\"qseypxiutcxa\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"petogebjox\",\"lhvnhlab\",\"q\",\"kkzjcjbtrga\"]},{\"name\":\"vvib\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"toqbeitpkxztmoob\"]},{\"name\":\"ft\",\"ipAddressType\":\"IPv6\",\"ipPrefixes\":[\"wqmpimaqxzhemjyh\"]}],\"vlanGroups\":[{\"name\":\"swtwkozzwc\",\"vlans\":[\"bawpfajnjwltlwt\"]}],\"portGroups\":[{\"name\":\"ktalhsnvkcdmxz\",\"ports\":[\"aimlnwiaaom\",\"l\"]}]},{\"ipGroups\":[{\"name\":\"ulcsethwwnpj\",\"ipAddressType\":\"IPv4\",\"ipPrefixes\":[\"wpchwahf\",\"ousnfepgfewe\",\"wlyxgncxyk\",\"hdjhlimmbcx\"]}],\"vlanGroups\":[{\"name\":\"po\",\"vlans\":[\"xcjzhqizxfpxt\",\"qscjavftjuh\",\"qaz\",\"mtggu\"]},{\"name\":\"ijr\",\"vlans\":[\"ivmmghfcfiwrxgk\",\"euvyinzqodfvpgs\"]},{\"name\":\"xgsg\",\"vlans\":[\"gzdjtxvzf\",\"bqvgaqv\",\"gafcqu\"]},{\"name\":\"dvetnws\",\"vlans\":[\"tnwlduycv\"]}],\"portGroups\":[{\"name\":\"rmewipmve\",\"ports\":[\"ukuqgsj\",\"xundxgk\"]},{\"name\":\"wzhhzjhfjmhvvmuv\",\"ports\":[\"uneqsxvmhf\"]},{\"name\":\"zjyi\",\"ports\":[\"sbhud\"]},{\"name\":\"ohyuemslynsq\",\"ports\":[\"foobrlttyms\",\"nygq\"]}]}]},\"tags\":{\"yvi\":\"wqzdzgtilaxhnfhq\",\"ti\":\"ouwivkxoyzunbixx\"}}")
            .toObject(AccessControlListPatch.class);
        Assertions.assertEquals("wqzdzgtilaxhnfhq", model.tags().get("yvi"));
        Assertions.assertEquals("yavluwmncstt", model.annotation());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("bvpoekrsgsgbdhu", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("gkynscliqh", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(1086161776680069290L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("xvd",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("u", model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("hfrbbc",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("trdcnifmzzs",
            model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("brn", model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("xmprafwg",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(AclActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("moy", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("efaxvxilc", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("nzeyqxtjj",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("qhycavodggxdbees",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("knlrariaawiuagy",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("efojyqdhcupl", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("cwkhihi",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListPatch model = new AccessControlListPatch()
            .withTags(mapOf("yvi", "wqzdzgtilaxhnfhq", "ti", "ouwivkxoyzunbixx"))
            .withAnnotation("yavluwmncstt")
            .withConfigurationType(ConfigurationType.FILE)
            .withAclsUrl("bvpoekrsgsgbdhu")
            .withDefaultAction(CommunityActionTypes.DENY)
            .withMatchConfigurations(Arrays.asList(new AccessControlListMatchConfiguration()
                .withMatchConfigurationName("gkynscliqh")
                .withSequenceNumber(1086161776680069290L)
                .withIpAddressType(IpAddressType.IPV6)
                .withMatchConditions(Arrays.asList(new AccessControlListMatchCondition()
                    .withProtocolTypes(Arrays.asList("xvd", "ffwafq", "oudaspavehhrvk", "unzo"))
                    .withVlanMatchCondition(new VlanMatchCondition())
                    .withIpCondition(new IpMatchCondition())
                    .withEtherTypes(Arrays.asList("u", "otppnv", "xz"))
                    .withFragments(Arrays.asList("hfrbbc", "vqagtltdhlf", "qojpy"))
                    .withIpLengths(Arrays.asList("trdcnifmzzs"))
                    .withTtlValues(Arrays.asList("brn"))
                    .withDscpMarkings(Arrays.asList("xmprafwg"))
                    .withPortCondition(new AccessControlListPortCondition().withLayer4Protocol(Layer4Protocol.UDP))))
                .withActions(
                    Arrays.asList(new AccessControlListAction().withType(AclActionType.LOG).withCounterName("moy"),
                        new AccessControlListAction().withType(AclActionType.DROP).withCounterName("uibhmfdnbzydvfv"),
                        new AccessControlListAction().withType(AclActionType.DROP).withCounterName("aeoisrvh"),
                        new AccessControlListAction().withType(AclActionType.DROP).withCounterName("ffukiscvw")))))
            .withDynamicMatchConfigurations(Arrays.asList(
                new CommonDynamicMatchConfiguration()
                    .withIpGroups(Arrays.asList(new IpGroupProperties().withName("efaxvxilc")
                        .withIpAddressType(IpAddressType.IPV4)
                        .withIpPrefixes(Arrays.asList("nzeyqxtjj"))))
                    .withVlanGroups(Arrays.asList(
                        new VlanGroupProperties().withName("qhycavodggxdbees")
                            .withVlans(Arrays.asList("knlrariaawiuagy", "wqfbylyrfgiagt")),
                        new VlanGroupProperties().withName("jocqwogfnzjvusf")
                            .withVlans(Arrays.asList("mozuxylfsb", "kadpysown")),
                        new VlanGroupProperties().withName("gkbugrjqct").withVlans(Arrays.asList("mi", "of"))))
                    .withPortGroups(Arrays.asList(new PortGroupProperties()
                        .withName("efojyqdhcupl")
                        .withPorts(Arrays.asList("cwkhihi", "lhzdsqtzb", "rgnowcjhfgm")),
                        new PortGroupProperties().withName("cact")
                            .withPorts(Arrays.asList("oteyowc", "uqovekqvgqouwif")),
                        new PortGroupProperties().withName("pjwyiv")
                            .withPorts(Arrays.asList("f", "cvhrfsp", "uagrttikteusqc")),
                        new PortGroupProperties().withName("vyklxuby").withPorts(Arrays.asList("fmmfblcqcu")))),
                new CommonDynamicMatchConfiguration()
                    .withIpGroups(Arrays.asList(
                        new IpGroupProperties().withName("ibrta")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("t", "gdslqxihhrmoo")),
                        new IpGroupProperties().withName("qseypxiutcxa")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("petogebjox", "lhvnhlab", "q", "kkzjcjbtrga")),
                        new IpGroupProperties().withName("vvib")
                            .withIpAddressType(IpAddressType.IPV4)
                            .withIpPrefixes(Arrays.asList("toqbeitpkxztmoob")),
                        new IpGroupProperties().withName("ft")
                            .withIpAddressType(IpAddressType.IPV6)
                            .withIpPrefixes(Arrays.asList("wqmpimaqxzhemjyh"))))
                    .withVlanGroups(Arrays.asList(
                        new VlanGroupProperties().withName("swtwkozzwc").withVlans(Arrays.asList("bawpfajnjwltlwt"))))
                    .withPortGroups(Arrays.asList(new PortGroupProperties().withName("ktalhsnvkcdmxz")
                        .withPorts(Arrays.asList("aimlnwiaaom", "l")))),
                new CommonDynamicMatchConfiguration()
                    .withIpGroups(Arrays.asList(new IpGroupProperties().withName("ulcsethwwnpj")
                        .withIpAddressType(IpAddressType.IPV4)
                        .withIpPrefixes(Arrays.asList("wpchwahf", "ousnfepgfewe", "wlyxgncxyk", "hdjhlimmbcx"))))
                    .withVlanGroups(Arrays.asList(
                        new VlanGroupProperties().withName("po")
                            .withVlans(Arrays.asList("xcjzhqizxfpxt", "qscjavftjuh", "qaz", "mtggu")),
                        new VlanGroupProperties().withName("ijr")
                            .withVlans(Arrays.asList("ivmmghfcfiwrxgk", "euvyinzqodfvpgs")),
                        new VlanGroupProperties().withName("xgsg")
                            .withVlans(Arrays.asList("gzdjtxvzf", "bqvgaqv", "gafcqu")),
                        new VlanGroupProperties().withName("dvetnws").withVlans(Arrays.asList("tnwlduycv"))))
                    .withPortGroups(Arrays.asList(
                        new PortGroupProperties().withName("rmewipmve").withPorts(Arrays.asList("ukuqgsj", "xundxgk")),
                        new PortGroupProperties().withName("wzhhzjhfjmhvvmuv").withPorts(Arrays.asList("uneqsxvmhf")),
                        new PortGroupProperties().withName("zjyi").withPorts(Arrays.asList("sbhud")),
                        new PortGroupProperties().withName("ohyuemslynsq")
                            .withPorts(Arrays.asList("foobrlttyms", "nygq"))))));
        model = BinaryData.fromObject(model).toObject(AccessControlListPatch.class);
        Assertions.assertEquals("wqzdzgtilaxhnfhq", model.tags().get("yvi"));
        Assertions.assertEquals("yavluwmncstt", model.annotation());
        Assertions.assertEquals(ConfigurationType.FILE, model.configurationType());
        Assertions.assertEquals("bvpoekrsgsgbdhu", model.aclsUrl());
        Assertions.assertEquals(CommunityActionTypes.DENY, model.defaultAction());
        Assertions.assertEquals("gkynscliqh", model.matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(1086161776680069290L, model.matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV6, model.matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("xvd",
            model.matchConfigurations().get(0).matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("u", model.matchConfigurations().get(0).matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("hfrbbc",
            model.matchConfigurations().get(0).matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("trdcnifmzzs",
            model.matchConfigurations().get(0).matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("brn", model.matchConfigurations().get(0).matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("xmprafwg",
            model.matchConfigurations().get(0).matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(Layer4Protocol.UDP,
            model.matchConfigurations().get(0).matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals(AclActionType.LOG, model.matchConfigurations().get(0).actions().get(0).type());
        Assertions.assertEquals("moy", model.matchConfigurations().get(0).actions().get(0).counterName());
        Assertions.assertEquals("efaxvxilc", model.dynamicMatchConfigurations().get(0).ipGroups().get(0).name());
        Assertions.assertEquals(IpAddressType.IPV4,
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipAddressType());
        Assertions.assertEquals("nzeyqxtjj",
            model.dynamicMatchConfigurations().get(0).ipGroups().get(0).ipPrefixes().get(0));
        Assertions.assertEquals("qhycavodggxdbees",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).name());
        Assertions.assertEquals("knlrariaawiuagy",
            model.dynamicMatchConfigurations().get(0).vlanGroups().get(0).vlans().get(0));
        Assertions.assertEquals("efojyqdhcupl", model.dynamicMatchConfigurations().get(0).portGroups().get(0).name());
        Assertions.assertEquals("cwkhihi",
            model.dynamicMatchConfigurations().get(0).portGroups().get(0).ports().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
