// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRoute;
import com.azure.resourcemanager.managednetworkfabric.models.AggregateRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnetRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3IsolationDomain;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeConnectedSubnets;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeStaticRoutes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3IsolationDomainsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"networkFabricId\":\"qr\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"RMA\",\"redistributeConnectedSubnets\":\"True\",\"redistributeStaticRoutes\":\"False\",\"aggregateRouteConfiguration\":{\"ipv4Routes\":[{\"prefix\":\"lcrqaxlmbr\"}],\"ipv6Routes\":[{\"prefix\":\"golmlplg\"},{\"prefix\":\"layyxhxjvoys\"},{\"prefix\":\"aqqjh\"}]},\"connectedSubnetRoutePolicy\":{\"exportRoutePolicyId\":\"faob\",\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"csbozvcdqw\",\"exportIpv6RoutePolicyId\":\"ydvwr\"}},\"annotation\":\"ivywotjnjuvtzijr\"},\"location\":\"xbaeyocpkvlt\",\"tags\":{\"oztnhvd\":\"zfmnpbdrcibjxnn\"},\"id\":\"u\",\"name\":\"amqobqehs\",\"type\":\"sht\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        L3IsolationDomain response
            = manager.l3IsolationDomains()
                .define("paptgvnaqyjuk")
                .withRegion("ktthbmrrmtrx")
                .withExistingResourceGroup("itn")
                .withNetworkFabricId("ajnnewltonop")
                .withTags(mapOf("zwawpewajc", "pdvr", "guzprpxhhboigzxk", "sdjuzmuijtickzo", "va", "pqlrzhtocjzfppex"))
                .withRedistributeConnectedSubnets(RedistributeConnectedSubnets.FALSE)
                .withRedistributeStaticRoutes(RedistributeStaticRoutes.TRUE)
                .withAggregateRouteConfiguration(
                    new AggregateRouteConfiguration()
                        .withIpv4Routes(Arrays.asList(new AggregateRoute().withPrefix("hzbfcdikqn")))
                        .withIpv6Routes(Arrays.asList(new AggregateRoute().withPrefix("gzfo"),
                            new AggregateRoute().withPrefix("qz"), new AggregateRoute().withPrefix("uspaywvs"),
                            new AggregateRoute().withPrefix("qeron"))))
                .withConnectedSubnetRoutePolicy(new ConnectedSubnetRoutePolicy().withExportRoutePolicyId("fkxfmuwdbv")
                    .withExportRoutePolicy(new L3ExportRoutePolicy().withExportIpv4RoutePolicyId("avouymkd")
                        .withExportIpv6RoutePolicyId("qxlv")))
                .withAnnotation("fdkaxgbiwpgop")
                .create();

        Assertions.assertEquals("xbaeyocpkvlt", response.location());
        Assertions.assertEquals("zfmnpbdrcibjxnn", response.tags().get("oztnhvd"));
        Assertions.assertEquals("qr", response.networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.TRUE, response.redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.FALSE, response.redistributeStaticRoutes());
        Assertions.assertEquals("lcrqaxlmbr", response.aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("golmlplg", response.aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("faob", response.connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("csbozvcdqw",
            response.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("ydvwr",
            response.connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("ivywotjnjuvtzijr", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
