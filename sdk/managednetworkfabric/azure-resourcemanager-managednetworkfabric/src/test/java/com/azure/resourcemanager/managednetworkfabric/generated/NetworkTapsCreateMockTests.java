// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.DestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.Encapsulation;
import com.azure.resourcemanager.managednetworkfabric.models.IsolationDomainProperties;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTap;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapPropertiesDestinationsItem;
import com.azure.resourcemanager.managednetworkfabric.models.PollingType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkTapsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"networkPacketBrokerId\":\"j\",\"sourceTapRuleId\":\"kyxowno\",\"destinations\":[{\"name\":\"ussxiajicrs\",\"destinationType\":\"Direct\",\"destinationId\":\"xlopnccaxtp\",\"isolationDomainProperties\":{\"encapsulation\":\"None\",\"neighborGroupIds\":[\"ijlwr\"]},\"destinationTapRuleId\":\"abzjpgh\"},{\"name\":\"gpceqakl\",\"destinationType\":\"IsolationDomain\",\"destinationId\":\"rxix\",\"isolationDomainProperties\":{\"encapsulation\":\"GRE\",\"neighborGroupIds\":[\"nhsfjxtusbjxpuo\",\"kdpts\"]},\"destinationTapRuleId\":\"gtplonalpwaulkwu\"},{\"name\":\"sjwnwn\",\"destinationType\":\"Direct\",\"destinationId\":\"fgtmu\",\"isolationDomainProperties\":{\"encapsulation\":\"None\",\"neighborGroupIds\":[\"qvz\",\"ikxufuwcajyezlk\",\"iveftugiwsvlfp\",\"bpnrgnxwrfu\"]},\"destinationTapRuleId\":\"aysf\"}],\"pollingType\":\"Push\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Enabled\",\"annotation\":\"cjclvbqovk\"},\"location\":\"eytphnazpgvfcubx\",\"tags\":{\"fuupqkrzvd\":\"hedbqrlbyhz\",\"hhpwxghwwfq\":\"pcevbkkgqfjwg\"},\"id\":\"wysmsqqmdajsqe\",\"name\":\"xftyifadsliifdr\",\"type\":\"sr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkTap response = manager.networkTaps()
            .define("tanlvoorvzhd")
            .withRegion("gnwhldctnwchuq")
            .withExistingResourceGroup("ynvck")
            .withNetworkPacketBrokerId("cq")
            .withDestinations(Arrays.asList(
                new NetworkTapPropertiesDestinationsItem().withName("egxlzd")
                    .withDestinationType(DestinationType.ISOLATION_DOMAIN)
                    .withDestinationId("tzkm")
                    .withIsolationDomainProperties(new IsolationDomainProperties().withEncapsulation(Encapsulation.NONE)
                        .withNeighborGroupIds(Arrays.asList("wosmnwsffia", "fd", "r")))
                    .withDestinationTapRuleId("xir"),
                new NetworkTapPropertiesDestinationsItem().withName("kmozkdqzhr")
                    .withDestinationType(DestinationType.DIRECT)
                    .withDestinationId("vpyznjwm")
                    .withIsolationDomainProperties(new IsolationDomainProperties().withEncapsulation(Encapsulation.GRE)
                        .withNeighborGroupIds(Arrays.asList("jbzzwsesqy", "ktvofgxorhsxcs")))
                    .withDestinationTapRuleId("xcmepkpx"),
                new NetworkTapPropertiesDestinationsItem().withName("xynkubwk")
                    .withDestinationType(DestinationType.DIRECT)
                    .withDestinationId("lnbyiowetwwjv")
                    .withIsolationDomainProperties(new IsolationDomainProperties().withEncapsulation(Encapsulation.GRE)
                        .withNeighborGroupIds(Arrays.asList("vgebfeit", "a", "tecvttkgopdj")))
                    .withDestinationTapRuleId("sicucqteciexscxh"),
                new NetworkTapPropertiesDestinationsItem().withName("jjlypwgwbycfamui")
                    .withDestinationType(DestinationType.DIRECT)
                    .withDestinationId("pygothisirhh")
                    .withIsolationDomainProperties(new IsolationDomainProperties().withEncapsulation(Encapsulation.NONE)
                        .withNeighborGroupIds(Arrays.asList("gpymyerpusozaou", "jliwbnwdkgb", "joy", "ptnokdoqxkzeow")))
                    .withDestinationTapRuleId("vje")))
            .withTags(mapOf("edrbzzb", "nmtnlcvlmrv"))
            .withPollingType(PollingType.PUSH)
            .withAnnotation("xxboauvkkc")
            .create();

        Assertions.assertEquals("eytphnazpgvfcubx", response.location());
        Assertions.assertEquals("hedbqrlbyhz", response.tags().get("fuupqkrzvd"));
        Assertions.assertEquals("j", response.networkPacketBrokerId());
        Assertions.assertEquals("ussxiajicrs", response.destinations().get(0).name());
        Assertions.assertEquals(DestinationType.DIRECT, response.destinations().get(0).destinationType());
        Assertions.assertEquals("xlopnccaxtp", response.destinations().get(0).destinationId());
        Assertions.assertEquals(Encapsulation.NONE,
            response.destinations().get(0).isolationDomainProperties().encapsulation());
        Assertions.assertEquals("ijlwr",
            response.destinations().get(0).isolationDomainProperties().neighborGroupIds().get(0));
        Assertions.assertEquals("abzjpgh", response.destinations().get(0).destinationTapRuleId());
        Assertions.assertEquals(PollingType.PUSH, response.pollingType());
        Assertions.assertEquals("cjclvbqovk", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
