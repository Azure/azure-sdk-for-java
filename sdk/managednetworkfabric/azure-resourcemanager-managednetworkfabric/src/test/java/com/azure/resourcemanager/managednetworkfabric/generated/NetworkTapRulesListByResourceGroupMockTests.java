// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRule;
import com.azure.resourcemanager.managednetworkfabric.models.PollingIntervalInSeconds;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkTapRulesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"networkTapId\":\"qgmztlrubn\",\"pollingIntervalInSeconds\":30,\"lastSyncedTime\":\"2021-08-02T08:13:49Z\",\"configurationState\":\"Succeeded\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"Enabled\",\"configurationType\":\"Inline\",\"tapRulesUrl\":\"airoog\",\"matchConfigurations\":[{\"matchConfigurationName\":\"obdqiuppavqovijp\",\"sequenceNumber\":2060601150098446573,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{},{},{}],\"actions\":[{},{}]},{\"matchConfigurationName\":\"b\",\"sequenceNumber\":8549993605129343385,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{},{},{},{}],\"actions\":[{},{}]}],\"dynamicMatchConfigurations\":[{\"ipGroups\":[{},{}],\"vlanGroups\":[{},{},{},{}],\"portGroups\":[{},{},{}]},{\"ipGroups\":[{},{}],\"vlanGroups\":[{},{},{},{}],\"portGroups\":[{},{},{}]}],\"annotation\":\"jefl\"},\"location\":\"ieeqjdfxx\",\"tags\":{\"rijbiterqfu\":\"duxkepga\",\"dd\":\"errcanlpf\",\"qawupqkvmy\":\"wpg\"},\"id\":\"ueefrxzwvcvtjd\",\"name\":\"dagwxjafbdvpcd\",\"type\":\"dbjzxrpxji\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NetworkTapRule> response
            = manager.networkTapRules().listByResourceGroup("jxr", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ieeqjdfxx", response.iterator().next().location());
        Assertions.assertEquals("duxkepga", response.iterator().next().tags().get("rijbiterqfu"));
        Assertions.assertEquals(PollingIntervalInSeconds.THREE_ZERO,
            response.iterator().next().pollingIntervalInSeconds());
        Assertions.assertEquals(ConfigurationType.INLINE, response.iterator().next().configurationType());
        Assertions.assertEquals("airoog", response.iterator().next().tapRulesUrl());
        Assertions.assertEquals("obdqiuppavqovijp",
            response.iterator().next().matchConfigurations().get(0).matchConfigurationName());
        Assertions.assertEquals(2060601150098446573L,
            response.iterator().next().matchConfigurations().get(0).sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4,
            response.iterator().next().matchConfigurations().get(0).ipAddressType());
        Assertions.assertEquals("jefl", response.iterator().next().annotation());
    }
}
