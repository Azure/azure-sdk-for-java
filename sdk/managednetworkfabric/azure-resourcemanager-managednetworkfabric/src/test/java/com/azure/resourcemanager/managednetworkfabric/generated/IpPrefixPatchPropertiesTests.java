// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpPrefixPatchProperties;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpPrefixPatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpPrefixPatchProperties model =
            BinaryData
                .fromString(
                    "{\"ipPrefixRules\":[{\"action\":\"Permit\",\"sequenceNumber\":7178657558999191056,\"networkPrefix\":\"sbede\",\"condition\":\"GreaterThanOrEqualTo\",\"subnetMaskLength\":\"k\"}],\"annotation\":\"hxvucnu\"}")
                .toObject(IpPrefixPatchProperties.class);
        Assertions.assertEquals("hxvucnu", model.annotation());
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(7178657558999191056L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("sbede", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.GREATER_THAN_OR_EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("k", model.ipPrefixRules().get(0).subnetMaskLength());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpPrefixPatchProperties model =
            new IpPrefixPatchProperties()
                .withAnnotation("hxvucnu")
                .withIpPrefixRules(
                    Arrays
                        .asList(
                            new IpPrefixRule()
                                .withAction(CommunityActionTypes.PERMIT)
                                .withSequenceNumber(7178657558999191056L)
                                .withNetworkPrefix("sbede")
                                .withCondition(Condition.GREATER_THAN_OR_EQUAL_TO)
                                .withSubnetMaskLength("k")));
        model = BinaryData.fromObject(model).toObject(IpPrefixPatchProperties.class);
        Assertions.assertEquals("hxvucnu", model.annotation());
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(7178657558999191056L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("sbede", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.GREATER_THAN_OR_EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("k", model.ipPrefixRules().get(0).subnetMaskLength());
    }
}
