// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternalNetworkInner;
import com.azure.resourcemanager.managednetworkfabric.models.AllowASOverride;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.ConnectedSubnet;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.Extension;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesBgpConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPropertiesStaticRouteConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworksList;
import com.azure.resourcemanager.managednetworkfabric.models.IsMonitoringEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborAddress;
import com.azure.resourcemanager.managednetworkfabric.models.StaticRouteProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InternalNetworksListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternalNetworksList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"vlanId\":100725241,\"bgpConfiguration\":{\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":873495468,\"multiplier\":1300228553},\"defaultRouteOriginate\":\"True\",\"allowAS\":1735235828,\"allowASOverride\":\"Enable\",\"fabricASN\":3930750995945071444,\"peerASN\":7347121529091171836,\"ipv4ListenRangePrefixes\":[\"cueljtiahxmfq\",\"yarvsxzqbglcjk\",\"yspthzod\",\"btl\"],\"ipv6ListenRangePrefixes\":[\"gblioskkfmkm\",\"djxyxgbkkqvjcteo\",\"dlrslskk\"],\"ipv4NeighborAddress\":[{}],\"ipv6NeighborAddress\":[{},{},{},{}],\"annotation\":\"zdpv\"},\"staticRouteConfiguration\":{\"extension\":\"NoExtension\",\"bfdConfiguration\":{\"administrativeState\":\"Disabled\",\"intervalInMilliSeconds\":1286292074,\"multiplier\":2105029866},\"ipv4Routes\":[{\"prefix\":\"snggytexvzilmhiv\",\"nextHop\":[]},{\"prefix\":\"kwwwnckn\",\"nextHop\":[]},{\"prefix\":\"zdajlskzptjxu\",\"nextHop\":[]},{\"prefix\":\"weucyrth\",\"nextHop\":[]}],\"ipv6Routes\":[{\"prefix\":\"ehmcgcje\",\"nextHop\":[]},{\"prefix\":\"n\",\"nextHop\":[]},{\"prefix\":\"ehokamvfej\",\"nextHop\":[]},{\"prefix\":\"qnttmbq\",\"nextHop\":[]}]},\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"RMA\",\"mtu\":955211490,\"connectedIPv4Subnets\":[{\"prefix\":\"ysthhza\",\"annotation\":\"fwy\"},{\"prefix\":\"rlhgenuze\",\"annotation\":\"vkvebaqsz\"}],\"connectedIPv6Subnets\":[{\"prefix\":\"zlsmmdqgmihzpim\",\"annotation\":\"rh\"}],\"importRoutePolicyId\":\"t\",\"exportRoutePolicyId\":\"nklogxsvtzarhzv\",\"importRoutePolicy\":{\"importIpv4RoutePolicyId\":\"qktcmbjwzzo\",\"importIpv6RoutePolicyId\":\"pkybtgl\"},\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"pgajsqjce\",\"exportIpv6RoutePolicyId\":\"bmfuvqarwzxu\"},\"ingressAclId\":\"ebluimmbwx\",\"egressAclId\":\"gtdmbvx\",\"isMonitoringEnabled\":\"False\",\"extension\":\"NPB\",\"annotation\":\"qkbud\"},\"id\":\"waokbavlytta\",\"name\":\"knwfrkebsmhpdujd\",\"type\":\"gatolekscbctnan\"}],\"nextLink\":\"mwbzxpdc\"}")
            .toObject(InternalNetworksList.class);
        Assertions.assertEquals(100725241, model.value().get(0).vlanId());
        Assertions.assertEquals("zdpv", model.value().get(0).bgpConfiguration().annotation());
        Assertions.assertEquals(873495468,
            model.value().get(0).bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1300228553, model.value().get(0).bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.TRUE,
            model.value().get(0).bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1735235828, model.value().get(0).bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.value().get(0).bgpConfiguration().allowASOverride());
        Assertions.assertEquals(7347121529091171836L, model.value().get(0).bgpConfiguration().peerAsn());
        Assertions.assertEquals("cueljtiahxmfq",
            model.value().get(0).bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("gblioskkfmkm",
            model.value().get(0).bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals(1286292074,
            model.value().get(0).staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(2105029866,
            model.value().get(0).staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("snggytexvzilmhiv",
            model.value().get(0).staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("ehmcgcje",
            model.value().get(0).staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals(Extension.NO_EXTENSION, model.value().get(0).staticRouteConfiguration().extension());
        Assertions.assertEquals(955211490, model.value().get(0).mtu());
        Assertions.assertEquals("fwy", model.value().get(0).connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("ysthhza", model.value().get(0).connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("rh", model.value().get(0).connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("zlsmmdqgmihzpim", model.value().get(0).connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("t", model.value().get(0).importRoutePolicyId());
        Assertions.assertEquals("nklogxsvtzarhzv", model.value().get(0).exportRoutePolicyId());
        Assertions.assertEquals("qktcmbjwzzo", model.value().get(0).importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("pkybtgl", model.value().get(0).importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("pgajsqjce", model.value().get(0).exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("bmfuvqarwzxu", model.value().get(0).exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("ebluimmbwx", model.value().get(0).ingressAclId());
        Assertions.assertEquals("gtdmbvx", model.value().get(0).egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.value().get(0).isMonitoringEnabled());
        Assertions.assertEquals(Extension.NPB, model.value().get(0).extension());
        Assertions.assertEquals("qkbud", model.value().get(0).annotation());
        Assertions.assertEquals("mwbzxpdc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternalNetworksList model
            = new InternalNetworksList().withValue(Arrays.asList(new InternalNetworkInner().withVlanId(100725241)
                .withBgpConfiguration(new InternalNetworkPropertiesBgpConfiguration().withAnnotation("zdpv")
                    .withBfdConfiguration(
                        new BfdConfiguration().withIntervalInMilliSeconds(873495468).withMultiplier(1300228553))
                    .withDefaultRouteOriginate(BooleanEnumProperty.TRUE)
                    .withAllowAS(1735235828)
                    .withAllowASOverride(AllowASOverride.ENABLE)
                    .withPeerAsn(7347121529091171836L)
                    .withIpv4ListenRangePrefixes(Arrays.asList("cueljtiahxmfq", "yarvsxzqbglcjk", "yspthzod", "btl"))
                    .withIpv6ListenRangePrefixes(Arrays.asList("gblioskkfmkm", "djxyxgbkkqvjcteo", "dlrslskk"))
                    .withIpv4NeighborAddress(Arrays.asList(new NeighborAddress()))
                    .withIpv6NeighborAddress(Arrays.asList(new NeighborAddress(), new NeighborAddress(),
                        new NeighborAddress(), new NeighborAddress())))
                .withStaticRouteConfiguration(new InternalNetworkPropertiesStaticRouteConfiguration()
                    .withBfdConfiguration(
                        new BfdConfiguration().withIntervalInMilliSeconds(1286292074).withMultiplier(2105029866))
                    .withIpv4Routes(Arrays.asList(
                        new StaticRouteProperties().withPrefix("snggytexvzilmhiv").withNextHop(Arrays.asList()),
                        new StaticRouteProperties().withPrefix("kwwwnckn").withNextHop(Arrays.asList()),
                        new StaticRouteProperties().withPrefix("zdajlskzptjxu").withNextHop(Arrays.asList()),
                        new StaticRouteProperties().withPrefix("weucyrth").withNextHop(Arrays.asList())))
                    .withIpv6Routes(
                        Arrays.asList(new StaticRouteProperties().withPrefix("ehmcgcje").withNextHop(Arrays.asList()),
                            new StaticRouteProperties().withPrefix("n").withNextHop(Arrays.asList()),
                            new StaticRouteProperties().withPrefix("ehokamvfej").withNextHop(Arrays.asList()),
                            new StaticRouteProperties().withPrefix("qnttmbq").withNextHop(Arrays.asList())))
                    .withExtension(Extension.NO_EXTENSION))
                .withMtu(955211490)
                .withConnectedIPv4Subnets(
                    Arrays.asList(new ConnectedSubnet().withAnnotation("fwy").withPrefix("ysthhza"),
                        new ConnectedSubnet().withAnnotation("vkvebaqsz").withPrefix("rlhgenuze")))
                .withConnectedIPv6Subnets(
                    Arrays.asList(new ConnectedSubnet().withAnnotation("rh").withPrefix("zlsmmdqgmihzpim")))
                .withImportRoutePolicyId("t")
                .withExportRoutePolicyId("nklogxsvtzarhzv")
                .withImportRoutePolicy(new ImportRoutePolicy().withImportIpv4RoutePolicyId("qktcmbjwzzo")
                    .withImportIpv6RoutePolicyId("pkybtgl"))
                .withExportRoutePolicy(new ExportRoutePolicy().withExportIpv4RoutePolicyId("pgajsqjce")
                    .withExportIpv6RoutePolicyId("bmfuvqarwzxu"))
                .withIngressAclId("ebluimmbwx")
                .withEgressAclId("gtdmbvx")
                .withIsMonitoringEnabled(IsMonitoringEnabled.FALSE)
                .withExtension(Extension.NPB)
                .withAnnotation("qkbud"))).withNextLink("mwbzxpdc");
        model = BinaryData.fromObject(model).toObject(InternalNetworksList.class);
        Assertions.assertEquals(100725241, model.value().get(0).vlanId());
        Assertions.assertEquals("zdpv", model.value().get(0).bgpConfiguration().annotation());
        Assertions.assertEquals(873495468,
            model.value().get(0).bgpConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(1300228553, model.value().get(0).bgpConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals(BooleanEnumProperty.TRUE,
            model.value().get(0).bgpConfiguration().defaultRouteOriginate());
        Assertions.assertEquals(1735235828, model.value().get(0).bgpConfiguration().allowAS());
        Assertions.assertEquals(AllowASOverride.ENABLE, model.value().get(0).bgpConfiguration().allowASOverride());
        Assertions.assertEquals(7347121529091171836L, model.value().get(0).bgpConfiguration().peerAsn());
        Assertions.assertEquals("cueljtiahxmfq",
            model.value().get(0).bgpConfiguration().ipv4ListenRangePrefixes().get(0));
        Assertions.assertEquals("gblioskkfmkm",
            model.value().get(0).bgpConfiguration().ipv6ListenRangePrefixes().get(0));
        Assertions.assertEquals(1286292074,
            model.value().get(0).staticRouteConfiguration().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(2105029866,
            model.value().get(0).staticRouteConfiguration().bfdConfiguration().multiplier());
        Assertions.assertEquals("snggytexvzilmhiv",
            model.value().get(0).staticRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("ehmcgcje",
            model.value().get(0).staticRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals(Extension.NO_EXTENSION, model.value().get(0).staticRouteConfiguration().extension());
        Assertions.assertEquals(955211490, model.value().get(0).mtu());
        Assertions.assertEquals("fwy", model.value().get(0).connectedIPv4Subnets().get(0).annotation());
        Assertions.assertEquals("ysthhza", model.value().get(0).connectedIPv4Subnets().get(0).prefix());
        Assertions.assertEquals("rh", model.value().get(0).connectedIPv6Subnets().get(0).annotation());
        Assertions.assertEquals("zlsmmdqgmihzpim", model.value().get(0).connectedIPv6Subnets().get(0).prefix());
        Assertions.assertEquals("t", model.value().get(0).importRoutePolicyId());
        Assertions.assertEquals("nklogxsvtzarhzv", model.value().get(0).exportRoutePolicyId());
        Assertions.assertEquals("qktcmbjwzzo", model.value().get(0).importRoutePolicy().importIpv4RoutePolicyId());
        Assertions.assertEquals("pkybtgl", model.value().get(0).importRoutePolicy().importIpv6RoutePolicyId());
        Assertions.assertEquals("pgajsqjce", model.value().get(0).exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("bmfuvqarwzxu", model.value().get(0).exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("ebluimmbwx", model.value().get(0).ingressAclId());
        Assertions.assertEquals("gtdmbvx", model.value().get(0).egressAclId());
        Assertions.assertEquals(IsMonitoringEnabled.FALSE, model.value().get(0).isMonitoringEnabled());
        Assertions.assertEquals(Extension.NPB, model.value().get(0).extension());
        Assertions.assertEquals("qkbud", model.value().get(0).annotation());
        Assertions.assertEquals("mwbzxpdc", model.nextLink());
    }
}
