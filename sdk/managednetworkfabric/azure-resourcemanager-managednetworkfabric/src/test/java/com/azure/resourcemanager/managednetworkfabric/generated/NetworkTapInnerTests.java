// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapInner;
import com.azure.resourcemanager.managednetworkfabric.models.DestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.Encapsulation;
import com.azure.resourcemanager.managednetworkfabric.models.IsolationDomainProperties;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapPropertiesDestinationsItem;
import com.azure.resourcemanager.managednetworkfabric.models.PollingType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkTapInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkTapInner model = BinaryData.fromString(
            "{\"properties\":{\"networkPacketBrokerId\":\"gage\",\"sourceTapRuleId\":\"qbugihcdv\",\"destinations\":[{\"name\":\"zorbloejzsax\",\"destinationType\":\"IsolationDomain\",\"destinationId\":\"wvdeppjnaphifkf\",\"isolationDomainProperties\":{\"encapsulation\":\"None\",\"neighborGroupIds\":[\"bpebrmj\",\"nfpgh\"]},\"destinationTapRuleId\":\"ttpkims\"},{\"name\":\"nkkhbykr\",\"destinationType\":\"Direct\",\"destinationId\":\"cmelycpgokut\",\"isolationDomainProperties\":{\"encapsulation\":\"GRE\",\"neighborGroupIds\":[\"zbnv\",\"sh\"]},\"destinationTapRuleId\":\"zzlapyixlvzc\"},{\"name\":\"laebxiau\",\"destinationType\":\"Direct\",\"destinationId\":\"tessjlwjta\",\"isolationDomainProperties\":{\"encapsulation\":\"GRE\",\"neighborGroupIds\":[\"kx\",\"xqayg\",\"slkvcvwp\"]},\"destinationTapRuleId\":\"cj\"}],\"pollingType\":\"Pull\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"Enabled\",\"annotation\":\"onbwhi\"},\"location\":\"yozvrcwfpucw\",\"tags\":{\"oarx\":\"gqefgzjvbxqcb\"},\"id\":\"uuciagvkdlhu\",\"name\":\"u\",\"type\":\"lbjo\"}")
            .toObject(NetworkTapInner.class);
        Assertions.assertEquals("yozvrcwfpucw", model.location());
        Assertions.assertEquals("gqefgzjvbxqcb", model.tags().get("oarx"));
        Assertions.assertEquals("gage", model.networkPacketBrokerId());
        Assertions.assertEquals("zorbloejzsax", model.destinations().get(0).name());
        Assertions.assertEquals(DestinationType.ISOLATION_DOMAIN, model.destinations().get(0).destinationType());
        Assertions.assertEquals("wvdeppjnaphifkf", model.destinations().get(0).destinationId());
        Assertions.assertEquals(Encapsulation.NONE,
            model.destinations().get(0).isolationDomainProperties().encapsulation());
        Assertions.assertEquals("bpebrmj",
            model.destinations().get(0).isolationDomainProperties().neighborGroupIds().get(0));
        Assertions.assertEquals("ttpkims", model.destinations().get(0).destinationTapRuleId());
        Assertions.assertEquals(PollingType.PULL, model.pollingType());
        Assertions.assertEquals("onbwhi", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkTapInner model = new NetworkTapInner().withLocation("yozvrcwfpucw")
            .withTags(mapOf("oarx", "gqefgzjvbxqcb"))
            .withNetworkPacketBrokerId("gage")
            .withDestinations(Arrays.asList(
                new NetworkTapPropertiesDestinationsItem().withName("zorbloejzsax")
                    .withDestinationType(DestinationType.ISOLATION_DOMAIN)
                    .withDestinationId("wvdeppjnaphifkf")
                    .withIsolationDomainProperties(new IsolationDomainProperties().withEncapsulation(Encapsulation.NONE)
                        .withNeighborGroupIds(Arrays.asList("bpebrmj", "nfpgh")))
                    .withDestinationTapRuleId("ttpkims"),
                new NetworkTapPropertiesDestinationsItem().withName("nkkhbykr")
                    .withDestinationType(DestinationType.DIRECT)
                    .withDestinationId("cmelycpgokut")
                    .withIsolationDomainProperties(new IsolationDomainProperties().withEncapsulation(Encapsulation.GRE)
                        .withNeighborGroupIds(Arrays.asList("zbnv", "sh")))
                    .withDestinationTapRuleId("zzlapyixlvzc"),
                new NetworkTapPropertiesDestinationsItem().withName("laebxiau")
                    .withDestinationType(DestinationType.DIRECT)
                    .withDestinationId("tessjlwjta")
                    .withIsolationDomainProperties(new IsolationDomainProperties().withEncapsulation(Encapsulation.GRE)
                        .withNeighborGroupIds(Arrays.asList("kx", "xqayg", "slkvcvwp")))
                    .withDestinationTapRuleId("cj")))
            .withPollingType(PollingType.PULL)
            .withAnnotation("onbwhi");
        model = BinaryData.fromObject(model).toObject(NetworkTapInner.class);
        Assertions.assertEquals("yozvrcwfpucw", model.location());
        Assertions.assertEquals("gqefgzjvbxqcb", model.tags().get("oarx"));
        Assertions.assertEquals("gage", model.networkPacketBrokerId());
        Assertions.assertEquals("zorbloejzsax", model.destinations().get(0).name());
        Assertions.assertEquals(DestinationType.ISOLATION_DOMAIN, model.destinations().get(0).destinationType());
        Assertions.assertEquals("wvdeppjnaphifkf", model.destinations().get(0).destinationId());
        Assertions.assertEquals(Encapsulation.NONE,
            model.destinations().get(0).isolationDomainProperties().encapsulation());
        Assertions.assertEquals("bpebrmj",
            model.destinations().get(0).isolationDomainProperties().neighborGroupIds().get(0));
        Assertions.assertEquals("ttpkims", model.destinations().get(0).destinationTapRuleId());
        Assertions.assertEquals(PollingType.PULL, model.pollingType());
        Assertions.assertEquals("onbwhi", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
