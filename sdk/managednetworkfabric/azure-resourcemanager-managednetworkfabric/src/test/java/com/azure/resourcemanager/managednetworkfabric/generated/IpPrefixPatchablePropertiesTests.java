// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpPrefixPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpPrefixPatchableProperties model =
            BinaryData
                .fromString(
                    "{\"ipPrefixRules\":[{\"action\":\"Permit\",\"sequenceNumber\":7278434712251922443,\"networkPrefix\":\"uyrsrziuctix\",\"condition\":\"EqualTo\",\"subnetMaskLength\":\"uifr\"},{\"action\":\"Permit\",\"sequenceNumber\":7782918375893447021,\"networkPrefix\":\"apezkiswqjmdghs\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"ybjufptb\"},{\"action\":\"Permit\",\"sequenceNumber\":906815829871548771,\"networkPrefix\":\"nciuiyqvldaswvpp\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"zlgcndhzxrrf\"}]}")
                .toObject(IpPrefixPatchableProperties.class);
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(7278434712251922443L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("uyrsrziuctix", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("uifr", model.ipPrefixRules().get(0).subnetMaskLength());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpPrefixPatchableProperties model =
            new IpPrefixPatchableProperties()
                .withIpPrefixRules(
                    Arrays
                        .asList(
                            new IpPrefixRule()
                                .withAction(CommunityActionTypes.PERMIT)
                                .withSequenceNumber(7278434712251922443L)
                                .withNetworkPrefix("uyrsrziuctix")
                                .withCondition(Condition.EQUAL_TO)
                                .withSubnetMaskLength("uifr"),
                            new IpPrefixRule()
                                .withAction(CommunityActionTypes.PERMIT)
                                .withSequenceNumber(7782918375893447021L)
                                .withNetworkPrefix("apezkiswqjmdghs")
                                .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                                .withSubnetMaskLength("ybjufptb"),
                            new IpPrefixRule()
                                .withAction(CommunityActionTypes.PERMIT)
                                .withSequenceNumber(906815829871548771L)
                                .withNetworkPrefix("nciuiyqvldaswvpp")
                                .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                                .withSubnetMaskLength("zlgcndhzxrrf")));
        model = BinaryData.fromObject(model).toObject(IpPrefixPatchableProperties.class);
        Assertions.assertEquals(CommunityActionTypes.PERMIT, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(7278434712251922443L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("uyrsrziuctix", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("uifr", model.ipPrefixRules().get(0).subnetMaskLength());
    }
}
