// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.Condition;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpPrefixPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpPrefixPatchableProperties model = BinaryData.fromString(
            "{\"ipPrefixRules\":[{\"action\":\"Deny\",\"sequenceNumber\":6119785955978410906,\"networkPrefix\":\"ravjuq\",\"condition\":\"LesserThanOrEqualTo\",\"subnetMaskLength\":\"mr\"}]}")
            .toObject(IpPrefixPatchableProperties.class);
        Assertions.assertEquals(CommunityActionTypes.DENY, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(6119785955978410906L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("ravjuq", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.LESSER_THAN_OR_EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("mr", model.ipPrefixRules().get(0).subnetMaskLength());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpPrefixPatchableProperties model = new IpPrefixPatchableProperties()
            .withIpPrefixRules(Arrays.asList(new IpPrefixRule().withAction(CommunityActionTypes.DENY)
                .withSequenceNumber(6119785955978410906L)
                .withNetworkPrefix("ravjuq")
                .withCondition(Condition.LESSER_THAN_OR_EQUAL_TO)
                .withSubnetMaskLength("mr")));
        model = BinaryData.fromObject(model).toObject(IpPrefixPatchableProperties.class);
        Assertions.assertEquals(CommunityActionTypes.DENY, model.ipPrefixRules().get(0).action());
        Assertions.assertEquals(6119785955978410906L, model.ipPrefixRules().get(0).sequenceNumber());
        Assertions.assertEquals("ravjuq", model.ipPrefixRules().get(0).networkPrefix());
        Assertions.assertEquals(Condition.LESSER_THAN_OR_EQUAL_TO, model.ipPrefixRules().get(0).condition());
        Assertions.assertEquals("mr", model.ipPrefixRules().get(0).subnetMaskLength());
    }
}
