// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RoutePoliciesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"networkFabricId\":\"wplx\",\"addressFamilyType\":\"IPv4\",\"configurationState\":\"Deprovisioned\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"MAT\",\"defaultAction\":\"Deny\",\"statements\":[{\"sequenceNumber\":95459084041814942,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"xls\",\"ipExtendedCommunityIds\":[\"kjrqdt\",\"kcaocjuuxqnki\",\"wmrwc\",\"ynjcvewl\"],\"ipCommunityIds\":[\"naktjopiglah\",\"eqjchhrrx\",\"cztrqnuahh\"]},\"action\":{\"localPreference\":4040197137610560802,\"actionType\":\"Permit\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"ujpshisziv\"},{\"sequenceNumber\":2369172499266349672,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"wzjorv\",\"ipExtendedCommunityIds\":[\"kkelesbjck\"],\"ipCommunityIds\":[\"ybrlwdm\",\"sdfslaektn\"]},\"action\":{\"localPreference\":8543860576467248968,\"actionType\":\"Permit\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"pqumexnpoaeruy\"}],\"annotation\":\"hltwlzlm\"},\"location\":\"prlcgqewm\",\"tags\":{\"papepwpbnjckow\":\"hqlybmkmxusm\"},\"id\":\"uniu\",\"name\":\"ysvnddllbwnmvh\",\"type\":\"zypmmyr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RoutePolicy> response
            = manager.routePolicies().listByResourceGroup("wqjcphofyoqfvm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("prlcgqewm", response.iterator().next().location());
        Assertions.assertEquals("hqlybmkmxusm", response.iterator().next().tags().get("papepwpbnjckow"));
        Assertions.assertEquals("wplx", response.iterator().next().networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV4, response.iterator().next().addressFamilyType());
        Assertions.assertEquals(CommunityActionTypes.DENY, response.iterator().next().defaultAction());
        Assertions.assertEquals("ujpshisziv", response.iterator().next().statements().get(0).annotation());
        Assertions.assertEquals(95459084041814942L, response.iterator().next().statements().get(0).sequenceNumber());
        Assertions.assertEquals("naktjopiglah",
            response.iterator().next().statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND,
            response.iterator().next().statements().get(0).condition().type());
        Assertions.assertEquals("xls", response.iterator().next().statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("kjrqdt",
            response.iterator().next().statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(4040197137610560802L,
            response.iterator().next().statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.PERMIT,
            response.iterator().next().statements().get(0).action().actionType());
        Assertions.assertEquals("hltwlzlm", response.iterator().next().annotation());
    }
}
