// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RoutePoliciesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"networkFabricId\":\"qfcorajdb\",\"addressFamilyType\":\"IPv6\",\"configurationState\":\"Failed\",\"provisioningState\":\"Failed\",\"administrativeState\":\"RMA\",\"statements\":[{\"sequenceNumber\":8939069278384047837,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"vynhmb\",\"ipExtendedCommunityIds\":[\"fxfyzqrsu\"],\"ipCommunityIds\":[\"sudtb\"]},\"action\":{\"localPreference\":6839164776180374009,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"lyedsormbvirnxey\"},{\"sequenceNumber\":3255422556816107564,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"yidecffjhizwqz\",\"ipExtendedCommunityIds\":[\"wjypioszczswhd\",\"lxppewtl\",\"swul\"],\"ipCommunityIds\":[\"fczwzrxvvbl\",\"npriyttiqdcjg\"]},\"action\":{\"localPreference\":3778611207800585693,\"actionType\":\"Permit\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"woetjrfruc\"}],\"annotation\":\"fwdxbpvbsibz\"},\"location\":\"deyo\",\"tags\":{\"ieshqielbk\":\"othtpaqmf\",\"mgud\":\"m\",\"ecuve\":\"y\",\"kkjvrrvj\":\"lcwdg\"},\"id\":\"hoehyir\",\"name\":\"vr\",\"type\":\"doxpvqpblqubfpe\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RoutePolicy> response =
            manager.routePolicies().listByResourceGroup("tqxqiqaefu", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("deyo", response.iterator().next().location());
        Assertions.assertEquals("othtpaqmf", response.iterator().next().tags().get("ieshqielbk"));
        Assertions.assertEquals("qfcorajdb", response.iterator().next().networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV6, response.iterator().next().addressFamilyType());
        Assertions.assertEquals("lyedsormbvirnxey", response.iterator().next().statements().get(0).annotation());
        Assertions.assertEquals(8939069278384047837L, response.iterator().next().statements().get(0).sequenceNumber());
        Assertions
            .assertEquals("sudtb", response.iterator().next().statements().get(0).condition().ipCommunityIds().get(0));
        Assertions
            .assertEquals(
                RoutePolicyConditionType.OR, response.iterator().next().statements().get(0).condition().type());
        Assertions.assertEquals("vynhmb", response.iterator().next().statements().get(0).condition().ipPrefixId());
        Assertions
            .assertEquals(
                "fxfyzqrsu",
                response.iterator().next().statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions
            .assertEquals(
                6839164776180374009L, response.iterator().next().statements().get(0).action().localPreference());
        Assertions
            .assertEquals(
                RoutePolicyActionType.CONTINUE, response.iterator().next().statements().get(0).action().actionType());
        Assertions.assertEquals("fwdxbpvbsibz", response.iterator().next().annotation());
    }
}
