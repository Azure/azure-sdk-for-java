// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RoutePoliciesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"networkFabricId\":\"in\",\"addressFamilyType\":\"IPv6\",\"configurationState\":\"PendingCommit\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"Disabled\",\"defaultAction\":\"Deny\",\"statements\":[{\"sequenceNumber\":335872430827651416,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"qtkrjucazwedm\",\"ipExtendedCommunityIds\":[\"lx\",\"cem\",\"oanudvqannenxgo\"],\"ipCommunityIds\":[\"gblqyf\",\"zbfpqifsgzfgxw\",\"xjiqpdsohw\"]},\"action\":{\"localPreference\":7185211741376169644,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"jxhpppnksqiwlmeg\"}],\"annotation\":\"oseohoygowdzizzu\"},\"location\":\"orcppqvovsir\",\"tags\":{\"e\":\"epiplpexhhjjat\",\"c\":\"zbiroxamnv\",\"nsihdzxeufj\":\"jpba\"},\"id\":\"b\",\"name\":\"zm\",\"type\":\"xdmppib\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RoutePolicy response = manager.routePolicies()
            .getByResourceGroupWithResponse("rinvfcds", "j", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("orcppqvovsir", response.location());
        Assertions.assertEquals("epiplpexhhjjat", response.tags().get("e"));
        Assertions.assertEquals("in", response.networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV6, response.addressFamilyType());
        Assertions.assertEquals(CommunityActionTypes.DENY, response.defaultAction());
        Assertions.assertEquals("jxhpppnksqiwlmeg", response.statements().get(0).annotation());
        Assertions.assertEquals(335872430827651416L, response.statements().get(0).sequenceNumber());
        Assertions.assertEquals("gblqyf", response.statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND, response.statements().get(0).condition().type());
        Assertions.assertEquals("qtkrjucazwedm", response.statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("lx", response.statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(7185211741376169644L, response.statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.CONTINUE, response.statements().get(0).action().actionType());
        Assertions.assertEquals("oseohoygowdzizzu", response.annotation());
    }
}
