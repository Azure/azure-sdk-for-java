// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RoutePoliciesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"networkFabricId\":\"c\",\"addressFamilyType\":\"IPv4\",\"configurationState\":\"Accepted\",\"provisioningState\":\"Deleting\",\"administrativeState\":\"RMA\",\"statements\":[{\"sequenceNumber\":8478441101031024131,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"gen\",\"ipExtendedCommunityIds\":[\"xffe\",\"cngjcdykkpnfvz\",\"vt\"],\"ipCommunityIds\":[\"nusqjjcwggj\",\"mlcbmhsfgax\"]},\"action\":{\"localPreference\":3703399213725371460,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"szxnzjxvdnf\"},{\"sequenceNumber\":6913517984931682319,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"lw\",\"ipExtendedCommunityIds\":[\"z\",\"fxbiqwgm\",\"ynwaofnoiphwaedp\",\"gxjtuhid\"],\"ipCommunityIds\":[\"z\",\"mcqen\",\"jwadvfqrvtymn\",\"wjdmjdphtfpjrbn\"]},\"action\":{\"localPreference\":5341193954054496929,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"ima\"},{\"sequenceNumber\":2795357146906080604,\"condition\":{\"type\":\"Or\",\"ipPrefixId\":\"epr\",\"ipExtendedCommunityIds\":[\"ktusrpjmevszbj\",\"qktokc\"],\"ipCommunityIds\":[\"mzb\",\"xxdxnhinn\"]},\"action\":{\"localPreference\":6659953453261740285,\"actionType\":\"Deny\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"x\"}],\"annotation\":\"jsfxxkg\"},\"location\":\"zznocrbtazopf\",\"tags\":{\"knppucfvx\":\"fmhm\",\"dumiuxxmrnt\":\"rmxcrhzecn\",\"jabzs\":\"hyjueddtkpysmal\"},\"id\":\"buzaxmkuthooaic\",\"name\":\"szcwwv\",\"type\":\"xvibivhjryppm\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagedNetworkFabricManager manager =
            ManagedNetworkFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RoutePolicy response =
            manager
                .routePolicies()
                .getByResourceGroupWithResponse("gdoi", "d", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("zznocrbtazopf", response.location());
        Assertions.assertEquals("fmhm", response.tags().get("knppucfvx"));
        Assertions.assertEquals("c", response.networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV4, response.addressFamilyType());
        Assertions.assertEquals("szxnzjxvdnf", response.statements().get(0).annotation());
        Assertions.assertEquals(8478441101031024131L, response.statements().get(0).sequenceNumber());
        Assertions.assertEquals("nusqjjcwggj", response.statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.OR, response.statements().get(0).condition().type());
        Assertions.assertEquals("gen", response.statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("xffe", response.statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(3703399213725371460L, response.statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.CONTINUE, response.statements().get(0).action().actionType());
        Assertions.assertEquals("jsfxxkg", response.annotation());
    }
}
