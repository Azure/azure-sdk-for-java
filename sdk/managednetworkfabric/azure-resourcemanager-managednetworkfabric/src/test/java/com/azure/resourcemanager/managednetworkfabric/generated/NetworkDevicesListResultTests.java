// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkDeviceInner;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkDevicesListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkDevicesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkDevicesListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"version\":\"p\",\"networkDeviceSku\":\"rwqirvtktyhhmvf\",\"networkDeviceRole\":\"NPB\",\"networkRackId\":\"jajodmkrr\",\"managementIpv4Address\":\"pgqvqo\",\"managementIpv6Address\":\"lujqgi\",\"configurationState\":\"Succeeded\",\"provisioningState\":\"Failed\",\"administrativeState\":\"MAT\",\"hostName\":\"chpqvctsfaeuhww\",\"serialNumber\":\"nstvzuzhasup\",\"annotation\":\"p\"},\"location\":\"pgzvzqazvbka\",\"tags\":{\"s\":\"tgongrua\",\"igbeqn\":\"iysjqhe\",\"yjdeayscseyd\":\"uba\"},\"id\":\"jemexmnv\",\"name\":\"vmuw\",\"type\":\"xlniwmcpm\"},{\"properties\":{\"version\":\"dlhvdv\",\"networkDeviceSku\":\"phbeaeqjz\",\"networkDeviceRole\":\"TS\",\"networkRackId\":\"clacr\",\"managementIpv4Address\":\"zfmunerkelux\",\"managementIpv6Address\":\"hxze\",\"configurationState\":\"DeferredControl\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"MAT\",\"hostName\":\"evzske\",\"serialNumber\":\"gwfsgqkstyecupyu\",\"annotation\":\"p\"},\"location\":\"davsjcfmazpz\",\"tags\":{\"izekuvfrj\":\"uzvcmcok\",\"ajbvbn\":\"ucaonz\",\"idgzwdydamis\":\"rdemdidack\",\"xkqejtpjfojiunr\":\"pztdivyk\"},\"id\":\"shxuknsykdtoi\",\"name\":\"oancdrco\",\"type\":\"nvxuldxonckb\"},{\"properties\":{\"version\":\"blfxlupibaqzi\",\"networkDeviceSku\":\"zpzwegh\",\"networkDeviceRole\":\"TS\",\"networkRackId\":\"ogvgfklqiyn\",\"managementIpv4Address\":\"eqelsb\",\"managementIpv6Address\":\"dstrkzxsgtz\",\"configurationState\":\"Succeeded\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Disabled\",\"hostName\":\"o\",\"serialNumber\":\"im\",\"annotation\":\"dnox\"},\"location\":\"nrqa\",\"tags\":{\"lousdvrgptqm\":\"nndx\",\"drpizfulgyctsdb\":\"wz\",\"oxrqw\":\"qgkujds\",\"ejdpdfhtwm\":\"eurbtigapdyarik\"},\"id\":\"kfqbriqulwwt\",\"name\":\"jmeqkvy\",\"type\":\"zokpoy\"}],\"nextLink\":\"h\"}")
                .toObject(NetworkDevicesListResult.class);
        Assertions.assertEquals("pgzvzqazvbka", model.value().get(0).location());
        Assertions.assertEquals("tgongrua", model.value().get(0).tags().get("s"));
        Assertions.assertEquals("rwqirvtktyhhmvf", model.value().get(0).networkDeviceSku());
        Assertions.assertEquals("chpqvctsfaeuhww", model.value().get(0).hostname());
        Assertions.assertEquals("nstvzuzhasup", model.value().get(0).serialNumber());
        Assertions.assertEquals("p", model.value().get(0).annotation());
        Assertions.assertEquals("h", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkDevicesListResult model =
            new NetworkDevicesListResult()
                .withValue(
                    Arrays
                        .asList(
                            new NetworkDeviceInner()
                                .withLocation("pgzvzqazvbka")
                                .withTags(mapOf("s", "tgongrua", "igbeqn", "iysjqhe", "yjdeayscseyd", "uba"))
                                .withNetworkDeviceSku("rwqirvtktyhhmvf")
                                .withHostname("chpqvctsfaeuhww")
                                .withSerialNumber("nstvzuzhasup")
                                .withAnnotation("p"),
                            new NetworkDeviceInner()
                                .withLocation("davsjcfmazpz")
                                .withTags(
                                    mapOf(
                                        "izekuvfrj",
                                        "uzvcmcok",
                                        "ajbvbn",
                                        "ucaonz",
                                        "idgzwdydamis",
                                        "rdemdidack",
                                        "xkqejtpjfojiunr",
                                        "pztdivyk"))
                                .withNetworkDeviceSku("phbeaeqjz")
                                .withHostname("evzske")
                                .withSerialNumber("gwfsgqkstyecupyu")
                                .withAnnotation("p"),
                            new NetworkDeviceInner()
                                .withLocation("nrqa")
                                .withTags(
                                    mapOf(
                                        "lousdvrgptqm",
                                        "nndx",
                                        "drpizfulgyctsdb",
                                        "wz",
                                        "oxrqw",
                                        "qgkujds",
                                        "ejdpdfhtwm",
                                        "eurbtigapdyarik"))
                                .withNetworkDeviceSku("zpzwegh")
                                .withHostname("o")
                                .withSerialNumber("im")
                                .withAnnotation("dnox")))
                .withNextLink("h");
        model = BinaryData.fromObject(model).toObject(NetworkDevicesListResult.class);
        Assertions.assertEquals("pgzvzqazvbka", model.value().get(0).location());
        Assertions.assertEquals("tgongrua", model.value().get(0).tags().get("s"));
        Assertions.assertEquals("rwqirvtktyhhmvf", model.value().get(0).networkDeviceSku());
        Assertions.assertEquals("chpqvctsfaeuhww", model.value().get(0).hostname());
        Assertions.assertEquals("nstvzuzhasup", model.value().get(0).serialNumber());
        Assertions.assertEquals("p", model.value().get(0).annotation());
        Assertions.assertEquals("h", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
