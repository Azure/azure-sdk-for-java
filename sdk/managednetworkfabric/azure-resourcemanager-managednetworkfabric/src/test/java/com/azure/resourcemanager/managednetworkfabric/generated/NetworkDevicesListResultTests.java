// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkDeviceInner;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkDevicesListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkDevicesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkDevicesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"version\":\"mip\",\"networkDeviceSku\":\"liqmvlbhikeaq\",\"networkDeviceRole\":\"CE\",\"networkRackId\":\"pomxpu\",\"managementIpv4Address\":\"tsdfjyieso\",\"managementIpv6Address\":\"iqbuou\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Updating\",\"administrativeState\":\"Disabled\",\"hostName\":\"ofjsbgbwwzvdaj\",\"serialNumber\":\"nncfmaciqgjjrlhi\",\"annotation\":\"wixvtbouguxtndop\"},\"location\":\"ttbas\",\"tags\":{\"lndbeaqbkixv\":\"ap\",\"spugzfeuzjljmph\":\"lwynpbbfqvzfj\"},\"id\":\"ky\",\"name\":\"zolgjzmicuydocc\",\"type\":\"xshanzb\"},{\"properties\":{\"version\":\"adh\",\"networkDeviceSku\":\"tecaa\",\"networkDeviceRole\":\"CE\",\"networkRackId\":\"hzniucbda\",\"managementIpv4Address\":\"b\",\"managementIpv6Address\":\"injdllwktlepo\",\"configurationState\":\"Provisioned\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"MAT\",\"hostName\":\"jgcq\",\"serialNumber\":\"lynkgfcfdruw\",\"annotation\":\"kxx\"},\"location\":\"lhuulriqb\",\"tags\":{\"sxebrslttfyhcdjw\":\"vjgb\",\"agttpufpb\":\"uoard\"},\"id\":\"g\",\"name\":\"rholhujbfwxi\",\"type\":\"lkysolsyjp\"},{\"properties\":{\"version\":\"slwhdmcvhtbb\",\"networkDeviceSku\":\"hfvhuwzbxpcqz\",\"networkDeviceRole\":\"Management\",\"networkRackId\":\"tjecohm\",\"managementIpv4Address\":\"vlrrskapbxwieexu\",\"managementIpv6Address\":\"derltfokyksyim\",\"configurationState\":\"Provisioning\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"Disabled\",\"hostName\":\"xzznnui\",\"serialNumber\":\"rsejegprkj\",\"annotation\":\"wrjmwv\"},\"location\":\"tu\",\"tags\":{\"jgxieqfkyfh\":\"ximwgxqldeko\",\"pbyynvskpajbm\":\"wvjaq\"},\"id\":\"eumexmjbxc\",\"name\":\"ccwkqmtx\",\"type\":\"p\"},{\"properties\":{\"version\":\"iscr\",\"networkDeviceSku\":\"lgftrqrejdaa\",\"networkDeviceRole\":\"NPB\",\"networkRackId\":\"m\",\"managementIpv4Address\":\"ahlfxlmuifmuadj\",\"managementIpv6Address\":\"snc\",\"configurationState\":\"Deprovisioning\",\"provisioningState\":\"Accepted\",\"administrativeState\":\"MAT\",\"hostName\":\"gczetybnxg\",\"serialNumber\":\"lcgctjchfjv\",\"annotation\":\"wjzebecuvlb\"},\"location\":\"vwcljkx\",\"tags\":{\"psyxjije\":\"rwoxzg\",\"qwjxi\":\"pdvrbkerdkdkga\",\"ygzqpjoisfmn\":\"dfkcef\",\"ntwhymxymulwiv\":\"ybdjnxumentq\"},\"id\":\"towlhlsycoyb\",\"name\":\"jasqubf\",\"type\":\"j\"}],\"nextLink\":\"whjq\"}")
            .toObject(NetworkDevicesListResult.class);
        Assertions.assertEquals("ttbas", model.value().get(0).location());
        Assertions.assertEquals("ap", model.value().get(0).tags().get("lndbeaqbkixv"));
        Assertions.assertEquals("liqmvlbhikeaq", model.value().get(0).networkDeviceSku());
        Assertions.assertEquals("ofjsbgbwwzvdaj", model.value().get(0).hostname());
        Assertions.assertEquals("nncfmaciqgjjrlhi", model.value().get(0).serialNumber());
        Assertions.assertEquals("wixvtbouguxtndop", model.value().get(0).annotation());
        Assertions.assertEquals("whjq", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkDevicesListResult model = new NetworkDevicesListResult().withValue(Arrays.asList(
            new NetworkDeviceInner().withLocation("ttbas")
                .withTags(mapOf("lndbeaqbkixv", "ap", "spugzfeuzjljmph", "lwynpbbfqvzfj"))
                .withNetworkDeviceSku("liqmvlbhikeaq")
                .withHostname("ofjsbgbwwzvdaj")
                .withSerialNumber("nncfmaciqgjjrlhi")
                .withAnnotation("wixvtbouguxtndop"),
            new NetworkDeviceInner().withLocation("lhuulriqb")
                .withTags(mapOf("sxebrslttfyhcdjw", "vjgb", "agttpufpb", "uoard"))
                .withNetworkDeviceSku("tecaa")
                .withHostname("jgcq")
                .withSerialNumber("lynkgfcfdruw")
                .withAnnotation("kxx"),
            new NetworkDeviceInner().withLocation("tu")
                .withTags(mapOf("jgxieqfkyfh", "ximwgxqldeko", "pbyynvskpajbm", "wvjaq"))
                .withNetworkDeviceSku("hfvhuwzbxpcqz")
                .withHostname("xzznnui")
                .withSerialNumber("rsejegprkj")
                .withAnnotation("wrjmwv"),
            new NetworkDeviceInner().withLocation("vwcljkx")
                .withTags(mapOf("psyxjije", "rwoxzg", "qwjxi", "pdvrbkerdkdkga", "ygzqpjoisfmn", "dfkcef",
                    "ntwhymxymulwiv", "ybdjnxumentq"))
                .withNetworkDeviceSku("lgftrqrejdaa")
                .withHostname("gczetybnxg")
                .withSerialNumber("lcgctjchfjv")
                .withAnnotation("wjzebecuvlb")))
            .withNextLink("whjq");
        model = BinaryData.fromObject(model).toObject(NetworkDevicesListResult.class);
        Assertions.assertEquals("ttbas", model.value().get(0).location());
        Assertions.assertEquals("ap", model.value().get(0).tags().get("lndbeaqbkixv"));
        Assertions.assertEquals("liqmvlbhikeaq", model.value().get(0).networkDeviceSku());
        Assertions.assertEquals("ofjsbgbwwzvdaj", model.value().get(0).hostname());
        Assertions.assertEquals("nncfmaciqgjjrlhi", model.value().get(0).serialNumber());
        Assertions.assertEquals("wixvtbouguxtndop", model.value().get(0).annotation());
        Assertions.assertEquals("whjq", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
