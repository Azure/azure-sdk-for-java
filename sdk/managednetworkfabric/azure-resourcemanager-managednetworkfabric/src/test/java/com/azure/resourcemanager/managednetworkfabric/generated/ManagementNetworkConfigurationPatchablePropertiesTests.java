// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.BfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ManagementNetworkConfigurationPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.RouteTargetInformation;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VpnConfigurationPatchablePropertiesOptionAProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ManagementNetworkConfigurationPatchablePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagementNetworkConfigurationPatchableProperties model = BinaryData.fromString(
            "{\"infrastructureVpnConfiguration\":{\"networkToNetworkInterconnectId\":\"usdvrgp\",\"peeringOption\":\"OptionA\",\"optionBProperties\":{\"importRouteTargets\":[\"jdrpizfulgycts\",\"btqgkujdsoox\"],\"exportRouteTargets\":[\"oeurbtigapdyar\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"jdpdfhtwmmkfq\",\"r\",\"qulw\"],\"importIpv6RouteTargets\":[\"jmeqkvy\",\"zokpoy\",\"ohuen\"],\"exportIpv4RouteTargets\":[\"ajphmp\"],\"exportIpv6RouteTargets\":[\"nglpwsada\",\"jsumxpezcoio\",\"jrmfqzwqd\"]}},\"optionAProperties\":{\"primaryIpv4Prefix\":\"eedcnwmywx\",\"primaryIpv6Prefix\":\"zkvemy\",\"secondaryIpv4Prefix\":\"pczaqpqif\",\"secondaryIpv6Prefix\":\"m\",\"mtu\":947190230,\"vlanId\":2060612809,\"peerASN\":6577158463554950611,\"bfdConfiguration\":{\"administrativeState\":\"MAT\",\"intervalInMilliSeconds\":2074245837,\"multiplier\":375594726}}},\"workloadVpnConfiguration\":{\"networkToNetworkInterconnectId\":\"izexroqsqj\",\"peeringOption\":\"OptionB\",\"optionBProperties\":{\"importRouteTargets\":[\"splwsttxs\",\"gxfqpan\",\"ceov\",\"gzwhsxyrujmtik\"],\"exportRouteTargets\":[\"ik\",\"ohzixyqhfnkvycqq\"],\"routeTargets\":{\"importIpv4RouteTargets\":[\"ipnquwzxhrptyod\",\"hkfktlt\",\"dsobjopnouhbq\"],\"importIpv6RouteTargets\":[\"qxsaluzyig\"],\"exportIpv4RouteTargets\":[\"cewbwqhdgsjsatm\",\"ncmazdf\",\"qxhyq\",\"rejparnpv\"],\"exportIpv6RouteTargets\":[\"zrbwtdrcwgz\",\"ll\",\"zlhhfix\"]}},\"optionAProperties\":{\"primaryIpv4Prefix\":\"c\",\"primaryIpv6Prefix\":\"zjrmhpfywvyld\",\"secondaryIpv4Prefix\":\"zfzxsoxinunjlz\",\"secondaryIpv6Prefix\":\"rocqsxy\",\"mtu\":766019445,\"vlanId\":1442676703,\"peerASN\":8406949182785574264,\"bfdConfiguration\":{\"administrativeState\":\"Enabled\",\"intervalInMilliSeconds\":480988441,\"multiplier\":725997455}}}}")
            .toObject(ManagementNetworkConfigurationPatchableProperties.class);
        Assertions.assertEquals("usdvrgp", model.infrastructureVpnConfiguration().networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONA, model.infrastructureVpnConfiguration().peeringOption());
        Assertions.assertEquals("jdrpizfulgycts",
            model.infrastructureVpnConfiguration().optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("oeurbtigapdyar",
            model.infrastructureVpnConfiguration().optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("jdpdfhtwmmkfq",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("jmeqkvy",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("ajphmp",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("nglpwsada",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(947190230, model.infrastructureVpnConfiguration().optionAProperties().mtu());
        Assertions.assertEquals(2060612809, model.infrastructureVpnConfiguration().optionAProperties().vlanId());
        Assertions.assertEquals(6577158463554950611L,
            model.infrastructureVpnConfiguration().optionAProperties().peerAsn());
        Assertions.assertEquals(2074245837,
            model.infrastructureVpnConfiguration().optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(375594726,
            model.infrastructureVpnConfiguration().optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("eedcnwmywx",
            model.infrastructureVpnConfiguration().optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("zkvemy",
            model.infrastructureVpnConfiguration().optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("pczaqpqif",
            model.infrastructureVpnConfiguration().optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("m", model.infrastructureVpnConfiguration().optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals("izexroqsqj", model.workloadVpnConfiguration().networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONB, model.workloadVpnConfiguration().peeringOption());
        Assertions.assertEquals("splwsttxs",
            model.workloadVpnConfiguration().optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("ik", model.workloadVpnConfiguration().optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("ipnquwzxhrptyod",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("qxsaluzyig",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("cewbwqhdgsjsatm",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("zrbwtdrcwgz",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(766019445, model.workloadVpnConfiguration().optionAProperties().mtu());
        Assertions.assertEquals(1442676703, model.workloadVpnConfiguration().optionAProperties().vlanId());
        Assertions.assertEquals(8406949182785574264L, model.workloadVpnConfiguration().optionAProperties().peerAsn());
        Assertions.assertEquals(480988441,
            model.workloadVpnConfiguration().optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(725997455,
            model.workloadVpnConfiguration().optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("c", model.workloadVpnConfiguration().optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("zjrmhpfywvyld",
            model.workloadVpnConfiguration().optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("zfzxsoxinunjlz",
            model.workloadVpnConfiguration().optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("rocqsxy", model.workloadVpnConfiguration().optionAProperties().secondaryIpv6Prefix());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagementNetworkConfigurationPatchableProperties model
            = new ManagementNetworkConfigurationPatchableProperties()
                .withInfrastructureVpnConfiguration(
                    new VpnConfigurationPatchableProperties().withNetworkToNetworkInterconnectId("usdvrgp")
                        .withPeeringOption(PeeringOption.OPTIONA)
                        .withOptionBProperties(new OptionBProperties()
                            .withImportRouteTargets(Arrays.asList("jdrpizfulgycts", "btqgkujdsoox"))
                            .withExportRouteTargets(Arrays.asList("oeurbtigapdyar"))
                            .withRouteTargets(new RouteTargetInformation()
                                .withImportIpv4RouteTargets(Arrays.asList("jdpdfhtwmmkfq", "r", "qulw"))
                                .withImportIpv6RouteTargets(Arrays.asList("jmeqkvy", "zokpoy", "ohuen"))
                                .withExportIpv4RouteTargets(Arrays.asList("ajphmp"))
                                .withExportIpv6RouteTargets(Arrays.asList("nglpwsada", "jsumxpezcoio", "jrmfqzwqd"))))
                        .withOptionAProperties(new VpnConfigurationPatchablePropertiesOptionAProperties()
                            .withMtu(947190230)
                            .withVlanId(2060612809)
                            .withPeerAsn(6577158463554950611L)
                            .withBfdConfiguration(
                                new BfdConfiguration().withIntervalInMilliSeconds(2074245837).withMultiplier(375594726))
                            .withPrimaryIpv4Prefix("eedcnwmywx")
                            .withPrimaryIpv6Prefix("zkvemy")
                            .withSecondaryIpv4Prefix("pczaqpqif")
                            .withSecondaryIpv6Prefix("m")))
                .withWorkloadVpnConfiguration(new VpnConfigurationPatchableProperties()
                    .withNetworkToNetworkInterconnectId("izexroqsqj")
                    .withPeeringOption(PeeringOption.OPTIONB)
                    .withOptionBProperties(new OptionBProperties()
                        .withImportRouteTargets(Arrays.asList("splwsttxs", "gxfqpan", "ceov", "gzwhsxyrujmtik"))
                        .withExportRouteTargets(Arrays.asList("ik", "ohzixyqhfnkvycqq"))
                        .withRouteTargets(new RouteTargetInformation()
                            .withImportIpv4RouteTargets(Arrays.asList("ipnquwzxhrptyod", "hkfktlt", "dsobjopnouhbq"))
                            .withImportIpv6RouteTargets(Arrays.asList("qxsaluzyig"))
                            .withExportIpv4RouteTargets(
                                Arrays.asList("cewbwqhdgsjsatm", "ncmazdf", "qxhyq", "rejparnpv"))
                            .withExportIpv6RouteTargets(Arrays.asList("zrbwtdrcwgz", "ll", "zlhhfix"))))
                    .withOptionAProperties(new VpnConfigurationPatchablePropertiesOptionAProperties().withMtu(766019445)
                        .withVlanId(1442676703)
                        .withPeerAsn(8406949182785574264L)
                        .withBfdConfiguration(
                            new BfdConfiguration().withIntervalInMilliSeconds(480988441).withMultiplier(725997455))
                        .withPrimaryIpv4Prefix("c")
                        .withPrimaryIpv6Prefix("zjrmhpfywvyld")
                        .withSecondaryIpv4Prefix("zfzxsoxinunjlz")
                        .withSecondaryIpv6Prefix("rocqsxy")));
        model = BinaryData.fromObject(model).toObject(ManagementNetworkConfigurationPatchableProperties.class);
        Assertions.assertEquals("usdvrgp", model.infrastructureVpnConfiguration().networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONA, model.infrastructureVpnConfiguration().peeringOption());
        Assertions.assertEquals("jdrpizfulgycts",
            model.infrastructureVpnConfiguration().optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("oeurbtigapdyar",
            model.infrastructureVpnConfiguration().optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("jdpdfhtwmmkfq",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("jmeqkvy",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("ajphmp",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("nglpwsada",
            model.infrastructureVpnConfiguration().optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(947190230, model.infrastructureVpnConfiguration().optionAProperties().mtu());
        Assertions.assertEquals(2060612809, model.infrastructureVpnConfiguration().optionAProperties().vlanId());
        Assertions.assertEquals(6577158463554950611L,
            model.infrastructureVpnConfiguration().optionAProperties().peerAsn());
        Assertions.assertEquals(2074245837,
            model.infrastructureVpnConfiguration().optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(375594726,
            model.infrastructureVpnConfiguration().optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("eedcnwmywx",
            model.infrastructureVpnConfiguration().optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("zkvemy",
            model.infrastructureVpnConfiguration().optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("pczaqpqif",
            model.infrastructureVpnConfiguration().optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("m", model.infrastructureVpnConfiguration().optionAProperties().secondaryIpv6Prefix());
        Assertions.assertEquals("izexroqsqj", model.workloadVpnConfiguration().networkToNetworkInterconnectId());
        Assertions.assertEquals(PeeringOption.OPTIONB, model.workloadVpnConfiguration().peeringOption());
        Assertions.assertEquals("splwsttxs",
            model.workloadVpnConfiguration().optionBProperties().importRouteTargets().get(0));
        Assertions.assertEquals("ik", model.workloadVpnConfiguration().optionBProperties().exportRouteTargets().get(0));
        Assertions.assertEquals("ipnquwzxhrptyod",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().importIpv4RouteTargets().get(0));
        Assertions.assertEquals("qxsaluzyig",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().importIpv6RouteTargets().get(0));
        Assertions.assertEquals("cewbwqhdgsjsatm",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().exportIpv4RouteTargets().get(0));
        Assertions.assertEquals("zrbwtdrcwgz",
            model.workloadVpnConfiguration().optionBProperties().routeTargets().exportIpv6RouteTargets().get(0));
        Assertions.assertEquals(766019445, model.workloadVpnConfiguration().optionAProperties().mtu());
        Assertions.assertEquals(1442676703, model.workloadVpnConfiguration().optionAProperties().vlanId());
        Assertions.assertEquals(8406949182785574264L, model.workloadVpnConfiguration().optionAProperties().peerAsn());
        Assertions.assertEquals(480988441,
            model.workloadVpnConfiguration().optionAProperties().bfdConfiguration().intervalInMilliSeconds());
        Assertions.assertEquals(725997455,
            model.workloadVpnConfiguration().optionAProperties().bfdConfiguration().multiplier());
        Assertions.assertEquals("c", model.workloadVpnConfiguration().optionAProperties().primaryIpv4Prefix());
        Assertions.assertEquals("zjrmhpfywvyld",
            model.workloadVpnConfiguration().optionAProperties().primaryIpv6Prefix());
        Assertions.assertEquals("zfzxsoxinunjlz",
            model.workloadVpnConfiguration().optionAProperties().secondaryIpv4Prefix());
        Assertions.assertEquals("rocqsxy", model.workloadVpnConfiguration().optionAProperties().secondaryIpv6Prefix());
    }
}
