// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.L3IsolationDomain;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeConnectedSubnets;
import com.azure.resourcemanager.managednetworkfabric.models.RedistributeStaticRoutes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3IsolationDomainsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"networkFabricId\":\"yqkkpgwgss\",\"configurationState\":\"Provisioned\",\"provisioningState\":\"Failed\",\"administrativeState\":\"MAT\",\"redistributeConnectedSubnets\":\"False\",\"redistributeStaticRoutes\":\"False\",\"aggregateRouteConfiguration\":{\"ipv4Routes\":[{\"prefix\":\"dsqx\"},{\"prefix\":\"jwdzpvirzyudrqu\"},{\"prefix\":\"rxhxmlfouqpskv\"}],\"ipv6Routes\":[{\"prefix\":\"bpmr\"}]},\"connectedSubnetRoutePolicy\":{\"exportRoutePolicyId\":\"jxcqcaczzvwaeztt\",\"exportRoutePolicy\":{\"exportIpv4RoutePolicyId\":\"yfydqlyyslgyfyb\",\"exportIpv6RoutePolicyId\":\"vk\"}},\"annotation\":\"rzhshhkbchcazkg\"},\"location\":\"thprgfwhfzhhr\",\"tags\":{\"dcuqddldaoy\":\"rfyyqjcnibzqrs\"},\"id\":\"fztqewq\",\"name\":\"ojesxjhtyzzwqocy\",\"type\":\"oyineuaxpmezit\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<L3IsolationDomain> response
            = manager.l3IsolationDomains().listByResourceGroup("m", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("thprgfwhfzhhr", response.iterator().next().location());
        Assertions.assertEquals("rfyyqjcnibzqrs", response.iterator().next().tags().get("dcuqddldaoy"));
        Assertions.assertEquals("yqkkpgwgss", response.iterator().next().networkFabricId());
        Assertions.assertEquals(RedistributeConnectedSubnets.FALSE,
            response.iterator().next().redistributeConnectedSubnets());
        Assertions.assertEquals(RedistributeStaticRoutes.FALSE, response.iterator().next().redistributeStaticRoutes());
        Assertions.assertEquals("dsqx",
            response.iterator().next().aggregateRouteConfiguration().ipv4Routes().get(0).prefix());
        Assertions.assertEquals("bpmr",
            response.iterator().next().aggregateRouteConfiguration().ipv6Routes().get(0).prefix());
        Assertions.assertEquals("jxcqcaczzvwaeztt",
            response.iterator().next().connectedSubnetRoutePolicy().exportRoutePolicyId());
        Assertions.assertEquals("yfydqlyyslgyfyb",
            response.iterator().next().connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv4RoutePolicyId());
        Assertions.assertEquals("vk",
            response.iterator().next().connectedSubnetRoutePolicy().exportRoutePolicy().exportIpv6RoutePolicyId());
        Assertions.assertEquals("rzhshhkbchcazkg", response.iterator().next().annotation());
    }
}
