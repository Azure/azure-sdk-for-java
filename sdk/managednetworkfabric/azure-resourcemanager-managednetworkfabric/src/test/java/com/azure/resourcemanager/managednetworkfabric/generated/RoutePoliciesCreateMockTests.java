// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.ActionIpCommunityProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ActionIpExtendedCommunityProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyActionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyConditionType;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyStatementProperties;
import com.azure.resourcemanager.managednetworkfabric.models.StatementActionProperties;
import com.azure.resourcemanager.managednetworkfabric.models.StatementConditionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RoutePoliciesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"networkFabricId\":\"qeonyizqdwvg\",\"addressFamilyType\":\"IPv6\",\"configurationState\":\"DeferredControl\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"RMA\",\"defaultAction\":\"Permit\",\"statements\":[{\"sequenceNumber\":2421775876641234866,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"rfuzedud\",\"ipExtendedCommunityIds\":[\"dv\",\"a\"],\"ipCommunityIds\":[\"jvumimbcf\",\"hycluounvrqvxno\"]},\"action\":{\"localPreference\":4590405392307652745,\"actionType\":\"Continue\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"ezeewcrblksdd\"},{\"sequenceNumber\":4132120253192181163,\"condition\":{\"type\":\"And\",\"ipPrefixId\":\"hoezjikw\",\"ipExtendedCommunityIds\":[\"rsoxtxuuypdcgx\",\"kbwv\"],\"ipCommunityIds\":[\"bzcmpbymsgcl\"]},\"action\":{\"localPreference\":2915333026435586464,\"actionType\":\"Permit\",\"ipCommunityProperties\":{},\"ipExtendedCommunityProperties\":{}},\"annotation\":\"fmjckct\"}],\"annotation\":\"hs\"},\"location\":\"iumktslmeyon\",\"tags\":{\"rgwtynqbhhfhi\":\"evmaw\",\"yihpsrjzpvojwjan\":\"wwkhiyubykxzcvut\"},\"id\":\"olqqpa\",\"name\":\"zpzmojupqlus\",\"type\":\"kzdnotgyowis\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RoutePolicy response
            = manager.routePolicies()
                .define("uiuvkcnqonj")
                .withRegion("z")
                .withExistingResourceGroup("vpdjytme")
                .withNetworkFabricId("b")
                .withTags(mapOf("cmeyxypxlzcr", "l", "vetpdezebvtkg", "mfvjz", "cxuounzzckogcv", "jnadfhheilnh"))
                .withAddressFamilyType(AddressFamilyType.IPV6)
                .withDefaultAction(CommunityActionTypes.PERMIT)
                .withStatements(
                    Arrays.asList(
                        new RoutePolicyStatementProperties().withAnnotation("sdqnqqzqdvg")
                            .withSequenceNumber(2097893229649830526L)
                            .withCondition(new StatementConditionProperties()
                                .withIpCommunityIds(
                                    Arrays.asList("ttqils", "abqtjchxsfwe", "leiyemjips", "ekdqqwcspfhrndq"))
                                .withType(RoutePolicyConditionType.OR)
                                .withIpPrefixId("yejsgbpjjnblbkak")
                                .withIpExtendedCommunityIds(Arrays.asList("wbddnddctkjcqhx")))
                            .withAction(new StatementActionProperties().withLocalPreference(5478096301196384502L)
                                .withActionType(RoutePolicyActionType.PERMIT)
                                .withIpCommunityProperties(new ActionIpCommunityProperties())
                                .withIpExtendedCommunityProperties(new ActionIpExtendedCommunityProperties())),
                        new RoutePolicyStatementProperties().withAnnotation("wjfkmnjtkswmyjd")
                            .withSequenceNumber(1967239015461212501L)
                            .withCondition(new StatementConditionProperties()
                                .withIpCommunityIds(Arrays.asList("kctpaiw", "rjwyxduwimwnuv"))
                                .withType(RoutePolicyConditionType.OR)
                                .withIpPrefixId("oynya")
                                .withIpExtendedCommunityIds(Arrays.asList("ph", "uzmv", "iltl")))
                            .withAction(new StatementActionProperties().withLocalPreference(7266690499667397309L)
                                .withActionType(RoutePolicyActionType.PERMIT)
                                .withIpCommunityProperties(new ActionIpCommunityProperties())
                                .withIpExtendedCommunityProperties(new ActionIpExtendedCommunityProperties())),
                        new RoutePolicyStatementProperties().withAnnotation("fwugo")
                            .withSequenceNumber(4942587917021188500L)
                            .withCondition(new StatementConditionProperties().withIpCommunityIds(Arrays.asList("ctnpp"))
                                .withType(RoutePolicyConditionType.AND)
                                .withIpPrefixId("jtmpdkcbpkiguv")
                                .withIpExtendedCommunityIds(Arrays.asList("tkcen", "wg")))
                            .withAction(new StatementActionProperties()
                                .withLocalPreference(6704049784410967385L)
                                .withActionType(RoutePolicyActionType.PERMIT)
                                .withIpCommunityProperties(new ActionIpCommunityProperties())
                                .withIpExtendedCommunityProperties(new ActionIpExtendedCommunityProperties())),
                        new RoutePolicyStatementProperties().withAnnotation("nkrarjii")
                            .withSequenceNumber(1443615554749895796L)
                            .withCondition(new StatementConditionProperties()
                                .withIpCommunityIds(Arrays.asList("jxocmmv", "amorhkneu"))
                                .withType(RoutePolicyConditionType.AND)
                                .withIpPrefixId("nvzmvnbck")
                                .withIpExtendedCommunityIds(
                                    Arrays.asList("xuuksvfsukpkieal", "ckpnnenrcez", "or", "zwk")))
                            .withAction(new StatementActionProperties().withLocalPreference(4056003480349765622L)
                                .withActionType(RoutePolicyActionType.DENY)
                                .withIpCommunityProperties(new ActionIpCommunityProperties())
                                .withIpExtendedCommunityProperties(new ActionIpExtendedCommunityProperties()))))
                .withAnnotation("bychcwhl")
                .create();

        Assertions.assertEquals("iumktslmeyon", response.location());
        Assertions.assertEquals("evmaw", response.tags().get("rgwtynqbhhfhi"));
        Assertions.assertEquals("qeonyizqdwvg", response.networkFabricId());
        Assertions.assertEquals(AddressFamilyType.IPV6, response.addressFamilyType());
        Assertions.assertEquals(CommunityActionTypes.PERMIT, response.defaultAction());
        Assertions.assertEquals("ezeewcrblksdd", response.statements().get(0).annotation());
        Assertions.assertEquals(2421775876641234866L, response.statements().get(0).sequenceNumber());
        Assertions.assertEquals("jvumimbcf", response.statements().get(0).condition().ipCommunityIds().get(0));
        Assertions.assertEquals(RoutePolicyConditionType.AND, response.statements().get(0).condition().type());
        Assertions.assertEquals("rfuzedud", response.statements().get(0).condition().ipPrefixId());
        Assertions.assertEquals("dv", response.statements().get(0).condition().ipExtendedCommunityIds().get(0));
        Assertions.assertEquals(4590405392307652745L, response.statements().get(0).action().localPreference());
        Assertions.assertEquals(RoutePolicyActionType.CONTINUE, response.statements().get(0).action().actionType());
        Assertions.assertEquals("hs", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
