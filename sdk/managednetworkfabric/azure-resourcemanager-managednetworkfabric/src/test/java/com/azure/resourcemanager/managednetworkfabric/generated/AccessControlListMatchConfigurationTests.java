// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AclActionType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListMatchConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListMatchConfiguration model = BinaryData.fromString(
            "{\"matchConfigurationName\":\"qxvcxgfrpdsofb\",\"sequenceNumber\":265597434112892154,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"etherTypes\":[\"dvzyybycnun\",\"jsrtk\"],\"fragments\":[\"nopqgikyzirtx\",\"yuxzejntpsewgi\",\"ilqu\",\"rydxtqm\"],\"ipLengths\":[\"xorgg\"],\"ttlValues\":[\"yaomtb\",\"hhavgrvkffovjz\",\"pjbi\",\"gjmfxumvfcl\"],\"dscpMarkings\":[\"vwxnbkfe\",\"zxscyhwzdgirujb\",\"bomvzzbtdcqv\",\"niyujv\"],\"portCondition\":{\"flags\":[\"dshf\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"ye\"],\"portGroupNames\":[\"msgaoj\",\"mwn\",\"otmrfhir\"]},\"protocolTypes\":[\"moxoftpi\",\"iwyczuh\",\"a\",\"pqjlihhyusps\"],\"vlanMatchCondition\":{\"vlans\":[\"vlmfwdgzxulucv\",\"amrsreuzv\",\"urisjnhnytxifqj\"],\"innerVlans\":[\"mrhublwpc\",\"sutrgjup\"],\"vlanGroupNames\":[\"tpwoqhihejq\",\"w\",\"pnfqntcyp\",\"xjvfoimwksl\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"Prefix\",\"ipPrefixValues\":[\"ydfce\",\"cvlhv\",\"gdyftumrtwna\",\"jslb\"],\"ipGroupNames\":[\"ojgcyzt\",\"fmznba\",\"qphchqnrnrpxehuw\"]}},{\"etherTypes\":[\"qgaifmviklbydv\"],\"fragments\":[\"ejd\",\"nxcvds\",\"hnjivo\"],\"ipLengths\":[\"novqfzge\",\"jdftuljltd\",\"ceamtm\",\"zuo\"],\"ttlValues\":[\"wcw\"],\"dscpMarkings\":[\"oknssxmojmsvpkjp\",\"vk\",\"cfzq\"],\"portCondition\":{\"flags\":[\"gtczheydb\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"xmaehvbbxu\"],\"portGroupNames\":[\"ltfnhtbaxkgx\",\"wrck\",\"yklyhpluodpvruud\"]},\"protocolTypes\":[\"ibthostgktstvd\"],\"vlanMatchCondition\":{\"vlans\":[\"zedqbcvhzlhplo\",\"qkdlw\",\"qfbumlkxtrqjf\",\"mlmbtxhwgfwsrta\"],\"innerVlans\":[\"ezbrhubskh\",\"dyg\",\"ookk\"],\"vlanGroupNames\":[\"jb\",\"leorfmluiqtqz\",\"avyvnqqyba\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"qabqgzslesjcb\"],\"ipGroupNames\":[\"n\",\"tiewdj\",\"vbquwr\"]}}],\"actions\":[{\"type\":\"Count\",\"counterName\":\"o\"},{\"type\":\"Log\",\"counterName\":\"fkmr\"},{\"type\":\"Drop\",\"counterName\":\"vhmxtdrjfu\"},{\"type\":\"Log\",\"counterName\":\"ebjvewzcjzn\"}]}")
            .toObject(AccessControlListMatchConfiguration.class);
        Assertions.assertEquals("qxvcxgfrpdsofb", model.matchConfigurationName());
        Assertions.assertEquals(265597434112892154L, model.sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.ipAddressType());
        Assertions.assertEquals("moxoftpi", model.matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("vlmfwdgzxulucv", model.matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("mrhublwpc", model.matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("tpwoqhihejq",
            model.matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("ydfce", model.matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("ojgcyzt", model.matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("dvzyybycnun", model.matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("nopqgikyzirtx", model.matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("xorgg", model.matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("yaomtb", model.matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("vwxnbkfe", model.matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.SOURCE_PORT, model.matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP, model.matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("ye", model.matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("msgaoj", model.matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("dshf", model.matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.COUNT, model.actions().get(0).type());
        Assertions.assertEquals("o", model.actions().get(0).counterName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListMatchConfiguration model
            = new AccessControlListMatchConfiguration().withMatchConfigurationName("qxvcxgfrpdsofb")
                .withSequenceNumber(265597434112892154L)
                .withIpAddressType(IpAddressType.IPV4)
                .withMatchConditions(Arrays.asList(
                    new AccessControlListMatchCondition()
                        .withProtocolTypes(Arrays.asList("moxoftpi", "iwyczuh", "a", "pqjlihhyusps"))
                        .withVlanMatchCondition(new VlanMatchCondition()
                            .withVlans(Arrays.asList("vlmfwdgzxulucv", "amrsreuzv", "urisjnhnytxifqj"))
                            .withInnerVlans(Arrays.asList("mrhublwpc", "sutrgjup"))
                            .withVlanGroupNames(Arrays.asList("tpwoqhihejq", "w", "pnfqntcyp", "xjvfoimwksl")))
                        .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                            .withPrefixType(PrefixType.PREFIX)
                            .withIpPrefixValues(Arrays.asList("ydfce", "cvlhv", "gdyftumrtwna", "jslb"))
                            .withIpGroupNames(Arrays.asList("ojgcyzt", "fmznba", "qphchqnrnrpxehuw")))
                        .withEtherTypes(Arrays.asList("dvzyybycnun", "jsrtk"))
                        .withFragments(Arrays.asList("nopqgikyzirtx", "yuxzejntpsewgi", "ilqu", "rydxtqm"))
                        .withIpLengths(Arrays.asList("xorgg"))
                        .withTtlValues(Arrays.asList("yaomtb", "hhavgrvkffovjz", "pjbi", "gjmfxumvfcl"))
                        .withDscpMarkings(Arrays.asList("vwxnbkfe", "zxscyhwzdgirujb", "bomvzzbtdcqv", "niyujv"))
                        .withPortCondition(new AccessControlListPortCondition().withPortType(PortType.SOURCE_PORT)
                            .withLayer4Protocol(Layer4Protocol.TCP)
                            .withPorts(Arrays.asList("ye"))
                            .withPortGroupNames(Arrays.asList("msgaoj", "mwn", "otmrfhir"))
                            .withFlags(Arrays.asList("dshf"))),
                    new AccessControlListMatchCondition().withProtocolTypes(Arrays.asList("ibthostgktstvd"))
                        .withVlanMatchCondition(new VlanMatchCondition()
                            .withVlans(Arrays.asList("zedqbcvhzlhplo", "qkdlw", "qfbumlkxtrqjf", "mlmbtxhwgfwsrta"))
                            .withInnerVlans(Arrays.asList("ezbrhubskh", "dyg", "ookk"))
                            .withVlanGroupNames(Arrays.asList("jb", "leorfmluiqtqz", "avyvnqqyba")))
                        .withIpCondition(new IpMatchCondition().withType(SourceDestinationType.SOURCE_IP)
                            .withPrefixType(PrefixType.LONGEST_PREFIX)
                            .withIpPrefixValues(Arrays.asList("qabqgzslesjcb"))
                            .withIpGroupNames(Arrays.asList("n", "tiewdj", "vbquwr")))
                        .withEtherTypes(Arrays.asList("qgaifmviklbydv"))
                        .withFragments(Arrays.asList("ejd", "nxcvds", "hnjivo"))
                        .withIpLengths(Arrays.asList("novqfzge", "jdftuljltd", "ceamtm", "zuo"))
                        .withTtlValues(Arrays.asList("wcw"))
                        .withDscpMarkings(Arrays.asList("oknssxmojmsvpkjp", "vk", "cfzq"))
                        .withPortCondition(new AccessControlListPortCondition().withPortType(PortType.DESTINATION_PORT)
                            .withLayer4Protocol(Layer4Protocol.UDP)
                            .withPorts(Arrays.asList("xmaehvbbxu"))
                            .withPortGroupNames(Arrays.asList("ltfnhtbaxkgx", "wrck", "yklyhpluodpvruud"))
                            .withFlags(Arrays.asList("gtczheydb")))))
                .withActions(
                    Arrays.asList(new AccessControlListAction().withType(AclActionType.COUNT).withCounterName("o"),
                        new AccessControlListAction().withType(AclActionType.LOG).withCounterName("fkmr"),
                        new AccessControlListAction().withType(AclActionType.DROP).withCounterName("vhmxtdrjfu"),
                        new AccessControlListAction().withType(AclActionType.LOG).withCounterName("ebjvewzcjzn")));
        model = BinaryData.fromObject(model).toObject(AccessControlListMatchConfiguration.class);
        Assertions.assertEquals("qxvcxgfrpdsofb", model.matchConfigurationName());
        Assertions.assertEquals(265597434112892154L, model.sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.ipAddressType());
        Assertions.assertEquals("moxoftpi", model.matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("vlmfwdgzxulucv", model.matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions.assertEquals("mrhublwpc", model.matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions.assertEquals("tpwoqhihejq",
            model.matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions.assertEquals(SourceDestinationType.SOURCE_IP, model.matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.PREFIX, model.matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("ydfce", model.matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("ojgcyzt", model.matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("dvzyybycnun", model.matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("nopqgikyzirtx", model.matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("xorgg", model.matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("yaomtb", model.matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("vwxnbkfe", model.matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.SOURCE_PORT, model.matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP, model.matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("ye", model.matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("msgaoj", model.matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("dshf", model.matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.COUNT, model.actions().get(0).type());
        Assertions.assertEquals("o", model.actions().get(0).counterName());
    }
}
