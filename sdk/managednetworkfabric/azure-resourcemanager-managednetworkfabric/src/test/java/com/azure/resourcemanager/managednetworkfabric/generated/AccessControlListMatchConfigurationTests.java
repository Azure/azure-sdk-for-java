// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AclActionType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessControlListMatchConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessControlListMatchConfiguration model =
            BinaryData
                .fromString(
                    "{\"matchConfigurationName\":\"eranokqgukkjqnv\",\"sequenceNumber\":8939885428846863813,\"ipAddressType\":\"IPv4\",\"matchConditions\":[{\"etherTypes\":[\"cdisd\",\"sfjbjsvg\"],\"fragments\":[\"hryvy\",\"ytdc\",\"xgccknfnw\"],\"ipLengths\":[\"mvpdvjdhttzaef\",\"dxihc\",\"rphkmcrjdqnsdfz\"],\"ttlValues\":[\"tg\",\"ylkdghrje\",\"utlwxezwzhok\"],\"dscpMarkings\":[\"nhhtql\",\"ehgpp\",\"pifhpfeoajvgcxtx\",\"csheafidltugsr\"],\"portCondition\":{\"flags\":[\"ssjhoiftxfkf\",\"egprhptil\",\"ucb\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"TCP\",\"ports\":[\"ohmcwsld\"],\"portGroupNames\":[\"etpwbralll\",\"bphbqzmizakakank\"]},\"protocolTypes\":[\"n\",\"zhajoylhjlmuo\"],\"vlanMatchCondition\":{\"vlans\":[\"imrsopteecjmei\",\"ls\"],\"innerVlans\":[\"sylwxdzaumweooh\",\"uufuz\"],\"vlanGroupNames\":[\"jathwtzo\",\"b\",\"emwmdxmebwjs\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"eabfqxnm\",\"mqt\",\"bxyijddtvq\",\"ttadijae\"],\"ipGroupNames\":[\"rsiee\",\"pndzaapmudqmeq\"]}},{\"etherTypes\":[\"pibudqwyxebeybpm\"],\"fragments\":[\"rtffyaqitmh\",\"eioqaqhvse\",\"fuqyrxpdlcgqlsi\"],\"ipLengths\":[\"qfrddgam\",\"uhiosrsju\",\"vfcdisyirn\"],\"ttlValues\":[\"czexrxzbujrtrhqv\"],\"dscpMarkings\":[\"vk\"],\"portCondition\":{\"flags\":[\"nzonzl\",\"piqywnc\",\"jtszcof\",\"zehtdhgb\"],\"portType\":\"SourcePort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"jeamurv\",\"mlovuanashcxl\"],\"portGroupNames\":[\"erbdk\",\"lvidizozs\",\"bccxjmonfdgn\",\"n\"]},\"protocolTypes\":[\"uuwwltv\"],\"vlanMatchCondition\":{\"vlans\":[\"tzenk\",\"if\",\"zhmkdasvflyh\",\"xcudchxgsr\"],\"innerVlans\":[\"d\",\"or\",\"bwjl\"],\"vlanGroupNames\":[\"bfhfovvacqp\",\"tuodxeszabbelaw\",\"muaslzkw\"]},\"ipCondition\":{\"type\":\"SourceIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"cwyhahno\",\"drkywuhps\",\"fuurutlwexx\"],\"ipGroupNames\":[\"lniexz\",\"rzpgep\",\"tybbwwpgda\"]}},{\"etherTypes\":[\"zyvli\",\"q\",\"rkcxkj\",\"bn\"],\"fragments\":[\"suxswqrntvlwijp\"],\"ipLengths\":[\"exoqqpwcyyufm\",\"runcuwmqspkcd\",\"zhlctddunqndyfpc\"],\"ttlValues\":[\"bnjj\"],\"dscpMarkings\":[\"egy\",\"cw\",\"oxjumvqqo\",\"ihrraiouaub\"],\"portCondition\":{\"flags\":[\"oq\",\"fuojrngif\",\"rzpasccbiuimzdly\",\"dfqwmkyoq\"],\"portType\":\"DestinationPort\",\"layer4Protocol\":\"UDP\",\"ports\":[\"zslzojhp\",\"tfnmdx\",\"tngfdgugeyzihgr\",\"yui\"],\"portGroupNames\":[\"snmfpphojeevy\",\"yhsgz\"]},\"protocolTypes\":[\"bgomfgbegl\",\"gleohi\",\"etnluankrrfx\"],\"vlanMatchCondition\":{\"vlans\":[\"tijv\",\"cvbmqzb\",\"q\"],\"innerVlans\":[\"jrnwxacev\"],\"vlanGroupNames\":[\"kuyxoafg\",\"oqltfae\",\"linmfgv\"]},\"ipCondition\":{\"type\":\"DestinationIP\",\"prefixType\":\"LongestPrefix\",\"ipPrefixValues\":[\"ypoq\",\"yhlqhykprlpyznu\",\"iq\",\"smexiitdf\"],\"ipGroupNames\":[\"yasiibmiy\",\"nnust\",\"nlj\",\"nmgixh\"]}}],\"actions\":[{\"type\":\"Log\",\"counterName\":\"foudor\"},{\"type\":\"Log\",\"counterName\":\"yprotwyp\"},{\"type\":\"Count\",\"counterName\":\"bxhugcmjkavlgorb\"}]}")
                .toObject(AccessControlListMatchConfiguration.class);
        Assertions.assertEquals("eranokqgukkjqnv", model.matchConfigurationName());
        Assertions.assertEquals(8939885428846863813L, model.sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.ipAddressType());
        Assertions.assertEquals("n", model.matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("imrsopteecjmei", model.matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions
            .assertEquals("sylwxdzaumweooh", model.matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions
            .assertEquals("jathwtzo", model.matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions
            .assertEquals(SourceDestinationType.DESTINATION_IP, model.matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX, model.matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("eabfqxnm", model.matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("rsiee", model.matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("cdisd", model.matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("hryvy", model.matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("mvpdvjdhttzaef", model.matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("tg", model.matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("nhhtql", model.matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.DESTINATION_PORT, model.matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP, model.matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("ohmcwsld", model.matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("etpwbralll", model.matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("ssjhoiftxfkf", model.matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.LOG, model.actions().get(0).type());
        Assertions.assertEquals("foudor", model.actions().get(0).counterName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessControlListMatchConfiguration model =
            new AccessControlListMatchConfiguration()
                .withMatchConfigurationName("eranokqgukkjqnv")
                .withSequenceNumber(8939885428846863813L)
                .withIpAddressType(IpAddressType.IPV4)
                .withMatchConditions(
                    Arrays
                        .asList(
                            new AccessControlListMatchCondition()
                                .withProtocolTypes(Arrays.asList("n", "zhajoylhjlmuo"))
                                .withVlanMatchCondition(
                                    new VlanMatchCondition()
                                        .withVlans(Arrays.asList("imrsopteecjmei", "ls"))
                                        .withInnerVlans(Arrays.asList("sylwxdzaumweooh", "uufuz"))
                                        .withVlanGroupNames(Arrays.asList("jathwtzo", "b", "emwmdxmebwjs")))
                                .withIpCondition(
                                    new IpMatchCondition()
                                        .withType(SourceDestinationType.DESTINATION_IP)
                                        .withPrefixType(PrefixType.LONGEST_PREFIX)
                                        .withIpPrefixValues(Arrays.asList("eabfqxnm", "mqt", "bxyijddtvq", "ttadijae"))
                                        .withIpGroupNames(Arrays.asList("rsiee", "pndzaapmudqmeq")))
                                .withEtherTypes(Arrays.asList("cdisd", "sfjbjsvg"))
                                .withFragments(Arrays.asList("hryvy", "ytdc", "xgccknfnw"))
                                .withIpLengths(Arrays.asList("mvpdvjdhttzaef", "dxihc", "rphkmcrjdqnsdfz"))
                                .withTtlValues(Arrays.asList("tg", "ylkdghrje", "utlwxezwzhok"))
                                .withDscpMarkings(
                                    Arrays.asList("nhhtql", "ehgpp", "pifhpfeoajvgcxtx", "csheafidltugsr"))
                                .withPortCondition(
                                    new AccessControlListPortCondition()
                                        .withPortType(PortType.DESTINATION_PORT)
                                        .withLayer4Protocol(Layer4Protocol.TCP)
                                        .withPorts(Arrays.asList("ohmcwsld"))
                                        .withPortGroupNames(Arrays.asList("etpwbralll", "bphbqzmizakakank"))
                                        .withFlags(Arrays.asList("ssjhoiftxfkf", "egprhptil", "ucb"))),
                            new AccessControlListMatchCondition()
                                .withProtocolTypes(Arrays.asList("uuwwltv"))
                                .withVlanMatchCondition(
                                    new VlanMatchCondition()
                                        .withVlans(Arrays.asList("tzenk", "if", "zhmkdasvflyh", "xcudchxgsr"))
                                        .withInnerVlans(Arrays.asList("d", "or", "bwjl"))
                                        .withVlanGroupNames(
                                            Arrays.asList("bfhfovvacqp", "tuodxeszabbelaw", "muaslzkw")))
                                .withIpCondition(
                                    new IpMatchCondition()
                                        .withType(SourceDestinationType.SOURCE_IP)
                                        .withPrefixType(PrefixType.LONGEST_PREFIX)
                                        .withIpPrefixValues(Arrays.asList("cwyhahno", "drkywuhps", "fuurutlwexx"))
                                        .withIpGroupNames(Arrays.asList("lniexz", "rzpgep", "tybbwwpgda")))
                                .withEtherTypes(Arrays.asList("pibudqwyxebeybpm"))
                                .withFragments(Arrays.asList("rtffyaqitmh", "eioqaqhvse", "fuqyrxpdlcgqlsi"))
                                .withIpLengths(Arrays.asList("qfrddgam", "uhiosrsju", "vfcdisyirn"))
                                .withTtlValues(Arrays.asList("czexrxzbujrtrhqv"))
                                .withDscpMarkings(Arrays.asList("vk"))
                                .withPortCondition(
                                    new AccessControlListPortCondition()
                                        .withPortType(PortType.SOURCE_PORT)
                                        .withLayer4Protocol(Layer4Protocol.UDP)
                                        .withPorts(Arrays.asList("jeamurv", "mlovuanashcxl"))
                                        .withPortGroupNames(Arrays.asList("erbdk", "lvidizozs", "bccxjmonfdgn", "n"))
                                        .withFlags(Arrays.asList("nzonzl", "piqywnc", "jtszcof", "zehtdhgb"))),
                            new AccessControlListMatchCondition()
                                .withProtocolTypes(Arrays.asList("bgomfgbegl", "gleohi", "etnluankrrfx"))
                                .withVlanMatchCondition(
                                    new VlanMatchCondition()
                                        .withVlans(Arrays.asList("tijv", "cvbmqzb", "q"))
                                        .withInnerVlans(Arrays.asList("jrnwxacev"))
                                        .withVlanGroupNames(Arrays.asList("kuyxoafg", "oqltfae", "linmfgv")))
                                .withIpCondition(
                                    new IpMatchCondition()
                                        .withType(SourceDestinationType.DESTINATION_IP)
                                        .withPrefixType(PrefixType.LONGEST_PREFIX)
                                        .withIpPrefixValues(Arrays.asList("ypoq", "yhlqhykprlpyznu", "iq", "smexiitdf"))
                                        .withIpGroupNames(Arrays.asList("yasiibmiy", "nnust", "nlj", "nmgixh")))
                                .withEtherTypes(Arrays.asList("zyvli", "q", "rkcxkj", "bn"))
                                .withFragments(Arrays.asList("suxswqrntvlwijp"))
                                .withIpLengths(Arrays.asList("exoqqpwcyyufm", "runcuwmqspkcd", "zhlctddunqndyfpc"))
                                .withTtlValues(Arrays.asList("bnjj"))
                                .withDscpMarkings(Arrays.asList("egy", "cw", "oxjumvqqo", "ihrraiouaub"))
                                .withPortCondition(
                                    new AccessControlListPortCondition()
                                        .withPortType(PortType.DESTINATION_PORT)
                                        .withLayer4Protocol(Layer4Protocol.UDP)
                                        .withPorts(Arrays.asList("zslzojhp", "tfnmdx", "tngfdgugeyzihgr", "yui"))
                                        .withPortGroupNames(Arrays.asList("snmfpphojeevy", "yhsgz"))
                                        .withFlags(Arrays.asList("oq", "fuojrngif", "rzpasccbiuimzdly", "dfqwmkyoq")))))
                .withActions(
                    Arrays
                        .asList(
                            new AccessControlListAction().withType(AclActionType.LOG).withCounterName("foudor"),
                            new AccessControlListAction().withType(AclActionType.LOG).withCounterName("yprotwyp"),
                            new AccessControlListAction()
                                .withType(AclActionType.COUNT)
                                .withCounterName("bxhugcmjkavlgorb")));
        model = BinaryData.fromObject(model).toObject(AccessControlListMatchConfiguration.class);
        Assertions.assertEquals("eranokqgukkjqnv", model.matchConfigurationName());
        Assertions.assertEquals(8939885428846863813L, model.sequenceNumber());
        Assertions.assertEquals(IpAddressType.IPV4, model.ipAddressType());
        Assertions.assertEquals("n", model.matchConditions().get(0).protocolTypes().get(0));
        Assertions.assertEquals("imrsopteecjmei", model.matchConditions().get(0).vlanMatchCondition().vlans().get(0));
        Assertions
            .assertEquals("sylwxdzaumweooh", model.matchConditions().get(0).vlanMatchCondition().innerVlans().get(0));
        Assertions
            .assertEquals("jathwtzo", model.matchConditions().get(0).vlanMatchCondition().vlanGroupNames().get(0));
        Assertions
            .assertEquals(SourceDestinationType.DESTINATION_IP, model.matchConditions().get(0).ipCondition().type());
        Assertions.assertEquals(PrefixType.LONGEST_PREFIX, model.matchConditions().get(0).ipCondition().prefixType());
        Assertions.assertEquals("eabfqxnm", model.matchConditions().get(0).ipCondition().ipPrefixValues().get(0));
        Assertions.assertEquals("rsiee", model.matchConditions().get(0).ipCondition().ipGroupNames().get(0));
        Assertions.assertEquals("cdisd", model.matchConditions().get(0).etherTypes().get(0));
        Assertions.assertEquals("hryvy", model.matchConditions().get(0).fragments().get(0));
        Assertions.assertEquals("mvpdvjdhttzaef", model.matchConditions().get(0).ipLengths().get(0));
        Assertions.assertEquals("tg", model.matchConditions().get(0).ttlValues().get(0));
        Assertions.assertEquals("nhhtql", model.matchConditions().get(0).dscpMarkings().get(0));
        Assertions.assertEquals(PortType.DESTINATION_PORT, model.matchConditions().get(0).portCondition().portType());
        Assertions.assertEquals(Layer4Protocol.TCP, model.matchConditions().get(0).portCondition().layer4Protocol());
        Assertions.assertEquals("ohmcwsld", model.matchConditions().get(0).portCondition().ports().get(0));
        Assertions.assertEquals("etpwbralll", model.matchConditions().get(0).portCondition().portGroupNames().get(0));
        Assertions.assertEquals("ssjhoiftxfkf", model.matchConditions().get(0).portCondition().flags().get(0));
        Assertions.assertEquals(AclActionType.LOG, model.actions().get(0).type());
        Assertions.assertEquals("foudor", model.actions().get(0).counterName());
    }
}
