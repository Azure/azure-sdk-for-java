// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunity;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityRule;
import com.azure.resourcemanager.managednetworkfabric.models.WellKnownCommunities;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IpCommunitiesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"configurationState\":\"ErrorProvisioning\",\"provisioningState\":\"Succeeded\",\"administrativeState\":\"Enabled\",\"ipCommunityRules\":[{\"action\":\"Deny\",\"sequenceNumber\":7419786157769811395,\"wellKnownCommunities\":[\"NoAdvertise\"],\"communityMembers\":[\"rrrqnneqrypyurv\",\"hhovtue\"]},{\"action\":\"Permit\",\"sequenceNumber\":5041983404964007850,\"wellKnownCommunities\":[\"NoExport\",\"GShut\"],\"communityMembers\":[\"yb\",\"dzycxhaoegjzgplj\",\"nwczsraz\"]},{\"action\":\"Deny\",\"sequenceNumber\":7036914459390802617,\"wellKnownCommunities\":[\"NoAdvertise\",\"NoAdvertise\"],\"communityMembers\":[\"h\",\"pua\",\"asizzfmugykwuyc\",\"otennd\"]}],\"annotation\":\"thdzitjzffph\"},\"location\":\"wjqvs\",\"tags\":{\"z\":\"onadez\",\"rsguogkcbr\":\"vfybxmmrvnuvqk\",\"tvvqtmvifgcvsim\":\"tpyabensjflwp\",\"xgosnxa\":\"lbmti\"},\"id\":\"ptcd\",\"name\":\"mzxaoxlhmvj\",\"type\":\"nn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ManagedNetworkFabricManager manager = ManagedNetworkFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IpCommunity response
            = manager.ipCommunities()
                .define("khdhpmkxdujkxpuq")
                .withRegion("i")
                .withExistingResourceGroup("cabaam")
                .withTags(mapOf("pvhcbtza", "bvxqtolpwb", "ick", "rjxcon", "gvuqzgbjwvrudmp", "kithueoc", "esgyzwph",
                    "ewpmioleaja"))
                .withIpCommunityRules(Arrays.asList(
                    new IpCommunityRule().withAction(CommunityActionTypes.PERMIT)
                        .withSequenceNumber(4994198146168498626L)
                        .withWellKnownCommunities(
                            Arrays.asList(WellKnownCommunities.GSHUT, WellKnownCommunities.INTERNET))
                        .withCommunityMembers(Arrays.asList("ezxiz", "syxbfjilb")),
                    new IpCommunityRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(6838121574977908802L)
                        .withWellKnownCommunities(Arrays.asList(WellKnownCommunities.NO_ADVERTISE))
                        .withCommunityMembers(Arrays.asList("wivkdf", "jsk"))))
                .withAnnotation("bxzepirtv")
                .create();

        Assertions.assertEquals("wjqvs", response.location());
        Assertions.assertEquals("onadez", response.tags().get("z"));
        Assertions.assertEquals(CommunityActionTypes.DENY, response.ipCommunityRules().get(0).action());
        Assertions.assertEquals(7419786157769811395L, response.ipCommunityRules().get(0).sequenceNumber());
        Assertions.assertEquals(WellKnownCommunities.NO_ADVERTISE,
            response.ipCommunityRules().get(0).wellKnownCommunities().get(0));
        Assertions.assertEquals("rrrqnneqrypyurv", response.ipCommunityRules().get(0).communityMembers().get(0));
        Assertions.assertEquals("thdzitjzffph", response.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
