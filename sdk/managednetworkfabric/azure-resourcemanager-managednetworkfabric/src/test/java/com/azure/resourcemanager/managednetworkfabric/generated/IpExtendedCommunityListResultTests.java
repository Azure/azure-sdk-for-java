// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpExtendedCommunityInner;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunityListResult;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunityRule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IpExtendedCommunityListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpExtendedCommunityListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"configurationState\":\"Provisioned\",\"provisioningState\":\"Updating\",\"administrativeState\":\"MAT\",\"ipExtendedCommunityRules\":[{\"action\":\"Deny\",\"sequenceNumber\":1372777057626285328,\"routeTargets\":[\"upeuknijduyye\",\"pydjfboc\",\"v\"]},{\"action\":\"Deny\",\"sequenceNumber\":2704241280285106932,\"routeTargets\":[\"tywikd\",\"hl\"]},{\"action\":\"Permit\",\"sequenceNumber\":7479528386540707541,\"routeTargets\":[\"gbhgau\",\"cdixmx\",\"f\"]},{\"action\":\"Deny\",\"sequenceNumber\":8950923037770050787,\"routeTargets\":[\"qg\",\"kfnozoeoqbvj\",\"vefgwbmqjchntas\"]}],\"annotation\":\"ymxbulpzealb\"},\"location\":\"kyojwyvfk\",\"tags\":{\"sgxjc\":\"suah\"},\"id\":\"mzrrscubiwsdrn\",\"name\":\"xqw\",\"type\":\"diffjxcjrmmuab\"},{\"properties\":{\"configurationState\":\"Succeeded\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Disabled\",\"ipExtendedCommunityRules\":[{\"action\":\"Deny\",\"sequenceNumber\":2828569188008254931,\"routeTargets\":[\"yefoyzbamwineo\",\"vfkakpold\",\"vevboclzh\",\"jknyu\"]},{\"action\":\"Permit\",\"sequenceNumber\":1613523004175535231,\"routeTargets\":[\"xpn\",\"upzaamrdixtre\",\"ids\"]}],\"annotation\":\"skbruffgllukkut\"},\"location\":\"xhrp\",\"tags\":{\"iryr\":\"mblcouqehbhbcds\",\"pmbltoormkfql\":\"ndo\",\"nbmjksibjgsjjxxa\":\"xldykalsygaolnjp\"},\"id\":\"mr\",\"name\":\"ad\",\"type\":\"yqegx\"},{\"properties\":{\"configurationState\":\"ErrorDeprovisioning\",\"provisioningState\":\"Canceled\",\"administrativeState\":\"Enabled\",\"ipExtendedCommunityRules\":[{\"action\":\"Deny\",\"sequenceNumber\":8159905812934622437,\"routeTargets\":[\"ijkgqxnhm\",\"keznjaujvaa\",\"nggiycwkdtaa\",\"xw\"]},{\"action\":\"Permit\",\"sequenceNumber\":1273993162017075597,\"routeTargets\":[\"mrrqmbzmqkratb\",\"xwbjs\",\"dbirkfpksokdgo\"]},{\"action\":\"Deny\",\"sequenceNumber\":6649960660552995565,\"routeTargets\":[\"ym\",\"hbguzo\"]}],\"annotation\":\"yewnfnzhhhqos\"},\"location\":\"fjkutycyarnroo\",\"tags\":{\"ocnhzqrottjzcfyj\":\"abzoghktdpyczhco\",\"rl\":\"pt\",\"pqinf\":\"h\"},\"id\":\"zpyglqdhmrj\",\"name\":\"ralcxpjbyypsj\",\"type\":\"qcjenkyhf\"}],\"nextLink\":\"vsqxfxjelgcmpzqj\"}")
            .toObject(IpExtendedCommunityListResult.class);
        Assertions.assertEquals("kyojwyvfk", model.value().get(0).location());
        Assertions.assertEquals("suah", model.value().get(0).tags().get("sgxjc"));
        Assertions.assertEquals(CommunityActionTypes.DENY,
            model.value().get(0).ipExtendedCommunityRules().get(0).action());
        Assertions.assertEquals(1372777057626285328L,
            model.value().get(0).ipExtendedCommunityRules().get(0).sequenceNumber());
        Assertions.assertEquals("upeuknijduyye",
            model.value().get(0).ipExtendedCommunityRules().get(0).routeTargets().get(0));
        Assertions.assertEquals("ymxbulpzealb", model.value().get(0).annotation());
        Assertions.assertEquals("vsqxfxjelgcmpzqj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpExtendedCommunityListResult model = new IpExtendedCommunityListResult().withValue(Arrays.asList(
            new IpExtendedCommunityInner().withLocation("kyojwyvfk")
                .withTags(mapOf("sgxjc", "suah"))
                .withIpExtendedCommunityRules(Arrays.asList(
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(1372777057626285328L)
                        .withRouteTargets(Arrays.asList("upeuknijduyye", "pydjfboc", "v")),
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(2704241280285106932L)
                        .withRouteTargets(Arrays.asList("tywikd", "hl")),
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.PERMIT)
                        .withSequenceNumber(7479528386540707541L)
                        .withRouteTargets(Arrays.asList("gbhgau", "cdixmx", "f")),
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(8950923037770050787L)
                        .withRouteTargets(Arrays.asList("qg", "kfnozoeoqbvj", "vefgwbmqjchntas"))))
                .withAnnotation("ymxbulpzealb"),
            new IpExtendedCommunityInner().withLocation("xhrp")
                .withTags(
                    mapOf("iryr", "mblcouqehbhbcds", "pmbltoormkfql", "ndo", "nbmjksibjgsjjxxa", "xldykalsygaolnjp"))
                .withIpExtendedCommunityRules(Arrays.asList(
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(2828569188008254931L)
                        .withRouteTargets(Arrays.asList("yefoyzbamwineo", "vfkakpold", "vevboclzh", "jknyu")),
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.PERMIT)
                        .withSequenceNumber(1613523004175535231L)
                        .withRouteTargets(Arrays.asList("xpn", "upzaamrdixtre", "ids"))))
                .withAnnotation("skbruffgllukkut"),
            new IpExtendedCommunityInner().withLocation("fjkutycyarnroo")
                .withTags(mapOf("ocnhzqrottjzcfyj", "abzoghktdpyczhco", "rl", "pt", "pqinf", "h"))
                .withIpExtendedCommunityRules(Arrays.asList(
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(8159905812934622437L)
                        .withRouteTargets(Arrays.asList("ijkgqxnhm", "keznjaujvaa", "nggiycwkdtaa", "xw")),
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.PERMIT)
                        .withSequenceNumber(1273993162017075597L)
                        .withRouteTargets(Arrays.asList("mrrqmbzmqkratb", "xwbjs", "dbirkfpksokdgo")),
                    new IpExtendedCommunityRule().withAction(CommunityActionTypes.DENY)
                        .withSequenceNumber(6649960660552995565L)
                        .withRouteTargets(Arrays.asList("ym", "hbguzo"))))
                .withAnnotation("yewnfnzhhhqos")))
            .withNextLink("vsqxfxjelgcmpzqj");
        model = BinaryData.fromObject(model).toObject(IpExtendedCommunityListResult.class);
        Assertions.assertEquals("kyojwyvfk", model.value().get(0).location());
        Assertions.assertEquals("suah", model.value().get(0).tags().get("sgxjc"));
        Assertions.assertEquals(CommunityActionTypes.DENY,
            model.value().get(0).ipExtendedCommunityRules().get(0).action());
        Assertions.assertEquals(1372777057626285328L,
            model.value().get(0).ipExtendedCommunityRules().get(0).sequenceNumber());
        Assertions.assertEquals("upeuknijduyye",
            model.value().get(0).ipExtendedCommunityRules().get(0).routeTargets().get(0));
        Assertions.assertEquals("ymxbulpzealb", model.value().get(0).annotation());
        Assertions.assertEquals("vsqxfxjelgcmpzqj", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
