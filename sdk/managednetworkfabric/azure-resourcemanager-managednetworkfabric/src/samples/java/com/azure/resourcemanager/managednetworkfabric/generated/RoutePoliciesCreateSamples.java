// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.resourcemanager.managednetworkfabric.models.Components1Qbx3T1SchemasRoutepolicypropertiesPropertiesConditionsItemsPropertiesActionPropertiesSet;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyPropertiesConditionsItem;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyPropertiesConditionsItemAction;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyPropertiesConditionsItemMatch;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyPropertiesConditionsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for RoutePolicies Create. */
public final class RoutePoliciesCreateSamples {
    /*
     * x-ms-original-file: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2023-02-01-preview/examples/RoutePolicies_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: RoutePolicies_Create_MaximumSet_Gen.
     *
     * @param manager Entry point to ManagednetworkfabricManager.
     */
    public static void routePoliciesCreateMaximumSetGen(
        com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager manager) {
        manager
            .routePolicies()
            .define("example RoutePolicy")
            .withRegion("EastUS")
            .withExistingResourceGroup("rgRoutePolicies")
            .withTags(mapOf("key8254", ""))
            .withDescription("RPexample")
            .withConditions(
                Arrays
                    .asList(
                        new RoutePolicyPropertiesConditionsItem()
                            .withAnnotation("")
                            .withSequenceNumber(7)
                            .withMatch(
                                new RoutePolicyPropertiesConditionsItemMatch()
                                    .withAccessControlListIds(
                                        Arrays
                                            .asList(
                                                "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ManagedNetworkFabric/routePolicies/accessControlLists/accessControlListName"))
                                    .withIpCommunityListIds(
                                        Arrays
                                            .asList(
                                                "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ManagedNetworkFabric/routePolicies/ipCommunityLists/ipCommunityListName"))
                                    .withIpExtendedCommunityListIds(Arrays.asList("")))
                            .withAction(
                                new RoutePolicyPropertiesConditionsItemAction()
                                    .withAction("allow")
                                    .withSet(
                                        new Components1Qbx3T1SchemasRoutepolicypropertiesPropertiesConditionsItemsPropertiesActionPropertiesSet()
                                            .withSet(
                                                new RoutePolicyPropertiesConditionsProperties()
                                                    .withIpCommunityListIds(
                                                        Arrays
                                                            .asList(
                                                                "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ManagedNetworkFabric/routePolicies/ipCommunityLists/ipCommunityListName"))
                                                    .withIpExtendedCommunityListIds(Arrays.asList("")))))))
            .withAnnotation("example routepolicy")
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
