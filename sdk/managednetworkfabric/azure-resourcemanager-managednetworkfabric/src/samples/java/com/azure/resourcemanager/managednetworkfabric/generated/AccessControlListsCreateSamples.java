// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListAction;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.AclActionType;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for AccessControlLists Create. */
public final class AccessControlListsCreateSamples {
    /*
     * x-ms-original-file: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/stable/2023-06-15/examples/AccessControlLists_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: AccessControlLists_Create_MaximumSet_Gen.
     *
     * @param manager Entry point to ManagedNetworkFabricManager.
     */
    public static void accessControlListsCreateMaximumSetGen(
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager) {
        manager
            .accessControlLists()
            .define("example-acl")
            .withRegion("eastUs")
            .withExistingResourceGroup("example-rg")
            .withTags(mapOf("keyID", "fakeTokenPlaceholder"))
            .withConfigurationType(ConfigurationType.FILE)
            .withAclsUrl("https://ACL-Storage-URL")
            .withMatchConfigurations(
                Arrays
                    .asList(
                        new AccessControlListMatchConfiguration()
                            .withMatchConfigurationName("example-match")
                            .withSequenceNumber(123L)
                            .withIpAddressType(IpAddressType.IPV4)
                            .withMatchConditions(
                                Arrays
                                    .asList(
                                        new AccessControlListMatchCondition()
                                            .withProtocolTypes(Arrays.asList("TCP"))
                                            .withVlanMatchCondition(
                                                new VlanMatchCondition()
                                                    .withVlans(Arrays.asList("20-30"))
                                                    .withInnerVlans(Arrays.asList("30"))
                                                    .withVlanGroupNames(Arrays.asList("example-vlanGroup")))
                                            .withIpCondition(
                                                new IpMatchCondition()
                                                    .withType(SourceDestinationType.SOURCE_IP)
                                                    .withPrefixType(PrefixType.PREFIX)
                                                    .withIpPrefixValues(Arrays.asList("10.20.20.20/12"))
                                                    .withIpGroupNames(Arrays.asList("example-ipGroup")))
                                            .withEtherTypes(Arrays.asList("0x1"))
                                            .withFragments(Arrays.asList("0xff00-0xffff"))
                                            .withIpLengths(Arrays.asList("4094-9214"))
                                            .withTtlValues(Arrays.asList("23"))
                                            .withDscpMarkings(Arrays.asList("32"))
                                            .withPortCondition(
                                                new AccessControlListPortCondition()
                                                    .withPortType(PortType.SOURCE_PORT)
                                                    .withLayer4Protocol(Layer4Protocol.TCP)
                                                    .withPorts(Arrays.asList("1-20"))
                                                    .withPortGroupNames(Arrays.asList("example-portGroup"))
                                                    .withFlags(Arrays.asList("established")))))
                            .withActions(
                                Arrays
                                    .asList(
                                        new AccessControlListAction()
                                            .withType(AclActionType.COUNT)
                                            .withCounterName("example-counter")))))
            .withDynamicMatchConfigurations(
                Arrays
                    .asList(
                        new CommonDynamicMatchConfiguration()
                            .withIpGroups(
                                Arrays
                                    .asList(
                                        new IpGroupProperties()
                                            .withName("example-ipGroup")
                                            .withIpAddressType(IpAddressType.IPV4)
                                            .withIpPrefixes(Arrays.asList("10.20.3.1/20"))))
                            .withVlanGroups(
                                Arrays
                                    .asList(
                                        new VlanGroupProperties()
                                            .withName("example-vlanGroup")
                                            .withVlans(Arrays.asList("20-30"))))
                            .withPortGroups(
                                Arrays
                                    .asList(
                                        new PortGroupProperties()
                                            .withName("example-portGroup")
                                            .withPorts(Arrays.asList("100-200"))))))
            .withAnnotation("annotation")
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
