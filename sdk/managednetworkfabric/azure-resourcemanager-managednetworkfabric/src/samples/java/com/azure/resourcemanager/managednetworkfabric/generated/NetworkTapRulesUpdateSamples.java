// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.resourcemanager.managednetworkfabric.models.BooleanEnumProperty;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.EncapsulationType;
import com.azure.resourcemanager.managednetworkfabric.models.IpAddressType;
import com.azure.resourcemanager.managednetworkfabric.models.IpGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.Layer4Protocol;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRule;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleAction;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchCondition;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.PortCondition;
import com.azure.resourcemanager.managednetworkfabric.models.PortGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PortType;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixType;
import com.azure.resourcemanager.managednetworkfabric.models.SourceDestinationType;
import com.azure.resourcemanager.managednetworkfabric.models.TapRuleActionType;
import com.azure.resourcemanager.managednetworkfabric.models.VlanGroupProperties;
import com.azure.resourcemanager.managednetworkfabric.models.VlanMatchCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for NetworkTapRules Update. */
public final class NetworkTapRulesUpdateSamples {
    /*
     * x-ms-original-file: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/stable/2023-06-15/examples/NetworkTapRules_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: NetworkTapRules_Update_MaximumSet_Gen.
     *
     * @param manager Entry point to ManagedNetworkFabricManager.
     */
    public static void networkTapRulesUpdateMaximumSetGen(
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager) {
        NetworkTapRule resource =
            manager
                .networkTapRules()
                .getByResourceGroupWithResponse("example-rg", "example-tapRule", com.azure.core.util.Context.NONE)
                .getValue();
        resource
            .update()
            .withTags(mapOf("keyID", "fakeTokenPlaceholder"))
            .withConfigurationType(ConfigurationType.FILE)
            .withTapRulesUrl("https://microsoft.com/amdsdx")
            .withMatchConfigurations(
                Arrays
                    .asList(
                        new NetworkTapRuleMatchConfiguration()
                            .withMatchConfigurationName("config1")
                            .withSequenceNumber(10L)
                            .withIpAddressType(IpAddressType.IPV4)
                            .withMatchConditions(
                                Arrays
                                    .asList(
                                        new NetworkTapRuleMatchCondition()
                                            .withProtocolTypes(Arrays.asList("TCP"))
                                            .withVlanMatchCondition(
                                                new VlanMatchCondition()
                                                    .withVlans(Arrays.asList("10"))
                                                    .withInnerVlans(Arrays.asList("11-20"))
                                                    .withVlanGroupNames(Arrays.asList("exmaple-vlanGroup")))
                                            .withIpCondition(
                                                new IpMatchCondition()
                                                    .withType(SourceDestinationType.SOURCE_IP)
                                                    .withPrefixType(PrefixType.PREFIX)
                                                    .withIpPrefixValues(Arrays.asList("10.10.10.10/20"))
                                                    .withIpGroupNames(Arrays.asList("example-ipGroup")))
                                            .withEncapsulationType(EncapsulationType.NONE)
                                            .withPortCondition(
                                                new PortCondition()
                                                    .withPortType(PortType.SOURCE_PORT)
                                                    .withLayer4Protocol(Layer4Protocol.TCP)
                                                    .withPorts(Arrays.asList("100"))
                                                    .withPortGroupNames(Arrays.asList("example-portGroup1")))))
                            .withActions(
                                Arrays
                                    .asList(
                                        new NetworkTapRuleAction()
                                            .withType(TapRuleActionType.GOTO)
                                            .withTruncate("100")
                                            .withIsTimestampEnabled(BooleanEnumProperty.TRUE)
                                            .withDestinationId(
                                                "/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourcegroups/example-rg/providers/Microsoft.ManagedNetworkFabric/neighborGroups/example-neighborGroup")
                                            .withMatchConfigurationName("match1")))))
            .withDynamicMatchConfigurations(
                Arrays
                    .asList(
                        new CommonDynamicMatchConfiguration()
                            .withIpGroups(
                                Arrays
                                    .asList(
                                        new IpGroupProperties()
                                            .withName("example-ipGroup1")
                                            .withIpAddressType(IpAddressType.IPV4)
                                            .withIpPrefixes(Arrays.asList("10.10.10.10/30"))))
                            .withVlanGroups(
                                Arrays
                                    .asList(
                                        new VlanGroupProperties()
                                            .withName("exmaple-vlanGroup")
                                            .withVlans(Arrays.asList("10", "100-200"))))
                            .withPortGroups(
                                Arrays
                                    .asList(
                                        new PortGroupProperties()
                                            .withName("example-portGroup1")
                                            .withPorts(Arrays.asList("100-200"))))))
            .withAnnotation("annotation")
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
