// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRuleMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.PollingIntervalInSeconds;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Network Tap Rule Properties defines the resource properties.
 */
@Fluent
public final class NetworkTapRuleProperties extends AnnotationResource {
    /*
     * The ARM resource Id of the NetworkTap.
     */
    private String networkTapId;

    /*
     * Polling interval in seconds.
     */
    private PollingIntervalInSeconds pollingIntervalInSeconds;

    /*
     * The last sync timestamp.
     */
    private OffsetDateTime lastSyncedTime;

    /*
     * Configuration state of the resource.
     */
    private ConfigurationState configurationState;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Administrative state of the resource.
     */
    private AdministrativeState administrativeState;

    /*
     * Input method to configure Network Tap Rule.
     */
    private ConfigurationType configurationType;

    /*
     * Network Tap Rules file URL.
     */
    private String tapRulesUrl;

    /*
     * List of match configurations.
     */
    private List<NetworkTapRuleMatchConfiguration> matchConfigurations;

    /*
     * List of dynamic match configurations.
     */
    private List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations;

    /**
     * Creates an instance of NetworkTapRuleProperties class.
     */
    public NetworkTapRuleProperties() {
    }

    /**
     * Get the networkTapId property: The ARM resource Id of the NetworkTap.
     * 
     * @return the networkTapId value.
     */
    public String networkTapId() {
        return this.networkTapId;
    }

    /**
     * Get the pollingIntervalInSeconds property: Polling interval in seconds.
     * 
     * @return the pollingIntervalInSeconds value.
     */
    public PollingIntervalInSeconds pollingIntervalInSeconds() {
        return this.pollingIntervalInSeconds;
    }

    /**
     * Set the pollingIntervalInSeconds property: Polling interval in seconds.
     * 
     * @param pollingIntervalInSeconds the pollingIntervalInSeconds value to set.
     * @return the NetworkTapRuleProperties object itself.
     */
    public NetworkTapRuleProperties withPollingIntervalInSeconds(PollingIntervalInSeconds pollingIntervalInSeconds) {
        this.pollingIntervalInSeconds = pollingIntervalInSeconds;
        return this;
    }

    /**
     * Get the lastSyncedTime property: The last sync timestamp.
     * 
     * @return the lastSyncedTime value.
     */
    public OffsetDateTime lastSyncedTime() {
        return this.lastSyncedTime;
    }

    /**
     * Get the configurationState property: Configuration state of the resource.
     * 
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.configurationState;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     * 
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.administrativeState;
    }

    /**
     * Get the configurationType property: Input method to configure Network Tap Rule.
     * 
     * @return the configurationType value.
     */
    public ConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Set the configurationType property: Input method to configure Network Tap Rule.
     * 
     * @param configurationType the configurationType value to set.
     * @return the NetworkTapRuleProperties object itself.
     */
    public NetworkTapRuleProperties withConfigurationType(ConfigurationType configurationType) {
        this.configurationType = configurationType;
        return this;
    }

    /**
     * Get the tapRulesUrl property: Network Tap Rules file URL.
     * 
     * @return the tapRulesUrl value.
     */
    public String tapRulesUrl() {
        return this.tapRulesUrl;
    }

    /**
     * Set the tapRulesUrl property: Network Tap Rules file URL.
     * 
     * @param tapRulesUrl the tapRulesUrl value to set.
     * @return the NetworkTapRuleProperties object itself.
     */
    public NetworkTapRuleProperties withTapRulesUrl(String tapRulesUrl) {
        this.tapRulesUrl = tapRulesUrl;
        return this;
    }

    /**
     * Get the matchConfigurations property: List of match configurations.
     * 
     * @return the matchConfigurations value.
     */
    public List<NetworkTapRuleMatchConfiguration> matchConfigurations() {
        return this.matchConfigurations;
    }

    /**
     * Set the matchConfigurations property: List of match configurations.
     * 
     * @param matchConfigurations the matchConfigurations value to set.
     * @return the NetworkTapRuleProperties object itself.
     */
    public NetworkTapRuleProperties
        withMatchConfigurations(List<NetworkTapRuleMatchConfiguration> matchConfigurations) {
        this.matchConfigurations = matchConfigurations;
        return this;
    }

    /**
     * Get the dynamicMatchConfigurations property: List of dynamic match configurations.
     * 
     * @return the dynamicMatchConfigurations value.
     */
    public List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations() {
        return this.dynamicMatchConfigurations;
    }

    /**
     * Set the dynamicMatchConfigurations property: List of dynamic match configurations.
     * 
     * @param dynamicMatchConfigurations the dynamicMatchConfigurations value to set.
     * @return the NetworkTapRuleProperties object itself.
     */
    public NetworkTapRuleProperties
        withDynamicMatchConfigurations(List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations) {
        this.dynamicMatchConfigurations = dynamicMatchConfigurations;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkTapRuleProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (matchConfigurations() != null) {
            matchConfigurations().forEach(e -> e.validate());
        }
        if (dynamicMatchConfigurations() != null) {
            dynamicMatchConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeNumberField("pollingIntervalInSeconds",
            this.pollingIntervalInSeconds == null ? null : this.pollingIntervalInSeconds.getValue());
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        jsonWriter.writeStringField("tapRulesUrl", this.tapRulesUrl);
        jsonWriter.writeArrayField("matchConfigurations", this.matchConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dynamicMatchConfigurations", this.dynamicMatchConfigurations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkTapRuleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkTapRuleProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkTapRuleProperties.
     */
    public static NetworkTapRuleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkTapRuleProperties deserializedNetworkTapRuleProperties = new NetworkTapRuleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.withAnnotation(reader.getString());
                } else if ("networkTapId".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.networkTapId = reader.getString();
                } else if ("pollingIntervalInSeconds".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.pollingIntervalInSeconds
                        = PollingIntervalInSeconds.fromValue(reader.getInt());
                } else if ("lastSyncedTime".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.lastSyncedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("configurationState".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.configurationState
                        = ConfigurationState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("administrativeState".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.administrativeState
                        = AdministrativeState.fromString(reader.getString());
                } else if ("configurationType".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.configurationType
                        = ConfigurationType.fromString(reader.getString());
                } else if ("tapRulesUrl".equals(fieldName)) {
                    deserializedNetworkTapRuleProperties.tapRulesUrl = reader.getString();
                } else if ("matchConfigurations".equals(fieldName)) {
                    List<NetworkTapRuleMatchConfiguration> matchConfigurations
                        = reader.readArray(reader1 -> NetworkTapRuleMatchConfiguration.fromJson(reader1));
                    deserializedNetworkTapRuleProperties.matchConfigurations = matchConfigurations;
                } else if ("dynamicMatchConfigurations".equals(fieldName)) {
                    List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations
                        = reader.readArray(reader1 -> CommonDynamicMatchConfiguration.fromJson(reader1));
                    deserializedNetworkTapRuleProperties.dynamicMatchConfigurations = dynamicMatchConfigurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkTapRuleProperties;
        });
    }
}
