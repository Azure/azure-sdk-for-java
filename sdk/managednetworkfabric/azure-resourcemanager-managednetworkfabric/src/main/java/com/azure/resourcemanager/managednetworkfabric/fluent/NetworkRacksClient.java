// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkRackInner;
import com.azure.resourcemanager.managednetworkfabric.models.TagsUpdate;

/** An instance of this class provides access to all the operations defined in NetworkRacksClient. */
public interface NetworkRacksClient {
    /**
     * Create Network Rack.
     *
     * <p>Create Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkRackInner>, NetworkRackInner> beginCreate(
        String resourceGroupName, String networkRackName, NetworkRackInner body);

    /**
     * Create Network Rack.
     *
     * <p>Create Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkRackInner>, NetworkRackInner> beginCreate(
        String resourceGroupName, String networkRackName, NetworkRackInner body, Context context);

    /**
     * Create Network Rack.
     *
     * <p>Create Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkRackInner create(String resourceGroupName, String networkRackName, NetworkRackInner body);

    /**
     * Create Network Rack.
     *
     * <p>Create Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkRackInner create(String resourceGroupName, String networkRackName, NetworkRackInner body, Context context);

    /**
     * Gets a Network Rack.
     *
     * <p>Get Network Rack resource details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Rack resource details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NetworkRackInner> getByResourceGroupWithResponse(
        String resourceGroupName, String networkRackName, Context context);

    /**
     * Gets a Network Rack.
     *
     * <p>Get Network Rack resource details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Rack resource details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkRackInner getByResourceGroup(String resourceGroupName, String networkRackName);

    /**
     * Updates a Network Rack.
     *
     * <p>Update certain properties of the Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Network Rack properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkRackInner>, NetworkRackInner> beginUpdate(
        String resourceGroupName, String networkRackName, TagsUpdate body);

    /**
     * Updates a Network Rack.
     *
     * <p>Update certain properties of the Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Network Rack properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkRackInner>, NetworkRackInner> beginUpdate(
        String resourceGroupName, String networkRackName, TagsUpdate body, Context context);

    /**
     * Updates a Network Rack.
     *
     * <p>Update certain properties of the Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Network Rack properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkRackInner update(String resourceGroupName, String networkRackName, TagsUpdate body);

    /**
     * Updates a Network Rack.
     *
     * <p>Update certain properties of the Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param body Network Rack properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Rack resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkRackInner update(String resourceGroupName, String networkRackName, TagsUpdate body, Context context);

    /**
     * Deletes a Network Rack.
     *
     * <p>Delete Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkRackName);

    /**
     * Deletes a Network Rack.
     *
     * <p>Delete Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkRackName, Context context);

    /**
     * Deletes a Network Rack.
     *
     * <p>Delete Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkRackName);

    /**
     * Deletes a Network Rack.
     *
     * <p>Delete Network Rack resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkRackName Name of the Network Rack.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkRackName, Context context);

    /**
     * List Network Racks by resource group.
     *
     * <p>List all Network Rack resources in the given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Racks as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkRackInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Network Racks by resource group.
     *
     * <p>List all Network Rack resources in the given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Racks as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkRackInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List Network Racks by subscription.
     *
     * <p>List all Network Rack resources in the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Racks as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkRackInner> list();

    /**
     * List Network Racks by subscription.
     *
     * <p>List all Network Rack resources in the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Racks as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkRackInner> list(Context context);
}
