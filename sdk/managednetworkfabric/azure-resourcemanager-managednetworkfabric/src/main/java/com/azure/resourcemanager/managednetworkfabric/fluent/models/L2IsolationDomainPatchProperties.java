// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import java.io.IOException;

/**
 * L2 Isolation Domain Patch Properties defines the patchable properties of the resource.
 */
@Fluent
public final class L2IsolationDomainPatchProperties extends AnnotationResource {
    /*
     * Maximum transmission unit. Default value is 1500.
     */
    private Integer mtu;

    /**
     * Creates an instance of L2IsolationDomainPatchProperties class.
     */
    public L2IsolationDomainPatchProperties() {
    }

    /**
     * Get the mtu property: Maximum transmission unit. Default value is 1500.
     * 
     * @return the mtu value.
     */
    public Integer mtu() {
        return this.mtu;
    }

    /**
     * Set the mtu property: Maximum transmission unit. Default value is 1500.
     * 
     * @param mtu the mtu value to set.
     * @return the L2IsolationDomainPatchProperties object itself.
     */
    public L2IsolationDomainPatchProperties withMtu(Integer mtu) {
        this.mtu = mtu;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public L2IsolationDomainPatchProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeNumberField("mtu", this.mtu);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of L2IsolationDomainPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of L2IsolationDomainPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the L2IsolationDomainPatchProperties.
     */
    public static L2IsolationDomainPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            L2IsolationDomainPatchProperties deserializedL2IsolationDomainPatchProperties
                = new L2IsolationDomainPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedL2IsolationDomainPatchProperties.withAnnotation(reader.getString());
                } else if ("mtu".equals(fieldName)) {
                    deserializedL2IsolationDomainPatchProperties.mtu = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedL2IsolationDomainPatchProperties;
        });
    }
}
