// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * L3 Isolation Domain Patch Properties defines the patchable properties of the resource.
 */
@Fluent
public class L3IsolationDomainPatchableProperties implements JsonSerializable<L3IsolationDomainPatchableProperties> {
    /*
     * Advertise Connected Subnets. Ex: "True" | "False".
     */
    private RedistributeConnectedSubnets redistributeConnectedSubnets;

    /*
     * Advertise Static Routes. Ex: "True" | "False".
     */
    private RedistributeStaticRoutes redistributeStaticRoutes;

    /*
     * Aggregate route configurations.
     */
    private AggregateRouteConfiguration aggregateRouteConfiguration;

    /*
     * Connected Subnet RoutePolicy
     */
    private ConnectedSubnetRoutePolicy connectedSubnetRoutePolicy;

    /**
     * Creates an instance of L3IsolationDomainPatchableProperties class.
     */
    public L3IsolationDomainPatchableProperties() {
    }

    /**
     * Get the redistributeConnectedSubnets property: Advertise Connected Subnets. Ex: "True" | "False".
     * 
     * @return the redistributeConnectedSubnets value.
     */
    public RedistributeConnectedSubnets redistributeConnectedSubnets() {
        return this.redistributeConnectedSubnets;
    }

    /**
     * Set the redistributeConnectedSubnets property: Advertise Connected Subnets. Ex: "True" | "False".
     * 
     * @param redistributeConnectedSubnets the redistributeConnectedSubnets value to set.
     * @return the L3IsolationDomainPatchableProperties object itself.
     */
    public L3IsolationDomainPatchableProperties
        withRedistributeConnectedSubnets(RedistributeConnectedSubnets redistributeConnectedSubnets) {
        this.redistributeConnectedSubnets = redistributeConnectedSubnets;
        return this;
    }

    /**
     * Get the redistributeStaticRoutes property: Advertise Static Routes. Ex: "True" | "False".
     * 
     * @return the redistributeStaticRoutes value.
     */
    public RedistributeStaticRoutes redistributeStaticRoutes() {
        return this.redistributeStaticRoutes;
    }

    /**
     * Set the redistributeStaticRoutes property: Advertise Static Routes. Ex: "True" | "False".
     * 
     * @param redistributeStaticRoutes the redistributeStaticRoutes value to set.
     * @return the L3IsolationDomainPatchableProperties object itself.
     */
    public L3IsolationDomainPatchableProperties
        withRedistributeStaticRoutes(RedistributeStaticRoutes redistributeStaticRoutes) {
        this.redistributeStaticRoutes = redistributeStaticRoutes;
        return this;
    }

    /**
     * Get the aggregateRouteConfiguration property: Aggregate route configurations.
     * 
     * @return the aggregateRouteConfiguration value.
     */
    public AggregateRouteConfiguration aggregateRouteConfiguration() {
        return this.aggregateRouteConfiguration;
    }

    /**
     * Set the aggregateRouteConfiguration property: Aggregate route configurations.
     * 
     * @param aggregateRouteConfiguration the aggregateRouteConfiguration value to set.
     * @return the L3IsolationDomainPatchableProperties object itself.
     */
    public L3IsolationDomainPatchableProperties
        withAggregateRouteConfiguration(AggregateRouteConfiguration aggregateRouteConfiguration) {
        this.aggregateRouteConfiguration = aggregateRouteConfiguration;
        return this;
    }

    /**
     * Get the connectedSubnetRoutePolicy property: Connected Subnet RoutePolicy.
     * 
     * @return the connectedSubnetRoutePolicy value.
     */
    public ConnectedSubnetRoutePolicy connectedSubnetRoutePolicy() {
        return this.connectedSubnetRoutePolicy;
    }

    /**
     * Set the connectedSubnetRoutePolicy property: Connected Subnet RoutePolicy.
     * 
     * @param connectedSubnetRoutePolicy the connectedSubnetRoutePolicy value to set.
     * @return the L3IsolationDomainPatchableProperties object itself.
     */
    public L3IsolationDomainPatchableProperties
        withConnectedSubnetRoutePolicy(ConnectedSubnetRoutePolicy connectedSubnetRoutePolicy) {
        this.connectedSubnetRoutePolicy = connectedSubnetRoutePolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aggregateRouteConfiguration() != null) {
            aggregateRouteConfiguration().validate();
        }
        if (connectedSubnetRoutePolicy() != null) {
            connectedSubnetRoutePolicy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("redistributeConnectedSubnets",
            this.redistributeConnectedSubnets == null ? null : this.redistributeConnectedSubnets.toString());
        jsonWriter.writeStringField("redistributeStaticRoutes",
            this.redistributeStaticRoutes == null ? null : this.redistributeStaticRoutes.toString());
        jsonWriter.writeJsonField("aggregateRouteConfiguration", this.aggregateRouteConfiguration);
        jsonWriter.writeJsonField("connectedSubnetRoutePolicy", this.connectedSubnetRoutePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of L3IsolationDomainPatchableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of L3IsolationDomainPatchableProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the L3IsolationDomainPatchableProperties.
     */
    public static L3IsolationDomainPatchableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            L3IsolationDomainPatchableProperties deserializedL3IsolationDomainPatchableProperties
                = new L3IsolationDomainPatchableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("redistributeConnectedSubnets".equals(fieldName)) {
                    deserializedL3IsolationDomainPatchableProperties.redistributeConnectedSubnets
                        = RedistributeConnectedSubnets.fromString(reader.getString());
                } else if ("redistributeStaticRoutes".equals(fieldName)) {
                    deserializedL3IsolationDomainPatchableProperties.redistributeStaticRoutes
                        = RedistributeStaticRoutes.fromString(reader.getString());
                } else if ("aggregateRouteConfiguration".equals(fieldName)) {
                    deserializedL3IsolationDomainPatchableProperties.aggregateRouteConfiguration
                        = AggregateRouteConfiguration.fromJson(reader);
                } else if ("connectedSubnetRoutePolicy".equals(fieldName)) {
                    deserializedL3IsolationDomainPatchableProperties.connectedSubnetRoutePolicy
                        = ConnectedSubnetRoutePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedL3IsolationDomainPatchableProperties;
        });
    }
}
