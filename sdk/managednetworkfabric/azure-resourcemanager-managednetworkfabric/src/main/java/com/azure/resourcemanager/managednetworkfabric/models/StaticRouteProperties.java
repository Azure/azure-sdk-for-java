// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Route Properties.
 */
@Fluent
public final class StaticRouteProperties implements JsonSerializable<StaticRouteProperties> {
    /*
     * Prefix of the route.
     */
    private String prefix;

    /*
     * List of next hop addresses.
     */
    private List<String> nextHop;

    /**
     * Creates an instance of StaticRouteProperties class.
     */
    public StaticRouteProperties() {
    }

    /**
     * Get the prefix property: Prefix of the route.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: Prefix of the route.
     * 
     * @param prefix the prefix value to set.
     * @return the StaticRouteProperties object itself.
     */
    public StaticRouteProperties withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the nextHop property: List of next hop addresses.
     * 
     * @return the nextHop value.
     */
    public List<String> nextHop() {
        return this.nextHop;
    }

    /**
     * Set the nextHop property: List of next hop addresses.
     * 
     * @param nextHop the nextHop value to set.
     * @return the StaticRouteProperties object itself.
     */
    public StaticRouteProperties withNextHop(List<String> nextHop) {
        this.nextHop = nextHop;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (prefix() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property prefix in model StaticRouteProperties"));
        }
        if (nextHop() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property nextHop in model StaticRouteProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StaticRouteProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeArrayField("nextHop", this.nextHop, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StaticRouteProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StaticRouteProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StaticRouteProperties.
     */
    public static StaticRouteProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StaticRouteProperties deserializedStaticRouteProperties = new StaticRouteProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefix".equals(fieldName)) {
                    deserializedStaticRouteProperties.prefix = reader.getString();
                } else if ("nextHop".equals(fieldName)) {
                    List<String> nextHop = reader.readArray(reader1 -> reader1.getString());
                    deserializedStaticRouteProperties.nextHop = nextHop;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStaticRouteProperties;
        });
    }
}
