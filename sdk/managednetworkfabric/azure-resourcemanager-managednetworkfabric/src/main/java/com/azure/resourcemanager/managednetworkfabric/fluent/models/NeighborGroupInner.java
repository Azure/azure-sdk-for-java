// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupDestination;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Defines the Neighbor Group. */
@Fluent
public final class NeighborGroupInner extends Resource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private NeighborGroupProperties innerProperties = new NeighborGroupProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of NeighborGroupInner class. */
    public NeighborGroupInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private NeighborGroupProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public NeighborGroupInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NeighborGroupInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the networkTapIds property: List of NetworkTap IDs where neighbor group is associated.
     *
     * @return the networkTapIds value.
     */
    public List<String> networkTapIds() {
        return this.innerProperties() == null ? null : this.innerProperties().networkTapIds();
    }

    /**
     * Get the networkTapRuleIds property: List of Network Tap Rule IDs where neighbor group is associated.
     *
     * @return the networkTapRuleIds value.
     */
    public List<String> networkTapRuleIds() {
        return this.innerProperties() == null ? null : this.innerProperties().networkTapRuleIds();
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the destination property: An array of destination IPv4 Addresses or IPv6 Addresses.
     *
     * @return the destination value.
     */
    public NeighborGroupDestination destination() {
        return this.innerProperties() == null ? null : this.innerProperties().destination();
    }

    /**
     * Set the destination property: An array of destination IPv4 Addresses or IPv6 Addresses.
     *
     * @param destination the destination value to set.
     * @return the NeighborGroupInner object itself.
     */
    public NeighborGroupInner withDestination(NeighborGroupDestination destination) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NeighborGroupProperties();
        }
        this.innerProperties().withDestination(destination);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     *
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     *
     * @param annotation the annotation value to set.
     * @return the NeighborGroupInner object itself.
     */
    public NeighborGroupInner withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NeighborGroupProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model NeighborGroupInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NeighborGroupInner.class);
}
