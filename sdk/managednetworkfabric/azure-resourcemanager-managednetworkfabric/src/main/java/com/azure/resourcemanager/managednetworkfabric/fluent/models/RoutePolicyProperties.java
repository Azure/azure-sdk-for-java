// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamilyType;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyStatementProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** RoutePolicyProperties defines the resource properties. */
@Fluent
public final class RoutePolicyProperties extends AnnotationResource {
    /*
     * Arm Resource ID of Network Fabric.
     */
    @JsonProperty(value = "networkFabricId", required = true)
    private String networkFabricId;

    /*
     * AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
     */
    @JsonProperty(value = "addressFamilyType")
    private AddressFamilyType addressFamilyType;

    /*
     * Configuration state of the resource.
     */
    @JsonProperty(value = "configurationState", access = JsonProperty.Access.WRITE_ONLY)
    private ConfigurationState configurationState;

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Administrative state of the resource.
     */
    @JsonProperty(value = "administrativeState", access = JsonProperty.Access.WRITE_ONLY)
    private AdministrativeState administrativeState;

    /*
     * Route Policy statements.
     */
    @JsonProperty(value = "statements")
    private List<RoutePolicyStatementProperties> statements;

    /** Creates an instance of RoutePolicyProperties class. */
    public RoutePolicyProperties() {
    }

    /**
     * Get the networkFabricId property: Arm Resource ID of Network Fabric.
     *
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.networkFabricId;
    }

    /**
     * Set the networkFabricId property: Arm Resource ID of Network Fabric.
     *
     * @param networkFabricId the networkFabricId value to set.
     * @return the RoutePolicyProperties object itself.
     */
    public RoutePolicyProperties withNetworkFabricId(String networkFabricId) {
        this.networkFabricId = networkFabricId;
        return this;
    }

    /**
     * Get the addressFamilyType property: AddressFamilyType. This parameter decides whether the given ipv4 or ipv6
     * route policy.
     *
     * @return the addressFamilyType value.
     */
    public AddressFamilyType addressFamilyType() {
        return this.addressFamilyType;
    }

    /**
     * Set the addressFamilyType property: AddressFamilyType. This parameter decides whether the given ipv4 or ipv6
     * route policy.
     *
     * @param addressFamilyType the addressFamilyType value to set.
     * @return the RoutePolicyProperties object itself.
     */
    public RoutePolicyProperties withAddressFamilyType(AddressFamilyType addressFamilyType) {
        this.addressFamilyType = addressFamilyType;
        return this;
    }

    /**
     * Get the configurationState property: Configuration state of the resource.
     *
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.configurationState;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     *
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.administrativeState;
    }

    /**
     * Get the statements property: Route Policy statements.
     *
     * @return the statements value.
     */
    public List<RoutePolicyStatementProperties> statements() {
        return this.statements;
    }

    /**
     * Set the statements property: Route Policy statements.
     *
     * @param statements the statements value to set.
     * @return the RoutePolicyProperties object itself.
     */
    public RoutePolicyProperties withStatements(List<RoutePolicyStatementProperties> statements) {
        this.statements = statements;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RoutePolicyProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (networkFabricId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property networkFabricId in model RoutePolicyProperties"));
        }
        if (statements() != null) {
            statements().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RoutePolicyProperties.class);
}
