// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternetGatewayInner;
import com.azure.resourcemanager.managednetworkfabric.models.GatewayType;
import com.azure.resourcemanager.managednetworkfabric.models.InternetGateway;
import com.azure.resourcemanager.managednetworkfabric.models.InternetGatewayPatch;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class InternetGatewayImpl implements InternetGateway, InternetGateway.Definition, InternetGateway.Update {
    private InternetGatewayInner innerObject;

    private final com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String ipv4Address() {
        return this.innerModel().ipv4Address();
    }

    public Integer port() {
        return this.innerModel().port();
    }

    public GatewayType typePropertiesType() {
        return this.innerModel().typePropertiesType();
    }

    public String networkFabricControllerId() {
        return this.innerModel().networkFabricControllerId();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String internetGatewayRuleId() {
        return this.innerModel().internetGatewayRuleId();
    }

    public String annotation() {
        return this.innerModel().annotation();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public InternetGatewayInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String internetGatewayName;

    private InternetGatewayPatch updateBody;

    public InternetGatewayImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public InternetGateway create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInternetGateways()
                .create(resourceGroupName, internetGatewayName, this.innerModel(), Context.NONE);
        return this;
    }

    public InternetGateway create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInternetGateways()
                .create(resourceGroupName, internetGatewayName, this.innerModel(), context);
        return this;
    }

    InternetGatewayImpl(
        String name, com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = new InternetGatewayInner();
        this.serviceManager = serviceManager;
        this.internetGatewayName = name;
    }

    public InternetGatewayImpl update() {
        this.updateBody = new InternetGatewayPatch();
        return this;
    }

    public InternetGateway apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInternetGateways()
                .update(resourceGroupName, internetGatewayName, updateBody, Context.NONE);
        return this;
    }

    public InternetGateway apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInternetGateways()
                .update(resourceGroupName, internetGatewayName, updateBody, context);
        return this;
    }

    InternetGatewayImpl(
        InternetGatewayInner innerObject,
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.internetGatewayName = Utils.getValueFromIdByName(innerObject.id(), "internetGateways");
    }

    public InternetGateway refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInternetGateways()
                .getByResourceGroupWithResponse(resourceGroupName, internetGatewayName, Context.NONE)
                .getValue();
        return this;
    }

    public InternetGateway refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInternetGateways()
                .getByResourceGroupWithResponse(resourceGroupName, internetGatewayName, context)
                .getValue();
        return this;
    }

    public InternetGatewayImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public InternetGatewayImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public InternetGatewayImpl withTypePropertiesType(GatewayType typePropertiesType) {
        this.innerModel().withTypePropertiesType(typePropertiesType);
        return this;
    }

    public InternetGatewayImpl withNetworkFabricControllerId(String networkFabricControllerId) {
        this.innerModel().withNetworkFabricControllerId(networkFabricControllerId);
        return this;
    }

    public InternetGatewayImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public InternetGatewayImpl withInternetGatewayRuleId(String internetGatewayRuleId) {
        if (isInCreateMode()) {
            this.innerModel().withInternetGatewayRuleId(internetGatewayRuleId);
            return this;
        } else {
            this.updateBody.withInternetGatewayRuleId(internetGatewayRuleId);
            return this;
        }
    }

    public InternetGatewayImpl withAnnotation(String annotation) {
        this.innerModel().withAnnotation(annotation);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
