// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Action that need to performed.
 */
@Fluent
public final class NetworkTapRuleAction implements JsonSerializable<NetworkTapRuleAction> {
    /*
     * Type of actions that can be performed.
     */
    private TapRuleActionType type;

    /*
     * Truncate. 0 indicates do not truncate.
     */
    private String truncate;

    /*
     * The parameter to enable or disable the timestamp.
     */
    private BooleanEnumProperty isTimestampEnabled;

    /*
     * Destination Id. The ARM resource Id may be either Network To Network Interconnect or NeighborGroup.
     */
    private String destinationId;

    /*
     * The name of the match configuration. This is used when Goto type is provided. If Goto type is selected and no
     * match configuration name is provided. It goes to next configuration.
     */
    private String matchConfigurationName;

    /**
     * Creates an instance of NetworkTapRuleAction class.
     */
    public NetworkTapRuleAction() {
    }

    /**
     * Get the type property: Type of actions that can be performed.
     * 
     * @return the type value.
     */
    public TapRuleActionType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of actions that can be performed.
     * 
     * @param type the type value to set.
     * @return the NetworkTapRuleAction object itself.
     */
    public NetworkTapRuleAction withType(TapRuleActionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the truncate property: Truncate. 0 indicates do not truncate.
     * 
     * @return the truncate value.
     */
    public String truncate() {
        return this.truncate;
    }

    /**
     * Set the truncate property: Truncate. 0 indicates do not truncate.
     * 
     * @param truncate the truncate value to set.
     * @return the NetworkTapRuleAction object itself.
     */
    public NetworkTapRuleAction withTruncate(String truncate) {
        this.truncate = truncate;
        return this;
    }

    /**
     * Get the isTimestampEnabled property: The parameter to enable or disable the timestamp.
     * 
     * @return the isTimestampEnabled value.
     */
    public BooleanEnumProperty isTimestampEnabled() {
        return this.isTimestampEnabled;
    }

    /**
     * Set the isTimestampEnabled property: The parameter to enable or disable the timestamp.
     * 
     * @param isTimestampEnabled the isTimestampEnabled value to set.
     * @return the NetworkTapRuleAction object itself.
     */
    public NetworkTapRuleAction withIsTimestampEnabled(BooleanEnumProperty isTimestampEnabled) {
        this.isTimestampEnabled = isTimestampEnabled;
        return this;
    }

    /**
     * Get the destinationId property: Destination Id. The ARM resource Id may be either Network To Network Interconnect
     * or NeighborGroup.
     * 
     * @return the destinationId value.
     */
    public String destinationId() {
        return this.destinationId;
    }

    /**
     * Set the destinationId property: Destination Id. The ARM resource Id may be either Network To Network Interconnect
     * or NeighborGroup.
     * 
     * @param destinationId the destinationId value to set.
     * @return the NetworkTapRuleAction object itself.
     */
    public NetworkTapRuleAction withDestinationId(String destinationId) {
        this.destinationId = destinationId;
        return this;
    }

    /**
     * Get the matchConfigurationName property: The name of the match configuration. This is used when Goto type is
     * provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration.
     * 
     * @return the matchConfigurationName value.
     */
    public String matchConfigurationName() {
        return this.matchConfigurationName;
    }

    /**
     * Set the matchConfigurationName property: The name of the match configuration. This is used when Goto type is
     * provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration.
     * 
     * @param matchConfigurationName the matchConfigurationName value to set.
     * @return the NetworkTapRuleAction object itself.
     */
    public NetworkTapRuleAction withMatchConfigurationName(String matchConfigurationName) {
        this.matchConfigurationName = matchConfigurationName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("truncate", this.truncate);
        jsonWriter.writeStringField("isTimestampEnabled",
            this.isTimestampEnabled == null ? null : this.isTimestampEnabled.toString());
        jsonWriter.writeStringField("destinationId", this.destinationId);
        jsonWriter.writeStringField("matchConfigurationName", this.matchConfigurationName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkTapRuleAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkTapRuleAction if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkTapRuleAction.
     */
    public static NetworkTapRuleAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkTapRuleAction deserializedNetworkTapRuleAction = new NetworkTapRuleAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedNetworkTapRuleAction.type = TapRuleActionType.fromString(reader.getString());
                } else if ("truncate".equals(fieldName)) {
                    deserializedNetworkTapRuleAction.truncate = reader.getString();
                } else if ("isTimestampEnabled".equals(fieldName)) {
                    deserializedNetworkTapRuleAction.isTimestampEnabled
                        = BooleanEnumProperty.fromString(reader.getString());
                } else if ("destinationId".equals(fieldName)) {
                    deserializedNetworkTapRuleAction.destinationId = reader.getString();
                } else if ("matchConfigurationName".equals(fieldName)) {
                    deserializedNetworkTapRuleAction.matchConfigurationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkTapRuleAction;
        });
    }
}
