// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the match condition that is supported to filter the traffic.
 */
@Fluent
public final class AccessControlListMatchCondition extends CommonMatchConditions {
    /*
     * List of ether type values that need to be matched.
     */
    private List<String> etherTypes;

    /*
     * List of IP fragment packets that need to be matched.
     */
    private List<String> fragments;

    /*
     * List of IP Lengths that need to be matched.
     */
    private List<String> ipLengths;

    /*
     * List of TTL [Time To Live] values that need to be matched.
     */
    private List<String> ttlValues;

    /*
     * List of DSCP Markings that need to be matched.
     */
    private List<String> dscpMarkings;

    /*
     * Defines the port condition that needs to be matched.
     */
    private AccessControlListPortCondition portCondition;

    /**
     * Creates an instance of AccessControlListMatchCondition class.
     */
    public AccessControlListMatchCondition() {
    }

    /**
     * Get the etherTypes property: List of ether type values that need to be matched.
     * 
     * @return the etherTypes value.
     */
    public List<String> etherTypes() {
        return this.etherTypes;
    }

    /**
     * Set the etherTypes property: List of ether type values that need to be matched.
     * 
     * @param etherTypes the etherTypes value to set.
     * @return the AccessControlListMatchCondition object itself.
     */
    public AccessControlListMatchCondition withEtherTypes(List<String> etherTypes) {
        this.etherTypes = etherTypes;
        return this;
    }

    /**
     * Get the fragments property: List of IP fragment packets that need to be matched.
     * 
     * @return the fragments value.
     */
    public List<String> fragments() {
        return this.fragments;
    }

    /**
     * Set the fragments property: List of IP fragment packets that need to be matched.
     * 
     * @param fragments the fragments value to set.
     * @return the AccessControlListMatchCondition object itself.
     */
    public AccessControlListMatchCondition withFragments(List<String> fragments) {
        this.fragments = fragments;
        return this;
    }

    /**
     * Get the ipLengths property: List of IP Lengths that need to be matched.
     * 
     * @return the ipLengths value.
     */
    public List<String> ipLengths() {
        return this.ipLengths;
    }

    /**
     * Set the ipLengths property: List of IP Lengths that need to be matched.
     * 
     * @param ipLengths the ipLengths value to set.
     * @return the AccessControlListMatchCondition object itself.
     */
    public AccessControlListMatchCondition withIpLengths(List<String> ipLengths) {
        this.ipLengths = ipLengths;
        return this;
    }

    /**
     * Get the ttlValues property: List of TTL [Time To Live] values that need to be matched.
     * 
     * @return the ttlValues value.
     */
    public List<String> ttlValues() {
        return this.ttlValues;
    }

    /**
     * Set the ttlValues property: List of TTL [Time To Live] values that need to be matched.
     * 
     * @param ttlValues the ttlValues value to set.
     * @return the AccessControlListMatchCondition object itself.
     */
    public AccessControlListMatchCondition withTtlValues(List<String> ttlValues) {
        this.ttlValues = ttlValues;
        return this;
    }

    /**
     * Get the dscpMarkings property: List of DSCP Markings that need to be matched.
     * 
     * @return the dscpMarkings value.
     */
    public List<String> dscpMarkings() {
        return this.dscpMarkings;
    }

    /**
     * Set the dscpMarkings property: List of DSCP Markings that need to be matched.
     * 
     * @param dscpMarkings the dscpMarkings value to set.
     * @return the AccessControlListMatchCondition object itself.
     */
    public AccessControlListMatchCondition withDscpMarkings(List<String> dscpMarkings) {
        this.dscpMarkings = dscpMarkings;
        return this;
    }

    /**
     * Get the portCondition property: Defines the port condition that needs to be matched.
     * 
     * @return the portCondition value.
     */
    public AccessControlListPortCondition portCondition() {
        return this.portCondition;
    }

    /**
     * Set the portCondition property: Defines the port condition that needs to be matched.
     * 
     * @param portCondition the portCondition value to set.
     * @return the AccessControlListMatchCondition object itself.
     */
    public AccessControlListMatchCondition withPortCondition(AccessControlListPortCondition portCondition) {
        this.portCondition = portCondition;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessControlListMatchCondition withProtocolTypes(List<String> protocolTypes) {
        super.withProtocolTypes(protocolTypes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessControlListMatchCondition withVlanMatchCondition(VlanMatchCondition vlanMatchCondition) {
        super.withVlanMatchCondition(vlanMatchCondition);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessControlListMatchCondition withIpCondition(IpMatchCondition ipCondition) {
        super.withIpCondition(ipCondition);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (portCondition() != null) {
            portCondition().validate();
        }
        if (vlanMatchCondition() != null) {
            vlanMatchCondition().validate();
        }
        if (ipCondition() != null) {
            ipCondition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("protocolTypes", protocolTypes(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("vlanMatchCondition", vlanMatchCondition());
        jsonWriter.writeJsonField("ipCondition", ipCondition());
        jsonWriter.writeArrayField("etherTypes", this.etherTypes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("fragments", this.fragments, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ipLengths", this.ipLengths, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ttlValues", this.ttlValues, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("dscpMarkings", this.dscpMarkings, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("portCondition", this.portCondition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessControlListMatchCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessControlListMatchCondition if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessControlListMatchCondition.
     */
    public static AccessControlListMatchCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessControlListMatchCondition deserializedAccessControlListMatchCondition
                = new AccessControlListMatchCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protocolTypes".equals(fieldName)) {
                    List<String> protocolTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccessControlListMatchCondition.withProtocolTypes(protocolTypes);
                } else if ("vlanMatchCondition".equals(fieldName)) {
                    deserializedAccessControlListMatchCondition
                        .withVlanMatchCondition(VlanMatchCondition.fromJson(reader));
                } else if ("ipCondition".equals(fieldName)) {
                    deserializedAccessControlListMatchCondition.withIpCondition(IpMatchCondition.fromJson(reader));
                } else if ("etherTypes".equals(fieldName)) {
                    List<String> etherTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccessControlListMatchCondition.etherTypes = etherTypes;
                } else if ("fragments".equals(fieldName)) {
                    List<String> fragments = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccessControlListMatchCondition.fragments = fragments;
                } else if ("ipLengths".equals(fieldName)) {
                    List<String> ipLengths = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccessControlListMatchCondition.ipLengths = ipLengths;
                } else if ("ttlValues".equals(fieldName)) {
                    List<String> ttlValues = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccessControlListMatchCondition.ttlValues = ttlValues;
                } else if ("dscpMarkings".equals(fieldName)) {
                    List<String> dscpMarkings = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccessControlListMatchCondition.dscpMarkings = dscpMarkings;
                } else if ("portCondition".equals(fieldName)) {
                    deserializedAccessControlListMatchCondition.portCondition
                        = AccessControlListPortCondition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessControlListMatchCondition;
        });
    }
}
