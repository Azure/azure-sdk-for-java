// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the match configuration that are supported to filter the traffic. */
@Fluent
public final class AccessControlListMatchConfiguration {
    /*
     * The name of the match configuration.
     */
    @JsonProperty(value = "matchConfigurationName")
    private String matchConfigurationName;

    /*
     * Sequence Number of the match configuration.
     */
    @JsonProperty(value = "sequenceNumber")
    private Long sequenceNumber;

    /*
     * Type of IP Address. IPv4 or IPv6
     */
    @JsonProperty(value = "ipAddressType")
    private IpAddressType ipAddressType;

    /*
     * List of the match conditions.
     */
    @JsonProperty(value = "matchConditions")
    private List<AccessControlListMatchCondition> matchConditions;

    /*
     * List of actions that need to be performed for the matched conditions.
     */
    @JsonProperty(value = "actions")
    private List<AccessControlListAction> actions;

    /** Creates an instance of AccessControlListMatchConfiguration class. */
    public AccessControlListMatchConfiguration() {
    }

    /**
     * Get the matchConfigurationName property: The name of the match configuration.
     *
     * @return the matchConfigurationName value.
     */
    public String matchConfigurationName() {
        return this.matchConfigurationName;
    }

    /**
     * Set the matchConfigurationName property: The name of the match configuration.
     *
     * @param matchConfigurationName the matchConfigurationName value to set.
     * @return the AccessControlListMatchConfiguration object itself.
     */
    public AccessControlListMatchConfiguration withMatchConfigurationName(String matchConfigurationName) {
        this.matchConfigurationName = matchConfigurationName;
        return this;
    }

    /**
     * Get the sequenceNumber property: Sequence Number of the match configuration.
     *
     * @return the sequenceNumber value.
     */
    public Long sequenceNumber() {
        return this.sequenceNumber;
    }

    /**
     * Set the sequenceNumber property: Sequence Number of the match configuration.
     *
     * @param sequenceNumber the sequenceNumber value to set.
     * @return the AccessControlListMatchConfiguration object itself.
     */
    public AccessControlListMatchConfiguration withSequenceNumber(Long sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }

    /**
     * Get the ipAddressType property: Type of IP Address. IPv4 or IPv6.
     *
     * @return the ipAddressType value.
     */
    public IpAddressType ipAddressType() {
        return this.ipAddressType;
    }

    /**
     * Set the ipAddressType property: Type of IP Address. IPv4 or IPv6.
     *
     * @param ipAddressType the ipAddressType value to set.
     * @return the AccessControlListMatchConfiguration object itself.
     */
    public AccessControlListMatchConfiguration withIpAddressType(IpAddressType ipAddressType) {
        this.ipAddressType = ipAddressType;
        return this;
    }

    /**
     * Get the matchConditions property: List of the match conditions.
     *
     * @return the matchConditions value.
     */
    public List<AccessControlListMatchCondition> matchConditions() {
        return this.matchConditions;
    }

    /**
     * Set the matchConditions property: List of the match conditions.
     *
     * @param matchConditions the matchConditions value to set.
     * @return the AccessControlListMatchConfiguration object itself.
     */
    public AccessControlListMatchConfiguration withMatchConditions(
        List<AccessControlListMatchCondition> matchConditions) {
        this.matchConditions = matchConditions;
        return this;
    }

    /**
     * Get the actions property: List of actions that need to be performed for the matched conditions.
     *
     * @return the actions value.
     */
    public List<AccessControlListAction> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: List of actions that need to be performed for the matched conditions.
     *
     * @param actions the actions value to set.
     * @return the AccessControlListMatchConfiguration object itself.
     */
    public AccessControlListMatchConfiguration withActions(List<AccessControlListAction> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (matchConditions() != null) {
            matchConditions().forEach(e -> e.validate());
        }
        if (actions() != null) {
            actions().forEach(e -> e.validate());
        }
    }
}
