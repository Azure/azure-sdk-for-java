// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.ControllerServices;
import com.azure.resourcemanager.managednetworkfabric.models.ExpressRouteConnectionInformation;
import com.azure.resourcemanager.managednetworkfabric.models.IsWorkloadManagementNetworkEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.NfcSku;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * NetworkFabricControllerProperties defines the resource properties.
 */
@Fluent
public final class NetworkFabricControllerProperties extends AnnotationResource {
    /*
     * InfrastructureServices IP ranges.
     */
    private ControllerServices infrastructureServices;

    /*
     * WorkloadServices IP ranges.
     */
    private ControllerServices workloadServices;

    /*
     * Managed Resource Group configuration properties.
     */
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
     */
    private List<String> networkFabricIds;

    /*
     * A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated
     * for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. This is used for
     * the backward compatibility.
     */
    private Boolean workloadManagementNetwork;

    /*
     * A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated
     * for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
     */
    private IsWorkloadManagementNetworkEnabled isWorkloadManagementNetworkEnabled;

    /*
     * List of tenant InternetGateway resource IDs
     */
    private List<String> tenantInternetGatewayIds;

    /*
     * IPv4 Network Fabric Controller Address Space.
     */
    private String ipv4AddressSpace;

    /*
     * IPv6 Network Fabric Controller Address Space.
     */
    private String ipv6AddressSpace;

    /*
     * Network Fabric Controller SKU.
     */
    private NfcSku nfcSku;

    /*
     * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During
     * this process, the states keep changing based on the status of NFC provisioning.
     */
    private ProvisioningState provisioningState;

    /*
     * As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC.
     * This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute)
     */
    private List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections;

    /*
     * As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This
     * Express route is dedicated for Workload services. (This is a Mandatory attribute).
     */
    private List<ExpressRouteConnectionInformation> workloadExpressRouteConnections;

    /**
     * Creates an instance of NetworkFabricControllerProperties class.
     */
    public NetworkFabricControllerProperties() {
    }

    /**
     * Get the infrastructureServices property: InfrastructureServices IP ranges.
     * 
     * @return the infrastructureServices value.
     */
    public ControllerServices infrastructureServices() {
        return this.infrastructureServices;
    }

    /**
     * Get the workloadServices property: WorkloadServices IP ranges.
     * 
     * @return the workloadServices value.
     */
    public ControllerServices workloadServices() {
        return this.workloadServices;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed Resource Group configuration properties.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed Resource Group configuration properties.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the NetworkFabricControllerProperties object itself.
     */
    public NetworkFabricControllerProperties
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the networkFabricIds property: The NF-ID will be an input parameter used by the NF to link and get associated
     * with the parent NFC Service.
     * 
     * @return the networkFabricIds value.
     */
    public List<String> networkFabricIds() {
        return this.networkFabricIds;
    }

    /**
     * Get the workloadManagementNetwork property: A workload management network is required for all the tenant
     * (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or
     * any other MSFT/Public endpoints. This is used for the backward compatibility.
     * 
     * @return the workloadManagementNetwork value.
     */
    public Boolean workloadManagementNetwork() {
        return this.workloadManagementNetwork;
    }

    /**
     * Get the isWorkloadManagementNetworkEnabled property: A workload management network is required for all the tenant
     * (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or
     * any other MSFT/Public endpoints.
     * 
     * @return the isWorkloadManagementNetworkEnabled value.
     */
    public IsWorkloadManagementNetworkEnabled isWorkloadManagementNetworkEnabled() {
        return this.isWorkloadManagementNetworkEnabled;
    }

    /**
     * Set the isWorkloadManagementNetworkEnabled property: A workload management network is required for all the tenant
     * (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or
     * any other MSFT/Public endpoints.
     * 
     * @param isWorkloadManagementNetworkEnabled the isWorkloadManagementNetworkEnabled value to set.
     * @return the NetworkFabricControllerProperties object itself.
     */
    public NetworkFabricControllerProperties
        withIsWorkloadManagementNetworkEnabled(IsWorkloadManagementNetworkEnabled isWorkloadManagementNetworkEnabled) {
        this.isWorkloadManagementNetworkEnabled = isWorkloadManagementNetworkEnabled;
        return this;
    }

    /**
     * Get the tenantInternetGatewayIds property: List of tenant InternetGateway resource IDs.
     * 
     * @return the tenantInternetGatewayIds value.
     */
    public List<String> tenantInternetGatewayIds() {
        return this.tenantInternetGatewayIds;
    }

    /**
     * Get the ipv4AddressSpace property: IPv4 Network Fabric Controller Address Space.
     * 
     * @return the ipv4AddressSpace value.
     */
    public String ipv4AddressSpace() {
        return this.ipv4AddressSpace;
    }

    /**
     * Set the ipv4AddressSpace property: IPv4 Network Fabric Controller Address Space.
     * 
     * @param ipv4AddressSpace the ipv4AddressSpace value to set.
     * @return the NetworkFabricControllerProperties object itself.
     */
    public NetworkFabricControllerProperties withIpv4AddressSpace(String ipv4AddressSpace) {
        this.ipv4AddressSpace = ipv4AddressSpace;
        return this;
    }

    /**
     * Get the ipv6AddressSpace property: IPv6 Network Fabric Controller Address Space.
     * 
     * @return the ipv6AddressSpace value.
     */
    public String ipv6AddressSpace() {
        return this.ipv6AddressSpace;
    }

    /**
     * Set the ipv6AddressSpace property: IPv6 Network Fabric Controller Address Space.
     * 
     * @param ipv6AddressSpace the ipv6AddressSpace value to set.
     * @return the NetworkFabricControllerProperties object itself.
     */
    public NetworkFabricControllerProperties withIpv6AddressSpace(String ipv6AddressSpace) {
        this.ipv6AddressSpace = ipv6AddressSpace;
        return this;
    }

    /**
     * Get the nfcSku property: Network Fabric Controller SKU.
     * 
     * @return the nfcSku value.
     */
    public NfcSku nfcSku() {
        return this.nfcSku;
    }

    /**
     * Set the nfcSku property: Network Fabric Controller SKU.
     * 
     * @param nfcSku the nfcSku value to set.
     * @return the NetworkFabricControllerProperties object itself.
     */
    public NetworkFabricControllerProperties withNfcSku(NfcSku nfcSku) {
        this.nfcSku = nfcSku;
        return this;
    }

    /**
     * Get the provisioningState property: Provides you the latest status of the NFC service, whether it is Accepted,
     * updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC
     * provisioning.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the infrastructureExpressRouteConnections property: As part of an update, the Infrastructure ExpressRoute
     * CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure
     * services. (This is a Mandatory attribute).
     * 
     * @return the infrastructureExpressRouteConnections value.
     */
    public List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections() {
        return this.infrastructureExpressRouteConnections;
    }

    /**
     * Set the infrastructureExpressRouteConnections property: As part of an update, the Infrastructure ExpressRoute
     * CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure
     * services. (This is a Mandatory attribute).
     * 
     * @param infrastructureExpressRouteConnections the infrastructureExpressRouteConnections value to set.
     * @return the NetworkFabricControllerProperties object itself.
     */
    public NetworkFabricControllerProperties withInfrastructureExpressRouteConnections(
        List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections) {
        this.infrastructureExpressRouteConnections = infrastructureExpressRouteConnections;
        return this;
    }

    /**
     * Get the workloadExpressRouteConnections property: As part of an update, the workload ExpressRoute CircuitID
     * should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is
     * a Mandatory attribute).
     * 
     * @return the workloadExpressRouteConnections value.
     */
    public List<ExpressRouteConnectionInformation> workloadExpressRouteConnections() {
        return this.workloadExpressRouteConnections;
    }

    /**
     * Set the workloadExpressRouteConnections property: As part of an update, the workload ExpressRoute CircuitID
     * should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is
     * a Mandatory attribute).
     * 
     * @param workloadExpressRouteConnections the workloadExpressRouteConnections value to set.
     * @return the NetworkFabricControllerProperties object itself.
     */
    public NetworkFabricControllerProperties
        withWorkloadExpressRouteConnections(List<ExpressRouteConnectionInformation> workloadExpressRouteConnections) {
        this.workloadExpressRouteConnections = workloadExpressRouteConnections;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFabricControllerProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (infrastructureServices() != null) {
            infrastructureServices().validate();
        }
        if (workloadServices() != null) {
            workloadServices().validate();
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (infrastructureExpressRouteConnections() != null) {
            infrastructureExpressRouteConnections().forEach(e -> e.validate());
        }
        if (workloadExpressRouteConnections() != null) {
            workloadExpressRouteConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeJsonField("managedResourceGroupConfiguration", this.managedResourceGroupConfiguration);
        jsonWriter.writeStringField("isWorkloadManagementNetworkEnabled",
            this.isWorkloadManagementNetworkEnabled == null
                ? null
                : this.isWorkloadManagementNetworkEnabled.toString());
        jsonWriter.writeStringField("ipv4AddressSpace", this.ipv4AddressSpace);
        jsonWriter.writeStringField("ipv6AddressSpace", this.ipv6AddressSpace);
        jsonWriter.writeStringField("nfcSku", this.nfcSku == null ? null : this.nfcSku.toString());
        jsonWriter.writeArrayField("infrastructureExpressRouteConnections", this.infrastructureExpressRouteConnections,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("workloadExpressRouteConnections", this.workloadExpressRouteConnections,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkFabricControllerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkFabricControllerProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkFabricControllerProperties.
     */
    public static NetworkFabricControllerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkFabricControllerProperties deserializedNetworkFabricControllerProperties
                = new NetworkFabricControllerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.withAnnotation(reader.getString());
                } else if ("infrastructureServices".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.infrastructureServices
                        = ControllerServices.fromJson(reader);
                } else if ("workloadServices".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.workloadServices
                        = ControllerServices.fromJson(reader);
                } else if ("managedResourceGroupConfiguration".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.managedResourceGroupConfiguration
                        = ManagedResourceGroupConfiguration.fromJson(reader);
                } else if ("networkFabricIds".equals(fieldName)) {
                    List<String> networkFabricIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkFabricControllerProperties.networkFabricIds = networkFabricIds;
                } else if ("workloadManagementNetwork".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.workloadManagementNetwork
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isWorkloadManagementNetworkEnabled".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.isWorkloadManagementNetworkEnabled
                        = IsWorkloadManagementNetworkEnabled.fromString(reader.getString());
                } else if ("tenantInternetGatewayIds".equals(fieldName)) {
                    List<String> tenantInternetGatewayIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkFabricControllerProperties.tenantInternetGatewayIds = tenantInternetGatewayIds;
                } else if ("ipv4AddressSpace".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.ipv4AddressSpace = reader.getString();
                } else if ("ipv6AddressSpace".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.ipv6AddressSpace = reader.getString();
                } else if ("nfcSku".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.nfcSku = NfcSku.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkFabricControllerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("infrastructureExpressRouteConnections".equals(fieldName)) {
                    List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections
                        = reader.readArray(reader1 -> ExpressRouteConnectionInformation.fromJson(reader1));
                    deserializedNetworkFabricControllerProperties.infrastructureExpressRouteConnections
                        = infrastructureExpressRouteConnections;
                } else if ("workloadExpressRouteConnections".equals(fieldName)) {
                    List<ExpressRouteConnectionInformation> workloadExpressRouteConnections
                        = reader.readArray(reader1 -> ExpressRouteConnectionInformation.fromJson(reader1));
                    deserializedNetworkFabricControllerProperties.workloadExpressRouteConnections
                        = workloadExpressRouteConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkFabricControllerProperties;
        });
    }
}
