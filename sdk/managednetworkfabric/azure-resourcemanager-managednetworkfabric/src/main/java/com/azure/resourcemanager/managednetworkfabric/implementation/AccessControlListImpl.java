// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.AccessControlListInner;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlList;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListConditionProperties;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPatch;
import com.azure.resourcemanager.managednetworkfabric.models.AddressFamily;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class AccessControlListImpl
    implements AccessControlList, AccessControlList.Definition, AccessControlList.Update {
    private AccessControlListInner innerObject;

    private final com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public AddressFamily addressFamily() {
        return this.innerModel().addressFamily();
    }

    public List<AccessControlListConditionProperties> conditions() {
        List<AccessControlListConditionProperties> inner = this.innerModel().conditions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String annotation() {
        return this.innerModel().annotation();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AccessControlListInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accessControlListName;

    private AccessControlListPatch updateBody;

    public AccessControlListImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public AccessControlList create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessControlLists()
                .createWithResponse(resourceGroupName, accessControlListName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public AccessControlList create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessControlLists()
                .createWithResponse(resourceGroupName, accessControlListName, this.innerModel(), context)
                .getValue();
        return this;
    }

    AccessControlListImpl(
        String name, com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = new AccessControlListInner();
        this.serviceManager = serviceManager;
        this.accessControlListName = name;
    }

    public AccessControlListImpl update() {
        this.updateBody = new AccessControlListPatch();
        return this;
    }

    public AccessControlList apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessControlLists()
                .updateWithResponse(resourceGroupName, accessControlListName, updateBody, Context.NONE)
                .getValue();
        return this;
    }

    public AccessControlList apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessControlLists()
                .updateWithResponse(resourceGroupName, accessControlListName, updateBody, context)
                .getValue();
        return this;
    }

    AccessControlListImpl(
        AccessControlListInner innerObject,
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accessControlListName = Utils.getValueFromIdByName(innerObject.id(), "accessControlLists");
    }

    public AccessControlList refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessControlLists()
                .getByResourceGroupWithResponse(resourceGroupName, accessControlListName, Context.NONE)
                .getValue();
        return this;
    }

    public AccessControlList refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessControlLists()
                .getByResourceGroupWithResponse(resourceGroupName, accessControlListName, context)
                .getValue();
        return this;
    }

    public AccessControlListImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AccessControlListImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AccessControlListImpl withAddressFamily(AddressFamily addressFamily) {
        if (isInCreateMode()) {
            this.innerModel().withAddressFamily(addressFamily);
            return this;
        } else {
            this.updateBody.withAddressFamily(addressFamily);
            return this;
        }
    }

    public AccessControlListImpl withConditions(List<AccessControlListConditionProperties> conditions) {
        if (isInCreateMode()) {
            this.innerModel().withConditions(conditions);
            return this;
        } else {
            this.updateBody.withConditions(conditions);
            return this;
        }
    }

    public AccessControlListImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public AccessControlListImpl withAnnotation(String annotation) {
        if (isInCreateMode()) {
            this.innerModel().withAnnotation(annotation);
            return this;
        } else {
            this.updateBody.withAnnotation(annotation);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
