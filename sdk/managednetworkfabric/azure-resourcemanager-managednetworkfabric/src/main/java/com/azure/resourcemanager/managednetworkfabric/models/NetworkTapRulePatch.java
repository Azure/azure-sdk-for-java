// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapRulePatchProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The NetworkTapRule resource definition. */
@Fluent
public final class NetworkTapRulePatch extends TagsUpdate {
    /*
     * Network Tap Rule Patch properties.
     */
    @JsonProperty(value = "properties")
    private NetworkTapRulePatchProperties innerProperties;

    /** Creates an instance of NetworkTapRulePatch class. */
    public NetworkTapRulePatch() {
    }

    /**
     * Get the innerProperties property: Network Tap Rule Patch properties.
     *
     * @return the innerProperties value.
     */
    private NetworkTapRulePatchProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkTapRulePatch withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the configurationType property: Input method to configure Network Tap Rule.
     *
     * @return the configurationType value.
     */
    public ConfigurationType configurationType() {
        return this.innerProperties() == null ? null : this.innerProperties().configurationType();
    }

    /**
     * Set the configurationType property: Input method to configure Network Tap Rule.
     *
     * @param configurationType the configurationType value to set.
     * @return the NetworkTapRulePatch object itself.
     */
    public NetworkTapRulePatch withConfigurationType(ConfigurationType configurationType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapRulePatchProperties();
        }
        this.innerProperties().withConfigurationType(configurationType);
        return this;
    }

    /**
     * Get the tapRulesUrl property: Network Tap Rules file URL.
     *
     * @return the tapRulesUrl value.
     */
    public String tapRulesUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().tapRulesUrl();
    }

    /**
     * Set the tapRulesUrl property: Network Tap Rules file URL.
     *
     * @param tapRulesUrl the tapRulesUrl value to set.
     * @return the NetworkTapRulePatch object itself.
     */
    public NetworkTapRulePatch withTapRulesUrl(String tapRulesUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapRulePatchProperties();
        }
        this.innerProperties().withTapRulesUrl(tapRulesUrl);
        return this;
    }

    /**
     * Get the matchConfigurations property: List of match configurations.
     *
     * @return the matchConfigurations value.
     */
    public List<NetworkTapRuleMatchConfiguration> matchConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().matchConfigurations();
    }

    /**
     * Set the matchConfigurations property: List of match configurations.
     *
     * @param matchConfigurations the matchConfigurations value to set.
     * @return the NetworkTapRulePatch object itself.
     */
    public NetworkTapRulePatch withMatchConfigurations(List<NetworkTapRuleMatchConfiguration> matchConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapRulePatchProperties();
        }
        this.innerProperties().withMatchConfigurations(matchConfigurations);
        return this;
    }

    /**
     * Get the dynamicMatchConfigurations property: List of dynamic match configurations.
     *
     * @return the dynamicMatchConfigurations value.
     */
    public List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().dynamicMatchConfigurations();
    }

    /**
     * Set the dynamicMatchConfigurations property: List of dynamic match configurations.
     *
     * @param dynamicMatchConfigurations the dynamicMatchConfigurations value to set.
     * @return the NetworkTapRulePatch object itself.
     */
    public NetworkTapRulePatch withDynamicMatchConfigurations(
        List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapRulePatchProperties();
        }
        this.innerProperties().withDynamicMatchConfigurations(dynamicMatchConfigurations);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     *
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     *
     * @param annotation the annotation value to set.
     * @return the NetworkTapRulePatch object itself.
     */
    public NetworkTapRulePatch withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapRulePatchProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
