// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.AccessControlListInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForStateUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.ValidateConfigurationResponseInner;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListPatch;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;

/** An instance of this class provides access to all the operations defined in AccessControlListsClient. */
public interface AccessControlListsClient {
    /**
     * Creates Access Control List.
     *
     * <p>Implements Access Control List PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AccessControlListInner>, AccessControlListInner> beginCreate(
        String resourceGroupName, String accessControlListName, AccessControlListInner body);

    /**
     * Creates Access Control List.
     *
     * <p>Implements Access Control List PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AccessControlListInner>, AccessControlListInner> beginCreate(
        String resourceGroupName, String accessControlListName, AccessControlListInner body, Context context);

    /**
     * Creates Access Control List.
     *
     * <p>Implements Access Control List PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccessControlListInner create(String resourceGroupName, String accessControlListName, AccessControlListInner body);

    /**
     * Creates Access Control List.
     *
     * <p>Implements Access Control List PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccessControlListInner create(
        String resourceGroupName, String accessControlListName, AccessControlListInner body, Context context);

    /**
     * Gets a Access Control List.
     *
     * <p>Implements Access Control List GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Access Control List resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccessControlListInner> getByResourceGroupWithResponse(
        String resourceGroupName, String accessControlListName, Context context);

    /**
     * Gets a Access Control List.
     *
     * <p>Implements Access Control List GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccessControlListInner getByResourceGroup(String resourceGroupName, String accessControlListName);

    /**
     * Updates the Access Control List.
     *
     * <p>API to update certain properties of the Access Control List resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Access Control List properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AccessControlListInner>, AccessControlListInner> beginUpdate(
        String resourceGroupName, String accessControlListName, AccessControlListPatch body);

    /**
     * Updates the Access Control List.
     *
     * <p>API to update certain properties of the Access Control List resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Access Control List properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AccessControlListInner>, AccessControlListInner> beginUpdate(
        String resourceGroupName, String accessControlListName, AccessControlListPatch body, Context context);

    /**
     * Updates the Access Control List.
     *
     * <p>API to update certain properties of the Access Control List resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Access Control List properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccessControlListInner update(String resourceGroupName, String accessControlListName, AccessControlListPatch body);

    /**
     * Updates the Access Control List.
     *
     * <p>API to update certain properties of the Access Control List resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Access Control List properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Access Control List resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccessControlListInner update(
        String resourceGroupName, String accessControlListName, AccessControlListPatch body, Context context);

    /**
     * Deletes a Access Control List.
     *
     * <p>Implements Access Control List DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accessControlListName);

    /**
     * Deletes a Access Control List.
     *
     * <p>Implements Access Control List DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accessControlListName, Context context);

    /**
     * Deletes a Access Control List.
     *
     * <p>Implements Access Control List DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accessControlListName);

    /**
     * Deletes a Access Control List.
     *
     * <p>Implements Access Control List DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accessControlListName, Context context);

    /**
     * List AccessControlLists by resource group.
     *
     * <p>Implements AccessControlLists list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Access Control Lists as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccessControlListInner> listByResourceGroup(String resourceGroupName);

    /**
     * List AccessControlLists by resource group.
     *
     * <p>Implements AccessControlLists list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Access Control Lists as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccessControlListInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List AccessControlLists by subscription.
     *
     * <p>Implements AccessControlLists list by subscription GET method.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Access Control Lists as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccessControlListInner> list();

    /**
     * List AccessControlLists by subscription.
     *
     * <p>Implements AccessControlLists list by subscription GET method.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Access Control Lists as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccessControlListInner> list(Context context);

    /**
     * Updates administrative state of Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeState(
            String resourceGroupName, String accessControlListName, UpdateAdministrativeState body);

    /**
     * Updates administrative state of Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeState(
            String resourceGroupName, String accessControlListName, UpdateAdministrativeState body, Context context);

    /**
     * Updates administrative state of Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner updateAdministrativeState(
        String resourceGroupName, String accessControlListName, UpdateAdministrativeState body);

    /**
     * Updates administrative state of Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner updateAdministrativeState(
        String resourceGroupName, String accessControlListName, UpdateAdministrativeState body, Context context);

    /**
     * Resync operation on the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginResync(String resourceGroupName, String accessControlListName);

    /**
     * Resync operation on the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginResync(String resourceGroupName, String accessControlListName, Context context);

    /**
     * Resync operation on the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner resync(String resourceGroupName, String accessControlListName);

    /**
     * Resync operation on the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner resync(
        String resourceGroupName, String accessControlListName, Context context);

    /**
     * Validates the configuration of the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ValidateConfigurationResponseInner>, ValidateConfigurationResponseInner>
        beginValidateConfiguration(String resourceGroupName, String accessControlListName);

    /**
     * Validates the configuration of the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ValidateConfigurationResponseInner>, ValidateConfigurationResponseInner>
        beginValidateConfiguration(String resourceGroupName, String accessControlListName, Context context);

    /**
     * Validates the configuration of the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ValidateConfigurationResponseInner validateConfiguration(String resourceGroupName, String accessControlListName);

    /**
     * Validates the configuration of the Access Control Lists.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accessControlListName Name of the Access Control List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ValidateConfigurationResponseInner validateConfiguration(
        String resourceGroupName, String accessControlListName, Context context);
}
