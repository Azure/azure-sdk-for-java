// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupDestination;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Neighbor Group Properties defines the properties of the resource.
 */
@Fluent
public final class NeighborGroupProperties extends AnnotationResource {
    /*
     * List of NetworkTap IDs where neighbor group is associated.
     */
    private List<String> networkTapIds;

    /*
     * List of Network Tap Rule IDs where neighbor group is associated.
     */
    private List<String> networkTapRuleIds;

    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * An array of destination IPv4 Addresses or IPv6 Addresses.
     */
    private NeighborGroupDestination destination;

    /**
     * Creates an instance of NeighborGroupProperties class.
     */
    public NeighborGroupProperties() {
    }

    /**
     * Get the networkTapIds property: List of NetworkTap IDs where neighbor group is associated.
     * 
     * @return the networkTapIds value.
     */
    public List<String> networkTapIds() {
        return this.networkTapIds;
    }

    /**
     * Get the networkTapRuleIds property: List of Network Tap Rule IDs where neighbor group is associated.
     * 
     * @return the networkTapRuleIds value.
     */
    public List<String> networkTapRuleIds() {
        return this.networkTapRuleIds;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the destination property: An array of destination IPv4 Addresses or IPv6 Addresses.
     * 
     * @return the destination value.
     */
    public NeighborGroupDestination destination() {
        return this.destination;
    }

    /**
     * Set the destination property: An array of destination IPv4 Addresses or IPv6 Addresses.
     * 
     * @param destination the destination value to set.
     * @return the NeighborGroupProperties object itself.
     */
    public NeighborGroupProperties withDestination(NeighborGroupDestination destination) {
        this.destination = destination;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NeighborGroupProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (destination() != null) {
            destination().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeJsonField("destination", this.destination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NeighborGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NeighborGroupProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NeighborGroupProperties.
     */
    public static NeighborGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NeighborGroupProperties deserializedNeighborGroupProperties = new NeighborGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNeighborGroupProperties.withAnnotation(reader.getString());
                } else if ("networkTapIds".equals(fieldName)) {
                    List<String> networkTapIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNeighborGroupProperties.networkTapIds = networkTapIds;
                } else if ("networkTapRuleIds".equals(fieldName)) {
                    List<String> networkTapRuleIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNeighborGroupProperties.networkTapRuleIds = networkTapRuleIds;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNeighborGroupProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("destination".equals(fieldName)) {
                    deserializedNeighborGroupProperties.destination = NeighborGroupDestination.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNeighborGroupProperties;
        });
    }
}
