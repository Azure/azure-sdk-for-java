// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of NetworkTaps. */
public interface NetworkTaps {
    /**
     * Gets a Network Tap.
     *
     * <p>Retrieves details of this Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition along with {@link Response}.
     */
    Response<NetworkTap> getByResourceGroupWithResponse(
        String resourceGroupName, String networkTapName, Context context);

    /**
     * Gets a Network Tap.
     *
     * <p>Retrieves details of this Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition.
     */
    NetworkTap getByResourceGroup(String resourceGroupName, String networkTapName);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String networkTapName);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String networkTapName, Context context);

    /**
     * List Network Taps by resource group.
     *
     * <p>Displays Network Taps list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NetworkTap> listByResourceGroup(String resourceGroupName);

    /**
     * List Network Taps by resource group.
     *
     * <p>Displays Network Taps list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NetworkTap> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List Network Taps by subscription.
     *
     * <p>Displays Network Taps list by subscription GET method.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NetworkTap> list();

    /**
     * List Network Taps by subscription.
     *
     * <p>Displays Network Taps list by subscription GET method.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NetworkTap> list(Context context);

    /**
     * Updates administrative state of Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for device updates.
     */
    CommonPostActionResponseForDeviceUpdate updateAdministrativeState(
        String resourceGroupName, String networkTapName, UpdateAdministrativeState body);

    /**
     * Updates administrative state of Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for device updates.
     */
    CommonPostActionResponseForDeviceUpdate updateAdministrativeState(
        String resourceGroupName, String networkTapName, UpdateAdministrativeState body, Context context);

    /**
     * Resync operation on the Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    CommonPostActionResponseForStateUpdate resync(String resourceGroupName, String networkTapName);

    /**
     * Resync operation on the Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    CommonPostActionResponseForStateUpdate resync(String resourceGroupName, String networkTapName, Context context);

    /**
     * Gets a Network Tap.
     *
     * <p>Retrieves details of this Network Tap.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition along with {@link Response}.
     */
    NetworkTap getById(String id);

    /**
     * Gets a Network Tap.
     *
     * <p>Retrieves details of this Network Tap.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition along with {@link Response}.
     */
    Response<NetworkTap> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new NetworkTap resource.
     *
     * @param name resource name.
     * @return the first stage of the new NetworkTap definition.
     */
    NetworkTap.DefinitionStages.Blank define(String name);
}
