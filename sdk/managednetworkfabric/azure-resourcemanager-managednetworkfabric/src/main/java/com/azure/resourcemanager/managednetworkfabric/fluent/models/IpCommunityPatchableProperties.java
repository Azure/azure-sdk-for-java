// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityRule;
import java.io.IOException;
import java.util.List;

/**
 * IP Community patchable properties.
 */
@Fluent
public class IpCommunityPatchableProperties implements JsonSerializable<IpCommunityPatchableProperties> {
    /*
     * List of IP Community Rules.
     */
    private List<IpCommunityRule> ipCommunityRules;

    /**
     * Creates an instance of IpCommunityPatchableProperties class.
     */
    public IpCommunityPatchableProperties() {
    }

    /**
     * Get the ipCommunityRules property: List of IP Community Rules.
     * 
     * @return the ipCommunityRules value.
     */
    public List<IpCommunityRule> ipCommunityRules() {
        return this.ipCommunityRules;
    }

    /**
     * Set the ipCommunityRules property: List of IP Community Rules.
     * 
     * @param ipCommunityRules the ipCommunityRules value to set.
     * @return the IpCommunityPatchableProperties object itself.
     */
    public IpCommunityPatchableProperties withIpCommunityRules(List<IpCommunityRule> ipCommunityRules) {
        this.ipCommunityRules = ipCommunityRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipCommunityRules() != null) {
            ipCommunityRules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipCommunityRules", this.ipCommunityRules,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpCommunityPatchableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpCommunityPatchableProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IpCommunityPatchableProperties.
     */
    public static IpCommunityPatchableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpCommunityPatchableProperties deserializedIpCommunityPatchableProperties
                = new IpCommunityPatchableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipCommunityRules".equals(fieldName)) {
                    List<IpCommunityRule> ipCommunityRules
                        = reader.readArray(reader1 -> IpCommunityRule.fromJson(reader1));
                    deserializedIpCommunityPatchableProperties.ipCommunityRules = ipCommunityRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpCommunityPatchableProperties;
        });
    }
}
