// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.fluent.L2IsolationDomainsClient;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForDeviceUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForStateUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L2IsolationDomainInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.ValidateConfigurationResponseInner;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForDeviceUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForStateUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.L2IsolationDomain;
import com.azure.resourcemanager.managednetworkfabric.models.L2IsolationDomains;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.ValidateConfigurationResponse;

public final class L2IsolationDomainsImpl implements L2IsolationDomains {
    private static final ClientLogger LOGGER = new ClientLogger(L2IsolationDomainsImpl.class);

    private final L2IsolationDomainsClient innerClient;

    private final com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager;

    public L2IsolationDomainsImpl(
        L2IsolationDomainsClient innerClient,
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<L2IsolationDomain> getByResourceGroupWithResponse(
        String resourceGroupName, String l2IsolationDomainName, Context context) {
        Response<L2IsolationDomainInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, l2IsolationDomainName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new L2IsolationDomainImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public L2IsolationDomain getByResourceGroup(String resourceGroupName, String l2IsolationDomainName) {
        L2IsolationDomainInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, l2IsolationDomainName);
        if (inner != null) {
            return new L2IsolationDomainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String l2IsolationDomainName) {
        this.serviceClient().delete(resourceGroupName, l2IsolationDomainName);
    }

    public void delete(String resourceGroupName, String l2IsolationDomainName, Context context) {
        this.serviceClient().delete(resourceGroupName, l2IsolationDomainName, context);
    }

    public CommonPostActionResponseForDeviceUpdate updateAdministrativeState(
        String resourceGroupName, String l2IsolationDomainName, UpdateAdministrativeState body) {
        CommonPostActionResponseForDeviceUpdateInner inner =
            this.serviceClient().updateAdministrativeState(resourceGroupName, l2IsolationDomainName, body);
        if (inner != null) {
            return new CommonPostActionResponseForDeviceUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommonPostActionResponseForDeviceUpdate updateAdministrativeState(
        String resourceGroupName, String l2IsolationDomainName, UpdateAdministrativeState body, Context context) {
        CommonPostActionResponseForDeviceUpdateInner inner =
            this.serviceClient().updateAdministrativeState(resourceGroupName, l2IsolationDomainName, body, context);
        if (inner != null) {
            return new CommonPostActionResponseForDeviceUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ValidateConfigurationResponse validateConfiguration(String resourceGroupName, String l2IsolationDomainName) {
        ValidateConfigurationResponseInner inner =
            this.serviceClient().validateConfiguration(resourceGroupName, l2IsolationDomainName);
        if (inner != null) {
            return new ValidateConfigurationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ValidateConfigurationResponse validateConfiguration(
        String resourceGroupName, String l2IsolationDomainName, Context context) {
        ValidateConfigurationResponseInner inner =
            this.serviceClient().validateConfiguration(resourceGroupName, l2IsolationDomainName, context);
        if (inner != null) {
            return new ValidateConfigurationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommonPostActionResponseForStateUpdate commitConfiguration(
        String resourceGroupName, String l2IsolationDomainName) {
        CommonPostActionResponseForStateUpdateInner inner =
            this.serviceClient().commitConfiguration(resourceGroupName, l2IsolationDomainName);
        if (inner != null) {
            return new CommonPostActionResponseForStateUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommonPostActionResponseForStateUpdate commitConfiguration(
        String resourceGroupName, String l2IsolationDomainName, Context context) {
        CommonPostActionResponseForStateUpdateInner inner =
            this.serviceClient().commitConfiguration(resourceGroupName, l2IsolationDomainName, context);
        if (inner != null) {
            return new CommonPostActionResponseForStateUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<L2IsolationDomain> listByResourceGroup(String resourceGroupName) {
        PagedIterable<L2IsolationDomainInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new L2IsolationDomainImpl(inner1, this.manager()));
    }

    public PagedIterable<L2IsolationDomain> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<L2IsolationDomainInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new L2IsolationDomainImpl(inner1, this.manager()));
    }

    public PagedIterable<L2IsolationDomain> list() {
        PagedIterable<L2IsolationDomainInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new L2IsolationDomainImpl(inner1, this.manager()));
    }

    public PagedIterable<L2IsolationDomain> list(Context context) {
        PagedIterable<L2IsolationDomainInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new L2IsolationDomainImpl(inner1, this.manager()));
    }

    public L2IsolationDomain getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2IsolationDomainName = Utils.getValueFromIdByName(id, "l2IsolationDomains");
        if (l2IsolationDomainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'l2IsolationDomains'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, l2IsolationDomainName, Context.NONE).getValue();
    }

    public Response<L2IsolationDomain> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2IsolationDomainName = Utils.getValueFromIdByName(id, "l2IsolationDomains");
        if (l2IsolationDomainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'l2IsolationDomains'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, l2IsolationDomainName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2IsolationDomainName = Utils.getValueFromIdByName(id, "l2IsolationDomains");
        if (l2IsolationDomainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'l2IsolationDomains'.", id)));
        }
        this.delete(resourceGroupName, l2IsolationDomainName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2IsolationDomainName = Utils.getValueFromIdByName(id, "l2IsolationDomains");
        if (l2IsolationDomainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'l2IsolationDomains'.", id)));
        }
        this.delete(resourceGroupName, l2IsolationDomainName, context);
    }

    private L2IsolationDomainsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager() {
        return this.serviceManager;
    }

    public L2IsolationDomainImpl define(String name) {
        return new L2IsolationDomainImpl(name, this.manager());
    }
}
