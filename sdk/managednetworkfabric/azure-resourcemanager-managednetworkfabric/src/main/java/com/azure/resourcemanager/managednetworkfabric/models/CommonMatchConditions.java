// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the common match conditions of the ACL and Network Tap Rule.
 */
@Fluent
public class CommonMatchConditions implements JsonSerializable<CommonMatchConditions> {
    /*
     * List of the protocols that need to be matched.
     */
    private List<String> protocolTypes;

    /*
     * Vlan match condition that needs to be matched.
     */
    private VlanMatchCondition vlanMatchCondition;

    /*
     * IP condition that needs to be matched.
     */
    private IpMatchCondition ipCondition;

    /**
     * Creates an instance of CommonMatchConditions class.
     */
    public CommonMatchConditions() {
    }

    /**
     * Get the protocolTypes property: List of the protocols that need to be matched.
     * 
     * @return the protocolTypes value.
     */
    public List<String> protocolTypes() {
        return this.protocolTypes;
    }

    /**
     * Set the protocolTypes property: List of the protocols that need to be matched.
     * 
     * @param protocolTypes the protocolTypes value to set.
     * @return the CommonMatchConditions object itself.
     */
    public CommonMatchConditions withProtocolTypes(List<String> protocolTypes) {
        this.protocolTypes = protocolTypes;
        return this;
    }

    /**
     * Get the vlanMatchCondition property: Vlan match condition that needs to be matched.
     * 
     * @return the vlanMatchCondition value.
     */
    public VlanMatchCondition vlanMatchCondition() {
        return this.vlanMatchCondition;
    }

    /**
     * Set the vlanMatchCondition property: Vlan match condition that needs to be matched.
     * 
     * @param vlanMatchCondition the vlanMatchCondition value to set.
     * @return the CommonMatchConditions object itself.
     */
    public CommonMatchConditions withVlanMatchCondition(VlanMatchCondition vlanMatchCondition) {
        this.vlanMatchCondition = vlanMatchCondition;
        return this;
    }

    /**
     * Get the ipCondition property: IP condition that needs to be matched.
     * 
     * @return the ipCondition value.
     */
    public IpMatchCondition ipCondition() {
        return this.ipCondition;
    }

    /**
     * Set the ipCondition property: IP condition that needs to be matched.
     * 
     * @param ipCondition the ipCondition value to set.
     * @return the CommonMatchConditions object itself.
     */
    public CommonMatchConditions withIpCondition(IpMatchCondition ipCondition) {
        this.ipCondition = ipCondition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vlanMatchCondition() != null) {
            vlanMatchCondition().validate();
        }
        if (ipCondition() != null) {
            ipCondition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("protocolTypes", this.protocolTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("vlanMatchCondition", this.vlanMatchCondition);
        jsonWriter.writeJsonField("ipCondition", this.ipCondition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommonMatchConditions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommonMatchConditions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommonMatchConditions.
     */
    public static CommonMatchConditions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommonMatchConditions deserializedCommonMatchConditions = new CommonMatchConditions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protocolTypes".equals(fieldName)) {
                    List<String> protocolTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommonMatchConditions.protocolTypes = protocolTypes;
                } else if ("vlanMatchCondition".equals(fieldName)) {
                    deserializedCommonMatchConditions.vlanMatchCondition = VlanMatchCondition.fromJson(reader);
                } else if ("ipCondition".equals(fieldName)) {
                    deserializedCommonMatchConditions.ipCondition = IpMatchCondition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommonMatchConditions;
        });
    }
}
