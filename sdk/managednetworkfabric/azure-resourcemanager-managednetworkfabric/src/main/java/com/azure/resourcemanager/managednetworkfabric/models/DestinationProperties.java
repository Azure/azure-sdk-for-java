// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The network tap destination properties.
 */
@Fluent
public class DestinationProperties implements JsonSerializable<DestinationProperties> {
    /*
     * Destination name.
     */
    private String name;

    /*
     * Type of destination. Input can be IsolationDomain or Direct.
     */
    private DestinationType destinationType;

    /*
     * The destination Id. ARM Resource ID of either NNI or Internal Networks.
     */
    private String destinationId;

    /*
     * Isolation Domain Properties.
     */
    private IsolationDomainProperties isolationDomainProperties;

    /*
     * ARM Resource ID of destination Tap Rule that contains match configurations.
     */
    private String destinationTapRuleId;

    /**
     * Creates an instance of DestinationProperties class.
     */
    public DestinationProperties() {
    }

    /**
     * Get the name property: Destination name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Destination name.
     * 
     * @param name the name value to set.
     * @return the DestinationProperties object itself.
     */
    public DestinationProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the destinationType property: Type of destination. Input can be IsolationDomain or Direct.
     * 
     * @return the destinationType value.
     */
    public DestinationType destinationType() {
        return this.destinationType;
    }

    /**
     * Set the destinationType property: Type of destination. Input can be IsolationDomain or Direct.
     * 
     * @param destinationType the destinationType value to set.
     * @return the DestinationProperties object itself.
     */
    public DestinationProperties withDestinationType(DestinationType destinationType) {
        this.destinationType = destinationType;
        return this;
    }

    /**
     * Get the destinationId property: The destination Id. ARM Resource ID of either NNI or Internal Networks.
     * 
     * @return the destinationId value.
     */
    public String destinationId() {
        return this.destinationId;
    }

    /**
     * Set the destinationId property: The destination Id. ARM Resource ID of either NNI or Internal Networks.
     * 
     * @param destinationId the destinationId value to set.
     * @return the DestinationProperties object itself.
     */
    public DestinationProperties withDestinationId(String destinationId) {
        this.destinationId = destinationId;
        return this;
    }

    /**
     * Get the isolationDomainProperties property: Isolation Domain Properties.
     * 
     * @return the isolationDomainProperties value.
     */
    public IsolationDomainProperties isolationDomainProperties() {
        return this.isolationDomainProperties;
    }

    /**
     * Set the isolationDomainProperties property: Isolation Domain Properties.
     * 
     * @param isolationDomainProperties the isolationDomainProperties value to set.
     * @return the DestinationProperties object itself.
     */
    public DestinationProperties withIsolationDomainProperties(IsolationDomainProperties isolationDomainProperties) {
        this.isolationDomainProperties = isolationDomainProperties;
        return this;
    }

    /**
     * Get the destinationTapRuleId property: ARM Resource ID of destination Tap Rule that contains match
     * configurations.
     * 
     * @return the destinationTapRuleId value.
     */
    public String destinationTapRuleId() {
        return this.destinationTapRuleId;
    }

    /**
     * Set the destinationTapRuleId property: ARM Resource ID of destination Tap Rule that contains match
     * configurations.
     * 
     * @param destinationTapRuleId the destinationTapRuleId value to set.
     * @return the DestinationProperties object itself.
     */
    public DestinationProperties withDestinationTapRuleId(String destinationTapRuleId) {
        this.destinationTapRuleId = destinationTapRuleId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (isolationDomainProperties() != null) {
            isolationDomainProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("destinationType",
            this.destinationType == null ? null : this.destinationType.toString());
        jsonWriter.writeStringField("destinationId", this.destinationId);
        jsonWriter.writeJsonField("isolationDomainProperties", this.isolationDomainProperties);
        jsonWriter.writeStringField("destinationTapRuleId", this.destinationTapRuleId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DestinationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DestinationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DestinationProperties.
     */
    public static DestinationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DestinationProperties deserializedDestinationProperties = new DestinationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDestinationProperties.name = reader.getString();
                } else if ("destinationType".equals(fieldName)) {
                    deserializedDestinationProperties.destinationType = DestinationType.fromString(reader.getString());
                } else if ("destinationId".equals(fieldName)) {
                    deserializedDestinationProperties.destinationId = reader.getString();
                } else if ("isolationDomainProperties".equals(fieldName)) {
                    deserializedDestinationProperties.isolationDomainProperties
                        = IsolationDomainProperties.fromJson(reader);
                } else if ("destinationTapRuleId".equals(fieldName)) {
                    deserializedDestinationProperties.destinationTapRuleId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDestinationProperties;
        });
    }
}
