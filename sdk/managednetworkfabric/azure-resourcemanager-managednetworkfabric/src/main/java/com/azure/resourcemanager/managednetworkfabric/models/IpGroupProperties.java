// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * IP Group properties.
 */
@Fluent
public final class IpGroupProperties implements JsonSerializable<IpGroupProperties> {
    /*
     * IP Group name.
     */
    private String name;

    /*
     * IP Address type.
     */
    private IpAddressType ipAddressType;

    /*
     * List of IP Prefixes.
     */
    private List<String> ipPrefixes;

    /**
     * Creates an instance of IpGroupProperties class.
     */
    public IpGroupProperties() {
    }

    /**
     * Get the name property: IP Group name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: IP Group name.
     * 
     * @param name the name value to set.
     * @return the IpGroupProperties object itself.
     */
    public IpGroupProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the ipAddressType property: IP Address type.
     * 
     * @return the ipAddressType value.
     */
    public IpAddressType ipAddressType() {
        return this.ipAddressType;
    }

    /**
     * Set the ipAddressType property: IP Address type.
     * 
     * @param ipAddressType the ipAddressType value to set.
     * @return the IpGroupProperties object itself.
     */
    public IpGroupProperties withIpAddressType(IpAddressType ipAddressType) {
        this.ipAddressType = ipAddressType;
        return this;
    }

    /**
     * Get the ipPrefixes property: List of IP Prefixes.
     * 
     * @return the ipPrefixes value.
     */
    public List<String> ipPrefixes() {
        return this.ipPrefixes;
    }

    /**
     * Set the ipPrefixes property: List of IP Prefixes.
     * 
     * @param ipPrefixes the ipPrefixes value to set.
     * @return the IpGroupProperties object itself.
     */
    public IpGroupProperties withIpPrefixes(List<String> ipPrefixes) {
        this.ipPrefixes = ipPrefixes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("ipAddressType", this.ipAddressType == null ? null : this.ipAddressType.toString());
        jsonWriter.writeArrayField("ipPrefixes", this.ipPrefixes, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpGroupProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IpGroupProperties.
     */
    public static IpGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpGroupProperties deserializedIpGroupProperties = new IpGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIpGroupProperties.name = reader.getString();
                } else if ("ipAddressType".equals(fieldName)) {
                    deserializedIpGroupProperties.ipAddressType = IpAddressType.fromString(reader.getString());
                } else if ("ipPrefixes".equals(fieldName)) {
                    List<String> ipPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedIpGroupProperties.ipPrefixes = ipPrefixes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpGroupProperties;
        });
    }
}
