// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the condition that can be filtered using the selected IPs. */
@Fluent
public final class IpMatchCondition {
    /*
     * IP Address type.
     */
    @JsonProperty(value = "type")
    private SourceDestinationType type;

    /*
     * IP Prefix Type.
     */
    @JsonProperty(value = "prefixType")
    private PrefixType prefixType;

    /*
     * The list of IP Prefixes.
     */
    @JsonProperty(value = "ipPrefixValues")
    private List<String> ipPrefixValues;

    /*
     * The List of IP Group Names that need to be matched.
     */
    @JsonProperty(value = "ipGroupNames")
    private List<String> ipGroupNames;

    /** Creates an instance of IpMatchCondition class. */
    public IpMatchCondition() {
    }

    /**
     * Get the type property: IP Address type.
     *
     * @return the type value.
     */
    public SourceDestinationType type() {
        return this.type;
    }

    /**
     * Set the type property: IP Address type.
     *
     * @param type the type value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withType(SourceDestinationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the prefixType property: IP Prefix Type.
     *
     * @return the prefixType value.
     */
    public PrefixType prefixType() {
        return this.prefixType;
    }

    /**
     * Set the prefixType property: IP Prefix Type.
     *
     * @param prefixType the prefixType value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withPrefixType(PrefixType prefixType) {
        this.prefixType = prefixType;
        return this;
    }

    /**
     * Get the ipPrefixValues property: The list of IP Prefixes.
     *
     * @return the ipPrefixValues value.
     */
    public List<String> ipPrefixValues() {
        return this.ipPrefixValues;
    }

    /**
     * Set the ipPrefixValues property: The list of IP Prefixes.
     *
     * @param ipPrefixValues the ipPrefixValues value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withIpPrefixValues(List<String> ipPrefixValues) {
        this.ipPrefixValues = ipPrefixValues;
        return this;
    }

    /**
     * Get the ipGroupNames property: The List of IP Group Names that need to be matched.
     *
     * @return the ipGroupNames value.
     */
    public List<String> ipGroupNames() {
        return this.ipGroupNames;
    }

    /**
     * Set the ipGroupNames property: The List of IP Group Names that need to be matched.
     *
     * @param ipGroupNames the ipGroupNames value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withIpGroupNames(List<String> ipGroupNames) {
        this.ipGroupNames = ipGroupNames;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
