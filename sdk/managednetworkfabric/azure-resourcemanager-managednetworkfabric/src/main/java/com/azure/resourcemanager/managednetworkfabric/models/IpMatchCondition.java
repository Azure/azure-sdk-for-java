// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the condition that can be filtered using the selected IPs.
 */
@Fluent
public final class IpMatchCondition implements JsonSerializable<IpMatchCondition> {
    /*
     * IP Address type that needs to be matched.
     */
    private SourceDestinationType type;

    /*
     * IP Prefix Type that needs to be matched.
     */
    private PrefixType prefixType;

    /*
     * The list of IP Prefixes that need to be matched.
     */
    private List<String> ipPrefixValues;

    /*
     * The List of IP Group Names that need to be matched.
     */
    private List<String> ipGroupNames;

    /**
     * Creates an instance of IpMatchCondition class.
     */
    public IpMatchCondition() {
    }

    /**
     * Get the type property: IP Address type that needs to be matched.
     * 
     * @return the type value.
     */
    public SourceDestinationType type() {
        return this.type;
    }

    /**
     * Set the type property: IP Address type that needs to be matched.
     * 
     * @param type the type value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withType(SourceDestinationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the prefixType property: IP Prefix Type that needs to be matched.
     * 
     * @return the prefixType value.
     */
    public PrefixType prefixType() {
        return this.prefixType;
    }

    /**
     * Set the prefixType property: IP Prefix Type that needs to be matched.
     * 
     * @param prefixType the prefixType value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withPrefixType(PrefixType prefixType) {
        this.prefixType = prefixType;
        return this;
    }

    /**
     * Get the ipPrefixValues property: The list of IP Prefixes that need to be matched.
     * 
     * @return the ipPrefixValues value.
     */
    public List<String> ipPrefixValues() {
        return this.ipPrefixValues;
    }

    /**
     * Set the ipPrefixValues property: The list of IP Prefixes that need to be matched.
     * 
     * @param ipPrefixValues the ipPrefixValues value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withIpPrefixValues(List<String> ipPrefixValues) {
        this.ipPrefixValues = ipPrefixValues;
        return this;
    }

    /**
     * Get the ipGroupNames property: The List of IP Group Names that need to be matched.
     * 
     * @return the ipGroupNames value.
     */
    public List<String> ipGroupNames() {
        return this.ipGroupNames;
    }

    /**
     * Set the ipGroupNames property: The List of IP Group Names that need to be matched.
     * 
     * @param ipGroupNames the ipGroupNames value to set.
     * @return the IpMatchCondition object itself.
     */
    public IpMatchCondition withIpGroupNames(List<String> ipGroupNames) {
        this.ipGroupNames = ipGroupNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("prefixType", this.prefixType == null ? null : this.prefixType.toString());
        jsonWriter.writeArrayField("ipPrefixValues", this.ipPrefixValues,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ipGroupNames", this.ipGroupNames, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpMatchCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpMatchCondition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IpMatchCondition.
     */
    public static IpMatchCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpMatchCondition deserializedIpMatchCondition = new IpMatchCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedIpMatchCondition.type = SourceDestinationType.fromString(reader.getString());
                } else if ("prefixType".equals(fieldName)) {
                    deserializedIpMatchCondition.prefixType = PrefixType.fromString(reader.getString());
                } else if ("ipPrefixValues".equals(fieldName)) {
                    List<String> ipPrefixValues = reader.readArray(reader1 -> reader1.getString());
                    deserializedIpMatchCondition.ipPrefixValues = ipPrefixValues;
                } else if ("ipGroupNames".equals(fieldName)) {
                    List<String> ipGroupNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedIpMatchCondition.ipGroupNames = ipGroupNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpMatchCondition;
        });
    }
}
