// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import java.io.IOException;

/**
 * Network Interface Patch properties.
 */
@Fluent
public final class NetworkInterfacePatchProperties extends AnnotationResource {
    /**
     * Creates an instance of NetworkInterfacePatchProperties class.
     */
    public NetworkInterfacePatchProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkInterfacePatchProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInterfacePatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInterfacePatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkInterfacePatchProperties.
     */
    public static NetworkInterfacePatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInterfacePatchProperties deserializedNetworkInterfacePatchProperties
                = new NetworkInterfacePatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNetworkInterfacePatchProperties.withAnnotation(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInterfacePatchProperties;
        });
    }
}
