// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of IpPrefixLists. */
public interface IpPrefixLists {
    /**
     * Gets a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipPrefixListName Name of the Ip Prefix List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IpPrefixList resource definition along with {@link Response}.
     */
    Response<IpPrefixList> getByResourceGroupWithResponse(
        String resourceGroupName, String ipPrefixListName, Context context);

    /**
     * Gets a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipPrefixListName Name of the Ip Prefix List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IpPrefixList resource definition.
     */
    IpPrefixList getByResourceGroup(String resourceGroupName, String ipPrefixListName);

    /**
     * Deletes a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipPrefixListName Name of the Ip Prefix List.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String ipPrefixListName, Context context);

    /**
     * Deletes a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipPrefixListName Name of the Ip Prefix List.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String ipPrefixListName);

    /**
     * List IpPrefixLists by resource group.
     *
     * <p>Implements IpPrefixLists list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IpPrefixLists as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpPrefixList> listByResourceGroup(String resourceGroupName);

    /**
     * List IpPrefixLists by resource group.
     *
     * <p>Implements IpPrefixLists list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IpPrefixLists as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpPrefixList> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List IpPrefixLists by subscription.
     *
     * <p>Implements IpPrefixLists list by subscription GET method.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IpPrefixLists as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpPrefixList> list();

    /**
     * List IpPrefixLists by subscription.
     *
     * <p>Implements IpPrefixLists list by subscription GET method.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IpPrefixLists as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpPrefixList> list(Context context);

    /**
     * Gets a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List GET method.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IpPrefixList resource definition along with {@link Response}.
     */
    IpPrefixList getById(String id);

    /**
     * Gets a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List GET method.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IpPrefixList resource definition along with {@link Response}.
     */
    Response<IpPrefixList> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List DELETE method.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a Ip Prefix List.
     *
     * <p>Implements Ip Prefix List DELETE method.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new IpPrefixList resource.
     *
     * @param name resource name.
     * @return the first stage of the new IpPrefixList definition.
     */
    IpPrefixList.DefinitionStages.Blank define(String name);
}
