// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of IpCommunities. */
public interface IpCommunities {
    /**
     * Gets an IP Community.
     *
     * <p>Implements an IP Community GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipCommunityName Name of the IP Community.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IP Community resource definition along with {@link Response}.
     */
    Response<IpCommunity> getByResourceGroupWithResponse(
        String resourceGroupName, String ipCommunityName, Context context);

    /**
     * Gets an IP Community.
     *
     * <p>Implements an IP Community GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipCommunityName Name of the IP Community.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IP Community resource definition.
     */
    IpCommunity getByResourceGroup(String resourceGroupName, String ipCommunityName);

    /**
     * Deletes an IP Community.
     *
     * <p>Implements IP Community DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipCommunityName Name of the IP Community.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String ipCommunityName);

    /**
     * Deletes an IP Community.
     *
     * <p>Implements IP Community DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipCommunityName Name of the IP Community.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String ipCommunityName, Context context);

    /**
     * List IP Communities by resource group.
     *
     * <p>Implements IP Communities list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IP Communities as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpCommunity> listByResourceGroup(String resourceGroupName);

    /**
     * List IP Communities by resource group.
     *
     * <p>Implements IP Communities list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IP Communities as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpCommunity> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List IP Communities by subscription.
     *
     * <p>Implements IP Communities list by subscription GET method.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IP Communities as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpCommunity> list();

    /**
     * List IP Communities by subscription.
     *
     * <p>Implements IP Communities list by subscription GET method.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IP Communities as paginated response with {@link PagedIterable}.
     */
    PagedIterable<IpCommunity> list(Context context);

    /**
     * Gets an IP Community.
     *
     * <p>Implements an IP Community GET method.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IP Community resource definition along with {@link Response}.
     */
    IpCommunity getById(String id);

    /**
     * Gets an IP Community.
     *
     * <p>Implements an IP Community GET method.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IP Community resource definition along with {@link Response}.
     */
    Response<IpCommunity> getByIdWithResponse(String id, Context context);

    /**
     * Deletes an IP Community.
     *
     * <p>Implements IP Community DELETE method.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes an IP Community.
     *
     * <p>Implements IP Community DELETE method.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new IpCommunity resource.
     *
     * @param name resource name.
     * @return the first stage of the new IpCommunity definition.
     */
    IpCommunity.DefinitionStages.Blank define(String name);
}
