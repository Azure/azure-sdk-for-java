// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.PrefixActionType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** IpPrefixListProperties define the resource properties. */
@Fluent
public final class IpPrefixListProperties extends AnnotationResource {
    /*
     * action. Example: allow | deny.
     */
    @JsonProperty(value = "action", required = true)
    private PrefixActionType action;

    /*
     * sequenceNumber of the Ip Prefix List.
     */
    @JsonProperty(value = "sequenceNumber", required = true)
    private int sequenceNumber;

    /*
     * networkAddress. Example:1.1.1.0/24 | 1.1.10.10.
     */
    @JsonProperty(value = "networkAddress", required = true)
    private String networkAddress;

    /*
     * Gets the provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of IpPrefixListProperties class. */
    public IpPrefixListProperties() {
    }

    /**
     * Get the action property: action. Example: allow | deny.
     *
     * @return the action value.
     */
    public PrefixActionType action() {
        return this.action;
    }

    /**
     * Set the action property: action. Example: allow | deny.
     *
     * @param action the action value to set.
     * @return the IpPrefixListProperties object itself.
     */
    public IpPrefixListProperties withAction(PrefixActionType action) {
        this.action = action;
        return this;
    }

    /**
     * Get the sequenceNumber property: sequenceNumber of the Ip Prefix List.
     *
     * @return the sequenceNumber value.
     */
    public int sequenceNumber() {
        return this.sequenceNumber;
    }

    /**
     * Set the sequenceNumber property: sequenceNumber of the Ip Prefix List.
     *
     * @param sequenceNumber the sequenceNumber value to set.
     * @return the IpPrefixListProperties object itself.
     */
    public IpPrefixListProperties withSequenceNumber(int sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }

    /**
     * Get the networkAddress property: networkAddress. Example:1.1.1.0/24 | 1.1.10.10.
     *
     * @return the networkAddress value.
     */
    public String networkAddress() {
        return this.networkAddress;
    }

    /**
     * Set the networkAddress property: networkAddress. Example:1.1.1.0/24 | 1.1.10.10.
     *
     * @param networkAddress the networkAddress value to set.
     * @return the IpPrefixListProperties object itself.
     */
    public IpPrefixListProperties withNetworkAddress(String networkAddress) {
        this.networkAddress = networkAddress;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /** {@inheritDoc} */
    @Override
    public IpPrefixListProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (action() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property action in model IpPrefixListProperties"));
        }
        if (networkAddress() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property networkAddress in model IpPrefixListProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IpPrefixListProperties.class);
}
