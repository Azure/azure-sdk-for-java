// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Network and credential configuration currently applied on terminal server.
 */
@Fluent
public final class VpnConfigurationProperties implements JsonSerializable<VpnConfigurationProperties> {
    /*
     * ARM Resource ID of the Network To Network Interconnect.
     */
    private String networkToNetworkInterconnectId;

    /*
     * Administrative state of the resource.
     */
    private AdministrativeState administrativeState;

    /*
     * Peering option list.
     */
    private PeeringOption peeringOption;

    /*
     * option B properties
     */
    private OptionBProperties optionBProperties;

    /*
     * option A properties
     */
    private VpnConfigurationPropertiesOptionAProperties optionAProperties;

    /**
     * Creates an instance of VpnConfigurationProperties class.
     */
    public VpnConfigurationProperties() {
    }

    /**
     * Get the networkToNetworkInterconnectId property: ARM Resource ID of the Network To Network Interconnect.
     * 
     * @return the networkToNetworkInterconnectId value.
     */
    public String networkToNetworkInterconnectId() {
        return this.networkToNetworkInterconnectId;
    }

    /**
     * Set the networkToNetworkInterconnectId property: ARM Resource ID of the Network To Network Interconnect.
     * 
     * @param networkToNetworkInterconnectId the networkToNetworkInterconnectId value to set.
     * @return the VpnConfigurationProperties object itself.
     */
    public VpnConfigurationProperties withNetworkToNetworkInterconnectId(String networkToNetworkInterconnectId) {
        this.networkToNetworkInterconnectId = networkToNetworkInterconnectId;
        return this;
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     * 
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.administrativeState;
    }

    /**
     * Get the peeringOption property: Peering option list.
     * 
     * @return the peeringOption value.
     */
    public PeeringOption peeringOption() {
        return this.peeringOption;
    }

    /**
     * Set the peeringOption property: Peering option list.
     * 
     * @param peeringOption the peeringOption value to set.
     * @return the VpnConfigurationProperties object itself.
     */
    public VpnConfigurationProperties withPeeringOption(PeeringOption peeringOption) {
        this.peeringOption = peeringOption;
        return this;
    }

    /**
     * Get the optionBProperties property: option B properties.
     * 
     * @return the optionBProperties value.
     */
    public OptionBProperties optionBProperties() {
        return this.optionBProperties;
    }

    /**
     * Set the optionBProperties property: option B properties.
     * 
     * @param optionBProperties the optionBProperties value to set.
     * @return the VpnConfigurationProperties object itself.
     */
    public VpnConfigurationProperties withOptionBProperties(OptionBProperties optionBProperties) {
        this.optionBProperties = optionBProperties;
        return this;
    }

    /**
     * Get the optionAProperties property: option A properties.
     * 
     * @return the optionAProperties value.
     */
    public VpnConfigurationPropertiesOptionAProperties optionAProperties() {
        return this.optionAProperties;
    }

    /**
     * Set the optionAProperties property: option A properties.
     * 
     * @param optionAProperties the optionAProperties value to set.
     * @return the VpnConfigurationProperties object itself.
     */
    public VpnConfigurationProperties
        withOptionAProperties(VpnConfigurationPropertiesOptionAProperties optionAProperties) {
        this.optionAProperties = optionAProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (peeringOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property peeringOption in model VpnConfigurationProperties"));
        }
        if (optionBProperties() != null) {
            optionBProperties().validate();
        }
        if (optionAProperties() != null) {
            optionAProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VpnConfigurationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("peeringOption", this.peeringOption == null ? null : this.peeringOption.toString());
        jsonWriter.writeStringField("networkToNetworkInterconnectId", this.networkToNetworkInterconnectId);
        jsonWriter.writeJsonField("optionBProperties", this.optionBProperties);
        jsonWriter.writeJsonField("optionAProperties", this.optionAProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VpnConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VpnConfigurationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VpnConfigurationProperties.
     */
    public static VpnConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VpnConfigurationProperties deserializedVpnConfigurationProperties = new VpnConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("peeringOption".equals(fieldName)) {
                    deserializedVpnConfigurationProperties.peeringOption = PeeringOption.fromString(reader.getString());
                } else if ("networkToNetworkInterconnectId".equals(fieldName)) {
                    deserializedVpnConfigurationProperties.networkToNetworkInterconnectId = reader.getString();
                } else if ("administrativeState".equals(fieldName)) {
                    deserializedVpnConfigurationProperties.administrativeState
                        = AdministrativeState.fromString(reader.getString());
                } else if ("optionBProperties".equals(fieldName)) {
                    deserializedVpnConfigurationProperties.optionBProperties = OptionBProperties.fromJson(reader);
                } else if ("optionAProperties".equals(fieldName)) {
                    deserializedVpnConfigurationProperties.optionAProperties
                        = VpnConfigurationPropertiesOptionAProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVpnConfigurationProperties;
        });
    }
}
