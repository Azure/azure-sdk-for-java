// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Option B configuration to be used for Management VPN.
 */
@Fluent
public final class OptionBProperties implements JsonSerializable<OptionBProperties> {
    /*
     * Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
     */
    private List<String> importRouteTargets;

    /*
     * Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
     */
    private List<String> exportRouteTargets;

    /*
     * Route Targets to be applied.
     */
    private RouteTargetInformation routeTargets;

    /**
     * Creates an instance of OptionBProperties class.
     */
    public OptionBProperties() {
    }

    /**
     * Get the importRouteTargets property: Route Targets to be applied for incoming routes into CE. This is for
     * backward compatibility.
     * 
     * @return the importRouteTargets value.
     */
    public List<String> importRouteTargets() {
        return this.importRouteTargets;
    }

    /**
     * Set the importRouteTargets property: Route Targets to be applied for incoming routes into CE. This is for
     * backward compatibility.
     * 
     * @param importRouteTargets the importRouteTargets value to set.
     * @return the OptionBProperties object itself.
     */
    public OptionBProperties withImportRouteTargets(List<String> importRouteTargets) {
        this.importRouteTargets = importRouteTargets;
        return this;
    }

    /**
     * Get the exportRouteTargets property: Route Targets to be applied for outgoing routes from CE. This is for
     * backward compatibility.
     * 
     * @return the exportRouteTargets value.
     */
    public List<String> exportRouteTargets() {
        return this.exportRouteTargets;
    }

    /**
     * Set the exportRouteTargets property: Route Targets to be applied for outgoing routes from CE. This is for
     * backward compatibility.
     * 
     * @param exportRouteTargets the exportRouteTargets value to set.
     * @return the OptionBProperties object itself.
     */
    public OptionBProperties withExportRouteTargets(List<String> exportRouteTargets) {
        this.exportRouteTargets = exportRouteTargets;
        return this;
    }

    /**
     * Get the routeTargets property: Route Targets to be applied.
     * 
     * @return the routeTargets value.
     */
    public RouteTargetInformation routeTargets() {
        return this.routeTargets;
    }

    /**
     * Set the routeTargets property: Route Targets to be applied.
     * 
     * @param routeTargets the routeTargets value to set.
     * @return the OptionBProperties object itself.
     */
    public OptionBProperties withRouteTargets(RouteTargetInformation routeTargets) {
        this.routeTargets = routeTargets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (routeTargets() != null) {
            routeTargets().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("importRouteTargets", this.importRouteTargets,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("exportRouteTargets", this.exportRouteTargets,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("routeTargets", this.routeTargets);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OptionBProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OptionBProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OptionBProperties.
     */
    public static OptionBProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OptionBProperties deserializedOptionBProperties = new OptionBProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("importRouteTargets".equals(fieldName)) {
                    List<String> importRouteTargets = reader.readArray(reader1 -> reader1.getString());
                    deserializedOptionBProperties.importRouteTargets = importRouteTargets;
                } else if ("exportRouteTargets".equals(fieldName)) {
                    List<String> exportRouteTargets = reader.readArray(reader1 -> reader1.getString());
                    deserializedOptionBProperties.exportRouteTargets = exportRouteTargets;
                } else if ("routeTargets".equals(fieldName)) {
                    deserializedOptionBProperties.routeTargets = RouteTargetInformation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOptionBProperties;
        });
    }
}
