// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * IP Prefix patchable properties.
 */
@Fluent
public class IpPrefixPatchableProperties implements JsonSerializable<IpPrefixPatchableProperties> {
    /*
     * The list of IP Prefix Rules.
     */
    private List<IpPrefixRule> ipPrefixRules;

    /**
     * Creates an instance of IpPrefixPatchableProperties class.
     */
    public IpPrefixPatchableProperties() {
    }

    /**
     * Get the ipPrefixRules property: The list of IP Prefix Rules.
     * 
     * @return the ipPrefixRules value.
     */
    public List<IpPrefixRule> ipPrefixRules() {
        return this.ipPrefixRules;
    }

    /**
     * Set the ipPrefixRules property: The list of IP Prefix Rules.
     * 
     * @param ipPrefixRules the ipPrefixRules value to set.
     * @return the IpPrefixPatchableProperties object itself.
     */
    public IpPrefixPatchableProperties withIpPrefixRules(List<IpPrefixRule> ipPrefixRules) {
        this.ipPrefixRules = ipPrefixRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipPrefixRules() != null) {
            ipPrefixRules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipPrefixRules", this.ipPrefixRules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpPrefixPatchableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpPrefixPatchableProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IpPrefixPatchableProperties.
     */
    public static IpPrefixPatchableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpPrefixPatchableProperties deserializedIpPrefixPatchableProperties = new IpPrefixPatchableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipPrefixRules".equals(fieldName)) {
                    List<IpPrefixRule> ipPrefixRules = reader.readArray(reader1 -> IpPrefixRule.fromJson(reader1));
                    deserializedIpPrefixPatchableProperties.ipPrefixRules = ipPrefixRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpPrefixPatchableProperties;
        });
    }
}
