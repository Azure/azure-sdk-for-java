// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkFabricInner;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForDeviceUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForStateUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.ManagementNetworkConfigurationPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ManagementNetworkConfigurationProperties;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkFabric;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkFabricPatch;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkFabricPatchablePropertiesTerminalServerConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.azure.resourcemanager.managednetworkfabric.models.TerminalServerConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateVersion;
import com.azure.resourcemanager.managednetworkfabric.models.ValidateConfigurationProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ValidateConfigurationResponse;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class NetworkFabricImpl implements NetworkFabric, NetworkFabric.Definition, NetworkFabric.Update {
    private NetworkFabricInner innerObject;

    private final com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String networkFabricSku() {
        return this.innerModel().networkFabricSku();
    }

    public String fabricVersion() {
        return this.innerModel().fabricVersion();
    }

    public List<String> routerIds() {
        List<String> inner = this.innerModel().routerIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String networkFabricControllerId() {
        return this.innerModel().networkFabricControllerId();
    }

    public Integer rackCount() {
        return this.innerModel().rackCount();
    }

    public int serverCountPerRack() {
        return this.innerModel().serverCountPerRack();
    }

    public String ipv4Prefix() {
        return this.innerModel().ipv4Prefix();
    }

    public String ipv6Prefix() {
        return this.innerModel().ipv6Prefix();
    }

    public long fabricAsn() {
        return this.innerModel().fabricAsn();
    }

    public TerminalServerConfiguration terminalServerConfiguration() {
        return this.innerModel().terminalServerConfiguration();
    }

    public ManagementNetworkConfigurationProperties managementNetworkConfiguration() {
        return this.innerModel().managementNetworkConfiguration();
    }

    public List<String> racks() {
        List<String> inner = this.innerModel().racks();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> l2IsolationDomains() {
        List<String> inner = this.innerModel().l2IsolationDomains();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> l3IsolationDomains() {
        List<String> inner = this.innerModel().l3IsolationDomains();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ConfigurationState configurationState() {
        return this.innerModel().configurationState();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public AdministrativeState administrativeState() {
        return this.innerModel().administrativeState();
    }

    public String annotation() {
        return this.innerModel().annotation();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NetworkFabricInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String networkFabricName;

    private NetworkFabricPatch updateBody;

    public NetworkFabricImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public NetworkFabric create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkFabrics()
                .create(resourceGroupName, networkFabricName, this.innerModel(), Context.NONE);
        return this;
    }

    public NetworkFabric create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkFabrics()
                .create(resourceGroupName, networkFabricName, this.innerModel(), context);
        return this;
    }

    NetworkFabricImpl(
        String name, com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = new NetworkFabricInner();
        this.serviceManager = serviceManager;
        this.networkFabricName = name;
    }

    public NetworkFabricImpl update() {
        this.updateBody = new NetworkFabricPatch();
        return this;
    }

    public NetworkFabric apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkFabrics()
                .update(resourceGroupName, networkFabricName, updateBody, Context.NONE);
        return this;
    }

    public NetworkFabric apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkFabrics()
                .update(resourceGroupName, networkFabricName, updateBody, context);
        return this;
    }

    NetworkFabricImpl(
        NetworkFabricInner innerObject,
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.networkFabricName = Utils.getValueFromIdByName(innerObject.id(), "networkFabrics");
    }

    public NetworkFabric refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkFabrics()
                .getByResourceGroupWithResponse(resourceGroupName, networkFabricName, Context.NONE)
                .getValue();
        return this;
    }

    public NetworkFabric refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkFabrics()
                .getByResourceGroupWithResponse(resourceGroupName, networkFabricName, context)
                .getValue();
        return this;
    }

    public CommonPostActionResponseForDeviceUpdate provision() {
        return serviceManager.networkFabrics().provision(resourceGroupName, networkFabricName);
    }

    public CommonPostActionResponseForDeviceUpdate provision(Context context) {
        return serviceManager.networkFabrics().provision(resourceGroupName, networkFabricName, context);
    }

    public CommonPostActionResponseForDeviceUpdate deprovision() {
        return serviceManager.networkFabrics().deprovision(resourceGroupName, networkFabricName);
    }

    public CommonPostActionResponseForDeviceUpdate deprovision(Context context) {
        return serviceManager.networkFabrics().deprovision(resourceGroupName, networkFabricName, context);
    }

    public CommonPostActionResponseForStateUpdate upgrade(UpdateVersion body) {
        return serviceManager.networkFabrics().upgrade(resourceGroupName, networkFabricName, body);
    }

    public CommonPostActionResponseForStateUpdate upgrade(UpdateVersion body, Context context) {
        return serviceManager.networkFabrics().upgrade(resourceGroupName, networkFabricName, body, context);
    }

    public CommonPostActionResponseForStateUpdate refreshConfiguration() {
        return serviceManager.networkFabrics().refreshConfiguration(resourceGroupName, networkFabricName);
    }

    public CommonPostActionResponseForStateUpdate refreshConfiguration(Context context) {
        return serviceManager.networkFabrics().refreshConfiguration(resourceGroupName, networkFabricName, context);
    }

    public CommonPostActionResponseForStateUpdate updateWorkloadManagementBfdConfiguration(
        UpdateAdministrativeState body) {
        return serviceManager
            .networkFabrics()
            .updateWorkloadManagementBfdConfiguration(resourceGroupName, networkFabricName, body);
    }

    public CommonPostActionResponseForStateUpdate updateWorkloadManagementBfdConfiguration(
        UpdateAdministrativeState body, Context context) {
        return serviceManager
            .networkFabrics()
            .updateWorkloadManagementBfdConfiguration(resourceGroupName, networkFabricName, body, context);
    }

    public CommonPostActionResponseForStateUpdate updateInfraManagementBfdConfiguration(
        UpdateAdministrativeState body) {
        return serviceManager
            .networkFabrics()
            .updateInfraManagementBfdConfiguration(resourceGroupName, networkFabricName, body);
    }

    public CommonPostActionResponseForStateUpdate updateInfraManagementBfdConfiguration(
        UpdateAdministrativeState body, Context context) {
        return serviceManager
            .networkFabrics()
            .updateInfraManagementBfdConfiguration(resourceGroupName, networkFabricName, body, context);
    }

    public ValidateConfigurationResponse validateConfiguration(ValidateConfigurationProperties body) {
        return serviceManager.networkFabrics().validateConfiguration(resourceGroupName, networkFabricName, body);
    }

    public ValidateConfigurationResponse validateConfiguration(ValidateConfigurationProperties body, Context context) {
        return serviceManager
            .networkFabrics()
            .validateConfiguration(resourceGroupName, networkFabricName, body, context);
    }

    public ValidateConfigurationResponse getTopology() {
        return serviceManager.networkFabrics().getTopology(resourceGroupName, networkFabricName);
    }

    public ValidateConfigurationResponse getTopology(Context context) {
        return serviceManager.networkFabrics().getTopology(resourceGroupName, networkFabricName, context);
    }

    public CommonPostActionResponseForStateUpdate commitConfiguration() {
        return serviceManager.networkFabrics().commitConfiguration(resourceGroupName, networkFabricName);
    }

    public CommonPostActionResponseForStateUpdate commitConfiguration(Context context) {
        return serviceManager.networkFabrics().commitConfiguration(resourceGroupName, networkFabricName, context);
    }

    public NetworkFabricImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NetworkFabricImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NetworkFabricImpl withNetworkFabricSku(String networkFabricSku) {
        this.innerModel().withNetworkFabricSku(networkFabricSku);
        return this;
    }

    public NetworkFabricImpl withNetworkFabricControllerId(String networkFabricControllerId) {
        this.innerModel().withNetworkFabricControllerId(networkFabricControllerId);
        return this;
    }

    public NetworkFabricImpl withServerCountPerRack(int serverCountPerRack) {
        this.innerModel().withServerCountPerRack(serverCountPerRack);
        return this;
    }

    public NetworkFabricImpl withIpv4Prefix(String ipv4Prefix) {
        if (isInCreateMode()) {
            this.innerModel().withIpv4Prefix(ipv4Prefix);
            return this;
        } else {
            this.updateBody.withIpv4Prefix(ipv4Prefix);
            return this;
        }
    }

    public NetworkFabricImpl withFabricAsn(long fabricAsn) {
        this.innerModel().withFabricAsn(fabricAsn);
        return this;
    }

    public NetworkFabricImpl withTerminalServerConfiguration(TerminalServerConfiguration terminalServerConfiguration) {
        this.innerModel().withTerminalServerConfiguration(terminalServerConfiguration);
        return this;
    }

    public NetworkFabricImpl withManagementNetworkConfiguration(
        ManagementNetworkConfigurationProperties managementNetworkConfiguration) {
        this.innerModel().withManagementNetworkConfiguration(managementNetworkConfiguration);
        return this;
    }

    public NetworkFabricImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public NetworkFabricImpl withRackCount(Integer rackCount) {
        if (isInCreateMode()) {
            this.innerModel().withRackCount(rackCount);
            return this;
        } else {
            this.updateBody.withRackCount(rackCount);
            return this;
        }
    }

    public NetworkFabricImpl withIpv6Prefix(String ipv6Prefix) {
        if (isInCreateMode()) {
            this.innerModel().withIpv6Prefix(ipv6Prefix);
            return this;
        } else {
            this.updateBody.withIpv6Prefix(ipv6Prefix);
            return this;
        }
    }

    public NetworkFabricImpl withAnnotation(String annotation) {
        if (isInCreateMode()) {
            this.innerModel().withAnnotation(annotation);
            return this;
        } else {
            this.updateBody.withAnnotation(annotation);
            return this;
        }
    }

    public NetworkFabricImpl withServerCountPerRack(Integer serverCountPerRack) {
        this.updateBody.withServerCountPerRack(serverCountPerRack);
        return this;
    }

    public NetworkFabricImpl withFabricAsn(Long fabricAsn) {
        this.updateBody.withFabricAsn(fabricAsn);
        return this;
    }

    public NetworkFabricImpl withTerminalServerConfiguration(
        NetworkFabricPatchablePropertiesTerminalServerConfiguration terminalServerConfiguration) {
        this.updateBody.withTerminalServerConfiguration(terminalServerConfiguration);
        return this;
    }

    public NetworkFabricImpl withManagementNetworkConfiguration(
        ManagementNetworkConfigurationPatchableProperties managementNetworkConfiguration) {
        this.updateBody.withManagementNetworkConfiguration(managementNetworkConfiguration);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
