// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Update administrative state on list of resources.
 */
@Fluent
public class EnableDisableOnResources implements JsonSerializable<EnableDisableOnResources> {
    /*
     * Network Fabrics or Network Rack resource Id.
     */
    private List<String> resourceIds;

    /**
     * Creates an instance of EnableDisableOnResources class.
     */
    public EnableDisableOnResources() {
    }

    /**
     * Get the resourceIds property: Network Fabrics or Network Rack resource Id.
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: Network Fabrics or Network Rack resource Id.
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the EnableDisableOnResources object itself.
     */
    public EnableDisableOnResources withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnableDisableOnResources from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnableDisableOnResources if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnableDisableOnResources.
     */
    public static EnableDisableOnResources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnableDisableOnResources deserializedEnableDisableOnResources = new EnableDisableOnResources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedEnableDisableOnResources.resourceIds = resourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnableDisableOnResources;
        });
    }
}
