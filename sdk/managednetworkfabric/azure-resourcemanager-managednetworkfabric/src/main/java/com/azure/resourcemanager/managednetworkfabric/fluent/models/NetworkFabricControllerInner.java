// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.ControllerServices;
import com.azure.resourcemanager.managednetworkfabric.models.ExpressRouteConnectionInformation;
import com.azure.resourcemanager.managednetworkfabric.models.IsWorkloadManagementNetworkEnabled;
import com.azure.resourcemanager.managednetworkfabric.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.NfcSku;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The Network Fabric Controller resource definition.
 */
@Fluent
public final class NetworkFabricControllerInner extends Resource {
    /*
     * Resource properties.
     */
    private NetworkFabricControllerProperties innerProperties = new NetworkFabricControllerProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of NetworkFabricControllerInner class.
     */
    public NetworkFabricControllerInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private NetworkFabricControllerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFabricControllerInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFabricControllerInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the infrastructureServices property: InfrastructureServices IP ranges.
     * 
     * @return the infrastructureServices value.
     */
    public ControllerServices infrastructureServices() {
        return this.innerProperties() == null ? null : this.innerProperties().infrastructureServices();
    }

    /**
     * Get the workloadServices property: WorkloadServices IP ranges.
     * 
     * @return the workloadServices value.
     */
    public ControllerServices workloadServices() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadServices();
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed Resource Group configuration properties.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupConfiguration();
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed Resource Group configuration properties.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    /**
     * Get the networkFabricIds property: The NF-ID will be an input parameter used by the NF to link and get associated
     * with the parent NFC Service.
     * 
     * @return the networkFabricIds value.
     */
    public List<String> networkFabricIds() {
        return this.innerProperties() == null ? null : this.innerProperties().networkFabricIds();
    }

    /**
     * Get the workloadManagementNetwork property: A workload management network is required for all the tenant
     * (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or
     * any other MSFT/Public endpoints. This is used for the backward compatibility.
     * 
     * @return the workloadManagementNetwork value.
     */
    public Boolean workloadManagementNetwork() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadManagementNetwork();
    }

    /**
     * Get the isWorkloadManagementNetworkEnabled property: A workload management network is required for all the tenant
     * (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or
     * any other MSFT/Public endpoints.
     * 
     * @return the isWorkloadManagementNetworkEnabled value.
     */
    public IsWorkloadManagementNetworkEnabled isWorkloadManagementNetworkEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isWorkloadManagementNetworkEnabled();
    }

    /**
     * Set the isWorkloadManagementNetworkEnabled property: A workload management network is required for all the tenant
     * (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or
     * any other MSFT/Public endpoints.
     * 
     * @param isWorkloadManagementNetworkEnabled the isWorkloadManagementNetworkEnabled value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner
        withIsWorkloadManagementNetworkEnabled(IsWorkloadManagementNetworkEnabled isWorkloadManagementNetworkEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withIsWorkloadManagementNetworkEnabled(isWorkloadManagementNetworkEnabled);
        return this;
    }

    /**
     * Get the tenantInternetGatewayIds property: List of tenant InternetGateway resource IDs.
     * 
     * @return the tenantInternetGatewayIds value.
     */
    public List<String> tenantInternetGatewayIds() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantInternetGatewayIds();
    }

    /**
     * Get the ipv4AddressSpace property: IPv4 Network Fabric Controller Address Space.
     * 
     * @return the ipv4AddressSpace value.
     */
    public String ipv4AddressSpace() {
        return this.innerProperties() == null ? null : this.innerProperties().ipv4AddressSpace();
    }

    /**
     * Set the ipv4AddressSpace property: IPv4 Network Fabric Controller Address Space.
     * 
     * @param ipv4AddressSpace the ipv4AddressSpace value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner withIpv4AddressSpace(String ipv4AddressSpace) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withIpv4AddressSpace(ipv4AddressSpace);
        return this;
    }

    /**
     * Get the ipv6AddressSpace property: IPv6 Network Fabric Controller Address Space.
     * 
     * @return the ipv6AddressSpace value.
     */
    public String ipv6AddressSpace() {
        return this.innerProperties() == null ? null : this.innerProperties().ipv6AddressSpace();
    }

    /**
     * Set the ipv6AddressSpace property: IPv6 Network Fabric Controller Address Space.
     * 
     * @param ipv6AddressSpace the ipv6AddressSpace value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner withIpv6AddressSpace(String ipv6AddressSpace) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withIpv6AddressSpace(ipv6AddressSpace);
        return this;
    }

    /**
     * Get the nfcSku property: Network Fabric Controller SKU.
     * 
     * @return the nfcSku value.
     */
    public NfcSku nfcSku() {
        return this.innerProperties() == null ? null : this.innerProperties().nfcSku();
    }

    /**
     * Set the nfcSku property: Network Fabric Controller SKU.
     * 
     * @param nfcSku the nfcSku value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner withNfcSku(NfcSku nfcSku) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withNfcSku(nfcSku);
        return this;
    }

    /**
     * Get the provisioningState property: Provides you the latest status of the NFC service, whether it is Accepted,
     * updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC
     * provisioning.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the infrastructureExpressRouteConnections property: As part of an update, the Infrastructure ExpressRoute
     * CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure
     * services. (This is a Mandatory attribute).
     * 
     * @return the infrastructureExpressRouteConnections value.
     */
    public List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().infrastructureExpressRouteConnections();
    }

    /**
     * Set the infrastructureExpressRouteConnections property: As part of an update, the Infrastructure ExpressRoute
     * CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure
     * services. (This is a Mandatory attribute).
     * 
     * @param infrastructureExpressRouteConnections the infrastructureExpressRouteConnections value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner withInfrastructureExpressRouteConnections(
        List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withInfrastructureExpressRouteConnections(infrastructureExpressRouteConnections);
        return this;
    }

    /**
     * Get the workloadExpressRouteConnections property: As part of an update, the workload ExpressRoute CircuitID
     * should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is
     * a Mandatory attribute).
     * 
     * @return the workloadExpressRouteConnections value.
     */
    public List<ExpressRouteConnectionInformation> workloadExpressRouteConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadExpressRouteConnections();
    }

    /**
     * Set the workloadExpressRouteConnections property: As part of an update, the workload ExpressRoute CircuitID
     * should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is
     * a Mandatory attribute).
     * 
     * @param workloadExpressRouteConnections the workloadExpressRouteConnections value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner
        withWorkloadExpressRouteConnections(List<ExpressRouteConnectionInformation> workloadExpressRouteConnections) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withWorkloadExpressRouteConnections(workloadExpressRouteConnections);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     * 
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     * 
     * @param annotation the annotation value to set.
     * @return the NetworkFabricControllerInner object itself.
     */
    public NetworkFabricControllerInner withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model NetworkFabricControllerInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkFabricControllerInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkFabricControllerInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkFabricControllerInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkFabricControllerInner.
     */
    public static NetworkFabricControllerInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkFabricControllerInner deserializedNetworkFabricControllerInner = new NetworkFabricControllerInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNetworkFabricControllerInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNetworkFabricControllerInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNetworkFabricControllerInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedNetworkFabricControllerInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedNetworkFabricControllerInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedNetworkFabricControllerInner.innerProperties
                        = NetworkFabricControllerProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedNetworkFabricControllerInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkFabricControllerInner;
        });
    }
}
