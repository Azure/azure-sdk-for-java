// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPropertiesOptionAProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;

/**
 * Defines the External Network resource.
 */
@Fluent
public final class ExternalNetworkInner extends ProxyResource {
    /*
     * Resource properties.
     */
    private ExternalNetworkProperties innerProperties = new ExternalNetworkProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ExternalNetworkInner class.
     */
    public ExternalNetworkInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private ExternalNetworkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the peeringOption property: Peering option list.
     * 
     * @return the peeringOption value.
     */
    public PeeringOption peeringOption() {
        return this.innerProperties() == null ? null : this.innerProperties().peeringOption();
    }

    /**
     * Set the peeringOption property: Peering option list.
     * 
     * @param peeringOption the peeringOption value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withPeeringOption(PeeringOption peeringOption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withPeeringOption(peeringOption);
        return this;
    }

    /**
     * Get the optionBProperties property: option B properties object.
     * 
     * @return the optionBProperties value.
     */
    public L3OptionBProperties optionBProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().optionBProperties();
    }

    /**
     * Set the optionBProperties property: option B properties object.
     * 
     * @param optionBProperties the optionBProperties value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withOptionBProperties(L3OptionBProperties optionBProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withOptionBProperties(optionBProperties);
        return this;
    }

    /**
     * Get the optionAProperties property: option A properties object.
     * 
     * @return the optionAProperties value.
     */
    public ExternalNetworkPropertiesOptionAProperties optionAProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().optionAProperties();
    }

    /**
     * Set the optionAProperties property: option A properties object.
     * 
     * @param optionAProperties the optionAProperties value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withOptionAProperties(ExternalNetworkPropertiesOptionAProperties optionAProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withOptionAProperties(optionAProperties);
        return this;
    }

    /**
     * Get the configurationState property: Configuration state of the resource.
     * 
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.innerProperties() == null ? null : this.innerProperties().configurationState();
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     * 
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.innerProperties() == null ? null : this.innerProperties().administrativeState();
    }

    /**
     * Get the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @return the networkToNetworkInterconnectId value.
     */
    public String networkToNetworkInterconnectId() {
        return this.innerProperties() == null ? null : this.innerProperties().networkToNetworkInterconnectId();
    }

    /**
     * Set the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @param networkToNetworkInterconnectId the networkToNetworkInterconnectId value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withNetworkToNetworkInterconnectId(String networkToNetworkInterconnectId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withNetworkToNetworkInterconnectId(networkToNetworkInterconnectId);
        return this;
    }

    /**
     * Get the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the importRoutePolicyId value.
     */
    public String importRoutePolicyId() {
        return this.innerProperties() == null ? null : this.innerProperties().importRoutePolicyId();
    }

    /**
     * Set the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param importRoutePolicyId the importRoutePolicyId value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withImportRoutePolicyId(String importRoutePolicyId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withImportRoutePolicyId(importRoutePolicyId);
        return this;
    }

    /**
     * Get the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the exportRoutePolicyId value.
     */
    public String exportRoutePolicyId() {
        return this.innerProperties() == null ? null : this.innerProperties().exportRoutePolicyId();
    }

    /**
     * Set the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param exportRoutePolicyId the exportRoutePolicyId value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withExportRoutePolicyId(String exportRoutePolicyId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withExportRoutePolicyId(exportRoutePolicyId);
        return this;
    }

    /**
     * Get the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @return the importRoutePolicy value.
     */
    public ImportRoutePolicy importRoutePolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().importRoutePolicy();
    }

    /**
     * Set the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @param importRoutePolicy the importRoutePolicy value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withImportRoutePolicy(ImportRoutePolicy importRoutePolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withImportRoutePolicy(importRoutePolicy);
        return this;
    }

    /**
     * Get the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @return the exportRoutePolicy value.
     */
    public ExportRoutePolicy exportRoutePolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().exportRoutePolicy();
    }

    /**
     * Set the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @param exportRoutePolicy the exportRoutePolicy value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withExportRoutePolicy(ExportRoutePolicy exportRoutePolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withExportRoutePolicy(exportRoutePolicy);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     * 
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     * 
     * @param annotation the annotation value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model ExternalNetworkInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExternalNetworkInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExternalNetworkInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExternalNetworkInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExternalNetworkInner.
     */
    public static ExternalNetworkInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExternalNetworkInner deserializedExternalNetworkInner = new ExternalNetworkInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedExternalNetworkInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedExternalNetworkInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedExternalNetworkInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedExternalNetworkInner.innerProperties = ExternalNetworkProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedExternalNetworkInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExternalNetworkInner;
        });
    }
}
