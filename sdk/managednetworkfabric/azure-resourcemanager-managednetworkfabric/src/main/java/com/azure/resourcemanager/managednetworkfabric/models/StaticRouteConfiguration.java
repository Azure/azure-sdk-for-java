// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Static Route Configuration properties.
 */
@Fluent
public class StaticRouteConfiguration implements JsonSerializable<StaticRouteConfiguration> {
    /*
     * BFD configuration properties
     */
    private BfdConfiguration bfdConfiguration;

    /*
     * List of IPv4 Routes.
     */
    private List<StaticRouteProperties> ipv4Routes;

    /*
     * List of IPv6 Routes.
     */
    private List<StaticRouteProperties> ipv6Routes;

    /**
     * Creates an instance of StaticRouteConfiguration class.
     */
    public StaticRouteConfiguration() {
    }

    /**
     * Get the bfdConfiguration property: BFD configuration properties.
     * 
     * @return the bfdConfiguration value.
     */
    public BfdConfiguration bfdConfiguration() {
        return this.bfdConfiguration;
    }

    /**
     * Set the bfdConfiguration property: BFD configuration properties.
     * 
     * @param bfdConfiguration the bfdConfiguration value to set.
     * @return the StaticRouteConfiguration object itself.
     */
    public StaticRouteConfiguration withBfdConfiguration(BfdConfiguration bfdConfiguration) {
        this.bfdConfiguration = bfdConfiguration;
        return this;
    }

    /**
     * Get the ipv4Routes property: List of IPv4 Routes.
     * 
     * @return the ipv4Routes value.
     */
    public List<StaticRouteProperties> ipv4Routes() {
        return this.ipv4Routes;
    }

    /**
     * Set the ipv4Routes property: List of IPv4 Routes.
     * 
     * @param ipv4Routes the ipv4Routes value to set.
     * @return the StaticRouteConfiguration object itself.
     */
    public StaticRouteConfiguration withIpv4Routes(List<StaticRouteProperties> ipv4Routes) {
        this.ipv4Routes = ipv4Routes;
        return this;
    }

    /**
     * Get the ipv6Routes property: List of IPv6 Routes.
     * 
     * @return the ipv6Routes value.
     */
    public List<StaticRouteProperties> ipv6Routes() {
        return this.ipv6Routes;
    }

    /**
     * Set the ipv6Routes property: List of IPv6 Routes.
     * 
     * @param ipv6Routes the ipv6Routes value to set.
     * @return the StaticRouteConfiguration object itself.
     */
    public StaticRouteConfiguration withIpv6Routes(List<StaticRouteProperties> ipv6Routes) {
        this.ipv6Routes = ipv6Routes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bfdConfiguration() != null) {
            bfdConfiguration().validate();
        }
        if (ipv4Routes() != null) {
            ipv4Routes().forEach(e -> e.validate());
        }
        if (ipv6Routes() != null) {
            ipv6Routes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("bfdConfiguration", this.bfdConfiguration);
        jsonWriter.writeArrayField("ipv4Routes", this.ipv4Routes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6Routes", this.ipv6Routes, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StaticRouteConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StaticRouteConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StaticRouteConfiguration.
     */
    public static StaticRouteConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StaticRouteConfiguration deserializedStaticRouteConfiguration = new StaticRouteConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bfdConfiguration".equals(fieldName)) {
                    deserializedStaticRouteConfiguration.bfdConfiguration = BfdConfiguration.fromJson(reader);
                } else if ("ipv4Routes".equals(fieldName)) {
                    List<StaticRouteProperties> ipv4Routes
                        = reader.readArray(reader1 -> StaticRouteProperties.fromJson(reader1));
                    deserializedStaticRouteConfiguration.ipv4Routes = ipv4Routes;
                } else if ("ipv6Routes".equals(fieldName)) {
                    List<StaticRouteProperties> ipv6Routes
                        = reader.readArray(reader1 -> StaticRouteProperties.fromJson(reader1));
                    deserializedStaticRouteConfiguration.ipv6Routes = ipv6Routes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStaticRouteConfiguration;
        });
    }
}
