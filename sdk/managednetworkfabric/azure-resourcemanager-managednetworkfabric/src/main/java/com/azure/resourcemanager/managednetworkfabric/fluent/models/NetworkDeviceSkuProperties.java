// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.DeviceInterfaceProperties;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkDeviceRoleName;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.azure.resourcemanager.managednetworkfabric.models.SupportedVersionProperties;
import java.io.IOException;
import java.util.List;

/**
 * Network Device SKU Properties defines the properties of the resource.
 */
@Fluent
public final class NetworkDeviceSkuProperties implements JsonSerializable<NetworkDeviceSkuProperties> {
    /*
     * Model of the network device.
     */
    private String model;

    /*
     * Manufacturer of the network device.
     */
    private String manufacturer;

    /*
     * List of supported version details of network device.
     */
    private List<SupportedVersionProperties> supportedVersions;

    /*
     * Available roles for the network device.
     */
    private List<NetworkDeviceRoleName> supportedRoleTypes;

    /*
     * List of network device interfaces.
     */
    private List<DeviceInterfaceProperties> interfaces;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of NetworkDeviceSkuProperties class.
     */
    public NetworkDeviceSkuProperties() {
    }

    /**
     * Get the model property: Model of the network device.
     * 
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Set the model property: Model of the network device.
     * 
     * @param model the model value to set.
     * @return the NetworkDeviceSkuProperties object itself.
     */
    public NetworkDeviceSkuProperties withModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the manufacturer property: Manufacturer of the network device.
     * 
     * @return the manufacturer value.
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Set the manufacturer property: Manufacturer of the network device.
     * 
     * @param manufacturer the manufacturer value to set.
     * @return the NetworkDeviceSkuProperties object itself.
     */
    public NetworkDeviceSkuProperties withManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get the supportedVersions property: List of supported version details of network device.
     * 
     * @return the supportedVersions value.
     */
    public List<SupportedVersionProperties> supportedVersions() {
        return this.supportedVersions;
    }

    /**
     * Set the supportedVersions property: List of supported version details of network device.
     * 
     * @param supportedVersions the supportedVersions value to set.
     * @return the NetworkDeviceSkuProperties object itself.
     */
    public NetworkDeviceSkuProperties withSupportedVersions(List<SupportedVersionProperties> supportedVersions) {
        this.supportedVersions = supportedVersions;
        return this;
    }

    /**
     * Get the supportedRoleTypes property: Available roles for the network device.
     * 
     * @return the supportedRoleTypes value.
     */
    public List<NetworkDeviceRoleName> supportedRoleTypes() {
        return this.supportedRoleTypes;
    }

    /**
     * Set the supportedRoleTypes property: Available roles for the network device.
     * 
     * @param supportedRoleTypes the supportedRoleTypes value to set.
     * @return the NetworkDeviceSkuProperties object itself.
     */
    public NetworkDeviceSkuProperties withSupportedRoleTypes(List<NetworkDeviceRoleName> supportedRoleTypes) {
        this.supportedRoleTypes = supportedRoleTypes;
        return this;
    }

    /**
     * Get the interfaces property: List of network device interfaces.
     * 
     * @return the interfaces value.
     */
    public List<DeviceInterfaceProperties> interfaces() {
        return this.interfaces;
    }

    /**
     * Set the interfaces property: List of network device interfaces.
     * 
     * @param interfaces the interfaces value to set.
     * @return the NetworkDeviceSkuProperties object itself.
     */
    public NetworkDeviceSkuProperties withInterfaces(List<DeviceInterfaceProperties> interfaces) {
        this.interfaces = interfaces;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (model() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property model in model NetworkDeviceSkuProperties"));
        }
        if (supportedVersions() != null) {
            supportedVersions().forEach(e -> e.validate());
        }
        if (interfaces() != null) {
            interfaces().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkDeviceSkuProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("manufacturer", this.manufacturer);
        jsonWriter.writeArrayField("supportedVersions", this.supportedVersions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("supportedRoleTypes", this.supportedRoleTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("interfaces", this.interfaces, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkDeviceSkuProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkDeviceSkuProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkDeviceSkuProperties.
     */
    public static NetworkDeviceSkuProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkDeviceSkuProperties deserializedNetworkDeviceSkuProperties = new NetworkDeviceSkuProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    deserializedNetworkDeviceSkuProperties.model = reader.getString();
                } else if ("manufacturer".equals(fieldName)) {
                    deserializedNetworkDeviceSkuProperties.manufacturer = reader.getString();
                } else if ("supportedVersions".equals(fieldName)) {
                    List<SupportedVersionProperties> supportedVersions
                        = reader.readArray(reader1 -> SupportedVersionProperties.fromJson(reader1));
                    deserializedNetworkDeviceSkuProperties.supportedVersions = supportedVersions;
                } else if ("supportedRoleTypes".equals(fieldName)) {
                    List<NetworkDeviceRoleName> supportedRoleTypes
                        = reader.readArray(reader1 -> NetworkDeviceRoleName.fromString(reader1.getString()));
                    deserializedNetworkDeviceSkuProperties.supportedRoleTypes = supportedRoleTypes;
                } else if ("interfaces".equals(fieldName)) {
                    List<DeviceInterfaceProperties> interfaces
                        = reader.readArray(reader1 -> DeviceInterfaceProperties.fromJson(reader1));
                    deserializedNetworkDeviceSkuProperties.interfaces = interfaces;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkDeviceSkuProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkDeviceSkuProperties;
        });
    }
}
