// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.ExportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPropertiesOptionAProperties;
import com.azure.resourcemanager.managednetworkfabric.models.ImportRoutePolicy;
import com.azure.resourcemanager.managednetworkfabric.models.L3OptionBProperties;
import com.azure.resourcemanager.managednetworkfabric.models.PeeringOption;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;

/**
 * External Network Properties.
 */
@Fluent
public final class ExternalNetworkProperties extends AnnotationResource {
    /*
     * Peering option list.
     */
    private PeeringOption peeringOption;

    /*
     * option B properties object
     */
    private L3OptionBProperties optionBProperties;

    /*
     * option A properties object
     */
    private ExternalNetworkPropertiesOptionAProperties optionAProperties;

    /*
     * Configuration state of the resource.
     */
    private ConfigurationState configurationState;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Administrative state of the resource.
     */
    private AdministrativeState administrativeState;

    /*
     * ARM Resource ID of the networkToNetworkInterconnectId of the ExternalNetwork resource.
     */
    private String networkToNetworkInterconnectId;

    /*
     * ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
     */
    private String importRoutePolicyId;

    /*
     * ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
     */
    private String exportRoutePolicyId;

    /*
     * Import Route Policy either IPv4 or IPv6.
     */
    private ImportRoutePolicy importRoutePolicy;

    /*
     * Export Route Policy either IPv4 or IPv6.
     */
    private ExportRoutePolicy exportRoutePolicy;

    /**
     * Creates an instance of ExternalNetworkProperties class.
     */
    public ExternalNetworkProperties() {
    }

    /**
     * Get the peeringOption property: Peering option list.
     * 
     * @return the peeringOption value.
     */
    public PeeringOption peeringOption() {
        return this.peeringOption;
    }

    /**
     * Set the peeringOption property: Peering option list.
     * 
     * @param peeringOption the peeringOption value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withPeeringOption(PeeringOption peeringOption) {
        this.peeringOption = peeringOption;
        return this;
    }

    /**
     * Get the optionBProperties property: option B properties object.
     * 
     * @return the optionBProperties value.
     */
    public L3OptionBProperties optionBProperties() {
        return this.optionBProperties;
    }

    /**
     * Set the optionBProperties property: option B properties object.
     * 
     * @param optionBProperties the optionBProperties value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withOptionBProperties(L3OptionBProperties optionBProperties) {
        this.optionBProperties = optionBProperties;
        return this;
    }

    /**
     * Get the optionAProperties property: option A properties object.
     * 
     * @return the optionAProperties value.
     */
    public ExternalNetworkPropertiesOptionAProperties optionAProperties() {
        return this.optionAProperties;
    }

    /**
     * Set the optionAProperties property: option A properties object.
     * 
     * @param optionAProperties the optionAProperties value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties
        withOptionAProperties(ExternalNetworkPropertiesOptionAProperties optionAProperties) {
        this.optionAProperties = optionAProperties;
        return this;
    }

    /**
     * Get the configurationState property: Configuration state of the resource.
     * 
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.configurationState;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     * 
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.administrativeState;
    }

    /**
     * Get the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @return the networkToNetworkInterconnectId value.
     */
    public String networkToNetworkInterconnectId() {
        return this.networkToNetworkInterconnectId;
    }

    /**
     * Set the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @param networkToNetworkInterconnectId the networkToNetworkInterconnectId value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withNetworkToNetworkInterconnectId(String networkToNetworkInterconnectId) {
        this.networkToNetworkInterconnectId = networkToNetworkInterconnectId;
        return this;
    }

    /**
     * Get the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the importRoutePolicyId value.
     */
    public String importRoutePolicyId() {
        return this.importRoutePolicyId;
    }

    /**
     * Set the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param importRoutePolicyId the importRoutePolicyId value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withImportRoutePolicyId(String importRoutePolicyId) {
        this.importRoutePolicyId = importRoutePolicyId;
        return this;
    }

    /**
     * Get the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the exportRoutePolicyId value.
     */
    public String exportRoutePolicyId() {
        return this.exportRoutePolicyId;
    }

    /**
     * Set the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param exportRoutePolicyId the exportRoutePolicyId value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withExportRoutePolicyId(String exportRoutePolicyId) {
        this.exportRoutePolicyId = exportRoutePolicyId;
        return this;
    }

    /**
     * Get the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @return the importRoutePolicy value.
     */
    public ImportRoutePolicy importRoutePolicy() {
        return this.importRoutePolicy;
    }

    /**
     * Set the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @param importRoutePolicy the importRoutePolicy value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withImportRoutePolicy(ImportRoutePolicy importRoutePolicy) {
        this.importRoutePolicy = importRoutePolicy;
        return this;
    }

    /**
     * Get the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @return the exportRoutePolicy value.
     */
    public ExportRoutePolicy exportRoutePolicy() {
        return this.exportRoutePolicy;
    }

    /**
     * Set the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @param exportRoutePolicy the exportRoutePolicy value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withExportRoutePolicy(ExportRoutePolicy exportRoutePolicy) {
        this.exportRoutePolicy = exportRoutePolicy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExternalNetworkProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (peeringOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property peeringOption in model ExternalNetworkProperties"));
        }
        if (optionBProperties() != null) {
            optionBProperties().validate();
        }
        if (optionAProperties() != null) {
            optionAProperties().validate();
        }
        if (importRoutePolicy() != null) {
            importRoutePolicy().validate();
        }
        if (exportRoutePolicy() != null) {
            exportRoutePolicy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExternalNetworkProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeStringField("peeringOption", this.peeringOption == null ? null : this.peeringOption.toString());
        jsonWriter.writeJsonField("optionBProperties", this.optionBProperties);
        jsonWriter.writeJsonField("optionAProperties", this.optionAProperties);
        jsonWriter.writeStringField("networkToNetworkInterconnectId", this.networkToNetworkInterconnectId);
        jsonWriter.writeStringField("importRoutePolicyId", this.importRoutePolicyId);
        jsonWriter.writeStringField("exportRoutePolicyId", this.exportRoutePolicyId);
        jsonWriter.writeJsonField("importRoutePolicy", this.importRoutePolicy);
        jsonWriter.writeJsonField("exportRoutePolicy", this.exportRoutePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExternalNetworkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExternalNetworkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExternalNetworkProperties.
     */
    public static ExternalNetworkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExternalNetworkProperties deserializedExternalNetworkProperties = new ExternalNetworkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedExternalNetworkProperties.withAnnotation(reader.getString());
                } else if ("peeringOption".equals(fieldName)) {
                    deserializedExternalNetworkProperties.peeringOption = PeeringOption.fromString(reader.getString());
                } else if ("optionBProperties".equals(fieldName)) {
                    deserializedExternalNetworkProperties.optionBProperties = L3OptionBProperties.fromJson(reader);
                } else if ("optionAProperties".equals(fieldName)) {
                    deserializedExternalNetworkProperties.optionAProperties
                        = ExternalNetworkPropertiesOptionAProperties.fromJson(reader);
                } else if ("configurationState".equals(fieldName)) {
                    deserializedExternalNetworkProperties.configurationState
                        = ConfigurationState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedExternalNetworkProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("administrativeState".equals(fieldName)) {
                    deserializedExternalNetworkProperties.administrativeState
                        = AdministrativeState.fromString(reader.getString());
                } else if ("networkToNetworkInterconnectId".equals(fieldName)) {
                    deserializedExternalNetworkProperties.networkToNetworkInterconnectId = reader.getString();
                } else if ("importRoutePolicyId".equals(fieldName)) {
                    deserializedExternalNetworkProperties.importRoutePolicyId = reader.getString();
                } else if ("exportRoutePolicyId".equals(fieldName)) {
                    deserializedExternalNetworkProperties.exportRoutePolicyId = reader.getString();
                } else if ("importRoutePolicy".equals(fieldName)) {
                    deserializedExternalNetworkProperties.importRoutePolicy = ImportRoutePolicy.fromJson(reader);
                } else if ("exportRoutePolicy".equals(fieldName)) {
                    deserializedExternalNetworkProperties.exportRoutePolicy = ExportRoutePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExternalNetworkProperties;
        });
    }
}
