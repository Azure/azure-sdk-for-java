// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.L2IsolationDomainInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of L2IsolationDomain. */
public interface L2IsolationDomain {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the networkFabricId property: Network Fabric ARM resource id.
     *
     * @return the networkFabricId value.
     */
    String networkFabricId();

    /**
     * Gets the vlanId property: vlanId. Example: 501.
     *
     * @return the vlanId value.
     */
    int vlanId();

    /**
     * Gets the mtu property: maximum transmission unit. Default value is 1500.
     *
     * @return the mtu value.
     */
    Integer mtu();

    /**
     * Gets the disabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the disabledOnResources value.
     */
    List<String> disabledOnResources();

    /**
     * Gets the administrativeState property: state. Example: Enabled | Disabled. It indicates administrative state of
     * the isolationDomain, whether it is enabled or disabled. If enabled, the configuration is applied on the devices.
     * If disabled, the configuration is removed from the devices.
     *
     * @return the administrativeState value.
     */
    EnabledDisabledState administrativeState();

    /**
     * Gets the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the annotation property: Switch configuration description.
     *
     * @return the annotation value.
     */
    String annotation();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.managednetworkfabric.fluent.models.L2IsolationDomainInner object.
     *
     * @return the inner object.
     */
    L2IsolationDomainInner innerModel();

    /** The entirety of the L2IsolationDomain definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The L2IsolationDomain definition stages. */
    interface DefinitionStages {
        /** The first stage of the L2IsolationDomain definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the L2IsolationDomain definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the L2IsolationDomain definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the L2IsolationDomain definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithNetworkFabricId,
                DefinitionStages.WithVlanId,
                DefinitionStages.WithMtu,
                DefinitionStages.WithAnnotation {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            L2IsolationDomain create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            L2IsolationDomain create(Context context);
        }
        /** The stage of the L2IsolationDomain definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the L2IsolationDomain definition allowing to specify networkFabricId. */
        interface WithNetworkFabricId {
            /**
             * Specifies the networkFabricId property: Network Fabric ARM resource id..
             *
             * @param networkFabricId Network Fabric ARM resource id.
             * @return the next definition stage.
             */
            WithCreate withNetworkFabricId(String networkFabricId);
        }
        /** The stage of the L2IsolationDomain definition allowing to specify vlanId. */
        interface WithVlanId {
            /**
             * Specifies the vlanId property: vlanId. Example: 501..
             *
             * @param vlanId vlanId. Example: 501.
             * @return the next definition stage.
             */
            WithCreate withVlanId(int vlanId);
        }
        /** The stage of the L2IsolationDomain definition allowing to specify mtu. */
        interface WithMtu {
            /**
             * Specifies the mtu property: maximum transmission unit. Default value is 1500..
             *
             * @param mtu maximum transmission unit. Default value is 1500.
             * @return the next definition stage.
             */
            WithCreate withMtu(Integer mtu);
        }
        /** The stage of the L2IsolationDomain definition allowing to specify annotation. */
        interface WithAnnotation {
            /**
             * Specifies the annotation property: Switch configuration description..
             *
             * @param annotation Switch configuration description.
             * @return the next definition stage.
             */
            WithCreate withAnnotation(String annotation);
        }
    }
    /**
     * Begins update for the L2IsolationDomain resource.
     *
     * @return the stage of resource update.
     */
    L2IsolationDomain.Update update();

    /** The template for L2IsolationDomain update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithMtu, UpdateStages.WithAnnotation {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        L2IsolationDomain apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        L2IsolationDomain apply(Context context);
    }
    /** The L2IsolationDomain update stages. */
    interface UpdateStages {
        /** The stage of the L2IsolationDomain update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the L2IsolationDomain update allowing to specify mtu. */
        interface WithMtu {
            /**
             * Specifies the mtu property: maximum transmission unit. Default value is 1500..
             *
             * @param mtu maximum transmission unit. Default value is 1500.
             * @return the next definition stage.
             */
            Update withMtu(Integer mtu);
        }
        /** The stage of the L2IsolationDomain update allowing to specify annotation. */
        interface WithAnnotation {
            /**
             * Specifies the annotation property: Switch configuration description..
             *
             * @param annotation Switch configuration description.
             * @return the next definition stage.
             */
            Update withAnnotation(String annotation);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    L2IsolationDomain refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    L2IsolationDomain refresh(Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Enables isolation domain across the fabric or on specified racks.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateAdministrativeState(UpdateAdministrativeState body);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Enables isolation domain across the fabric or on specified racks.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateAdministrativeState(UpdateAdministrativeState body, Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Clears ARP tables for this Isolation Domain.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearArpTable(EnableDisableOnResources body);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Clears ARP tables for this Isolation Domain.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearArpTable(EnableDisableOnResources body, Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Clears IPv6 neighbors for this Isolation Domain.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearNeighborTable(EnableDisableOnResources body);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Clears IPv6 neighbors for this Isolation Domain.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearNeighborTable(EnableDisableOnResources body, Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Clears IPv6 neighbors for this Isolation Domain.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return show ARP entries response per network device.
     */
    Map<String, ArpProperties> getArpEntries();

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Clears IPv6 neighbors for this Isolation Domain.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return show ARP entries response per network device.
     */
    Map<String, ArpProperties> getArpEntries(Context context);
}
