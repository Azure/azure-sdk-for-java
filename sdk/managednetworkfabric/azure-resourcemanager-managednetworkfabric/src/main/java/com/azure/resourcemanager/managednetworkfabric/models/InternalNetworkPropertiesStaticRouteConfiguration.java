// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Static Route Configuration properties.
 */
@Fluent
public final class InternalNetworkPropertiesStaticRouteConfiguration extends StaticRouteConfiguration {
    /*
     * Extension. Example: NoExtension | NPB.
     */
    private Extension extension;

    /**
     * Creates an instance of InternalNetworkPropertiesStaticRouteConfiguration class.
     */
    public InternalNetworkPropertiesStaticRouteConfiguration() {
    }

    /**
     * Get the extension property: Extension. Example: NoExtension | NPB.
     * 
     * @return the extension value.
     */
    public Extension extension() {
        return this.extension;
    }

    /**
     * Set the extension property: Extension. Example: NoExtension | NPB.
     * 
     * @param extension the extension value to set.
     * @return the InternalNetworkPropertiesStaticRouteConfiguration object itself.
     */
    public InternalNetworkPropertiesStaticRouteConfiguration withExtension(Extension extension) {
        this.extension = extension;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesStaticRouteConfiguration withBfdConfiguration(BfdConfiguration bfdConfiguration) {
        super.withBfdConfiguration(bfdConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesStaticRouteConfiguration withIpv4Routes(List<StaticRouteProperties> ipv4Routes) {
        super.withIpv4Routes(ipv4Routes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesStaticRouteConfiguration withIpv6Routes(List<StaticRouteProperties> ipv6Routes) {
        super.withIpv6Routes(ipv6Routes);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (bfdConfiguration() != null) {
            bfdConfiguration().validate();
        }
        if (ipv4Routes() != null) {
            ipv4Routes().forEach(e -> e.validate());
        }
        if (ipv6Routes() != null) {
            ipv6Routes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("bfdConfiguration", bfdConfiguration());
        jsonWriter.writeArrayField("ipv4Routes", ipv4Routes(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6Routes", ipv6Routes(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("extension", this.extension == null ? null : this.extension.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InternalNetworkPropertiesStaticRouteConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InternalNetworkPropertiesStaticRouteConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InternalNetworkPropertiesStaticRouteConfiguration.
     */
    public static InternalNetworkPropertiesStaticRouteConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InternalNetworkPropertiesStaticRouteConfiguration deserializedInternalNetworkPropertiesStaticRouteConfiguration
                = new InternalNetworkPropertiesStaticRouteConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bfdConfiguration".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesStaticRouteConfiguration
                        .withBfdConfiguration(BfdConfiguration.fromJson(reader));
                } else if ("ipv4Routes".equals(fieldName)) {
                    List<StaticRouteProperties> ipv4Routes
                        = reader.readArray(reader1 -> StaticRouteProperties.fromJson(reader1));
                    deserializedInternalNetworkPropertiesStaticRouteConfiguration.withIpv4Routes(ipv4Routes);
                } else if ("ipv6Routes".equals(fieldName)) {
                    List<StaticRouteProperties> ipv6Routes
                        = reader.readArray(reader1 -> StaticRouteProperties.fromJson(reader1));
                    deserializedInternalNetworkPropertiesStaticRouteConfiguration.withIpv6Routes(ipv6Routes);
                } else if ("extension".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesStaticRouteConfiguration.extension
                        = Extension.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInternalNetworkPropertiesStaticRouteConfiguration;
        });
    }
}
