// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Isolation Domain Properties. */
@Fluent
public final class IsolationDomainProperties {
    /*
     * Type of encapsulation.
     */
    @JsonProperty(value = "encapsulation")
    private Encapsulation encapsulation;

    /*
     * List of Neighbor Group IDs.
     */
    @JsonProperty(value = "neighborGroupIds")
    private List<String> neighborGroupIds;

    /** Creates an instance of IsolationDomainProperties class. */
    public IsolationDomainProperties() {
    }

    /**
     * Get the encapsulation property: Type of encapsulation.
     *
     * @return the encapsulation value.
     */
    public Encapsulation encapsulation() {
        return this.encapsulation;
    }

    /**
     * Set the encapsulation property: Type of encapsulation.
     *
     * @param encapsulation the encapsulation value to set.
     * @return the IsolationDomainProperties object itself.
     */
    public IsolationDomainProperties withEncapsulation(Encapsulation encapsulation) {
        this.encapsulation = encapsulation;
        return this;
    }

    /**
     * Get the neighborGroupIds property: List of Neighbor Group IDs.
     *
     * @return the neighborGroupIds value.
     */
    public List<String> neighborGroupIds() {
        return this.neighborGroupIds;
    }

    /**
     * Set the neighborGroupIds property: List of Neighbor Group IDs.
     *
     * @param neighborGroupIds the neighborGroupIds value to set.
     * @return the IsolationDomainProperties object itself.
     */
    public IsolationDomainProperties withNeighborGroupIds(List<String> neighborGroupIds) {
        this.neighborGroupIds = neighborGroupIds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
