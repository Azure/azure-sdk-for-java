// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.RoutePolicyStatementProperties;
import java.io.IOException;
import java.util.List;

/**
 * Route Policy patchable properties.
 */
@Fluent
public class RoutePolicyPatchableProperties implements JsonSerializable<RoutePolicyPatchableProperties> {
    /*
     * Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
     */
    private CommunityActionTypes defaultAction;

    /*
     * Route Policy statements.
     */
    private List<RoutePolicyStatementProperties> statements;

    /**
     * Creates an instance of RoutePolicyPatchableProperties class.
     */
    public RoutePolicyPatchableProperties() {
    }

    /**
     * Get the defaultAction property: Default action that needs to be applied when no condition is matched. Example:
     * Permit | Deny.
     * 
     * @return the defaultAction value.
     */
    public CommunityActionTypes defaultAction() {
        return this.defaultAction;
    }

    /**
     * Set the defaultAction property: Default action that needs to be applied when no condition is matched. Example:
     * Permit | Deny.
     * 
     * @param defaultAction the defaultAction value to set.
     * @return the RoutePolicyPatchableProperties object itself.
     */
    public RoutePolicyPatchableProperties withDefaultAction(CommunityActionTypes defaultAction) {
        this.defaultAction = defaultAction;
        return this;
    }

    /**
     * Get the statements property: Route Policy statements.
     * 
     * @return the statements value.
     */
    public List<RoutePolicyStatementProperties> statements() {
        return this.statements;
    }

    /**
     * Set the statements property: Route Policy statements.
     * 
     * @param statements the statements value to set.
     * @return the RoutePolicyPatchableProperties object itself.
     */
    public RoutePolicyPatchableProperties withStatements(List<RoutePolicyStatementProperties> statements) {
        this.statements = statements;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (statements() != null) {
            statements().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultAction", this.defaultAction == null ? null : this.defaultAction.toString());
        jsonWriter.writeArrayField("statements", this.statements, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutePolicyPatchableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutePolicyPatchableProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutePolicyPatchableProperties.
     */
    public static RoutePolicyPatchableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutePolicyPatchableProperties deserializedRoutePolicyPatchableProperties
                = new RoutePolicyPatchableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultAction".equals(fieldName)) {
                    deserializedRoutePolicyPatchableProperties.defaultAction
                        = CommunityActionTypes.fromString(reader.getString());
                } else if ("statements".equals(fieldName)) {
                    List<RoutePolicyStatementProperties> statements
                        = reader.readArray(reader1 -> RoutePolicyStatementProperties.fromJson(reader1));
                    deserializedRoutePolicyPatchableProperties.statements = statements;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutePolicyPatchableProperties;
        });
    }
}
