// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkToNetworkInterconnectInner;

/** An immutable client-side representation of NetworkToNetworkInterconnect. */
public interface NetworkToNetworkInterconnect {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the nniType property: Type of NNI used. Example: CE | NPB.
     *
     * @return the nniType value.
     */
    NniType nniType();

    /**
     * Gets the isManagementType property: Configuration to use NNI for Infrastructure Management. Example: True/False.
     *
     * @return the isManagementType value.
     */
    IsManagementType isManagementType();

    /**
     * Gets the useOptionB property: Based on this option layer3 parameters are mandatory. Example: True/False.
     *
     * @return the useOptionB value.
     */
    BooleanEnumProperty useOptionB();

    /**
     * Gets the layer2Configuration property: Common properties for Layer2 Configuration.
     *
     * @return the layer2Configuration value.
     */
    Layer2Configuration layer2Configuration();

    /**
     * Gets the optionBLayer3Configuration property: Common properties for Layer3Configuration.
     *
     * @return the optionBLayer3Configuration value.
     */
    NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration optionBLayer3Configuration();

    /**
     * Gets the npbStaticRouteConfiguration property: NPB Static Route Configuration properties.
     *
     * @return the npbStaticRouteConfiguration value.
     */
    NpbStaticRouteConfiguration npbStaticRouteConfiguration();

    /**
     * Gets the importRoutePolicy property: Import Route Policy configuration.
     *
     * @return the importRoutePolicy value.
     */
    ImportRoutePolicyInformation importRoutePolicy();

    /**
     * Gets the exportRoutePolicy property: Export Route Policy configuration.
     *
     * @return the exportRoutePolicy value.
     */
    ExportRoutePolicyInformation exportRoutePolicy();

    /**
     * Gets the egressAclId property: Egress Acl. ARM resource ID of Access Control Lists.
     *
     * @return the egressAclId value.
     */
    String egressAclId();

    /**
     * Gets the ingressAclId property: Ingress Acl. ARM resource ID of Access Control Lists.
     *
     * @return the ingressAclId value.
     */
    String ingressAclId();

    /**
     * Gets the configurationState property: Configuration state of the resource.
     *
     * @return the configurationState value.
     */
    ConfigurationState configurationState();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the administrativeState property: Administrative state of the resource.
     *
     * @return the administrativeState value.
     */
    AdministrativeState administrativeState();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkToNetworkInterconnectInner
     * object.
     *
     * @return the inner object.
     */
    NetworkToNetworkInterconnectInner innerModel();

    /** The entirety of the NetworkToNetworkInterconnect definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithUseOptionB,
            DefinitionStages.WithCreate {
    }

    /** The NetworkToNetworkInterconnect definition stages. */
    interface DefinitionStages {
        /** The first stage of the NetworkToNetworkInterconnect definition. */
        interface Blank extends WithParentResource {
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, networkFabricName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param networkFabricName Name of the Network Fabric.
             * @return the next definition stage.
             */
            WithUseOptionB withExistingNetworkFabric(String resourceGroupName, String networkFabricName);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify useOptionB. */
        interface WithUseOptionB {
            /**
             * Specifies the useOptionB property: Based on this option layer3 parameters are mandatory. Example:
             * True/False.
             *
             * @param useOptionB Based on this option layer3 parameters are mandatory. Example: True/False.
             * @return the next definition stage.
             */
            WithCreate withUseOptionB(BooleanEnumProperty useOptionB);
        }

        /**
         * The stage of the NetworkToNetworkInterconnect definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithNniType,
                DefinitionStages.WithIsManagementType,
                DefinitionStages.WithLayer2Configuration,
                DefinitionStages.WithOptionBLayer3Configuration,
                DefinitionStages.WithNpbStaticRouteConfiguration,
                DefinitionStages.WithImportRoutePolicy,
                DefinitionStages.WithExportRoutePolicy,
                DefinitionStages.WithEgressAclId,
                DefinitionStages.WithIngressAclId {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            NetworkToNetworkInterconnect create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            NetworkToNetworkInterconnect create(Context context);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify nniType. */
        interface WithNniType {
            /**
             * Specifies the nniType property: Type of NNI used. Example: CE | NPB.
             *
             * @param nniType Type of NNI used. Example: CE | NPB.
             * @return the next definition stage.
             */
            WithCreate withNniType(NniType nniType);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify isManagementType. */
        interface WithIsManagementType {
            /**
             * Specifies the isManagementType property: Configuration to use NNI for Infrastructure Management. Example:
             * True/False..
             *
             * @param isManagementType Configuration to use NNI for Infrastructure Management. Example: True/False.
             * @return the next definition stage.
             */
            WithCreate withIsManagementType(IsManagementType isManagementType);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify layer2Configuration. */
        interface WithLayer2Configuration {
            /**
             * Specifies the layer2Configuration property: Common properties for Layer2 Configuration..
             *
             * @param layer2Configuration Common properties for Layer2 Configuration.
             * @return the next definition stage.
             */
            WithCreate withLayer2Configuration(Layer2Configuration layer2Configuration);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify optionBLayer3Configuration. */
        interface WithOptionBLayer3Configuration {
            /**
             * Specifies the optionBLayer3Configuration property: Common properties for Layer3Configuration..
             *
             * @param optionBLayer3Configuration Common properties for Layer3Configuration.
             * @return the next definition stage.
             */
            WithCreate withOptionBLayer3Configuration(
                NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration optionBLayer3Configuration);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify npbStaticRouteConfiguration. */
        interface WithNpbStaticRouteConfiguration {
            /**
             * Specifies the npbStaticRouteConfiguration property: NPB Static Route Configuration properties..
             *
             * @param npbStaticRouteConfiguration NPB Static Route Configuration properties.
             * @return the next definition stage.
             */
            WithCreate withNpbStaticRouteConfiguration(NpbStaticRouteConfiguration npbStaticRouteConfiguration);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify importRoutePolicy. */
        interface WithImportRoutePolicy {
            /**
             * Specifies the importRoutePolicy property: Import Route Policy configuration..
             *
             * @param importRoutePolicy Import Route Policy configuration.
             * @return the next definition stage.
             */
            WithCreate withImportRoutePolicy(ImportRoutePolicyInformation importRoutePolicy);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify exportRoutePolicy. */
        interface WithExportRoutePolicy {
            /**
             * Specifies the exportRoutePolicy property: Export Route Policy configuration..
             *
             * @param exportRoutePolicy Export Route Policy configuration.
             * @return the next definition stage.
             */
            WithCreate withExportRoutePolicy(ExportRoutePolicyInformation exportRoutePolicy);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify egressAclId. */
        interface WithEgressAclId {
            /**
             * Specifies the egressAclId property: Egress Acl. ARM resource ID of Access Control Lists..
             *
             * @param egressAclId Egress Acl. ARM resource ID of Access Control Lists.
             * @return the next definition stage.
             */
            WithCreate withEgressAclId(String egressAclId);
        }

        /** The stage of the NetworkToNetworkInterconnect definition allowing to specify ingressAclId. */
        interface WithIngressAclId {
            /**
             * Specifies the ingressAclId property: Ingress Acl. ARM resource ID of Access Control Lists..
             *
             * @param ingressAclId Ingress Acl. ARM resource ID of Access Control Lists.
             * @return the next definition stage.
             */
            WithCreate withIngressAclId(String ingressAclId);
        }
    }

    /**
     * Begins update for the NetworkToNetworkInterconnect resource.
     *
     * @return the stage of resource update.
     */
    NetworkToNetworkInterconnect.Update update();

    /** The template for NetworkToNetworkInterconnect update. */
    interface Update
        extends UpdateStages.WithLayer2Configuration,
            UpdateStages.WithOptionBLayer3Configuration,
            UpdateStages.WithNpbStaticRouteConfiguration,
            UpdateStages.WithImportRoutePolicy,
            UpdateStages.WithExportRoutePolicy,
            UpdateStages.WithEgressAclId,
            UpdateStages.WithIngressAclId {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        NetworkToNetworkInterconnect apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        NetworkToNetworkInterconnect apply(Context context);
    }

    /** The NetworkToNetworkInterconnect update stages. */
    interface UpdateStages {
        /** The stage of the NetworkToNetworkInterconnect update allowing to specify layer2Configuration. */
        interface WithLayer2Configuration {
            /**
             * Specifies the layer2Configuration property: Common properties for Layer2Configuration..
             *
             * @param layer2Configuration Common properties for Layer2Configuration.
             * @return the next definition stage.
             */
            Update withLayer2Configuration(Layer2Configuration layer2Configuration);
        }

        /** The stage of the NetworkToNetworkInterconnect update allowing to specify optionBLayer3Configuration. */
        interface WithOptionBLayer3Configuration {
            /**
             * Specifies the optionBLayer3Configuration property: Common properties for Layer3Configuration..
             *
             * @param optionBLayer3Configuration Common properties for Layer3Configuration.
             * @return the next definition stage.
             */
            Update withOptionBLayer3Configuration(OptionBLayer3Configuration optionBLayer3Configuration);
        }

        /** The stage of the NetworkToNetworkInterconnect update allowing to specify npbStaticRouteConfiguration. */
        interface WithNpbStaticRouteConfiguration {
            /**
             * Specifies the npbStaticRouteConfiguration property: NPB Static Route Configuration properties..
             *
             * @param npbStaticRouteConfiguration NPB Static Route Configuration properties.
             * @return the next definition stage.
             */
            Update withNpbStaticRouteConfiguration(NpbStaticRouteConfiguration npbStaticRouteConfiguration);
        }

        /** The stage of the NetworkToNetworkInterconnect update allowing to specify importRoutePolicy. */
        interface WithImportRoutePolicy {
            /**
             * Specifies the importRoutePolicy property: Import Route Policy information..
             *
             * @param importRoutePolicy Import Route Policy information.
             * @return the next definition stage.
             */
            Update withImportRoutePolicy(ImportRoutePolicyInformation importRoutePolicy);
        }

        /** The stage of the NetworkToNetworkInterconnect update allowing to specify exportRoutePolicy. */
        interface WithExportRoutePolicy {
            /**
             * Specifies the exportRoutePolicy property: Export Route Policy information.
             *
             * @param exportRoutePolicy Export Route Policy information.
             * @return the next definition stage.
             */
            Update withExportRoutePolicy(ExportRoutePolicyInformation exportRoutePolicy);
        }

        /** The stage of the NetworkToNetworkInterconnect update allowing to specify egressAclId. */
        interface WithEgressAclId {
            /**
             * Specifies the egressAclId property: Egress Acl. ARM resource ID of Access Control Lists..
             *
             * @param egressAclId Egress Acl. ARM resource ID of Access Control Lists.
             * @return the next definition stage.
             */
            Update withEgressAclId(String egressAclId);
        }

        /** The stage of the NetworkToNetworkInterconnect update allowing to specify ingressAclId. */
        interface WithIngressAclId {
            /**
             * Specifies the ingressAclId property: Ingress Acl. ARM resource ID of Access Control Lists..
             *
             * @param ingressAclId Ingress Acl. ARM resource ID of Access Control Lists.
             * @return the next definition stage.
             */
            Update withIngressAclId(String ingressAclId);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    NetworkToNetworkInterconnect refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    NetworkToNetworkInterconnect refresh(Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Updates the NPB Static Route BFD Administrative State.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    CommonPostActionResponseForStateUpdate updateNpbStaticRouteBfdAdministrativeState(UpdateAdministrativeState body);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Updates the NPB Static Route BFD Administrative State.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    CommonPostActionResponseForStateUpdate updateNpbStaticRouteBfdAdministrativeState(
        UpdateAdministrativeState body, Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Updates the Admin State.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    CommonPostActionResponseForStateUpdate updateAdministrativeState(UpdateAdministrativeState body);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Updates the Admin State.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    CommonPostActionResponseForStateUpdate updateAdministrativeState(UpdateAdministrativeState body, Context context);
}
