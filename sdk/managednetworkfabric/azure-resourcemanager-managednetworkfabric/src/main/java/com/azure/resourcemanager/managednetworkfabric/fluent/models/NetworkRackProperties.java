// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkRackType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Network Rack Properties defines the properties of the resource.
 */
@Fluent
public final class NetworkRackProperties extends AnnotationResource {
    /*
     * Network Rack SKU name.
     */
    private NetworkRackType networkRackType;

    /*
     * ARM resource ID of the Network Fabric.
     */
    private String networkFabricId;

    /*
     * List of network device ARM resource IDs.
     */
    private List<String> networkDevices;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of NetworkRackProperties class.
     */
    public NetworkRackProperties() {
    }

    /**
     * Get the networkRackType property: Network Rack SKU name.
     * 
     * @return the networkRackType value.
     */
    public NetworkRackType networkRackType() {
        return this.networkRackType;
    }

    /**
     * Set the networkRackType property: Network Rack SKU name.
     * 
     * @param networkRackType the networkRackType value to set.
     * @return the NetworkRackProperties object itself.
     */
    public NetworkRackProperties withNetworkRackType(NetworkRackType networkRackType) {
        this.networkRackType = networkRackType;
        return this;
    }

    /**
     * Get the networkFabricId property: ARM resource ID of the Network Fabric.
     * 
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.networkFabricId;
    }

    /**
     * Set the networkFabricId property: ARM resource ID of the Network Fabric.
     * 
     * @param networkFabricId the networkFabricId value to set.
     * @return the NetworkRackProperties object itself.
     */
    public NetworkRackProperties withNetworkFabricId(String networkFabricId) {
        this.networkFabricId = networkFabricId;
        return this;
    }

    /**
     * Get the networkDevices property: List of network device ARM resource IDs.
     * 
     * @return the networkDevices value.
     */
    public List<String> networkDevices() {
        return this.networkDevices;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkRackProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (networkFabricId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkFabricId in model NetworkRackProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkRackProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeStringField("networkFabricId", this.networkFabricId);
        jsonWriter.writeStringField("networkRackType",
            this.networkRackType == null ? null : this.networkRackType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkRackProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkRackProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkRackProperties.
     */
    public static NetworkRackProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkRackProperties deserializedNetworkRackProperties = new NetworkRackProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNetworkRackProperties.withAnnotation(reader.getString());
                } else if ("networkFabricId".equals(fieldName)) {
                    deserializedNetworkRackProperties.networkFabricId = reader.getString();
                } else if ("networkRackType".equals(fieldName)) {
                    deserializedNetworkRackProperties.networkRackType = NetworkRackType.fromString(reader.getString());
                } else if ("networkDevices".equals(fieldName)) {
                    List<String> networkDevices = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkRackProperties.networkDevices = networkDevices;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkRackProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkRackProperties;
        });
    }
}
