// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkFabricControllerPatchableProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Network Fabric Controller patch parameters
 * 
 * The Network Fabric Controller Patch payload definition.
 */
@Fluent
public final class NetworkFabricControllerPatch extends TagsUpdate {
    /*
     * Network Fabric Controller patch properties.
     */
    private NetworkFabricControllerPatchableProperties innerProperties;

    /**
     * Creates an instance of NetworkFabricControllerPatch class.
     */
    public NetworkFabricControllerPatch() {
    }

    /**
     * Get the innerProperties property: Network Fabric Controller patch properties.
     * 
     * @return the innerProperties value.
     */
    private NetworkFabricControllerPatchableProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFabricControllerPatch withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the infrastructureExpressRouteConnections property: As part of an update, the Infrastructure ExpressRoute
     * CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure
     * services. (This is a Mandatory attribute).
     * 
     * @return the infrastructureExpressRouteConnections value.
     */
    public List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().infrastructureExpressRouteConnections();
    }

    /**
     * Set the infrastructureExpressRouteConnections property: As part of an update, the Infrastructure ExpressRoute
     * CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure
     * services. (This is a Mandatory attribute).
     * 
     * @param infrastructureExpressRouteConnections the infrastructureExpressRouteConnections value to set.
     * @return the NetworkFabricControllerPatch object itself.
     */
    public NetworkFabricControllerPatch withInfrastructureExpressRouteConnections(
        List<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerPatchableProperties();
        }
        this.innerProperties().withInfrastructureExpressRouteConnections(infrastructureExpressRouteConnections);
        return this;
    }

    /**
     * Get the workloadExpressRouteConnections property: As part of an update, the workload ExpressRoute CircuitID
     * should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is
     * a Mandatory attribute).
     * 
     * @return the workloadExpressRouteConnections value.
     */
    public List<ExpressRouteConnectionInformation> workloadExpressRouteConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadExpressRouteConnections();
    }

    /**
     * Set the workloadExpressRouteConnections property: As part of an update, the workload ExpressRoute CircuitID
     * should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is
     * a Mandatory attribute).
     * 
     * @param workloadExpressRouteConnections the workloadExpressRouteConnections value to set.
     * @return the NetworkFabricControllerPatch object itself.
     */
    public NetworkFabricControllerPatch
        withWorkloadExpressRouteConnections(List<ExpressRouteConnectionInformation> workloadExpressRouteConnections) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkFabricControllerPatchableProperties();
        }
        this.innerProperties().withWorkloadExpressRouteConnections(workloadExpressRouteConnections);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkFabricControllerPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkFabricControllerPatch if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkFabricControllerPatch.
     */
    public static NetworkFabricControllerPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkFabricControllerPatch deserializedNetworkFabricControllerPatch = new NetworkFabricControllerPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedNetworkFabricControllerPatch.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedNetworkFabricControllerPatch.innerProperties
                        = NetworkFabricControllerPatchableProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkFabricControllerPatch;
        });
    }
}
