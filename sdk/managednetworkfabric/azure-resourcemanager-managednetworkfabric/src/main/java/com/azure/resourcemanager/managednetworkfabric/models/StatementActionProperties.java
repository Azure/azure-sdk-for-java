// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Route policy action properties.
 */
@Fluent
public final class StatementActionProperties implements JsonSerializable<StatementActionProperties> {
    /*
     * Local Preference of the route policy.
     */
    private Long localPreference;

    /*
     * Action type. Example: Permit | Deny | Continue.
     */
    private RoutePolicyActionType actionType;

    /*
     * IP Community Properties.
     */
    private ActionIpCommunityProperties ipCommunityProperties;

    /*
     * IP Extended Community Properties.
     */
    private ActionIpExtendedCommunityProperties ipExtendedCommunityProperties;

    /**
     * Creates an instance of StatementActionProperties class.
     */
    public StatementActionProperties() {
    }

    /**
     * Get the localPreference property: Local Preference of the route policy.
     * 
     * @return the localPreference value.
     */
    public Long localPreference() {
        return this.localPreference;
    }

    /**
     * Set the localPreference property: Local Preference of the route policy.
     * 
     * @param localPreference the localPreference value to set.
     * @return the StatementActionProperties object itself.
     */
    public StatementActionProperties withLocalPreference(Long localPreference) {
        this.localPreference = localPreference;
        return this;
    }

    /**
     * Get the actionType property: Action type. Example: Permit | Deny | Continue.
     * 
     * @return the actionType value.
     */
    public RoutePolicyActionType actionType() {
        return this.actionType;
    }

    /**
     * Set the actionType property: Action type. Example: Permit | Deny | Continue.
     * 
     * @param actionType the actionType value to set.
     * @return the StatementActionProperties object itself.
     */
    public StatementActionProperties withActionType(RoutePolicyActionType actionType) {
        this.actionType = actionType;
        return this;
    }

    /**
     * Get the ipCommunityProperties property: IP Community Properties.
     * 
     * @return the ipCommunityProperties value.
     */
    public ActionIpCommunityProperties ipCommunityProperties() {
        return this.ipCommunityProperties;
    }

    /**
     * Set the ipCommunityProperties property: IP Community Properties.
     * 
     * @param ipCommunityProperties the ipCommunityProperties value to set.
     * @return the StatementActionProperties object itself.
     */
    public StatementActionProperties withIpCommunityProperties(ActionIpCommunityProperties ipCommunityProperties) {
        this.ipCommunityProperties = ipCommunityProperties;
        return this;
    }

    /**
     * Get the ipExtendedCommunityProperties property: IP Extended Community Properties.
     * 
     * @return the ipExtendedCommunityProperties value.
     */
    public ActionIpExtendedCommunityProperties ipExtendedCommunityProperties() {
        return this.ipExtendedCommunityProperties;
    }

    /**
     * Set the ipExtendedCommunityProperties property: IP Extended Community Properties.
     * 
     * @param ipExtendedCommunityProperties the ipExtendedCommunityProperties value to set.
     * @return the StatementActionProperties object itself.
     */
    public StatementActionProperties
        withIpExtendedCommunityProperties(ActionIpExtendedCommunityProperties ipExtendedCommunityProperties) {
        this.ipExtendedCommunityProperties = ipExtendedCommunityProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (actionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property actionType in model StatementActionProperties"));
        }
        if (ipCommunityProperties() != null) {
            ipCommunityProperties().validate();
        }
        if (ipExtendedCommunityProperties() != null) {
            ipExtendedCommunityProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StatementActionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionType", this.actionType == null ? null : this.actionType.toString());
        jsonWriter.writeNumberField("localPreference", this.localPreference);
        jsonWriter.writeJsonField("ipCommunityProperties", this.ipCommunityProperties);
        jsonWriter.writeJsonField("ipExtendedCommunityProperties", this.ipExtendedCommunityProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatementActionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatementActionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StatementActionProperties.
     */
    public static StatementActionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatementActionProperties deserializedStatementActionProperties = new StatementActionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionType".equals(fieldName)) {
                    deserializedStatementActionProperties.actionType
                        = RoutePolicyActionType.fromString(reader.getString());
                } else if ("localPreference".equals(fieldName)) {
                    deserializedStatementActionProperties.localPreference = reader.getNullable(JsonReader::getLong);
                } else if ("ipCommunityProperties".equals(fieldName)) {
                    deserializedStatementActionProperties.ipCommunityProperties
                        = ActionIpCommunityProperties.fromJson(reader);
                } else if ("ipExtendedCommunityProperties".equals(fieldName)) {
                    deserializedStatementActionProperties.ipExtendedCommunityProperties
                        = ActionIpExtendedCommunityProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatementActionProperties;
        });
    }
}
