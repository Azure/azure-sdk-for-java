// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunityPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.IpExtendedCommunityRule;
import java.io.IOException;
import java.util.List;

/**
 * IP Extended Community patchable properties.
 */
@Fluent
public final class IpExtendedCommunityPatchProperties extends IpExtendedCommunityPatchableProperties {
    /*
     * Switch configuration description.
     */
    private String annotation;

    /**
     * Creates an instance of IpExtendedCommunityPatchProperties class.
     */
    public IpExtendedCommunityPatchProperties() {
    }

    /**
     * Get the annotation property: Switch configuration description.
     * 
     * @return the annotation value.
     */
    public String annotation() {
        return this.annotation;
    }

    /**
     * Set the annotation property: Switch configuration description.
     * 
     * @param annotation the annotation value to set.
     * @return the IpExtendedCommunityPatchProperties object itself.
     */
    public IpExtendedCommunityPatchProperties withAnnotation(String annotation) {
        this.annotation = annotation;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IpExtendedCommunityPatchProperties
        withIpExtendedCommunityRules(List<IpExtendedCommunityRule> ipExtendedCommunityRules) {
        super.withIpExtendedCommunityRules(ipExtendedCommunityRules);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (ipExtendedCommunityRules() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ipExtendedCommunityRules in model IpExtendedCommunityPatchProperties"));
        } else {
            ipExtendedCommunityRules().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IpExtendedCommunityPatchProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipExtendedCommunityRules", ipExtendedCommunityRules(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("annotation", this.annotation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpExtendedCommunityPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpExtendedCommunityPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IpExtendedCommunityPatchProperties.
     */
    public static IpExtendedCommunityPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpExtendedCommunityPatchProperties deserializedIpExtendedCommunityPatchProperties
                = new IpExtendedCommunityPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipExtendedCommunityRules".equals(fieldName)) {
                    List<IpExtendedCommunityRule> ipExtendedCommunityRules
                        = reader.readArray(reader1 -> IpExtendedCommunityRule.fromJson(reader1));
                    deserializedIpExtendedCommunityPatchProperties
                        .withIpExtendedCommunityRules(ipExtendedCommunityRules);
                } else if ("annotation".equals(fieldName)) {
                    deserializedIpExtendedCommunityPatchProperties.annotation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpExtendedCommunityPatchProperties;
        });
    }
}
