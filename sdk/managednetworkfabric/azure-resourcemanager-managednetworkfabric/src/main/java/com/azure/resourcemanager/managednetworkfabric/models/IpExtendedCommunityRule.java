// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * List of IP Extended Community Rules.
 */
@Fluent
public final class IpExtendedCommunityRule implements JsonSerializable<IpExtendedCommunityRule> {
    /*
     * Action to be taken on the configuration. Example: Permit | Deny.
     */
    private CommunityActionTypes action;

    /*
     * Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence
     * number and continue down the list until a match is made. Once a match is made, the permit or deny statement is
     * applied to that network and the rest of the list is ignored.
     */
    private long sequenceNumber;

    /*
     * Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example
     * 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of
     * 0-65535, ASN(plain) is in range of 0-4294967295.
     */
    private List<String> routeTargets;

    /**
     * Creates an instance of IpExtendedCommunityRule class.
     */
    public IpExtendedCommunityRule() {
    }

    /**
     * Get the action property: Action to be taken on the configuration. Example: Permit | Deny.
     * 
     * @return the action value.
     */
    public CommunityActionTypes action() {
        return this.action;
    }

    /**
     * Set the action property: Action to be taken on the configuration. Example: Permit | Deny.
     * 
     * @param action the action value to set.
     * @return the IpExtendedCommunityRule object itself.
     */
    public IpExtendedCommunityRule withAction(CommunityActionTypes action) {
        this.action = action;
        return this;
    }

    /**
     * Get the sequenceNumber property: Sequence to insert to/delete from existing route. Prefix lists are evaluated
     * starting with the lowest sequence number and continue down the list until a match is made. Once a match is made,
     * the permit or deny statement is applied to that network and the rest of the list is ignored.
     * 
     * @return the sequenceNumber value.
     */
    public long sequenceNumber() {
        return this.sequenceNumber;
    }

    /**
     * Set the sequenceNumber property: Sequence to insert to/delete from existing route. Prefix lists are evaluated
     * starting with the lowest sequence number and continue down the list until a match is made. Once a match is made,
     * the permit or deny statement is applied to that network and the rest of the list is ignored.
     * 
     * @param sequenceNumber the sequenceNumber value to set.
     * @return the IpExtendedCommunityRule object itself.
     */
    public IpExtendedCommunityRule withSequenceNumber(long sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }

    /**
     * Get the routeTargets property: Route Target List.The expected formats are ASN(plain):NN &gt;&gt; example
     * 4294967294:50, ASN.ASN:NN &gt;&gt; example 65533.65333:40, IP-address:NN &gt;&gt; example 10.10.10.10:65535. The
     * possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
     * 
     * @return the routeTargets value.
     */
    public List<String> routeTargets() {
        return this.routeTargets;
    }

    /**
     * Set the routeTargets property: Route Target List.The expected formats are ASN(plain):NN &gt;&gt; example
     * 4294967294:50, ASN.ASN:NN &gt;&gt; example 65533.65333:40, IP-address:NN &gt;&gt; example 10.10.10.10:65535. The
     * possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
     * 
     * @param routeTargets the routeTargets value to set.
     * @return the IpExtendedCommunityRule object itself.
     */
    public IpExtendedCommunityRule withRouteTargets(List<String> routeTargets) {
        this.routeTargets = routeTargets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model IpExtendedCommunityRule"));
        }
        if (routeTargets() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property routeTargets in model IpExtendedCommunityRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IpExtendedCommunityRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeLongField("sequenceNumber", this.sequenceNumber);
        jsonWriter.writeArrayField("routeTargets", this.routeTargets, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpExtendedCommunityRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpExtendedCommunityRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IpExtendedCommunityRule.
     */
    public static IpExtendedCommunityRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpExtendedCommunityRule deserializedIpExtendedCommunityRule = new IpExtendedCommunityRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedIpExtendedCommunityRule.action = CommunityActionTypes.fromString(reader.getString());
                } else if ("sequenceNumber".equals(fieldName)) {
                    deserializedIpExtendedCommunityRule.sequenceNumber = reader.getLong();
                } else if ("routeTargets".equals(fieldName)) {
                    List<String> routeTargets = reader.readArray(reader1 -> reader1.getString());
                    deserializedIpExtendedCommunityRule.routeTargets = routeTargets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpExtendedCommunityRule;
        });
    }
}
