// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The NetworkPacketBroker resource definition.
 */
@Fluent
public final class NetworkPacketBrokerInner extends Resource {
    /*
     * Resource properties.
     */
    private NetworkPacketBrokerProperties innerProperties = new NetworkPacketBrokerProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of NetworkPacketBrokerInner class.
     */
    public NetworkPacketBrokerInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private NetworkPacketBrokerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkPacketBrokerInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkPacketBrokerInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the networkFabricId property: ARM resource ID of the Network Fabric.
     * 
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.innerProperties() == null ? null : this.innerProperties().networkFabricId();
    }

    /**
     * Set the networkFabricId property: ARM resource ID of the Network Fabric.
     * 
     * @param networkFabricId the networkFabricId value to set.
     * @return the NetworkPacketBrokerInner object itself.
     */
    public NetworkPacketBrokerInner withNetworkFabricId(String networkFabricId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkPacketBrokerProperties();
        }
        this.innerProperties().withNetworkFabricId(networkFabricId);
        return this;
    }

    /**
     * Get the networkDeviceIds property: List of ARM resource IDs of Network Devices [NPB].
     * 
     * @return the networkDeviceIds value.
     */
    public List<String> networkDeviceIds() {
        return this.innerProperties() == null ? null : this.innerProperties().networkDeviceIds();
    }

    /**
     * Get the sourceInterfaceIds property: List of network interfaces across NPB devices that are used to mirror source
     * traffic.
     * 
     * @return the sourceInterfaceIds value.
     */
    public List<String> sourceInterfaceIds() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceInterfaceIds();
    }

    /**
     * Get the networkTapIds property: List of network Tap IDs configured on NPB.
     * 
     * @return the networkTapIds value.
     */
    public List<String> networkTapIds() {
        return this.innerProperties() == null ? null : this.innerProperties().networkTapIds();
    }

    /**
     * Get the neighborGroupIds property: List of neighbor group IDs configured on NPB.
     * 
     * @return the neighborGroupIds value.
     */
    public List<String> neighborGroupIds() {
        return this.innerProperties() == null ? null : this.innerProperties().neighborGroupIds();
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model NetworkPacketBrokerInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkPacketBrokerInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkPacketBrokerInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkPacketBrokerInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkPacketBrokerInner.
     */
    public static NetworkPacketBrokerInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkPacketBrokerInner deserializedNetworkPacketBrokerInner = new NetworkPacketBrokerInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNetworkPacketBrokerInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNetworkPacketBrokerInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNetworkPacketBrokerInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedNetworkPacketBrokerInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedNetworkPacketBrokerInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedNetworkPacketBrokerInner.innerProperties
                        = NetworkPacketBrokerProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedNetworkPacketBrokerInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkPacketBrokerInner;
        });
    }
}
