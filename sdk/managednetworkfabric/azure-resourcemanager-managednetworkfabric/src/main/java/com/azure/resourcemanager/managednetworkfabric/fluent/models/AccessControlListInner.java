// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AccessControlListMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.CommonDynamicMatchConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionTypes;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * The Access Control List resource definition.
 */
@Fluent
public final class AccessControlListInner extends Resource {
    /*
     * Resource properties.
     */
    private AccessControlListProperties innerProperties = new AccessControlListProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AccessControlListInner class.
     */
    public AccessControlListInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private AccessControlListProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessControlListInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessControlListInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the lastSyncedTime property: The last synced timestamp.
     * 
     * @return the lastSyncedTime value.
     */
    public OffsetDateTime lastSyncedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastSyncedTime();
    }

    /**
     * Get the configurationState property: Configuration state of the resource.
     * 
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.innerProperties() == null ? null : this.innerProperties().configurationState();
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     * 
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.innerProperties() == null ? null : this.innerProperties().administrativeState();
    }

    /**
     * Get the configurationType property: Input method to configure Access Control List.
     * 
     * @return the configurationType value.
     */
    public ConfigurationType configurationType() {
        return this.innerProperties() == null ? null : this.innerProperties().configurationType();
    }

    /**
     * Set the configurationType property: Input method to configure Access Control List.
     * 
     * @param configurationType the configurationType value to set.
     * @return the AccessControlListInner object itself.
     */
    public AccessControlListInner withConfigurationType(ConfigurationType configurationType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessControlListProperties();
        }
        this.innerProperties().withConfigurationType(configurationType);
        return this;
    }

    /**
     * Get the aclsUrl property: Access Control List file URL.
     * 
     * @return the aclsUrl value.
     */
    public String aclsUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().aclsUrl();
    }

    /**
     * Set the aclsUrl property: Access Control List file URL.
     * 
     * @param aclsUrl the aclsUrl value to set.
     * @return the AccessControlListInner object itself.
     */
    public AccessControlListInner withAclsUrl(String aclsUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessControlListProperties();
        }
        this.innerProperties().withAclsUrl(aclsUrl);
        return this;
    }

    /**
     * Get the defaultAction property: Default action that needs to be applied when no condition is matched. Example:
     * Permit | Deny.
     * 
     * @return the defaultAction value.
     */
    public CommunityActionTypes defaultAction() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultAction();
    }

    /**
     * Set the defaultAction property: Default action that needs to be applied when no condition is matched. Example:
     * Permit | Deny.
     * 
     * @param defaultAction the defaultAction value to set.
     * @return the AccessControlListInner object itself.
     */
    public AccessControlListInner withDefaultAction(CommunityActionTypes defaultAction) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessControlListProperties();
        }
        this.innerProperties().withDefaultAction(defaultAction);
        return this;
    }

    /**
     * Get the matchConfigurations property: List of match configurations.
     * 
     * @return the matchConfigurations value.
     */
    public List<AccessControlListMatchConfiguration> matchConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().matchConfigurations();
    }

    /**
     * Set the matchConfigurations property: List of match configurations.
     * 
     * @param matchConfigurations the matchConfigurations value to set.
     * @return the AccessControlListInner object itself.
     */
    public AccessControlListInner
        withMatchConfigurations(List<AccessControlListMatchConfiguration> matchConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessControlListProperties();
        }
        this.innerProperties().withMatchConfigurations(matchConfigurations);
        return this;
    }

    /**
     * Get the dynamicMatchConfigurations property: List of dynamic match configurations.
     * 
     * @return the dynamicMatchConfigurations value.
     */
    public List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().dynamicMatchConfigurations();
    }

    /**
     * Set the dynamicMatchConfigurations property: List of dynamic match configurations.
     * 
     * @param dynamicMatchConfigurations the dynamicMatchConfigurations value to set.
     * @return the AccessControlListInner object itself.
     */
    public AccessControlListInner
        withDynamicMatchConfigurations(List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessControlListProperties();
        }
        this.innerProperties().withDynamicMatchConfigurations(dynamicMatchConfigurations);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     * 
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     * 
     * @param annotation the annotation value to set.
     * @return the AccessControlListInner object itself.
     */
    public AccessControlListInner withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessControlListProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model AccessControlListInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AccessControlListInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessControlListInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessControlListInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AccessControlListInner.
     */
    public static AccessControlListInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessControlListInner deserializedAccessControlListInner = new AccessControlListInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAccessControlListInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAccessControlListInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAccessControlListInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAccessControlListInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAccessControlListInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedAccessControlListInner.innerProperties = AccessControlListProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAccessControlListInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessControlListInner;
        });
    }
}
