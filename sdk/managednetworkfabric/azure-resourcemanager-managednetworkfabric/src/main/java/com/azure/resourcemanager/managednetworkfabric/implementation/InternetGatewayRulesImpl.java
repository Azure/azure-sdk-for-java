// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.fluent.InternetGatewayRulesClient;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternetGatewayRuleInner;
import com.azure.resourcemanager.managednetworkfabric.models.InternetGatewayRule;
import com.azure.resourcemanager.managednetworkfabric.models.InternetGatewayRules;

public final class InternetGatewayRulesImpl implements InternetGatewayRules {
    private static final ClientLogger LOGGER = new ClientLogger(InternetGatewayRulesImpl.class);

    private final InternetGatewayRulesClient innerClient;

    private final com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager;

    public InternetGatewayRulesImpl(
        InternetGatewayRulesClient innerClient,
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<InternetGatewayRule> getByResourceGroupWithResponse(
        String resourceGroupName, String internetGatewayRuleName, Context context) {
        Response<InternetGatewayRuleInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, internetGatewayRuleName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InternetGatewayRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InternetGatewayRule getByResourceGroup(String resourceGroupName, String internetGatewayRuleName) {
        InternetGatewayRuleInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, internetGatewayRuleName);
        if (inner != null) {
            return new InternetGatewayRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String internetGatewayRuleName) {
        this.serviceClient().delete(resourceGroupName, internetGatewayRuleName);
    }

    public void delete(String resourceGroupName, String internetGatewayRuleName, Context context) {
        this.serviceClient().delete(resourceGroupName, internetGatewayRuleName, context);
    }

    public PagedIterable<InternetGatewayRule> listByResourceGroup(String resourceGroupName) {
        PagedIterable<InternetGatewayRuleInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new InternetGatewayRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<InternetGatewayRule> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<InternetGatewayRuleInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new InternetGatewayRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<InternetGatewayRule> list() {
        PagedIterable<InternetGatewayRuleInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new InternetGatewayRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<InternetGatewayRule> list(Context context) {
        PagedIterable<InternetGatewayRuleInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new InternetGatewayRuleImpl(inner1, this.manager()));
    }

    public InternetGatewayRule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String internetGatewayRuleName = Utils.getValueFromIdByName(id, "internetGatewayRules");
        if (internetGatewayRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'internetGatewayRules'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, internetGatewayRuleName, Context.NONE).getValue();
    }

    public Response<InternetGatewayRule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String internetGatewayRuleName = Utils.getValueFromIdByName(id, "internetGatewayRules");
        if (internetGatewayRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'internetGatewayRules'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, internetGatewayRuleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String internetGatewayRuleName = Utils.getValueFromIdByName(id, "internetGatewayRules");
        if (internetGatewayRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'internetGatewayRules'.",
                                id)));
        }
        this.delete(resourceGroupName, internetGatewayRuleName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String internetGatewayRuleName = Utils.getValueFromIdByName(id, "internetGatewayRules");
        if (internetGatewayRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'internetGatewayRules'.",
                                id)));
        }
        this.delete(resourceGroupName, internetGatewayRuleName, context);
    }

    private InternetGatewayRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager() {
        return this.serviceManager;
    }

    public InternetGatewayRuleImpl define(String name) {
        return new InternetGatewayRuleImpl(name, this.manager());
    }
}
