// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the match condition that is supported to filter the traffic. */
@Fluent
public final class NetworkTapRuleMatchCondition extends CommonMatchConditions {
    /*
     * Encapsulation Type.
     */
    @JsonProperty(value = "encapsulationType")
    private EncapsulationType encapsulationType;

    /*
     * Defines the port condition that needs to be matched.
     */
    @JsonProperty(value = "portCondition")
    private PortCondition portCondition;

    /** Creates an instance of NetworkTapRuleMatchCondition class. */
    public NetworkTapRuleMatchCondition() {
    }

    /**
     * Get the encapsulationType property: Encapsulation Type.
     *
     * @return the encapsulationType value.
     */
    public EncapsulationType encapsulationType() {
        return this.encapsulationType;
    }

    /**
     * Set the encapsulationType property: Encapsulation Type.
     *
     * @param encapsulationType the encapsulationType value to set.
     * @return the NetworkTapRuleMatchCondition object itself.
     */
    public NetworkTapRuleMatchCondition withEncapsulationType(EncapsulationType encapsulationType) {
        this.encapsulationType = encapsulationType;
        return this;
    }

    /**
     * Get the portCondition property: Defines the port condition that needs to be matched.
     *
     * @return the portCondition value.
     */
    public PortCondition portCondition() {
        return this.portCondition;
    }

    /**
     * Set the portCondition property: Defines the port condition that needs to be matched.
     *
     * @param portCondition the portCondition value to set.
     * @return the NetworkTapRuleMatchCondition object itself.
     */
    public NetworkTapRuleMatchCondition withPortCondition(PortCondition portCondition) {
        this.portCondition = portCondition;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkTapRuleMatchCondition withProtocolTypes(List<String> protocolTypes) {
        super.withProtocolTypes(protocolTypes);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkTapRuleMatchCondition withVlanMatchCondition(VlanMatchCondition vlanMatchCondition) {
        super.withVlanMatchCondition(vlanMatchCondition);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkTapRuleMatchCondition withIpCondition(IpMatchCondition ipCondition) {
        super.withIpCondition(ipCondition);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (portCondition() != null) {
            portCondition().validate();
        }
    }
}
