// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.util.ExpandableStringEnum;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collection;

/** Operational state for the resource. */
public final class NetworkFabricControllerOperationalState
    extends ExpandableStringEnum<NetworkFabricControllerOperationalState> {
    /** Static value Configuring for NetworkFabricControllerOperationalState. */
    public static final NetworkFabricControllerOperationalState CONFIGURING = fromString("Configuring");

    /** Static value Succeeded for NetworkFabricControllerOperationalState. */
    public static final NetworkFabricControllerOperationalState SUCCEEDED = fromString("Succeeded");

    /** Static value Failed for NetworkFabricControllerOperationalState. */
    public static final NetworkFabricControllerOperationalState FAILED = fromString("Failed");

    /**
     * Creates a new instance of NetworkFabricControllerOperationalState value.
     *
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public NetworkFabricControllerOperationalState() {
    }

    /**
     * Creates or finds a NetworkFabricControllerOperationalState from its string representation.
     *
     * @param name a name to look for.
     * @return the corresponding NetworkFabricControllerOperationalState.
     */
    @JsonCreator
    public static NetworkFabricControllerOperationalState fromString(String name) {
        return fromString(name, NetworkFabricControllerOperationalState.class);
    }

    /**
     * Gets known NetworkFabricControllerOperationalState values.
     *
     * @return known NetworkFabricControllerOperationalState values.
     */
    public static Collection<NetworkFabricControllerOperationalState> values() {
        return values(NetworkFabricControllerOperationalState.class);
    }
}
