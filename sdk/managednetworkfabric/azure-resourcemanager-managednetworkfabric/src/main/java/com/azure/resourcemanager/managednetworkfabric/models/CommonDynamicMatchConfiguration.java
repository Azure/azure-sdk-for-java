// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Dynamic match configuration object.
 */
@Fluent
public final class CommonDynamicMatchConfiguration implements JsonSerializable<CommonDynamicMatchConfiguration> {
    /*
     * List of IP Groups.
     */
    private List<IpGroupProperties> ipGroups;

    /*
     * List of vlan groups.
     */
    private List<VlanGroupProperties> vlanGroups;

    /*
     * List of the port groups.
     */
    private List<PortGroupProperties> portGroups;

    /**
     * Creates an instance of CommonDynamicMatchConfiguration class.
     */
    public CommonDynamicMatchConfiguration() {
    }

    /**
     * Get the ipGroups property: List of IP Groups.
     * 
     * @return the ipGroups value.
     */
    public List<IpGroupProperties> ipGroups() {
        return this.ipGroups;
    }

    /**
     * Set the ipGroups property: List of IP Groups.
     * 
     * @param ipGroups the ipGroups value to set.
     * @return the CommonDynamicMatchConfiguration object itself.
     */
    public CommonDynamicMatchConfiguration withIpGroups(List<IpGroupProperties> ipGroups) {
        this.ipGroups = ipGroups;
        return this;
    }

    /**
     * Get the vlanGroups property: List of vlan groups.
     * 
     * @return the vlanGroups value.
     */
    public List<VlanGroupProperties> vlanGroups() {
        return this.vlanGroups;
    }

    /**
     * Set the vlanGroups property: List of vlan groups.
     * 
     * @param vlanGroups the vlanGroups value to set.
     * @return the CommonDynamicMatchConfiguration object itself.
     */
    public CommonDynamicMatchConfiguration withVlanGroups(List<VlanGroupProperties> vlanGroups) {
        this.vlanGroups = vlanGroups;
        return this;
    }

    /**
     * Get the portGroups property: List of the port groups.
     * 
     * @return the portGroups value.
     */
    public List<PortGroupProperties> portGroups() {
        return this.portGroups;
    }

    /**
     * Set the portGroups property: List of the port groups.
     * 
     * @param portGroups the portGroups value to set.
     * @return the CommonDynamicMatchConfiguration object itself.
     */
    public CommonDynamicMatchConfiguration withPortGroups(List<PortGroupProperties> portGroups) {
        this.portGroups = portGroups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipGroups() != null) {
            ipGroups().forEach(e -> e.validate());
        }
        if (vlanGroups() != null) {
            vlanGroups().forEach(e -> e.validate());
        }
        if (portGroups() != null) {
            portGroups().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipGroups", this.ipGroups, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("vlanGroups", this.vlanGroups, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("portGroups", this.portGroups, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommonDynamicMatchConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommonDynamicMatchConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommonDynamicMatchConfiguration.
     */
    public static CommonDynamicMatchConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommonDynamicMatchConfiguration deserializedCommonDynamicMatchConfiguration
                = new CommonDynamicMatchConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipGroups".equals(fieldName)) {
                    List<IpGroupProperties> ipGroups = reader.readArray(reader1 -> IpGroupProperties.fromJson(reader1));
                    deserializedCommonDynamicMatchConfiguration.ipGroups = ipGroups;
                } else if ("vlanGroups".equals(fieldName)) {
                    List<VlanGroupProperties> vlanGroups
                        = reader.readArray(reader1 -> VlanGroupProperties.fromJson(reader1));
                    deserializedCommonDynamicMatchConfiguration.vlanGroups = vlanGroups;
                } else if ("portGroups".equals(fieldName)) {
                    List<PortGroupProperties> portGroups
                        = reader.readArray(reader1 -> PortGroupProperties.fromJson(reader1));
                    deserializedCommonDynamicMatchConfiguration.portGroups = portGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommonDynamicMatchConfiguration;
        });
    }
}
