// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapPatchableParameters;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The NetworkFabric resource definition.
 */
@Fluent
public final class NetworkTapPatch extends TagsUpdate {
    /*
     * Resource properties.
     */
    private NetworkTapPatchableParameters innerProperties;

    /**
     * Creates an instance of NetworkTapPatch class.
     */
    public NetworkTapPatch() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private NetworkTapPatchableParameters innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkTapPatch withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the pollingType property: Polling type.
     * 
     * @return the pollingType value.
     */
    public PollingType pollingType() {
        return this.innerProperties() == null ? null : this.innerProperties().pollingType();
    }

    /**
     * Set the pollingType property: Polling type.
     * 
     * @param pollingType the pollingType value to set.
     * @return the NetworkTapPatch object itself.
     */
    public NetworkTapPatch withPollingType(PollingType pollingType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapPatchableParameters();
        }
        this.innerProperties().withPollingType(pollingType);
        return this;
    }

    /**
     * Get the destinations property: List of destination properties to send the filter traffic.
     * 
     * @return the destinations value.
     */
    public List<NetworkTapPatchableParametersDestinationsItem> destinations() {
        return this.innerProperties() == null ? null : this.innerProperties().destinations();
    }

    /**
     * Set the destinations property: List of destination properties to send the filter traffic.
     * 
     * @param destinations the destinations value to set.
     * @return the NetworkTapPatch object itself.
     */
    public NetworkTapPatch withDestinations(List<NetworkTapPatchableParametersDestinationsItem> destinations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapPatchableParameters();
        }
        this.innerProperties().withDestinations(destinations);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     * 
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     * 
     * @param annotation the annotation value to set.
     * @return the NetworkTapPatch object itself.
     */
    public NetworkTapPatch withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkTapPatchableParameters();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkTapPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkTapPatch if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkTapPatch.
     */
    public static NetworkTapPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkTapPatch deserializedNetworkTapPatch = new NetworkTapPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedNetworkTapPatch.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedNetworkTapPatch.innerProperties = NetworkTapPatchableParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkTapPatch;
        });
    }
}
