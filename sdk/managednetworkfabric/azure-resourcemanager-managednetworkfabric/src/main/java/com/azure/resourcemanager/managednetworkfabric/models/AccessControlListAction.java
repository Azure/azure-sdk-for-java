// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Action that need to performed.
 */
@Fluent
public final class AccessControlListAction implements JsonSerializable<AccessControlListAction> {
    /*
     * Type of actions that can be performed.
     */
    private AclActionType type;

    /*
     * Name of the counter block to get match count information.
     */
    private String counterName;

    /**
     * Creates an instance of AccessControlListAction class.
     */
    public AccessControlListAction() {
    }

    /**
     * Get the type property: Type of actions that can be performed.
     * 
     * @return the type value.
     */
    public AclActionType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of actions that can be performed.
     * 
     * @param type the type value to set.
     * @return the AccessControlListAction object itself.
     */
    public AccessControlListAction withType(AclActionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the counterName property: Name of the counter block to get match count information.
     * 
     * @return the counterName value.
     */
    public String counterName() {
        return this.counterName;
    }

    /**
     * Set the counterName property: Name of the counter block to get match count information.
     * 
     * @param counterName the counterName value to set.
     * @return the AccessControlListAction object itself.
     */
    public AccessControlListAction withCounterName(String counterName) {
        this.counterName = counterName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("counterName", this.counterName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessControlListAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessControlListAction if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessControlListAction.
     */
    public static AccessControlListAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessControlListAction deserializedAccessControlListAction = new AccessControlListAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAccessControlListAction.type = AclActionType.fromString(reader.getString());
                } else if ("counterName".equals(fieldName)) {
                    deserializedAccessControlListAction.counterName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessControlListAction;
        });
    }
}
