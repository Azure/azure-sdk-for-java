// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Validation configuration properties.
 */
@Fluent
public final class ValidateConfigurationProperties implements JsonSerializable<ValidateConfigurationProperties> {
    /*
     * Validate action that to be performed
     */
    private ValidateAction validateAction;

    /**
     * Creates an instance of ValidateConfigurationProperties class.
     */
    public ValidateConfigurationProperties() {
    }

    /**
     * Get the validateAction property: Validate action that to be performed.
     * 
     * @return the validateAction value.
     */
    public ValidateAction validateAction() {
        return this.validateAction;
    }

    /**
     * Set the validateAction property: Validate action that to be performed.
     * 
     * @param validateAction the validateAction value to set.
     * @return the ValidateConfigurationProperties object itself.
     */
    public ValidateConfigurationProperties withValidateAction(ValidateAction validateAction) {
        this.validateAction = validateAction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("validateAction",
            this.validateAction == null ? null : this.validateAction.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidateConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidateConfigurationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ValidateConfigurationProperties.
     */
    public static ValidateConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidateConfigurationProperties deserializedValidateConfigurationProperties
                = new ValidateConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("validateAction".equals(fieldName)) {
                    deserializedValidateConfigurationProperties.validateAction
                        = ValidateAction.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidateConfigurationProperties;
        });
    }
}
