// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Route policy statement condition properties.
 */
@Fluent
public final class StatementConditionProperties extends IpCommunityIdList {
    /*
     * Type of the condition used.
     */
    private RoutePolicyConditionType type;

    /*
     * Arm Resource Id of IpPrefix.
     */
    private String ipPrefixId;

    /*
     * List of IP Extended Community resource IDs.
     */
    private List<String> ipExtendedCommunityIds;

    /**
     * Creates an instance of StatementConditionProperties class.
     */
    public StatementConditionProperties() {
    }

    /**
     * Get the type property: Type of the condition used.
     * 
     * @return the type value.
     */
    public RoutePolicyConditionType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the condition used.
     * 
     * @param type the type value to set.
     * @return the StatementConditionProperties object itself.
     */
    public StatementConditionProperties withType(RoutePolicyConditionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the ipPrefixId property: Arm Resource Id of IpPrefix.
     * 
     * @return the ipPrefixId value.
     */
    public String ipPrefixId() {
        return this.ipPrefixId;
    }

    /**
     * Set the ipPrefixId property: Arm Resource Id of IpPrefix.
     * 
     * @param ipPrefixId the ipPrefixId value to set.
     * @return the StatementConditionProperties object itself.
     */
    public StatementConditionProperties withIpPrefixId(String ipPrefixId) {
        this.ipPrefixId = ipPrefixId;
        return this;
    }

    /**
     * Get the ipExtendedCommunityIds property: List of IP Extended Community resource IDs.
     * 
     * @return the ipExtendedCommunityIds value.
     */
    public List<String> ipExtendedCommunityIds() {
        return this.ipExtendedCommunityIds;
    }

    /**
     * Set the ipExtendedCommunityIds property: List of IP Extended Community resource IDs.
     * 
     * @param ipExtendedCommunityIds the ipExtendedCommunityIds value to set.
     * @return the StatementConditionProperties object itself.
     */
    public StatementConditionProperties withIpExtendedCommunityIds(List<String> ipExtendedCommunityIds) {
        this.ipExtendedCommunityIds = ipExtendedCommunityIds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatementConditionProperties withIpCommunityIds(List<String> ipCommunityIds) {
        super.withIpCommunityIds(ipCommunityIds);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipCommunityIds", ipCommunityIds(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("ipPrefixId", this.ipPrefixId);
        jsonWriter.writeArrayField("ipExtendedCommunityIds", this.ipExtendedCommunityIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatementConditionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatementConditionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatementConditionProperties.
     */
    public static StatementConditionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatementConditionProperties deserializedStatementConditionProperties = new StatementConditionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipCommunityIds".equals(fieldName)) {
                    List<String> ipCommunityIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedStatementConditionProperties.withIpCommunityIds(ipCommunityIds);
                } else if ("type".equals(fieldName)) {
                    deserializedStatementConditionProperties.type
                        = RoutePolicyConditionType.fromString(reader.getString());
                } else if ("ipPrefixId".equals(fieldName)) {
                    deserializedStatementConditionProperties.ipPrefixId = reader.getString();
                } else if ("ipExtendedCommunityIds".equals(fieldName)) {
                    List<String> ipExtendedCommunityIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedStatementConditionProperties.ipExtendedCommunityIds = ipExtendedCommunityIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatementConditionProperties;
        });
    }
}
