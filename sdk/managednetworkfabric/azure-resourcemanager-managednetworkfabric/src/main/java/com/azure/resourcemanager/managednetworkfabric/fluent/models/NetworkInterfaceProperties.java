// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.InterfaceType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;

/**
 * Network Interface Properties defines the properties of the resource.
 */
@Fluent
public final class NetworkInterfaceProperties extends AnnotationResource {
    /*
     * Physical Identifier of the network interface.
     */
    private String physicalIdentifier;

    /*
     * The ARM resource id of the interface or compute server its connected to.
     */
    private String connectedTo;

    /*
     * The Interface Type. Example: Management/Data
     */
    private InterfaceType interfaceType;

    /*
     * IPv4Address of the interface.
     */
    private String ipv4Address;

    /*
     * IPv6Address of the interface.
     */
    private String ipv6Address;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Administrative state of the resource.
     */
    private AdministrativeState administrativeState;

    /**
     * Creates an instance of NetworkInterfaceProperties class.
     */
    public NetworkInterfaceProperties() {
    }

    /**
     * Get the physicalIdentifier property: Physical Identifier of the network interface.
     * 
     * @return the physicalIdentifier value.
     */
    public String physicalIdentifier() {
        return this.physicalIdentifier;
    }

    /**
     * Get the connectedTo property: The ARM resource id of the interface or compute server its connected to.
     * 
     * @return the connectedTo value.
     */
    public String connectedTo() {
        return this.connectedTo;
    }

    /**
     * Get the interfaceType property: The Interface Type. Example: Management/Data.
     * 
     * @return the interfaceType value.
     */
    public InterfaceType interfaceType() {
        return this.interfaceType;
    }

    /**
     * Get the ipv4Address property: IPv4Address of the interface.
     * 
     * @return the ipv4Address value.
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }

    /**
     * Get the ipv6Address property: IPv6Address of the interface.
     * 
     * @return the ipv6Address value.
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     * 
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.administrativeState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkInterfaceProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInterfaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInterfaceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkInterfaceProperties.
     */
    public static NetworkInterfaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInterfaceProperties deserializedNetworkInterfaceProperties = new NetworkInterfaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.withAnnotation(reader.getString());
                } else if ("physicalIdentifier".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.physicalIdentifier = reader.getString();
                } else if ("connectedTo".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.connectedTo = reader.getString();
                } else if ("interfaceType".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.interfaceType = InterfaceType.fromString(reader.getString());
                } else if ("ipv4Address".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.ipv4Address = reader.getString();
                } else if ("ipv6Address".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.ipv6Address = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("administrativeState".equals(fieldName)) {
                    deserializedNetworkInterfaceProperties.administrativeState
                        = AdministrativeState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInterfaceProperties;
        });
    }
}
