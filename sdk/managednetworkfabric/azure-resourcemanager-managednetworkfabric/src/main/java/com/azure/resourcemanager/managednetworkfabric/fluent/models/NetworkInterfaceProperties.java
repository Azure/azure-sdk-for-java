// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.EnabledDisabledState;
import com.azure.resourcemanager.managednetworkfabric.models.InterfaceType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** NetworkInterfaceProperties define the resource properties. */
@Fluent
public final class NetworkInterfaceProperties extends AnnotationResource {
    /*
     * physicalIdentifier of the network interface.
     */
    @JsonProperty(value = "physicalIdentifier", access = JsonProperty.Access.WRITE_ONLY)
    private String physicalIdentifier;

    /*
     * administrativeState of the network interface. Example: Enabled | Disabled.
     */
    @JsonProperty(value = "administrativeState", access = JsonProperty.Access.WRITE_ONLY)
    private EnabledDisabledState administrativeState;

    /*
     * Gets the provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The arm resource id of the interface or compute server its connected to.
     */
    @JsonProperty(value = "connectedTo", access = JsonProperty.Access.WRITE_ONLY)
    private String connectedTo;

    /*
     * The Interface Type. Example: Management/Data
     */
    @JsonProperty(value = "interfaceType", access = JsonProperty.Access.WRITE_ONLY)
    private InterfaceType interfaceType;

    /*
     * ipv4Address.
     */
    @JsonProperty(value = "ipv4Address", access = JsonProperty.Access.WRITE_ONLY)
    private String ipv4Address;

    /*
     * ipv6Address.
     */
    @JsonProperty(value = "ipv6Address", access = JsonProperty.Access.WRITE_ONLY)
    private String ipv6Address;

    /** Creates an instance of NetworkInterfaceProperties class. */
    public NetworkInterfaceProperties() {
    }

    /**
     * Get the physicalIdentifier property: physicalIdentifier of the network interface.
     *
     * @return the physicalIdentifier value.
     */
    public String physicalIdentifier() {
        return this.physicalIdentifier;
    }

    /**
     * Get the administrativeState property: administrativeState of the network interface. Example: Enabled | Disabled.
     *
     * @return the administrativeState value.
     */
    public EnabledDisabledState administrativeState() {
        return this.administrativeState;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the connectedTo property: The arm resource id of the interface or compute server its connected to.
     *
     * @return the connectedTo value.
     */
    public String connectedTo() {
        return this.connectedTo;
    }

    /**
     * Get the interfaceType property: The Interface Type. Example: Management/Data.
     *
     * @return the interfaceType value.
     */
    public InterfaceType interfaceType() {
        return this.interfaceType;
    }

    /**
     * Get the ipv4Address property: ipv4Address.
     *
     * @return the ipv4Address value.
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }

    /**
     * Get the ipv6Address property: ipv6Address.
     *
     * @return the ipv6Address value.
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkInterfaceProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
