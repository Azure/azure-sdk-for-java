// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForDeviceUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForStateUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapInner;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapPatch;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;

/** An instance of this class provides access to all the operations defined in NetworkTapsClient. */
public interface NetworkTapsClient {
    /**
     * Create Network Tap.
     *
     * <p>Creates a Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapInner>, NetworkTapInner> beginCreate(
        String resourceGroupName, String networkTapName, NetworkTapInner body);

    /**
     * Create Network Tap.
     *
     * <p>Creates a Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapInner>, NetworkTapInner> beginCreate(
        String resourceGroupName, String networkTapName, NetworkTapInner body, Context context);

    /**
     * Create Network Tap.
     *
     * <p>Creates a Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapInner create(String resourceGroupName, String networkTapName, NetworkTapInner body);

    /**
     * Create Network Tap.
     *
     * <p>Creates a Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapInner create(String resourceGroupName, String networkTapName, NetworkTapInner body, Context context);

    /**
     * Gets a Network Tap.
     *
     * <p>Retrieves details of this Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NetworkTapInner> getByResourceGroupWithResponse(
        String resourceGroupName, String networkTapName, Context context);

    /**
     * Gets a Network Tap.
     *
     * <p>Retrieves details of this Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapInner getByResourceGroup(String resourceGroupName, String networkTapName);

    /**
     * Updates the Network Taps.
     *
     * <p>API to update certain properties of the Network Tap resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Network Tap properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapInner>, NetworkTapInner> beginUpdate(
        String resourceGroupName, String networkTapName, NetworkTapPatch body);

    /**
     * Updates the Network Taps.
     *
     * <p>API to update certain properties of the Network Tap resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Network Tap properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapInner>, NetworkTapInner> beginUpdate(
        String resourceGroupName, String networkTapName, NetworkTapPatch body, Context context);

    /**
     * Updates the Network Taps.
     *
     * <p>API to update certain properties of the Network Tap resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Network Tap properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapInner update(String resourceGroupName, String networkTapName, NetworkTapPatch body);

    /**
     * Updates the Network Taps.
     *
     * <p>API to update certain properties of the Network Tap resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Network Tap properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Network Tap resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapInner update(String resourceGroupName, String networkTapName, NetworkTapPatch body, Context context);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkTapName);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkTapName, Context context);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkTapName);

    /**
     * Deletes a Network Tap.
     *
     * <p>Deletes Network Tap.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkTapName, Context context);

    /**
     * List Network Taps by resource group.
     *
     * <p>Displays Network Taps list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Network Taps by resource group.
     *
     * <p>Displays Network Taps list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List Network Taps by subscription.
     *
     * <p>Displays Network Taps list by subscription GET method.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapInner> list();

    /**
     * List Network Taps by subscription.
     *
     * <p>Displays Network Taps list by subscription GET method.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTaps as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapInner> list(Context context);

    /**
     * Updates administrative state of Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for device updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForDeviceUpdateInner>, CommonPostActionResponseForDeviceUpdateInner>
        beginUpdateAdministrativeState(String resourceGroupName, String networkTapName, UpdateAdministrativeState body);

    /**
     * Updates administrative state of Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for device updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForDeviceUpdateInner>, CommonPostActionResponseForDeviceUpdateInner>
        beginUpdateAdministrativeState(
            String resourceGroupName, String networkTapName, UpdateAdministrativeState body, Context context);

    /**
     * Updates administrative state of Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for device updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForDeviceUpdateInner updateAdministrativeState(
        String resourceGroupName, String networkTapName, UpdateAdministrativeState body);

    /**
     * Updates administrative state of Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for device updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForDeviceUpdateInner updateAdministrativeState(
        String resourceGroupName, String networkTapName, UpdateAdministrativeState body, Context context);

    /**
     * Resync operation on the Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginResync(String resourceGroupName, String networkTapName);

    /**
     * Resync operation on the Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginResync(String resourceGroupName, String networkTapName, Context context);

    /**
     * Resync operation on the Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner resync(String resourceGroupName, String networkTapName);

    /**
     * Resync operation on the Network Tap.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapName Name of the Network Tap.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner resync(
        String resourceGroupName, String networkTapName, Context context);
}
