// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ExternalNetwork patchable properties.
 */
@Fluent
public class ExternalNetworkPatchableProperties implements JsonSerializable<ExternalNetworkPatchableProperties> {
    /*
     * ARM Resource ID of the networkToNetworkInterconnectId of the ExternalNetwork resource.
     */
    private String networkToNetworkInterconnectId;

    /*
     * ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
     */
    private String importRoutePolicyId;

    /*
     * ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
     */
    private String exportRoutePolicyId;

    /*
     * Import Route Policy either IPv4 or IPv6.
     */
    private ImportRoutePolicy importRoutePolicy;

    /*
     * Export Route Policy either IPv4 or IPv6.
     */
    private ExportRoutePolicy exportRoutePolicy;

    /**
     * Creates an instance of ExternalNetworkPatchableProperties class.
     */
    public ExternalNetworkPatchableProperties() {
    }

    /**
     * Get the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @return the networkToNetworkInterconnectId value.
     */
    public String networkToNetworkInterconnectId() {
        return this.networkToNetworkInterconnectId;
    }

    /**
     * Set the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @param networkToNetworkInterconnectId the networkToNetworkInterconnectId value to set.
     * @return the ExternalNetworkPatchableProperties object itself.
     */
    public ExternalNetworkPatchableProperties
        withNetworkToNetworkInterconnectId(String networkToNetworkInterconnectId) {
        this.networkToNetworkInterconnectId = networkToNetworkInterconnectId;
        return this;
    }

    /**
     * Get the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the importRoutePolicyId value.
     */
    public String importRoutePolicyId() {
        return this.importRoutePolicyId;
    }

    /**
     * Set the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param importRoutePolicyId the importRoutePolicyId value to set.
     * @return the ExternalNetworkPatchableProperties object itself.
     */
    public ExternalNetworkPatchableProperties withImportRoutePolicyId(String importRoutePolicyId) {
        this.importRoutePolicyId = importRoutePolicyId;
        return this;
    }

    /**
     * Get the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the exportRoutePolicyId value.
     */
    public String exportRoutePolicyId() {
        return this.exportRoutePolicyId;
    }

    /**
     * Set the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param exportRoutePolicyId the exportRoutePolicyId value to set.
     * @return the ExternalNetworkPatchableProperties object itself.
     */
    public ExternalNetworkPatchableProperties withExportRoutePolicyId(String exportRoutePolicyId) {
        this.exportRoutePolicyId = exportRoutePolicyId;
        return this;
    }

    /**
     * Get the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @return the importRoutePolicy value.
     */
    public ImportRoutePolicy importRoutePolicy() {
        return this.importRoutePolicy;
    }

    /**
     * Set the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @param importRoutePolicy the importRoutePolicy value to set.
     * @return the ExternalNetworkPatchableProperties object itself.
     */
    public ExternalNetworkPatchableProperties withImportRoutePolicy(ImportRoutePolicy importRoutePolicy) {
        this.importRoutePolicy = importRoutePolicy;
        return this;
    }

    /**
     * Get the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @return the exportRoutePolicy value.
     */
    public ExportRoutePolicy exportRoutePolicy() {
        return this.exportRoutePolicy;
    }

    /**
     * Set the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @param exportRoutePolicy the exportRoutePolicy value to set.
     * @return the ExternalNetworkPatchableProperties object itself.
     */
    public ExternalNetworkPatchableProperties withExportRoutePolicy(ExportRoutePolicy exportRoutePolicy) {
        this.exportRoutePolicy = exportRoutePolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (importRoutePolicy() != null) {
            importRoutePolicy().validate();
        }
        if (exportRoutePolicy() != null) {
            exportRoutePolicy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("networkToNetworkInterconnectId", this.networkToNetworkInterconnectId);
        jsonWriter.writeStringField("importRoutePolicyId", this.importRoutePolicyId);
        jsonWriter.writeStringField("exportRoutePolicyId", this.exportRoutePolicyId);
        jsonWriter.writeJsonField("importRoutePolicy", this.importRoutePolicy);
        jsonWriter.writeJsonField("exportRoutePolicy", this.exportRoutePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExternalNetworkPatchableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExternalNetworkPatchableProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExternalNetworkPatchableProperties.
     */
    public static ExternalNetworkPatchableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExternalNetworkPatchableProperties deserializedExternalNetworkPatchableProperties
                = new ExternalNetworkPatchableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkToNetworkInterconnectId".equals(fieldName)) {
                    deserializedExternalNetworkPatchableProperties.networkToNetworkInterconnectId = reader.getString();
                } else if ("importRoutePolicyId".equals(fieldName)) {
                    deserializedExternalNetworkPatchableProperties.importRoutePolicyId = reader.getString();
                } else if ("exportRoutePolicyId".equals(fieldName)) {
                    deserializedExternalNetworkPatchableProperties.exportRoutePolicyId = reader.getString();
                } else if ("importRoutePolicy".equals(fieldName)) {
                    deserializedExternalNetworkPatchableProperties.importRoutePolicy
                        = ImportRoutePolicy.fromJson(reader);
                } else if ("exportRoutePolicy".equals(fieldName)) {
                    deserializedExternalNetworkPatchableProperties.exportRoutePolicy
                        = ExportRoutePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExternalNetworkPatchableProperties;
        });
    }
}
