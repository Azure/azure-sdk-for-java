// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * BGP configuration properties.
 */
@Fluent
public final class InternalNetworkPropertiesBgpConfiguration extends BgpConfiguration {
    /*
     * ASN of Network Fabric. Example: 65048.
     */
    private Long fabricAsn;

    /**
     * Creates an instance of InternalNetworkPropertiesBgpConfiguration class.
     */
    public InternalNetworkPropertiesBgpConfiguration() {
    }

    /**
     * Get the fabricAsn property: ASN of Network Fabric. Example: 65048.
     * 
     * @return the fabricAsn value.
     */
    @Override
    public Long fabricAsn() {
        return this.fabricAsn;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration withBfdConfiguration(BfdConfiguration bfdConfiguration) {
        super.withBfdConfiguration(bfdConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration
        withDefaultRouteOriginate(BooleanEnumProperty defaultRouteOriginate) {
        super.withDefaultRouteOriginate(defaultRouteOriginate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration withAllowAS(Integer allowAS) {
        super.withAllowAS(allowAS);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration withAllowASOverride(AllowASOverride allowASOverride) {
        super.withAllowASOverride(allowASOverride);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration withPeerAsn(Long peerAsn) {
        super.withPeerAsn(peerAsn);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration withIpv4ListenRangePrefixes(List<String> ipv4ListenRangePrefixes) {
        super.withIpv4ListenRangePrefixes(ipv4ListenRangePrefixes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration withIpv6ListenRangePrefixes(List<String> ipv6ListenRangePrefixes) {
        super.withIpv6ListenRangePrefixes(ipv6ListenRangePrefixes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration
        withIpv4NeighborAddress(List<NeighborAddress> ipv4NeighborAddress) {
        super.withIpv4NeighborAddress(ipv4NeighborAddress);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration
        withIpv6NeighborAddress(List<NeighborAddress> ipv6NeighborAddress) {
        super.withIpv6NeighborAddress(ipv6NeighborAddress);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InternalNetworkPropertiesBgpConfiguration withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (bfdConfiguration() != null) {
            bfdConfiguration().validate();
        }
        if (ipv4NeighborAddress() != null) {
            ipv4NeighborAddress().forEach(e -> e.validate());
        }
        if (ipv6NeighborAddress() != null) {
            ipv6NeighborAddress().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeJsonField("bfdConfiguration", bfdConfiguration());
        jsonWriter.writeStringField("defaultRouteOriginate",
            defaultRouteOriginate() == null ? null : defaultRouteOriginate().toString());
        jsonWriter.writeNumberField("allowAS", allowAS());
        jsonWriter.writeStringField("allowASOverride", allowASOverride() == null ? null : allowASOverride().toString());
        jsonWriter.writeNumberField("peerASN", peerAsn());
        jsonWriter.writeArrayField("ipv4ListenRangePrefixes", ipv4ListenRangePrefixes(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ipv6ListenRangePrefixes", ipv6ListenRangePrefixes(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ipv4NeighborAddress", ipv4NeighborAddress(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6NeighborAddress", ipv6NeighborAddress(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InternalNetworkPropertiesBgpConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InternalNetworkPropertiesBgpConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InternalNetworkPropertiesBgpConfiguration.
     */
    public static InternalNetworkPropertiesBgpConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InternalNetworkPropertiesBgpConfiguration deserializedInternalNetworkPropertiesBgpConfiguration
                = new InternalNetworkPropertiesBgpConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesBgpConfiguration.withAnnotation(reader.getString());
                } else if ("bfdConfiguration".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesBgpConfiguration
                        .withBfdConfiguration(BfdConfiguration.fromJson(reader));
                } else if ("defaultRouteOriginate".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesBgpConfiguration
                        .withDefaultRouteOriginate(BooleanEnumProperty.fromString(reader.getString()));
                } else if ("allowAS".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesBgpConfiguration
                        .withAllowAS(reader.getNullable(JsonReader::getInt));
                } else if ("allowASOverride".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesBgpConfiguration
                        .withAllowASOverride(AllowASOverride.fromString(reader.getString()));
                } else if ("fabricASN".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesBgpConfiguration.fabricAsn
                        = reader.getNullable(JsonReader::getLong);
                } else if ("peerASN".equals(fieldName)) {
                    deserializedInternalNetworkPropertiesBgpConfiguration
                        .withPeerAsn(reader.getNullable(JsonReader::getLong));
                } else if ("ipv4ListenRangePrefixes".equals(fieldName)) {
                    List<String> ipv4ListenRangePrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedInternalNetworkPropertiesBgpConfiguration
                        .withIpv4ListenRangePrefixes(ipv4ListenRangePrefixes);
                } else if ("ipv6ListenRangePrefixes".equals(fieldName)) {
                    List<String> ipv6ListenRangePrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedInternalNetworkPropertiesBgpConfiguration
                        .withIpv6ListenRangePrefixes(ipv6ListenRangePrefixes);
                } else if ("ipv4NeighborAddress".equals(fieldName)) {
                    List<NeighborAddress> ipv4NeighborAddress
                        = reader.readArray(reader1 -> NeighborAddress.fromJson(reader1));
                    deserializedInternalNetworkPropertiesBgpConfiguration.withIpv4NeighborAddress(ipv4NeighborAddress);
                } else if ("ipv6NeighborAddress".equals(fieldName)) {
                    List<NeighborAddress> ipv6NeighborAddress
                        = reader.readArray(reader1 -> NeighborAddress.fromJson(reader1));
                    deserializedInternalNetworkPropertiesBgpConfiguration.withIpv6NeighborAddress(ipv6NeighborAddress);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInternalNetworkPropertiesBgpConfiguration;
        });
    }
}
