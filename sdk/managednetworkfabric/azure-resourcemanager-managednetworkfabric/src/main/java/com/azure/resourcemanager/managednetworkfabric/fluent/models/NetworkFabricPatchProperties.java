// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.ManagementNetworkConfigurationPatchableProperties;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkFabricPatchablePropertiesTerminalServerConfiguration;
import java.io.IOException;

/**
 * Network Fabric Patch properties.
 */
@Fluent
public final class NetworkFabricPatchProperties extends AnnotationResource {
    /*
     * Number of compute racks associated to Network Fabric.
     */
    private Integer rackCount;

    /*
     * Number of servers.Possible values are from 1-16.
     */
    private Integer serverCountPerRack;

    /*
     * IPv4Prefix for Management Network. Example: 10.1.0.0/19.
     */
    private String ipv4Prefix;

    /*
     * IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
     */
    private String ipv6Prefix;

    /*
     * ASN of CE devices for CE/PE connectivity.
     */
    private Long fabricAsn;

    /*
     * Network and credentials configuration already applied to terminal server.
     */
    private NetworkFabricPatchablePropertiesTerminalServerConfiguration terminalServerConfiguration;

    /*
     * Configuration to be used to setup the management network.
     */
    private ManagementNetworkConfigurationPatchableProperties managementNetworkConfiguration;

    /**
     * Creates an instance of NetworkFabricPatchProperties class.
     */
    public NetworkFabricPatchProperties() {
    }

    /**
     * Get the rackCount property: Number of compute racks associated to Network Fabric.
     * 
     * @return the rackCount value.
     */
    public Integer rackCount() {
        return this.rackCount;
    }

    /**
     * Set the rackCount property: Number of compute racks associated to Network Fabric.
     * 
     * @param rackCount the rackCount value to set.
     * @return the NetworkFabricPatchProperties object itself.
     */
    public NetworkFabricPatchProperties withRackCount(Integer rackCount) {
        this.rackCount = rackCount;
        return this;
    }

    /**
     * Get the serverCountPerRack property: Number of servers.Possible values are from 1-16.
     * 
     * @return the serverCountPerRack value.
     */
    public Integer serverCountPerRack() {
        return this.serverCountPerRack;
    }

    /**
     * Set the serverCountPerRack property: Number of servers.Possible values are from 1-16.
     * 
     * @param serverCountPerRack the serverCountPerRack value to set.
     * @return the NetworkFabricPatchProperties object itself.
     */
    public NetworkFabricPatchProperties withServerCountPerRack(Integer serverCountPerRack) {
        this.serverCountPerRack = serverCountPerRack;
        return this;
    }

    /**
     * Get the ipv4Prefix property: IPv4Prefix for Management Network. Example: 10.1.0.0/19.
     * 
     * @return the ipv4Prefix value.
     */
    public String ipv4Prefix() {
        return this.ipv4Prefix;
    }

    /**
     * Set the ipv4Prefix property: IPv4Prefix for Management Network. Example: 10.1.0.0/19.
     * 
     * @param ipv4Prefix the ipv4Prefix value to set.
     * @return the NetworkFabricPatchProperties object itself.
     */
    public NetworkFabricPatchProperties withIpv4Prefix(String ipv4Prefix) {
        this.ipv4Prefix = ipv4Prefix;
        return this;
    }

    /**
     * Get the ipv6Prefix property: IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
     * 
     * @return the ipv6Prefix value.
     */
    public String ipv6Prefix() {
        return this.ipv6Prefix;
    }

    /**
     * Set the ipv6Prefix property: IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
     * 
     * @param ipv6Prefix the ipv6Prefix value to set.
     * @return the NetworkFabricPatchProperties object itself.
     */
    public NetworkFabricPatchProperties withIpv6Prefix(String ipv6Prefix) {
        this.ipv6Prefix = ipv6Prefix;
        return this;
    }

    /**
     * Get the fabricAsn property: ASN of CE devices for CE/PE connectivity.
     * 
     * @return the fabricAsn value.
     */
    public Long fabricAsn() {
        return this.fabricAsn;
    }

    /**
     * Set the fabricAsn property: ASN of CE devices for CE/PE connectivity.
     * 
     * @param fabricAsn the fabricAsn value to set.
     * @return the NetworkFabricPatchProperties object itself.
     */
    public NetworkFabricPatchProperties withFabricAsn(Long fabricAsn) {
        this.fabricAsn = fabricAsn;
        return this;
    }

    /**
     * Get the terminalServerConfiguration property: Network and credentials configuration already applied to terminal
     * server.
     * 
     * @return the terminalServerConfiguration value.
     */
    public NetworkFabricPatchablePropertiesTerminalServerConfiguration terminalServerConfiguration() {
        return this.terminalServerConfiguration;
    }

    /**
     * Set the terminalServerConfiguration property: Network and credentials configuration already applied to terminal
     * server.
     * 
     * @param terminalServerConfiguration the terminalServerConfiguration value to set.
     * @return the NetworkFabricPatchProperties object itself.
     */
    public NetworkFabricPatchProperties withTerminalServerConfiguration(
        NetworkFabricPatchablePropertiesTerminalServerConfiguration terminalServerConfiguration) {
        this.terminalServerConfiguration = terminalServerConfiguration;
        return this;
    }

    /**
     * Get the managementNetworkConfiguration property: Configuration to be used to setup the management network.
     * 
     * @return the managementNetworkConfiguration value.
     */
    public ManagementNetworkConfigurationPatchableProperties managementNetworkConfiguration() {
        return this.managementNetworkConfiguration;
    }

    /**
     * Set the managementNetworkConfiguration property: Configuration to be used to setup the management network.
     * 
     * @param managementNetworkConfiguration the managementNetworkConfiguration value to set.
     * @return the NetworkFabricPatchProperties object itself.
     */
    public NetworkFabricPatchProperties withManagementNetworkConfiguration(
        ManagementNetworkConfigurationPatchableProperties managementNetworkConfiguration) {
        this.managementNetworkConfiguration = managementNetworkConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFabricPatchProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (terminalServerConfiguration() != null) {
            terminalServerConfiguration().validate();
        }
        if (managementNetworkConfiguration() != null) {
            managementNetworkConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeNumberField("rackCount", this.rackCount);
        jsonWriter.writeNumberField("serverCountPerRack", this.serverCountPerRack);
        jsonWriter.writeStringField("ipv4Prefix", this.ipv4Prefix);
        jsonWriter.writeStringField("ipv6Prefix", this.ipv6Prefix);
        jsonWriter.writeNumberField("fabricASN", this.fabricAsn);
        jsonWriter.writeJsonField("terminalServerConfiguration", this.terminalServerConfiguration);
        jsonWriter.writeJsonField("managementNetworkConfiguration", this.managementNetworkConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkFabricPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkFabricPatchProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkFabricPatchProperties.
     */
    public static NetworkFabricPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkFabricPatchProperties deserializedNetworkFabricPatchProperties = new NetworkFabricPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.withAnnotation(reader.getString());
                } else if ("rackCount".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.rackCount = reader.getNullable(JsonReader::getInt);
                } else if ("serverCountPerRack".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.serverCountPerRack
                        = reader.getNullable(JsonReader::getInt);
                } else if ("ipv4Prefix".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.ipv4Prefix = reader.getString();
                } else if ("ipv6Prefix".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.ipv6Prefix = reader.getString();
                } else if ("fabricASN".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.fabricAsn = reader.getNullable(JsonReader::getLong);
                } else if ("terminalServerConfiguration".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.terminalServerConfiguration
                        = NetworkFabricPatchablePropertiesTerminalServerConfiguration.fromJson(reader);
                } else if ("managementNetworkConfiguration".equals(fieldName)) {
                    deserializedNetworkFabricPatchProperties.managementNetworkConfiguration
                        = ManagementNetworkConfigurationPatchableProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkFabricPatchProperties;
        });
    }
}
