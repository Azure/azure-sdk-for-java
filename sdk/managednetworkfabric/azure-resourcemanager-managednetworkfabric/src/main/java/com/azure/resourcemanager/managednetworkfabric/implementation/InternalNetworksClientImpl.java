// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managednetworkfabric.fluent.InternalNetworksClient;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForStateUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternalNetworkInner;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworkPatch;
import com.azure.resourcemanager.managednetworkfabric.models.InternalNetworksList;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in InternalNetworksClient. */
public final class InternalNetworksClientImpl implements InternalNetworksClient {
    /** The proxy service used to perform REST calls. */
    private final InternalNetworksService service;

    /** The service client containing this operation class. */
    private final AzureNetworkFabricManagementServiceApiImpl client;

    /**
     * Initializes an instance of InternalNetworksClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    InternalNetworksClientImpl(AzureNetworkFabricManagementServiceApiImpl client) {
        this.service =
            RestProxy.create(InternalNetworksService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureNetworkFabricManagementServiceApiInternalNetworks to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureNetworkFabricMa")
    public interface InternalNetworksService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @PathParam("internalNetworkName") String internalNetworkName,
            @BodyParam("application/json") InternalNetworkInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InternalNetworkInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @PathParam("internalNetworkName") String internalNetworkName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @PathParam("internalNetworkName") String internalNetworkName,
            @BodyParam("application/json") InternalNetworkPatch body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @PathParam("internalNetworkName") String internalNetworkName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InternalNetworksList>> listByL3IsolationDomain(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}/updateAdministrativeState")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateAdministrativeState(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @PathParam("internalNetworkName") String internalNetworkName,
            @BodyParam("application/json") UpdateAdministrativeState body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}/updateBgpAdministrativeState")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateBgpAdministrativeState(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @PathParam("internalNetworkName") String internalNetworkName,
            @BodyParam("application/json") UpdateAdministrativeState body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}/updateStaticRouteBfdAdministrativeState")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateStaticRouteBfdAdministrativeState(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("l3IsolationDomainName") String l3IsolationDomainName,
            @PathParam("internalNetworkName") String internalNetworkName,
            @BodyParam("application/json") UpdateAdministrativeState body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InternalNetworksList>> listByL3IsolationDomainNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            internalNetworkName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                internalNetworkName,
                body,
                accept,
                context);
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InternalNetworkInner>, InternalNetworkInner> beginCreateAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body);
        return this
            .client
            .<InternalNetworkInner, InternalNetworkInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                InternalNetworkInner.class,
                InternalNetworkInner.class,
                this.client.getContext());
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InternalNetworkInner>, InternalNetworkInner> beginCreateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkInner body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context);
        return this
            .client
            .<InternalNetworkInner, InternalNetworkInner>getLroResult(
                mono, this.client.getHttpPipeline(), InternalNetworkInner.class, InternalNetworkInner.class, context);
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InternalNetworkInner>, InternalNetworkInner> beginCreate(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkInner body) {
        return this
            .beginCreateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .getSyncPoller();
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InternalNetworkInner>, InternalNetworkInner> beginCreate(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkInner body,
        Context context) {
        return this
            .beginCreateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .getSyncPoller();
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InternalNetworkInner> createAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkInner body) {
        return beginCreateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InternalNetworkInner> createAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkInner body,
        Context context) {
        return beginCreateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InternalNetworkInner create(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkInner body) {
        return createAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body).block();
    }

    /**
     * Creates InternalNetwork for Layer3 Isolation Domain for communication of compute within and across racks.
     *
     * <p>Creates InternalNetwork PUT method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InternalNetworkInner create(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkInner body,
        Context context) {
        return createAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context).block();
    }

    /**
     * Retrieves details of InternalNetworks using GET method.
     *
     * <p>Gets a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InternalNetworks along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InternalNetworkInner>> getWithResponseAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            internalNetworkName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves details of InternalNetworks using GET method.
     *
     * <p>Gets a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InternalNetworks along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InternalNetworkInner>> getWithResponseAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                internalNetworkName,
                accept,
                context);
    }

    /**
     * Retrieves details of InternalNetworks using GET method.
     *
     * <p>Gets a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InternalNetworks on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InternalNetworkInner> getAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        return getWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves details of InternalNetworks using GET method.
     *
     * <p>Gets a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InternalNetworks along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InternalNetworkInner> getWithResponse(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, Context context) {
        return getWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, context).block();
    }

    /**
     * Retrieves details of InternalNetworks using GET method.
     *
     * <p>Gets a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InternalNetworks.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InternalNetworkInner get(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        return getWithResponse(resourceGroupName, l3IsolationDomainName, internalNetworkName, Context.NONE).getValue();
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkPatch body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            internalNetworkName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkPatch body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                internalNetworkName,
                body,
                accept,
                context);
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InternalNetworkInner>, InternalNetworkInner> beginUpdateAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkPatch body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body);
        return this
            .client
            .<InternalNetworkInner, InternalNetworkInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                InternalNetworkInner.class,
                InternalNetworkInner.class,
                this.client.getContext());
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InternalNetworkInner>, InternalNetworkInner> beginUpdateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkPatch body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context);
        return this
            .client
            .<InternalNetworkInner, InternalNetworkInner>getLroResult(
                mono, this.client.getHttpPipeline(), InternalNetworkInner.class, InternalNetworkInner.class, context);
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InternalNetworkInner>, InternalNetworkInner> beginUpdate(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkPatch body) {
        return this
            .beginUpdateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .getSyncPoller();
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InternalNetworkInner>, InternalNetworkInner> beginUpdate(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkPatch body,
        Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .getSyncPoller();
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InternalNetworkInner> updateAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkPatch body) {
        return beginUpdateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InternalNetworkInner> updateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkPatch body,
        Context context) {
        return beginUpdateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InternalNetworkInner update(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, InternalNetworkPatch body) {
        return updateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body).block();
    }

    /**
     * API to update certain properties of the InternalNetworks resources.
     *
     * <p>Updates a InternalNetworks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body InternalNetwork properties to update. Only annotations are supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the Internal Network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InternalNetworkInner update(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        InternalNetworkPatch body,
        Context context) {
        return updateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context).block();
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            internalNetworkName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                internalNetworkName,
                accept,
                context);
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        return this.beginDeleteAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName).getSyncPoller();
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, Context context) {
        return this
            .beginDeleteAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, context)
            .getSyncPoller();
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        return beginDeleteAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, Context context) {
        return beginDeleteAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String l3IsolationDomainName, String internalNetworkName) {
        deleteAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName).block();
    }

    /**
     * Deletes a InternalNetworks.
     *
     * <p>Implements InternalNetworks DELETE method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String l3IsolationDomainName, String internalNetworkName, Context context) {
        deleteAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, context).block();
    }

    /**
     * Executes list operation to display list of all internal networks
     *
     * <p>Displays InternalNetworks list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InternalNetworkInner>> listByL3IsolationDomainSinglePageAsync(
        String resourceGroupName, String l3IsolationDomainName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByL3IsolationDomain(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            accept,
                            context))
            .<PagedResponse<InternalNetworkInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Executes list operation to display list of all internal networks
     *
     * <p>Displays InternalNetworks list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InternalNetworkInner>> listByL3IsolationDomainSinglePageAsync(
        String resourceGroupName, String l3IsolationDomainName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByL3IsolationDomain(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Executes list operation to display list of all internal networks
     *
     * <p>Displays InternalNetworks list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InternalNetworkInner> listByL3IsolationDomainAsync(
        String resourceGroupName, String l3IsolationDomainName) {
        return new PagedFlux<>(
            () -> listByL3IsolationDomainSinglePageAsync(resourceGroupName, l3IsolationDomainName),
            nextLink -> listByL3IsolationDomainNextSinglePageAsync(nextLink));
    }

    /**
     * Executes list operation to display list of all internal networks
     *
     * <p>Displays InternalNetworks list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InternalNetworkInner> listByL3IsolationDomainAsync(
        String resourceGroupName, String l3IsolationDomainName, Context context) {
        return new PagedFlux<>(
            () -> listByL3IsolationDomainSinglePageAsync(resourceGroupName, l3IsolationDomainName, context),
            nextLink -> listByL3IsolationDomainNextSinglePageAsync(nextLink, context));
    }

    /**
     * Executes list operation to display list of all internal networks
     *
     * <p>Displays InternalNetworks list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InternalNetworkInner> listByL3IsolationDomain(
        String resourceGroupName, String l3IsolationDomainName) {
        return new PagedIterable<>(listByL3IsolationDomainAsync(resourceGroupName, l3IsolationDomainName));
    }

    /**
     * Executes list operation to display list of all internal networks
     *
     * <p>Displays InternalNetworks list by resource group GET method.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InternalNetworkInner> listByL3IsolationDomain(
        String resourceGroupName, String l3IsolationDomainName, Context context) {
        return new PagedIterable<>(listByL3IsolationDomainAsync(resourceGroupName, l3IsolationDomainName, context));
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateAdministrativeStateWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateAdministrativeState(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            internalNetworkName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateAdministrativeStateWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateAdministrativeState(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                internalNetworkName,
                body,
                accept,
                context);
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeStateAsync(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateAdministrativeStateWithResponseAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body);
        return this
            .client
            .<CommonPostActionResponseForStateUpdateInner, CommonPostActionResponseForStateUpdateInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CommonPostActionResponseForStateUpdateInner.class,
                CommonPostActionResponseForStateUpdateInner.class,
                this.client.getContext());
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeStateAsync(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateAdministrativeStateWithResponseAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context);
        return this
            .client
            .<CommonPostActionResponseForStateUpdateInner, CommonPostActionResponseForStateUpdateInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CommonPostActionResponseForStateUpdateInner.class,
                CommonPostActionResponseForStateUpdateInner.class,
                context);
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeState(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body) {
        return this
            .beginUpdateAdministrativeStateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .getSyncPoller();
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeState(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body,
            Context context) {
        return this
            .beginUpdateAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .getSyncPoller();
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonPostActionResponseForStateUpdateInner> updateAdministrativeStateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        return beginUpdateAdministrativeStateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonPostActionResponseForStateUpdateInner> updateAdministrativeStateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        return beginUpdateAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonPostActionResponseForStateUpdateInner updateAdministrativeState(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        return updateAdministrativeStateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .block();
    }

    /**
     * Executes the operation to the underlying resources.
     *
     * <p>Update Administrative state of InternalNetworks on resources referred by their resource ids.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonPostActionResponseForStateUpdateInner updateAdministrativeState(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        return updateAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .block();
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateBgpAdministrativeStateWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateBgpAdministrativeState(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            internalNetworkName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateBgpAdministrativeStateWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateBgpAdministrativeState(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                internalNetworkName,
                body,
                accept,
                context);
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateBgpAdministrativeStateAsync(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateBgpAdministrativeStateWithResponseAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body);
        return this
            .client
            .<CommonPostActionResponseForStateUpdateInner, CommonPostActionResponseForStateUpdateInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CommonPostActionResponseForStateUpdateInner.class,
                CommonPostActionResponseForStateUpdateInner.class,
                this.client.getContext());
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateBgpAdministrativeStateAsync(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateBgpAdministrativeStateWithResponseAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context);
        return this
            .client
            .<CommonPostActionResponseForStateUpdateInner, CommonPostActionResponseForStateUpdateInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CommonPostActionResponseForStateUpdateInner.class,
                CommonPostActionResponseForStateUpdateInner.class,
                context);
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateBgpAdministrativeState(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body) {
        return this
            .beginUpdateBgpAdministrativeStateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .getSyncPoller();
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateBgpAdministrativeState(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body,
            Context context) {
        return this
            .beginUpdateBgpAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .getSyncPoller();
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonPostActionResponseForStateUpdateInner> updateBgpAdministrativeStateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        return beginUpdateBgpAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonPostActionResponseForStateUpdateInner> updateBgpAdministrativeStateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        return beginUpdateBgpAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonPostActionResponseForStateUpdateInner updateBgpAdministrativeState(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        return updateBgpAdministrativeStateAsync(resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .block();
    }

    /**
     * Executes the operation to the underlying resources for updating BGP state on edge devices.
     *
     * <p>Update BGP state for internalNetwork. Allowed only on edge devices.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonPostActionResponseForStateUpdateInner updateBgpAdministrativeState(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        return updateBgpAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .block();
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStaticRouteBfdAdministrativeStateWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateStaticRouteBfdAdministrativeState(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            l3IsolationDomainName,
                            internalNetworkName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStaticRouteBfdAdministrativeStateWithResponseAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (l3IsolationDomainName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter l3IsolationDomainName is required and cannot be null."));
        }
        if (internalNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter internalNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateStaticRouteBfdAdministrativeState(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                l3IsolationDomainName,
                internalNetworkName,
                body,
                accept,
                context);
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateStaticRouteBfdAdministrativeStateAsync(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateStaticRouteBfdAdministrativeStateWithResponseAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body);
        return this
            .client
            .<CommonPostActionResponseForStateUpdateInner, CommonPostActionResponseForStateUpdateInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CommonPostActionResponseForStateUpdateInner.class,
                CommonPostActionResponseForStateUpdateInner.class,
                this.client.getContext());
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateStaticRouteBfdAdministrativeStateAsync(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateStaticRouteBfdAdministrativeStateWithResponseAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context);
        return this
            .client
            .<CommonPostActionResponseForStateUpdateInner, CommonPostActionResponseForStateUpdateInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CommonPostActionResponseForStateUpdateInner.class,
                CommonPostActionResponseForStateUpdateInner.class,
                context);
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateStaticRouteBfdAdministrativeState(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body) {
        return this
            .beginUpdateStaticRouteBfdAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .getSyncPoller();
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateStaticRouteBfdAdministrativeState(
            String resourceGroupName,
            String l3IsolationDomainName,
            String internalNetworkName,
            UpdateAdministrativeState body,
            Context context) {
        return this
            .beginUpdateStaticRouteBfdAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .getSyncPoller();
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonPostActionResponseForStateUpdateInner> updateStaticRouteBfdAdministrativeStateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        return beginUpdateStaticRouteBfdAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonPostActionResponseForStateUpdateInner> updateStaticRouteBfdAdministrativeStateAsync(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        return beginUpdateStaticRouteBfdAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonPostActionResponseForStateUpdateInner updateStaticRouteBfdAdministrativeState(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body) {
        return updateStaticRouteBfdAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body)
            .block();
    }

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Update Static Route BFD administrative state for internalNetwork.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l3IsolationDomainName Name of the L3 Isolation Domain.
     * @param internalNetworkName Name of the Internal Network.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonPostActionResponseForStateUpdateInner updateStaticRouteBfdAdministrativeState(
        String resourceGroupName,
        String l3IsolationDomainName,
        String internalNetworkName,
        UpdateAdministrativeState body,
        Context context) {
        return updateStaticRouteBfdAdministrativeStateAsync(
                resourceGroupName, l3IsolationDomainName, internalNetworkName, body, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InternalNetworkInner>> listByL3IsolationDomainNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByL3IsolationDomainNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<InternalNetworkInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Internal Networks along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InternalNetworkInner>> listByL3IsolationDomainNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByL3IsolationDomainNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
