// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Port condition that needs to be matched. */
@Fluent
public class PortCondition {
    /*
     * Port type that needs to be matched.
     */
    @JsonProperty(value = "portType")
    private PortType portType;

    /*
     * Layer4 protocol type that needs to be matched.
     */
    @JsonProperty(value = "layer4Protocol", required = true)
    private Layer4Protocol layer4Protocol;

    /*
     * List of the Ports that need to be matched.
     */
    @JsonProperty(value = "ports")
    private List<String> ports;

    /*
     * List of the port Group Names that to be matched.
     */
    @JsonProperty(value = "portGroupNames")
    private List<String> portGroupNames;

    /** Creates an instance of PortCondition class. */
    public PortCondition() {
    }

    /**
     * Get the portType property: Port type that needs to be matched.
     *
     * @return the portType value.
     */
    public PortType portType() {
        return this.portType;
    }

    /**
     * Set the portType property: Port type that needs to be matched.
     *
     * @param portType the portType value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withPortType(PortType portType) {
        this.portType = portType;
        return this;
    }

    /**
     * Get the layer4Protocol property: Layer4 protocol type that needs to be matched.
     *
     * @return the layer4Protocol value.
     */
    public Layer4Protocol layer4Protocol() {
        return this.layer4Protocol;
    }

    /**
     * Set the layer4Protocol property: Layer4 protocol type that needs to be matched.
     *
     * @param layer4Protocol the layer4Protocol value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withLayer4Protocol(Layer4Protocol layer4Protocol) {
        this.layer4Protocol = layer4Protocol;
        return this;
    }

    /**
     * Get the ports property: List of the Ports that need to be matched.
     *
     * @return the ports value.
     */
    public List<String> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: List of the Ports that need to be matched.
     *
     * @param ports the ports value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withPorts(List<String> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Get the portGroupNames property: List of the port Group Names that to be matched.
     *
     * @return the portGroupNames value.
     */
    public List<String> portGroupNames() {
        return this.portGroupNames;
    }

    /**
     * Set the portGroupNames property: List of the port Group Names that to be matched.
     *
     * @param portGroupNames the portGroupNames value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withPortGroupNames(List<String> portGroupNames) {
        this.portGroupNames = portGroupNames;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (layer4Protocol() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property layer4Protocol in model PortCondition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PortCondition.class);
}
