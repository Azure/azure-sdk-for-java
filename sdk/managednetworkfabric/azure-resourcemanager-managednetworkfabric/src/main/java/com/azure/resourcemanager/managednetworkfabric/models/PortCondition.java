// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Port condition that needs to be matched.
 */
@Fluent
public class PortCondition implements JsonSerializable<PortCondition> {
    /*
     * Port type that needs to be matched.
     */
    private PortType portType;

    /*
     * Layer4 protocol type that needs to be matched.
     */
    private Layer4Protocol layer4Protocol;

    /*
     * List of the Ports that need to be matched.
     */
    private List<String> ports;

    /*
     * List of the port Group Names that need to be matched.
     */
    private List<String> portGroupNames;

    /**
     * Creates an instance of PortCondition class.
     */
    public PortCondition() {
    }

    /**
     * Get the portType property: Port type that needs to be matched.
     * 
     * @return the portType value.
     */
    public PortType portType() {
        return this.portType;
    }

    /**
     * Set the portType property: Port type that needs to be matched.
     * 
     * @param portType the portType value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withPortType(PortType portType) {
        this.portType = portType;
        return this;
    }

    /**
     * Get the layer4Protocol property: Layer4 protocol type that needs to be matched.
     * 
     * @return the layer4Protocol value.
     */
    public Layer4Protocol layer4Protocol() {
        return this.layer4Protocol;
    }

    /**
     * Set the layer4Protocol property: Layer4 protocol type that needs to be matched.
     * 
     * @param layer4Protocol the layer4Protocol value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withLayer4Protocol(Layer4Protocol layer4Protocol) {
        this.layer4Protocol = layer4Protocol;
        return this;
    }

    /**
     * Get the ports property: List of the Ports that need to be matched.
     * 
     * @return the ports value.
     */
    public List<String> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: List of the Ports that need to be matched.
     * 
     * @param ports the ports value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withPorts(List<String> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Get the portGroupNames property: List of the port Group Names that need to be matched.
     * 
     * @return the portGroupNames value.
     */
    public List<String> portGroupNames() {
        return this.portGroupNames;
    }

    /**
     * Set the portGroupNames property: List of the port Group Names that need to be matched.
     * 
     * @param portGroupNames the portGroupNames value to set.
     * @return the PortCondition object itself.
     */
    public PortCondition withPortGroupNames(List<String> portGroupNames) {
        this.portGroupNames = portGroupNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (layer4Protocol() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property layer4Protocol in model PortCondition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PortCondition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("layer4Protocol",
            this.layer4Protocol == null ? null : this.layer4Protocol.toString());
        jsonWriter.writeStringField("portType", this.portType == null ? null : this.portType.toString());
        jsonWriter.writeArrayField("ports", this.ports, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("portGroupNames", this.portGroupNames,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PortCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PortCondition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PortCondition.
     */
    public static PortCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PortCondition deserializedPortCondition = new PortCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("layer4Protocol".equals(fieldName)) {
                    deserializedPortCondition.layer4Protocol = Layer4Protocol.fromString(reader.getString());
                } else if ("portType".equals(fieldName)) {
                    deserializedPortCondition.portType = PortType.fromString(reader.getString());
                } else if ("ports".equals(fieldName)) {
                    List<String> ports = reader.readArray(reader1 -> reader1.getString());
                    deserializedPortCondition.ports = ports;
                } else if ("portGroupNames".equals(fieldName)) {
                    List<String> portGroupNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedPortCondition.portGroupNames = portGroupNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPortCondition;
        });
    }
}
