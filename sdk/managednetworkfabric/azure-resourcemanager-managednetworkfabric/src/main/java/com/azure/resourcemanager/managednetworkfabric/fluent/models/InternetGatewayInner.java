// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.models.GatewayType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The Internet Gateway resource definition. */
@Fluent
public final class InternetGatewayInner extends Resource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private InternetGatewayProperties innerProperties = new InternetGatewayProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of InternetGatewayInner class. */
    public InternetGatewayInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private InternetGatewayProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public InternetGatewayInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public InternetGatewayInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the ipv4Address property: IPv4 Address of Internet Gateway.
     *
     * @return the ipv4Address value.
     */
    public String ipv4Address() {
        return this.innerProperties() == null ? null : this.innerProperties().ipv4Address();
    }

    /**
     * Get the port property: Port number of Internet Gateway.
     *
     * @return the port value.
     */
    public Integer port() {
        return this.innerProperties() == null ? null : this.innerProperties().port();
    }

    /**
     * Get the type property: Gateway Type of the resource.
     *
     * @return the type value.
     */
    public GatewayType typePropertiesType() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: Gateway Type of the resource.
     *
     * @param type the type value to set.
     * @return the InternetGatewayInner object itself.
     */
    public InternetGatewayInner withTypePropertiesType(GatewayType type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InternetGatewayProperties();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the networkFabricControllerId property: ARM Resource ID of the Network Fabric Controller.
     *
     * @return the networkFabricControllerId value.
     */
    public String networkFabricControllerId() {
        return this.innerProperties() == null ? null : this.innerProperties().networkFabricControllerId();
    }

    /**
     * Set the networkFabricControllerId property: ARM Resource ID of the Network Fabric Controller.
     *
     * @param networkFabricControllerId the networkFabricControllerId value to set.
     * @return the InternetGatewayInner object itself.
     */
    public InternetGatewayInner withNetworkFabricControllerId(String networkFabricControllerId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InternetGatewayProperties();
        }
        this.innerProperties().withNetworkFabricControllerId(networkFabricControllerId);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the internetGatewayRuleId property: ARM Resource ID of the Internet Gateway Rule.
     *
     * @return the internetGatewayRuleId value.
     */
    public String internetGatewayRuleId() {
        return this.innerProperties() == null ? null : this.innerProperties().internetGatewayRuleId();
    }

    /**
     * Set the internetGatewayRuleId property: ARM Resource ID of the Internet Gateway Rule.
     *
     * @param internetGatewayRuleId the internetGatewayRuleId value to set.
     * @return the InternetGatewayInner object itself.
     */
    public InternetGatewayInner withInternetGatewayRuleId(String internetGatewayRuleId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InternetGatewayProperties();
        }
        this.innerProperties().withInternetGatewayRuleId(internetGatewayRuleId);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     *
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     *
     * @param annotation the annotation value to set.
     * @return the InternetGatewayInner object itself.
     */
    public InternetGatewayInner withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new InternetGatewayProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model InternetGatewayInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InternetGatewayInner.class);
}
