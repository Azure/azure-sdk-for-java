// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpPrefixPatchProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The IP Prefix patch resource definition. */
@Fluent
public final class IpPrefixPatch extends TagsUpdate {
    /*
     * IP Prefix patchable properties.
     */
    @JsonProperty(value = "properties")
    private IpPrefixPatchProperties innerProperties;

    /** Creates an instance of IpPrefixPatch class. */
    public IpPrefixPatch() {
    }

    /**
     * Get the innerProperties property: IP Prefix patchable properties.
     *
     * @return the innerProperties value.
     */
    private IpPrefixPatchProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public IpPrefixPatch withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the ipPrefixRules property: The list of IP Prefix Rules.
     *
     * @return the ipPrefixRules value.
     */
    public List<IpPrefixRule> ipPrefixRules() {
        return this.innerProperties() == null ? null : this.innerProperties().ipPrefixRules();
    }

    /**
     * Set the ipPrefixRules property: The list of IP Prefix Rules.
     *
     * @param ipPrefixRules the ipPrefixRules value to set.
     * @return the IpPrefixPatch object itself.
     */
    public IpPrefixPatch withIpPrefixRules(List<IpPrefixRule> ipPrefixRules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IpPrefixPatchProperties();
        }
        this.innerProperties().withIpPrefixRules(ipPrefixRules);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     *
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     *
     * @param annotation the annotation value to set.
     * @return the IpPrefixPatch object itself.
     */
    public IpPrefixPatch withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IpPrefixPatchProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
