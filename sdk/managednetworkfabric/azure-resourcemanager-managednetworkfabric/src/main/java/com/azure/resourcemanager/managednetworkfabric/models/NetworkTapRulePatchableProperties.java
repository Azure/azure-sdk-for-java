// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network Tap Rule updatable properties.
 */
@Fluent
public class NetworkTapRulePatchableProperties implements JsonSerializable<NetworkTapRulePatchableProperties> {
    /*
     * Input method to configure Network Tap Rule.
     */
    private ConfigurationType configurationType;

    /*
     * Network Tap Rules file URL.
     */
    private String tapRulesUrl;

    /*
     * List of match configurations.
     */
    private List<NetworkTapRuleMatchConfiguration> matchConfigurations;

    /*
     * List of dynamic match configurations.
     */
    private List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations;

    /**
     * Creates an instance of NetworkTapRulePatchableProperties class.
     */
    public NetworkTapRulePatchableProperties() {
    }

    /**
     * Get the configurationType property: Input method to configure Network Tap Rule.
     * 
     * @return the configurationType value.
     */
    public ConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Set the configurationType property: Input method to configure Network Tap Rule.
     * 
     * @param configurationType the configurationType value to set.
     * @return the NetworkTapRulePatchableProperties object itself.
     */
    public NetworkTapRulePatchableProperties withConfigurationType(ConfigurationType configurationType) {
        this.configurationType = configurationType;
        return this;
    }

    /**
     * Get the tapRulesUrl property: Network Tap Rules file URL.
     * 
     * @return the tapRulesUrl value.
     */
    public String tapRulesUrl() {
        return this.tapRulesUrl;
    }

    /**
     * Set the tapRulesUrl property: Network Tap Rules file URL.
     * 
     * @param tapRulesUrl the tapRulesUrl value to set.
     * @return the NetworkTapRulePatchableProperties object itself.
     */
    public NetworkTapRulePatchableProperties withTapRulesUrl(String tapRulesUrl) {
        this.tapRulesUrl = tapRulesUrl;
        return this;
    }

    /**
     * Get the matchConfigurations property: List of match configurations.
     * 
     * @return the matchConfigurations value.
     */
    public List<NetworkTapRuleMatchConfiguration> matchConfigurations() {
        return this.matchConfigurations;
    }

    /**
     * Set the matchConfigurations property: List of match configurations.
     * 
     * @param matchConfigurations the matchConfigurations value to set.
     * @return the NetworkTapRulePatchableProperties object itself.
     */
    public NetworkTapRulePatchableProperties
        withMatchConfigurations(List<NetworkTapRuleMatchConfiguration> matchConfigurations) {
        this.matchConfigurations = matchConfigurations;
        return this;
    }

    /**
     * Get the dynamicMatchConfigurations property: List of dynamic match configurations.
     * 
     * @return the dynamicMatchConfigurations value.
     */
    public List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations() {
        return this.dynamicMatchConfigurations;
    }

    /**
     * Set the dynamicMatchConfigurations property: List of dynamic match configurations.
     * 
     * @param dynamicMatchConfigurations the dynamicMatchConfigurations value to set.
     * @return the NetworkTapRulePatchableProperties object itself.
     */
    public NetworkTapRulePatchableProperties
        withDynamicMatchConfigurations(List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations) {
        this.dynamicMatchConfigurations = dynamicMatchConfigurations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (matchConfigurations() != null) {
            matchConfigurations().forEach(e -> e.validate());
        }
        if (dynamicMatchConfigurations() != null) {
            dynamicMatchConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        jsonWriter.writeStringField("tapRulesUrl", this.tapRulesUrl);
        jsonWriter.writeArrayField("matchConfigurations", this.matchConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dynamicMatchConfigurations", this.dynamicMatchConfigurations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkTapRulePatchableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkTapRulePatchableProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkTapRulePatchableProperties.
     */
    public static NetworkTapRulePatchableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkTapRulePatchableProperties deserializedNetworkTapRulePatchableProperties
                = new NetworkTapRulePatchableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationType".equals(fieldName)) {
                    deserializedNetworkTapRulePatchableProperties.configurationType
                        = ConfigurationType.fromString(reader.getString());
                } else if ("tapRulesUrl".equals(fieldName)) {
                    deserializedNetworkTapRulePatchableProperties.tapRulesUrl = reader.getString();
                } else if ("matchConfigurations".equals(fieldName)) {
                    List<NetworkTapRuleMatchConfiguration> matchConfigurations
                        = reader.readArray(reader1 -> NetworkTapRuleMatchConfiguration.fromJson(reader1));
                    deserializedNetworkTapRulePatchableProperties.matchConfigurations = matchConfigurations;
                } else if ("dynamicMatchConfigurations".equals(fieldName)) {
                    List<CommonDynamicMatchConfiguration> dynamicMatchConfigurations
                        = reader.readArray(reader1 -> CommonDynamicMatchConfiguration.fromJson(reader1));
                    deserializedNetworkTapRulePatchableProperties.dynamicMatchConfigurations
                        = dynamicMatchConfigurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkTapRulePatchableProperties;
        });
    }
}
