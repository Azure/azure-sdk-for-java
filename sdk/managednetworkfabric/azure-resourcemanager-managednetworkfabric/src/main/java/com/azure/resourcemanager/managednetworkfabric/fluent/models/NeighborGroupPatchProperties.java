// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.NeighborGroupDestination;
import java.io.IOException;

/**
 * Neighbor Group Patch properties.
 */
@Fluent
public final class NeighborGroupPatchProperties extends AnnotationResource {
    /*
     * An array of destination IPv4 Addresses or IPv6 Addresses.
     */
    private NeighborGroupDestination destination;

    /**
     * Creates an instance of NeighborGroupPatchProperties class.
     */
    public NeighborGroupPatchProperties() {
    }

    /**
     * Get the destination property: An array of destination IPv4 Addresses or IPv6 Addresses.
     * 
     * @return the destination value.
     */
    public NeighborGroupDestination destination() {
        return this.destination;
    }

    /**
     * Set the destination property: An array of destination IPv4 Addresses or IPv6 Addresses.
     * 
     * @param destination the destination value to set.
     * @return the NeighborGroupPatchProperties object itself.
     */
    public NeighborGroupPatchProperties withDestination(NeighborGroupDestination destination) {
        this.destination = destination;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NeighborGroupPatchProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (destination() != null) {
            destination().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeJsonField("destination", this.destination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NeighborGroupPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NeighborGroupPatchProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NeighborGroupPatchProperties.
     */
    public static NeighborGroupPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NeighborGroupPatchProperties deserializedNeighborGroupPatchProperties = new NeighborGroupPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedNeighborGroupPatchProperties.withAnnotation(reader.getString());
                } else if ("destination".equals(fieldName)) {
                    deserializedNeighborGroupPatchProperties.destination = NeighborGroupDestination.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNeighborGroupPatchProperties;
        });
    }
}
