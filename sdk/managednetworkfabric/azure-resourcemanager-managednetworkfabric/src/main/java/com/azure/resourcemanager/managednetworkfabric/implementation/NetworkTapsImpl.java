// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.fluent.NetworkTapsClient;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForDeviceUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForStateUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapInner;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForDeviceUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForStateUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTap;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTaps;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;

public final class NetworkTapsImpl implements NetworkTaps {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkTapsImpl.class);

    private final NetworkTapsClient innerClient;

    private final com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager;

    public NetworkTapsImpl(
        NetworkTapsClient innerClient,
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NetworkTap> getByResourceGroupWithResponse(
        String resourceGroupName, String networkTapName, Context context) {
        Response<NetworkTapInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, networkTapName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkTapImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkTap getByResourceGroup(String resourceGroupName, String networkTapName) {
        NetworkTapInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, networkTapName);
        if (inner != null) {
            return new NetworkTapImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String networkTapName) {
        this.serviceClient().delete(resourceGroupName, networkTapName);
    }

    public void delete(String resourceGroupName, String networkTapName, Context context) {
        this.serviceClient().delete(resourceGroupName, networkTapName, context);
    }

    public PagedIterable<NetworkTap> listByResourceGroup(String resourceGroupName) {
        PagedIterable<NetworkTapInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new NetworkTapImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkTap> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<NetworkTapInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new NetworkTapImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkTap> list() {
        PagedIterable<NetworkTapInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new NetworkTapImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkTap> list(Context context) {
        PagedIterable<NetworkTapInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new NetworkTapImpl(inner1, this.manager()));
    }

    public CommonPostActionResponseForDeviceUpdate updateAdministrativeState(
        String resourceGroupName, String networkTapName, UpdateAdministrativeState body) {
        CommonPostActionResponseForDeviceUpdateInner inner =
            this.serviceClient().updateAdministrativeState(resourceGroupName, networkTapName, body);
        if (inner != null) {
            return new CommonPostActionResponseForDeviceUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommonPostActionResponseForDeviceUpdate updateAdministrativeState(
        String resourceGroupName, String networkTapName, UpdateAdministrativeState body, Context context) {
        CommonPostActionResponseForDeviceUpdateInner inner =
            this.serviceClient().updateAdministrativeState(resourceGroupName, networkTapName, body, context);
        if (inner != null) {
            return new CommonPostActionResponseForDeviceUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommonPostActionResponseForStateUpdate resync(String resourceGroupName, String networkTapName) {
        CommonPostActionResponseForStateUpdateInner inner =
            this.serviceClient().resync(resourceGroupName, networkTapName);
        if (inner != null) {
            return new CommonPostActionResponseForStateUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommonPostActionResponseForStateUpdate resync(
        String resourceGroupName, String networkTapName, Context context) {
        CommonPostActionResponseForStateUpdateInner inner =
            this.serviceClient().resync(resourceGroupName, networkTapName, context);
        if (inner != null) {
            return new CommonPostActionResponseForStateUpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NetworkTap getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkTapName = Utils.getValueFromIdByName(id, "networkTaps");
        if (networkTapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkTaps'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, networkTapName, Context.NONE).getValue();
    }

    public Response<NetworkTap> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkTapName = Utils.getValueFromIdByName(id, "networkTaps");
        if (networkTapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkTaps'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, networkTapName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkTapName = Utils.getValueFromIdByName(id, "networkTaps");
        if (networkTapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkTaps'.", id)));
        }
        this.delete(resourceGroupName, networkTapName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkTapName = Utils.getValueFromIdByName(id, "networkTaps");
        if (networkTapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkTaps'.", id)));
        }
        this.delete(resourceGroupName, networkTapName, context);
    }

    private NetworkTapsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager() {
        return this.serviceManager;
    }

    public NetworkTapImpl define(String name) {
        return new NetworkTapImpl(name, this.manager());
    }
}
