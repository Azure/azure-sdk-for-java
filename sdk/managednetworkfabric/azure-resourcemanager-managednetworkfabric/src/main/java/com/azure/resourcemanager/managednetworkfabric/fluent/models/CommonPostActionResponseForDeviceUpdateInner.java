// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import java.io.IOException;
import java.util.List;

/**
 * Common response for device updates.
 */
@Fluent
public final class CommonPostActionResponseForDeviceUpdateInner
    implements JsonSerializable<CommonPostActionResponseForDeviceUpdateInner> {
    /*
     * Gets the configuration state.
     */
    private ConfigurationState configurationState;

    /*
     * List of ARM Resource IDs for which the given action applied successfully.
     */
    private List<String> successfulDevices;

    /*
     * List of ARM Resource IDs for which the given action failed to apply.
     */
    private List<String> failedDevices;

    /*
     * The error object.
     */
    private ManagementError error;

    /**
     * Creates an instance of CommonPostActionResponseForDeviceUpdateInner class.
     */
    public CommonPostActionResponseForDeviceUpdateInner() {
    }

    /**
     * Get the configurationState property: Gets the configuration state.
     * 
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.configurationState;
    }

    /**
     * Get the successfulDevices property: List of ARM Resource IDs for which the given action applied successfully.
     * 
     * @return the successfulDevices value.
     */
    public List<String> successfulDevices() {
        return this.successfulDevices;
    }

    /**
     * Set the successfulDevices property: List of ARM Resource IDs for which the given action applied successfully.
     * 
     * @param successfulDevices the successfulDevices value to set.
     * @return the CommonPostActionResponseForDeviceUpdateInner object itself.
     */
    public CommonPostActionResponseForDeviceUpdateInner withSuccessfulDevices(List<String> successfulDevices) {
        this.successfulDevices = successfulDevices;
        return this;
    }

    /**
     * Get the failedDevices property: List of ARM Resource IDs for which the given action failed to apply.
     * 
     * @return the failedDevices value.
     */
    public List<String> failedDevices() {
        return this.failedDevices;
    }

    /**
     * Set the failedDevices property: List of ARM Resource IDs for which the given action failed to apply.
     * 
     * @param failedDevices the failedDevices value to set.
     * @return the CommonPostActionResponseForDeviceUpdateInner object itself.
     */
    public CommonPostActionResponseForDeviceUpdateInner withFailedDevices(List<String> failedDevices) {
        this.failedDevices = failedDevices;
        return this;
    }

    /**
     * Get the error property: The error object.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: The error object.
     * 
     * @param error the error value to set.
     * @return the CommonPostActionResponseForDeviceUpdateInner object itself.
     */
    public CommonPostActionResponseForDeviceUpdateInner withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("successfulDevices", this.successfulDevices,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("failedDevices", this.failedDevices,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommonPostActionResponseForDeviceUpdateInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommonPostActionResponseForDeviceUpdateInner if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommonPostActionResponseForDeviceUpdateInner.
     */
    public static CommonPostActionResponseForDeviceUpdateInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommonPostActionResponseForDeviceUpdateInner deserializedCommonPostActionResponseForDeviceUpdateInner
                = new CommonPostActionResponseForDeviceUpdateInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationState".equals(fieldName)) {
                    deserializedCommonPostActionResponseForDeviceUpdateInner.configurationState
                        = ConfigurationState.fromString(reader.getString());
                } else if ("successfulDevices".equals(fieldName)) {
                    List<String> successfulDevices = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommonPostActionResponseForDeviceUpdateInner.successfulDevices = successfulDevices;
                } else if ("failedDevices".equals(fieldName)) {
                    List<String> failedDevices = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommonPostActionResponseForDeviceUpdateInner.failedDevices = failedDevices;
                } else if ("error".equals(fieldName)) {
                    deserializedCommonPostActionResponseForDeviceUpdateInner.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommonPostActionResponseForDeviceUpdateInner;
        });
    }
}
