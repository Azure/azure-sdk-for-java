// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Supported connector properties. */
@Fluent
public final class SupportedConnectorProperties {
    /*
     * Type of connector used. Example: Optical.
     */
    @JsonProperty(value = "connectorType")
    private String connectorType;

    /*
     * Maximum speed of the connector in Mbps.
     */
    @JsonProperty(value = "maxSpeedInMbps")
    private Integer maxSpeedInMbps;

    /** Creates an instance of SupportedConnectorProperties class. */
    public SupportedConnectorProperties() {
    }

    /**
     * Get the connectorType property: Type of connector used. Example: Optical.
     *
     * @return the connectorType value.
     */
    public String connectorType() {
        return this.connectorType;
    }

    /**
     * Set the connectorType property: Type of connector used. Example: Optical.
     *
     * @param connectorType the connectorType value to set.
     * @return the SupportedConnectorProperties object itself.
     */
    public SupportedConnectorProperties withConnectorType(String connectorType) {
        this.connectorType = connectorType;
        return this;
    }

    /**
     * Get the maxSpeedInMbps property: Maximum speed of the connector in Mbps.
     *
     * @return the maxSpeedInMbps value.
     */
    public Integer maxSpeedInMbps() {
        return this.maxSpeedInMbps;
    }

    /**
     * Set the maxSpeedInMbps property: Maximum speed of the connector in Mbps.
     *
     * @param maxSpeedInMbps the maxSpeedInMbps value to set.
     * @return the SupportedConnectorProperties object itself.
     */
    public SupportedConnectorProperties withMaxSpeedInMbps(Integer maxSpeedInMbps) {
        this.maxSpeedInMbps = maxSpeedInMbps;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
