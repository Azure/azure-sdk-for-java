// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.fluent.IpPrefixListsClient;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpPrefixListInner;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixList;
import com.azure.resourcemanager.managednetworkfabric.models.IpPrefixLists;

public final class IpPrefixListsImpl implements IpPrefixLists {
    private static final ClientLogger LOGGER = new ClientLogger(IpPrefixListsImpl.class);

    private final IpPrefixListsClient innerClient;

    private final com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager serviceManager;

    public IpPrefixListsImpl(
        IpPrefixListsClient innerClient,
        com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<IpPrefixList> getByResourceGroupWithResponse(
        String resourceGroupName, String ipPrefixListName, Context context) {
        Response<IpPrefixListInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, ipPrefixListName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IpPrefixListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IpPrefixList getByResourceGroup(String resourceGroupName, String ipPrefixListName) {
        IpPrefixListInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, ipPrefixListName);
        if (inner != null) {
            return new IpPrefixListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String ipPrefixListName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, ipPrefixListName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String ipPrefixListName) {
        this.serviceClient().delete(resourceGroupName, ipPrefixListName);
    }

    public PagedIterable<IpPrefixList> listByResourceGroup(String resourceGroupName) {
        PagedIterable<IpPrefixListInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new IpPrefixListImpl(inner1, this.manager()));
    }

    public PagedIterable<IpPrefixList> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<IpPrefixListInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new IpPrefixListImpl(inner1, this.manager()));
    }

    public PagedIterable<IpPrefixList> list() {
        PagedIterable<IpPrefixListInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new IpPrefixListImpl(inner1, this.manager()));
    }

    public PagedIterable<IpPrefixList> list(Context context) {
        PagedIterable<IpPrefixListInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new IpPrefixListImpl(inner1, this.manager()));
    }

    public IpPrefixList getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ipPrefixListName = Utils.getValueFromIdByName(id, "ipPrefixLists");
        if (ipPrefixListName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'ipPrefixLists'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, ipPrefixListName, Context.NONE).getValue();
    }

    public Response<IpPrefixList> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ipPrefixListName = Utils.getValueFromIdByName(id, "ipPrefixLists");
        if (ipPrefixListName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'ipPrefixLists'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, ipPrefixListName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ipPrefixListName = Utils.getValueFromIdByName(id, "ipPrefixLists");
        if (ipPrefixListName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'ipPrefixLists'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, ipPrefixListName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ipPrefixListName = Utils.getValueFromIdByName(id, "ipPrefixLists");
        if (ipPrefixListName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'ipPrefixLists'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, ipPrefixListName, context);
    }

    private IpPrefixListsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager manager() {
        return this.serviceManager;
    }

    public IpPrefixListImpl define(String name) {
        return new IpPrefixListImpl(name, this.manager());
    }
}
