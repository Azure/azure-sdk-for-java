// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.IpCommunityListInner;
import com.azure.resourcemanager.managednetworkfabric.models.AdvertiseBoolean;
import com.azure.resourcemanager.managednetworkfabric.models.CommunityActionType;
import com.azure.resourcemanager.managednetworkfabric.models.ExportBoolean;
import com.azure.resourcemanager.managednetworkfabric.models.GshutBoolean;
import com.azure.resourcemanager.managednetworkfabric.models.InternetBoolean;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityList;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityListPatch;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityListPatchPropertiesCommunityMembersItem;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityListPatchPropertiesEvpnEsImportRouteTargetsItem;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityListPropertiesCommunityMembersItem;
import com.azure.resourcemanager.managednetworkfabric.models.IpCommunityListPropertiesEvpnEsImportRouteTargetsItem;
import com.azure.resourcemanager.managednetworkfabric.models.LocalASBoolean;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class IpCommunityListImpl implements IpCommunityList, IpCommunityList.Definition, IpCommunityList.Update {
    private IpCommunityListInner innerObject;

    private final com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public CommunityActionType action() {
        return this.innerModel().action();
    }

    public LocalASBoolean localAS() {
        return this.innerModel().localAS();
    }

    public GshutBoolean gshut() {
        return this.innerModel().gshut();
    }

    public InternetBoolean internet() {
        return this.innerModel().internet();
    }

    public AdvertiseBoolean advertise() {
        return this.innerModel().advertise();
    }

    public ExportBoolean export() {
        return this.innerModel().export();
    }

    public List<IpCommunityListPropertiesCommunityMembersItem> communityMembers() {
        List<IpCommunityListPropertiesCommunityMembersItem> inner = this.innerModel().communityMembers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<IpCommunityListPropertiesEvpnEsImportRouteTargetsItem> evpnEsImportRouteTargets() {
        List<IpCommunityListPropertiesEvpnEsImportRouteTargetsItem> inner =
            this.innerModel().evpnEsImportRouteTargets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String annotation() {
        return this.innerModel().annotation();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public IpCommunityListInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String ipCommunityListName;

    private IpCommunityListPatch updateBody;

    public IpCommunityListImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public IpCommunityList create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIpCommunityLists()
                .createWithResponse(resourceGroupName, ipCommunityListName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IpCommunityList create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIpCommunityLists()
                .createWithResponse(resourceGroupName, ipCommunityListName, this.innerModel(), context)
                .getValue();
        return this;
    }

    IpCommunityListImpl(
        String name, com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager serviceManager) {
        this.innerObject = new IpCommunityListInner();
        this.serviceManager = serviceManager;
        this.ipCommunityListName = name;
    }

    public IpCommunityListImpl update() {
        this.updateBody = new IpCommunityListPatch();
        return this;
    }

    public IpCommunityList apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIpCommunityLists()
                .updateWithResponse(resourceGroupName, ipCommunityListName, updateBody, Context.NONE)
                .getValue();
        return this;
    }

    public IpCommunityList apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIpCommunityLists()
                .updateWithResponse(resourceGroupName, ipCommunityListName, updateBody, context)
                .getValue();
        return this;
    }

    IpCommunityListImpl(
        IpCommunityListInner innerObject,
        com.azure.resourcemanager.managednetworkfabric.ManagednetworkfabricManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.ipCommunityListName = Utils.getValueFromIdByName(innerObject.id(), "ipCommunityLists");
    }

    public IpCommunityList refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIpCommunityLists()
                .getByResourceGroupWithResponse(resourceGroupName, ipCommunityListName, Context.NONE)
                .getValue();
        return this;
    }

    public IpCommunityList refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIpCommunityLists()
                .getByResourceGroupWithResponse(resourceGroupName, ipCommunityListName, context)
                .getValue();
        return this;
    }

    public IpCommunityListImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public IpCommunityListImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public IpCommunityListImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public IpCommunityListImpl withAction(CommunityActionType action) {
        if (isInCreateMode()) {
            this.innerModel().withAction(action);
            return this;
        } else {
            this.updateBody.withAction(action);
            return this;
        }
    }

    public IpCommunityListImpl withLocalAS(LocalASBoolean localAS) {
        if (isInCreateMode()) {
            this.innerModel().withLocalAS(localAS);
            return this;
        } else {
            this.updateBody.withLocalAS(localAS);
            return this;
        }
    }

    public IpCommunityListImpl withGshut(GshutBoolean gshut) {
        this.innerModel().withGshut(gshut);
        return this;
    }

    public IpCommunityListImpl withInternet(InternetBoolean internet) {
        this.innerModel().withInternet(internet);
        return this;
    }

    public IpCommunityListImpl withAdvertise(AdvertiseBoolean advertise) {
        if (isInCreateMode()) {
            this.innerModel().withAdvertise(advertise);
            return this;
        } else {
            this.updateBody.withAdvertise(advertise);
            return this;
        }
    }

    public IpCommunityListImpl withExport(ExportBoolean export) {
        if (isInCreateMode()) {
            this.innerModel().withExport(export);
            return this;
        } else {
            this.updateBody.withExport(export);
            return this;
        }
    }

    public IpCommunityListImpl withCommunityMembers(
        List<IpCommunityListPropertiesCommunityMembersItem> communityMembers) {
        this.innerModel().withCommunityMembers(communityMembers);
        return this;
    }

    public IpCommunityListImpl withEvpnEsImportRouteTargets(
        List<IpCommunityListPropertiesEvpnEsImportRouteTargetsItem> evpnEsImportRouteTargets) {
        this.innerModel().withEvpnEsImportRouteTargets(evpnEsImportRouteTargets);
        return this;
    }

    public IpCommunityListImpl withAnnotation(String annotation) {
        if (isInCreateMode()) {
            this.innerModel().withAnnotation(annotation);
            return this;
        } else {
            this.updateBody.withAnnotation(annotation);
            return this;
        }
    }

    public IpCommunityListImpl withCommunityMembersForUpdate(
        List<IpCommunityListPatchPropertiesCommunityMembersItem> communityMembers) {
        this.updateBody.withCommunityMembers(communityMembers);
        return this;
    }

    public IpCommunityListImpl withEvpnEsImportRouteTargetsForUpdate(
        List<IpCommunityListPatchPropertiesEvpnEsImportRouteTargetsItem> evpnEsImportRouteTargets) {
        this.updateBody.withEvpnEsImportRouteTargets(evpnEsImportRouteTargets);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
