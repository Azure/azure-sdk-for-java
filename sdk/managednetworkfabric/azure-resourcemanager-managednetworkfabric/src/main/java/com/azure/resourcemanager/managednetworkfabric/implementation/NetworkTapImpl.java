// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapInner;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForDeviceUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.CommonPostActionResponseForStateUpdate;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTap;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapPatch;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapPatchableParametersDestinationsItem;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapPropertiesDestinationsItem;
import com.azure.resourcemanager.managednetworkfabric.models.PollingType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class NetworkTapImpl implements NetworkTap, NetworkTap.Definition, NetworkTap.Update {
    private NetworkTapInner innerObject;

    private final com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String networkPacketBrokerId() {
        return this.innerModel().networkPacketBrokerId();
    }

    public String sourceTapRuleId() {
        return this.innerModel().sourceTapRuleId();
    }

    public List<NetworkTapPropertiesDestinationsItem> destinations() {
        List<NetworkTapPropertiesDestinationsItem> inner = this.innerModel().destinations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public PollingType pollingType() {
        return this.innerModel().pollingType();
    }

    public ConfigurationState configurationState() {
        return this.innerModel().configurationState();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public AdministrativeState administrativeState() {
        return this.innerModel().administrativeState();
    }

    public String annotation() {
        return this.innerModel().annotation();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NetworkTapInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String networkTapName;

    private NetworkTapPatch updateBody;

    public NetworkTapImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public NetworkTap create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkTaps()
                .create(resourceGroupName, networkTapName, this.innerModel(), Context.NONE);
        return this;
    }

    public NetworkTap create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkTaps()
                .create(resourceGroupName, networkTapName, this.innerModel(), context);
        return this;
    }

    NetworkTapImpl(
        String name, com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = new NetworkTapInner();
        this.serviceManager = serviceManager;
        this.networkTapName = name;
    }

    public NetworkTapImpl update() {
        this.updateBody = new NetworkTapPatch();
        return this;
    }

    public NetworkTap apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkTaps()
                .update(resourceGroupName, networkTapName, updateBody, Context.NONE);
        return this;
    }

    public NetworkTap apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkTaps()
                .update(resourceGroupName, networkTapName, updateBody, context);
        return this;
    }

    NetworkTapImpl(
        NetworkTapInner innerObject,
        com.azure.resourcemanager.managednetworkfabric.ManagedNetworkFabricManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.networkTapName = Utils.getValueFromIdByName(innerObject.id(), "networkTaps");
    }

    public NetworkTap refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkTaps()
                .getByResourceGroupWithResponse(resourceGroupName, networkTapName, Context.NONE)
                .getValue();
        return this;
    }

    public NetworkTap refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkTaps()
                .getByResourceGroupWithResponse(resourceGroupName, networkTapName, context)
                .getValue();
        return this;
    }

    public CommonPostActionResponseForDeviceUpdate updateAdministrativeState(UpdateAdministrativeState body) {
        return serviceManager.networkTaps().updateAdministrativeState(resourceGroupName, networkTapName, body);
    }

    public CommonPostActionResponseForDeviceUpdate updateAdministrativeState(
        UpdateAdministrativeState body, Context context) {
        return serviceManager.networkTaps().updateAdministrativeState(resourceGroupName, networkTapName, body, context);
    }

    public CommonPostActionResponseForStateUpdate resync() {
        return serviceManager.networkTaps().resync(resourceGroupName, networkTapName);
    }

    public CommonPostActionResponseForStateUpdate resync(Context context) {
        return serviceManager.networkTaps().resync(resourceGroupName, networkTapName, context);
    }

    public NetworkTapImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NetworkTapImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NetworkTapImpl withNetworkPacketBrokerId(String networkPacketBrokerId) {
        this.innerModel().withNetworkPacketBrokerId(networkPacketBrokerId);
        return this;
    }

    public NetworkTapImpl withDestinations(List<NetworkTapPropertiesDestinationsItem> destinations) {
        this.innerModel().withDestinations(destinations);
        return this;
    }

    public NetworkTapImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public NetworkTapImpl withPollingType(PollingType pollingType) {
        if (isInCreateMode()) {
            this.innerModel().withPollingType(pollingType);
            return this;
        } else {
            this.updateBody.withPollingType(pollingType);
            return this;
        }
    }

    public NetworkTapImpl withAnnotation(String annotation) {
        if (isInCreateMode()) {
            this.innerModel().withAnnotation(annotation);
            return this;
        } else {
            this.updateBody.withAnnotation(annotation);
            return this;
        }
    }

    public NetworkTapImpl withDestinationsForUpdate(List<NetworkTapPatchableParametersDestinationsItem> destinations) {
        this.updateBody.withDestinations(destinations);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
