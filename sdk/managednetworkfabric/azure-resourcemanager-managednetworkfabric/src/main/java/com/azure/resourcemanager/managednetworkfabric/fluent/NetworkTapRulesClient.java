// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.CommonPostActionResponseForStateUpdateInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.NetworkTapRuleInner;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.ValidateConfigurationResponseInner;
import com.azure.resourcemanager.managednetworkfabric.models.NetworkTapRulePatch;
import com.azure.resourcemanager.managednetworkfabric.models.UpdateAdministrativeState;

/** An instance of this class provides access to all the operations defined in NetworkTapRulesClient. */
public interface NetworkTapRulesClient {
    /**
     * Create Network Tap Rule.
     *
     * <p>Create Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapRuleInner>, NetworkTapRuleInner> beginCreate(
        String resourceGroupName, String networkTapRuleName, NetworkTapRuleInner body);

    /**
     * Create Network Tap Rule.
     *
     * <p>Create Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapRuleInner>, NetworkTapRuleInner> beginCreate(
        String resourceGroupName, String networkTapRuleName, NetworkTapRuleInner body, Context context);

    /**
     * Create Network Tap Rule.
     *
     * <p>Create Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapRuleInner create(String resourceGroupName, String networkTapRuleName, NetworkTapRuleInner body);

    /**
     * Create Network Tap Rule.
     *
     * <p>Create Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapRuleInner create(
        String resourceGroupName, String networkTapRuleName, NetworkTapRuleInner body, Context context);

    /**
     * Gets a Network Tap Rule.
     *
     * <p>Get Network Tap Rule resource details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Tap Rule resource details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NetworkTapRuleInner> getByResourceGroupWithResponse(
        String resourceGroupName, String networkTapRuleName, Context context);

    /**
     * Gets a Network Tap Rule.
     *
     * <p>Get Network Tap Rule resource details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Tap Rule resource details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapRuleInner getByResourceGroup(String resourceGroupName, String networkTapRuleName);

    /**
     * Updates a Network Tap Rule.
     *
     * <p>Update certain properties of the Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Network Tap Rule properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapRuleInner>, NetworkTapRuleInner> beginUpdate(
        String resourceGroupName, String networkTapRuleName, NetworkTapRulePatch body);

    /**
     * Updates a Network Tap Rule.
     *
     * <p>Update certain properties of the Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Network Tap Rule properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkTapRuleInner>, NetworkTapRuleInner> beginUpdate(
        String resourceGroupName, String networkTapRuleName, NetworkTapRulePatch body, Context context);

    /**
     * Updates a Network Tap Rule.
     *
     * <p>Update certain properties of the Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Network Tap Rule properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapRuleInner update(String resourceGroupName, String networkTapRuleName, NetworkTapRulePatch body);

    /**
     * Updates a Network Tap Rule.
     *
     * <p>Update certain properties of the Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Network Tap Rule properties to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkTapRule resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkTapRuleInner update(
        String resourceGroupName, String networkTapRuleName, NetworkTapRulePatch body, Context context);

    /**
     * Deletes a Network Tap Rule.
     *
     * <p>Delete Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkTapRuleName);

    /**
     * Deletes a Network Tap Rule.
     *
     * <p>Delete Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String networkTapRuleName, Context context);

    /**
     * Deletes a Network Tap Rule.
     *
     * <p>Delete Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkTapRuleName);

    /**
     * Deletes a Network Tap Rule.
     *
     * <p>Delete Network Tap Rule resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkTapRuleName, Context context);

    /**
     * List Network Tap Rules by resource group.
     *
     * <p>List all the Network Tap Rule resources in the given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTapRules as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapRuleInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Network Tap Rules by resource group.
     *
     * <p>List all the Network Tap Rule resources in the given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTapRules as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapRuleInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List NetworkTapRules by subscription.
     *
     * <p>List all the Network Tap Rule resources in the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTapRules as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapRuleInner> list();

    /**
     * List NetworkTapRules by subscription.
     *
     * <p>List all the Network Tap Rule resources in the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of NetworkTapRules as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkTapRuleInner> list(Context context);

    /**
     * Updates administrative state of Network Tap Rules.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeState(
            String resourceGroupName, String networkTapRuleName, UpdateAdministrativeState body);

    /**
     * Updates administrative state of Network Tap Rules.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginUpdateAdministrativeState(
            String resourceGroupName, String networkTapRuleName, UpdateAdministrativeState body, Context context);

    /**
     * Updates administrative state of Network Tap Rules.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner updateAdministrativeState(
        String resourceGroupName, String networkTapRuleName, UpdateAdministrativeState body);

    /**
     * Updates administrative state of Network Tap Rules.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner updateAdministrativeState(
        String resourceGroupName, String networkTapRuleName, UpdateAdministrativeState body, Context context);

    /**
     * Resync the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginResync(String resourceGroupName, String networkTapRuleName);

    /**
     * Resync the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommonPostActionResponseForStateUpdateInner>, CommonPostActionResponseForStateUpdateInner>
        beginResync(String resourceGroupName, String networkTapRuleName, Context context);

    /**
     * Resync the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner resync(String resourceGroupName, String networkTapRuleName);

    /**
     * Resync the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common response for the state updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommonPostActionResponseForStateUpdateInner resync(
        String resourceGroupName, String networkTapRuleName, Context context);

    /**
     * Validates the configuration of the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ValidateConfigurationResponseInner>, ValidateConfigurationResponseInner>
        beginValidateConfiguration(String resourceGroupName, String networkTapRuleName);

    /**
     * Validates the configuration of the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ValidateConfigurationResponseInner>, ValidateConfigurationResponseInner>
        beginValidateConfiguration(String resourceGroupName, String networkTapRuleName, Context context);

    /**
     * Validates the configuration of the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ValidateConfigurationResponseInner validateConfiguration(String resourceGroupName, String networkTapRuleName);

    /**
     * Validates the configuration of the Network Tap Rule.
     *
     * <p>Implements the operation to the underlying resources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkTapRuleName Name of the Network Tap Rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the action validate configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ValidateConfigurationResponseInner validateConfiguration(
        String resourceGroupName, String networkTapRuleName, Context context);
}
