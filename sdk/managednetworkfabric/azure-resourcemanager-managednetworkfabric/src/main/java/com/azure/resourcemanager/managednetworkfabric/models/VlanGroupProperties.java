// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Vlan group properties.
 */
@Fluent
public final class VlanGroupProperties implements JsonSerializable<VlanGroupProperties> {
    /*
     * Vlan group name.
     */
    private String name;

    /*
     * List of vlans.
     */
    private List<String> vlans;

    /**
     * Creates an instance of VlanGroupProperties class.
     */
    public VlanGroupProperties() {
    }

    /**
     * Get the name property: Vlan group name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Vlan group name.
     * 
     * @param name the name value to set.
     * @return the VlanGroupProperties object itself.
     */
    public VlanGroupProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the vlans property: List of vlans.
     * 
     * @return the vlans value.
     */
    public List<String> vlans() {
        return this.vlans;
    }

    /**
     * Set the vlans property: List of vlans.
     * 
     * @param vlans the vlans value to set.
     * @return the VlanGroupProperties object itself.
     */
    public VlanGroupProperties withVlans(List<String> vlans) {
        this.vlans = vlans;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("vlans", this.vlans, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VlanGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VlanGroupProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VlanGroupProperties.
     */
    public static VlanGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VlanGroupProperties deserializedVlanGroupProperties = new VlanGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedVlanGroupProperties.name = reader.getString();
                } else if ("vlans".equals(fieldName)) {
                    List<String> vlans = reader.readArray(reader1 -> reader1.getString());
                    deserializedVlanGroupProperties.vlans = vlans;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVlanGroupProperties;
        });
    }
}
