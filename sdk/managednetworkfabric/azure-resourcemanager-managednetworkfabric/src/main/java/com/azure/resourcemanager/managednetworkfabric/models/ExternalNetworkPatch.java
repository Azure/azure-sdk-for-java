// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.ExternalNetworkPatchProperties;
import java.io.IOException;

/**
 * The ExternalNetwork patch resource definition.
 */
@Fluent
public final class ExternalNetworkPatch implements JsonSerializable<ExternalNetworkPatch> {
    /*
     * External Network Patch properties.
     */
    private ExternalNetworkPatchProperties innerProperties;

    /**
     * Creates an instance of ExternalNetworkPatch class.
     */
    public ExternalNetworkPatch() {
    }

    /**
     * Get the innerProperties property: External Network Patch properties.
     * 
     * @return the innerProperties value.
     */
    private ExternalNetworkPatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the peeringOption property: Peering option list.
     * 
     * @return the peeringOption value.
     */
    public PeeringOption peeringOption() {
        return this.innerProperties() == null ? null : this.innerProperties().peeringOption();
    }

    /**
     * Set the peeringOption property: Peering option list.
     * 
     * @param peeringOption the peeringOption value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withPeeringOption(PeeringOption peeringOption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withPeeringOption(peeringOption);
        return this;
    }

    /**
     * Get the optionBProperties property: option B properties object.
     * 
     * @return the optionBProperties value.
     */
    public L3OptionBProperties optionBProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().optionBProperties();
    }

    /**
     * Set the optionBProperties property: option B properties object.
     * 
     * @param optionBProperties the optionBProperties value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withOptionBProperties(L3OptionBProperties optionBProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withOptionBProperties(optionBProperties);
        return this;
    }

    /**
     * Get the optionAProperties property: option A properties object.
     * 
     * @return the optionAProperties value.
     */
    public ExternalNetworkPatchPropertiesOptionAProperties optionAProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().optionAProperties();
    }

    /**
     * Set the optionAProperties property: option A properties object.
     * 
     * @param optionAProperties the optionAProperties value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch
        withOptionAProperties(ExternalNetworkPatchPropertiesOptionAProperties optionAProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withOptionAProperties(optionAProperties);
        return this;
    }

    /**
     * Get the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @return the networkToNetworkInterconnectId value.
     */
    public String networkToNetworkInterconnectId() {
        return this.innerProperties() == null ? null : this.innerProperties().networkToNetworkInterconnectId();
    }

    /**
     * Set the networkToNetworkInterconnectId property: ARM Resource ID of the networkToNetworkInterconnectId of the
     * ExternalNetwork resource.
     * 
     * @param networkToNetworkInterconnectId the networkToNetworkInterconnectId value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withNetworkToNetworkInterconnectId(String networkToNetworkInterconnectId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withNetworkToNetworkInterconnectId(networkToNetworkInterconnectId);
        return this;
    }

    /**
     * Get the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the importRoutePolicyId value.
     */
    public String importRoutePolicyId() {
        return this.innerProperties() == null ? null : this.innerProperties().importRoutePolicyId();
    }

    /**
     * Set the importRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param importRoutePolicyId the importRoutePolicyId value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withImportRoutePolicyId(String importRoutePolicyId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withImportRoutePolicyId(importRoutePolicyId);
        return this;
    }

    /**
     * Get the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @return the exportRoutePolicyId value.
     */
    public String exportRoutePolicyId() {
        return this.innerProperties() == null ? null : this.innerProperties().exportRoutePolicyId();
    }

    /**
     * Set the exportRoutePolicyId property: ARM Resource ID of the RoutePolicy. This is used for the backward
     * compatibility.
     * 
     * @param exportRoutePolicyId the exportRoutePolicyId value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withExportRoutePolicyId(String exportRoutePolicyId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withExportRoutePolicyId(exportRoutePolicyId);
        return this;
    }

    /**
     * Get the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @return the importRoutePolicy value.
     */
    public ImportRoutePolicy importRoutePolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().importRoutePolicy();
    }

    /**
     * Set the importRoutePolicy property: Import Route Policy either IPv4 or IPv6.
     * 
     * @param importRoutePolicy the importRoutePolicy value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withImportRoutePolicy(ImportRoutePolicy importRoutePolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withImportRoutePolicy(importRoutePolicy);
        return this;
    }

    /**
     * Get the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @return the exportRoutePolicy value.
     */
    public ExportRoutePolicy exportRoutePolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().exportRoutePolicy();
    }

    /**
     * Set the exportRoutePolicy property: Export Route Policy either IPv4 or IPv6.
     * 
     * @param exportRoutePolicy the exportRoutePolicy value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withExportRoutePolicy(ExportRoutePolicy exportRoutePolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withExportRoutePolicy(exportRoutePolicy);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     * 
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     * 
     * @param annotation the annotation value to set.
     * @return the ExternalNetworkPatch object itself.
     */
    public ExternalNetworkPatch withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkPatchProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExternalNetworkPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExternalNetworkPatch if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExternalNetworkPatch.
     */
    public static ExternalNetworkPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExternalNetworkPatch deserializedExternalNetworkPatch = new ExternalNetworkPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedExternalNetworkPatch.innerProperties = ExternalNetworkPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExternalNetworkPatch;
        });
    }
}
