// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.FabricSkuType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Network Fabric SKU Properties define properties of the resource.
 */
@Fluent
public final class NetworkFabricSkuProperties implements JsonSerializable<NetworkFabricSkuProperties> {
    /*
     * Type of Network Fabric SKU.
     */
    private FabricSkuType type;

    /*
     * Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4
     * rack SKU and 8 for 8 rack SKU.
     */
    private Integer maxComputeRacks;

    /*
     * Maximum number of servers available for this Network Fabric SKU.
     */
    private Integer maximumServerCount;

    /*
     * List of supported Network Fabric SKU versions.
     */
    private List<String> supportedVersions;

    /*
     * URL providing detailed configuration of the fabric SKU.
     */
    private String details;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of NetworkFabricSkuProperties class.
     */
    public NetworkFabricSkuProperties() {
    }

    /**
     * Get the type property: Type of Network Fabric SKU.
     * 
     * @return the type value.
     */
    public FabricSkuType type() {
        return this.type;
    }

    /**
     * Get the maxComputeRacks property: Maximum number of compute racks available for this Network Fabric SKU. The
     * value of max count racks is 4 for 4 rack SKU and 8 for 8 rack SKU.
     * 
     * @return the maxComputeRacks value.
     */
    public Integer maxComputeRacks() {
        return this.maxComputeRacks;
    }

    /**
     * Set the maxComputeRacks property: Maximum number of compute racks available for this Network Fabric SKU. The
     * value of max count racks is 4 for 4 rack SKU and 8 for 8 rack SKU.
     * 
     * @param maxComputeRacks the maxComputeRacks value to set.
     * @return the NetworkFabricSkuProperties object itself.
     */
    public NetworkFabricSkuProperties withMaxComputeRacks(Integer maxComputeRacks) {
        this.maxComputeRacks = maxComputeRacks;
        return this;
    }

    /**
     * Get the maximumServerCount property: Maximum number of servers available for this Network Fabric SKU.
     * 
     * @return the maximumServerCount value.
     */
    public Integer maximumServerCount() {
        return this.maximumServerCount;
    }

    /**
     * Set the maximumServerCount property: Maximum number of servers available for this Network Fabric SKU.
     * 
     * @param maximumServerCount the maximumServerCount value to set.
     * @return the NetworkFabricSkuProperties object itself.
     */
    public NetworkFabricSkuProperties withMaximumServerCount(Integer maximumServerCount) {
        this.maximumServerCount = maximumServerCount;
        return this;
    }

    /**
     * Get the supportedVersions property: List of supported Network Fabric SKU versions.
     * 
     * @return the supportedVersions value.
     */
    public List<String> supportedVersions() {
        return this.supportedVersions;
    }

    /**
     * Get the details property: URL providing detailed configuration of the fabric SKU.
     * 
     * @return the details value.
     */
    public String details() {
        return this.details;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxComputeRacks", this.maxComputeRacks);
        jsonWriter.writeNumberField("maximumServerCount", this.maximumServerCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkFabricSkuProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkFabricSkuProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkFabricSkuProperties.
     */
    public static NetworkFabricSkuProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkFabricSkuProperties deserializedNetworkFabricSkuProperties = new NetworkFabricSkuProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedNetworkFabricSkuProperties.type = FabricSkuType.fromString(reader.getString());
                } else if ("maxComputeRacks".equals(fieldName)) {
                    deserializedNetworkFabricSkuProperties.maxComputeRacks = reader.getNullable(JsonReader::getInt);
                } else if ("maximumServerCount".equals(fieldName)) {
                    deserializedNetworkFabricSkuProperties.maximumServerCount = reader.getNullable(JsonReader::getInt);
                } else if ("supportedVersions".equals(fieldName)) {
                    List<String> supportedVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkFabricSkuProperties.supportedVersions = supportedVersions;
                } else if ("details".equals(fieldName)) {
                    deserializedNetworkFabricSkuProperties.details = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkFabricSkuProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkFabricSkuProperties;
        });
    }
}
