// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetworkfabric.models.FabricSkuType;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Network Fabric SKU Properties define properties of the resource. */
@Fluent
public final class NetworkFabricSkuProperties {
    /*
     * Type of Network Fabric SKU.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private FabricSkuType type;

    /*
     * Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4
     * rack SKU and 8 for 8 rack SKU.
     */
    @JsonProperty(value = "maxComputeRacks")
    private Integer maxComputeRacks;

    /*
     * Maximum number of servers available for this Network Fabric SKU.
     */
    @JsonProperty(value = "maximumServerCount")
    private Integer maximumServerCount;

    /*
     * List of supported Network Fabric SKU versions.
     */
    @JsonProperty(value = "supportedVersions", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> supportedVersions;

    /*
     * URL providing detailed configuration of the fabric SKU.
     */
    @JsonProperty(value = "details", access = JsonProperty.Access.WRITE_ONLY)
    private String details;

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of NetworkFabricSkuProperties class. */
    public NetworkFabricSkuProperties() {
    }

    /**
     * Get the type property: Type of Network Fabric SKU.
     *
     * @return the type value.
     */
    public FabricSkuType type() {
        return this.type;
    }

    /**
     * Get the maxComputeRacks property: Maximum number of compute racks available for this Network Fabric SKU. The
     * value of max count racks is 4 for 4 rack SKU and 8 for 8 rack SKU.
     *
     * @return the maxComputeRacks value.
     */
    public Integer maxComputeRacks() {
        return this.maxComputeRacks;
    }

    /**
     * Set the maxComputeRacks property: Maximum number of compute racks available for this Network Fabric SKU. The
     * value of max count racks is 4 for 4 rack SKU and 8 for 8 rack SKU.
     *
     * @param maxComputeRacks the maxComputeRacks value to set.
     * @return the NetworkFabricSkuProperties object itself.
     */
    public NetworkFabricSkuProperties withMaxComputeRacks(Integer maxComputeRacks) {
        this.maxComputeRacks = maxComputeRacks;
        return this;
    }

    /**
     * Get the maximumServerCount property: Maximum number of servers available for this Network Fabric SKU.
     *
     * @return the maximumServerCount value.
     */
    public Integer maximumServerCount() {
        return this.maximumServerCount;
    }

    /**
     * Set the maximumServerCount property: Maximum number of servers available for this Network Fabric SKU.
     *
     * @param maximumServerCount the maximumServerCount value to set.
     * @return the NetworkFabricSkuProperties object itself.
     */
    public NetworkFabricSkuProperties withMaximumServerCount(Integer maximumServerCount) {
        this.maximumServerCount = maximumServerCount;
        return this;
    }

    /**
     * Get the supportedVersions property: List of supported Network Fabric SKU versions.
     *
     * @return the supportedVersions value.
     */
    public List<String> supportedVersions() {
        return this.supportedVersions;
    }

    /**
     * Get the details property: URL providing detailed configuration of the fabric SKU.
     *
     * @return the details value.
     */
    public String details() {
        return this.details;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
