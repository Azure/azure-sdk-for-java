// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The vlan match conditions that need to be matched.
 */
@Fluent
public final class VlanMatchCondition implements JsonSerializable<VlanMatchCondition> {
    /*
     * List of vlans that need to be matched.
     */
    private List<String> vlans;

    /*
     * List of inner vlans that need to be matched.
     */
    private List<String> innerVlans;

    /*
     * List of vlan group names that need to be matched.
     */
    private List<String> vlanGroupNames;

    /**
     * Creates an instance of VlanMatchCondition class.
     */
    public VlanMatchCondition() {
    }

    /**
     * Get the vlans property: List of vlans that need to be matched.
     * 
     * @return the vlans value.
     */
    public List<String> vlans() {
        return this.vlans;
    }

    /**
     * Set the vlans property: List of vlans that need to be matched.
     * 
     * @param vlans the vlans value to set.
     * @return the VlanMatchCondition object itself.
     */
    public VlanMatchCondition withVlans(List<String> vlans) {
        this.vlans = vlans;
        return this;
    }

    /**
     * Get the innerVlans property: List of inner vlans that need to be matched.
     * 
     * @return the innerVlans value.
     */
    public List<String> innerVlans() {
        return this.innerVlans;
    }

    /**
     * Set the innerVlans property: List of inner vlans that need to be matched.
     * 
     * @param innerVlans the innerVlans value to set.
     * @return the VlanMatchCondition object itself.
     */
    public VlanMatchCondition withInnerVlans(List<String> innerVlans) {
        this.innerVlans = innerVlans;
        return this;
    }

    /**
     * Get the vlanGroupNames property: List of vlan group names that need to be matched.
     * 
     * @return the vlanGroupNames value.
     */
    public List<String> vlanGroupNames() {
        return this.vlanGroupNames;
    }

    /**
     * Set the vlanGroupNames property: List of vlan group names that need to be matched.
     * 
     * @param vlanGroupNames the vlanGroupNames value to set.
     * @return the VlanMatchCondition object itself.
     */
    public VlanMatchCondition withVlanGroupNames(List<String> vlanGroupNames) {
        this.vlanGroupNames = vlanGroupNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vlans", this.vlans, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("innerVlans", this.innerVlans, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vlanGroupNames", this.vlanGroupNames,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VlanMatchCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VlanMatchCondition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VlanMatchCondition.
     */
    public static VlanMatchCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VlanMatchCondition deserializedVlanMatchCondition = new VlanMatchCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vlans".equals(fieldName)) {
                    List<String> vlans = reader.readArray(reader1 -> reader1.getString());
                    deserializedVlanMatchCondition.vlans = vlans;
                } else if ("innerVlans".equals(fieldName)) {
                    List<String> innerVlans = reader.readArray(reader1 -> reader1.getString());
                    deserializedVlanMatchCondition.innerVlans = innerVlans;
                } else if ("vlanGroupNames".equals(fieldName)) {
                    List<String> vlanGroupNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedVlanMatchCondition.vlanGroupNames = vlanGroupNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVlanMatchCondition;
        });
    }
}
