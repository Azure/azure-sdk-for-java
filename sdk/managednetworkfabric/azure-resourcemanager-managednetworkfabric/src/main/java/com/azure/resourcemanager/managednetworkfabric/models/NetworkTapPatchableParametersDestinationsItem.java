// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Destination.
 */
@Fluent
public final class NetworkTapPatchableParametersDestinationsItem extends DestinationProperties {
    /**
     * Creates an instance of NetworkTapPatchableParametersDestinationsItem class.
     */
    public NetworkTapPatchableParametersDestinationsItem() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkTapPatchableParametersDestinationsItem withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkTapPatchableParametersDestinationsItem withDestinationType(DestinationType destinationType) {
        super.withDestinationType(destinationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkTapPatchableParametersDestinationsItem withDestinationId(String destinationId) {
        super.withDestinationId(destinationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkTapPatchableParametersDestinationsItem
        withIsolationDomainProperties(IsolationDomainProperties isolationDomainProperties) {
        super.withIsolationDomainProperties(isolationDomainProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkTapPatchableParametersDestinationsItem withDestinationTapRuleId(String destinationTapRuleId) {
        super.withDestinationTapRuleId(destinationTapRuleId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (isolationDomainProperties() != null) {
            isolationDomainProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("destinationType", destinationType() == null ? null : destinationType().toString());
        jsonWriter.writeStringField("destinationId", destinationId());
        jsonWriter.writeJsonField("isolationDomainProperties", isolationDomainProperties());
        jsonWriter.writeStringField("destinationTapRuleId", destinationTapRuleId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkTapPatchableParametersDestinationsItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkTapPatchableParametersDestinationsItem if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkTapPatchableParametersDestinationsItem.
     */
    public static NetworkTapPatchableParametersDestinationsItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkTapPatchableParametersDestinationsItem deserializedNetworkTapPatchableParametersDestinationsItem
                = new NetworkTapPatchableParametersDestinationsItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNetworkTapPatchableParametersDestinationsItem.withName(reader.getString());
                } else if ("destinationType".equals(fieldName)) {
                    deserializedNetworkTapPatchableParametersDestinationsItem
                        .withDestinationType(DestinationType.fromString(reader.getString()));
                } else if ("destinationId".equals(fieldName)) {
                    deserializedNetworkTapPatchableParametersDestinationsItem.withDestinationId(reader.getString());
                } else if ("isolationDomainProperties".equals(fieldName)) {
                    deserializedNetworkTapPatchableParametersDestinationsItem
                        .withIsolationDomainProperties(IsolationDomainProperties.fromJson(reader));
                } else if ("destinationTapRuleId".equals(fieldName)) {
                    deserializedNetworkTapPatchableParametersDestinationsItem
                        .withDestinationTapRuleId(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkTapPatchableParametersDestinationsItem;
        });
    }
}
