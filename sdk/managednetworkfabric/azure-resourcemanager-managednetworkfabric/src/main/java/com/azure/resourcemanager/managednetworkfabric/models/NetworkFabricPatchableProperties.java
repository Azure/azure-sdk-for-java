// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Network Fabric updatable properties. */
@Fluent
public class NetworkFabricPatchableProperties {
    /*
     * Number of compute racks associated to Network Fabric.
     */
    @JsonProperty(value = "rackCount")
    private Integer rackCount;

    /*
     * Number of servers.Possible values are from 1-16.
     */
    @JsonProperty(value = "serverCountPerRack")
    private Integer serverCountPerRack;

    /*
     * IPv4Prefix for Management Network. Example: 10.1.0.0/19.
     */
    @JsonProperty(value = "ipv4Prefix")
    private String ipv4Prefix;

    /*
     * IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
     */
    @JsonProperty(value = "ipv6Prefix")
    private String ipv6Prefix;

    /*
     * ASN of CE devices for CE/PE connectivity.
     */
    @JsonProperty(value = "fabricASN")
    private Long fabricAsn;

    /*
     * Network and credentials configuration already applied to terminal server.
     */
    @JsonProperty(value = "terminalServerConfiguration")
    private NetworkFabricPatchablePropertiesTerminalServerConfiguration terminalServerConfiguration;

    /*
     * Configuration to be used to setup the management network.
     */
    @JsonProperty(value = "managementNetworkConfiguration")
    private ManagementNetworkConfigurationPatchableProperties managementNetworkConfiguration;

    /** Creates an instance of NetworkFabricPatchableProperties class. */
    public NetworkFabricPatchableProperties() {
    }

    /**
     * Get the rackCount property: Number of compute racks associated to Network Fabric.
     *
     * @return the rackCount value.
     */
    public Integer rackCount() {
        return this.rackCount;
    }

    /**
     * Set the rackCount property: Number of compute racks associated to Network Fabric.
     *
     * @param rackCount the rackCount value to set.
     * @return the NetworkFabricPatchableProperties object itself.
     */
    public NetworkFabricPatchableProperties withRackCount(Integer rackCount) {
        this.rackCount = rackCount;
        return this;
    }

    /**
     * Get the serverCountPerRack property: Number of servers.Possible values are from 1-16.
     *
     * @return the serverCountPerRack value.
     */
    public Integer serverCountPerRack() {
        return this.serverCountPerRack;
    }

    /**
     * Set the serverCountPerRack property: Number of servers.Possible values are from 1-16.
     *
     * @param serverCountPerRack the serverCountPerRack value to set.
     * @return the NetworkFabricPatchableProperties object itself.
     */
    public NetworkFabricPatchableProperties withServerCountPerRack(Integer serverCountPerRack) {
        this.serverCountPerRack = serverCountPerRack;
        return this;
    }

    /**
     * Get the ipv4Prefix property: IPv4Prefix for Management Network. Example: 10.1.0.0/19.
     *
     * @return the ipv4Prefix value.
     */
    public String ipv4Prefix() {
        return this.ipv4Prefix;
    }

    /**
     * Set the ipv4Prefix property: IPv4Prefix for Management Network. Example: 10.1.0.0/19.
     *
     * @param ipv4Prefix the ipv4Prefix value to set.
     * @return the NetworkFabricPatchableProperties object itself.
     */
    public NetworkFabricPatchableProperties withIpv4Prefix(String ipv4Prefix) {
        this.ipv4Prefix = ipv4Prefix;
        return this;
    }

    /**
     * Get the ipv6Prefix property: IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
     *
     * @return the ipv6Prefix value.
     */
    public String ipv6Prefix() {
        return this.ipv6Prefix;
    }

    /**
     * Set the ipv6Prefix property: IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
     *
     * @param ipv6Prefix the ipv6Prefix value to set.
     * @return the NetworkFabricPatchableProperties object itself.
     */
    public NetworkFabricPatchableProperties withIpv6Prefix(String ipv6Prefix) {
        this.ipv6Prefix = ipv6Prefix;
        return this;
    }

    /**
     * Get the fabricAsn property: ASN of CE devices for CE/PE connectivity.
     *
     * @return the fabricAsn value.
     */
    public Long fabricAsn() {
        return this.fabricAsn;
    }

    /**
     * Set the fabricAsn property: ASN of CE devices for CE/PE connectivity.
     *
     * @param fabricAsn the fabricAsn value to set.
     * @return the NetworkFabricPatchableProperties object itself.
     */
    public NetworkFabricPatchableProperties withFabricAsn(Long fabricAsn) {
        this.fabricAsn = fabricAsn;
        return this;
    }

    /**
     * Get the terminalServerConfiguration property: Network and credentials configuration already applied to terminal
     * server.
     *
     * @return the terminalServerConfiguration value.
     */
    public NetworkFabricPatchablePropertiesTerminalServerConfiguration terminalServerConfiguration() {
        return this.terminalServerConfiguration;
    }

    /**
     * Set the terminalServerConfiguration property: Network and credentials configuration already applied to terminal
     * server.
     *
     * @param terminalServerConfiguration the terminalServerConfiguration value to set.
     * @return the NetworkFabricPatchableProperties object itself.
     */
    public NetworkFabricPatchableProperties withTerminalServerConfiguration(
        NetworkFabricPatchablePropertiesTerminalServerConfiguration terminalServerConfiguration) {
        this.terminalServerConfiguration = terminalServerConfiguration;
        return this;
    }

    /**
     * Get the managementNetworkConfiguration property: Configuration to be used to setup the management network.
     *
     * @return the managementNetworkConfiguration value.
     */
    public ManagementNetworkConfigurationPatchableProperties managementNetworkConfiguration() {
        return this.managementNetworkConfiguration;
    }

    /**
     * Set the managementNetworkConfiguration property: Configuration to be used to setup the management network.
     *
     * @param managementNetworkConfiguration the managementNetworkConfiguration value to set.
     * @return the NetworkFabricPatchableProperties object itself.
     */
    public NetworkFabricPatchableProperties withManagementNetworkConfiguration(
        ManagementNetworkConfigurationPatchableProperties managementNetworkConfiguration) {
        this.managementNetworkConfiguration = managementNetworkConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (terminalServerConfiguration() != null) {
            terminalServerConfiguration().validate();
        }
        if (managementNetworkConfiguration() != null) {
            managementNetworkConfiguration().validate();
        }
    }
}
