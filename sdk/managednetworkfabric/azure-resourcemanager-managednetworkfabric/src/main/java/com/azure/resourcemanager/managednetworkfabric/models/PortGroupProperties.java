// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Port Group properties.
 */
@Fluent
public final class PortGroupProperties implements JsonSerializable<PortGroupProperties> {
    /*
     * The name of the port group.
     */
    private String name;

    /*
     * List of the ports that need to be matched.
     */
    private List<String> ports;

    /**
     * Creates an instance of PortGroupProperties class.
     */
    public PortGroupProperties() {
    }

    /**
     * Get the name property: The name of the port group.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the port group.
     * 
     * @param name the name value to set.
     * @return the PortGroupProperties object itself.
     */
    public PortGroupProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the ports property: List of the ports that need to be matched.
     * 
     * @return the ports value.
     */
    public List<String> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: List of the ports that need to be matched.
     * 
     * @param ports the ports value to set.
     * @return the PortGroupProperties object itself.
     */
    public PortGroupProperties withPorts(List<String> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("ports", this.ports, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PortGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PortGroupProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PortGroupProperties.
     */
    public static PortGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PortGroupProperties deserializedPortGroupProperties = new PortGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPortGroupProperties.name = reader.getString();
                } else if ("ports".equals(fieldName)) {
                    List<String> ports = reader.readArray(reader1 -> reader1.getString());
                    deserializedPortGroupProperties.ports = ports;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPortGroupProperties;
        });
    }
}
