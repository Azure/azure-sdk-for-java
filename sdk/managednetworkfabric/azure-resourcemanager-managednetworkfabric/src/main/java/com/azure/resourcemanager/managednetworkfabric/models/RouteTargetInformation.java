// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Route Target Configuration.
 */
@Fluent
public final class RouteTargetInformation implements JsonSerializable<RouteTargetInformation> {
    /*
     * Route Targets to be applied for incoming routes into CE.
     */
    private List<String> importIpv4RouteTargets;

    /*
     * Route Targets to be applied for incoming routes from CE.
     */
    private List<String> importIpv6RouteTargets;

    /*
     * Route Targets to be applied for outgoing routes into CE.
     */
    private List<String> exportIpv4RouteTargets;

    /*
     * Route Targets to be applied for outgoing routes from CE.
     */
    private List<String> exportIpv6RouteTargets;

    /**
     * Creates an instance of RouteTargetInformation class.
     */
    public RouteTargetInformation() {
    }

    /**
     * Get the importIpv4RouteTargets property: Route Targets to be applied for incoming routes into CE.
     * 
     * @return the importIpv4RouteTargets value.
     */
    public List<String> importIpv4RouteTargets() {
        return this.importIpv4RouteTargets;
    }

    /**
     * Set the importIpv4RouteTargets property: Route Targets to be applied for incoming routes into CE.
     * 
     * @param importIpv4RouteTargets the importIpv4RouteTargets value to set.
     * @return the RouteTargetInformation object itself.
     */
    public RouteTargetInformation withImportIpv4RouteTargets(List<String> importIpv4RouteTargets) {
        this.importIpv4RouteTargets = importIpv4RouteTargets;
        return this;
    }

    /**
     * Get the importIpv6RouteTargets property: Route Targets to be applied for incoming routes from CE.
     * 
     * @return the importIpv6RouteTargets value.
     */
    public List<String> importIpv6RouteTargets() {
        return this.importIpv6RouteTargets;
    }

    /**
     * Set the importIpv6RouteTargets property: Route Targets to be applied for incoming routes from CE.
     * 
     * @param importIpv6RouteTargets the importIpv6RouteTargets value to set.
     * @return the RouteTargetInformation object itself.
     */
    public RouteTargetInformation withImportIpv6RouteTargets(List<String> importIpv6RouteTargets) {
        this.importIpv6RouteTargets = importIpv6RouteTargets;
        return this;
    }

    /**
     * Get the exportIpv4RouteTargets property: Route Targets to be applied for outgoing routes into CE.
     * 
     * @return the exportIpv4RouteTargets value.
     */
    public List<String> exportIpv4RouteTargets() {
        return this.exportIpv4RouteTargets;
    }

    /**
     * Set the exportIpv4RouteTargets property: Route Targets to be applied for outgoing routes into CE.
     * 
     * @param exportIpv4RouteTargets the exportIpv4RouteTargets value to set.
     * @return the RouteTargetInformation object itself.
     */
    public RouteTargetInformation withExportIpv4RouteTargets(List<String> exportIpv4RouteTargets) {
        this.exportIpv4RouteTargets = exportIpv4RouteTargets;
        return this;
    }

    /**
     * Get the exportIpv6RouteTargets property: Route Targets to be applied for outgoing routes from CE.
     * 
     * @return the exportIpv6RouteTargets value.
     */
    public List<String> exportIpv6RouteTargets() {
        return this.exportIpv6RouteTargets;
    }

    /**
     * Set the exportIpv6RouteTargets property: Route Targets to be applied for outgoing routes from CE.
     * 
     * @param exportIpv6RouteTargets the exportIpv6RouteTargets value to set.
     * @return the RouteTargetInformation object itself.
     */
    public RouteTargetInformation withExportIpv6RouteTargets(List<String> exportIpv6RouteTargets) {
        this.exportIpv6RouteTargets = exportIpv6RouteTargets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("importIpv4RouteTargets", this.importIpv4RouteTargets,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("importIpv6RouteTargets", this.importIpv6RouteTargets,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("exportIpv4RouteTargets", this.exportIpv4RouteTargets,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("exportIpv6RouteTargets", this.exportIpv6RouteTargets,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteTargetInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteTargetInformation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouteTargetInformation.
     */
    public static RouteTargetInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteTargetInformation deserializedRouteTargetInformation = new RouteTargetInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("importIpv4RouteTargets".equals(fieldName)) {
                    List<String> importIpv4RouteTargets = reader.readArray(reader1 -> reader1.getString());
                    deserializedRouteTargetInformation.importIpv4RouteTargets = importIpv4RouteTargets;
                } else if ("importIpv6RouteTargets".equals(fieldName)) {
                    List<String> importIpv6RouteTargets = reader.readArray(reader1 -> reader1.getString());
                    deserializedRouteTargetInformation.importIpv6RouteTargets = importIpv6RouteTargets;
                } else if ("exportIpv4RouteTargets".equals(fieldName)) {
                    List<String> exportIpv4RouteTargets = reader.readArray(reader1 -> reader1.getString());
                    deserializedRouteTargetInformation.exportIpv4RouteTargets = exportIpv4RouteTargets;
                } else if ("exportIpv6RouteTargets".equals(fieldName)) {
                    List<String> exportIpv6RouteTargets = reader.readArray(reader1 -> reader1.getString());
                    deserializedRouteTargetInformation.exportIpv6RouteTargets = exportIpv6RouteTargets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRouteTargetInformation;
        });
    }
}
