// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * IP Community patchable properties.
 */
@Fluent
public final class IpCommunityRule implements JsonSerializable<IpCommunityRule> {
    /*
     * Action to be taken on the configuration. Example: Permit | Deny.
     */
    private CommunityActionTypes action;

    /*
     * Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence
     * number and continue down the list until a match is made. Once a match is made, the permit or deny statement is
     * applied to that network and the rest of the list is ignored.
     */
    private long sequenceNumber;

    /*
     * Supported well known Community List.
     */
    private List<WellKnownCommunities> wellKnownCommunities;

    /*
     * List the community members of IP Community.
     */
    private List<String> communityMembers;

    /**
     * Creates an instance of IpCommunityRule class.
     */
    public IpCommunityRule() {
    }

    /**
     * Get the action property: Action to be taken on the configuration. Example: Permit | Deny.
     * 
     * @return the action value.
     */
    public CommunityActionTypes action() {
        return this.action;
    }

    /**
     * Set the action property: Action to be taken on the configuration. Example: Permit | Deny.
     * 
     * @param action the action value to set.
     * @return the IpCommunityRule object itself.
     */
    public IpCommunityRule withAction(CommunityActionTypes action) {
        this.action = action;
        return this;
    }

    /**
     * Get the sequenceNumber property: Sequence to insert to/delete from existing route. Prefix lists are evaluated
     * starting with the lowest sequence number and continue down the list until a match is made. Once a match is made,
     * the permit or deny statement is applied to that network and the rest of the list is ignored.
     * 
     * @return the sequenceNumber value.
     */
    public long sequenceNumber() {
        return this.sequenceNumber;
    }

    /**
     * Set the sequenceNumber property: Sequence to insert to/delete from existing route. Prefix lists are evaluated
     * starting with the lowest sequence number and continue down the list until a match is made. Once a match is made,
     * the permit or deny statement is applied to that network and the rest of the list is ignored.
     * 
     * @param sequenceNumber the sequenceNumber value to set.
     * @return the IpCommunityRule object itself.
     */
    public IpCommunityRule withSequenceNumber(long sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }

    /**
     * Get the wellKnownCommunities property: Supported well known Community List.
     * 
     * @return the wellKnownCommunities value.
     */
    public List<WellKnownCommunities> wellKnownCommunities() {
        return this.wellKnownCommunities;
    }

    /**
     * Set the wellKnownCommunities property: Supported well known Community List.
     * 
     * @param wellKnownCommunities the wellKnownCommunities value to set.
     * @return the IpCommunityRule object itself.
     */
    public IpCommunityRule withWellKnownCommunities(List<WellKnownCommunities> wellKnownCommunities) {
        this.wellKnownCommunities = wellKnownCommunities;
        return this;
    }

    /**
     * Get the communityMembers property: List the community members of IP Community.
     * 
     * @return the communityMembers value.
     */
    public List<String> communityMembers() {
        return this.communityMembers;
    }

    /**
     * Set the communityMembers property: List the community members of IP Community.
     * 
     * @param communityMembers the communityMembers value to set.
     * @return the IpCommunityRule object itself.
     */
    public IpCommunityRule withCommunityMembers(List<String> communityMembers) {
        this.communityMembers = communityMembers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model IpCommunityRule"));
        }
        if (communityMembers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property communityMembers in model IpCommunityRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IpCommunityRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeLongField("sequenceNumber", this.sequenceNumber);
        jsonWriter.writeArrayField("communityMembers", this.communityMembers,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("wellKnownCommunities", this.wellKnownCommunities,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpCommunityRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpCommunityRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IpCommunityRule.
     */
    public static IpCommunityRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpCommunityRule deserializedIpCommunityRule = new IpCommunityRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedIpCommunityRule.action = CommunityActionTypes.fromString(reader.getString());
                } else if ("sequenceNumber".equals(fieldName)) {
                    deserializedIpCommunityRule.sequenceNumber = reader.getLong();
                } else if ("communityMembers".equals(fieldName)) {
                    List<String> communityMembers = reader.readArray(reader1 -> reader1.getString());
                    deserializedIpCommunityRule.communityMembers = communityMembers;
                } else if ("wellKnownCommunities".equals(fieldName)) {
                    List<WellKnownCommunities> wellKnownCommunities
                        = reader.readArray(reader1 -> WellKnownCommunities.fromString(reader1.getString()));
                    deserializedIpCommunityRule.wellKnownCommunities = wellKnownCommunities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpCommunityRule;
        });
    }
}
