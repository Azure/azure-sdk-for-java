// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Network Packet Broker Properties defines the properties of the resource. */
@Fluent
public final class NetworkPacketBrokerProperties {
    /*
     * ARM resource ID of the Network Fabric.
     */
    @JsonProperty(value = "networkFabricId", required = true)
    private String networkFabricId;

    /*
     * List of ARM resource IDs of Network Devices [NPB].
     */
    @JsonProperty(value = "networkDeviceIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> networkDeviceIds;

    /*
     * List of network interfaces across NPB devices that are used to mirror source traffic.
     */
    @JsonProperty(value = "sourceInterfaceIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> sourceInterfaceIds;

    /*
     * List of network Tap IDs configured on NPB.
     */
    @JsonProperty(value = "networkTapIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> networkTapIds;

    /*
     * List of neighbor group IDs configured on NPB.
     */
    @JsonProperty(value = "neighborGroupIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> neighborGroupIds;

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of NetworkPacketBrokerProperties class. */
    public NetworkPacketBrokerProperties() {
    }

    /**
     * Get the networkFabricId property: ARM resource ID of the Network Fabric.
     *
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.networkFabricId;
    }

    /**
     * Set the networkFabricId property: ARM resource ID of the Network Fabric.
     *
     * @param networkFabricId the networkFabricId value to set.
     * @return the NetworkPacketBrokerProperties object itself.
     */
    public NetworkPacketBrokerProperties withNetworkFabricId(String networkFabricId) {
        this.networkFabricId = networkFabricId;
        return this;
    }

    /**
     * Get the networkDeviceIds property: List of ARM resource IDs of Network Devices [NPB].
     *
     * @return the networkDeviceIds value.
     */
    public List<String> networkDeviceIds() {
        return this.networkDeviceIds;
    }

    /**
     * Get the sourceInterfaceIds property: List of network interfaces across NPB devices that are used to mirror source
     * traffic.
     *
     * @return the sourceInterfaceIds value.
     */
    public List<String> sourceInterfaceIds() {
        return this.sourceInterfaceIds;
    }

    /**
     * Get the networkTapIds property: List of network Tap IDs configured on NPB.
     *
     * @return the networkTapIds value.
     */
    public List<String> networkTapIds() {
        return this.networkTapIds;
    }

    /**
     * Get the neighborGroupIds property: List of neighbor group IDs configured on NPB.
     *
     * @return the neighborGroupIds value.
     */
    public List<String> neighborGroupIds() {
        return this.neighborGroupIds;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkFabricId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property networkFabricId in model NetworkPacketBrokerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkPacketBrokerProperties.class);
}
