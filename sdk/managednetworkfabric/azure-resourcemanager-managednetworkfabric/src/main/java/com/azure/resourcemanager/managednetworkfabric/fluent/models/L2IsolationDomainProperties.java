// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managednetworkfabric.models.AdministrativeState;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.ConfigurationState;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import java.io.IOException;

/**
 * L2Isolation Domain Properties defines the properties of the resource.
 */
@Fluent
public final class L2IsolationDomainProperties extends AnnotationResource {
    /*
     * ARM Resource ID of the Network Fabric.
     */
    private String networkFabricId;

    /*
     * Vlan Identifier of the Network Fabric. Example: 501.
     */
    private int vlanId;

    /*
     * Maximum transmission unit. Default value is 1500.
     */
    private Integer mtu;

    /*
     * Configuration state of the resource.
     */
    private ConfigurationState configurationState;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Administrative state of the resource.
     */
    private AdministrativeState administrativeState;

    /**
     * Creates an instance of L2IsolationDomainProperties class.
     */
    public L2IsolationDomainProperties() {
    }

    /**
     * Get the networkFabricId property: ARM Resource ID of the Network Fabric.
     * 
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.networkFabricId;
    }

    /**
     * Set the networkFabricId property: ARM Resource ID of the Network Fabric.
     * 
     * @param networkFabricId the networkFabricId value to set.
     * @return the L2IsolationDomainProperties object itself.
     */
    public L2IsolationDomainProperties withNetworkFabricId(String networkFabricId) {
        this.networkFabricId = networkFabricId;
        return this;
    }

    /**
     * Get the vlanId property: Vlan Identifier of the Network Fabric. Example: 501.
     * 
     * @return the vlanId value.
     */
    public int vlanId() {
        return this.vlanId;
    }

    /**
     * Set the vlanId property: Vlan Identifier of the Network Fabric. Example: 501.
     * 
     * @param vlanId the vlanId value to set.
     * @return the L2IsolationDomainProperties object itself.
     */
    public L2IsolationDomainProperties withVlanId(int vlanId) {
        this.vlanId = vlanId;
        return this;
    }

    /**
     * Get the mtu property: Maximum transmission unit. Default value is 1500.
     * 
     * @return the mtu value.
     */
    public Integer mtu() {
        return this.mtu;
    }

    /**
     * Set the mtu property: Maximum transmission unit. Default value is 1500.
     * 
     * @param mtu the mtu value to set.
     * @return the L2IsolationDomainProperties object itself.
     */
    public L2IsolationDomainProperties withMtu(Integer mtu) {
        this.mtu = mtu;
        return this;
    }

    /**
     * Get the configurationState property: Configuration state of the resource.
     * 
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.configurationState;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the administrativeState property: Administrative state of the resource.
     * 
     * @return the administrativeState value.
     */
    public AdministrativeState administrativeState() {
        return this.administrativeState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public L2IsolationDomainProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (networkFabricId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkFabricId in model L2IsolationDomainProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(L2IsolationDomainProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeStringField("networkFabricId", this.networkFabricId);
        jsonWriter.writeIntField("vlanId", this.vlanId);
        jsonWriter.writeNumberField("mtu", this.mtu);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of L2IsolationDomainProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of L2IsolationDomainProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the L2IsolationDomainProperties.
     */
    public static L2IsolationDomainProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            L2IsolationDomainProperties deserializedL2IsolationDomainProperties = new L2IsolationDomainProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedL2IsolationDomainProperties.withAnnotation(reader.getString());
                } else if ("networkFabricId".equals(fieldName)) {
                    deserializedL2IsolationDomainProperties.networkFabricId = reader.getString();
                } else if ("vlanId".equals(fieldName)) {
                    deserializedL2IsolationDomainProperties.vlanId = reader.getInt();
                } else if ("mtu".equals(fieldName)) {
                    deserializedL2IsolationDomainProperties.mtu = reader.getNullable(JsonReader::getInt);
                } else if ("configurationState".equals(fieldName)) {
                    deserializedL2IsolationDomainProperties.configurationState
                        = ConfigurationState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedL2IsolationDomainProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("administrativeState".equals(fieldName)) {
                    deserializedL2IsolationDomainProperties.administrativeState
                        = AdministrativeState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedL2IsolationDomainProperties;
        });
    }
}
