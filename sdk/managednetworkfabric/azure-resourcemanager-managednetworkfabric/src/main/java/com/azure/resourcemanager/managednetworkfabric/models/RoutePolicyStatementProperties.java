// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Route Policy Statement properties.
 */
@Fluent
public final class RoutePolicyStatementProperties extends AnnotationResource {
    /*
     * Sequence to insert to/delete from existing route.
     */
    private long sequenceNumber;

    /*
     * Route policy condition properties.
     */
    private StatementConditionProperties condition;

    /*
     * Route policy action properties.
     */
    private StatementActionProperties action;

    /**
     * Creates an instance of RoutePolicyStatementProperties class.
     */
    public RoutePolicyStatementProperties() {
    }

    /**
     * Get the sequenceNumber property: Sequence to insert to/delete from existing route.
     * 
     * @return the sequenceNumber value.
     */
    public long sequenceNumber() {
        return this.sequenceNumber;
    }

    /**
     * Set the sequenceNumber property: Sequence to insert to/delete from existing route.
     * 
     * @param sequenceNumber the sequenceNumber value to set.
     * @return the RoutePolicyStatementProperties object itself.
     */
    public RoutePolicyStatementProperties withSequenceNumber(long sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }

    /**
     * Get the condition property: Route policy condition properties.
     * 
     * @return the condition value.
     */
    public StatementConditionProperties condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Route policy condition properties.
     * 
     * @param condition the condition value to set.
     * @return the RoutePolicyStatementProperties object itself.
     */
    public RoutePolicyStatementProperties withCondition(StatementConditionProperties condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the action property: Route policy action properties.
     * 
     * @return the action value.
     */
    public StatementActionProperties action() {
        return this.action;
    }

    /**
     * Set the action property: Route policy action properties.
     * 
     * @param action the action value to set.
     * @return the RoutePolicyStatementProperties object itself.
     */
    public RoutePolicyStatementProperties withAction(StatementActionProperties action) {
        this.action = action;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoutePolicyStatementProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (condition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property condition in model RoutePolicyStatementProperties"));
        } else {
            condition().validate();
        }
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property action in model RoutePolicyStatementProperties"));
        } else {
            action().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RoutePolicyStatementProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("annotation", annotation());
        jsonWriter.writeLongField("sequenceNumber", this.sequenceNumber);
        jsonWriter.writeJsonField("condition", this.condition);
        jsonWriter.writeJsonField("action", this.action);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutePolicyStatementProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutePolicyStatementProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RoutePolicyStatementProperties.
     */
    public static RoutePolicyStatementProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutePolicyStatementProperties deserializedRoutePolicyStatementProperties
                = new RoutePolicyStatementProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("annotation".equals(fieldName)) {
                    deserializedRoutePolicyStatementProperties.withAnnotation(reader.getString());
                } else if ("sequenceNumber".equals(fieldName)) {
                    deserializedRoutePolicyStatementProperties.sequenceNumber = reader.getLong();
                } else if ("condition".equals(fieldName)) {
                    deserializedRoutePolicyStatementProperties.condition
                        = StatementConditionProperties.fromJson(reader);
                } else if ("action".equals(fieldName)) {
                    deserializedRoutePolicyStatementProperties.action = StatementActionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutePolicyStatementProperties;
        });
    }
}
