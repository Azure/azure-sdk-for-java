/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsServicesServiceMembers;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsserviceServiceMemberModel;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsserviceServiceMember;

class AddsServicesServiceMembersImpl extends WrapperImpl<AddsServicesServiceMembersInner> implements AddsServicesServiceMembers {
    private final ADHybridHealthServiceManager manager;

    AddsServicesServiceMembersImpl(ADHybridHealthServiceManager manager) {
        super(manager.inner().addsServicesServiceMembers());
        this.manager = manager;
    }

    public ADHybridHealthServiceManager manager() {
        return this.manager;
    }

    private AddsserviceServiceMemberModelImpl wrapAddsserviceServiceMemberModelModel(ServiceMemberInner inner) {
        return  new AddsserviceServiceMemberModelImpl(inner, manager());
    }

    @Override
    public Observable<AddsserviceServiceMemberModel> listAsync(final String serviceName) {
        AddsServicesServiceMembersInner client = this.inner();
        return client.listAsync(serviceName)
        .flatMapIterable(new Func1<Page<ServiceMemberInner>, Iterable<ServiceMemberInner>>() {
            @Override
            public Iterable<ServiceMemberInner> call(Page<ServiceMemberInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServiceMemberInner, AddsserviceServiceMemberModel>() {
            @Override
            public AddsserviceServiceMemberModel call(ServiceMemberInner inner) {
                return wrapAddsserviceServiceMemberModelModel(inner);
            }
        });
    }

    @Override
    public Observable<AddsserviceServiceMember> addAsync(String serviceName, ServiceMemberInner serviceMember) {
        AddsServicesServiceMembersInner client = this.inner();
        return client.addAsync(serviceName, serviceMember)
        .map(new Func1<ServiceMemberInner, AddsserviceServiceMember>() {
            @Override
            public AddsserviceServiceMember call(ServiceMemberInner inner) {
                return new AddsserviceServiceMemberImpl(inner, manager());
            }
        });
    }

}
