/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Alerts;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsserviceAlert;

class AlertsImpl extends WrapperImpl<AlertsInner> implements Alerts {
    private final ADHybridHealthServiceManager manager;

    AlertsImpl(ADHybridHealthServiceManager manager) {
        super(manager.inner().alerts());
        this.manager = manager;
    }

    public ADHybridHealthServiceManager manager() {
        return this.manager;
    }

    private AddsserviceAlertImpl wrapModel(AlertInner inner) {
        return  new AddsserviceAlertImpl(inner, manager());
    }

    @Override
    public Observable<AddsserviceAlert> listAddsAlertsAsync(final String serviceName) {
        AlertsInner client = this.inner();
        return client.listAddsAlertsAsync(serviceName)
        .flatMapIterable(new Func1<Page<AlertInner>, Iterable<AlertInner>>() {
            @Override
            public Iterable<AlertInner> call(Page<AlertInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AlertInner, AddsserviceAlert>() {
            @Override
            public AddsserviceAlert call(AlertInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
