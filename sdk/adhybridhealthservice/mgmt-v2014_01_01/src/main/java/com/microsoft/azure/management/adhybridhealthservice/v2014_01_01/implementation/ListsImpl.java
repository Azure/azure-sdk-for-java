/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Lists;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.IPAddressAggregate;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.IPAddressAggregateSetting;

class ListsImpl extends WrapperImpl<ListsInner> implements Lists {
    private final ADHybridHealthServiceManager manager;

    ListsImpl(ADHybridHealthServiceManager manager) {
        super(manager.inner().lists());
        this.manager = manager;
    }

    public ADHybridHealthServiceManager manager() {
        return this.manager;
    }

    private IPAddressAggregateImpl wrapIPAddressAggregateModel(IPAddressAggregateInner inner) {
        return  new IPAddressAggregateImpl(inner, manager());
    }

    @Override
    public Observable<IPAddressAggregate> iPAddressAggregatesByServiceAsync(final String serviceName) {
        ListsInner client = this.inner();
        return client.iPAddressAggregatesByServiceAsync(serviceName)
        .flatMapIterable(new Func1<Page<IPAddressAggregateInner>, Iterable<IPAddressAggregateInner>>() {
            @Override
            public Iterable<IPAddressAggregateInner> call(Page<IPAddressAggregateInner> page) {
                return page.items();
            }
        })
        .map(new Func1<IPAddressAggregateInner, IPAddressAggregate>() {
            @Override
            public IPAddressAggregate call(IPAddressAggregateInner inner) {
                return wrapIPAddressAggregateModel(inner);
            }
        });
    }

    @Override
    public Observable<IPAddressAggregateSetting> iPAddressAggregateSettingsAsync(String serviceName) {
        ListsInner client = this.inner();
        return client.iPAddressAggregateSettingsAsync(serviceName)
        .map(new Func1<IPAddressAggregateSettingInner, IPAddressAggregateSetting>() {
            @Override
            public IPAddressAggregateSetting call(IPAddressAggregateSettingInner inner) {
                return new IPAddressAggregateSettingImpl(inner, manager());
            }
        });
    }

}
