/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Lists.
 */
public class ListsInner {
    /** The Retrofit service to perform REST calls. */
    private ListsService service;
    /** The service client containing this operation class. */
    private ADHybridHealthServiceImpl client;

    /**
     * Initializes an instance of ListsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ListsInner(Retrofit retrofit, ADHybridHealthServiceImpl client) {
        this.service = retrofit.create(ListsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Lists to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ListsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Lists iPAddressAggregatesByService" })
        @GET("providers/Microsoft.ADHybridHealthService/services/{serviceName}/ipAddressAggregates")
        Observable<Response<ResponseBody>> iPAddressAggregatesByService(@Path("serviceName") String serviceName, @Query("skiptoken") String skiptoken, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Lists iPAddressAggregateSettings" })
        @GET("providers/Microsoft.ADHybridHealthService/services/{serviceName}/ipAddressAggregateSettings")
        Observable<Response<ResponseBody>> iPAddressAggregateSettings(@Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Lists iPAddressAggregatesByServiceNext" })
        @GET
        Observable<Response<ResponseBody>> iPAddressAggregatesByServiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IPAddressAggregateInner&gt; object if successful.
     */
    public PagedList<IPAddressAggregateInner> iPAddressAggregatesByService(final String serviceName) {
        ServiceResponse<Page<IPAddressAggregateInner>> response = iPAddressAggregatesByServiceSinglePageAsync(serviceName).toBlocking().single();
        return new PagedList<IPAddressAggregateInner>(response.body()) {
            @Override
            public Page<IPAddressAggregateInner> nextPage(String nextPageLink) {
                return iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IPAddressAggregateInner>> iPAddressAggregatesByServiceAsync(final String serviceName, final ListOperationCallback<IPAddressAggregateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            iPAddressAggregatesByServiceSinglePageAsync(serviceName),
            new Func1<String, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(String nextPageLink) {
                    return iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IPAddressAggregateInner&gt; object
     */
    public Observable<Page<IPAddressAggregateInner>> iPAddressAggregatesByServiceAsync(final String serviceName) {
        return iPAddressAggregatesByServiceWithServiceResponseAsync(serviceName)
            .map(new Func1<ServiceResponse<Page<IPAddressAggregateInner>>, Page<IPAddressAggregateInner>>() {
                @Override
                public Page<IPAddressAggregateInner> call(ServiceResponse<Page<IPAddressAggregateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IPAddressAggregateInner&gt; object
     */
    public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> iPAddressAggregatesByServiceWithServiceResponseAsync(final String serviceName) {
        return iPAddressAggregatesByServiceSinglePageAsync(serviceName)
            .concatMap(new Func1<ServiceResponse<Page<IPAddressAggregateInner>>, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(ServiceResponse<Page<IPAddressAggregateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(iPAddressAggregatesByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IPAddressAggregateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> iPAddressAggregatesByServiceSinglePageAsync(final String serviceName) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skiptoken = null;
        return service.iPAddressAggregatesByService(serviceName, skiptoken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IPAddressAggregateInner>> result = iPAddressAggregatesByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IPAddressAggregateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @param skiptoken A continuationtoken value returned in paginated result to load different pages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IPAddressAggregateInner&gt; object if successful.
     */
    public PagedList<IPAddressAggregateInner> iPAddressAggregatesByService(final String serviceName, final String skiptoken) {
        ServiceResponse<Page<IPAddressAggregateInner>> response = iPAddressAggregatesByServiceSinglePageAsync(serviceName, skiptoken).toBlocking().single();
        return new PagedList<IPAddressAggregateInner>(response.body()) {
            @Override
            public Page<IPAddressAggregateInner> nextPage(String nextPageLink) {
                return iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @param skiptoken A continuationtoken value returned in paginated result to load different pages.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IPAddressAggregateInner>> iPAddressAggregatesByServiceAsync(final String serviceName, final String skiptoken, final ListOperationCallback<IPAddressAggregateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            iPAddressAggregatesByServiceSinglePageAsync(serviceName, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(String nextPageLink) {
                    return iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @param skiptoken A continuationtoken value returned in paginated result to load different pages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IPAddressAggregateInner&gt; object
     */
    public Observable<Page<IPAddressAggregateInner>> iPAddressAggregatesByServiceAsync(final String serviceName, final String skiptoken) {
        return iPAddressAggregatesByServiceWithServiceResponseAsync(serviceName, skiptoken)
            .map(new Func1<ServiceResponse<Page<IPAddressAggregateInner>>, Page<IPAddressAggregateInner>>() {
                @Override
                public Page<IPAddressAggregateInner> call(ServiceResponse<Page<IPAddressAggregateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param serviceName The name of the service.
     * @param skiptoken A continuationtoken value returned in paginated result to load different pages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IPAddressAggregateInner&gt; object
     */
    public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> iPAddressAggregatesByServiceWithServiceResponseAsync(final String serviceName, final String skiptoken) {
        return iPAddressAggregatesByServiceSinglePageAsync(serviceName, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<IPAddressAggregateInner>>, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(ServiceResponse<Page<IPAddressAggregateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(iPAddressAggregatesByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
    ServiceResponse<PageImpl<IPAddressAggregateInner>> * @param serviceName The name of the service.
    ServiceResponse<PageImpl<IPAddressAggregateInner>> * @param skiptoken A continuationtoken value returned in paginated result to load different pages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IPAddressAggregateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> iPAddressAggregatesByServiceSinglePageAsync(final String serviceName, final String skiptoken) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.iPAddressAggregatesByService(serviceName, skiptoken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IPAddressAggregateInner>> result = iPAddressAggregatesByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IPAddressAggregateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IPAddressAggregateInner>> iPAddressAggregatesByServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IPAddressAggregateInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IPAddressAggregateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the IP address aggregate settings.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IPAddressAggregateSettingInner object if successful.
     */
    public IPAddressAggregateSettingInner iPAddressAggregateSettings(String serviceName) {
        return iPAddressAggregateSettingsWithServiceResponseAsync(serviceName).toBlocking().single().body();
    }

    /**
     * Gets the IP address aggregate settings.
     *
     * @param serviceName The name of the service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IPAddressAggregateSettingInner> iPAddressAggregateSettingsAsync(String serviceName, final ServiceCallback<IPAddressAggregateSettingInner> serviceCallback) {
        return ServiceFuture.fromResponse(iPAddressAggregateSettingsWithServiceResponseAsync(serviceName), serviceCallback);
    }

    /**
     * Gets the IP address aggregate settings.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IPAddressAggregateSettingInner object
     */
    public Observable<IPAddressAggregateSettingInner> iPAddressAggregateSettingsAsync(String serviceName) {
        return iPAddressAggregateSettingsWithServiceResponseAsync(serviceName).map(new Func1<ServiceResponse<IPAddressAggregateSettingInner>, IPAddressAggregateSettingInner>() {
            @Override
            public IPAddressAggregateSettingInner call(ServiceResponse<IPAddressAggregateSettingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the IP address aggregate settings.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IPAddressAggregateSettingInner object
     */
    public Observable<ServiceResponse<IPAddressAggregateSettingInner>> iPAddressAggregateSettingsWithServiceResponseAsync(String serviceName) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.iPAddressAggregateSettings(serviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IPAddressAggregateSettingInner>>>() {
                @Override
                public Observable<ServiceResponse<IPAddressAggregateSettingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IPAddressAggregateSettingInner> clientResponse = iPAddressAggregateSettingsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IPAddressAggregateSettingInner> iPAddressAggregateSettingsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IPAddressAggregateSettingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IPAddressAggregateSettingInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IPAddressAggregateInner&gt; object if successful.
     */
    public PagedList<IPAddressAggregateInner> iPAddressAggregatesByServiceNext(final String nextPageLink) {
        ServiceResponse<Page<IPAddressAggregateInner>> response = iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IPAddressAggregateInner>(response.body()) {
            @Override
            public Page<IPAddressAggregateInner> nextPage(String nextPageLink) {
                return iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IPAddressAggregateInner>> iPAddressAggregatesByServiceNextAsync(final String nextPageLink, final ServiceFuture<List<IPAddressAggregateInner>> serviceFuture, final ListOperationCallback<IPAddressAggregateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(String nextPageLink) {
                    return iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IPAddressAggregateInner&gt; object
     */
    public Observable<Page<IPAddressAggregateInner>> iPAddressAggregatesByServiceNextAsync(final String nextPageLink) {
        return iPAddressAggregatesByServiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IPAddressAggregateInner>>, Page<IPAddressAggregateInner>>() {
                @Override
                public Page<IPAddressAggregateInner> call(ServiceResponse<Page<IPAddressAggregateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IPAddressAggregateInner&gt; object
     */
    public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> iPAddressAggregatesByServiceNextWithServiceResponseAsync(final String nextPageLink) {
        return iPAddressAggregatesByServiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IPAddressAggregateInner>>, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(ServiceResponse<Page<IPAddressAggregateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(iPAddressAggregatesByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the IP address aggregates for a given service.
     *
    ServiceResponse<PageImpl<IPAddressAggregateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IPAddressAggregateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> iPAddressAggregatesByServiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.iPAddressAggregatesByServiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IPAddressAggregateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IPAddressAggregateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IPAddressAggregateInner>> result = iPAddressAggregatesByServiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IPAddressAggregateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IPAddressAggregateInner>> iPAddressAggregatesByServiceNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IPAddressAggregateInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IPAddressAggregateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
