/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsServices;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServicememberAddsserviceAlert;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsserviceMetricSets;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceItem;
import rx.Completable;
import java.util.List;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceProperties;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ForestSummary;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.MetricMetadata;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ReplicationSummary;

class AddsServicesImpl extends WrapperImpl<AddsServicesInner> implements AddsServices {
    private final ADHybridHealthServiceManager manager;

    AddsServicesImpl(ADHybridHealthServiceManager manager) {
        super(manager.inner().addsServices());
        this.manager = manager;
    }

    public ADHybridHealthServiceManager manager() {
        return this.manager;
    }

    private ServicememberAddsserviceAlertImpl wrapServicememberAddsserviceAlertModel(AlertInner inner) {
        return  new ServicememberAddsserviceAlertImpl(inner, manager());
    }

    private AddsserviceMetricSetsImpl wrapAddsserviceMetricSetsModel(MetricSetsInner inner) {
        return  new AddsserviceMetricSetsImpl(inner, manager());
    }

    private ReplicationSummaryImpl wrapReplicationSummaryModel(ReplicationSummaryInner inner) {
        return  new ReplicationSummaryImpl(inner, manager());
    }

    private Observable<MetricSetsInner> getMetricSetsInnerUsingAddsServicesInnerAsync(String id) {
        String serviceName = IdParsingUtils.getValueFromIdByName(id, "addsservices");
        String metricName = IdParsingUtils.getValueFromIdByName(id, "metrics");
        String groupName = IdParsingUtils.getValueFromIdByName(id, "groups");
        AddsServicesInner client = this.inner();
        return client.getMetricsAsync(serviceName, metricName, groupName);
    }

    @Override
    public Observable<ServicememberAddsserviceAlert> listServerAlertsAsync(final UUID serviceMemberId, final String serviceName) {
        AddsServicesInner client = this.inner();
        return client.listServerAlertsAsync(serviceMemberId, serviceName)
        .flatMapIterable(new Func1<Page<AlertInner>, Iterable<AlertInner>>() {
            @Override
            public Iterable<AlertInner> call(Page<AlertInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AlertInner, ServicememberAddsserviceAlert>() {
            @Override
            public ServicememberAddsserviceAlert call(AlertInner inner) {
                return wrapServicememberAddsserviceAlertModel(inner);
            }
        });
    }

    @Override
    public Observable<AddsserviceMetricSets> getMetricsAsync(String serviceName, String metricName, String groupName) {
        AddsServicesInner client = this.inner();
        return client.getMetricsAsync(serviceName, metricName, groupName)
        .flatMap(new Func1<MetricSetsInner, Observable<AddsserviceMetricSets>>() {
            @Override
            public Observable<AddsserviceMetricSets> call(MetricSetsInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((AddsserviceMetricSets)wrapAddsserviceMetricSetsModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<ServiceItem> listMetricsAverageAsync(final String serviceName, final String metricName, final String groupName) {
        AddsServicesInner client = this.inner();
        return client.listMetricsAverageAsync(serviceName, metricName, groupName)
        .flatMapIterable(new Func1<Page<ItemInner>, Iterable<ItemInner>>() {
            @Override
            public Iterable<ItemInner> call(Page<ItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ItemInner, ServiceItem>() {
            @Override
            public ServiceItem call(ItemInner inner) {
                return new ServiceItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServiceItem> listMetricsSumAsync(final String serviceName, final String metricName, final String groupName) {
        AddsServicesInner client = this.inner();
        return client.listMetricsSumAsync(serviceName, metricName, groupName)
        .flatMapIterable(new Func1<Page<ItemInner>, Iterable<ItemInner>>() {
            @Override
            public Iterable<ItemInner> call(Page<ItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ItemInner, ServiceItem>() {
            @Override
            public ServiceItem call(ItemInner inner) {
                return new ServiceItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AddsserviceMetricSets> getMetricMetadataForGroupAsync(String serviceName, String metricName, String groupName) {
        AddsServicesInner client = this.inner();
        return client.getMetricMetadataForGroupAsync(serviceName, metricName, groupName)
        .map(new Func1<MetricSetsInner, AddsserviceMetricSets>() {
            @Override
            public AddsserviceMetricSets call(MetricSetsInner inner) {
                return new AddsserviceMetricSetsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServiceProperties> getAsync(String serviceName) {
        AddsServicesInner client = this.inner();
        return client.getAsync(serviceName)
        .map(new Func1<ServicePropertiesInner, ServiceProperties>() {
            @Override
            public ServiceProperties call(ServicePropertiesInner inner) {
                return new ServicePropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String serviceName) {
        AddsServicesInner client = this.inner();
        return client.deleteAsync(serviceName).toCompletable();
    }

    @Override
    public Observable<ServiceProperties> updateAsync(String serviceName, ServicePropertiesInner service) {
        AddsServicesInner client = this.inner();
        return client.updateAsync(serviceName, service)
        .map(new Func1<ServicePropertiesInner, ServiceProperties>() {
            @Override
            public ServiceProperties call(ServicePropertiesInner inner) {
                return new ServicePropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ForestSummary> getForestSummaryAsync(String serviceName) {
        AddsServicesInner client = this.inner();
        return client.getForestSummaryAsync(serviceName)
        .map(new Func1<ForestSummaryInner, ForestSummary>() {
            @Override
            public ForestSummary call(ForestSummaryInner inner) {
                return new ForestSummaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MetricMetadata> listMetricMetadataAsync(final String serviceName) {
        AddsServicesInner client = this.inner();
        return client.listMetricMetadataAsync(serviceName)
        .flatMapIterable(new Func1<Page<MetricMetadataInner>, Iterable<MetricMetadataInner>>() {
            @Override
            public Iterable<MetricMetadataInner> call(Page<MetricMetadataInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MetricMetadataInner, MetricMetadata>() {
            @Override
            public MetricMetadata call(MetricMetadataInner inner) {
                return new MetricMetadataImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MetricMetadata> getMetricMetadataAsync(String serviceName, String metricName) {
        AddsServicesInner client = this.inner();
        return client.getMetricMetadataAsync(serviceName, metricName)
        .map(new Func1<MetricMetadataInner, MetricMetadata>() {
            @Override
            public MetricMetadata call(MetricMetadataInner inner) {
                return new MetricMetadataImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationSummary> listReplicationSummaryAsync(String serviceName, boolean isGroupbySite, String query) {
        AddsServicesInner client = this.inner();
        return client.listReplicationSummaryAsync(serviceName, isGroupbySite, query)
        .flatMap(new Func1<List<ReplicationSummaryInner>, Observable<ReplicationSummaryInner>>() {
            @Override
            public Observable<ReplicationSummaryInner> call(List<ReplicationSummaryInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ReplicationSummaryInner, ReplicationSummary>() {
            @Override
            public ReplicationSummary call(ReplicationSummaryInner inner) {
                return new ReplicationSummaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServiceProperties> listPremiumServicesAsync() {
        AddsServicesInner client = this.inner();
        return client.listPremiumServicesAsync()
        .flatMapIterable(new Func1<Page<ServicePropertiesInner>, Iterable<ServicePropertiesInner>>() {
            @Override
            public Iterable<ServicePropertiesInner> call(Page<ServicePropertiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServicePropertiesInner, ServiceProperties>() {
            @Override
            public ServiceProperties call(ServicePropertiesInner inner) {
                return new ServicePropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServiceProperties> listAsync() {
        AddsServicesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ServicePropertiesInner>, Iterable<ServicePropertiesInner>>() {
            @Override
            public Iterable<ServicePropertiesInner> call(Page<ServicePropertiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServicePropertiesInner, ServiceProperties>() {
            @Override
            public ServiceProperties call(ServicePropertiesInner inner) {
                return new ServicePropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServiceProperties> addAsync(ServicePropertiesInner service) {
        AddsServicesInner client = this.inner();
        return client.addAsync(service)
        .map(new Func1<ServicePropertiesInner, ServiceProperties>() {
            @Override
            public ServiceProperties call(ServicePropertiesInner inner) {
                return new ServicePropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationSummary> listReplicationDetailsAsync(String serviceName) {
        AddsServicesInner client = this.inner();
        return client.listReplicationDetailsAsync(serviceName)
        .flatMap(new Func1<List<ReplicationSummaryInner>, Observable<ReplicationSummaryInner>>() {
            @Override
            public Observable<ReplicationSummaryInner> call(List<ReplicationSummaryInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ReplicationSummaryInner, ReplicationSummary>() {
            @Override
            public ReplicationSummary call(ReplicationSummaryInner inner) {
                return wrapReplicationSummaryModel(inner);
            }
        });
    }

}
