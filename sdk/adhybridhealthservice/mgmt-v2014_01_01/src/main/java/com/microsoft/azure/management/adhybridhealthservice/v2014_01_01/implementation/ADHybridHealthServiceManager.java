/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsServices;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Alerts;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Configurations;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Dimensions;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsServiceMembers;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AdDomainServiceMembers;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsServicesUserPreferences;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsServicesReplicationStatus;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.AddsServicesServiceMembers;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Operations;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Reports;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Services;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceMembers;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Lists;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Updates;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure ADHybridHealthService resource management.
 */
public final class ADHybridHealthServiceManager extends ManagerCore<ADHybridHealthServiceManager, ADHybridHealthServiceImpl> {
    private AddsServices addsServices;
    private Alerts alerts;
    private Configurations configurations;
    private Dimensions dimensions;
    private AddsServiceMembers addsServiceMembers;
    private AdDomainServiceMembers adDomainServiceMembers;
    private AddsServicesUserPreferences addsServicesUserPreferences;
    private AddsServicesReplicationStatus addsServicesReplicationStatus;
    private AddsServicesServiceMembers addsServicesServiceMembers;
    private Operations operations;
    private Reports reports;
    private Services services;
    private ServiceMembers serviceMembers;
    private Lists lists;
    private Updates updates;
    /**
    * Get a Configurable instance that can be used to create ADHybridHealthServiceManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new ADHybridHealthServiceManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of ADHybridHealthServiceManager that exposes ADHybridHealthService resource management API entry points.
    *
    * @param credentials the credentials to use
    * @return the ADHybridHealthServiceManager
    */
    public static ADHybridHealthServiceManager authenticate(AzureTokenCredentials credentials) {
        return new ADHybridHealthServiceManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build());
    }
    /**
    * Creates an instance of ADHybridHealthServiceManager that exposes ADHybridHealthService resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @return the ADHybridHealthServiceManager
    */
    public static ADHybridHealthServiceManager authenticate(RestClient restClient) {
        return new ADHybridHealthServiceManager(restClient);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of ADHybridHealthServiceManager that exposes ADHybridHealthService management API entry points.
        *
        * @param credentials the credentials to use
        * @return the interface exposing ADHybridHealthService management API entry points that work across subscriptions
        */
        ADHybridHealthServiceManager authenticate(AzureTokenCredentials credentials);
    }

    /**
     * @return Entry point to manage AddsServices.
     */
    public AddsServices addsServices() {
        if (this.addsServices == null) {
            this.addsServices = new AddsServicesImpl(this);
        }
        return this.addsServices;
    }

    /**
     * @return Entry point to manage Alerts.
     */
    public Alerts alerts() {
        if (this.alerts == null) {
            this.alerts = new AlertsImpl(this);
        }
        return this.alerts;
    }

    /**
     * @return Entry point to manage Configurations.
     */
    public Configurations configurations() {
        if (this.configurations == null) {
            this.configurations = new ConfigurationsImpl(this);
        }
        return this.configurations;
    }

    /**
     * @return Entry point to manage Dimensions.
     */
    public Dimensions dimensions() {
        if (this.dimensions == null) {
            this.dimensions = new DimensionsImpl(this);
        }
        return this.dimensions;
    }

    /**
     * @return Entry point to manage AddsServiceMembers.
     */
    public AddsServiceMembers addsServiceMembers() {
        if (this.addsServiceMembers == null) {
            this.addsServiceMembers = new AddsServiceMembersImpl(this);
        }
        return this.addsServiceMembers;
    }

    /**
     * @return Entry point to manage AdDomainServiceMembers.
     */
    public AdDomainServiceMembers adDomainServiceMembers() {
        if (this.adDomainServiceMembers == null) {
            this.adDomainServiceMembers = new AdDomainServiceMembersImpl(this);
        }
        return this.adDomainServiceMembers;
    }

    /**
     * @return Entry point to manage AddsServicesUserPreferences.
     */
    public AddsServicesUserPreferences addsServicesUserPreferences() {
        if (this.addsServicesUserPreferences == null) {
            this.addsServicesUserPreferences = new AddsServicesUserPreferencesImpl(this);
        }
        return this.addsServicesUserPreferences;
    }

    /**
     * @return Entry point to manage AddsServicesReplicationStatus.
     */
    public AddsServicesReplicationStatus addsServicesReplicationStatus() {
        if (this.addsServicesReplicationStatus == null) {
            this.addsServicesReplicationStatus = new AddsServicesReplicationStatusImpl(this);
        }
        return this.addsServicesReplicationStatus;
    }

    /**
     * @return Entry point to manage AddsServicesServiceMembers.
     */
    public AddsServicesServiceMembers addsServicesServiceMembers() {
        if (this.addsServicesServiceMembers == null) {
            this.addsServicesServiceMembers = new AddsServicesServiceMembersImpl(this);
        }
        return this.addsServicesServiceMembers;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage Reports.
     */
    public Reports reports() {
        if (this.reports == null) {
            this.reports = new ReportsImpl(this);
        }
        return this.reports;
    }

    /**
     * @return Entry point to manage Services.
     */
    public Services services() {
        if (this.services == null) {
            this.services = new ServicesImpl(this);
        }
        return this.services;
    }

    /**
     * @return Entry point to manage ServiceMembers.
     */
    public ServiceMembers serviceMembers() {
        if (this.serviceMembers == null) {
            this.serviceMembers = new ServiceMembersImpl(this);
        }
        return this.serviceMembers;
    }

    /**
     * @return Entry point to manage Lists.
     */
    public Lists lists() {
        if (this.lists == null) {
            this.lists = new ListsImpl(this);
        }
        return this.lists;
    }

    /**
     * @return Entry point to manage Updates.
     */
    public Updates updates() {
        if (this.updates == null) {
            this.updates = new UpdatesImpl(this);
        }
        return this.updates;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public ADHybridHealthServiceManager authenticate(AzureTokenCredentials credentials) {
           return ADHybridHealthServiceManager.authenticate(buildRestClient(credentials));
        }
     }
    private ADHybridHealthServiceManager(RestClient restClient) {
        super(
            restClient,
            null,
            new ADHybridHealthServiceImpl(restClient));
    }
}
