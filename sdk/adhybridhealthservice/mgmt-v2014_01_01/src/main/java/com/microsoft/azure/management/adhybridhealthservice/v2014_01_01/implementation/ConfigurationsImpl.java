/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Configurations;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceItem;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Tenant;

class ConfigurationsImpl extends WrapperImpl<ConfigurationsInner> implements Configurations {
    private final ADHybridHealthServiceManager manager;

    ConfigurationsImpl(ADHybridHealthServiceManager manager) {
        super(manager.inner().configurations());
        this.manager = manager;
    }

    public ADHybridHealthServiceManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServiceItem> listAddsConfigurationsAsync(final String serviceName) {
        ConfigurationsInner client = this.inner();
        return client.listAddsConfigurationsAsync(serviceName)
        .flatMapIterable(new Func1<Page<ItemInner>, Iterable<ItemInner>>() {
            @Override
            public Iterable<ItemInner> call(Page<ItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ItemInner, ServiceItem>() {
            @Override
            public ServiceItem call(ItemInner inner) {
                return new ServiceItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Tenant> addAsync() {
        ConfigurationsInner client = this.inner();
        return client.addAsync()
        .map(new Func1<TenantInner, Tenant>() {
            @Override
            public Tenant call(TenantInner inner) {
                return new TenantImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Tenant> getAsync() {
        ConfigurationsInner client = this.inner();
        return client.getAsync()
        .map(new Func1<TenantInner, Tenant>() {
            @Override
            public Tenant call(TenantInner inner) {
                return new TenantImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Tenant> updateAsync(TenantInner tenant) {
        ConfigurationsInner client = this.inner();
        return client.updateAsync(tenant)
        .map(new Func1<TenantInner, Tenant>() {
            @Override
            public Tenant call(TenantInner inner) {
                return new TenantImpl(inner, manager());
            }
        });
    }

}
