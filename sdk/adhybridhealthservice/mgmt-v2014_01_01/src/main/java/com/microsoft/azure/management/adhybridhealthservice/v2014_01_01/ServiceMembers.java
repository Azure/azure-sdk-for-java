/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01;

import rx.Observable;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceServiceMember;
import rx.Completable;
import java.util.UUID;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation.ServiceMemberInner;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServicememberServiceAlert;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.Connector;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceCredential;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServicememberServiceItem;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServicememberServiceExportStatus;

/**
 * Type representing ServiceMembers.
 */
public interface ServiceMembers {
    /**
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceServiceMember> getAsync(String serviceName, UUID serviceMemberId);

    /**
     * Gets the details of the servers, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceServiceMember> listAsync(final String serviceName);

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String serviceName, UUID serviceMemberId);

    /**
     * Deletes the data uploaded by the server to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteDataAsync(String serviceName, UUID serviceMemberId);

    /**
     * Gets the global configuration.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<GlobalConfiguration> listGlobalConfigurationAsync(String serviceName, String serviceMemberId);

    /**
     * Gets the service configuration.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceConfiguration> getServiceConfigurationAsync(String serviceName, String serviceMemberId);

    /**
     * Onboards  a server, for a given service, to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service under which the server is to be onboarded.
     * @param serviceMember The server object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AddsserviceServiceMember> addAsync(String serviceName, ServiceMemberInner serviceMember);

    /**
     * Gets the details of an alert for a given service and server combination.
     *
     * @param serviceMemberId The server Id for which the alert details needs to be queried.
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServicememberServiceAlert> listAlertsAsync(final UUID serviceMemberId, final String serviceName);

    /**
     * Gets the connector details for a service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Connector> listConnectorsAsync(String serviceName, UUID serviceMemberId);

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceCredential> listCredentialsAsync(String serviceName, UUID serviceMemberId);

    /**
     * Gets the last time when the server uploaded data to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServicememberServiceItem> listDataFreshnessAsync(String serviceName, UUID serviceMemberId);

    /**
     * Gets the export status.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServicememberServiceExportStatus> listExportStatusAsync(final String serviceName, final UUID serviceMemberId);

    /**
     * Gets the server related metrics for a given metric and group combination.
     *
     * @param serviceName The name of the service.
     * @param metricName The metric name
     * @param groupName The group name
     * @param serviceMemberId The server id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServicememberServiceMetricSets> getMetricsAsync(String serviceName, String metricName, String groupName, UUID serviceMemberId);

    /**
     * Gets the list of connectors and run profile names.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The service member id.
     * @param metricName The name of the metric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConnectorMetadata> getConnectorMetadataAsync(String serviceName, UUID serviceMemberId, String metricName);

}
