/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.v2014_01_01;

import rx.Observable;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceItem;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceExportStatus;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.ServiceAlert;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation.AlertFeedbackInner;
import rx.Completable;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation.ServicePropertiesInner;
import com.microsoft.azure.management.adhybridhealthservice.v2014_01_01.implementation.ItemInner;

/**
 * Type representing Services.
 */
public interface Services {
    /**
     * Gets the service level monitoring configurations.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceItem> listMonitoringConfigurationsAsync(String serviceName);

    /**
     * Gets the export status.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceExportStatus> listExportStatusAsync(final String serviceName);

    /**
     * Gets the alerts for a given service.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceAlert> listAlertsAsync(final String serviceName);

    /**
     * Adds an alert feedback submitted by customer.
     *
     * @param serviceName The name of the service.
     * @param alertFeedback The alert feedback.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AlertFeedback> addAlertFeedbackAsync(String serviceName, AlertFeedbackInner alertFeedback);

    /**
     * Gets a list of all alert feedback for a given tenant and alert type.
     *
     * @param serviceName The name of the service.
     * @param shortName The name of the alert.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AlertFeedback> listAlertFeedbackAsync(String serviceName, String shortName);

    /**
     * Gets the details of services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceProperties> listPremiumAsync();

    /**
     * Gets the details of a service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceProperties> getAsync(String serviceName);

    /**
     * Deletes a service which is onboarded to Azure Active Directory Connect Health.
     *
     * @param serviceName The name of the service which needs to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String serviceName);

    /**
     * Updates the service properties of an onboarded service.
     *
     * @param serviceName The name of the service which needs to be deleted.
     * @param service The service object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceProperties> updateAsync(String serviceName, ServicePropertiesInner service);

    /**
     * Checks if the service has all the pre-requisites met to use a feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Result> getFeatureAvailibilityAsync(String serviceName, String featureName);

    /**
     * Gets the service related metrics information.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MetricMetadata> listMetricMetadataAsync(final String serviceName);

    /**
     * Gets the service related metrics information.
     *
     * @param serviceName The name of the service.
     * @param metricName The metric name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MetricMetadata> getMetricMetadataAsync(String serviceName, String metricName);

    /**
     * Updates the service level monitoring configuration.
     *
     * @param serviceName The name of the service.
     * @param configurationSetting The monitoring configuration to update
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable updateMonitoringConfigurationAsync(String serviceName, ItemInner configurationSetting);

    /**
     * Checks if the tenant, to which a service is registered, is whitelisted to use a feature.
     *
     * @param serviceName The name of the service.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Result> getTenantWhitelistingAsync(String serviceName, String featureName);

    /**
     * Gets the details of services, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceProperties> listAsync();

    /**
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     *
     * @param service The service object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceProperties> addAsync(ServicePropertiesInner service);

    /**
     * Gets the count of latest AAD export errors.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ErrorCount> listExportErrorsAsync(String serviceName);

    /**
     * Gets the categorized export errors.
     *
     * @param serviceName The name of the service.
     * @param errorBucket The error category to query for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MergedExportError> listExportErrorsV2Async(String serviceName, String errorBucket);

    /**
     * Gets the server related metrics for a given metric and group combination.
     *
     * @param serviceName The name of the service.
     * @param metricName The metric name
     * @param groupName The group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MetricServiceMetricSets> getMetricsAsync(String serviceName, String metricName, String groupName);

    /**
     * Gets the average of the metric values for a given metric and group combination.
     *
     * @param serviceName The name of the service.
     * @param metricName The metric name
     * @param groupName The group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceItem> listMetricsAverageAsync(final String serviceName, final String metricName, final String groupName);

    /**
     * Gets the sum of the metric values for a given metric and group combination.
     *
     * @param serviceName The name of the service.
     * @param metricName The metric name
     * @param groupName The group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServiceItem> listMetricsSumAsync(final String serviceName, final String metricName, final String groupName);

    /**
     * Gets the service related metrics for a given metric and group combination.
     *
     * @param serviceName The name of the service.
     * @param metricName The metric name
     * @param groupName The group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AddsserviceMetricSets> getMetricMetadataForGroupAsync(String serviceName, String metricName, String groupName);

    /**
     * Gets the bad password login attempt report for an user.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ErrorReportUsersEntry> listUserBadPasswordReportAsync(String serviceName);

    /**
     * Gets all Risky IP report URIs for the last 7 days.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RiskyIPBlobUri> listAllRiskyIpDownloadReportAsync(String serviceName);

    /**
     * Initiate the generation of a new Risky IP report. Returns the URI for the new one.
     *
     * @param serviceName The name of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RiskyIPBlobUri> listCurrentRiskyIpDownloadReportAsync(String serviceName);

}
