// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securitydevops.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.securitydevops.SecurityDevOpsManager;
import com.azure.resourcemanager.securitydevops.models.ActionableRemediation;
import com.azure.resourcemanager.securitydevops.models.ActionableRemediationState;
import com.azure.resourcemanager.securitydevops.models.AzureDevOpsRepo;
import com.azure.resourcemanager.securitydevops.models.AzureDevOpsRepoProperties;
import com.azure.resourcemanager.securitydevops.models.ProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AzureDevOpsRepoesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"repoId\":\"nmmqhgyxzkon\",\"repoUrl\":\"uko\",\"orgName\":\"yaxuconuqszfkb\",\"projectName\":\"pewr\",\"visibility\":\"mwvvjektcxsenhw\",\"actionableRemediation\":{\"state\":\"Enabled\",\"severityLevels\":[],\"categories\":[]}},\"id\":\"wvlqdqgb\",\"name\":\"qylihkaetckt\",\"type\":\"fcivfsnkym\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SecurityDevOpsManager manager =
            SecurityDevOpsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsRepo response =
            manager
                .azureDevOpsRepoes()
                .define("bkh")
                .withExistingProject("mrbpizcdrqj", "dpydn", "yhxdeoejzicwi", "sjttgzfbish")
                .withProperties(
                    new AzureDevOpsRepoProperties()
                        .withProvisioningState(ProvisioningState.CANCELED)
                        .withRepoId("eamdp")
                        .withRepoUrl("g")
                        .withOrgName("pbuxwgipwhon")
                        .withProjectName("kgshwa")
                        .withVisibility("ixzbinjeputtmryw")
                        .withActionableRemediation(
                            new ActionableRemediation()
                                .withState(ActionableRemediationState.NONE)
                                .withSeverityLevels(Arrays.asList())
                                .withCategories(Arrays.asList())))
                .create();

        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("nmmqhgyxzkon", response.properties().repoId());
        Assertions.assertEquals("uko", response.properties().repoUrl());
        Assertions.assertEquals("yaxuconuqszfkb", response.properties().orgName());
        Assertions.assertEquals("pewr", response.properties().projectName());
        Assertions.assertEquals("mwvvjektcxsenhw", response.properties().visibility());
        Assertions
            .assertEquals(ActionableRemediationState.ENABLED, response.properties().actionableRemediation().state());
    }
}
