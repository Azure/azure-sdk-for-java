/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_04_01.implementation;

import com.microsoft.azure.management.cosmosdb.v2020_04_01.GremlinDatabaseGetResults;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cosmosdb.v2020_04_01.GremlinDatabaseCreateUpdateParameters;
import com.microsoft.azure.management.cosmosdb.v2020_04_01.GremlinDatabaseGetPropertiesOptions;
import com.microsoft.azure.management.cosmosdb.v2020_04_01.GremlinDatabaseGetPropertiesResource;
import java.util.Map;
import com.microsoft.azure.management.cosmosdb.v2020_04_01.CreateUpdateOptions;
import com.microsoft.azure.management.cosmosdb.v2020_04_01.GremlinDatabaseResource;
import rx.functions.Func1;

class GremlinDatabaseGetResultsImpl extends CreatableUpdatableImpl<GremlinDatabaseGetResults, GremlinDatabaseGetResultsInner, GremlinDatabaseGetResultsImpl> implements GremlinDatabaseGetResults, GremlinDatabaseGetResults.Definition, GremlinDatabaseGetResults.Update {
    private final CosmosDBManager manager;
    private String resourceGroupName;
    private String accountName;
    private String databaseName;
    private GremlinDatabaseCreateUpdateParameters createOrUpdateParameter;

    GremlinDatabaseGetResultsImpl(String name, CosmosDBManager manager) {
        super(name, new GremlinDatabaseGetResultsInner());
        this.manager = manager;
        // Set resource name
        this.databaseName = name;
        //
        this.createOrUpdateParameter = new GremlinDatabaseCreateUpdateParameters();
    }

    GremlinDatabaseGetResultsImpl(GremlinDatabaseGetResultsInner inner, CosmosDBManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.databaseName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "databaseAccounts");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "gremlinDatabases");
        //
        this.createOrUpdateParameter = new GremlinDatabaseCreateUpdateParameters();
    }

    @Override
    public CosmosDBManager manager() {
        return this.manager;
    }

    @Override
    public Observable<GremlinDatabaseGetResults> createResourceAsync() {
        GremlinResourcesInner client = this.manager().inner().gremlinResources();
        return client.createUpdateGremlinDatabaseAsync(this.resourceGroupName, this.accountName, this.databaseName, this.createOrUpdateParameter)
            .map(new Func1<GremlinDatabaseGetResultsInner, GremlinDatabaseGetResultsInner>() {
               @Override
               public GremlinDatabaseGetResultsInner call(GremlinDatabaseGetResultsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<GremlinDatabaseGetResults> updateResourceAsync() {
        GremlinResourcesInner client = this.manager().inner().gremlinResources();
        return client.createUpdateGremlinDatabaseAsync(this.resourceGroupName, this.accountName, this.databaseName, this.createOrUpdateParameter)
            .map(new Func1<GremlinDatabaseGetResultsInner, GremlinDatabaseGetResultsInner>() {
               @Override
               public GremlinDatabaseGetResultsInner call(GremlinDatabaseGetResultsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<GremlinDatabaseGetResultsInner> getInnerAsync() {
        GremlinResourcesInner client = this.manager().inner().gremlinResources();
        return client.getGremlinDatabaseAsync(this.resourceGroupName, this.accountName, this.databaseName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new GremlinDatabaseCreateUpdateParameters();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public GremlinDatabaseGetPropertiesOptions options() {
        return this.inner().options();
    }

    @Override
    public GremlinDatabaseGetPropertiesResource resource() {
        return this.inner().resource();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public GremlinDatabaseGetResultsImpl withExistingDatabaseAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public GremlinDatabaseGetResultsImpl withLocation(String location) {
        this.createOrUpdateParameter.withLocation(location);
        return this;
    }

    @Override
    public GremlinDatabaseGetResultsImpl withOptions(CreateUpdateOptions options) {
        this.createOrUpdateParameter.withOptions(options);
        return this;
    }

    @Override
    public GremlinDatabaseGetResultsImpl withResource(GremlinDatabaseResource resource) {
        this.createOrUpdateParameter.withResource(resource);
        return this;
    }

    @Override
    public GremlinDatabaseGetResultsImpl withTags(Map<String, String> tags) {
        this.createOrUpdateParameter.withTags(tags);
        return this;
    }

}
