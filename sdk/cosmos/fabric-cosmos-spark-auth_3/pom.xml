<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.azure</groupId>
    <artifactId>azure-client-sdk-parent</artifactId>
    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->
    <relativePath>../../parents/azure-client-sdk-parent</relativePath>
  </parent>

  <groupId>com.azure.cosmos.spark</groupId>
  <artifactId>fabric-cosmos-spark-auth_3</artifactId>
  <version>1.0.0-beta.2</version>  <!-- {x-version-update;com.azure.cosmos.spark:fabric-cosmos-spark-auth_3;current} -->
  <packaging>jar</packaging>
  <url>https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/cosmos/fabric-cosmos-spark-auth_3</url>
  <name>OLTP Spark Connector for Azure Cosmos DB SQL API Account Data Resolver for Fabric</name>
  <description>OLTP Spark Connector for Azure Cosmos DB SQL API Account Data Resolver for Fabric</description>
  <scm>
    <connection>scm:git:https://github.com/Azure/azure-sdk-for-java.git/sdk/cosmos/fabric-cosmos-spark-auth_3</connection>
    <developerConnection></developerConnection>
    <url>https://github.com/Azure/azure-sdk-for-java/sdk/cosmos/fabric-cosmos-spark-auth_3</url>
  </scm>
  <organization>
    <name>Microsoft Corporation</name>
    <url>http://microsoft.com</url>
  </organization>
  <licenses>
    <license>
      <name>The MIT License (MIT)</name>
      <url>http://opensource.org/licenses/MIT</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <developers>
    <developer>
      <id>microsoft</id>
      <name>Microsoft Corporation</name>
    </developer>
  </developers>
  <properties>
    <maven.build.timestamp.format>MM-dd-HH-mm-ss</maven.build.timestamp.format>
    <jacoco.min.branchcoverage>0.17</jacoco.min.branchcoverage>
    <jacoco.min.linecoverage>0.18</jacoco.min.linecoverage>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <jacoco.skip>true</jacoco.skip>
    <shadingPrefix>fabric_cosmos_spark</shadingPrefix>
    <legal>
      <![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]>
    </legal>
    <codesnippet.skip>true</codesnippet.skip>
    <revapi.skip>true</revapi.skip>
    <checkstyle.skip>true</checkstyle.skip>
    <spotbugs.skip>true</spotbugs.skip>
    <spotless.skip>true</spotless.skip>

    <cosmos.spark.skip>false</cosmos.spark.skip>
    <cosmos-spark-version>3.5</cosmos-spark-version>
    <maven.main.skip>${cosmos.spark.skip}</maven.main.skip>
    <maven.test.skip>${cosmos.spark.skip}</maven.test.skip>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.15.2</version> <!-- {x-version-update;cosmos_com.fasterxml.jackson.core:jackson-databind;external_dependency} -->
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-scala_2.12</artifactId>
      <version>2.15.2</version> <!-- {x-version-update;cosmos_com.fasterxml.jackson.module:jackson-module-scala_2.12;external_dependency} -->
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>2.12.19</version> <!-- {x-version-update;cosmos_org.scala-lang:scala-library;external_dependency} -->
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_2.12</artifactId>
      <version>3.2.2</version> <!-- {x-version-update;cosmos_org.scalatest:scalatest_2.12;external_dependency} -->
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest-flatspec_2.12</artifactId>
      <version>3.2.3</version> <!-- {x-version-update;cosmos_org.scalatest:scalatest-flatspec_2.12;external_dependency} -->
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.microsoft.azure.synapse</groupId>
      <artifactId>synapseutils_2.12</artifactId>
      <version>1.5.4</version> <!-- {x-version-update;cosmos_com.microsoft.azure.synapse:synapseutils_2.12;external_dependency} -->
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.azure.cosmos.spark</groupId>
      <artifactId>azure-cosmos-spark_3-5_2-12</artifactId>
      <version>4.39.0-beta.1</version> <!-- {x-version-update;com.azure.cosmos.spark:azure-cosmos-spark_3-5_2-12;current} -->
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.36</version> <!-- {x-version-update;org.slf4j:slf4j-api;external_dependency} -->
      <scope>compile</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>META-INF/services/com.azure.cosmos.spark.AccountDataResolver</include>
          <include>fabric-cosmos-spark-auth_3.properties</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.6.0</version> <!-- {x-version-update;org.codehaus.mojo:build-helper-maven-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>add-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${basedir}/src/main/scala</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-sources</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${basedir}/src/test/scala</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource><directory>${basedir}/src/main/resources</directory></resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.5.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->
        <configuration>
          <rules>
            <bannedDependencies>
              <includes combine.children="append">
                <include>org.slf4j:slf4j-api:[1.7.36]</include> <!-- {x-include-update;org.slf4j:slf4j-api;external_dependency} -->
                <include>org.scala-lang:scala-library:[2.12.19]</include> <!-- {x-include-update;cosmos_org.scala-lang:scala-library;external_dependency} -->
                <include>org.scala-lang.modules:scala-java8-compat_2.12:[0.8.0]</include> <!-- {x-include-update;cosmos_org.scala-lang.modules:scala-java8-compat_2.12;external_dependency} -->
                <include>org.scalatest:scalatest_2.12:[3.2.2]</include> <!-- {x-include-update;cosmos_org.scalatest:scalatest_2.12;external_dependency} -->
                <include>org.apache.maven.plugins:maven-antrun-plugin:[3.1.0]</include> <!-- {x-include-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->
                <include>org.scalastyle:scalastyle-maven-plugin:[1.0.0]</include> <!-- {x-include-update;cosmos_org.scalastyle:scalastyle-maven-plugin;external_dependency} -->
                <include>com.fasterxml.jackson.datatype:jackson-datatype-jsr310:[2.18.4]</include> <!-- {x-include-update;com.fasterxml.jackson.datatype:jackson-datatype-jsr310;external_dependency} -->
                <include>com.fasterxml.jackson.core:jackson-databind:[2.18.4]</include> <!-- {x-include-update;com.fasterxml.jackson.core:jackson-databind;external_dependency} -->
                <include>com.fasterxml.jackson.module:jackson-module-scala_2.12:[2.18.4]</include> <!-- {x-include-update;com.fasterxml.jackson.module:jackson-module-scala_2.12;external_dependency} -->
                <include>com.fasterxml.jackson.core:jackson-databind:[2.15.2]</include> <!-- {x-include-update;cosmos_com.fasterxml.jackson.core:jackson-databind;external_dependency} -->
                <include>com.fasterxml.jackson.module:jackson-module-scala_2.12:[2.15.2]</include> <!-- {x-include-update;cosmos_com.fasterxml.jackson.module:jackson-module-scala_2.12;external_dependency} -->
                <include>com.azure.cosmos.spark:azure-cosmos-spark_3-5_2-12:[4.39.0-beta.1]</include> <!-- {x-include-update;com.azure.cosmos.spark:azure-cosmos-spark_3-5_2-12;current} -->
                <include>com.microsoft.azure.synapse:synapseutils_2.12:[1.5.4]</include> <!-- {x-include-update;cosmos_com.microsoft.azure.synapse:synapseutils_2.12;external_dependency} -->
              </includes>
            </bannedDependencies>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>build-scala</id>
      <activation>
        <file>
          <exists>${basedir}/scalastyle_config.xml</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.13.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
            <configuration>
              <failOnWarning>false</failOnWarning>
            </configuration>
          </plugin>
          <!-- START: Empty Java Doc -->
          <!-- The following code will generate an empty javadoc with just a README.md. This is necessary
              to pass the required checks on Maven. The way this works is by setting the classesDirectory
              to a directory that only contains the README.md, which we need to copy. If the classesDirectory
              is set to the root, where the README.md lives, it still won't have javadocs but the jar file
              will contain a bunch of files that shouldn't be there. The faux sources directory is deleted
              and recreated with the README.md being copied every time to guarantee that, when building locally,
              it'll have the latest copy of the README.md file.
          -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>3.10.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>attach-javadocs</id>
                <goals>
                  <goal>jar</goal>
                </goals>
                <configuration>
                  <skip>true</skip>
                  <additionalDependencies>
                    <additionalDependency>
                      <groupId>org.projectlombok</groupId>
                      <artifactId>lombok</artifactId>
                      <version>1.18.6</version>
                    </additionalDependency>
                  </additionalDependencies>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.4.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-jar-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>01-empty-javadoc-jar-with-readme</id>
                <phase>package</phase>
                <goals>
                  <goal>jar</goal>
                </goals>
                <configuration>
                  <classifier>javadoc</classifier>
                  <classesDirectory>${project.basedir}/javadocTemp</classesDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>scala-maven-plugin</artifactId>
            <version>4.8.1</version> <!-- {x-version-update;cosmos_net.alchim31.maven:scala-maven-plugin;external_dependency} -->
            <configuration>
              <source>1.8</source>
              <target>1.8</target>
              <scalaVersion>2.12.19</scalaVersion>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>compile</goal>
                  <goal>testCompile</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.scalastyle</groupId>
            <artifactId>scalastyle-maven-plugin</artifactId>
            <version>1.0.0</version> <!-- {x-version-update;cosmos_org.scalastyle:scalastyle-maven-plugin;external_dependency} -->
            <configuration>
              <verbose>false</verbose>
              <failOnViolation>true</failOnViolation>
              <includeTestSourceDirectory>true</includeTestSourceDirectory>
              <failOnWarning>true</failOnWarning>
              <sourceDirectory>${project.basedir}/src/main/scala</sourceDirectory>
              <testSourceDirectory>${project.basedir}/src/test/scala</testSourceDirectory>
              <configLocation>${project.basedir}/scalastyle_config.xml</configLocation>
              <outputFile>${project.build.outputDirectory}/scalastyle-output.xml</outputFile>
              <outputEncoding>UTF-8</outputEncoding>
            </configuration>
            <executions>
              <execution>
                <id>validate-style</id>
                <phase>validate</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
              <execution>
                <id>verify-style</id>
                <phase>verify</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <!-- Shading has been moved to a separate profile since there is a bug which may result in it deadlocking during a parallel build. -->
          <!-- See https://issues.apache.org/jira/projects/MSHADE/issues/MSHADE-384 -->
          <!-- Once this issue is resolved this can be moved back into the build-scala profile. -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>3.6.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-shade-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>02-shade</id>
                <phase>package</phase>
                <goals>
                  <goal>shade</goal>
                </goals>
                <configuration>
                  <relocations>
                    <relocation>
                      <pattern>com.azure</pattern>
                      <shadedPattern>${shadingPrefix}.com.azure</shadedPattern>
                      <excludes>
                        <exclude>com.azure.cosmos.spark.*</exclude>
                        <exclude>com.azure.cosmos.spark.fabric.*</exclude>
                        <exclude>com.azure.cosmos.spark.diagnostics.*</exclude>
                        <exclude>com.azure.cosmos.spark.udf.*</exclude>
                        <exclude>com.azure.cosmos.implementation.SparkBridgeInternal</exclude>
                        <exclude>com.azure.cosmos.models.CosmosParameterizedQuery</exclude>
                      </excludes>
                    </relocation>
                    <relocation>
                      <pattern>scala.concurrent.java8</pattern>
                      <shadedPattern>${shadingPrefix}.scala.concurrent.java8</shadedPattern>
                    </relocation>
                    <relocation>
                      <pattern>com.fasterxml</pattern>
                      <shadedPattern>${shadingPrefix}.com.fasterxml</shadedPattern>
                    </relocation>
                    <relocation>
                      <pattern>com.thoughtworks.paranamer</pattern>
                      <shadedPattern>${shadingPrefix}.com.thoughtworks.paranamer</shadedPattern>
                    </relocation>
                  </relocations>
                  <filters>
                    <filter>
                      <artifact>com.azure.cosmos.spark:fabric-cosmos-spark-auth_3</artifact>
                      <includes>
                        <include>**</include>
                      </includes>
                    </filter>
                    <filter>
                      <artifact>*:*</artifact>
                      <excludes>
                        <!-- suppress warning: Discovered module-info.class. Shading will break its strong encapsulation. -->
                        <!-- https://stackoverflow.com/questions/56063566/maven-how-to-remove-module-info-class-warning-for-shaded-jar -->
                        <exclude>module-info.class</exclude>
                        <!-- remove the dependencies signature as not relevant-->
                        <exclude>META-INF/*.MF</exclude>
                        <exclude>META-INF/*.SF</exclude>
                        <exclude>META-INF/*.DSA</exclude>
                        <exclude>META-INF/*.RSA</exclude>
                      </excludes>
                    </filter>
                  </filters>
                  <artifactSet>
                    <excludes>
                      <exclude>org.slf4j</exclude>
                      <exclude>org.apache.hadoop:*</exclude>
                      <exclude>org.apache.spark:*</exclude>
                      <exclude>org.scala-lang:*</exclude>
                    </excludes>
                  </artifactSet>
                  <minimizeJar>true</minimizeJar>
                  <transformers>
                    <!-- prevents apache license duplication -->
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer">
                    </transformer>

                    <!-- Some licenses (including the Apache License, Version 2)
                     require that notices are preserved by downstream distributors.
                      ApacheNoticeResourceTransformer automates the assembly of an appropriate NOTICE. -->
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer">
                      <addHeader>false</addHeader>
                    </transformer>

                    <!-- The PropertiesTransformer allows a set of properties files to be merged
                     and to resolve conflicts based on an ordinal giving the priority of each file.
                     An optional alreadyMergedKey enables to have a boolean flag in the file which,
                     if set to true, request to use the file as it as the result of the merge.
                     If two files are considered complete in the merge process then the shade will fail.-->
                    <transformer implementation="org.apache.maven.plugins.shade.resource.properties.PropertiesTransformer">
                      <!-- required configuration -->
                      <!-- merges all netty lib version files into one file -->
                      <resource>META-INF/io.netty.versions.properties</resource>
                      <ordinalKey>ordinal</ordinalKey>
                      <!-- optional configuration -->

                      <alreadyMergedKey>already_merged</alreadyMergedKey>
                      <defaultOrdinal>0</defaultOrdinal>
                      <reverseOrder>false</reverseOrder>
                    </transformer>

                    <!-- this handles and properly merges the content of META-INF/services in the dependencies -->
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>

                    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                      <!-- once 3.3.0 shade plugin is release upgrade the maven plugin and remove AppendingTransformer
                        https://issues.apache.org/jira/browse/MSHADE-371 -->
                      <resource>META-INF/NOTICE.md</resource>
                    </transformer>

                    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                      <!-- once 3.3.0 shade plugin is release upgrade the maven plugin and remove AppendingTransformer
                        https://issues.apache.org/jira/browse/MSHADE-371 -->
                      <resource>META-INF/LICENSE.md</resource>
                    </transformer>
                  </transformers>

                  <!-- When true, it will attempt to shade the contents of the java source files when creating the sources jar. -->
                  <shadeSourcesContent>true</shadeSourcesContent>
                  <createDependencyReducedPom>true</createDependencyReducedPom>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>3.1.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>01-copy-readme-to-javadocTemp</id>
                <phase>prepare-package</phase>
                <configuration>
                  <target>
                    <echo>Deleting existing ${project.basedir}/javadocTemp</echo>
                    <delete includeEmptyDirs="true" quiet="true">
                      <fileset dir="${project.basedir}/javadocTemp"/>
                    </delete>
                    <echo>Copying ${project.basedir}/README.md to
                      ${project.basedir}/javadocTemp/README.md
                    </echo>
                    <copy file="${project.basedir}/README.md" tofile="${project.basedir}/javadocTemp/README.md"/>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>xml-maven-plugin</artifactId>
            <version>1.1.0</version> <!-- {x-version-update;org.codehaus.mojo:xml-maven-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>stripDependencyReducedPom</id>
                <phase>verify</phase>
                <goals>
                  <goal>transform</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <transformationSets>
                <transformationSet>
                  <dir>${project.basedir}</dir>
                  <includes>dependency-reduced-pom.xml</includes>
                  <stylesheet>${project.basedir}/../azure-cosmos-spark_3_2-12/stripDependencyReducedPom.xsl</stylesheet>
                  <outputDir>${project.basedir}</outputDir>
                  <skipDefaultExcludes>true</skipDefaultExcludes>
                  <addedToClasspath>false</addedToClasspath>
                </transformationSet>
              </transformationSets>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>unit</id>
      <activation>
        <file>
          <exists>${basedir}/scalastyle_config.xml</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.5.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->
            <configuration>
              <includes>
                <include>**/*.*</include>
                <include>**/*Test.*</include>
                <include>**/*Suite.*</include>
                <include>**/*Spec.*</include>
              </includes>
              <skipTests>true</skipTests>
            </configuration>
          </plugin>
          <!-- To use the ScalaTest Maven plugin, SureFire needs to be disabled and ScalaTest enabled -->
          <!-- enable scalatest -->
          <plugin>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest-maven-plugin</artifactId>
            <version>2.1.0</version> <!-- {x-version-update;cosmos_org.scalatest:scalatest-maven-plugin;external_dependency} -->
            <configuration>
              <systemProperties>
                <cosmos-spark-version>${cosmos-spark-version}</cosmos-spark-version>
              </systemProperties>
              <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
              <junitxml>.</junitxml>
              <filereports>SparkTestSuite.txt</filereports>
              <suffixes>(Spec|[^I]Test|Suite)</suffixes> <!-- unit tests which do not require cosmos db -->
            </configuration>
            <executions>
              <execution>
                <id>test</id>
                <goals>
                  <goal>test</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Library cannot build for Java 10 and below -->
    <profile>
      <id>java8</id>
      <activation>
        <jdk>[,11)</jdk>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.13.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
            <configuration>
              <skipMain>true</skipMain>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>3.10.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.4.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-jar-plugin;external_dependency} -->
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Override the parent client.pom.xml's java11+ profile to override target of base-compile execution from 1.8 to 11-->
    <profile>
      <id>java-lts</id>
      <activation>
        <jdk>[11,)</jdk>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.13.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>default-compile</id>
                <configuration>
                  <release>8</release>
                </configuration>
              </execution>
              <!-- Here the 'base-compile' execution section of java-lts profile defined in parent pom.client.xml is
              overridden. In parent pom, this execution entry enforces java8 release compatibility. The Spark
              connectors for Spark 3.0 and above are available in Java8, hence here in this pom we override that
              release compact to 1.8.
              -->
              <execution>
                <id>base-compile</id>
                <goals>
                  <goal>compile</goal>
                </goals>
                <configuration combine.self="override">
                  <release>8</release>
                </configuration>
              </execution>
              <execution>
                <id>default-testCompile</id>
                <goals>
                  <goal>testCompile</goal>
                </goals>
                <configuration>
                  <release>8</release>
                  <testRelease>8</testRelease>
                </configuration>
              </execution>
              <execution>
                <id>base-testCompile</id>
                <goals>
                  <goal>testCompile</goal>
                </goals>
                <configuration combine.self="override">
                  <testRelease>8</testRelease>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>

    </profile>
  </profiles>

</project>
