/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.azure.cosmos.kafka.connect;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestItemAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestItemAvro\",\"namespace\":\"com.azure.cosmos.kafka.connect\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"mypk\",\"type\":\"string\"},{\"name\":\"prop\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence mypk;
  @Deprecated public java.lang.CharSequence prop;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public TestItemAvro() {}

  /**
   * All-args constructor.
   */
  public TestItemAvro(java.lang.CharSequence id, java.lang.CharSequence mypk, java.lang.CharSequence prop) {
    this.id = id;
    this.mypk = mypk;
    this.prop = prop;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return mypk;
    case 2: return prop;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: mypk = (java.lang.CharSequence)value$; break;
    case 2: prop = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'mypk' field.
   */
  public java.lang.CharSequence getMypk() {
    return mypk;
  }

  /**
   * Sets the value of the 'mypk' field.
   * @param value the value to set.
   */
  public void setMypk(java.lang.CharSequence value) {
    this.mypk = value;
  }

  /**
   * Gets the value of the 'prop' field.
   */
  public java.lang.CharSequence getProp() {
    return prop;
  }

  /**
   * Sets the value of the 'prop' field.
   * @param value the value to set.
   */
  public void setProp(java.lang.CharSequence value) {
    this.prop = value;
  }

  /** Creates a new TestItemAvro RecordBuilder */
  public static com.azure.cosmos.kafka.connect.TestItemAvro.Builder newBuilder() {
    return new com.azure.cosmos.kafka.connect.TestItemAvro.Builder();
  }
  
  /** Creates a new TestItemAvro RecordBuilder by copying an existing Builder */
  public static com.azure.cosmos.kafka.connect.TestItemAvro.Builder newBuilder(com.azure.cosmos.kafka.connect.TestItemAvro.Builder other) {
    return new com.azure.cosmos.kafka.connect.TestItemAvro.Builder(other);
  }
  
  /** Creates a new TestItemAvro RecordBuilder by copying an existing TestItemAvro instance */
  public static com.azure.cosmos.kafka.connect.TestItemAvro.Builder newBuilder(com.azure.cosmos.kafka.connect.TestItemAvro other) {
    return new com.azure.cosmos.kafka.connect.TestItemAvro.Builder(other);
  }
  
  /**
   * RecordBuilder for TestItemAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestItemAvro>
    implements org.apache.avro.data.RecordBuilder<TestItemAvro> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence mypk;
    private java.lang.CharSequence prop;

    /** Creates a new Builder */
    private Builder() {
      super(com.azure.cosmos.kafka.connect.TestItemAvro.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.azure.cosmos.kafka.connect.TestItemAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mypk)) {
        this.mypk = data().deepCopy(fields()[1].schema(), other.mypk);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.prop)) {
        this.prop = data().deepCopy(fields()[2].schema(), other.prop);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TestItemAvro instance */
    private Builder(com.azure.cosmos.kafka.connect.TestItemAvro other) {
            super(com.azure.cosmos.kafka.connect.TestItemAvro.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mypk)) {
        this.mypk = data().deepCopy(fields()[1].schema(), other.mypk);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.prop)) {
        this.prop = data().deepCopy(fields()[2].schema(), other.prop);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.azure.cosmos.kafka.connect.TestItemAvro.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.azure.cosmos.kafka.connect.TestItemAvro.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'mypk' field */
    public java.lang.CharSequence getMypk() {
      return mypk;
    }
    
    /** Sets the value of the 'mypk' field */
    public com.azure.cosmos.kafka.connect.TestItemAvro.Builder setMypk(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.mypk = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'mypk' field has been set */
    public boolean hasMypk() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'mypk' field */
    public com.azure.cosmos.kafka.connect.TestItemAvro.Builder clearMypk() {
      mypk = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'prop' field */
    public java.lang.CharSequence getProp() {
      return prop;
    }
    
    /** Sets the value of the 'prop' field */
    public com.azure.cosmos.kafka.connect.TestItemAvro.Builder setProp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.prop = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'prop' field has been set */
    public boolean hasProp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'prop' field */
    public com.azure.cosmos.kafka.connect.TestItemAvro.Builder clearProp() {
      prop = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TestItemAvro build() {
      try {
        TestItemAvro record = new TestItemAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.mypk = fieldSetFlags()[1] ? this.mypk : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.prop = fieldSetFlags()[2] ? this.prop : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
