// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoRoleDefinitionGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.MongoRoleDefinitionCreateUpdateParameters;
import com.azure.resourcemanager.cosmos.generated.models.MongoRoleDefinitionGetResults;
import com.azure.resourcemanager.cosmos.generated.models.MongoRoleDefinitionType;
import com.azure.resourcemanager.cosmos.generated.models.Privilege;
import com.azure.resourcemanager.cosmos.generated.models.Role;
import java.util.Collections;
import java.util.List;

public final class MongoRoleDefinitionGetResultsImpl
    implements MongoRoleDefinitionGetResults,
        MongoRoleDefinitionGetResults.Definition,
        MongoRoleDefinitionGetResults.Update {
    private MongoRoleDefinitionGetResultsInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String roleName() {
        return this.innerModel().roleName();
    }

    public MongoRoleDefinitionType typePropertiesType() {
        return this.innerModel().typePropertiesType();
    }

    public String databaseName() {
        return this.innerModel().databaseName();
    }

    public List<Privilege> privileges() {
        List<Privilege> inner = this.innerModel().privileges();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<Role> roles() {
        List<Role> inner = this.innerModel().roles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public MongoRoleDefinitionGetResultsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String mongoRoleDefinitionId;

    private String resourceGroupName;

    private String accountName;

    private MongoRoleDefinitionCreateUpdateParameters createCreateUpdateMongoRoleDefinitionParameters;

    private MongoRoleDefinitionCreateUpdateParameters updateCreateUpdateMongoRoleDefinitionParameters;

    public MongoRoleDefinitionGetResultsImpl withExistingDatabaseAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    public MongoRoleDefinitionGetResults create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoRoleDefinition(
                    mongoRoleDefinitionId,
                    resourceGroupName,
                    accountName,
                    createCreateUpdateMongoRoleDefinitionParameters,
                    Context.NONE);
        return this;
    }

    public MongoRoleDefinitionGetResults create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoRoleDefinition(
                    mongoRoleDefinitionId,
                    resourceGroupName,
                    accountName,
                    createCreateUpdateMongoRoleDefinitionParameters,
                    context);
        return this;
    }

    MongoRoleDefinitionGetResultsImpl(
        String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new MongoRoleDefinitionGetResultsInner();
        this.serviceManager = serviceManager;
        this.mongoRoleDefinitionId = name;
        this.createCreateUpdateMongoRoleDefinitionParameters = new MongoRoleDefinitionCreateUpdateParameters();
    }

    public MongoRoleDefinitionGetResultsImpl update() {
        this.updateCreateUpdateMongoRoleDefinitionParameters = new MongoRoleDefinitionCreateUpdateParameters();
        return this;
    }

    public MongoRoleDefinitionGetResults apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoRoleDefinition(
                    mongoRoleDefinitionId,
                    resourceGroupName,
                    accountName,
                    updateCreateUpdateMongoRoleDefinitionParameters,
                    Context.NONE);
        return this;
    }

    public MongoRoleDefinitionGetResults apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoRoleDefinition(
                    mongoRoleDefinitionId,
                    resourceGroupName,
                    accountName,
                    updateCreateUpdateMongoRoleDefinitionParameters,
                    context);
        return this;
    }

    MongoRoleDefinitionGetResultsImpl(
        MongoRoleDefinitionGetResultsInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.mongoRoleDefinitionId = Utils.getValueFromIdByName(innerObject.id(), "mongodbRoleDefinitions");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "databaseAccounts");
    }

    public MongoRoleDefinitionGetResults refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .getMongoRoleDefinitionWithResponse(mongoRoleDefinitionId, resourceGroupName, accountName, Context.NONE)
                .getValue();
        return this;
    }

    public MongoRoleDefinitionGetResults refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .getMongoRoleDefinitionWithResponse(mongoRoleDefinitionId, resourceGroupName, accountName, context)
                .getValue();
        return this;
    }

    public MongoRoleDefinitionGetResultsImpl withRoleName(String roleName) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoRoleDefinitionParameters.withRoleName(roleName);
            return this;
        } else {
            this.updateCreateUpdateMongoRoleDefinitionParameters.withRoleName(roleName);
            return this;
        }
    }

    public MongoRoleDefinitionGetResultsImpl withType(MongoRoleDefinitionType type) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoRoleDefinitionParameters.withType(type);
            return this;
        } else {
            this.updateCreateUpdateMongoRoleDefinitionParameters.withType(type);
            return this;
        }
    }

    public MongoRoleDefinitionGetResultsImpl withDatabaseName(String databaseName) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoRoleDefinitionParameters.withDatabaseName(databaseName);
            return this;
        } else {
            this.updateCreateUpdateMongoRoleDefinitionParameters.withDatabaseName(databaseName);
            return this;
        }
    }

    public MongoRoleDefinitionGetResultsImpl withPrivileges(List<Privilege> privileges) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoRoleDefinitionParameters.withPrivileges(privileges);
            return this;
        } else {
            this.updateCreateUpdateMongoRoleDefinitionParameters.withPrivileges(privileges);
            return this;
        }
    }

    public MongoRoleDefinitionGetResultsImpl withRoles(List<Role> roles) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoRoleDefinitionParameters.withRoles(roles);
            return this;
        } else {
            this.updateCreateUpdateMongoRoleDefinitionParameters.withRoles(roles);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
