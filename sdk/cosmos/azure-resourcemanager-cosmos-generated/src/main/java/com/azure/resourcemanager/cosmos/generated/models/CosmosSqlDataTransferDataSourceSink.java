// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** A CosmosDB Cassandra API data source/sink. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "component")
@JsonTypeName("CosmosDBSql")
@Fluent
public final class CosmosSqlDataTransferDataSourceSink extends DataTransferDataSourceSink {
    /*
     * The databaseName property.
     */
    @JsonProperty(value = "databaseName", required = true)
    private String databaseName;

    /*
     * The containerName property.
     */
    @JsonProperty(value = "containerName", required = true)
    private String containerName;

    /**
     * Get the databaseName property: The databaseName property.
     *
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The databaseName property.
     *
     * @param databaseName the databaseName value to set.
     * @return the CosmosSqlDataTransferDataSourceSink object itself.
     */
    public CosmosSqlDataTransferDataSourceSink withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the containerName property: The containerName property.
     *
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: The containerName property.
     *
     * @param containerName the containerName value to set.
     * @return the CosmosSqlDataTransferDataSourceSink object itself.
     */
    public CosmosSqlDataTransferDataSourceSink withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (databaseName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property databaseName in model CosmosSqlDataTransferDataSourceSink"));
        }
        if (containerName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property containerName in model CosmosSqlDataTransferDataSourceSink"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosSqlDataTransferDataSourceSink.class);
}
