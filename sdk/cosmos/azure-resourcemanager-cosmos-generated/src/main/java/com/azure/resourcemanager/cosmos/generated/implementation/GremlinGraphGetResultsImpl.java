// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.CosmosDBManager;
import com.azure.resourcemanager.cosmos.generated.fluent.models.GremlinGraphGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.CreateUpdateOptions;
import com.azure.resourcemanager.cosmos.generated.models.GremlinGraphCreateUpdateParameters;
import com.azure.resourcemanager.cosmos.generated.models.GremlinGraphGetPropertiesResource;
import com.azure.resourcemanager.cosmos.generated.models.GremlinGraphGetResults;
import com.azure.resourcemanager.cosmos.generated.models.GremlinGraphResource;
import com.azure.resourcemanager.cosmos.generated.models.OptionsResource;
import java.util.Collections;
import java.util.Map;

public final class GremlinGraphGetResultsImpl
    implements GremlinGraphGetResults, GremlinGraphGetResults.Definition, GremlinGraphGetResults.Update {
    private GremlinGraphGetResultsInner innerObject;

    private final CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public GremlinGraphGetPropertiesResource resource() {
        return this.innerModel().resource();
    }

    public OptionsResource options() {
        return this.innerModel().options();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public GremlinGraphGetResultsInner innerModel() {
        return this.innerObject;
    }

    private CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private String databaseName;

    private String graphName;

    private GremlinGraphCreateUpdateParameters createCreateUpdateGremlinGraphParameters;

    private GremlinGraphCreateUpdateParameters updateCreateUpdateGremlinGraphParameters;

    public GremlinGraphGetResultsImpl withExistingGremlinDatabase(
        String resourceGroupName, String accountName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.databaseName = databaseName;
        return this;
    }

    public GremlinGraphGetResults create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGremlinResources()
                .createUpdateGremlinGraph(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    graphName,
                    createCreateUpdateGremlinGraphParameters,
                    Context.NONE);
        return this;
    }

    public GremlinGraphGetResults create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGremlinResources()
                .createUpdateGremlinGraph(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    graphName,
                    createCreateUpdateGremlinGraphParameters,
                    context);
        return this;
    }

    public GremlinGraphGetResultsImpl(String name, CosmosDBManager serviceManager) {
        this.innerObject = new GremlinGraphGetResultsInner();
        this.serviceManager = serviceManager;
        this.graphName = name;
        this.createCreateUpdateGremlinGraphParameters = new GremlinGraphCreateUpdateParameters();
    }

    public GremlinGraphGetResultsImpl update() {
        this.updateCreateUpdateGremlinGraphParameters = new GremlinGraphCreateUpdateParameters();
        return this;
    }

    public GremlinGraphGetResults apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGremlinResources()
                .createUpdateGremlinGraph(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    graphName,
                    updateCreateUpdateGremlinGraphParameters,
                    Context.NONE);
        return this;
    }

    public GremlinGraphGetResults apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGremlinResources()
                .createUpdateGremlinGraph(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    graphName,
                    updateCreateUpdateGremlinGraphParameters,
                    context);
        return this;
    }

    public GremlinGraphGetResultsImpl(GremlinGraphGetResultsInner innerObject, CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "databaseAccounts");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "gremlinDatabases");
        this.graphName = Utils.getValueFromIdByName(innerObject.id(), "graphs");
    }

    public GremlinGraphGetResults refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGremlinResources()
                .getGremlinGraphWithResponse(resourceGroupName, accountName, databaseName, graphName, Context.NONE)
                .getValue();
        return this;
    }

    public GremlinGraphGetResults refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGremlinResources()
                .getGremlinGraphWithResponse(resourceGroupName, accountName, databaseName, graphName, context)
                .getValue();
        return this;
    }

    public GremlinGraphGetResultsImpl withRegion(Region location) {
        this.createCreateUpdateGremlinGraphParameters.withLocation(location.toString());
        return this;
    }

    public GremlinGraphGetResultsImpl withRegion(String location) {
        this.createCreateUpdateGremlinGraphParameters.withLocation(location);
        return this;
    }

    public GremlinGraphGetResultsImpl withResource(GremlinGraphResource resource) {
        if (isInCreateMode()) {
            this.createCreateUpdateGremlinGraphParameters.withResource(resource);
            return this;
        } else {
            this.updateCreateUpdateGremlinGraphParameters.withResource(resource);
            return this;
        }
    }

    public GremlinGraphGetResultsImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createCreateUpdateGremlinGraphParameters.withTags(tags);
            return this;
        } else {
            this.updateCreateUpdateGremlinGraphParameters.withTags(tags);
            return this;
        }
    }

    public GremlinGraphGetResultsImpl withOptions(CreateUpdateOptions options) {
        if (isInCreateMode()) {
            this.createCreateUpdateGremlinGraphParameters.withOptions(options);
            return this;
        } else {
            this.updateCreateUpdateGremlinGraphParameters.withOptions(options);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
