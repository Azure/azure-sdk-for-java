// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.GraphResourcesClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.GraphResourceGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.GraphResourceGetResults;
import com.azure.resourcemanager.cosmos.generated.models.GraphResources;

public final class GraphResourcesImpl implements GraphResources {
    private static final ClientLogger LOGGER = new ClientLogger(GraphResourcesImpl.class);

    private final GraphResourcesClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public GraphResourcesImpl(
        GraphResourcesClient innerClient, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<GraphResourceGetResults> listGraphs(String resourceGroupName, String accountName) {
        PagedIterable<GraphResourceGetResultsInner> inner =
            this.serviceClient().listGraphs(resourceGroupName, accountName);
        return Utils.mapPage(inner, inner1 -> new GraphResourceGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<GraphResourceGetResults> listGraphs(
        String resourceGroupName, String accountName, Context context) {
        PagedIterable<GraphResourceGetResultsInner> inner =
            this.serviceClient().listGraphs(resourceGroupName, accountName, context);
        return Utils.mapPage(inner, inner1 -> new GraphResourceGetResultsImpl(inner1, this.manager()));
    }

    public GraphResourceGetResults getGraph(String resourceGroupName, String accountName, String graphName) {
        GraphResourceGetResultsInner inner = this.serviceClient().getGraph(resourceGroupName, accountName, graphName);
        if (inner != null) {
            return new GraphResourceGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GraphResourceGetResults> getGraphWithResponse(
        String resourceGroupName, String accountName, String graphName, Context context) {
        Response<GraphResourceGetResultsInner> inner =
            this.serviceClient().getGraphWithResponse(resourceGroupName, accountName, graphName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GraphResourceGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteGraphResource(String resourceGroupName, String accountName, String graphName) {
        this.serviceClient().deleteGraphResource(resourceGroupName, accountName, graphName);
    }

    public void deleteGraphResource(String resourceGroupName, String accountName, String graphName, Context context) {
        this.serviceClient().deleteGraphResource(resourceGroupName, accountName, graphName, context);
    }

    public GraphResourceGetResults getGraphById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String graphName = Utils.getValueFromIdByName(id, "graphs");
        if (graphName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'graphs'.", id)));
        }
        return this.getGraphWithResponse(resourceGroupName, accountName, graphName, Context.NONE).getValue();
    }

    public Response<GraphResourceGetResults> getGraphByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String graphName = Utils.getValueFromIdByName(id, "graphs");
        if (graphName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'graphs'.", id)));
        }
        return this.getGraphWithResponse(resourceGroupName, accountName, graphName, context);
    }

    public void deleteGraphResourceById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String graphName = Utils.getValueFromIdByName(id, "graphs");
        if (graphName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'graphs'.", id)));
        }
        this.deleteGraphResource(resourceGroupName, accountName, graphName, Context.NONE);
    }

    public void deleteGraphResourceByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String graphName = Utils.getValueFromIdByName(id, "graphs");
        if (graphName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'graphs'.", id)));
        }
        this.deleteGraphResource(resourceGroupName, accountName, graphName, context);
    }

    private GraphResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public GraphResourceGetResultsImpl define(String name) {
        return new GraphResourceGetResultsImpl(name, this.manager());
    }
}
