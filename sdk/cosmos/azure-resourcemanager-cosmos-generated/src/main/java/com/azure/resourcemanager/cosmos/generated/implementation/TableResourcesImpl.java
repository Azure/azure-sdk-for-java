// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.CosmosDBManager;
import com.azure.resourcemanager.cosmos.generated.fluent.TableResourcesClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.TableGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ThroughputSettingsGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.TableGetResults;
import com.azure.resourcemanager.cosmos.generated.models.TableResources;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsGetResults;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsUpdateParameters;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class TableResourcesImpl implements TableResources {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TableResourcesImpl.class);

    private final TableResourcesClient innerClient;

    private final CosmosDBManager serviceManager;

    public TableResourcesImpl(TableResourcesClient innerClient, CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<TableGetResults> listTables(String resourceGroupName, String accountName) {
        PagedIterable<TableGetResultsInner> inner = this.serviceClient().listTables(resourceGroupName, accountName);
        return inner.mapPage(inner1 -> new TableGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<TableGetResults> listTables(String resourceGroupName, String accountName, Context context) {
        PagedIterable<TableGetResultsInner> inner =
            this.serviceClient().listTables(resourceGroupName, accountName, context);
        return inner.mapPage(inner1 -> new TableGetResultsImpl(inner1, this.manager()));
    }

    public TableGetResults getTable(String resourceGroupName, String accountName, String tableName) {
        TableGetResultsInner inner = this.serviceClient().getTable(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new TableGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TableGetResults> getTableWithResponse(
        String resourceGroupName, String accountName, String tableName, Context context) {
        Response<TableGetResultsInner> inner =
            this.serviceClient().getTableWithResponse(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TableGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteTable(String resourceGroupName, String accountName, String tableName) {
        this.serviceClient().deleteTable(resourceGroupName, accountName, tableName);
    }

    public void deleteTable(String resourceGroupName, String accountName, String tableName, Context context) {
        this.serviceClient().deleteTable(resourceGroupName, accountName, tableName, context);
    }

    public ThroughputSettingsGetResults getTableThroughput(
        String resourceGroupName, String accountName, String tableName) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().getTableThroughput(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ThroughputSettingsGetResults> getTableThroughputWithResponse(
        String resourceGroupName, String accountName, String tableName, Context context) {
        Response<ThroughputSettingsGetResultsInner> inner =
            this.serviceClient().getTableThroughputWithResponse(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ThroughputSettingsGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateTableThroughput(
        String resourceGroupName,
        String accountName,
        String tableName,
        ThroughputSettingsUpdateParameters updateThroughputParameters) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .updateTableThroughput(resourceGroupName, accountName, tableName, updateThroughputParameters);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateTableThroughput(
        String resourceGroupName,
        String accountName,
        String tableName,
        ThroughputSettingsUpdateParameters updateThroughputParameters,
        Context context) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .updateTableThroughput(resourceGroupName, accountName, tableName, updateThroughputParameters, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToAutoscale(
        String resourceGroupName, String accountName, String tableName) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().migrateTableToAutoscale(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToAutoscale(
        String resourceGroupName, String accountName, String tableName, Context context) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().migrateTableToAutoscale(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToManualThroughput(
        String resourceGroupName, String accountName, String tableName) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().migrateTableToManualThroughput(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToManualThroughput(
        String resourceGroupName, String accountName, String tableName, Context context) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().migrateTableToManualThroughput(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public TableGetResults getTableById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = Utils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        return this.getTableWithResponse(resourceGroupName, accountName, tableName, Context.NONE).getValue();
    }

    public Response<TableGetResults> getTableByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = Utils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        return this.getTableWithResponse(resourceGroupName, accountName, tableName, context);
    }

    public void deleteTableById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = Utils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        this.deleteTable(resourceGroupName, accountName, tableName, Context.NONE);
    }

    public void deleteTableByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = Utils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        this.deleteTable(resourceGroupName, accountName, tableName, context);
    }

    private TableResourcesClient serviceClient() {
        return this.innerClient;
    }

    private CosmosDBManager manager() {
        return this.serviceManager;
    }

    public TableGetResultsImpl define(String name) {
        return new TableGetResultsImpl(name, this.manager());
    }
}
