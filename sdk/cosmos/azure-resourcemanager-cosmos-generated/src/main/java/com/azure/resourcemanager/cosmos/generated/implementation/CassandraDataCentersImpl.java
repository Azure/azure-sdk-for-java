// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.CassandraDataCentersClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.DataCenterResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.CassandraDataCenters;
import com.azure.resourcemanager.cosmos.generated.models.DataCenterResource;

public final class CassandraDataCentersImpl implements CassandraDataCenters {
    private static final ClientLogger LOGGER = new ClientLogger(CassandraDataCentersImpl.class);

    private final CassandraDataCentersClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public CassandraDataCentersImpl(
        CassandraDataCentersClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DataCenterResource> list(String resourceGroupName, String clusterName) {
        PagedIterable<DataCenterResourceInner> inner = this.serviceClient().list(resourceGroupName, clusterName);
        return Utils.mapPage(inner, inner1 -> new DataCenterResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DataCenterResource> list(String resourceGroupName, String clusterName, Context context) {
        PagedIterable<DataCenterResourceInner> inner =
            this.serviceClient().list(resourceGroupName, clusterName, context);
        return Utils.mapPage(inner, inner1 -> new DataCenterResourceImpl(inner1, this.manager()));
    }

    public DataCenterResource get(String resourceGroupName, String clusterName, String dataCenterName) {
        DataCenterResourceInner inner = this.serviceClient().get(resourceGroupName, clusterName, dataCenterName);
        if (inner != null) {
            return new DataCenterResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DataCenterResource> getWithResponse(
        String resourceGroupName, String clusterName, String dataCenterName, Context context) {
        Response<DataCenterResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, clusterName, dataCenterName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DataCenterResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String clusterName, String dataCenterName) {
        this.serviceClient().delete(resourceGroupName, clusterName, dataCenterName);
    }

    public void delete(String resourceGroupName, String clusterName, String dataCenterName, Context context) {
        this.serviceClient().delete(resourceGroupName, clusterName, dataCenterName, context);
    }

    public DataCenterResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        String dataCenterName = Utils.getValueFromIdByName(id, "dataCenters");
        if (dataCenterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dataCenters'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, dataCenterName, Context.NONE).getValue();
    }

    public Response<DataCenterResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        String dataCenterName = Utils.getValueFromIdByName(id, "dataCenters");
        if (dataCenterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dataCenters'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, dataCenterName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        String dataCenterName = Utils.getValueFromIdByName(id, "dataCenters");
        if (dataCenterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dataCenters'.", id)));
        }
        this.delete(resourceGroupName, clusterName, dataCenterName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        String dataCenterName = Utils.getValueFromIdByName(id, "dataCenters");
        if (dataCenterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dataCenters'.", id)));
        }
        this.delete(resourceGroupName, clusterName, dataCenterName, context);
    }

    private CassandraDataCentersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public DataCenterResourceImpl define(String name) {
        return new DataCenterResourceImpl(name, this.manager());
    }
}
