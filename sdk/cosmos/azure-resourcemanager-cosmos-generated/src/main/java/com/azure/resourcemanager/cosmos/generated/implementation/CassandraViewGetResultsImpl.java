// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraViewGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.CassandraViewCreateUpdateParameters;
import com.azure.resourcemanager.cosmos.generated.models.CassandraViewGetPropertiesOptions;
import com.azure.resourcemanager.cosmos.generated.models.CassandraViewGetPropertiesResource;
import com.azure.resourcemanager.cosmos.generated.models.CassandraViewGetResults;
import com.azure.resourcemanager.cosmos.generated.models.CassandraViewResource;
import com.azure.resourcemanager.cosmos.generated.models.CreateUpdateOptions;
import com.azure.resourcemanager.cosmos.generated.models.ManagedServiceIdentity;
import java.util.Collections;
import java.util.Map;

public final class CassandraViewGetResultsImpl
    implements CassandraViewGetResults, CassandraViewGetResults.Definition, CassandraViewGetResults.Update {
    private CassandraViewGetResultsInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public CassandraViewGetPropertiesResource resource() {
        return this.innerModel().resource();
    }

    public CassandraViewGetPropertiesOptions options() {
        return this.innerModel().options();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public CassandraViewGetResultsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private String keyspaceName;

    private String viewName;

    private CassandraViewCreateUpdateParameters createCreateUpdateCassandraViewParameters;

    private CassandraViewCreateUpdateParameters updateCreateUpdateCassandraViewParameters;

    public CassandraViewGetResultsImpl withExistingCassandraKeyspace(
        String resourceGroupName, String accountName, String keyspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.keyspaceName = keyspaceName;
        return this;
    }

    public CassandraViewGetResults create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraResources()
                .createUpdateCassandraView(
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    viewName,
                    createCreateUpdateCassandraViewParameters,
                    Context.NONE);
        return this;
    }

    public CassandraViewGetResults create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraResources()
                .createUpdateCassandraView(
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    viewName,
                    createCreateUpdateCassandraViewParameters,
                    context);
        return this;
    }

    CassandraViewGetResultsImpl(
        String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new CassandraViewGetResultsInner();
        this.serviceManager = serviceManager;
        this.viewName = name;
        this.createCreateUpdateCassandraViewParameters = new CassandraViewCreateUpdateParameters();
    }

    public CassandraViewGetResultsImpl update() {
        this.updateCreateUpdateCassandraViewParameters = new CassandraViewCreateUpdateParameters();
        return this;
    }

    public CassandraViewGetResults apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraResources()
                .createUpdateCassandraView(
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    viewName,
                    updateCreateUpdateCassandraViewParameters,
                    Context.NONE);
        return this;
    }

    public CassandraViewGetResults apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraResources()
                .createUpdateCassandraView(
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    viewName,
                    updateCreateUpdateCassandraViewParameters,
                    context);
        return this;
    }

    CassandraViewGetResultsImpl(
        CassandraViewGetResultsInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "databaseAccounts");
        this.keyspaceName = Utils.getValueFromIdByName(innerObject.id(), "cassandraKeyspaces");
        this.viewName = Utils.getValueFromIdByName(innerObject.id(), "views");
    }

    public CassandraViewGetResults refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraResources()
                .getCassandraViewWithResponse(resourceGroupName, accountName, keyspaceName, viewName, Context.NONE)
                .getValue();
        return this;
    }

    public CassandraViewGetResults refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraResources()
                .getCassandraViewWithResponse(resourceGroupName, accountName, keyspaceName, viewName, context)
                .getValue();
        return this;
    }

    public CassandraViewGetResultsImpl withRegion(Region location) {
        this.createCreateUpdateCassandraViewParameters.withLocation(location.toString());
        return this;
    }

    public CassandraViewGetResultsImpl withRegion(String location) {
        this.createCreateUpdateCassandraViewParameters.withLocation(location);
        return this;
    }

    public CassandraViewGetResultsImpl withResource(CassandraViewResource resource) {
        if (isInCreateMode()) {
            this.createCreateUpdateCassandraViewParameters.withResource(resource);
            return this;
        } else {
            this.updateCreateUpdateCassandraViewParameters.withResource(resource);
            return this;
        }
    }

    public CassandraViewGetResultsImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createCreateUpdateCassandraViewParameters.withTags(tags);
            return this;
        } else {
            this.updateCreateUpdateCassandraViewParameters.withTags(tags);
            return this;
        }
    }

    public CassandraViewGetResultsImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.createCreateUpdateCassandraViewParameters.withIdentity(identity);
            return this;
        } else {
            this.updateCreateUpdateCassandraViewParameters.withIdentity(identity);
            return this;
        }
    }

    public CassandraViewGetResultsImpl withOptions(CreateUpdateOptions options) {
        if (isInCreateMode()) {
            this.createCreateUpdateCassandraViewParameters.withOptions(options);
            return this;
        } else {
            this.updateCreateUpdateCassandraViewParameters.withOptions(options);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
