// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.CassandraClustersClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.BackupResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraClusterPublicStatusInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ClusterResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CommandOutputInner;
import com.azure.resourcemanager.cosmos.generated.models.BackupResource;
import com.azure.resourcemanager.cosmos.generated.models.CassandraClusterPublicStatus;
import com.azure.resourcemanager.cosmos.generated.models.CassandraClusters;
import com.azure.resourcemanager.cosmos.generated.models.ClusterResource;
import com.azure.resourcemanager.cosmos.generated.models.CommandOutput;
import com.azure.resourcemanager.cosmos.generated.models.CommandPostBody;

public final class CassandraClustersImpl implements CassandraClusters {
    private static final ClientLogger LOGGER = new ClientLogger(CassandraClustersImpl.class);

    private final CassandraClustersClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public CassandraClustersImpl(
        CassandraClustersClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ClusterResource> list() {
        PagedIterable<ClusterResourceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ClusterResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ClusterResource> list(Context context) {
        PagedIterable<ClusterResourceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ClusterResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ClusterResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ClusterResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ClusterResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ClusterResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ClusterResourceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ClusterResourceImpl(inner1, this.manager()));
    }

    public ClusterResource getByResourceGroup(String resourceGroupName, String clusterName) {
        ClusterResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, clusterName);
        if (inner != null) {
            return new ClusterResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ClusterResource> getByResourceGroupWithResponse(
        String resourceGroupName, String clusterName, Context context) {
        Response<ClusterResourceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, clusterName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ClusterResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String clusterName) {
        this.serviceClient().delete(resourceGroupName, clusterName);
    }

    public void delete(String resourceGroupName, String clusterName, Context context) {
        this.serviceClient().delete(resourceGroupName, clusterName, context);
    }

    public CommandOutput invokeCommand(String resourceGroupName, String clusterName, CommandPostBody body) {
        CommandOutputInner inner = this.serviceClient().invokeCommand(resourceGroupName, clusterName, body);
        if (inner != null) {
            return new CommandOutputImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommandOutput invokeCommand(
        String resourceGroupName, String clusterName, CommandPostBody body, Context context) {
        CommandOutputInner inner = this.serviceClient().invokeCommand(resourceGroupName, clusterName, body, context);
        if (inner != null) {
            return new CommandOutputImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BackupResource> listBackups(String resourceGroupName, String clusterName) {
        PagedIterable<BackupResourceInner> inner = this.serviceClient().listBackups(resourceGroupName, clusterName);
        return Utils.mapPage(inner, inner1 -> new BackupResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupResource> listBackups(String resourceGroupName, String clusterName, Context context) {
        PagedIterable<BackupResourceInner> inner =
            this.serviceClient().listBackups(resourceGroupName, clusterName, context);
        return Utils.mapPage(inner, inner1 -> new BackupResourceImpl(inner1, this.manager()));
    }

    public BackupResource getBackup(String resourceGroupName, String clusterName, String backupId) {
        BackupResourceInner inner = this.serviceClient().getBackup(resourceGroupName, clusterName, backupId);
        if (inner != null) {
            return new BackupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupResource> getBackupWithResponse(
        String resourceGroupName, String clusterName, String backupId, Context context) {
        Response<BackupResourceInner> inner =
            this.serviceClient().getBackupWithResponse(resourceGroupName, clusterName, backupId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deallocate(String resourceGroupName, String clusterName) {
        this.serviceClient().deallocate(resourceGroupName, clusterName);
    }

    public void deallocate(String resourceGroupName, String clusterName, Context context) {
        this.serviceClient().deallocate(resourceGroupName, clusterName, context);
    }

    public void start(String resourceGroupName, String clusterName) {
        this.serviceClient().start(resourceGroupName, clusterName);
    }

    public void start(String resourceGroupName, String clusterName, Context context) {
        this.serviceClient().start(resourceGroupName, clusterName, context);
    }

    public CassandraClusterPublicStatus status(String resourceGroupName, String clusterName) {
        CassandraClusterPublicStatusInner inner = this.serviceClient().status(resourceGroupName, clusterName);
        if (inner != null) {
            return new CassandraClusterPublicStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CassandraClusterPublicStatus> statusWithResponse(
        String resourceGroupName, String clusterName, Context context) {
        Response<CassandraClusterPublicStatusInner> inner =
            this.serviceClient().statusWithResponse(resourceGroupName, clusterName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CassandraClusterPublicStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ClusterResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, clusterName, Context.NONE).getValue();
    }

    public Response<ClusterResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, clusterName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        this.delete(resourceGroupName, clusterName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "cassandraClusters");
        if (clusterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'cassandraClusters'.", id)));
        }
        this.delete(resourceGroupName, clusterName, context);
    }

    private CassandraClustersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public ClusterResourceImpl define(String name) {
        return new ClusterResourceImpl(name, this.manager());
    }
}
