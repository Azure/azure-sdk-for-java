// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.CosmosDBManager;
import com.azure.resourcemanager.cosmos.generated.fluent.models.SqlStoredProcedureGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.CreateUpdateOptions;
import com.azure.resourcemanager.cosmos.generated.models.SqlStoredProcedureCreateUpdateParameters;
import com.azure.resourcemanager.cosmos.generated.models.SqlStoredProcedureGetPropertiesResource;
import com.azure.resourcemanager.cosmos.generated.models.SqlStoredProcedureGetResults;
import com.azure.resourcemanager.cosmos.generated.models.SqlStoredProcedureResource;
import java.util.Collections;
import java.util.Map;

public final class SqlStoredProcedureGetResultsImpl
    implements SqlStoredProcedureGetResults,
        SqlStoredProcedureGetResults.Definition,
        SqlStoredProcedureGetResults.Update {
    private SqlStoredProcedureGetResultsInner innerObject;

    private final CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SqlStoredProcedureGetPropertiesResource resource() {
        return this.innerModel().resource();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public SqlStoredProcedureGetResultsInner innerModel() {
        return this.innerObject;
    }

    private CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private String databaseName;

    private String containerName;

    private String storedProcedureName;

    private SqlStoredProcedureCreateUpdateParameters createCreateUpdateSqlStoredProcedureParameters;

    private SqlStoredProcedureCreateUpdateParameters updateCreateUpdateSqlStoredProcedureParameters;

    public SqlStoredProcedureGetResultsImpl withExistingContainer(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.databaseName = databaseName;
        this.containerName = containerName;
        return this;
    }

    public SqlStoredProcedureGetResults create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateSqlStoredProcedure(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    containerName,
                    storedProcedureName,
                    createCreateUpdateSqlStoredProcedureParameters,
                    Context.NONE);
        return this;
    }

    public SqlStoredProcedureGetResults create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateSqlStoredProcedure(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    containerName,
                    storedProcedureName,
                    createCreateUpdateSqlStoredProcedureParameters,
                    context);
        return this;
    }

    public SqlStoredProcedureGetResultsImpl(String name, CosmosDBManager serviceManager) {
        this.innerObject = new SqlStoredProcedureGetResultsInner();
        this.serviceManager = serviceManager;
        this.storedProcedureName = name;
        this.createCreateUpdateSqlStoredProcedureParameters = new SqlStoredProcedureCreateUpdateParameters();
    }

    public SqlStoredProcedureGetResultsImpl update() {
        this.updateCreateUpdateSqlStoredProcedureParameters = new SqlStoredProcedureCreateUpdateParameters();
        return this;
    }

    public SqlStoredProcedureGetResults apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateSqlStoredProcedure(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    containerName,
                    storedProcedureName,
                    updateCreateUpdateSqlStoredProcedureParameters,
                    Context.NONE);
        return this;
    }

    public SqlStoredProcedureGetResults apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateSqlStoredProcedure(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    containerName,
                    storedProcedureName,
                    updateCreateUpdateSqlStoredProcedureParameters,
                    context);
        return this;
    }

    public SqlStoredProcedureGetResultsImpl(
        SqlStoredProcedureGetResultsInner innerObject, CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "databaseAccounts");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "sqlDatabases");
        this.containerName = Utils.getValueFromIdByName(innerObject.id(), "containers");
        this.storedProcedureName = Utils.getValueFromIdByName(innerObject.id(), "storedProcedures");
    }

    public SqlStoredProcedureGetResults refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .getSqlStoredProcedureWithResponse(
                    resourceGroupName, accountName, databaseName, containerName, storedProcedureName, Context.NONE)
                .getValue();
        return this;
    }

    public SqlStoredProcedureGetResults refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .getSqlStoredProcedureWithResponse(
                    resourceGroupName, accountName, databaseName, containerName, storedProcedureName, context)
                .getValue();
        return this;
    }

    public SqlStoredProcedureGetResultsImpl withRegion(Region location) {
        this.createCreateUpdateSqlStoredProcedureParameters.withLocation(location.toString());
        return this;
    }

    public SqlStoredProcedureGetResultsImpl withRegion(String location) {
        this.createCreateUpdateSqlStoredProcedureParameters.withLocation(location);
        return this;
    }

    public SqlStoredProcedureGetResultsImpl withResource(SqlStoredProcedureResource resource) {
        if (isInCreateMode()) {
            this.createCreateUpdateSqlStoredProcedureParameters.withResource(resource);
            return this;
        } else {
            this.updateCreateUpdateSqlStoredProcedureParameters.withResource(resource);
            return this;
        }
    }

    public SqlStoredProcedureGetResultsImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createCreateUpdateSqlStoredProcedureParameters.withTags(tags);
            return this;
        } else {
            this.updateCreateUpdateSqlStoredProcedureParameters.withTags(tags);
            return this;
        }
    }

    public SqlStoredProcedureGetResultsImpl withOptions(CreateUpdateOptions options) {
        if (isInCreateMode()) {
            this.createCreateUpdateSqlStoredProcedureParameters.withOptions(options);
            return this;
        } else {
            this.updateCreateUpdateSqlStoredProcedureParameters.withOptions(options);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
