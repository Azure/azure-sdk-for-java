// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoUserDefinitionGetResultsInner;
import java.util.List;

/** An immutable client-side representation of MongoUserDefinitionGetResults. */
public interface MongoUserDefinitionGetResults {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the username property: The user name for User Definition.
     *
     * @return the username value.
     */
    String username();

    /**
     * Gets the password property: The password for User Definition. Response does not contain user password.
     *
     * @return the password value.
     */
    String password();

    /**
     * Gets the databaseName property: The database name for which access is being granted for this User Definition.
     *
     * @return the databaseName value.
     */
    String databaseName();

    /**
     * Gets the customData property: A custom definition for the USer Definition.
     *
     * @return the customData value.
     */
    String customData();

    /**
     * Gets the roles property: The set of roles inherited by the User Definition.
     *
     * @return the roles value.
     */
    List<Role> roles();

    /**
     * Gets the mechanisms property: The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
     *
     * @return the mechanisms value.
     */
    String mechanisms();

    /**
     * Gets the inner com.azure.resourcemanager.cosmos.generated.fluent.models.MongoUserDefinitionGetResultsInner
     * object.
     *
     * @return the inner object.
     */
    MongoUserDefinitionGetResultsInner innerModel();

    /** The entirety of the MongoUserDefinitionGetResults definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The MongoUserDefinitionGetResults definition stages. */
    interface DefinitionStages {
        /** The first stage of the MongoUserDefinitionGetResults definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the MongoUserDefinitionGetResults definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param accountName Cosmos DB database account name.
             * @return the next definition stage.
             */
            WithCreate withExistingDatabaseAccount(String resourceGroupName, String accountName);
        }
        /**
         * The stage of the MongoUserDefinitionGetResults definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithUsername,
                DefinitionStages.WithPassword,
                DefinitionStages.WithDatabaseName,
                DefinitionStages.WithCustomData,
                DefinitionStages.WithRoles,
                DefinitionStages.WithMechanisms {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            MongoUserDefinitionGetResults create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            MongoUserDefinitionGetResults create(Context context);
        }
        /** The stage of the MongoUserDefinitionGetResults definition allowing to specify username. */
        interface WithUsername {
            /**
             * Specifies the username property: The user name for User Definition..
             *
             * @param username The user name for User Definition.
             * @return the next definition stage.
             */
            WithCreate withUsername(String username);
        }
        /** The stage of the MongoUserDefinitionGetResults definition allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: The password for User Definition. Response does not contain user
             * password..
             *
             * @param password The password for User Definition. Response does not contain user password.
             * @return the next definition stage.
             */
            WithCreate withPassword(String password);
        }
        /** The stage of the MongoUserDefinitionGetResults definition allowing to specify databaseName. */
        interface WithDatabaseName {
            /**
             * Specifies the databaseName property: The database name for which access is being granted for this User
             * Definition..
             *
             * @param databaseName The database name for which access is being granted for this User Definition.
             * @return the next definition stage.
             */
            WithCreate withDatabaseName(String databaseName);
        }
        /** The stage of the MongoUserDefinitionGetResults definition allowing to specify customData. */
        interface WithCustomData {
            /**
             * Specifies the customData property: A custom definition for the USer Definition..
             *
             * @param customData A custom definition for the USer Definition.
             * @return the next definition stage.
             */
            WithCreate withCustomData(String customData);
        }
        /** The stage of the MongoUserDefinitionGetResults definition allowing to specify roles. */
        interface WithRoles {
            /**
             * Specifies the roles property: The set of roles inherited by the User Definition..
             *
             * @param roles The set of roles inherited by the User Definition.
             * @return the next definition stage.
             */
            WithCreate withRoles(List<Role> roles);
        }
        /** The stage of the MongoUserDefinitionGetResults definition allowing to specify mechanisms. */
        interface WithMechanisms {
            /**
             * Specifies the mechanisms property: The Mongo Auth mechanism. For now, we only support auth mechanism
             * SCRAM-SHA-256..
             *
             * @param mechanisms The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
             * @return the next definition stage.
             */
            WithCreate withMechanisms(String mechanisms);
        }
    }
    /**
     * Begins update for the MongoUserDefinitionGetResults resource.
     *
     * @return the stage of resource update.
     */
    MongoUserDefinitionGetResults.Update update();

    /** The template for MongoUserDefinitionGetResults update. */
    interface Update
        extends UpdateStages.WithUsername,
            UpdateStages.WithPassword,
            UpdateStages.WithDatabaseName,
            UpdateStages.WithCustomData,
            UpdateStages.WithRoles,
            UpdateStages.WithMechanisms {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        MongoUserDefinitionGetResults apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        MongoUserDefinitionGetResults apply(Context context);
    }
    /** The MongoUserDefinitionGetResults update stages. */
    interface UpdateStages {
        /** The stage of the MongoUserDefinitionGetResults update allowing to specify username. */
        interface WithUsername {
            /**
             * Specifies the username property: The user name for User Definition..
             *
             * @param username The user name for User Definition.
             * @return the next definition stage.
             */
            Update withUsername(String username);
        }
        /** The stage of the MongoUserDefinitionGetResults update allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: The password for User Definition. Response does not contain user
             * password..
             *
             * @param password The password for User Definition. Response does not contain user password.
             * @return the next definition stage.
             */
            Update withPassword(String password);
        }
        /** The stage of the MongoUserDefinitionGetResults update allowing to specify databaseName. */
        interface WithDatabaseName {
            /**
             * Specifies the databaseName property: The database name for which access is being granted for this User
             * Definition..
             *
             * @param databaseName The database name for which access is being granted for this User Definition.
             * @return the next definition stage.
             */
            Update withDatabaseName(String databaseName);
        }
        /** The stage of the MongoUserDefinitionGetResults update allowing to specify customData. */
        interface WithCustomData {
            /**
             * Specifies the customData property: A custom definition for the USer Definition..
             *
             * @param customData A custom definition for the USer Definition.
             * @return the next definition stage.
             */
            Update withCustomData(String customData);
        }
        /** The stage of the MongoUserDefinitionGetResults update allowing to specify roles. */
        interface WithRoles {
            /**
             * Specifies the roles property: The set of roles inherited by the User Definition..
             *
             * @param roles The set of roles inherited by the User Definition.
             * @return the next definition stage.
             */
            Update withRoles(List<Role> roles);
        }
        /** The stage of the MongoUserDefinitionGetResults update allowing to specify mechanisms. */
        interface WithMechanisms {
            /**
             * Specifies the mechanisms property: The Mongo Auth mechanism. For now, we only support auth mechanism
             * SCRAM-SHA-256..
             *
             * @param mechanisms The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
             * @return the next definition stage.
             */
            Update withMechanisms(String mechanisms);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    MongoUserDefinitionGetResults refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    MongoUserDefinitionGetResults refresh(Context context);
}
