// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.LocationsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.LocationGetResultInner;
import com.azure.resourcemanager.cosmos.generated.models.LocationGetResult;
import com.azure.resourcemanager.cosmos.generated.models.Locations;

public final class LocationsImpl implements Locations {
    private static final ClientLogger LOGGER = new ClientLogger(LocationsImpl.class);

    private final LocationsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public LocationsImpl(
        LocationsClient innerClient, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LocationGetResult> list() {
        PagedIterable<LocationGetResultInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new LocationGetResultImpl(inner1, this.manager()));
    }

    public PagedIterable<LocationGetResult> list(Context context) {
        PagedIterable<LocationGetResultInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new LocationGetResultImpl(inner1, this.manager()));
    }

    public LocationGetResult get(String location) {
        LocationGetResultInner inner = this.serviceClient().get(location);
        if (inner != null) {
            return new LocationGetResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LocationGetResult> getWithResponse(String location, Context context) {
        Response<LocationGetResultInner> inner = this.serviceClient().getWithResponse(location, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LocationGetResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private LocationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }
}
