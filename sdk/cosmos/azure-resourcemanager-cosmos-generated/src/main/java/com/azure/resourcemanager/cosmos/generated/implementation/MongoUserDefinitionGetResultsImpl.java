// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoUserDefinitionGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.MongoUserDefinitionCreateUpdateParameters;
import com.azure.resourcemanager.cosmos.generated.models.MongoUserDefinitionGetResults;
import com.azure.resourcemanager.cosmos.generated.models.Role;
import java.util.Collections;
import java.util.List;

public final class MongoUserDefinitionGetResultsImpl
    implements MongoUserDefinitionGetResults,
        MongoUserDefinitionGetResults.Definition,
        MongoUserDefinitionGetResults.Update {
    private MongoUserDefinitionGetResultsInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String username() {
        return this.innerModel().username();
    }

    public String password() {
        return this.innerModel().password();
    }

    public String databaseName() {
        return this.innerModel().databaseName();
    }

    public String customData() {
        return this.innerModel().customData();
    }

    public List<Role> roles() {
        List<Role> inner = this.innerModel().roles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String mechanisms() {
        return this.innerModel().mechanisms();
    }

    public MongoUserDefinitionGetResultsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String mongoUserDefinitionId;

    private String resourceGroupName;

    private String accountName;

    private MongoUserDefinitionCreateUpdateParameters createCreateUpdateMongoUserDefinitionParameters;

    private MongoUserDefinitionCreateUpdateParameters updateCreateUpdateMongoUserDefinitionParameters;

    public MongoUserDefinitionGetResultsImpl withExistingDatabaseAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    public MongoUserDefinitionGetResults create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoUserDefinition(
                    mongoUserDefinitionId,
                    resourceGroupName,
                    accountName,
                    createCreateUpdateMongoUserDefinitionParameters,
                    Context.NONE);
        return this;
    }

    public MongoUserDefinitionGetResults create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoUserDefinition(
                    mongoUserDefinitionId,
                    resourceGroupName,
                    accountName,
                    createCreateUpdateMongoUserDefinitionParameters,
                    context);
        return this;
    }

    MongoUserDefinitionGetResultsImpl(
        String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new MongoUserDefinitionGetResultsInner();
        this.serviceManager = serviceManager;
        this.mongoUserDefinitionId = name;
        this.createCreateUpdateMongoUserDefinitionParameters = new MongoUserDefinitionCreateUpdateParameters();
    }

    public MongoUserDefinitionGetResultsImpl update() {
        this.updateCreateUpdateMongoUserDefinitionParameters = new MongoUserDefinitionCreateUpdateParameters();
        return this;
    }

    public MongoUserDefinitionGetResults apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoUserDefinition(
                    mongoUserDefinitionId,
                    resourceGroupName,
                    accountName,
                    updateCreateUpdateMongoUserDefinitionParameters,
                    Context.NONE);
        return this;
    }

    public MongoUserDefinitionGetResults apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .createUpdateMongoUserDefinition(
                    mongoUserDefinitionId,
                    resourceGroupName,
                    accountName,
                    updateCreateUpdateMongoUserDefinitionParameters,
                    context);
        return this;
    }

    MongoUserDefinitionGetResultsImpl(
        MongoUserDefinitionGetResultsInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.mongoUserDefinitionId = Utils.getValueFromIdByName(innerObject.id(), "mongodbUserDefinitions");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "databaseAccounts");
    }

    public MongoUserDefinitionGetResults refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .getMongoUserDefinitionWithResponse(mongoUserDefinitionId, resourceGroupName, accountName, Context.NONE)
                .getValue();
        return this;
    }

    public MongoUserDefinitionGetResults refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMongoDBResources()
                .getMongoUserDefinitionWithResponse(mongoUserDefinitionId, resourceGroupName, accountName, context)
                .getValue();
        return this;
    }

    public MongoUserDefinitionGetResultsImpl withUsername(String username) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoUserDefinitionParameters.withUsername(username);
            return this;
        } else {
            this.updateCreateUpdateMongoUserDefinitionParameters.withUsername(username);
            return this;
        }
    }

    public MongoUserDefinitionGetResultsImpl withPassword(String password) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoUserDefinitionParameters.withPassword(password);
            return this;
        } else {
            this.updateCreateUpdateMongoUserDefinitionParameters.withPassword(password);
            return this;
        }
    }

    public MongoUserDefinitionGetResultsImpl withDatabaseName(String databaseName) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoUserDefinitionParameters.withDatabaseName(databaseName);
            return this;
        } else {
            this.updateCreateUpdateMongoUserDefinitionParameters.withDatabaseName(databaseName);
            return this;
        }
    }

    public MongoUserDefinitionGetResultsImpl withCustomData(String customData) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoUserDefinitionParameters.withCustomData(customData);
            return this;
        } else {
            this.updateCreateUpdateMongoUserDefinitionParameters.withCustomData(customData);
            return this;
        }
    }

    public MongoUserDefinitionGetResultsImpl withRoles(List<Role> roles) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoUserDefinitionParameters.withRoles(roles);
            return this;
        } else {
            this.updateCreateUpdateMongoUserDefinitionParameters.withRoles(roles);
            return this;
        }
    }

    public MongoUserDefinitionGetResultsImpl withMechanisms(String mechanisms) {
        if (isInCreateMode()) {
            this.createCreateUpdateMongoUserDefinitionParameters.withMechanisms(mechanisms);
            return this;
        } else {
            this.updateCreateUpdateMongoUserDefinitionParameters.withMechanisms(mechanisms);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
