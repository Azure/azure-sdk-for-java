// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ClientEncryptionKeyGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.ClientEncryptionKeyCreateUpdateParameters;
import com.azure.resourcemanager.cosmos.generated.models.ClientEncryptionKeyGetPropertiesResource;
import com.azure.resourcemanager.cosmos.generated.models.ClientEncryptionKeyGetResults;
import com.azure.resourcemanager.cosmos.generated.models.ClientEncryptionKeyResource;

public final class ClientEncryptionKeyGetResultsImpl
    implements ClientEncryptionKeyGetResults,
        ClientEncryptionKeyGetResults.Definition,
        ClientEncryptionKeyGetResults.Update {
    private ClientEncryptionKeyGetResultsInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ClientEncryptionKeyGetPropertiesResource resource() {
        return this.innerModel().resource();
    }

    public ClientEncryptionKeyGetResultsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private String databaseName;

    private String clientEncryptionKeyName;

    private ClientEncryptionKeyCreateUpdateParameters createCreateUpdateClientEncryptionKeyParameters;

    private ClientEncryptionKeyCreateUpdateParameters updateCreateUpdateClientEncryptionKeyParameters;

    public ClientEncryptionKeyGetResultsImpl withExistingSqlDatabase(
        String resourceGroupName, String accountName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.databaseName = databaseName;
        return this;
    }

    public ClientEncryptionKeyGetResults create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateClientEncryptionKey(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    clientEncryptionKeyName,
                    createCreateUpdateClientEncryptionKeyParameters,
                    Context.NONE);
        return this;
    }

    public ClientEncryptionKeyGetResults create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateClientEncryptionKey(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    clientEncryptionKeyName,
                    createCreateUpdateClientEncryptionKeyParameters,
                    context);
        return this;
    }

    ClientEncryptionKeyGetResultsImpl(
        String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new ClientEncryptionKeyGetResultsInner();
        this.serviceManager = serviceManager;
        this.clientEncryptionKeyName = name;
        this.createCreateUpdateClientEncryptionKeyParameters = new ClientEncryptionKeyCreateUpdateParameters();
    }

    public ClientEncryptionKeyGetResultsImpl update() {
        this.updateCreateUpdateClientEncryptionKeyParameters = new ClientEncryptionKeyCreateUpdateParameters();
        return this;
    }

    public ClientEncryptionKeyGetResults apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateClientEncryptionKey(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    clientEncryptionKeyName,
                    updateCreateUpdateClientEncryptionKeyParameters,
                    Context.NONE);
        return this;
    }

    public ClientEncryptionKeyGetResults apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .createUpdateClientEncryptionKey(
                    resourceGroupName,
                    accountName,
                    databaseName,
                    clientEncryptionKeyName,
                    updateCreateUpdateClientEncryptionKeyParameters,
                    context);
        return this;
    }

    ClientEncryptionKeyGetResultsImpl(
        ClientEncryptionKeyGetResultsInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "databaseAccounts");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "sqlDatabases");
        this.clientEncryptionKeyName = Utils.getValueFromIdByName(innerObject.id(), "clientEncryptionKeys");
    }

    public ClientEncryptionKeyGetResults refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .getClientEncryptionKeyWithResponse(
                    resourceGroupName, accountName, databaseName, clientEncryptionKeyName, Context.NONE)
                .getValue();
        return this;
    }

    public ClientEncryptionKeyGetResults refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlResources()
                .getClientEncryptionKeyWithResponse(
                    resourceGroupName, accountName, databaseName, clientEncryptionKeyName, context)
                .getValue();
        return this;
    }

    public ClientEncryptionKeyGetResultsImpl withResource(ClientEncryptionKeyResource resource) {
        if (isInCreateMode()) {
            this.createCreateUpdateClientEncryptionKeyParameters.withResource(resource);
            return this;
        } else {
            this.updateCreateUpdateClientEncryptionKeyParameters.withResource(resource);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
