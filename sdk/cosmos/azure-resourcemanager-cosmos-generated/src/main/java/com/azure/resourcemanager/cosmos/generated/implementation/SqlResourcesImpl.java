// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.CosmosDBManager;
import com.azure.resourcemanager.cosmos.generated.fluent.SqlResourcesClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.SqlContainerGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.SqlDatabaseGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.SqlStoredProcedureGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.SqlTriggerGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.SqlUserDefinedFunctionGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ThroughputSettingsGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.SqlContainerGetResults;
import com.azure.resourcemanager.cosmos.generated.models.SqlDatabaseGetResults;
import com.azure.resourcemanager.cosmos.generated.models.SqlResources;
import com.azure.resourcemanager.cosmos.generated.models.SqlStoredProcedureGetResults;
import com.azure.resourcemanager.cosmos.generated.models.SqlTriggerGetResults;
import com.azure.resourcemanager.cosmos.generated.models.SqlUserDefinedFunctionGetResults;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsGetResults;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsUpdateParameters;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SqlResourcesImpl implements SqlResources {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SqlResourcesImpl.class);

    private final SqlResourcesClient innerClient;

    private final CosmosDBManager serviceManager;

    public SqlResourcesImpl(SqlResourcesClient innerClient, CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SqlDatabaseGetResults> listSqlDatabases(String resourceGroupName, String accountName) {
        PagedIterable<SqlDatabaseGetResultsInner> inner =
            this.serviceClient().listSqlDatabases(resourceGroupName, accountName);
        return inner.mapPage(inner1 -> new SqlDatabaseGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlDatabaseGetResults> listSqlDatabases(
        String resourceGroupName, String accountName, Context context) {
        PagedIterable<SqlDatabaseGetResultsInner> inner =
            this.serviceClient().listSqlDatabases(resourceGroupName, accountName, context);
        return inner.mapPage(inner1 -> new SqlDatabaseGetResultsImpl(inner1, this.manager()));
    }

    public SqlDatabaseGetResults getSqlDatabase(String resourceGroupName, String accountName, String databaseName) {
        SqlDatabaseGetResultsInner inner =
            this.serviceClient().getSqlDatabase(resourceGroupName, accountName, databaseName);
        if (inner != null) {
            return new SqlDatabaseGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlDatabaseGetResults> getSqlDatabaseWithResponse(
        String resourceGroupName, String accountName, String databaseName, Context context) {
        Response<SqlDatabaseGetResultsInner> inner =
            this.serviceClient().getSqlDatabaseWithResponse(resourceGroupName, accountName, databaseName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlDatabaseGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteSqlDatabase(String resourceGroupName, String accountName, String databaseName) {
        this.serviceClient().deleteSqlDatabase(resourceGroupName, accountName, databaseName);
    }

    public void deleteSqlDatabase(String resourceGroupName, String accountName, String databaseName, Context context) {
        this.serviceClient().deleteSqlDatabase(resourceGroupName, accountName, databaseName, context);
    }

    public ThroughputSettingsGetResults getSqlDatabaseThroughput(
        String resourceGroupName, String accountName, String databaseName) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().getSqlDatabaseThroughput(resourceGroupName, accountName, databaseName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ThroughputSettingsGetResults> getSqlDatabaseThroughputWithResponse(
        String resourceGroupName, String accountName, String databaseName, Context context) {
        Response<ThroughputSettingsGetResultsInner> inner =
            this
                .serviceClient()
                .getSqlDatabaseThroughputWithResponse(resourceGroupName, accountName, databaseName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ThroughputSettingsGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateSqlDatabaseThroughput(
        String resourceGroupName,
        String accountName,
        String databaseName,
        ThroughputSettingsUpdateParameters updateThroughputParameters) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .updateSqlDatabaseThroughput(resourceGroupName, accountName, databaseName, updateThroughputParameters);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateSqlDatabaseThroughput(
        String resourceGroupName,
        String accountName,
        String databaseName,
        ThroughputSettingsUpdateParameters updateThroughputParameters,
        Context context) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .updateSqlDatabaseThroughput(
                    resourceGroupName, accountName, databaseName, updateThroughputParameters, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlDatabaseToAutoscale(
        String resourceGroupName, String accountName, String databaseName) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().migrateSqlDatabaseToAutoscale(resourceGroupName, accountName, databaseName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlDatabaseToAutoscale(
        String resourceGroupName, String accountName, String databaseName, Context context) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().migrateSqlDatabaseToAutoscale(resourceGroupName, accountName, databaseName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlDatabaseToManualThroughput(
        String resourceGroupName, String accountName, String databaseName) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().migrateSqlDatabaseToManualThroughput(resourceGroupName, accountName, databaseName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlDatabaseToManualThroughput(
        String resourceGroupName, String accountName, String databaseName, Context context) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .migrateSqlDatabaseToManualThroughput(resourceGroupName, accountName, databaseName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SqlContainerGetResults> listSqlContainers(
        String resourceGroupName, String accountName, String databaseName) {
        PagedIterable<SqlContainerGetResultsInner> inner =
            this.serviceClient().listSqlContainers(resourceGroupName, accountName, databaseName);
        return inner.mapPage(inner1 -> new SqlContainerGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlContainerGetResults> listSqlContainers(
        String resourceGroupName, String accountName, String databaseName, Context context) {
        PagedIterable<SqlContainerGetResultsInner> inner =
            this.serviceClient().listSqlContainers(resourceGroupName, accountName, databaseName, context);
        return inner.mapPage(inner1 -> new SqlContainerGetResultsImpl(inner1, this.manager()));
    }

    public SqlContainerGetResults getSqlContainer(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        SqlContainerGetResultsInner inner =
            this.serviceClient().getSqlContainer(resourceGroupName, accountName, databaseName, containerName);
        if (inner != null) {
            return new SqlContainerGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlContainerGetResults> getSqlContainerWithResponse(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        Response<SqlContainerGetResultsInner> inner =
            this
                .serviceClient()
                .getSqlContainerWithResponse(resourceGroupName, accountName, databaseName, containerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlContainerGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteSqlContainer(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        this.serviceClient().deleteSqlContainer(resourceGroupName, accountName, databaseName, containerName);
    }

    public void deleteSqlContainer(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        this.serviceClient().deleteSqlContainer(resourceGroupName, accountName, databaseName, containerName, context);
    }

    public ThroughputSettingsGetResults getSqlContainerThroughput(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        ThroughputSettingsGetResultsInner inner =
            this.serviceClient().getSqlContainerThroughput(resourceGroupName, accountName, databaseName, containerName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ThroughputSettingsGetResults> getSqlContainerThroughputWithResponse(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        Response<ThroughputSettingsGetResultsInner> inner =
            this
                .serviceClient()
                .getSqlContainerThroughputWithResponse(
                    resourceGroupName, accountName, databaseName, containerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ThroughputSettingsGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateSqlContainerThroughput(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        ThroughputSettingsUpdateParameters updateThroughputParameters) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .updateSqlContainerThroughput(
                    resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateSqlContainerThroughput(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        ThroughputSettingsUpdateParameters updateThroughputParameters,
        Context context) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .updateSqlContainerThroughput(
                    resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlContainerToAutoscale(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .migrateSqlContainerToAutoscale(resourceGroupName, accountName, databaseName, containerName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlContainerToAutoscale(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .migrateSqlContainerToAutoscale(resourceGroupName, accountName, databaseName, containerName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlContainerToManualThroughput(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .migrateSqlContainerToManualThroughput(resourceGroupName, accountName, databaseName, containerName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateSqlContainerToManualThroughput(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        ThroughputSettingsGetResultsInner inner =
            this
                .serviceClient()
                .migrateSqlContainerToManualThroughput(
                    resourceGroupName, accountName, databaseName, containerName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SqlStoredProcedureGetResults> listSqlStoredProcedures(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        PagedIterable<SqlStoredProcedureGetResultsInner> inner =
            this.serviceClient().listSqlStoredProcedures(resourceGroupName, accountName, databaseName, containerName);
        return inner.mapPage(inner1 -> new SqlStoredProcedureGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlStoredProcedureGetResults> listSqlStoredProcedures(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        PagedIterable<SqlStoredProcedureGetResultsInner> inner =
            this
                .serviceClient()
                .listSqlStoredProcedures(resourceGroupName, accountName, databaseName, containerName, context);
        return inner.mapPage(inner1 -> new SqlStoredProcedureGetResultsImpl(inner1, this.manager()));
    }

    public SqlStoredProcedureGetResults getSqlStoredProcedure(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String storedProcedureName) {
        SqlStoredProcedureGetResultsInner inner =
            this
                .serviceClient()
                .getSqlStoredProcedure(
                    resourceGroupName, accountName, databaseName, containerName, storedProcedureName);
        if (inner != null) {
            return new SqlStoredProcedureGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlStoredProcedureGetResults> getSqlStoredProcedureWithResponse(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String storedProcedureName,
        Context context) {
        Response<SqlStoredProcedureGetResultsInner> inner =
            this
                .serviceClient()
                .getSqlStoredProcedureWithResponse(
                    resourceGroupName, accountName, databaseName, containerName, storedProcedureName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlStoredProcedureGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteSqlStoredProcedure(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String storedProcedureName) {
        this
            .serviceClient()
            .deleteSqlStoredProcedure(resourceGroupName, accountName, databaseName, containerName, storedProcedureName);
    }

    public void deleteSqlStoredProcedure(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String storedProcedureName,
        Context context) {
        this
            .serviceClient()
            .deleteSqlStoredProcedure(
                resourceGroupName, accountName, databaseName, containerName, storedProcedureName, context);
    }

    public PagedIterable<SqlUserDefinedFunctionGetResults> listSqlUserDefinedFunctions(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        PagedIterable<SqlUserDefinedFunctionGetResultsInner> inner =
            this
                .serviceClient()
                .listSqlUserDefinedFunctions(resourceGroupName, accountName, databaseName, containerName);
        return inner.mapPage(inner1 -> new SqlUserDefinedFunctionGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlUserDefinedFunctionGetResults> listSqlUserDefinedFunctions(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        PagedIterable<SqlUserDefinedFunctionGetResultsInner> inner =
            this
                .serviceClient()
                .listSqlUserDefinedFunctions(resourceGroupName, accountName, databaseName, containerName, context);
        return inner.mapPage(inner1 -> new SqlUserDefinedFunctionGetResultsImpl(inner1, this.manager()));
    }

    public SqlUserDefinedFunctionGetResults getSqlUserDefinedFunction(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String userDefinedFunctionName) {
        SqlUserDefinedFunctionGetResultsInner inner =
            this
                .serviceClient()
                .getSqlUserDefinedFunction(
                    resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName);
        if (inner != null) {
            return new SqlUserDefinedFunctionGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlUserDefinedFunctionGetResults> getSqlUserDefinedFunctionWithResponse(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String userDefinedFunctionName,
        Context context) {
        Response<SqlUserDefinedFunctionGetResultsInner> inner =
            this
                .serviceClient()
                .getSqlUserDefinedFunctionWithResponse(
                    resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlUserDefinedFunctionGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteSqlUserDefinedFunction(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String userDefinedFunctionName) {
        this
            .serviceClient()
            .deleteSqlUserDefinedFunction(
                resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName);
    }

    public void deleteSqlUserDefinedFunction(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String userDefinedFunctionName,
        Context context) {
        this
            .serviceClient()
            .deleteSqlUserDefinedFunction(
                resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, context);
    }

    public PagedIterable<SqlTriggerGetResults> listSqlTriggers(
        String resourceGroupName, String accountName, String databaseName, String containerName) {
        PagedIterable<SqlTriggerGetResultsInner> inner =
            this.serviceClient().listSqlTriggers(resourceGroupName, accountName, databaseName, containerName);
        return inner.mapPage(inner1 -> new SqlTriggerGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlTriggerGetResults> listSqlTriggers(
        String resourceGroupName, String accountName, String databaseName, String containerName, Context context) {
        PagedIterable<SqlTriggerGetResultsInner> inner =
            this.serviceClient().listSqlTriggers(resourceGroupName, accountName, databaseName, containerName, context);
        return inner.mapPage(inner1 -> new SqlTriggerGetResultsImpl(inner1, this.manager()));
    }

    public SqlTriggerGetResults getSqlTrigger(
        String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName) {
        SqlTriggerGetResultsInner inner =
            this
                .serviceClient()
                .getSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName);
        if (inner != null) {
            return new SqlTriggerGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlTriggerGetResults> getSqlTriggerWithResponse(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String triggerName,
        Context context) {
        Response<SqlTriggerGetResultsInner> inner =
            this
                .serviceClient()
                .getSqlTriggerWithResponse(
                    resourceGroupName, accountName, databaseName, containerName, triggerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlTriggerGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteSqlTrigger(
        String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName) {
        this.serviceClient().deleteSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName);
    }

    public void deleteSqlTrigger(
        String resourceGroupName,
        String accountName,
        String databaseName,
        String containerName,
        String triggerName,
        Context context) {
        this
            .serviceClient()
            .deleteSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName, context);
    }

    public SqlDatabaseGetResults getSqlDatabaseById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        return this.getSqlDatabaseWithResponse(resourceGroupName, accountName, databaseName, Context.NONE).getValue();
    }

    public Response<SqlDatabaseGetResults> getSqlDatabaseByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        return this.getSqlDatabaseWithResponse(resourceGroupName, accountName, databaseName, context);
    }

    public SqlContainerGetResults getSqlContainerById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        return this
            .getSqlContainerWithResponse(resourceGroupName, accountName, databaseName, containerName, Context.NONE)
            .getValue();
    }

    public Response<SqlContainerGetResults> getSqlContainerByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        return this.getSqlContainerWithResponse(resourceGroupName, accountName, databaseName, containerName, context);
    }

    public SqlStoredProcedureGetResults getSqlStoredProcedureById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String storedProcedureName = Utils.getValueFromIdByName(id, "storedProcedures");
        if (storedProcedureName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storedProcedures'.", id)));
        }
        return this
            .getSqlStoredProcedureWithResponse(
                resourceGroupName, accountName, databaseName, containerName, storedProcedureName, Context.NONE)
            .getValue();
    }

    public Response<SqlStoredProcedureGetResults> getSqlStoredProcedureByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String storedProcedureName = Utils.getValueFromIdByName(id, "storedProcedures");
        if (storedProcedureName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storedProcedures'.", id)));
        }
        return this
            .getSqlStoredProcedureWithResponse(
                resourceGroupName, accountName, databaseName, containerName, storedProcedureName, context);
    }

    public SqlUserDefinedFunctionGetResults getSqlUserDefinedFunctionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String userDefinedFunctionName = Utils.getValueFromIdByName(id, "userDefinedFunctions");
        if (userDefinedFunctionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userDefinedFunctions'.",
                                id)));
        }
        return this
            .getSqlUserDefinedFunctionWithResponse(
                resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, Context.NONE)
            .getValue();
    }

    public Response<SqlUserDefinedFunctionGetResults> getSqlUserDefinedFunctionByIdWithResponse(
        String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String userDefinedFunctionName = Utils.getValueFromIdByName(id, "userDefinedFunctions");
        if (userDefinedFunctionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userDefinedFunctions'.",
                                id)));
        }
        return this
            .getSqlUserDefinedFunctionWithResponse(
                resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, context);
    }

    public SqlTriggerGetResults getSqlTriggerById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String triggerName = Utils.getValueFromIdByName(id, "triggers");
        if (triggerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'triggers'.", id)));
        }
        return this
            .getSqlTriggerWithResponse(
                resourceGroupName, accountName, databaseName, containerName, triggerName, Context.NONE)
            .getValue();
    }

    public Response<SqlTriggerGetResults> getSqlTriggerByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String triggerName = Utils.getValueFromIdByName(id, "triggers");
        if (triggerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'triggers'.", id)));
        }
        return this
            .getSqlTriggerWithResponse(
                resourceGroupName, accountName, databaseName, containerName, triggerName, context);
    }

    public void deleteSqlDatabaseById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        this.deleteSqlDatabase(resourceGroupName, accountName, databaseName, Context.NONE);
    }

    public void deleteSqlDatabaseByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        this.deleteSqlDatabase(resourceGroupName, accountName, databaseName, context);
    }

    public void deleteSqlContainerById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        this.deleteSqlContainer(resourceGroupName, accountName, databaseName, containerName, Context.NONE);
    }

    public void deleteSqlContainerByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        this.deleteSqlContainer(resourceGroupName, accountName, databaseName, containerName, context);
    }

    public void deleteSqlStoredProcedureById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String storedProcedureName = Utils.getValueFromIdByName(id, "storedProcedures");
        if (storedProcedureName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storedProcedures'.", id)));
        }
        this
            .deleteSqlStoredProcedure(
                resourceGroupName, accountName, databaseName, containerName, storedProcedureName, Context.NONE);
    }

    public void deleteSqlStoredProcedureByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String storedProcedureName = Utils.getValueFromIdByName(id, "storedProcedures");
        if (storedProcedureName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storedProcedures'.", id)));
        }
        this
            .deleteSqlStoredProcedure(
                resourceGroupName, accountName, databaseName, containerName, storedProcedureName, context);
    }

    public void deleteSqlUserDefinedFunctionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String userDefinedFunctionName = Utils.getValueFromIdByName(id, "userDefinedFunctions");
        if (userDefinedFunctionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userDefinedFunctions'.",
                                id)));
        }
        this
            .deleteSqlUserDefinedFunction(
                resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, Context.NONE);
    }

    public void deleteSqlUserDefinedFunctionByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String userDefinedFunctionName = Utils.getValueFromIdByName(id, "userDefinedFunctions");
        if (userDefinedFunctionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userDefinedFunctions'.",
                                id)));
        }
        this
            .deleteSqlUserDefinedFunction(
                resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, context);
    }

    public void deleteSqlTriggerById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String triggerName = Utils.getValueFromIdByName(id, "triggers");
        if (triggerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'triggers'.", id)));
        }
        this.deleteSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName, Context.NONE);
    }

    public void deleteSqlTriggerByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "sqlDatabases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlDatabases'.", id)));
        }
        String containerName = Utils.getValueFromIdByName(id, "containers");
        if (containerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'containers'.", id)));
        }
        String triggerName = Utils.getValueFromIdByName(id, "triggers");
        if (triggerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'triggers'.", id)));
        }
        this.deleteSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName, context);
    }

    private SqlResourcesClient serviceClient() {
        return this.innerClient;
    }

    private CosmosDBManager manager() {
        return this.serviceManager;
    }

    public SqlDatabaseGetResultsImpl defineUpdateSqlDatabase(String name) {
        return new SqlDatabaseGetResultsImpl(name, this.manager());
    }

    public SqlContainerGetResultsImpl defineUpdateSqlContainer(String name) {
        return new SqlContainerGetResultsImpl(name, this.manager());
    }

    public SqlStoredProcedureGetResultsImpl defineUpdateSqlStoredProcedure(String name) {
        return new SqlStoredProcedureGetResultsImpl(name, this.manager());
    }

    public SqlUserDefinedFunctionGetResultsImpl defineUpdateSqlUserDefinedFunction(String name) {
        return new SqlUserDefinedFunctionGetResultsImpl(name, this.manager());
    }

    public SqlTriggerGetResultsImpl defineUpdateSqlTrigger(String name) {
        return new SqlTriggerGetResultsImpl(name, this.manager());
    }
}
