// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.generated;

import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.models.AnalyticalStorageConfiguration;
import com.azure.resourcemanager.cosmos.generated.models.AnalyticalStorageSchemaType;
import com.azure.resourcemanager.cosmos.generated.models.BackupStorageRedundancy;
import com.azure.resourcemanager.cosmos.generated.models.Capacity;
import com.azure.resourcemanager.cosmos.generated.models.ConsistencyPolicy;
import com.azure.resourcemanager.cosmos.generated.models.DatabaseAccountGetResults;
import com.azure.resourcemanager.cosmos.generated.models.DefaultConsistencyLevel;
import com.azure.resourcemanager.cosmos.generated.models.DiagnosticLogSettings;
import com.azure.resourcemanager.cosmos.generated.models.EnableFullTextQuery;
import com.azure.resourcemanager.cosmos.generated.models.IpAddressOrRange;
import com.azure.resourcemanager.cosmos.generated.models.ManagedServiceIdentity;
import com.azure.resourcemanager.cosmos.generated.models.ManagedServiceIdentityUserAssignedIdentities;
import com.azure.resourcemanager.cosmos.generated.models.NetworkAclBypass;
import com.azure.resourcemanager.cosmos.generated.models.PeriodicModeBackupPolicy;
import com.azure.resourcemanager.cosmos.generated.models.PeriodicModeProperties;
import com.azure.resourcemanager.cosmos.generated.models.ResourceIdentityType;
import com.azure.resourcemanager.cosmos.generated.models.VirtualNetworkRule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for DatabaseAccounts Update. */
public final class DatabaseAccountsUpdateSamples {
    /*
     * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2022-02-15-preview/examples/CosmosDBDatabaseAccountPatch.json
     */
    /**
     * Sample code: CosmosDBDatabaseAccountPatch.
     *
     * @param manager Entry point to CosmosDBManager.
     */
    public static void cosmosDBDatabaseAccountPatch(
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager) {
        DatabaseAccountGetResults resource =
            manager.databaseAccounts().getByResourceGroupWithResponse("rg1", "ddb1", Context.NONE).getValue();
        resource
            .update()
            .withTags(mapOf("dept", "finance"))
            .withIdentity(
                new ManagedServiceIdentity()
                    .withType(ResourceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf(
                            "/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1",
                            new ManagedServiceIdentityUserAssignedIdentities())))
            .withConsistencyPolicy(
                new ConsistencyPolicy()
                    .withDefaultConsistencyLevel(DefaultConsistencyLevel.BOUNDED_STALENESS)
                    .withMaxStalenessPrefix(200L)
                    .withMaxIntervalInSeconds(10))
            .withIpRules(
                Arrays
                    .asList(
                        new IpAddressOrRange().withIpAddressOrRange("23.43.230.120"),
                        new IpAddressOrRange().withIpAddressOrRange("110.12.240.0/12")))
            .withIsVirtualNetworkFilterEnabled(true)
            .withVirtualNetworkRules(
                Arrays
                    .asList(
                        new VirtualNetworkRule()
                            .withId(
                                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1")
                            .withIgnoreMissingVNetServiceEndpoint(false)))
            .withDefaultIdentity("FirstPartyIdentity")
            .withEnableFreeTier(false)
            .withEnableAnalyticalStorage(true)
            .withAnalyticalStorageConfiguration(
                new AnalyticalStorageConfiguration().withSchemaType(AnalyticalStorageSchemaType.WELL_DEFINED))
            .withBackupPolicy(
                new PeriodicModeBackupPolicy()
                    .withPeriodicModeProperties(
                        new PeriodicModeProperties()
                            .withBackupIntervalInMinutes(240)
                            .withBackupRetentionIntervalInHours(720)
                            .withBackupStorageRedundancy(BackupStorageRedundancy.GEO)))
            .withNetworkAclBypass(NetworkAclBypass.AZURE_SERVICES)
            .withNetworkAclBypassResourceIds(
                Arrays
                    .asList(
                        "/subscriptions/subId/resourcegroups/rgName/providers/Microsoft.Synapse/workspaces/workspaceName"))
            .withDiagnosticLogSettings(new DiagnosticLogSettings().withEnableFullTextQuery(EnableFullTextQuery.TRUE))
            .withCapacity(new Capacity().withTotalThroughputLimit(2000))
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
