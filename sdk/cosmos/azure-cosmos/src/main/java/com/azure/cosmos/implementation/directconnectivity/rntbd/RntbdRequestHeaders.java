// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// THIS IS AN AUTOGENERATED FILE. ALL UPDATES SHOULD BE DONE VIA RntbdRequestHeaders.py

package com.azure.cosmos.implementation.directconnectivity.rntbd;

import com.azure.cosmos.BridgeInternal;
import com.azure.cosmos.ConsistencyLevel;
import com.azure.cosmos.implementation.ContentSerializationFormat;
import com.azure.cosmos.implementation.EnumerationDirection;
import com.azure.cosmos.implementation.FanoutOperationState;
import com.azure.cosmos.implementation.ImplementationBridgeHelpers;
import com.azure.cosmos.implementation.MigrateCollectionDirective;
import com.azure.cosmos.implementation.Paths;
import com.azure.cosmos.implementation.RMResources;
import com.azure.cosmos.implementation.ReadFeedKeyType;
import com.azure.cosmos.implementation.RemoteStorageType;
import com.azure.cosmos.implementation.ResourceId;
import com.azure.cosmos.implementation.RxDocumentServiceRequest;
import com.azure.cosmos.implementation.apachecommons.lang.EnumUtils;
import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;
import com.azure.cosmos.models.IndexingDirective;
import com.azure.cosmos.models.PriorityLevel;
import com.fasterxml.jackson.annotation.JsonFilter;
import io.netty.buffer.ByteBuf;
import io.netty.handler.codec.CorruptedFrameException;

import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.function.Supplier;

import static com.azure.cosmos.implementation.HttpConstants.HeaderValues;
import static com.azure.cosmos.implementation.HttpConstants.HttpHeaders;
import static com.azure.cosmos.implementation.directconnectivity.WFConstants.BackendHeaders;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdConsistencyLevel;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdContentSerializationFormat;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdEnumerationDirection;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdFanoutOperationState;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdIndexingDirective;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdMigrateCollectionDirective;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdOperationType;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdReadFeedKeyType;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdRemoteStorageType;
import static com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdConstants.RntbdRequestHeader;
import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;
import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;

@JsonFilter("RntbdToken")
final class RntbdRequestHeaders {
    // region Fields

    private static final String URL_TRIM = "/";
    private HashMap<RntbdRequestHeader, RntbdToken> notCommonHeaders;

    private RntbdToken resourceId;
    private RntbdToken authorizationToken;
    private RntbdToken payloadPresent;
    private RntbdToken date;
    private RntbdToken pageSize;
    private RntbdToken sessionToken;
    private RntbdToken continuationToken;
    private RntbdToken indexingDirective;
    private RntbdToken match;
    private RntbdToken preTriggerInclude;
    private RntbdToken postTriggerInclude;
    private RntbdToken isFanout;
    private RntbdToken collectionPartitionIndex;
    private RntbdToken collectionServiceIndex;
    private RntbdToken preTriggerExclude;
    private RntbdToken postTriggerExclude;
    private RntbdToken consistencyLevel;
    private RntbdToken entityId;
    private RntbdToken resourceSchemaName;
    private RntbdToken replicaPath;
    private RntbdToken resourceTokenExpiry;
    private RntbdToken databaseName;
    private RntbdToken collectionName;
    private RntbdToken documentName;
    private RntbdToken attachmentName;
    private RntbdToken userName;
    private RntbdToken permissionName;
    private RntbdToken storedProcedureName;
    private RntbdToken userDefinedFunctionName;
    private RntbdToken triggerName;
    private RntbdToken enableScanInQuery;
    private RntbdToken emitVerboseTracesInQuery;
    private RntbdToken conflictName;
    private RntbdToken bindReplicaDirective;
    private RntbdToken primaryMasterKey;
    private RntbdToken secondaryMasterKey;
    private RntbdToken primaryReadonlyKey;
    private RntbdToken secondaryReadonlyKey;
    private RntbdToken profileRequest;
    private RntbdToken enableLowPrecisionOrderBy;
    private RntbdToken clientVersion;
    private RntbdToken canCharge;
    private RntbdToken canThrottle;
    private RntbdToken partitionKey;
    private RntbdToken partitionKeyRangeId;
    private RntbdToken migrateCollectionDirective;
    private RntbdToken supportSpatialLegacyCoordinates;
    private RntbdToken partitionCount;
    private RntbdToken collectionRid;
    private RntbdToken partitionKeyRangeName;
    private RntbdToken schemaName;
    private RntbdToken filterBySchemaRid;
    private RntbdToken usePolygonsSmallerThanAHemisphere;
    private RntbdToken gatewaySignature;
    private RntbdToken enableLogging;
    private RntbdToken a_IM;
    private RntbdToken populateQuotaInfo;
    private RntbdToken disableRUPerMinuteUsage;
    private RntbdToken populateQueryMetrics;
    private RntbdToken responseContinuationTokenLimitInKb;
    private RntbdToken populatePartitionStatistics;
    private RntbdToken remoteStorageType;
    private RntbdToken collectionRemoteStorageSecurityIdentifier;
    private RntbdToken ifModifiedSince;
    private RntbdToken populateCollectionThroughputInfo;
    private RntbdToken remainingTimeInMsOnClientRequest;
    private RntbdToken clientRetryAttemptCount;
    private RntbdToken targetLsn;
    private RntbdToken targetGlobalCommittedLsn;
    private RntbdToken transportRequestID;
    private RntbdToken restoreMetadaFilter;
    private RntbdToken restoreParams;
    private RntbdToken shareThroughput;
    private RntbdToken partitionResourceFilter;
    private RntbdToken isReadOnlyScript;
    private RntbdToken isAutoScaleRequest;
    private RntbdToken forceQueryScan;
    private RntbdToken canOfferReplaceComplete;
    private RntbdToken excludeSystemProperties;
    private RntbdToken binaryId;
    private RntbdToken timeToLiveInSeconds;
    private RntbdToken effectivePartitionKey;
    private RntbdToken binaryPassthroughRequest;
    private RntbdToken userDefinedTypeName;
    private RntbdToken enableDynamicRidRangeAllocation;
    private RntbdToken enumerationDirection;
    private RntbdToken startId;
    private RntbdToken endId;
    private RntbdToken fanoutOperationState;
    private RntbdToken startEpk;
    private RntbdToken endEpk;
    private RntbdToken readFeedKeyType;
    private RntbdToken contentSerializationFormat;
    private RntbdToken allowTentativeWrites;
    private RntbdToken isUserRequest;
    private RntbdToken sharedOfferThroughput;
    private RntbdToken isBatchAtomic;
    private RntbdToken shouldBatchContinueOnError;
    private RntbdToken isBatchOrdered;
    private RntbdToken returnPreference;
    private RntbdToken populateIndexMetrics;
    private RntbdToken isClientEncrypted;
    private RntbdToken intendedCollectionRid;
    private RntbdToken correlatedActivityId;
    private RntbdToken sDKSupportedCapabilities;
    private RntbdToken changeFeedWireFormatVersion;
    private RntbdToken priorityLevel;
    // endregion

    // region Constructors

    private RntbdRequestHeaders() {
    }

    RntbdRequestHeaders(final RntbdRequestArgs args, final RntbdRequestFrame frame) {
        checkNotNull(args, "args");
        checkNotNull(frame, "frame");

        final RxDocumentServiceRequest request = args.serviceRequest();
        final byte[] content = request.getContentAsByteArray();
        final Map<String, String> headers = request.getHeaders();

        this.getPayloadPresent().setValue(content != null && content.length > 0);
        this.getReplicaPath().setValue(args.replicaPath());
        this.getTransportRequestID().setValue(args.transportRequestId());


        // Special headers
        this.addAimHeader(headers);
        this.addAllowScanOnQuery(headers);
        this.addBinaryIdIfPresent(headers);
        this.addCanCharge(headers);
        this.addCanOfferReplaceComplete(headers);
        this.addCanThrottle(headers);
        this.addCollectionRemoteStorageSecurityIdentifier(headers);
        this.addConsistencyLevelHeader(headers);
        this.addContentSerializationFormat(headers);
        this.addContinuationToken(request);
        this.addDateHeader(headers);
        this.addDisableRUPerMinuteUsage(headers);
        this.addEmitVerboseTracesInQuery(headers);
        this.addEnableLogging(headers);
        this.addEnableLowPrecisionOrderBy(headers);
        this.addEntityId(headers);
        this.addEnumerationDirection(headers);
        this.addExcludeSystemProperties(headers);
        this.addFanoutOperationStateHeader(headers);
        this.addIfModifiedSinceHeader(headers);
        this.addIndexingDirectiveHeader(headers);
        this.addIsAutoScaleRequest(headers);
        this.addIsFanout(headers);
        this.addIsReadOnlyScript(headers);
        this.addIsUserRequest(headers);
        this.addMatchHeader(headers, frame.getOperationType());
        this.addMigrateCollectionDirectiveHeader(headers);
        this.addPageSize(headers);
        this.addPopulateCollectionThroughputInfo(headers);
        this.addPopulatePartitionStatistics(headers);
        this.addPopulateQueryMetrics(headers);
        this.addPopulateQuotaInfo(headers);
        this.addProfileRequest(headers);
        this.addQueryForceScan(headers);
        this.addRemoteStorageType(headers);
        this.addResourceIdOrPathHeaders(request);
        this.addResponseContinuationTokenLimitInKb(headers);
        this.addShareThroughput(headers);
        this.addStartAndEndKeys(headers);
        this.addSupportSpatialLegacyCoordinates(headers);
        this.addUsePolygonsSmallerThanAHemisphere(headers);
        this.addReturnPreference(headers);
        this.addPopulateIndexMetrics(headers);
        this.addIsClientEncrypted(headers);
        this.addIntendedCollectionRid(headers);
        this.addCorrelatedActivityId(headers);
        this.addSDKSupportedCapabilities(headers);
        this.addChangeFeedWireFormatVersion(headers);
        this.addPriorityLevel(headers);

        // Normal headers (Strings, Ints, Longs, etc.)

        this.fillTokenFromHeader(headers, this::getAllowTentativeWrites, BackendHeaders.ALLOW_TENTATIVE_WRITES);
        this.fillTokenFromHeader(headers, this::getAuthorizationToken, HttpHeaders.AUTHORIZATION);
        this.fillTokenFromHeader(headers, this::getBinaryPassthroughRequest, BackendHeaders.BINARY_PASSTHROUGH_REQUEST);
        this.fillTokenFromHeader(headers, this::getBindReplicaDirective, BackendHeaders.BIND_REPLICA_DIRECTIVE);
        this.fillTokenFromHeader(headers, this::getClientRetryAttemptCount, HttpHeaders.CLIENT_RETRY_ATTEMPT_COUNT);
        this.fillTokenFromHeader(headers, this::getCollectionPartitionIndex, BackendHeaders.COLLECTION_PARTITION_INDEX);
        this.fillTokenFromHeader(headers, this::getCollectionRid, BackendHeaders.COLLECTION_RID);
        this.fillTokenFromHeader(headers, this::getCollectionServiceIndex, BackendHeaders.COLLECTION_SERVICE_INDEX);
        this.fillTokenFromHeader(headers, this::getEffectivePartitionKey, BackendHeaders.EFFECTIVE_PARTITION_KEY);
        this.fillTokenFromHeader(headers, this::getEnableDynamicRidRangeAllocation, BackendHeaders.ENABLE_DYNAMIC_RID_RANGE_ALLOCATION);
        this.fillTokenFromHeader(headers, this::getFilterBySchemaRid, HttpHeaders.FILTER_BY_SCHEMA_RESOURCE_ID);
        this.fillTokenFromHeader(headers, this::getGatewaySignature, HttpHeaders.GATEWAY_SIGNATURE);
        this.fillTokenFromHeader(headers, this::getPartitionCount, BackendHeaders.PARTITION_COUNT);
        this.fillTokenFromHeader(headers, this::getPartitionKey, HttpHeaders.PARTITION_KEY);
        this.fillTokenFromHeader(headers, this::getPartitionKeyRangeId, HttpHeaders.PARTITION_KEY_RANGE_ID);
        this.fillTokenFromHeader(headers, this::getPartitionResourceFilter, BackendHeaders.PARTITION_RESOURCE_FILTER);
        this.fillTokenFromHeader(headers, this::getPostTriggerExclude, HttpHeaders.POST_TRIGGER_EXCLUDE);
        this.fillTokenFromHeader(headers, this::getPostTriggerInclude, HttpHeaders.POST_TRIGGER_INCLUDE);
        this.fillTokenFromHeader(headers, this::getPreTriggerExclude, HttpHeaders.PRE_TRIGGER_EXCLUDE);
        this.fillTokenFromHeader(headers, this::getPreTriggerInclude, HttpHeaders.PRE_TRIGGER_INCLUDE);
        this.fillTokenFromHeader(headers, this::getPrimaryMasterKey, BackendHeaders.PRIMARY_MASTER_KEY);
        this.fillTokenFromHeader(headers, this::getPrimaryReadonlyKey, BackendHeaders.PRIMARY_READONLY_KEY);
        this.fillTokenFromHeader(headers, this::getRemainingTimeInMsOnClientRequest, HttpHeaders.REMAINING_TIME_IN_MS_ON_CLIENT_REQUEST);
        this.fillTokenFromHeader(headers, this::getResourceSchemaName, BackendHeaders.RESOURCE_SCHEMA_NAME);
        this.fillTokenFromHeader(headers, this::getResourceTokenExpiry, HttpHeaders.RESOURCE_TOKEN_EXPIRY);
        this.fillTokenFromHeader(headers, this::getRestoreMetadaFilter, HttpHeaders.RESTORE_METADATA_FILTER);
        this.fillTokenFromHeader(headers, this::getRestoreParams, BackendHeaders.RESTORE_PARAMS);
        this.fillTokenFromHeader(headers, this::getSecondaryMasterKey, BackendHeaders.SECONDARY_MASTER_KEY);
        this.fillTokenFromHeader(headers, this::getSecondaryReadonlyKey, BackendHeaders.SECONDARY_READONLY_KEY);
        this.fillTokenFromHeader(headers, this::getSessionToken, HttpHeaders.SESSION_TOKEN);
        this.fillTokenFromHeader(headers, this::getSharedOfferThroughput, HttpHeaders.SHARED_OFFER_THROUGHPUT);
        this.fillTokenFromHeader(headers, this::getTargetGlobalCommittedLsn, HttpHeaders.TARGET_GLOBAL_COMMITTED_LSN);
        this.fillTokenFromHeader(headers, this::getTargetLsn, HttpHeaders.TARGET_LSN);
        this.fillTokenFromHeader(headers, this::getTimeToLiveInSeconds, BackendHeaders.TIME_TO_LIVE_IN_SECONDS);
        this.fillTokenFromHeader(headers, this::getTransportRequestID, HttpHeaders.TRANSPORT_REQUEST_ID);
        this.fillTokenFromHeader(headers, this::getIsBatchAtomic, HttpHeaders.IS_BATCH_ATOMIC);
        this.fillTokenFromHeader(headers, this::getShouldBatchContinueOnError, HttpHeaders.SHOULD_BATCH_CONTINUE_ON_ERROR);
        this.fillTokenFromHeader(headers, this::getIsBatchOrdered, HttpHeaders.IS_BATCH_ORDERED);
        this.fillTokenFromHeader(headers, this::getCorrelatedActivityId, HttpHeaders.CORRELATED_ACTIVITY_ID);
        this.fillTokenFromHeader(headers, this::getSDKSupportedCapabilities, HttpHeaders.SDK_SUPPORTED_CAPABILITIES);
        this.fillTokenFromHeader(headers, this::getChangeFeedWireFormatVersion, HttpHeaders.CHANGE_FEED_WIRE_FORMAT_VERSION);

        // Will be null in case of direct, which is fine - BE will use the value slice the connection context this.
        // When this is used in Gateway, the header value will be populated with the proxied HTTP request's header,
        // and BE will respect the per-request value.

        this.fillTokenFromHeader(headers, this::getClientVersion, HttpHeaders.VERSION);
    }
    // endregion


    static RntbdRequestHeaders decode(final ByteBuf in) {
        final RntbdRequestHeaders metadata = new RntbdRequestHeaders();

        while (in.readableBytes() > 0) {
            final short id = in.readShortLE();
            final RntbdTokenType type = RntbdTokenType.fromId(in.readByte());

            RntbdRequestHeader key = RntbdRequestHeader.map.get(id);
            RntbdToken token = metadata.get(key);

            if (token == null) {
                token = RntbdToken.create(new UndefinedHeader(id, type));
                metadata.initializeNotCommonHeadersIfNeeded();
                metadata.notCommonHeaders.put(key, token);
            }

            token.decode(in);
        }

        checkToken(metadata.resourceId);
        checkToken(metadata.authorizationToken);
        checkToken(metadata.payloadPresent);
        checkToken(metadata.date);
        checkToken(metadata.pageSize);
        checkToken(metadata.sessionToken);
        checkToken(metadata.continuationToken);
        checkToken(metadata.indexingDirective);
        checkToken(metadata.match);
        checkToken(metadata.preTriggerInclude);
        checkToken(metadata.postTriggerInclude);
        checkToken(metadata.isFanout);
        checkToken(metadata.collectionPartitionIndex);
        checkToken(metadata.collectionServiceIndex);
        checkToken(metadata.preTriggerExclude);
        checkToken(metadata.postTriggerExclude);
        checkToken(metadata.consistencyLevel);
        checkToken(metadata.entityId);
        checkToken(metadata.resourceSchemaName);
        checkToken(metadata.replicaPath);
        checkToken(metadata.resourceTokenExpiry);
        checkToken(metadata.databaseName);
        checkToken(metadata.collectionName);
        checkToken(metadata.documentName);
        checkToken(metadata.attachmentName);
        checkToken(metadata.userName);
        checkToken(metadata.permissionName);
        checkToken(metadata.storedProcedureName);
        checkToken(metadata.userDefinedFunctionName);
        checkToken(metadata.triggerName);
        checkToken(metadata.enableScanInQuery);
        checkToken(metadata.emitVerboseTracesInQuery);
        checkToken(metadata.conflictName);
        checkToken(metadata.bindReplicaDirective);
        checkToken(metadata.primaryMasterKey);
        checkToken(metadata.secondaryMasterKey);
        checkToken(metadata.primaryReadonlyKey);
        checkToken(metadata.secondaryReadonlyKey);
        checkToken(metadata.profileRequest);
        checkToken(metadata.enableLowPrecisionOrderBy);
        checkToken(metadata.clientVersion);
        checkToken(metadata.canCharge);
        checkToken(metadata.canThrottle);
        checkToken(metadata.partitionKey);
        checkToken(metadata.partitionKeyRangeId);
        checkToken(metadata.migrateCollectionDirective);
        checkToken(metadata.supportSpatialLegacyCoordinates);
        checkToken(metadata.partitionCount);
        checkToken(metadata.collectionRid);
        checkToken(metadata.partitionKeyRangeName);
        checkToken(metadata.schemaName);
        checkToken(metadata.filterBySchemaRid);
        checkToken(metadata.usePolygonsSmallerThanAHemisphere);
        checkToken(metadata.gatewaySignature);
        checkToken(metadata.enableLogging);
        checkToken(metadata.a_IM);
        checkToken(metadata.populateQuotaInfo);
        checkToken(metadata.disableRUPerMinuteUsage);
        checkToken(metadata.populateQueryMetrics);
        checkToken(metadata.responseContinuationTokenLimitInKb);
        checkToken(metadata.populatePartitionStatistics);
        checkToken(metadata.remoteStorageType);
        checkToken(metadata.collectionRemoteStorageSecurityIdentifier);
        checkToken(metadata.ifModifiedSince);
        checkToken(metadata.populateCollectionThroughputInfo);
        checkToken(metadata.remainingTimeInMsOnClientRequest);
        checkToken(metadata.clientRetryAttemptCount);
        checkToken(metadata.targetLsn);
        checkToken(metadata.targetGlobalCommittedLsn);
        checkToken(metadata.transportRequestID);
        checkToken(metadata.restoreMetadaFilter);
        checkToken(metadata.restoreParams);
        checkToken(metadata.shareThroughput);
        checkToken(metadata.partitionResourceFilter);
        checkToken(metadata.isReadOnlyScript);
        checkToken(metadata.isAutoScaleRequest);
        checkToken(metadata.forceQueryScan);
        checkToken(metadata.canOfferReplaceComplete);
        checkToken(metadata.excludeSystemProperties);
        checkToken(metadata.binaryId);
        checkToken(metadata.timeToLiveInSeconds);
        checkToken(metadata.effectivePartitionKey);
        checkToken(metadata.binaryPassthroughRequest);
        checkToken(metadata.userDefinedTypeName);
        checkToken(metadata.enableDynamicRidRangeAllocation);
        checkToken(metadata.enumerationDirection);
        checkToken(metadata.startId);
        checkToken(metadata.endId);
        checkToken(metadata.fanoutOperationState);
        checkToken(metadata.startEpk);
        checkToken(metadata.endEpk);
        checkToken(metadata.readFeedKeyType);
        checkToken(metadata.contentSerializationFormat);
        checkToken(metadata.allowTentativeWrites);
        checkToken(metadata.isUserRequest);
        checkToken(metadata.sharedOfferThroughput);
        checkToken(metadata.isBatchAtomic);
        checkToken(metadata.shouldBatchContinueOnError);
        checkToken(metadata.isBatchOrdered);
        checkToken(metadata.returnPreference);
        checkToken(metadata.populateIndexMetrics);
        checkToken(metadata.isClientEncrypted);
        checkToken(metadata.intendedCollectionRid);
        checkToken(metadata.correlatedActivityId);
        checkToken(metadata.sDKSupportedCapabilities);
        checkToken(metadata.changeFeedWireFormatVersion);
        checkToken(metadata.priorityLevel);

        return metadata;
    }

    static void checkToken(RntbdToken token) {
        if (token != null && !token.isPresent() && token.isRequired()) {
            final String message = lenientFormat("Required header not found on token stream: %s", token);
            throw new CorruptedFrameException(message);
        }
    }

    private static final class UndefinedHeader implements RntbdConstants.RntbdHeader {

        private final short id;
        private final RntbdTokenType type;

        UndefinedHeader(final short id, final RntbdTokenType type) {
            this.id = id;
            this.type = type;
        }

        @Override
        public boolean isRequired() {
            return false;
        }

        @Override
        public short id() {
            return this.id;
        }

        @Override
        public String name() {
            return "Undefined";
        }

        @Override
        public RntbdTokenType type() {
            return this.type;
        }
    }

    // region Privates
    private RntbdToken getResourceId() {
        if (resourceId == null) {
            resourceId = RntbdToken.create(RntbdRequestHeader.ResourceId);
        }
        return resourceId;
    }

    private RntbdToken getAuthorizationToken() {
        if (authorizationToken == null) {
            authorizationToken = RntbdToken.create(RntbdRequestHeader.AuthorizationToken);
        }
        return authorizationToken;
    }

    private RntbdToken getPayloadPresent() {
        if (payloadPresent == null) {
            payloadPresent = RntbdToken.create(RntbdRequestHeader.PayloadPresent);
        }
        return payloadPresent;
    }

    private RntbdToken getDate() {
        if (date == null) {
            date = RntbdToken.create(RntbdRequestHeader.Date);
        }
        return date;
    }

    private RntbdToken getPageSize() {
        if (pageSize == null) {
            pageSize = RntbdToken.create(RntbdRequestHeader.PageSize);
        }
        return pageSize;
    }

    private RntbdToken getSessionToken() {
        if (sessionToken == null) {
            sessionToken = RntbdToken.create(RntbdRequestHeader.SessionToken);
        }
        return sessionToken;
    }

    private RntbdToken getContinuationToken() {
        if (continuationToken == null) {
            continuationToken = RntbdToken.create(RntbdRequestHeader.ContinuationToken);
        }
        return continuationToken;
    }

    private RntbdToken getIndexingDirective() {
        if (indexingDirective == null) {
            indexingDirective = RntbdToken.create(RntbdRequestHeader.IndexingDirective);
        }
        return indexingDirective;
    }

    private RntbdToken getMatch() {
        if (match == null) {
            match = RntbdToken.create(RntbdRequestHeader.Match);
        }
        return match;
    }

    private RntbdToken getPreTriggerInclude() {
        if (preTriggerInclude == null) {
            preTriggerInclude = RntbdToken.create(RntbdRequestHeader.PreTriggerInclude);
        }
        return preTriggerInclude;
    }

    private RntbdToken getPostTriggerInclude() {
        if (postTriggerInclude == null) {
            postTriggerInclude = RntbdToken.create(RntbdRequestHeader.PostTriggerInclude);
        }
        return postTriggerInclude;
    }

    private RntbdToken getIsFanout() {
        if (isFanout == null) {
            isFanout = RntbdToken.create(RntbdRequestHeader.IsFanout);
        }
        return isFanout;
    }

    private RntbdToken getCollectionPartitionIndex() {
        if (collectionPartitionIndex == null) {
            collectionPartitionIndex = RntbdToken.create(RntbdRequestHeader.CollectionPartitionIndex);
        }
        return collectionPartitionIndex;
    }

    private RntbdToken getCollectionServiceIndex() {
        if (collectionServiceIndex == null) {
            collectionServiceIndex = RntbdToken.create(RntbdRequestHeader.CollectionServiceIndex);
        }
        return collectionServiceIndex;
    }

    private RntbdToken getPreTriggerExclude() {
        if (preTriggerExclude == null) {
            preTriggerExclude = RntbdToken.create(RntbdRequestHeader.PreTriggerExclude);
        }
        return preTriggerExclude;
    }

    private RntbdToken getPostTriggerExclude() {
        if (postTriggerExclude == null) {
            postTriggerExclude = RntbdToken.create(RntbdRequestHeader.PostTriggerExclude);
        }
        return postTriggerExclude;
    }

    private RntbdToken getConsistencyLevel() {
        if (consistencyLevel == null) {
            consistencyLevel = RntbdToken.create(RntbdRequestHeader.ConsistencyLevel);
        }
        return consistencyLevel;
    }

    private RntbdToken getEntityId() {
        if (entityId == null) {
            entityId = RntbdToken.create(RntbdRequestHeader.EntityId);
        }
        return entityId;
    }

    private RntbdToken getResourceSchemaName() {
        if (resourceSchemaName == null) {
            resourceSchemaName = RntbdToken.create(RntbdRequestHeader.ResourceSchemaName);
        }
        return resourceSchemaName;
    }

    private RntbdToken getReplicaPath() {
        if (replicaPath == null) {
            replicaPath = RntbdToken.create(RntbdRequestHeader.ReplicaPath);
        }
        return replicaPath;
    }

    private RntbdToken getResourceTokenExpiry() {
        if (resourceTokenExpiry == null) {
            resourceTokenExpiry = RntbdToken.create(RntbdRequestHeader.ResourceTokenExpiry);
        }
        return resourceTokenExpiry;
    }

    private RntbdToken getDatabaseName() {
        if (databaseName == null) {
            databaseName = RntbdToken.create(RntbdRequestHeader.DatabaseName);
        }
        return databaseName;
    }

    private RntbdToken getCollectionName() {
        if (collectionName == null) {
            collectionName = RntbdToken.create(RntbdRequestHeader.CollectionName);
        }
        return collectionName;
    }

    private RntbdToken getDocumentName() {
        if (documentName == null) {
            documentName = RntbdToken.create(RntbdRequestHeader.DocumentName);
        }
        return documentName;
    }

    private RntbdToken getAttachmentName() {
        if (attachmentName == null) {
            attachmentName = RntbdToken.create(RntbdRequestHeader.AttachmentName);
        }
        return attachmentName;
    }

    private RntbdToken getUserName() {
        if (userName == null) {
            userName = RntbdToken.create(RntbdRequestHeader.UserName);
        }
        return userName;
    }

    private RntbdToken getPermissionName() {
        if (permissionName == null) {
            permissionName = RntbdToken.create(RntbdRequestHeader.PermissionName);
        }
        return permissionName;
    }

    private RntbdToken getStoredProcedureName() {
        if (storedProcedureName == null) {
            storedProcedureName = RntbdToken.create(RntbdRequestHeader.StoredProcedureName);
        }
        return storedProcedureName;
    }

    private RntbdToken getUserDefinedFunctionName() {
        if (userDefinedFunctionName == null) {
            userDefinedFunctionName = RntbdToken.create(RntbdRequestHeader.UserDefinedFunctionName);
        }
        return userDefinedFunctionName;
    }

    private RntbdToken getTriggerName() {
        if (triggerName == null) {
            triggerName = RntbdToken.create(RntbdRequestHeader.TriggerName);
        }
        return triggerName;
    }

    private RntbdToken getEnableScanInQuery() {
        if (enableScanInQuery == null) {
            enableScanInQuery = RntbdToken.create(RntbdRequestHeader.EnableScanInQuery);
        }
        return enableScanInQuery;
    }

    private RntbdToken getEmitVerboseTracesInQuery() {
        if (emitVerboseTracesInQuery == null) {
            emitVerboseTracesInQuery = RntbdToken.create(RntbdRequestHeader.EmitVerboseTracesInQuery);
        }
        return emitVerboseTracesInQuery;
    }

    private RntbdToken getConflictName() {
        if (conflictName == null) {
            conflictName = RntbdToken.create(RntbdRequestHeader.ConflictName);
        }
        return conflictName;
    }

    private RntbdToken getBindReplicaDirective() {
        if (bindReplicaDirective == null) {
            bindReplicaDirective = RntbdToken.create(RntbdRequestHeader.BindReplicaDirective);
        }
        return bindReplicaDirective;
    }

    private RntbdToken getPrimaryMasterKey() {
        if (primaryMasterKey == null) {
            primaryMasterKey = RntbdToken.create(RntbdRequestHeader.PrimaryMasterKey);
        }
        return primaryMasterKey;
    }

    private RntbdToken getSecondaryMasterKey() {
        if (secondaryMasterKey == null) {
            secondaryMasterKey = RntbdToken.create(RntbdRequestHeader.SecondaryMasterKey);
        }
        return secondaryMasterKey;
    }

    private RntbdToken getPrimaryReadonlyKey() {
        if (primaryReadonlyKey == null) {
            primaryReadonlyKey = RntbdToken.create(RntbdRequestHeader.PrimaryReadonlyKey);
        }
        return primaryReadonlyKey;
    }

    private RntbdToken getSecondaryReadonlyKey() {
        if (secondaryReadonlyKey == null) {
            secondaryReadonlyKey = RntbdToken.create(RntbdRequestHeader.SecondaryReadonlyKey);
        }
        return secondaryReadonlyKey;
    }

    private RntbdToken getProfileRequest() {
        if (profileRequest == null) {
            profileRequest = RntbdToken.create(RntbdRequestHeader.ProfileRequest);
        }
        return profileRequest;
    }

    private RntbdToken getEnableLowPrecisionOrderBy() {
        if (enableLowPrecisionOrderBy == null) {
            enableLowPrecisionOrderBy = RntbdToken.create(RntbdRequestHeader.EnableLowPrecisionOrderBy);
        }
        return enableLowPrecisionOrderBy;
    }

    private RntbdToken getClientVersion() {
        if (clientVersion == null) {
            clientVersion = RntbdToken.create(RntbdRequestHeader.ClientVersion);
        }
        return clientVersion;
    }

    private RntbdToken getCanCharge() {
        if (canCharge == null) {
            canCharge = RntbdToken.create(RntbdRequestHeader.CanCharge);
        }
        return canCharge;
    }

    private RntbdToken getCanThrottle() {
        if (canThrottle == null) {
            canThrottle = RntbdToken.create(RntbdRequestHeader.CanThrottle);
        }
        return canThrottle;
    }

    private RntbdToken getPartitionKey() {
        if (partitionKey == null) {
            partitionKey = RntbdToken.create(RntbdRequestHeader.PartitionKey);
        }
        return partitionKey;
    }

    private RntbdToken getPartitionKeyRangeId() {
        if (partitionKeyRangeId == null) {
            partitionKeyRangeId = RntbdToken.create(RntbdRequestHeader.PartitionKeyRangeId);
        }
        return partitionKeyRangeId;
    }

    private RntbdToken getMigrateCollectionDirective() {
        if (migrateCollectionDirective == null) {
            migrateCollectionDirective = RntbdToken.create(RntbdRequestHeader.MigrateCollectionDirective);
        }
        return migrateCollectionDirective;
    }

    private RntbdToken getSupportSpatialLegacyCoordinates() {
        if (supportSpatialLegacyCoordinates == null) {
            supportSpatialLegacyCoordinates = RntbdToken.create(RntbdRequestHeader.SupportSpatialLegacyCoordinates);
        }
        return supportSpatialLegacyCoordinates;
    }

    private RntbdToken getPartitionCount() {
        if (partitionCount == null) {
            partitionCount = RntbdToken.create(RntbdRequestHeader.PartitionCount);
        }
        return partitionCount;
    }

    private RntbdToken getCollectionRid() {
        if (collectionRid == null) {
            collectionRid = RntbdToken.create(RntbdRequestHeader.CollectionRid);
        }
        return collectionRid;
    }

    private RntbdToken getPartitionKeyRangeName() {
        if (partitionKeyRangeName == null) {
            partitionKeyRangeName = RntbdToken.create(RntbdRequestHeader.PartitionKeyRangeName);
        }
        return partitionKeyRangeName;
    }

    private RntbdToken getSchemaName() {
        if (schemaName == null) {
            schemaName = RntbdToken.create(RntbdRequestHeader.SchemaName);
        }
        return schemaName;
    }

    private RntbdToken getFilterBySchemaRid() {
        if (filterBySchemaRid == null) {
            filterBySchemaRid = RntbdToken.create(RntbdRequestHeader.FilterBySchemaRid);
        }
        return filterBySchemaRid;
    }

    private RntbdToken getUsePolygonsSmallerThanAHemisphere() {
        if (usePolygonsSmallerThanAHemisphere == null) {
            usePolygonsSmallerThanAHemisphere = RntbdToken.create(RntbdRequestHeader.UsePolygonsSmallerThanAHemisphere);
        }
        return usePolygonsSmallerThanAHemisphere;
    }

    private RntbdToken getGatewaySignature() {
        if (gatewaySignature == null) {
            gatewaySignature = RntbdToken.create(RntbdRequestHeader.GatewaySignature);
        }
        return gatewaySignature;
    }

    private RntbdToken getEnableLogging() {
        if (enableLogging == null) {
            enableLogging = RntbdToken.create(RntbdRequestHeader.EnableLogging);
        }
        return enableLogging;
    }

    private RntbdToken getA_IM() {
        if (a_IM == null) {
            a_IM = RntbdToken.create(RntbdRequestHeader.A_IM);
        }
        return a_IM;
    }

    private RntbdToken getPopulateQuotaInfo() {
        if (populateQuotaInfo == null) {
            populateQuotaInfo = RntbdToken.create(RntbdRequestHeader.PopulateQuotaInfo);
        }
        return populateQuotaInfo;
    }

    private RntbdToken getDisableRUPerMinuteUsage() {
        if (disableRUPerMinuteUsage == null) {
            disableRUPerMinuteUsage = RntbdToken.create(RntbdRequestHeader.DisableRUPerMinuteUsage);
        }
        return disableRUPerMinuteUsage;
    }

    private RntbdToken getPopulateQueryMetrics() {
        if (populateQueryMetrics == null) {
            populateQueryMetrics = RntbdToken.create(RntbdRequestHeader.PopulateQueryMetrics);
        }
        return populateQueryMetrics;
    }

    private RntbdToken getResponseContinuationTokenLimitInKb() {
        if (responseContinuationTokenLimitInKb == null) {
            responseContinuationTokenLimitInKb = RntbdToken.create(RntbdRequestHeader.ResponseContinuationTokenLimitInKb);
        }
        return responseContinuationTokenLimitInKb;
    }

    private RntbdToken getPopulatePartitionStatistics() {
        if (populatePartitionStatistics == null) {
            populatePartitionStatistics = RntbdToken.create(RntbdRequestHeader.PopulatePartitionStatistics);
        }
        return populatePartitionStatistics;
    }

    private RntbdToken getRemoteStorageType() {
        if (remoteStorageType == null) {
            remoteStorageType = RntbdToken.create(RntbdRequestHeader.RemoteStorageType);
        }
        return remoteStorageType;
    }

    private RntbdToken getCollectionRemoteStorageSecurityIdentifier() {
        if (collectionRemoteStorageSecurityIdentifier == null) {
            collectionRemoteStorageSecurityIdentifier = RntbdToken.create(RntbdRequestHeader.CollectionRemoteStorageSecurityIdentifier);
        }
        return collectionRemoteStorageSecurityIdentifier;
    }

    private RntbdToken getIfModifiedSince() {
        if (ifModifiedSince == null) {
            ifModifiedSince = RntbdToken.create(RntbdRequestHeader.IfModifiedSince);
        }
        return ifModifiedSince;
    }

    private RntbdToken getPopulateCollectionThroughputInfo() {
        if (populateCollectionThroughputInfo == null) {
            populateCollectionThroughputInfo = RntbdToken.create(RntbdRequestHeader.PopulateCollectionThroughputInfo);
        }
        return populateCollectionThroughputInfo;
    }

    private RntbdToken getRemainingTimeInMsOnClientRequest() {
        if (remainingTimeInMsOnClientRequest == null) {
            remainingTimeInMsOnClientRequest = RntbdToken.create(RntbdRequestHeader.RemainingTimeInMsOnClientRequest);
        }
        return remainingTimeInMsOnClientRequest;
    }

    private RntbdToken getClientRetryAttemptCount() {
        if (clientRetryAttemptCount == null) {
            clientRetryAttemptCount = RntbdToken.create(RntbdRequestHeader.ClientRetryAttemptCount);
        }
        return clientRetryAttemptCount;
    }

    private RntbdToken getTargetLsn() {
        if (targetLsn == null) {
            targetLsn = RntbdToken.create(RntbdRequestHeader.TargetLsn);
        }
        return targetLsn;
    }

    private RntbdToken getTargetGlobalCommittedLsn() {
        if (targetGlobalCommittedLsn == null) {
            targetGlobalCommittedLsn = RntbdToken.create(RntbdRequestHeader.TargetGlobalCommittedLsn);
        }
        return targetGlobalCommittedLsn;
    }

    private RntbdToken getTransportRequestID() {
        if (transportRequestID == null) {
            transportRequestID = RntbdToken.create(RntbdRequestHeader.TransportRequestID);
        }
        return transportRequestID;
    }

    private RntbdToken getRestoreMetadaFilter() {
        if (restoreMetadaFilter == null) {
            restoreMetadaFilter = RntbdToken.create(RntbdRequestHeader.RestoreMetadaFilter);
        }
        return restoreMetadaFilter;
    }

    private RntbdToken getRestoreParams() {
        if (restoreParams == null) {
            restoreParams = RntbdToken.create(RntbdRequestHeader.RestoreParams);
        }
        return restoreParams;
    }

    private RntbdToken getShareThroughput() {
        if (shareThroughput == null) {
            shareThroughput = RntbdToken.create(RntbdRequestHeader.ShareThroughput);
        }
        return shareThroughput;
    }

    private RntbdToken getPartitionResourceFilter() {
        if (partitionResourceFilter == null) {
            partitionResourceFilter = RntbdToken.create(RntbdRequestHeader.PartitionResourceFilter);
        }
        return partitionResourceFilter;
    }

    private RntbdToken getIsReadOnlyScript() {
        if (isReadOnlyScript == null) {
            isReadOnlyScript = RntbdToken.create(RntbdRequestHeader.IsReadOnlyScript);
        }
        return isReadOnlyScript;
    }

    private RntbdToken getIsAutoScaleRequest() {
        if (isAutoScaleRequest == null) {
            isAutoScaleRequest = RntbdToken.create(RntbdRequestHeader.IsAutoScaleRequest);
        }
        return isAutoScaleRequest;
    }

    private RntbdToken getForceQueryScan() {
        if (forceQueryScan == null) {
            forceQueryScan = RntbdToken.create(RntbdRequestHeader.ForceQueryScan);
        }
        return forceQueryScan;
    }

    private RntbdToken getCanOfferReplaceComplete() {
        if (canOfferReplaceComplete == null) {
            canOfferReplaceComplete = RntbdToken.create(RntbdRequestHeader.CanOfferReplaceComplete);
        }
        return canOfferReplaceComplete;
    }

    private RntbdToken getExcludeSystemProperties() {
        if (excludeSystemProperties == null) {
            excludeSystemProperties = RntbdToken.create(RntbdRequestHeader.ExcludeSystemProperties);
        }
        return excludeSystemProperties;
    }

    private RntbdToken getBinaryId() {
        if (binaryId == null) {
            binaryId = RntbdToken.create(RntbdRequestHeader.BinaryId);
        }
        return binaryId;
    }

    private RntbdToken getTimeToLiveInSeconds() {
        if (timeToLiveInSeconds == null) {
            timeToLiveInSeconds = RntbdToken.create(RntbdRequestHeader.TimeToLiveInSeconds);
        }
        return timeToLiveInSeconds;
    }

    private RntbdToken getEffectivePartitionKey() {
        if (effectivePartitionKey == null) {
            effectivePartitionKey = RntbdToken.create(RntbdRequestHeader.EffectivePartitionKey);
        }
        return effectivePartitionKey;
    }

    private RntbdToken getBinaryPassthroughRequest() {
        if (binaryPassthroughRequest == null) {
            binaryPassthroughRequest = RntbdToken.create(RntbdRequestHeader.BinaryPassthroughRequest);
        }
        return binaryPassthroughRequest;
    }

    private RntbdToken getUserDefinedTypeName() {
        if (userDefinedTypeName == null) {
            userDefinedTypeName = RntbdToken.create(RntbdRequestHeader.UserDefinedTypeName);
        }
        return userDefinedTypeName;
    }

    private RntbdToken getEnableDynamicRidRangeAllocation() {
        if (enableDynamicRidRangeAllocation == null) {
            enableDynamicRidRangeAllocation = RntbdToken.create(RntbdRequestHeader.EnableDynamicRidRangeAllocation);
        }
        return enableDynamicRidRangeAllocation;
    }

    private RntbdToken getEnumerationDirection() {
        if (enumerationDirection == null) {
            enumerationDirection = RntbdToken.create(RntbdRequestHeader.EnumerationDirection);
        }
        return enumerationDirection;
    }

    private RntbdToken getStartId() {
        if (startId == null) {
            startId = RntbdToken.create(RntbdRequestHeader.StartId);
        }
        return startId;
    }

    private RntbdToken getEndId() {
        if (endId == null) {
            endId = RntbdToken.create(RntbdRequestHeader.EndId);
        }
        return endId;
    }

    private RntbdToken getFanoutOperationState() {
        if (fanoutOperationState == null) {
            fanoutOperationState = RntbdToken.create(RntbdRequestHeader.FanoutOperationState);
        }
        return fanoutOperationState;
    }

    private RntbdToken getStartEpk() {
        if (startEpk == null) {
            startEpk = RntbdToken.create(RntbdRequestHeader.StartEpk);
        }
        return startEpk;
    }

    private RntbdToken getEndEpk() {
        if (endEpk == null) {
            endEpk = RntbdToken.create(RntbdRequestHeader.EndEpk);
        }
        return endEpk;
    }

    private RntbdToken getReadFeedKeyType() {
        if (readFeedKeyType == null) {
            readFeedKeyType = RntbdToken.create(RntbdRequestHeader.ReadFeedKeyType);
        }
        return readFeedKeyType;
    }

    private RntbdToken getContentSerializationFormat() {
        if (contentSerializationFormat == null) {
            contentSerializationFormat = RntbdToken.create(RntbdRequestHeader.ContentSerializationFormat);
        }
        return contentSerializationFormat;
    }

    private RntbdToken getAllowTentativeWrites() {
        if (allowTentativeWrites == null) {
            allowTentativeWrites = RntbdToken.create(RntbdRequestHeader.AllowTentativeWrites);
        }
        return allowTentativeWrites;
    }

    private RntbdToken getIsUserRequest() {
        if (isUserRequest == null) {
            isUserRequest = RntbdToken.create(RntbdRequestHeader.IsUserRequest);
        }
        return isUserRequest;
    }

    private RntbdToken getSharedOfferThroughput() {
        if (sharedOfferThroughput == null) {
            sharedOfferThroughput = RntbdToken.create(RntbdRequestHeader.SharedOfferThroughput);
        }
        return sharedOfferThroughput;
    }

    private RntbdToken getIsBatchAtomic() {
        if (isBatchAtomic == null) {
            isBatchAtomic = RntbdToken.create(RntbdRequestHeader.IsBatchAtomic);
        }
        return isBatchAtomic;
    }

    private RntbdToken getShouldBatchContinueOnError() {
        if (shouldBatchContinueOnError == null) {
            shouldBatchContinueOnError = RntbdToken.create(RntbdRequestHeader.ShouldBatchContinueOnError);
        }
        return shouldBatchContinueOnError;
    }

    private RntbdToken getIsBatchOrdered() {
        if (isBatchOrdered == null) {
            isBatchOrdered = RntbdToken.create(RntbdRequestHeader.IsBatchOrdered);
        }
        return isBatchOrdered;
    }

    private RntbdToken getReturnPreference() {
        if (returnPreference == null) {
            returnPreference = RntbdToken.create(RntbdRequestHeader.ReturnPreference);
        }
        return returnPreference;
    }

    private RntbdToken getPopulateIndexMetrics() {
        if (populateIndexMetrics == null) {
            populateIndexMetrics = RntbdToken.create(RntbdRequestHeader.PopulateIndexMetrics);
        }
        return populateIndexMetrics;
    }

    private RntbdToken getIsClientEncrypted() {
        if (isClientEncrypted == null) {
            isClientEncrypted = RntbdToken.create(RntbdRequestHeader.IsClientEncrypted);
        }
        return isClientEncrypted;
    }

    private RntbdToken getIntendedCollectionRid() {
        if (intendedCollectionRid == null) {
            intendedCollectionRid = RntbdToken.create(RntbdRequestHeader.IntendedCollectionRid);
        }
        return intendedCollectionRid;
    }

    private RntbdToken getCorrelatedActivityId() {
        if (correlatedActivityId == null) {
            correlatedActivityId = RntbdToken.create(RntbdRequestHeader.CorrelatedActivityId);
        }
        return correlatedActivityId;
    }

    private RntbdToken getSDKSupportedCapabilities() {
        if (sDKSupportedCapabilities == null) {
            sDKSupportedCapabilities = RntbdToken.create(RntbdRequestHeader.SDKSupportedCapabilities);
        }
        return sDKSupportedCapabilities;
    }

    private RntbdToken getChangeFeedWireFormatVersion() {
        if (changeFeedWireFormatVersion == null) {
            changeFeedWireFormatVersion = RntbdToken.create(RntbdRequestHeader.ChangeFeedWireFormatVersion);
        }
        return changeFeedWireFormatVersion;
    }

    private RntbdToken getPriorityLevel() {
        if (priorityLevel == null) {
            priorityLevel = RntbdToken.create(RntbdRequestHeader.PriorityLevel);
        }
        return priorityLevel;
    }


    private void addAimHeader(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.A_IM);

        if (StringUtils.isNotEmpty(value)) {
            this.getA_IM().setValue(value);
        }
    }

    private void addAllowScanOnQuery(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.ENABLE_SCAN_IN_QUERY);
        if (StringUtils.isNotEmpty(value)) {
            this.getEnableScanInQuery().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addBinaryIdIfPresent(final Map<String, String> headers) {
        final String value = headers.get(BackendHeaders.BINARY_ID);
        if (StringUtils.isNotEmpty(value)) {
            this.getBinaryId().setValue(Base64.getDecoder().decode(value));
        }
    }

    private void addCanCharge(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.CAN_CHARGE);
        if (StringUtils.isNotEmpty(value)) {
            this.getCanCharge().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addCanOfferReplaceComplete(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.CAN_OFFER_REPLACE_COMPLETE);
        if (StringUtils.isNotEmpty(value)) {
            this.getCanOfferReplaceComplete().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addCanThrottle(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.CAN_THROTTLE);
        if (StringUtils.isNotEmpty(value)) {
            this.getCanThrottle().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addCollectionRemoteStorageSecurityIdentifier(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.COLLECTION_REMOTE_STORAGE_SECURITY_IDENTIFIER);
        if (StringUtils.isNotEmpty(value)) {
            this.getCollectionRemoteStorageSecurityIdentifier().setValue(value);
        }
    }


    RntbdToken get(final RntbdRequestHeader header) {
        if (header == RntbdRequestHeader.Date) {
            return this.date;
        }
        if (header == RntbdRequestHeader.A_IM) {
            return this.a_IM;
        }
        if (header == RntbdRequestHeader.Match) {
            return this.match;
        }
        if (header == RntbdRequestHeader.EndId) {
            return this.endId;
        }
        if (header == RntbdRequestHeader.EndEpk) {
            return this.endEpk;
        }
        if (header == RntbdRequestHeader.StartId) {
            return this.startId;
        }
        if (header == RntbdRequestHeader.PageSize) {
            return this.pageSize;
        }
        if (header == RntbdRequestHeader.IsFanout) {
            return this.isFanout;
        }
        if (header == RntbdRequestHeader.EntityId) {
            return this.entityId;
        }
        if (header == RntbdRequestHeader.UserName) {
            return this.userName;
        }
        if (header == RntbdRequestHeader.BinaryId) {
            return this.binaryId;
        }
        if (header == RntbdRequestHeader.StartEpk) {
            return this.startEpk;
        }
        if (header == RntbdRequestHeader.CanCharge) {
            return this.canCharge;
        }
        if (header == RntbdRequestHeader.TargetLsn) {
            return this.targetLsn;
        }
        if (header == RntbdRequestHeader.ResourceId) {
            return this.resourceId;
        }
        if (header == RntbdRequestHeader.SchemaName) {
            return this.schemaName;
        }
        if (header == RntbdRequestHeader.ReplicaPath) {
            return this.replicaPath;
        }
        if (header == RntbdRequestHeader.TriggerName) {
            return this.triggerName;
        }
        if (header == RntbdRequestHeader.CanThrottle) {
            return this.canThrottle;
        }
        if (header == RntbdRequestHeader.SessionToken) {
            return this.sessionToken;
        }
        if (header == RntbdRequestHeader.DatabaseName) {
            return this.databaseName;
        }
        if (header == RntbdRequestHeader.DocumentName) {
            return this.documentName;
        }
        if (header == RntbdRequestHeader.ConflictName) {
            return this.conflictName;
        }
        if (header == RntbdRequestHeader.PartitionKey) {
            return this.partitionKey;
        }
        if (header == RntbdRequestHeader.ClientVersion) {
            return this.clientVersion;
        }
        if (header == RntbdRequestHeader.CollectionRid) {
            return this.collectionRid;
        }
        if (header == RntbdRequestHeader.EnableLogging) {
            return this.enableLogging;
        }
        if (header == RntbdRequestHeader.RestoreParams) {
            return this.restoreParams;
        }
        if (header == RntbdRequestHeader.IsUserRequest) {
            return this.isUserRequest;
        }
        if (header == RntbdRequestHeader.IsBatchAtomic) {
            return this.isBatchAtomic;
        }
        if (header == RntbdRequestHeader.PriorityLevel) {
            return this.priorityLevel;
        }
        if (header == RntbdRequestHeader.PayloadPresent) {
            return this.payloadPresent;
        }
        if (header == RntbdRequestHeader.CollectionName) {
            return this.collectionName;
        }
        if (header == RntbdRequestHeader.AttachmentName) {
            return this.attachmentName;
        }
        if (header == RntbdRequestHeader.PermissionName) {
            return this.permissionName;
        }
        if (header == RntbdRequestHeader.ProfileRequest) {
            return this.profileRequest;
        }
        if (header == RntbdRequestHeader.PartitionCount) {
            return this.partitionCount;
        }
        if (header == RntbdRequestHeader.ForceQueryScan) {
            return this.forceQueryScan;
        }
        if (header == RntbdRequestHeader.IsBatchOrdered) {
            return this.isBatchOrdered;
        }
        if (header == RntbdRequestHeader.IfModifiedSince) {
            return this.ifModifiedSince;
        }
        if (header == RntbdRequestHeader.ShareThroughput) {
            return this.shareThroughput;
        }
        if (header == RntbdRequestHeader.ReadFeedKeyType) {
            return this.readFeedKeyType;
        }
        if (header == RntbdRequestHeader.ConsistencyLevel) {
            return this.consistencyLevel;
        }
        if (header == RntbdRequestHeader.PrimaryMasterKey) {
            return this.primaryMasterKey;
        }
        if (header == RntbdRequestHeader.GatewaySignature) {
            return this.gatewaySignature;
        }
        if (header == RntbdRequestHeader.IsReadOnlyScript) {
            return this.isReadOnlyScript;
        }
        if (header == RntbdRequestHeader.ReturnPreference) {
            return this.returnPreference;
        }
        if (header == RntbdRequestHeader.ContinuationToken) {
            return this.continuationToken;
        }
        if (header == RntbdRequestHeader.IndexingDirective) {
            return this.indexingDirective;
        }
        if (header == RntbdRequestHeader.PreTriggerInclude) {
            return this.preTriggerInclude;
        }
        if (header == RntbdRequestHeader.PreTriggerExclude) {
            return this.preTriggerExclude;
        }
        if (header == RntbdRequestHeader.EnableScanInQuery) {
            return this.enableScanInQuery;
        }
        if (header == RntbdRequestHeader.FilterBySchemaRid) {
            return this.filterBySchemaRid;
        }
        if (header == RntbdRequestHeader.PopulateQuotaInfo) {
            return this.populateQuotaInfo;
        }
        if (header == RntbdRequestHeader.RemoteStorageType) {
            return this.remoteStorageType;
        }
        if (header == RntbdRequestHeader.IsClientEncrypted) {
            return this.isClientEncrypted;
        }
        if (header == RntbdRequestHeader.AuthorizationToken) {
            return this.authorizationToken;
        }
        if (header == RntbdRequestHeader.PostTriggerInclude) {
            return this.postTriggerInclude;
        }
        if (header == RntbdRequestHeader.PostTriggerExclude) {
            return this.postTriggerExclude;
        }
        if (header == RntbdRequestHeader.ResourceSchemaName) {
            return this.resourceSchemaName;
        }
        if (header == RntbdRequestHeader.SecondaryMasterKey) {
            return this.secondaryMasterKey;
        }
        if (header == RntbdRequestHeader.PrimaryReadonlyKey) {
            return this.primaryReadonlyKey;
        }
        if (header == RntbdRequestHeader.TransportRequestID) {
            return this.transportRequestID;
        }
        if (header == RntbdRequestHeader.IsAutoScaleRequest) {
            return this.isAutoScaleRequest;
        }
        if (header == RntbdRequestHeader.ResourceTokenExpiry) {
            return this.resourceTokenExpiry;
        }
        if (header == RntbdRequestHeader.StoredProcedureName) {
            return this.storedProcedureName;
        }
        if (header == RntbdRequestHeader.PartitionKeyRangeId) {
            return this.partitionKeyRangeId;
        }
        if (header == RntbdRequestHeader.RestoreMetadaFilter) {
            return this.restoreMetadaFilter;
        }
        if (header == RntbdRequestHeader.TimeToLiveInSeconds) {
            return this.timeToLiveInSeconds;
        }
        if (header == RntbdRequestHeader.UserDefinedTypeName) {
            return this.userDefinedTypeName;
        }
        if (header == RntbdRequestHeader.BindReplicaDirective) {
            return this.bindReplicaDirective;
        }
        if (header == RntbdRequestHeader.SecondaryReadonlyKey) {
            return this.secondaryReadonlyKey;
        }
        if (header == RntbdRequestHeader.PopulateQueryMetrics) {
            return this.populateQueryMetrics;
        }
        if (header == RntbdRequestHeader.EnumerationDirection) {
            return this.enumerationDirection;
        }
        if (header == RntbdRequestHeader.FanoutOperationState) {
            return this.fanoutOperationState;
        }
        if (header == RntbdRequestHeader.AllowTentativeWrites) {
            return this.allowTentativeWrites;
        }
        if (header == RntbdRequestHeader.PopulateIndexMetrics) {
            return this.populateIndexMetrics;
        }
        if (header == RntbdRequestHeader.CorrelatedActivityId) {
            return this.correlatedActivityId;
        }
        if (header == RntbdRequestHeader.PartitionKeyRangeName) {
            return this.partitionKeyRangeName;
        }
        if (header == RntbdRequestHeader.EffectivePartitionKey) {
            return this.effectivePartitionKey;
        }
        if (header == RntbdRequestHeader.SharedOfferThroughput) {
            return this.sharedOfferThroughput;
        }
        if (header == RntbdRequestHeader.IntendedCollectionRid) {
            return this.intendedCollectionRid;
        }
        if (header == RntbdRequestHeader.CollectionServiceIndex) {
            return this.collectionServiceIndex;
        }
        if (header == RntbdRequestHeader.UserDefinedFunctionName) {
            return this.userDefinedFunctionName;
        }
        if (header == RntbdRequestHeader.DisableRUPerMinuteUsage) {
            return this.disableRUPerMinuteUsage;
        }
        if (header == RntbdRequestHeader.ClientRetryAttemptCount) {
            return this.clientRetryAttemptCount;
        }
        if (header == RntbdRequestHeader.PartitionResourceFilter) {
            return this.partitionResourceFilter;
        }
        if (header == RntbdRequestHeader.CanOfferReplaceComplete) {
            return this.canOfferReplaceComplete;
        }
        if (header == RntbdRequestHeader.ExcludeSystemProperties) {
            return this.excludeSystemProperties;
        }
        if (header == RntbdRequestHeader.CollectionPartitionIndex) {
            return this.collectionPartitionIndex;
        }
        if (header == RntbdRequestHeader.EmitVerboseTracesInQuery) {
            return this.emitVerboseTracesInQuery;
        }
        if (header == RntbdRequestHeader.TargetGlobalCommittedLsn) {
            return this.targetGlobalCommittedLsn;
        }
        if (header == RntbdRequestHeader.BinaryPassthroughRequest) {
            return this.binaryPassthroughRequest;
        }
        if (header == RntbdRequestHeader.SDKSupportedCapabilities) {
            return this.sDKSupportedCapabilities;
        }
        if (header == RntbdRequestHeader.EnableLowPrecisionOrderBy) {
            return this.enableLowPrecisionOrderBy;
        }
        if (header == RntbdRequestHeader.MigrateCollectionDirective) {
            return this.migrateCollectionDirective;
        }
        if (header == RntbdRequestHeader.ContentSerializationFormat) {
            return this.contentSerializationFormat;
        }
        if (header == RntbdRequestHeader.ShouldBatchContinueOnError) {
            return this.shouldBatchContinueOnError;
        }
        if (header == RntbdRequestHeader.PopulatePartitionStatistics) {
            return this.populatePartitionStatistics;
        }
        if (header == RntbdRequestHeader.ChangeFeedWireFormatVersion) {
            return this.changeFeedWireFormatVersion;
        }
        if (header == RntbdRequestHeader.SupportSpatialLegacyCoordinates) {
            return this.supportSpatialLegacyCoordinates;
        }
        if (header == RntbdRequestHeader.EnableDynamicRidRangeAllocation) {
            return this.enableDynamicRidRangeAllocation;
        }
        if (header == RntbdRequestHeader.PopulateCollectionThroughputInfo) {
            return this.populateCollectionThroughputInfo;
        }
        if (header == RntbdRequestHeader.RemainingTimeInMsOnClientRequest) {
            return this.remainingTimeInMsOnClientRequest;
        }
        if (header == RntbdRequestHeader.UsePolygonsSmallerThanAHemisphere) {
            return this.usePolygonsSmallerThanAHemisphere;
        }
        if (header == RntbdRequestHeader.ResponseContinuationTokenLimitInKb) {
            return this.responseContinuationTokenLimitInKb;
        }
        if (header == RntbdRequestHeader.CollectionRemoteStorageSecurityIdentifier) {
            return this.collectionRemoteStorageSecurityIdentifier;
        }

        if (notCommonHeaders != null && notCommonHeaders.containsKey(header)) {
            return notCommonHeaders.get(header);
        }
        return null;
    }

    void encode(final ByteBuf out) {
        if (this.resourceId != null) {
            resourceId.encode(out);
        }
        if (this.authorizationToken != null) {
            authorizationToken.encode(out);
        }
        if (this.payloadPresent != null) {
            payloadPresent.encode(out);
        }
        if (this.date != null) {
            date.encode(out);
        }
        if (this.pageSize != null) {
            pageSize.encode(out);
        }
        if (this.sessionToken != null) {
            sessionToken.encode(out);
        }
        if (this.continuationToken != null) {
            continuationToken.encode(out);
        }
        if (this.indexingDirective != null) {
            indexingDirective.encode(out);
        }
        if (this.match != null) {
            match.encode(out);
        }
        if (this.preTriggerInclude != null) {
            preTriggerInclude.encode(out);
        }
        if (this.postTriggerInclude != null) {
            postTriggerInclude.encode(out);
        }
        if (this.isFanout != null) {
            isFanout.encode(out);
        }
        if (this.collectionPartitionIndex != null) {
            collectionPartitionIndex.encode(out);
        }
        if (this.collectionServiceIndex != null) {
            collectionServiceIndex.encode(out);
        }
        if (this.preTriggerExclude != null) {
            preTriggerExclude.encode(out);
        }
        if (this.postTriggerExclude != null) {
            postTriggerExclude.encode(out);
        }
        if (this.consistencyLevel != null) {
            consistencyLevel.encode(out);
        }
        if (this.entityId != null) {
            entityId.encode(out);
        }
        if (this.resourceSchemaName != null) {
            resourceSchemaName.encode(out);
        }
        if (this.replicaPath != null) {
            replicaPath.encode(out);
        }
        if (this.resourceTokenExpiry != null) {
            resourceTokenExpiry.encode(out);
        }
        if (this.databaseName != null) {
            databaseName.encode(out);
        }
        if (this.collectionName != null) {
            collectionName.encode(out);
        }
        if (this.documentName != null) {
            documentName.encode(out);
        }
        if (this.attachmentName != null) {
            attachmentName.encode(out);
        }
        if (this.userName != null) {
            userName.encode(out);
        }
        if (this.permissionName != null) {
            permissionName.encode(out);
        }
        if (this.storedProcedureName != null) {
            storedProcedureName.encode(out);
        }
        if (this.userDefinedFunctionName != null) {
            userDefinedFunctionName.encode(out);
        }
        if (this.triggerName != null) {
            triggerName.encode(out);
        }
        if (this.enableScanInQuery != null) {
            enableScanInQuery.encode(out);
        }
        if (this.emitVerboseTracesInQuery != null) {
            emitVerboseTracesInQuery.encode(out);
        }
        if (this.conflictName != null) {
            conflictName.encode(out);
        }
        if (this.bindReplicaDirective != null) {
            bindReplicaDirective.encode(out);
        }
        if (this.primaryMasterKey != null) {
            primaryMasterKey.encode(out);
        }
        if (this.secondaryMasterKey != null) {
            secondaryMasterKey.encode(out);
        }
        if (this.primaryReadonlyKey != null) {
            primaryReadonlyKey.encode(out);
        }
        if (this.secondaryReadonlyKey != null) {
            secondaryReadonlyKey.encode(out);
        }
        if (this.profileRequest != null) {
            profileRequest.encode(out);
        }
        if (this.enableLowPrecisionOrderBy != null) {
            enableLowPrecisionOrderBy.encode(out);
        }
        if (this.clientVersion != null) {
            clientVersion.encode(out);
        }
        if (this.canCharge != null) {
            canCharge.encode(out);
        }
        if (this.canThrottle != null) {
            canThrottle.encode(out);
        }
        if (this.partitionKey != null) {
            partitionKey.encode(out);
        }
        if (this.partitionKeyRangeId != null) {
            partitionKeyRangeId.encode(out);
        }
        if (this.migrateCollectionDirective != null) {
            migrateCollectionDirective.encode(out);
        }
        if (this.supportSpatialLegacyCoordinates != null) {
            supportSpatialLegacyCoordinates.encode(out);
        }
        if (this.partitionCount != null) {
            partitionCount.encode(out);
        }
        if (this.collectionRid != null) {
            collectionRid.encode(out);
        }
        if (this.partitionKeyRangeName != null) {
            partitionKeyRangeName.encode(out);
        }
        if (this.schemaName != null) {
            schemaName.encode(out);
        }
        if (this.filterBySchemaRid != null) {
            filterBySchemaRid.encode(out);
        }
        if (this.usePolygonsSmallerThanAHemisphere != null) {
            usePolygonsSmallerThanAHemisphere.encode(out);
        }
        if (this.gatewaySignature != null) {
            gatewaySignature.encode(out);
        }
        if (this.enableLogging != null) {
            enableLogging.encode(out);
        }
        if (this.a_IM != null) {
            a_IM.encode(out);
        }
        if (this.populateQuotaInfo != null) {
            populateQuotaInfo.encode(out);
        }
        if (this.disableRUPerMinuteUsage != null) {
            disableRUPerMinuteUsage.encode(out);
        }
        if (this.populateQueryMetrics != null) {
            populateQueryMetrics.encode(out);
        }
        if (this.responseContinuationTokenLimitInKb != null) {
            responseContinuationTokenLimitInKb.encode(out);
        }
        if (this.populatePartitionStatistics != null) {
            populatePartitionStatistics.encode(out);
        }
        if (this.remoteStorageType != null) {
            remoteStorageType.encode(out);
        }
        if (this.collectionRemoteStorageSecurityIdentifier != null) {
            collectionRemoteStorageSecurityIdentifier.encode(out);
        }
        if (this.ifModifiedSince != null) {
            ifModifiedSince.encode(out);
        }
        if (this.populateCollectionThroughputInfo != null) {
            populateCollectionThroughputInfo.encode(out);
        }
        if (this.remainingTimeInMsOnClientRequest != null) {
            remainingTimeInMsOnClientRequest.encode(out);
        }
        if (this.clientRetryAttemptCount != null) {
            clientRetryAttemptCount.encode(out);
        }
        if (this.targetLsn != null) {
            targetLsn.encode(out);
        }
        if (this.targetGlobalCommittedLsn != null) {
            targetGlobalCommittedLsn.encode(out);
        }
        if (this.transportRequestID != null) {
            transportRequestID.encode(out);
        }
        if (this.restoreMetadaFilter != null) {
            restoreMetadaFilter.encode(out);
        }
        if (this.restoreParams != null) {
            restoreParams.encode(out);
        }
        if (this.shareThroughput != null) {
            shareThroughput.encode(out);
        }
        if (this.partitionResourceFilter != null) {
            partitionResourceFilter.encode(out);
        }
        if (this.isReadOnlyScript != null) {
            isReadOnlyScript.encode(out);
        }
        if (this.isAutoScaleRequest != null) {
            isAutoScaleRequest.encode(out);
        }
        if (this.forceQueryScan != null) {
            forceQueryScan.encode(out);
        }
        if (this.canOfferReplaceComplete != null) {
            canOfferReplaceComplete.encode(out);
        }
        if (this.excludeSystemProperties != null) {
            excludeSystemProperties.encode(out);
        }
        if (this.binaryId != null) {
            binaryId.encode(out);
        }
        if (this.timeToLiveInSeconds != null) {
            timeToLiveInSeconds.encode(out);
        }
        if (this.effectivePartitionKey != null) {
            effectivePartitionKey.encode(out);
        }
        if (this.binaryPassthroughRequest != null) {
            binaryPassthroughRequest.encode(out);
        }
        if (this.userDefinedTypeName != null) {
            userDefinedTypeName.encode(out);
        }
        if (this.enableDynamicRidRangeAllocation != null) {
            enableDynamicRidRangeAllocation.encode(out);
        }
        if (this.enumerationDirection != null) {
            enumerationDirection.encode(out);
        }
        if (this.startId != null) {
            startId.encode(out);
        }
        if (this.endId != null) {
            endId.encode(out);
        }
        if (this.fanoutOperationState != null) {
            fanoutOperationState.encode(out);
        }
        if (this.startEpk != null) {
            startEpk.encode(out);
        }
        if (this.endEpk != null) {
            endEpk.encode(out);
        }
        if (this.readFeedKeyType != null) {
            readFeedKeyType.encode(out);
        }
        if (this.contentSerializationFormat != null) {
            contentSerializationFormat.encode(out);
        }
        if (this.allowTentativeWrites != null) {
            allowTentativeWrites.encode(out);
        }
        if (this.isUserRequest != null) {
            isUserRequest.encode(out);
        }
        if (this.sharedOfferThroughput != null) {
            sharedOfferThroughput.encode(out);
        }
        if (this.isBatchAtomic != null) {
            isBatchAtomic.encode(out);
        }
        if (this.shouldBatchContinueOnError != null) {
            shouldBatchContinueOnError.encode(out);
        }
        if (this.isBatchOrdered != null) {
            isBatchOrdered.encode(out);
        }
        if (this.returnPreference != null) {
            returnPreference.encode(out);
        }
        if (this.populateIndexMetrics != null) {
            populateIndexMetrics.encode(out);
        }
        if (this.isClientEncrypted != null) {
            isClientEncrypted.encode(out);
        }
        if (this.intendedCollectionRid != null) {
            intendedCollectionRid.encode(out);
        }
        if (this.correlatedActivityId != null) {
            correlatedActivityId.encode(out);
        }
        if (this.sDKSupportedCapabilities != null) {
            sDKSupportedCapabilities.encode(out);
        }
        if (this.changeFeedWireFormatVersion != null) {
            changeFeedWireFormatVersion.encode(out);
        }
        if (this.priorityLevel != null) {
            priorityLevel.encode(out);
        }
        if (notCommonHeaders != null) {
            for (RntbdToken token : notCommonHeaders.values()) {
                token.encode(out);
            }
        }
    }

    int computeLength() {
        int total = 0;
        if (this.resourceId != null) {
            total += resourceId.computeLength();
        }
        if (this.authorizationToken != null) {
            total += authorizationToken.computeLength();
        }
        if (this.payloadPresent != null) {
            total += payloadPresent.computeLength();
        }
        if (this.date != null) {
            total += date.computeLength();
        }
        if (this.pageSize != null) {
            total += pageSize.computeLength();
        }
        if (this.sessionToken != null) {
            total += sessionToken.computeLength();
        }
        if (this.continuationToken != null) {
            total += continuationToken.computeLength();
        }
        if (this.indexingDirective != null) {
            total += indexingDirective.computeLength();
        }
        if (this.match != null) {
            total += match.computeLength();
        }
        if (this.preTriggerInclude != null) {
            total += preTriggerInclude.computeLength();
        }
        if (this.postTriggerInclude != null) {
            total += postTriggerInclude.computeLength();
        }
        if (this.isFanout != null) {
            total += isFanout.computeLength();
        }
        if (this.collectionPartitionIndex != null) {
            total += collectionPartitionIndex.computeLength();
        }
        if (this.collectionServiceIndex != null) {
            total += collectionServiceIndex.computeLength();
        }
        if (this.preTriggerExclude != null) {
            total += preTriggerExclude.computeLength();
        }
        if (this.postTriggerExclude != null) {
            total += postTriggerExclude.computeLength();
        }
        if (this.consistencyLevel != null) {
            total += consistencyLevel.computeLength();
        }
        if (this.entityId != null) {
            total += entityId.computeLength();
        }
        if (this.resourceSchemaName != null) {
            total += resourceSchemaName.computeLength();
        }
        if (this.replicaPath != null) {
            total += replicaPath.computeLength();
        }
        if (this.resourceTokenExpiry != null) {
            total += resourceTokenExpiry.computeLength();
        }
        if (this.databaseName != null) {
            total += databaseName.computeLength();
        }
        if (this.collectionName != null) {
            total += collectionName.computeLength();
        }
        if (this.documentName != null) {
            total += documentName.computeLength();
        }
        if (this.attachmentName != null) {
            total += attachmentName.computeLength();
        }
        if (this.userName != null) {
            total += userName.computeLength();
        }
        if (this.permissionName != null) {
            total += permissionName.computeLength();
        }
        if (this.storedProcedureName != null) {
            total += storedProcedureName.computeLength();
        }
        if (this.userDefinedFunctionName != null) {
            total += userDefinedFunctionName.computeLength();
        }
        if (this.triggerName != null) {
            total += triggerName.computeLength();
        }
        if (this.enableScanInQuery != null) {
            total += enableScanInQuery.computeLength();
        }
        if (this.emitVerboseTracesInQuery != null) {
            total += emitVerboseTracesInQuery.computeLength();
        }
        if (this.conflictName != null) {
            total += conflictName.computeLength();
        }
        if (this.bindReplicaDirective != null) {
            total += bindReplicaDirective.computeLength();
        }
        if (this.primaryMasterKey != null) {
            total += primaryMasterKey.computeLength();
        }
        if (this.secondaryMasterKey != null) {
            total += secondaryMasterKey.computeLength();
        }
        if (this.primaryReadonlyKey != null) {
            total += primaryReadonlyKey.computeLength();
        }
        if (this.secondaryReadonlyKey != null) {
            total += secondaryReadonlyKey.computeLength();
        }
        if (this.profileRequest != null) {
            total += profileRequest.computeLength();
        }
        if (this.enableLowPrecisionOrderBy != null) {
            total += enableLowPrecisionOrderBy.computeLength();
        }
        if (this.clientVersion != null) {
            total += clientVersion.computeLength();
        }
        if (this.canCharge != null) {
            total += canCharge.computeLength();
        }
        if (this.canThrottle != null) {
            total += canThrottle.computeLength();
        }
        if (this.partitionKey != null) {
            total += partitionKey.computeLength();
        }
        if (this.partitionKeyRangeId != null) {
            total += partitionKeyRangeId.computeLength();
        }
        if (this.migrateCollectionDirective != null) {
            total += migrateCollectionDirective.computeLength();
        }
        if (this.supportSpatialLegacyCoordinates != null) {
            total += supportSpatialLegacyCoordinates.computeLength();
        }
        if (this.partitionCount != null) {
            total += partitionCount.computeLength();
        }
        if (this.collectionRid != null) {
            total += collectionRid.computeLength();
        }
        if (this.partitionKeyRangeName != null) {
            total += partitionKeyRangeName.computeLength();
        }
        if (this.schemaName != null) {
            total += schemaName.computeLength();
        }
        if (this.filterBySchemaRid != null) {
            total += filterBySchemaRid.computeLength();
        }
        if (this.usePolygonsSmallerThanAHemisphere != null) {
            total += usePolygonsSmallerThanAHemisphere.computeLength();
        }
        if (this.gatewaySignature != null) {
            total += gatewaySignature.computeLength();
        }
        if (this.enableLogging != null) {
            total += enableLogging.computeLength();
        }
        if (this.a_IM != null) {
            total += a_IM.computeLength();
        }
        if (this.populateQuotaInfo != null) {
            total += populateQuotaInfo.computeLength();
        }
        if (this.disableRUPerMinuteUsage != null) {
            total += disableRUPerMinuteUsage.computeLength();
        }
        if (this.populateQueryMetrics != null) {
            total += populateQueryMetrics.computeLength();
        }
        if (this.responseContinuationTokenLimitInKb != null) {
            total += responseContinuationTokenLimitInKb.computeLength();
        }
        if (this.populatePartitionStatistics != null) {
            total += populatePartitionStatistics.computeLength();
        }
        if (this.remoteStorageType != null) {
            total += remoteStorageType.computeLength();
        }
        if (this.collectionRemoteStorageSecurityIdentifier != null) {
            total += collectionRemoteStorageSecurityIdentifier.computeLength();
        }
        if (this.ifModifiedSince != null) {
            total += ifModifiedSince.computeLength();
        }
        if (this.populateCollectionThroughputInfo != null) {
            total += populateCollectionThroughputInfo.computeLength();
        }
        if (this.remainingTimeInMsOnClientRequest != null) {
            total += remainingTimeInMsOnClientRequest.computeLength();
        }
        if (this.clientRetryAttemptCount != null) {
            total += clientRetryAttemptCount.computeLength();
        }
        if (this.targetLsn != null) {
            total += targetLsn.computeLength();
        }
        if (this.targetGlobalCommittedLsn != null) {
            total += targetGlobalCommittedLsn.computeLength();
        }
        if (this.transportRequestID != null) {
            total += transportRequestID.computeLength();
        }
        if (this.restoreMetadaFilter != null) {
            total += restoreMetadaFilter.computeLength();
        }
        if (this.restoreParams != null) {
            total += restoreParams.computeLength();
        }
        if (this.shareThroughput != null) {
            total += shareThroughput.computeLength();
        }
        if (this.partitionResourceFilter != null) {
            total += partitionResourceFilter.computeLength();
        }
        if (this.isReadOnlyScript != null) {
            total += isReadOnlyScript.computeLength();
        }
        if (this.isAutoScaleRequest != null) {
            total += isAutoScaleRequest.computeLength();
        }
        if (this.forceQueryScan != null) {
            total += forceQueryScan.computeLength();
        }
        if (this.canOfferReplaceComplete != null) {
            total += canOfferReplaceComplete.computeLength();
        }
        if (this.excludeSystemProperties != null) {
            total += excludeSystemProperties.computeLength();
        }
        if (this.binaryId != null) {
            total += binaryId.computeLength();
        }
        if (this.timeToLiveInSeconds != null) {
            total += timeToLiveInSeconds.computeLength();
        }
        if (this.effectivePartitionKey != null) {
            total += effectivePartitionKey.computeLength();
        }
        if (this.binaryPassthroughRequest != null) {
            total += binaryPassthroughRequest.computeLength();
        }
        if (this.userDefinedTypeName != null) {
            total += userDefinedTypeName.computeLength();
        }
        if (this.enableDynamicRidRangeAllocation != null) {
            total += enableDynamicRidRangeAllocation.computeLength();
        }
        if (this.enumerationDirection != null) {
            total += enumerationDirection.computeLength();
        }
        if (this.startId != null) {
            total += startId.computeLength();
        }
        if (this.endId != null) {
            total += endId.computeLength();
        }
        if (this.fanoutOperationState != null) {
            total += fanoutOperationState.computeLength();
        }
        if (this.startEpk != null) {
            total += startEpk.computeLength();
        }
        if (this.endEpk != null) {
            total += endEpk.computeLength();
        }
        if (this.readFeedKeyType != null) {
            total += readFeedKeyType.computeLength();
        }
        if (this.contentSerializationFormat != null) {
            total += contentSerializationFormat.computeLength();
        }
        if (this.allowTentativeWrites != null) {
            total += allowTentativeWrites.computeLength();
        }
        if (this.isUserRequest != null) {
            total += isUserRequest.computeLength();
        }
        if (this.sharedOfferThroughput != null) {
            total += sharedOfferThroughput.computeLength();
        }
        if (this.isBatchAtomic != null) {
            total += isBatchAtomic.computeLength();
        }
        if (this.shouldBatchContinueOnError != null) {
            total += shouldBatchContinueOnError.computeLength();
        }
        if (this.isBatchOrdered != null) {
            total += isBatchOrdered.computeLength();
        }
        if (this.returnPreference != null) {
            total += returnPreference.computeLength();
        }
        if (this.populateIndexMetrics != null) {
            total += populateIndexMetrics.computeLength();
        }
        if (this.isClientEncrypted != null) {
            total += isClientEncrypted.computeLength();
        }
        if (this.intendedCollectionRid != null) {
            total += intendedCollectionRid.computeLength();
        }
        if (this.correlatedActivityId != null) {
            total += correlatedActivityId.computeLength();
        }
        if (this.sDKSupportedCapabilities != null) {
            total += sDKSupportedCapabilities.computeLength();
        }
        if (this.changeFeedWireFormatVersion != null) {
            total += changeFeedWireFormatVersion.computeLength();
        }
        if (this.priorityLevel != null) {
            total += priorityLevel.computeLength();
        }

        if (notCommonHeaders != null) {
            for (RntbdToken token : notCommonHeaders.values()) {
                total += token.computeLength();
            }
        }
        return total;
    }
    // endregion

    private void addConsistencyLevelHeader(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.CONSISTENCY_LEVEL);

        if (StringUtils.isNotEmpty(value)) {

            final ConsistencyLevel level = BridgeInternal.fromServiceSerializedFormat(value);

            if (level == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    HttpHeaders.CONSISTENCY_LEVEL,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (level) {
                case STRONG:
                    this.getConsistencyLevel().setValue(RntbdConsistencyLevel.Strong.id());
                    break;
                case BOUNDED_STALENESS:
                    this.getConsistencyLevel().setValue(RntbdConsistencyLevel.BoundedStaleness.id());
                    break;
                case SESSION:
                    this.getConsistencyLevel().setValue(RntbdConsistencyLevel.Session.id());
                    break;
                case EVENTUAL:
                    this.getConsistencyLevel().setValue(RntbdConsistencyLevel.Eventual.id());
                    break;
                case CONSISTENT_PREFIX:
                    this.getConsistencyLevel().setValue(RntbdConsistencyLevel.ConsistentPrefix.id());
                    break;
                default:
                    assert false;
                    break;
            }
        }
    }

    private void addContentSerializationFormat(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.CONTENT_SERIALIZATION_FORMAT);

        if (StringUtils.isNotEmpty(value)) {

            final ContentSerializationFormat format = EnumUtils.getEnumIgnoreCase(
                ContentSerializationFormat.class,
                value);

            if (format == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    HttpHeaders.CONTENT_SERIALIZATION_FORMAT,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (format) {
                case JsonText:
                    this.getContentSerializationFormat().setValue(RntbdContentSerializationFormat.JsonText.id());
                    break;
                case CosmosBinary:
                    this.getContentSerializationFormat().setValue(RntbdContentSerializationFormat.CosmosBinary.id());
                    break;
                default:
                    assert false;
            }
        }
    }

    private void addContinuationToken(final RxDocumentServiceRequest request) {
        final String value = request.getContinuation();
        if (StringUtils.isNotEmpty(value)) {
            this.getContinuationToken().setValue(value);
        }
    }

    private void addCorrelatedActivityId(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.CORRELATED_ACTIVITY_ID);
        if (StringUtils.isNotEmpty(value)) {
            this.getCorrelatedActivityId().setValue(UUID.fromString(value));
        }
    }

    private void addPriorityLevel(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.PRIORITY_LEVEL);

        if (StringUtils.isNotEmpty(value)) {
            final PriorityLevel priorityLevel = PriorityLevel.fromString(value);

            if (priorityLevel == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    HttpHeaders.PRIORITY_LEVEL,
                    value);
                throw new IllegalStateException(reason);
            }

            this.getPriorityLevel().setValue(
                ImplementationBridgeHelpers
                    .PriorityLevelHelper
                    .getPriorityLevelAccessor()
                    .getPriorityValue(priorityLevel)
            );
        }
    }

    private void addDateHeader(final Map<String, String> headers) {

        // Since the HTTP date header is overridden by some proxies/http client libraries, we support an additional date
        // header and prefer that to the (regular) date header

        String value = headers.get(HttpHeaders.X_DATE);

        if (StringUtils.isEmpty(value)) {
            value = headers.get(HttpHeaders.HTTP_DATE);
        }

        if (StringUtils.isNotEmpty(value)) {
            this.getDate().setValue(value);
        }
    }

    private void addDisableRUPerMinuteUsage(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.DISABLE_RU_PER_MINUTE_USAGE);
        if (StringUtils.isNotEmpty(value)) {
            this.getDisableRUPerMinuteUsage().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addEmitVerboseTracesInQuery(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.EMIT_VERBOSE_TRACES_IN_QUERY);
        if (StringUtils.isNotEmpty(value)) {
            this.getEmitVerboseTracesInQuery().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addEnableLogging(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.ENABLE_LOGGING);
        if (StringUtils.isNotEmpty(value)) {
            this.getEnableLogging().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addEnableLowPrecisionOrderBy(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.ENABLE_LOW_PRECISION_ORDER_BY);
        if (StringUtils.isNotEmpty(value)) {
            this.getEnableLowPrecisionOrderBy().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addEntityId(final Map<String, String> headers) {
        final String value = headers.get(BackendHeaders.ENTITY_ID);
        if (StringUtils.isNotEmpty(value)) {
            this.getEntityId().setValue(value);
        }
    }

    private void addEnumerationDirection(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.ENUMERATION_DIRECTION);

        if (StringUtils.isNotEmpty(value)) {

            final EnumerationDirection direction = EnumUtils.getEnumIgnoreCase(EnumerationDirection.class, value);

            if (direction == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    HttpHeaders.ENUMERATION_DIRECTION,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (direction) {
                case Forward:
                    this.getEnumerationDirection().setValue(RntbdEnumerationDirection.Forward.id());
                    break;
                case Reverse:
                    this.getEnumerationDirection().setValue(RntbdEnumerationDirection.Reverse.id());
                    break;
                default:
                    assert false;
            }
        }
    }

    private void addExcludeSystemProperties(final Map<String, String> headers) {
        final String value = headers.get(BackendHeaders.EXCLUDE_SYSTEM_PROPERTIES);
        if (StringUtils.isNotEmpty(value)) {
            this.getExcludeSystemProperties().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addFanoutOperationStateHeader(final Map<String, String> headers) {

        final String value = headers.get(BackendHeaders.FANOUT_OPERATION_STATE);

        if (StringUtils.isNotEmpty(value)) {

            final FanoutOperationState format = EnumUtils.getEnumIgnoreCase(FanoutOperationState.class, value);

            if (format == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    BackendHeaders.FANOUT_OPERATION_STATE,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (format) {
                case Started:
                    this.getFanoutOperationState().setValue(RntbdFanoutOperationState.Started.id());
                    break;
                case Completed:
                    this.getFanoutOperationState().setValue(RntbdFanoutOperationState.Completed.id());
                    break;
                default:
                    assert false;
            }
        }
    }

    private void addIfModifiedSinceHeader(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.IF_MODIFIED_SINCE);
        if (StringUtils.isNotEmpty(value)) {
            this.getIfModifiedSince().setValue(value);
        }
    }

    private void addIndexingDirectiveHeader(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.INDEXING_DIRECTIVE);

        if (StringUtils.isNotEmpty(value)) {

            final IndexingDirective directive = EnumUtils.getEnumIgnoreCase(IndexingDirective.class, value);

            if (directive == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    HttpHeaders.INDEXING_DIRECTIVE,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (directive) {
                case DEFAULT:
                    this.getIndexingDirective().setValue(RntbdIndexingDirective.Default.id());
                    break;
                case EXCLUDE:
                    this.getIndexingDirective().setValue(RntbdIndexingDirective.Exclude.id());
                    break;
                case INCLUDE:
                    this.getIndexingDirective().setValue(RntbdIndexingDirective.Include.id());
                    break;
                default:
                    assert false;
            }
        }
    }

    private void addIsAutoScaleRequest(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.IS_AUTO_SCALE_REQUEST);
        if (StringUtils.isNotEmpty(value)) {
            this.getIsAutoScaleRequest().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addIsFanout(final Map<String, String> headers) {
        final String value = headers.get(BackendHeaders.IS_FANOUT_REQUEST);
        if (StringUtils.isNotEmpty(value)) {
            this.getIsFanout().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addIsReadOnlyScript(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.IS_READ_ONLY_SCRIPT);
        if (StringUtils.isNotEmpty(value)) {
            this.getIsReadOnlyScript().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addIsUserRequest(final Map<String, String> headers) {
        final String value = headers.get(BackendHeaders.IS_USER_REQUEST);
        if (StringUtils.isNotEmpty(value)) {
            this.getIsUserRequest().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addMatchHeader(final Map<String, String> headers, final RntbdOperationType operationType) {

        String match;

        switch (operationType) {
            case Read:
            case ReadFeed:
                match = headers.get(HttpHeaders.IF_NONE_MATCH);
                break;
            default:
                match = headers.get(HttpHeaders.IF_MATCH);
                break;
        }

        if (StringUtils.isNotEmpty(match)) {
            this.getMatch().setValue(match);
        }
    }

    private void addMigrateCollectionDirectiveHeader(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.MIGRATE_COLLECTION_DIRECTIVE);

        if (StringUtils.isNotEmpty(value)) {

            final MigrateCollectionDirective directive = EnumUtils.getEnumIgnoreCase(MigrateCollectionDirective.class, value);

            if (directive == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    HttpHeaders.MIGRATE_COLLECTION_DIRECTIVE,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (directive) {
                case Freeze:
                    this.getMigrateCollectionDirective().setValue(RntbdMigrateCollectionDirective.Freeze.id());
                    break;
                case Thaw:
                    this.getMigrateCollectionDirective().setValue(RntbdMigrateCollectionDirective.Thaw.id());
                    break;
                default:
                    assert false;
                    break;
            }
        }
    }

    private void addPageSize(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.PAGE_SIZE);

        if (StringUtils.isNotEmpty(value)) {
            final long aLong = parseLong(HttpHeaders.PAGE_SIZE, value, -1, 0xFFFFFFFFL);
            this.getPageSize().setValue((int) (aLong < 0 ? 0xFFFFFFFFL : aLong));
        }
    }

    private void addPopulateCollectionThroughputInfo(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.POPULATE_COLLECTION_THROUGHPUT_INFO);
        if (StringUtils.isNotEmpty(value)) {
            this.getPopulateCollectionThroughputInfo().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addPopulatePartitionStatistics(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.POPULATE_PARTITION_STATISTICS);
        if (StringUtils.isNotEmpty(value)) {
            this.getPopulatePartitionStatistics().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addPopulateQueryMetrics(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.POPULATE_QUERY_METRICS);
        if (StringUtils.isNotEmpty(value)) {
            this.getPopulateQueryMetrics().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addPopulateIndexMetrics(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.POPULATE_INDEX_METRICS);
        if (StringUtils.isNotEmpty(value)) {
            this.getPopulateIndexMetrics().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addIsClientEncrypted(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.IS_CLIENT_ENCRYPTED_HEADER);
        if (StringUtils.isNotEmpty(value)) {
            this.getIsClientEncrypted().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addIntendedCollectionRid(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.INTENDED_COLLECTION_RID_HEADER);
        if (StringUtils.isNotEmpty(value)) {
            this.getIntendedCollectionRid().setValue(value);
        }
    }

    private void addPopulateQuotaInfo(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.POPULATE_QUOTA_INFO);
        if (StringUtils.isNotEmpty(value)) {
            this.getPopulateQuotaInfo().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addProfileRequest(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.PROFILE_REQUEST);
        if (StringUtils.isNotEmpty(value)) {
            this.getProfileRequest().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addQueryForceScan(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.FORCE_QUERY_SCAN);
        if (StringUtils.isNotEmpty(value)) {
            this.getForceQueryScan().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addRemoteStorageType(final Map<String, String> headers) {

        final String value = headers.get(BackendHeaders.REMOTE_STORAGE_TYPE);

        if (StringUtils.isNotEmpty(value)) {

            final RemoteStorageType type = EnumUtils.getEnumIgnoreCase(RemoteStorageType.class, value);

            if (type == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    BackendHeaders.REMOTE_STORAGE_TYPE,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (type) {
                case Standard:
                    this.getRemoteStorageType().setValue(RntbdRemoteStorageType.Standard.id());
                    break;
                case Premium:
                    this.getRemoteStorageType().setValue(RntbdRemoteStorageType.Premium.id());
                    break;
                default:
                    assert false;
            }
        }
    }

    private void addResourceIdOrPathHeaders(final RxDocumentServiceRequest request) {
        final String value = request.getResourceId();

        if (StringUtils.isNotEmpty(value)) {
            // Name-based can also have ResourceId because gateway might have generated it
            this.getResourceId().setValue(ResourceId.parse(request.getResourceType(), value));
        }

        if (request.getIsNameBased()) {

            // Assumption: format is like "dbs/dbName/colls/collName/docs/docName" or "/dbs/dbName/colls/collName",
            // not "apps/appName/partitions/partitionKey/replicas/replicaId/dbs/dbName"

            final String address = request.getResourceAddress();
            final String[] fragments = StringUtils.split(address, URL_TRIM);
            int count = fragments.length;

            if (count >= 2) {
                if (fragments[0].equals(Paths.DATABASES_PATH_SEGMENT)) {
                    this.getDatabaseName().setValue(fragments[1]);
                } else {
                    final String reason = String.format(Locale.ROOT, RMResources.InvalidResourceAddress,
                        value, address);
                    throw new IllegalStateException(reason);
                }
            }

            if (count >= 4) {
                switch (fragments[2]) {
                    case Paths.COLLECTIONS_PATH_SEGMENT:
                        this.getCollectionName().setValue(fragments[3]);
                        break;
                    case Paths.USERS_PATH_SEGMENT:
                        this.getUserName().setValue(fragments[3]);
                        break;
                    case Paths.USER_DEFINED_TYPES_PATH_SEGMENT:
                        this.getUserDefinedTypeName().setValue(fragments[3]);
                        break;
                    default:
                        final String reason = String.format(Locale.ROOT, RMResources.InvalidResourceAddress,
                            value, address);
                        throw new IllegalStateException(reason);
                }
            }

            if (count >= 6) {
                switch (fragments[4]) {
                    case Paths.DOCUMENTS_PATH_SEGMENT:
                        this.getDocumentName().setValue(fragments[5]);
                        break;
                    case Paths.STORED_PROCEDURES_PATH_SEGMENT:
                        this.getStoredProcedureName().setValue(fragments[5]);
                        break;
                    case Paths.PERMISSIONS_PATH_SEGMENT:
                        this.getPermissionName().setValue(fragments[5]);
                        break;
                    case Paths.USER_DEFINED_FUNCTIONS_PATH_SEGMENT:
                        this.getUserDefinedFunctionName().setValue(fragments[5]);
                        break;
                    case Paths.TRIGGERS_PATH_SEGMENT:
                        this.getTriggerName().setValue(fragments[5]);
                        break;
                    case Paths.CONFLICTS_PATH_SEGMENT:
                        this.getConflictName().setValue(fragments[5]);
                        break;
                    case Paths.PARTITION_KEY_RANGES_PATH_SEGMENT:
                        this.getPartitionKeyRangeName().setValue(fragments[5]);
                        break;
                    case Paths.SCHEMAS_PATH_SEGMENT:
                        this.getSchemaName().setValue(fragments[5]);
                        break;
                    default:
                        final String reason = String.format(Locale.ROOT, RMResources.InvalidResourceAddress,
                            value, address);
                        throw new IllegalStateException(reason);
                }
            }

            if (count >= 8) {
                if (fragments[6].equals(Paths.ATTACHMENTS_PATH_SEGMENT)) {
                    this.getAttachmentName().setValue(fragments[7]);
                } else {
                    final String reason = String.format(Locale.ROOT, RMResources.InvalidResourceAddress,
                        value, address);
                    throw new IllegalStateException(reason);
                }
            }
        }
    }

    private void addResponseContinuationTokenLimitInKb(final Map<String, String> headers) {

        final String value = headers.get(HttpHeaders.RESPONSE_CONTINUATION_TOKEN_LIMIT_IN_KB);

        if (StringUtils.isNotEmpty(value)) {
            final long aLong = parseLong(HttpHeaders.RESPONSE_CONTINUATION_TOKEN_LIMIT_IN_KB, value, 0, 0xFFFFFFFFL);
            this.getResponseContinuationTokenLimitInKb().setValue((int) (aLong < 0 ? 0xFFFFFFFFL : aLong));
        }
    }

    private void addShareThroughput(final Map<String, String> headers) {
        final String value = headers.get(BackendHeaders.SHARE_THROUGHPUT);
        if (StringUtils.isNotEmpty(value)) {
            this.getShareThroughput().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addStartAndEndKeys(final Map<String, String> headers) {

        String value = headers.get(HttpHeaders.READ_FEED_KEY_TYPE);

        if (StringUtils.isNotEmpty(value)) {

            final ReadFeedKeyType type = EnumUtils.getEnumIgnoreCase(ReadFeedKeyType.class, value);

            if (type == null) {
                final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue,
                    HttpHeaders.READ_FEED_KEY_TYPE,
                    value);
                throw new IllegalStateException(reason);
            }

            switch (type) {
                case ResourceId:
                    this.getReadFeedKeyType().setValue(RntbdReadFeedKeyType.ResourceId.id());
                    break;
                case EffectivePartitionKey:
                    this.getReadFeedKeyType().setValue(RntbdReadFeedKeyType.EffectivePartitionKey.id());
                    break;
                case EffectivePartitionKeyRange:
                    this.getReadFeedKeyType().setValue(RntbdReadFeedKeyType.EffectivePartitionKeyRange.id());
                    break;
                default:
                    throw new IllegalStateException(String.format("Invalid ReadFeed key type '%s'.", type));
            }
        }

        final Base64.Decoder decoder = Base64.getDecoder();

        value = headers.get(HttpHeaders.START_ID);

        if (StringUtils.isNotEmpty(value)) {
            this.getStartId().setValue(decoder.decode(value));
        }

        value = headers.get(HttpHeaders.END_ID);

        if (StringUtils.isNotEmpty(value)) {
            this.getEndId().setValue(decoder.decode(value));
        }

        value = headers.get(HttpHeaders.START_EPK);

        if (StringUtils.isNotEmpty(value)) {
            this.getStartEpk().setValue(value.getBytes(StandardCharsets.UTF_8));
        }

        value = headers.get(HttpHeaders.END_EPK);

        if (StringUtils.isNotEmpty(value)) {
            this.getEndEpk().setValue(value.getBytes(StandardCharsets.UTF_8));
        }
    }

    private void addSupportSpatialLegacyCoordinates(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.SUPPORT_SPATIAL_LEGACY_COORDINATES);
        if (StringUtils.isNotEmpty(value)) {
            this.getSupportSpatialLegacyCoordinates().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addUsePolygonsSmallerThanAHemisphere(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.USE_POLYGONS_SMALLER_THAN_AHEMISPHERE);
        if (StringUtils.isNotEmpty(value)) {
            this.getUsePolygonsSmallerThanAHemisphere().setValue(Boolean.parseBoolean(value));
        }
    }

    private void addReturnPreference(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.PREFER);
        if (StringUtils.isNotEmpty(value) && value.contains(HeaderValues.PREFER_RETURN_MINIMAL)) {
            this.getReturnPreference().setValue(true);
        }
    }

    private void addSDKSupportedCapabilities(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.SDK_SUPPORTED_CAPABILITIES);
        if (StringUtils.isNotEmpty(value)) {
            this.getSDKSupportedCapabilities().setValue(Long.valueOf(value));
        }
    }

    private void addChangeFeedWireFormatVersion(final Map<String, String> headers) {
        final String value = headers.get(HttpHeaders.CHANGE_FEED_WIRE_FORMAT_VERSION);
        if (StringUtils.isNotEmpty(value)) {
            this.getChangeFeedWireFormatVersion().setValue(value);
        }
    }

    private void fillTokenFromHeader(final Map<String, String> headers, final Supplier<RntbdToken> supplier, final String name) {

        final String value = headers.get(name);

        if (StringUtils.isNotEmpty(value)) {

            final RntbdToken token = supplier.get();

            switch (token.getTokenType()) {

                case SmallString:
                case String:
                case ULongString: {

                    token.setValue(value);
                    break;
                }
                case Byte: {

                    token.setValue(Boolean.parseBoolean(value));
                    break;
                }
                case Double: {

                    token.setValue(parseDouble(name, value));
                    break;
                }
                case Long: {

                    final long aLong = parseLong(name, value, Integer.MIN_VALUE, Integer.MAX_VALUE);
                    token.setValue(aLong);
                    break;
                }
                case ULong: {

                    final long aLong = parseLong(name, value, 0, 0xFFFFFFFFL);
                    token.setValue(aLong);
                    break;
                }
                case LongLong: {

                    final long aLong = parseLong(name, value);
                    token.setValue(aLong);
                    break;
                }
                case Guid: {
                    final UUID uuid = UUID.fromString(value);
                    token.setValue(uuid);
                    break;
                }
                default: {
                    assert false : "Recognized header has neither special-case nor default handling to convert "
                        + "from header String to RNTBD token";
                    break;
                }
            }
        }
    }

    private void initializeNotCommonHeadersIfNeeded() {
        if (this.notCommonHeaders != null) {
            return;
        }
        synchronized (this) {
            if (this.notCommonHeaders == null) {
                this.notCommonHeaders = new HashMap<>();
            }
        }
    }

    private static double parseDouble(final String name, final String value) {

        final double aDouble;

        try {
            aDouble = Double.parseDouble(value);
        } catch (final NumberFormatException error) {
            final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue, name, value);
            throw new IllegalStateException(reason);
        }
        return aDouble;
    }

    private static long parseLong(final String name, final String value) {
        final long aLong;
        try {
            aLong = Long.parseLong(value);
        } catch (final NumberFormatException error) {
            final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue, name, value);
            throw new IllegalStateException(reason);
        }
        return aLong;
    }

    private static long parseLong(final String name, final String value, final long min, final long max) {
        final long aLong = parseLong(name, value);
        if (!(min <= aLong && aLong <= max)) {
            final String reason = String.format(Locale.ROOT, RMResources.InvalidRequestHeaderValue, name, aLong);
            throw new IllegalStateException(reason);
        }
        return aLong;
    }

}
