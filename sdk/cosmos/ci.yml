trigger:
  branches:
    include:
    - master
  paths:
    include:
    - sdk/cosmos/

pr:
  branches:
    include:
      - master
  paths:
    include:
      - sdk/cosmos/

variables:
  pomFile: './sdk/cosmos/pom.xml'
  DefaultOptions: '--batch-mode -Dmaven.wagon.http.pool=false'
  LoggingOptions: '-Dorg.slf4j.simpleLogger.defaultLogLevel=error -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
  ProfileFlag: -e

jobs:
  - template: ../../eng/pipelines/templates/jobs/archetype-sdk-client.yml
    parameters:
      ServiceDirectory: cosmos
      TestMatrix:
        Windows - java8:
          OSVmImage: 'vs2017-win2016'
          JavaVersion: '1.8'
          OSName: Windows
        MacOS - java8:
          OSVmImage: 'macOS-10.13'
          JavaVersion: '1.8'
          OSName: macOS
      PreTestSteps:
        - template: ../steps/install-reporting-tools.yml

  - job: 'Emulator'

    timeoutInMinutes: 120
    continueOnError: false
    strategy:
      matrix:
        Tcp_Integration_Tests_Java8:
          OSVmImage: 'vs2017-win2016'
          JavaVersion: '1.8'
          ProfileFlag: '-Pemulator'
          TestDisplayName: 'Emulator only Integration Tests'
          PROTOCOLS: '["Tcp"]'
          DESIRED_CONSISTENCIES: '["Strong", "Session"]'

        Https_Integration_Tests_Java8:
          OSVmImage: 'vs2017-win2016'
          JavaVersion: '1.8'
          ProfileFlag: '-Pemulator'
          TestDisplayName: 'Emulator only Integration Tests'
          PROTOCOLS: '["Https"]'
          DESIRED_CONSISTENCIES: '["Strong", "Session"]'


        Examples_Integration_Tests_Java8:
          OSVmImage: 'vs2017-win2016'
          JavaVersion: '1.8'
          ProfileFlag: '-Pexamples'
          TestDisplayName: 'Examples Integration Tests'
          PROTOCOLS: '["Https", "Tcp"]'
          DESIRED_CONSISTENCIES: '["Strong", "Session"]'

    pool:
      vmImage: $(OSVmImage)

    steps:
      - powershell: |
         Write-Host "Downloading Cosmos Emulator - $(EmulatorMsiUrl)"
         wget "$(EmulatorMsiUrl)" -outfile "$env:temp\azure-cosmosdb-emulator.msi"
         Write-Host "Finished Downloading Cosmos Emulator - $env:temp\azure-cosmosdb-emulator.msi"
         dir "$env:temp"
        displayName: 'Download Public Cosmos DB Emulator'

      - script: |
         choco install lessmsi
         choco upgrade lessmsi
         mkdir "%TEMP%\Azure Cosmos DB Emulator"
         lessmsi x "%TEMP%\azure-cosmosdb-emulator.msi" "%TEMP%\Azure Cosmos DB Emulator\"
        displayName: 'Install Public Cosmos DB Emulator'

      - powershell: |
         Write-Host "Starting Comsos DB Emulator"
         Start-Process "$env:Temp\Azure Cosmos DB Emulator\SourceDir\Azure Cosmos DB Emulator\CosmosDB.Emulator.exe" "/NoExplorer /NoUI /DisableRateLimiting /PartitionCount=100 /Consistency=Strong" -Verb RunAs
        displayName: 'Run Public Cosmos DB Emulator'

      - powershell: |
         Import-Module "$env:Temp\Azure Cosmos DB Emulator\SourceDir\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"

         Write-Host "Sleeping for 240 seconds"
         sleep 240;

         Write-Host "Cosmos DB Emulator Status:"
         Get-CosmosDbEmulatorStatus

        displayName: 'Check Public Cosmos DB Emulator Status'

      - powershell: |
         $Key = 'C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=='
         $password = ConvertTo-SecureString -String $Key -Force -AsPlainText
         $cert = Get-ChildItem cert:\LocalMachine\My | Where-Object { $_.FriendlyName -eq "DocumentDbEmulatorCertificate" }
         Export-PfxCertificate -Cert $cert -FilePath ".\CosmosDbEmulatorCert.pfx" -Password $password | Out-Null
         $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
         $cert.Import(".\CosmosDbEmulatorCert.pfx", $Key, "DefaultKeySet")
         $cert | Export-Certificate -FilePath "$env:temp\CosmosDbEmulatorCert.cer" -Type CERT
        displayName: 'Export Cosmos DB Emulator Certificate'

      - powershell: |
         # You can write your powershell scripts inline here.
         # You can also pass predefined and custom variables to this scripts using arguments

         cd $env:java_home\jre\lib\security
         cp $env:temp\CosmosDbEmulatorCert.cer .
         keytool -keystore cacerts -importcert -noprompt -trustcacerts -alias CosmosDbEmulatorCert -file CosmosDbEmulatorCert.cer -storepass changeit
        displayName: 'Create Java TrustStore'

      # We `install` separately from running `site:site site:stage` so that the `install` brings in the non-shipping-modules,
      # but we don't include them in the Maven site commands (so that we don't generate reports for the non-shipping modules).
      - template: ../../eng/pipelines/templates/steps/install-reporting-tools.yml

      - task: Maven@3
        displayName: $(TestDisplayName)
        inputs:
          mavenPomFile: $(pomFile)
          goals: 'verify'
          options: '$(ProfileFlag) -Dgpg.skip -DargLine="-DACCOUNT_HOST=https://localhost:8081/"'
          mavenAuthenticateFeed: true
          jdkVersionOption: $(JavaVersion)
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          mergeTestResults: true
          testRunTitle: $(TestDisplayName)
