// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.cosmosdb.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.CloudException;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.management.cosmosdb.CassandraKeyspaceCreateUpdateParameters;
import com.azure.management.cosmosdb.CassandraTableCreateUpdateParameters;
import com.azure.management.cosmosdb.ThroughputSettingsUpdateParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * CassandraResources.
 */
public final class CassandraResourcesInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private CassandraResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private CosmosDBManagementClientImpl client;

    /**
     * Initializes an instance of CassandraResourcesInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public CassandraResourcesInner(CosmosDBManagementClientImpl client) {
        this.service = RestProxy.create(CassandraResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * CosmosDBManagementClientCassandraResources to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CosmosDBManagementClientCassandraResources")
    private interface CassandraResourcesService {
        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<CassandraKeyspaceListResultInner>> listCassandraKeyspaces(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<CassandraKeyspaceGetResultsInner>> getCassandraKeyspace(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createUpdateCassandraKeyspace(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @BodyParam("application/json") CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> deleteCassandraKeyspace(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> getCassandraKeyspaceThroughput(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> updateCassandraKeyspaceThroughput(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @BodyParam("application/json") ThroughputSettingsUpdateParameters updateThroughputParameters, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<CassandraTableListResultInner>> listCassandraTables(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<CassandraTableGetResultsInner>> getCassandraTable(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createUpdateCassandraTable(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @BodyParam("application/json") CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> deleteCassandraTable(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> getCassandraTableThroughput(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> updateCassandraTableThroughput(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @BodyParam("application/json") ThroughputSettingsUpdateParameters updateThroughputParameters, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<CassandraKeyspaceGetResultsInner>> beginCreateUpdateCassandraKeyspace(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @BodyParam("application/json") CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginDeleteCassandraKeyspace(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> beginUpdateCassandraKeyspaceThroughput(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @BodyParam("application/json") ThroughputSettingsUpdateParameters updateThroughputParameters, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<CassandraTableGetResultsInner>> beginCreateUpdateCassandraTable(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @BodyParam("application/json") CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginDeleteCassandraTable(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> beginUpdateCassandraTableThroughput(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName, @PathParam("keyspaceName") String keyspaceName, @PathParam("tableName") String tableName, @BodyParam("application/json") ThroughputSettingsUpdateParameters updateThroughputParameters, @QueryParam("api-version") String apiVersion);
    }

    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CassandraKeyspaceGetResultsInner>> listCassandraKeyspacesSinglePageAsync(String resourceGroupName, String accountName) {
        final String apiVersion = "2019-08-01";
        return service.listCassandraKeyspaces(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, apiVersion).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            null,
            null));
    }

    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CassandraKeyspaceGetResultsInner> listCassandraKeyspacesAsync(String resourceGroupName, String accountName) {
        return new PagedFlux<>(
            () -> listCassandraKeyspacesSinglePageAsync(resourceGroupName, accountName));
    }

    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CassandraKeyspaceGetResultsInner> listCassandraKeyspaces(String resourceGroupName, String accountName) {
        return new PagedIterable<>(listCassandraKeyspacesAsync(resourceGroupName, accountName));
    }

    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CassandraKeyspaceGetResultsInner>> getCassandraKeyspaceWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName) {
        final String apiVersion = "2019-08-01";
        return service.getCassandraKeyspace(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, apiVersion);
    }

    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CassandraKeyspaceGetResultsInner> getCassandraKeyspaceAsync(String resourceGroupName, String accountName, String keyspaceName) {
        return getCassandraKeyspaceWithResponseAsync(resourceGroupName, accountName, keyspaceName)
            .flatMap((SimpleResponse<CassandraKeyspaceGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CassandraKeyspaceGetResultsInner getCassandraKeyspace(String resourceGroupName, String accountName, String keyspaceName) {
        return getCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName).block();
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param createUpdateCassandraKeyspaceParameters Parameters to create and update Cosmos DB Cassandra keyspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createUpdateCassandraKeyspaceWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) {
        final String apiVersion = "2019-08-01";
        return service.createUpdateCassandraKeyspace(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, apiVersion);
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param createUpdateCassandraKeyspaceParameters Parameters to create and update Cosmos DB Cassandra keyspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CassandraKeyspaceGetResultsInner> createUpdateCassandraKeyspaceAsync(String resourceGroupName, String accountName, String keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createUpdateCassandraKeyspaceWithResponseAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters);
        return this.client.<CassandraKeyspaceGetResultsInner, CassandraKeyspaceGetResultsInner>getLroResultAsync(response, this.client.getHttpPipeline(), CassandraKeyspaceGetResultsInner.class, CassandraKeyspaceGetResultsInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param createUpdateCassandraKeyspaceParameters Parameters to create and update Cosmos DB Cassandra keyspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CassandraKeyspaceGetResultsInner createUpdateCassandraKeyspace(String resourceGroupName, String accountName, String keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) {
        return createUpdateCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> deleteCassandraKeyspaceWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName) {
        final String apiVersion = "2019-08-01";
        return service.deleteCassandraKeyspace(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, apiVersion);
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCassandraKeyspaceAsync(String resourceGroupName, String accountName, String keyspaceName) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = deleteCassandraKeyspaceWithResponseAsync(resourceGroupName, accountName, keyspaceName);
        return this.client.<Void, Void>getLroResultAsync(response, this.client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCassandraKeyspace(String resourceGroupName, String accountName, String keyspaceName) {
        deleteCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName).block();
    }

    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> getCassandraKeyspaceThroughputWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName) {
        final String apiVersion = "2019-08-01";
        return service.getCassandraKeyspaceThroughput(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, apiVersion);
    }

    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputSettingsGetResultsInner> getCassandraKeyspaceThroughputAsync(String resourceGroupName, String accountName, String keyspaceName) {
        return getCassandraKeyspaceThroughputWithResponseAsync(resourceGroupName, accountName, keyspaceName)
            .flatMap((SimpleResponse<ThroughputSettingsGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputSettingsGetResultsInner getCassandraKeyspaceThroughput(String resourceGroupName, String accountName, String keyspaceName) {
        return getCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName).block();
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> updateCassandraKeyspaceThroughputWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        final String apiVersion = "2019-08-01";
        return service.updateCassandraKeyspaceThroughput(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, updateThroughputParameters, apiVersion);
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputSettingsGetResultsInner> updateCassandraKeyspaceThroughputAsync(String resourceGroupName, String accountName, String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = updateCassandraKeyspaceThroughputWithResponseAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters);
        return this.client.<ThroughputSettingsGetResultsInner, ThroughputSettingsGetResultsInner>getLroResultAsync(response, this.client.getHttpPipeline(), ThroughputSettingsGetResultsInner.class, ThroughputSettingsGetResultsInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputSettingsGetResultsInner updateCassandraKeyspaceThroughput(String resourceGroupName, String accountName, String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        return updateCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters).block();
    }

    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CassandraTableGetResultsInner>> listCassandraTablesSinglePageAsync(String resourceGroupName, String accountName, String keyspaceName) {
        final String apiVersion = "2019-08-01";
        return service.listCassandraTables(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, apiVersion).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            null,
            null));
    }

    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CassandraTableGetResultsInner> listCassandraTablesAsync(String resourceGroupName, String accountName, String keyspaceName) {
        return new PagedFlux<>(
            () -> listCassandraTablesSinglePageAsync(resourceGroupName, accountName, keyspaceName));
    }

    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CassandraTableGetResultsInner> listCassandraTables(String resourceGroupName, String accountName, String keyspaceName) {
        return new PagedIterable<>(listCassandraTablesAsync(resourceGroupName, accountName, keyspaceName));
    }

    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CassandraTableGetResultsInner>> getCassandraTableWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        final String apiVersion = "2019-08-01";
        return service.getCassandraTable(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
    }

    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CassandraTableGetResultsInner> getCassandraTableAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        return getCassandraTableWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName)
            .flatMap((SimpleResponse<CassandraTableGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CassandraTableGetResultsInner getCassandraTable(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        return getCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName).block();
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra Table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param createUpdateCassandraTableParameters Parameters to create and update Cosmos DB Cassandra table.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createUpdateCassandraTableWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) {
        final String apiVersion = "2019-08-01";
        return service.createUpdateCassandraTable(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, apiVersion);
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra Table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param createUpdateCassandraTableParameters Parameters to create and update Cosmos DB Cassandra table.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CassandraTableGetResultsInner> createUpdateCassandraTableAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createUpdateCassandraTableWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters);
        return this.client.<CassandraTableGetResultsInner, CassandraTableGetResultsInner>getLroResultAsync(response, this.client.getHttpPipeline(), CassandraTableGetResultsInner.class, CassandraTableGetResultsInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra Table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param createUpdateCassandraTableParameters Parameters to create and update Cosmos DB Cassandra table.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CassandraTableGetResultsInner createUpdateCassandraTable(String resourceGroupName, String accountName, String keyspaceName, String tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) {
        return createUpdateCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> deleteCassandraTableWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        final String apiVersion = "2019-08-01";
        return service.deleteCassandraTable(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCassandraTableAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = deleteCassandraTableWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName);
        return this.client.<Void, Void>getLroResultAsync(response, this.client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCassandraTable(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        deleteCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName).block();
    }

    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> getCassandraTableThroughputWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        final String apiVersion = "2019-08-01";
        return service.getCassandraTableThroughput(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
    }

    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputSettingsGetResultsInner> getCassandraTableThroughputAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        return getCassandraTableThroughputWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName)
            .flatMap((SimpleResponse<ThroughputSettingsGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputSettingsGetResultsInner getCassandraTableThroughput(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        return getCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName).block();
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> updateCassandraTableThroughputWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        final String apiVersion = "2019-08-01";
        return service.updateCassandraTableThroughput(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, apiVersion);
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputSettingsGetResultsInner> updateCassandraTableThroughputAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = updateCassandraTableThroughputWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters);
        return this.client.<ThroughputSettingsGetResultsInner, ThroughputSettingsGetResultsInner>getLroResultAsync(response, this.client.getHttpPipeline(), ThroughputSettingsGetResultsInner.class, ThroughputSettingsGetResultsInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputSettingsGetResultsInner updateCassandraTableThroughput(String resourceGroupName, String accountName, String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        return updateCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters).block();
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param createUpdateCassandraKeyspaceParameters Parameters to create and update Cosmos DB Cassandra keyspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CassandraKeyspaceGetResultsInner>> beginCreateUpdateCassandraKeyspaceWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) {
        final String apiVersion = "2019-08-01";
        return service.beginCreateUpdateCassandraKeyspace(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, apiVersion);
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param createUpdateCassandraKeyspaceParameters Parameters to create and update Cosmos DB Cassandra keyspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CassandraKeyspaceGetResultsInner> beginCreateUpdateCassandraKeyspaceAsync(String resourceGroupName, String accountName, String keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) {
        return beginCreateUpdateCassandraKeyspaceWithResponseAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters)
            .flatMap((SimpleResponse<CassandraKeyspaceGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param createUpdateCassandraKeyspaceParameters Parameters to create and update Cosmos DB Cassandra keyspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CassandraKeyspaceGetResultsInner beginCreateUpdateCassandraKeyspace(String resourceGroupName, String accountName, String keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) {
        return beginCreateUpdateCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteCassandraKeyspaceWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName) {
        final String apiVersion = "2019-08-01";
        return service.beginDeleteCassandraKeyspace(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, apiVersion);
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteCassandraKeyspaceAsync(String resourceGroupName, String accountName, String keyspaceName) {
        return beginDeleteCassandraKeyspaceWithResponseAsync(resourceGroupName, accountName, keyspaceName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteCassandraKeyspace(String resourceGroupName, String accountName, String keyspaceName) {
        beginDeleteCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName).block();
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> beginUpdateCassandraKeyspaceThroughputWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        final String apiVersion = "2019-08-01";
        return service.beginUpdateCassandraKeyspaceThroughput(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, updateThroughputParameters, apiVersion);
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputSettingsGetResultsInner> beginUpdateCassandraKeyspaceThroughputAsync(String resourceGroupName, String accountName, String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        return beginUpdateCassandraKeyspaceThroughputWithResponseAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters)
            .flatMap((SimpleResponse<ThroughputSettingsGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputSettingsGetResultsInner beginUpdateCassandraKeyspaceThroughput(String resourceGroupName, String accountName, String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        return beginUpdateCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters).block();
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra Table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param createUpdateCassandraTableParameters Parameters to create and update Cosmos DB Cassandra table.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CassandraTableGetResultsInner>> beginCreateUpdateCassandraTableWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) {
        final String apiVersion = "2019-08-01";
        return service.beginCreateUpdateCassandraTable(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, apiVersion);
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra Table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param createUpdateCassandraTableParameters Parameters to create and update Cosmos DB Cassandra table.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CassandraTableGetResultsInner> beginCreateUpdateCassandraTableAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) {
        return beginCreateUpdateCassandraTableWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters)
            .flatMap((SimpleResponse<CassandraTableGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra Table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param createUpdateCassandraTableParameters Parameters to create and update Cosmos DB Cassandra table.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CassandraTableGetResultsInner beginCreateUpdateCassandraTable(String resourceGroupName, String accountName, String keyspaceName, String tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) {
        return beginCreateUpdateCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteCassandraTableWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        final String apiVersion = "2019-08-01";
        return service.beginDeleteCassandraTable(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteCassandraTableAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        return beginDeleteCassandraTableWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteCassandraTable(String resourceGroupName, String accountName, String keyspaceName, String tableName) {
        beginDeleteCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName).block();
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ThroughputSettingsGetResultsInner>> beginUpdateCassandraTableThroughputWithResponseAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        final String apiVersion = "2019-08-01";
        return service.beginUpdateCassandraTableThroughput(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, apiVersion);
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputSettingsGetResultsInner> beginUpdateCassandraTableThroughputAsync(String resourceGroupName, String accountName, String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        return beginUpdateCassandraTableThroughputWithResponseAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters)
            .flatMap((SimpleResponse<ThroughputSettingsGetResultsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table.
     * 
     * @param resourceGroupName 
     * @param accountName 
     * @param keyspaceName 
     * @param tableName 
     * @param updateThroughputParameters Parameters to update Cosmos DB resource throughput.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputSettingsGetResultsInner beginUpdateCassandraTableThroughput(String resourceGroupName, String accountName, String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        return beginUpdateCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters).block();
    }
}
