/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation;

import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.SqlRoleAssignmentGetResults;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.SqlRoleAssignmentCreateUpdateParameters;
import rx.functions.Func1;

class SqlRoleAssignmentGetResultsImpl extends CreatableUpdatableImpl<SqlRoleAssignmentGetResults, SqlRoleAssignmentGetResultsInner, SqlRoleAssignmentGetResultsImpl> implements SqlRoleAssignmentGetResults, SqlRoleAssignmentGetResults.Definition, SqlRoleAssignmentGetResults.Update {
    private final CosmosDBManager manager;
    private String roleAssignmentId;
    private String resourceGroupName;
    private String accountName;
    private SqlRoleAssignmentCreateUpdateParameters createOrUpdateParameter;

    SqlRoleAssignmentGetResultsImpl(String name, CosmosDBManager manager) {
        super(name, new SqlRoleAssignmentGetResultsInner());
        this.manager = manager;
        // Set resource name
        this.roleAssignmentId = name;
        //
        this.createOrUpdateParameter = new SqlRoleAssignmentCreateUpdateParameters();
    }

    SqlRoleAssignmentGetResultsImpl(SqlRoleAssignmentGetResultsInner inner, CosmosDBManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.roleAssignmentId = inner.name();
        // set resource ancestor and positional variables
        this.roleAssignmentId = IdParsingUtils.getValueFromIdByName(inner.id(), "sqlRoleAssignments");
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "databaseAccounts");
        //
        this.createOrUpdateParameter = new SqlRoleAssignmentCreateUpdateParameters();
    }

    @Override
    public CosmosDBManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SqlRoleAssignmentGetResults> createResourceAsync() {
        SqlResourcesInner client = this.manager().inner().sqlResources();
        return client.createUpdateSqlRoleAssignmentAsync(this.roleAssignmentId, this.resourceGroupName, this.accountName, this.createOrUpdateParameter)
            .map(new Func1<SqlRoleAssignmentGetResultsInner, SqlRoleAssignmentGetResultsInner>() {
               @Override
               public SqlRoleAssignmentGetResultsInner call(SqlRoleAssignmentGetResultsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SqlRoleAssignmentGetResults> updateResourceAsync() {
        SqlResourcesInner client = this.manager().inner().sqlResources();
        return client.createUpdateSqlRoleAssignmentAsync(this.roleAssignmentId, this.resourceGroupName, this.accountName, this.createOrUpdateParameter)
            .map(new Func1<SqlRoleAssignmentGetResultsInner, SqlRoleAssignmentGetResultsInner>() {
               @Override
               public SqlRoleAssignmentGetResultsInner call(SqlRoleAssignmentGetResultsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SqlRoleAssignmentGetResultsInner> getInnerAsync() {
        SqlResourcesInner client = this.manager().inner().sqlResources();
        return client.getSqlRoleAssignmentAsync(this.roleAssignmentId, this.resourceGroupName, this.accountName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new SqlRoleAssignmentCreateUpdateParameters();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String principalId() {
        return this.inner().principalId();
    }

    @Override
    public String roleDefinitionId() {
        return this.inner().roleDefinitionId();
    }

    @Override
    public String scope() {
        return this.inner().scope();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SqlRoleAssignmentGetResultsImpl withExistingDatabaseAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public SqlRoleAssignmentGetResultsImpl withPrincipalId(String principalId) {
        this.createOrUpdateParameter.withPrincipalId(principalId);
        return this;
    }

    @Override
    public SqlRoleAssignmentGetResultsImpl withRoleDefinitionId(String roleDefinitionId) {
        this.createOrUpdateParameter.withRoleDefinitionId(roleDefinitionId);
        return this;
    }

    @Override
    public SqlRoleAssignmentGetResultsImpl withScope(String scope) {
        this.createOrUpdateParameter.withScope(scope);
        return this;
    }

}
