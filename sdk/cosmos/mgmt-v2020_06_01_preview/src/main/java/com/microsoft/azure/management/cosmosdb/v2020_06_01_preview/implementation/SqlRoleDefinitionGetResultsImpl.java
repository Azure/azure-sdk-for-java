/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation;

import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.SqlRoleDefinitionGetResults;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.SqlRoleDefinitionCreateUpdateParameters;
import java.util.List;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.Permission;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RoleDefinitionType;
import rx.functions.Func1;

class SqlRoleDefinitionGetResultsImpl extends CreatableUpdatableImpl<SqlRoleDefinitionGetResults, SqlRoleDefinitionGetResultsInner, SqlRoleDefinitionGetResultsImpl> implements SqlRoleDefinitionGetResults, SqlRoleDefinitionGetResults.Definition, SqlRoleDefinitionGetResults.Update {
    private final CosmosDBManager manager;
    private String roleDefinitionId;
    private String resourceGroupName;
    private String accountName;
    private SqlRoleDefinitionCreateUpdateParameters createOrUpdateParameter;

    SqlRoleDefinitionGetResultsImpl(String name, CosmosDBManager manager) {
        super(name, new SqlRoleDefinitionGetResultsInner());
        this.manager = manager;
        // Set resource name
        this.roleDefinitionId = name;
        //
        this.createOrUpdateParameter = new SqlRoleDefinitionCreateUpdateParameters();
    }

    SqlRoleDefinitionGetResultsImpl(SqlRoleDefinitionGetResultsInner inner, CosmosDBManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.roleDefinitionId = inner.name();
        // set resource ancestor and positional variables
        this.roleDefinitionId = IdParsingUtils.getValueFromIdByName(inner.id(), "sqlRoleDefinitions");
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "databaseAccounts");
        //
        this.createOrUpdateParameter = new SqlRoleDefinitionCreateUpdateParameters();
    }

    @Override
    public CosmosDBManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SqlRoleDefinitionGetResults> createResourceAsync() {
        SqlResourcesInner client = this.manager().inner().sqlResources();
        return client.createUpdateSqlRoleDefinitionAsync(this.roleDefinitionId, this.resourceGroupName, this.accountName, this.createOrUpdateParameter)
            .map(new Func1<SqlRoleDefinitionGetResultsInner, SqlRoleDefinitionGetResultsInner>() {
               @Override
               public SqlRoleDefinitionGetResultsInner call(SqlRoleDefinitionGetResultsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SqlRoleDefinitionGetResults> updateResourceAsync() {
        SqlResourcesInner client = this.manager().inner().sqlResources();
        return client.createUpdateSqlRoleDefinitionAsync(this.roleDefinitionId, this.resourceGroupName, this.accountName, this.createOrUpdateParameter)
            .map(new Func1<SqlRoleDefinitionGetResultsInner, SqlRoleDefinitionGetResultsInner>() {
               @Override
               public SqlRoleDefinitionGetResultsInner call(SqlRoleDefinitionGetResultsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SqlRoleDefinitionGetResultsInner> getInnerAsync() {
        SqlResourcesInner client = this.manager().inner().sqlResources();
        return client.getSqlRoleDefinitionAsync(this.roleDefinitionId, this.resourceGroupName, this.accountName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new SqlRoleDefinitionCreateUpdateParameters();
    }

    @Override
    public List<String> assignableScopes() {
        return this.inner().assignableScopes();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<Permission> permissions() {
        return this.inner().permissions();
    }

    @Override
    public String roleName() {
        return this.inner().roleName();
    }

    @Override
    public RoleDefinitionType sqlRoleDefinitionGetResultsType() {
        return this.inner().sqlRoleDefinitionGetResultsType();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SqlRoleDefinitionGetResultsImpl withExistingDatabaseAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public SqlRoleDefinitionGetResultsImpl withAssignableScopes(List<String> assignableScopes) {
        this.createOrUpdateParameter.withAssignableScopes(assignableScopes);
        return this;
    }

    @Override
    public SqlRoleDefinitionGetResultsImpl withPermissions(List<Permission> permissions) {
        this.createOrUpdateParameter.withPermissions(permissions);
        return this;
    }

    @Override
    public SqlRoleDefinitionGetResultsImpl withRoleName(String roleName) {
        this.createOrUpdateParameter.withRoleName(roleName);
        return this;
    }

    @Override
    public SqlRoleDefinitionGetResultsImpl withType(RoleDefinitionType type) {
        this.createOrUpdateParameter.withType(type);
        return this;
    }

}
