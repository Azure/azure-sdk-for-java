/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RestorableSqlDatabases;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RestorableSqlDatabaseGetResult;

class RestorableSqlDatabasesImpl extends WrapperImpl<RestorableSqlDatabasesInner> implements RestorableSqlDatabases {
    private final CosmosDBManager manager;

    RestorableSqlDatabasesImpl(CosmosDBManager manager) {
        super(manager.inner().restorableSqlDatabases());
        this.manager = manager;
    }

    public CosmosDBManager manager() {
        return this.manager;
    }

    private RestorableSqlDatabaseGetResultImpl wrapModel(RestorableSqlDatabaseGetResultInner inner) {
        return  new RestorableSqlDatabaseGetResultImpl(inner, manager());
    }

    @Override
    public Observable<RestorableSqlDatabaseGetResult> listAsync(String location, String instanceId) {
        RestorableSqlDatabasesInner client = this.inner();
        return client.listAsync(location, instanceId)
        .flatMap(new Func1<List<RestorableSqlDatabaseGetResultInner>, Observable<RestorableSqlDatabaseGetResultInner>>() {
            @Override
            public Observable<RestorableSqlDatabaseGetResultInner> call(List<RestorableSqlDatabaseGetResultInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RestorableSqlDatabaseGetResultInner, RestorableSqlDatabaseGetResult>() {
            @Override
            public RestorableSqlDatabaseGetResult call(RestorableSqlDatabaseGetResultInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
