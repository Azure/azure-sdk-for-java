/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation.SqlRoleAssignmentGetResultsInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation.CosmosDBManager;

/**
 * Type representing SqlRoleAssignmentGetResults.
 */
public interface SqlRoleAssignmentGetResults extends HasInner<SqlRoleAssignmentGetResultsInner>, Indexable, Refreshable<SqlRoleAssignmentGetResults>, Updatable<SqlRoleAssignmentGetResults.Update>, HasManager<CosmosDBManager> {
    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the principalId value.
     */
    String principalId();

    /**
     * @return the roleDefinitionId value.
     */
    String roleDefinitionId();

    /**
     * @return the scope value.
     */
    String scope();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the SqlRoleAssignmentGetResults definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDatabaseAccount, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of SqlRoleAssignmentGetResults definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a SqlRoleAssignmentGetResults definition.
         */
        interface Blank extends WithDatabaseAccount {
        }

        /**
         * The stage of the sqlroleassignmentgetresults definition allowing to specify DatabaseAccount.
         */
        interface WithDatabaseAccount {
           /**
            * Specifies resourceGroupName, accountName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param accountName Cosmos DB database account name
            * @return the next definition stage
            */
            WithCreate withExistingDatabaseAccount(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the sqlroleassignmentgetresults definition allowing to specify PrincipalId.
         */
        interface WithPrincipalId {
            /**
             * Specifies principalId.
             * @param principalId The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription
             * @return the next definition stage
             */
            WithCreate withPrincipalId(String principalId);
        }

        /**
         * The stage of the sqlroleassignmentgetresults definition allowing to specify RoleDefinitionId.
         */
        interface WithRoleDefinitionId {
            /**
             * Specifies roleDefinitionId.
             * @param roleDefinitionId The unique identifier for the associated Role Definition
             * @return the next definition stage
             */
            WithCreate withRoleDefinitionId(String roleDefinitionId);
        }

        /**
         * The stage of the sqlroleassignmentgetresults definition allowing to specify Scope.
         */
        interface WithScope {
            /**
             * Specifies scope.
             * @param scope The data plane resource path for which access is being granted through this Role Assignment
             * @return the next definition stage
             */
            WithCreate withScope(String scope);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<SqlRoleAssignmentGetResults>, DefinitionStages.WithPrincipalId, DefinitionStages.WithRoleDefinitionId, DefinitionStages.WithScope {
        }
    }
    /**
     * The template for a SqlRoleAssignmentGetResults update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<SqlRoleAssignmentGetResults>, UpdateStages.WithPrincipalId, UpdateStages.WithRoleDefinitionId, UpdateStages.WithScope {
    }

    /**
     * Grouping of SqlRoleAssignmentGetResults update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the sqlroleassignmentgetresults update allowing to specify PrincipalId.
         */
        interface WithPrincipalId {
            /**
             * Specifies principalId.
             * @param principalId The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription
             * @return the next update stage
             */
            Update withPrincipalId(String principalId);
        }

        /**
         * The stage of the sqlroleassignmentgetresults update allowing to specify RoleDefinitionId.
         */
        interface WithRoleDefinitionId {
            /**
             * Specifies roleDefinitionId.
             * @param roleDefinitionId The unique identifier for the associated Role Definition
             * @return the next update stage
             */
            Update withRoleDefinitionId(String roleDefinitionId);
        }

        /**
         * The stage of the sqlroleassignmentgetresults update allowing to specify Scope.
         */
        interface WithScope {
            /**
             * Specifies scope.
             * @param scope The data plane resource path for which access is being granted through this Role Assignment
             * @return the next update stage
             */
            Update withScope(String scope);
        }

    }
}
