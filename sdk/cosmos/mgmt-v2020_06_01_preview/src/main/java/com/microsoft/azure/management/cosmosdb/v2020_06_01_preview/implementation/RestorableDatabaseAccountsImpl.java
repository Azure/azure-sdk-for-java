/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RestorableDatabaseAccounts;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RestorableDatabaseAccountGetResult;

class RestorableDatabaseAccountsImpl extends WrapperImpl<RestorableDatabaseAccountsInner> implements RestorableDatabaseAccounts {
    private final CosmosDBManager manager;

    RestorableDatabaseAccountsImpl(CosmosDBManager manager) {
        super(manager.inner().restorableDatabaseAccounts());
        this.manager = manager;
    }

    public CosmosDBManager manager() {
        return this.manager;
    }

    private RestorableDatabaseAccountGetResultImpl wrapModel(RestorableDatabaseAccountGetResultInner inner) {
        return  new RestorableDatabaseAccountGetResultImpl(inner, manager());
    }

    @Override
    public Observable<RestorableDatabaseAccountGetResult> listAsync() {
        RestorableDatabaseAccountsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<RestorableDatabaseAccountGetResultInner>, Observable<RestorableDatabaseAccountGetResultInner>>() {
            @Override
            public Observable<RestorableDatabaseAccountGetResultInner> call(Page<RestorableDatabaseAccountGetResultInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<RestorableDatabaseAccountGetResultInner, RestorableDatabaseAccountGetResult>() {
            @Override
            public RestorableDatabaseAccountGetResult call(RestorableDatabaseAccountGetResultInner inner) {
                return new RestorableDatabaseAccountGetResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RestorableDatabaseAccountGetResult> listByLocationAsync(String location) {
        RestorableDatabaseAccountsInner client = this.inner();
        return client.listByLocationAsync(location)
        .flatMap(new Func1<List<RestorableDatabaseAccountGetResultInner>, Observable<RestorableDatabaseAccountGetResultInner>>() {
            @Override
            public Observable<RestorableDatabaseAccountGetResultInner> call(List<RestorableDatabaseAccountGetResultInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RestorableDatabaseAccountGetResultInner, RestorableDatabaseAccountGetResult>() {
            @Override
            public RestorableDatabaseAccountGetResult call(RestorableDatabaseAccountGetResultInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RestorableDatabaseAccountGetResult> getByLocationAsync(String location, String instanceId) {
        RestorableDatabaseAccountsInner client = this.inner();
        return client.getByLocationAsync(location, instanceId)
        .flatMap(new Func1<RestorableDatabaseAccountGetResultInner, Observable<RestorableDatabaseAccountGetResult>>() {
            @Override
            public Observable<RestorableDatabaseAccountGetResult> call(RestorableDatabaseAccountGetResultInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RestorableDatabaseAccountGetResult)wrapModel(inner));
                }
            }
       });
    }

}
