/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation.SqlRoleDefinitionGetResultsInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation.CosmosDBManager;
import java.util.List;

/**
 * Type representing SqlRoleDefinitionGetResults.
 */
public interface SqlRoleDefinitionGetResults extends HasInner<SqlRoleDefinitionGetResultsInner>, Indexable, Refreshable<SqlRoleDefinitionGetResults>, Updatable<SqlRoleDefinitionGetResults.Update>, HasManager<CosmosDBManager> {
    /**
     * @return the assignableScopes value.
     */
    List<String> assignableScopes();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the permissions value.
     */
    List<Permission> permissions();

    /**
     * @return the roleName value.
     */
    String roleName();

    /**
     * @return the sqlRoleDefinitionGetResultsType value.
     */
    RoleDefinitionType sqlRoleDefinitionGetResultsType();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the SqlRoleDefinitionGetResults definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDatabaseAccount, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of SqlRoleDefinitionGetResults definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a SqlRoleDefinitionGetResults definition.
         */
        interface Blank extends WithDatabaseAccount {
        }

        /**
         * The stage of the sqlroledefinitiongetresults definition allowing to specify DatabaseAccount.
         */
        interface WithDatabaseAccount {
           /**
            * Specifies resourceGroupName, accountName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param accountName Cosmos DB database account name
            * @return the next definition stage
            */
            WithCreate withExistingDatabaseAccount(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the sqlroledefinitiongetresults definition allowing to specify AssignableScopes.
         */
        interface WithAssignableScopes {
            /**
             * Specifies assignableScopes.
             * @param assignableScopes A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist
             * @return the next definition stage
             */
            WithCreate withAssignableScopes(List<String> assignableScopes);
        }

        /**
         * The stage of the sqlroledefinitiongetresults definition allowing to specify Permissions.
         */
        interface WithPermissions {
            /**
             * Specifies permissions.
             * @param permissions The set of operations allowed through this Role Definition
             * @return the next definition stage
             */
            WithCreate withPermissions(List<Permission> permissions);
        }

        /**
         * The stage of the sqlroledefinitiongetresults definition allowing to specify RoleName.
         */
        interface WithRoleName {
            /**
             * Specifies roleName.
             * @param roleName A user-friendly name for the Role Definition. Must be unique for the database account
             * @return the next definition stage
             */
            WithCreate withRoleName(String roleName);
        }

        /**
         * The stage of the sqlroledefinitiongetresults definition allowing to specify Type.
         */
        interface WithType {
            /**
             * Specifies type.
             * @param type Indicates whether the Role Definition was built-in or user created. Possible values include: 'BuiltInRole', 'CustomRole'
             * @return the next definition stage
             */
            WithCreate withType(RoleDefinitionType type);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<SqlRoleDefinitionGetResults>, DefinitionStages.WithAssignableScopes, DefinitionStages.WithPermissions, DefinitionStages.WithRoleName, DefinitionStages.WithType {
        }
    }
    /**
     * The template for a SqlRoleDefinitionGetResults update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<SqlRoleDefinitionGetResults>, UpdateStages.WithAssignableScopes, UpdateStages.WithPermissions, UpdateStages.WithRoleName, UpdateStages.WithType {
    }

    /**
     * Grouping of SqlRoleDefinitionGetResults update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the sqlroledefinitiongetresults update allowing to specify AssignableScopes.
         */
        interface WithAssignableScopes {
            /**
             * Specifies assignableScopes.
             * @param assignableScopes A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist
             * @return the next update stage
             */
            Update withAssignableScopes(List<String> assignableScopes);
        }

        /**
         * The stage of the sqlroledefinitiongetresults update allowing to specify Permissions.
         */
        interface WithPermissions {
            /**
             * Specifies permissions.
             * @param permissions The set of operations allowed through this Role Definition
             * @return the next update stage
             */
            Update withPermissions(List<Permission> permissions);
        }

        /**
         * The stage of the sqlroledefinitiongetresults update allowing to specify RoleName.
         */
        interface WithRoleName {
            /**
             * Specifies roleName.
             * @param roleName A user-friendly name for the Role Definition. Must be unique for the database account
             * @return the next update stage
             */
            Update withRoleName(String roleName);
        }

        /**
         * The stage of the sqlroledefinitiongetresults update allowing to specify Type.
         */
        interface WithType {
            /**
             * Specifies type.
             * @param type Indicates whether the Role Definition was built-in or user created. Possible values include: 'BuiltInRole', 'CustomRole'
             * @return the next update stage
             */
            Update withType(RoleDefinitionType type);
        }

    }
}
