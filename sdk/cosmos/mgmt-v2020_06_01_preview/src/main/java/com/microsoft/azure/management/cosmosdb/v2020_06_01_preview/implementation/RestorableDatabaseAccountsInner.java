/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.DefaultErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RestorableDatabaseAccounts.
 */
public class RestorableDatabaseAccountsInner {
    /** The Retrofit service to perform REST calls. */
    private RestorableDatabaseAccountsService service;
    /** The service client containing this operation class. */
    private CosmosDBManagementClientImpl client;

    /**
     * Initializes an instance of RestorableDatabaseAccountsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RestorableDatabaseAccountsInner(Retrofit retrofit, CosmosDBManagementClientImpl client) {
        this.service = retrofit.create(RestorableDatabaseAccountsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RestorableDatabaseAccounts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RestorableDatabaseAccountsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RestorableDatabaseAccounts listByLocation" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts")
        Observable<Response<ResponseBody>> listByLocation(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RestorableDatabaseAccounts list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.RestorableDatabaseAccounts getByLocation" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}")
        Observable<Response<ResponseBody>> getByLocation(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Path("instanceId") String instanceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in a region.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RestorableDatabaseAccountGetResultInner&gt; object if successful.
     */
    public List<RestorableDatabaseAccountGetResultInner> listByLocation(String location) {
        return listByLocationWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in a region.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RestorableDatabaseAccountGetResultInner>> listByLocationAsync(String location, final ServiceCallback<List<RestorableDatabaseAccountGetResultInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByLocationWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in a region.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RestorableDatabaseAccountGetResultInner&gt; object
     */
    public Observable<List<RestorableDatabaseAccountGetResultInner>> listByLocationAsync(String location) {
        return listByLocationWithServiceResponseAsync(location).map(new Func1<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>, List<RestorableDatabaseAccountGetResultInner>>() {
            @Override
            public List<RestorableDatabaseAccountGetResultInner> call(ServiceResponse<List<RestorableDatabaseAccountGetResultInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in a region.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RestorableDatabaseAccountGetResultInner&gt; object
     */
    public Observable<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>> listByLocationWithServiceResponseAsync(String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01-preview";
        return service.listByLocation(this.client.subscriptionId(), location, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RestorableDatabaseAccountGetResultInner>> result = listByLocationDelegate(response);
                        List<RestorableDatabaseAccountGetResultInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<RestorableDatabaseAccountGetResultInner>> clientResponse = new ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RestorableDatabaseAccountGetResultInner>> listByLocationDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RestorableDatabaseAccountGetResultInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RestorableDatabaseAccountGetResultInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription.
     *
     * @return the PagedList<RestorableDatabaseAccountGetResultInner> object if successful.
     */
    public PagedList<RestorableDatabaseAccountGetResultInner> list() {
        PageImpl<RestorableDatabaseAccountGetResultInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<RestorableDatabaseAccountGetResultInner>(page) {
            @Override
            public Page<RestorableDatabaseAccountGetResultInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RestorableDatabaseAccountGetResultInner>> listAsync(final ServiceCallback<List<RestorableDatabaseAccountGetResultInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription.
     *
     * @return the observable to the List&lt;RestorableDatabaseAccountGetResultInner&gt; object
     */
    public Observable<Page<RestorableDatabaseAccountGetResultInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>, Page<RestorableDatabaseAccountGetResultInner>>() {
            @Override
            public Page<RestorableDatabaseAccountGetResultInner> call(ServiceResponse<List<RestorableDatabaseAccountGetResultInner>> response) {
                PageImpl<RestorableDatabaseAccountGetResultInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription.
     *
     * @return the observable to the List&lt;RestorableDatabaseAccountGetResultInner&gt; object
     */
    public Observable<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01-preview";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RestorableDatabaseAccountGetResultInner>> result = listDelegate(response);
                        List<RestorableDatabaseAccountGetResultInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<RestorableDatabaseAccountGetResultInner>> clientResponse = new ServiceResponse<List<RestorableDatabaseAccountGetResultInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RestorableDatabaseAccountGetResultInner>> listDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RestorableDatabaseAccountGetResultInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RestorableDatabaseAccountGetResultInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB restorable database account.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RestorableDatabaseAccountGetResultInner object if successful.
     */
    public RestorableDatabaseAccountGetResultInner getByLocation(String location, String instanceId) {
        return getByLocationWithServiceResponseAsync(location, instanceId).toBlocking().single().body();
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB restorable database account.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RestorableDatabaseAccountGetResultInner> getByLocationAsync(String location, String instanceId, final ServiceCallback<RestorableDatabaseAccountGetResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByLocationWithServiceResponseAsync(location, instanceId), serviceCallback);
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB restorable database account.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RestorableDatabaseAccountGetResultInner object
     */
    public Observable<RestorableDatabaseAccountGetResultInner> getByLocationAsync(String location, String instanceId) {
        return getByLocationWithServiceResponseAsync(location, instanceId).map(new Func1<ServiceResponse<RestorableDatabaseAccountGetResultInner>, RestorableDatabaseAccountGetResultInner>() {
            @Override
            public RestorableDatabaseAccountGetResultInner call(ServiceResponse<RestorableDatabaseAccountGetResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB restorable database account.
     *
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RestorableDatabaseAccountGetResultInner object
     */
    public Observable<ServiceResponse<RestorableDatabaseAccountGetResultInner>> getByLocationWithServiceResponseAsync(String location, String instanceId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (instanceId == null) {
            throw new IllegalArgumentException("Parameter instanceId is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01-preview";
        return service.getByLocation(this.client.subscriptionId(), location, instanceId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RestorableDatabaseAccountGetResultInner>>>() {
                @Override
                public Observable<ServiceResponse<RestorableDatabaseAccountGetResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RestorableDatabaseAccountGetResultInner> clientResponse = getByLocationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RestorableDatabaseAccountGetResultInner> getByLocationDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RestorableDatabaseAccountGetResultInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RestorableDatabaseAccountGetResultInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

}
