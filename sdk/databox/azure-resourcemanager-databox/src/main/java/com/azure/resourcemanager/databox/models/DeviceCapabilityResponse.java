// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Device capabilities for given sku in a region.
 */
@Immutable
public final class DeviceCapabilityResponse implements JsonSerializable<DeviceCapabilityResponse> {
    /*
     * List of device capabilities available for a given region and a given sku
     */
    private List<DeviceCapabilityDetails> deviceCapabilityDetails;

    /**
     * Creates an instance of DeviceCapabilityResponse class.
     */
    public DeviceCapabilityResponse() {
    }

    /**
     * Get the deviceCapabilityDetails property: List of device capabilities available for a given region and a given
     * sku.
     * 
     * @return the deviceCapabilityDetails value.
     */
    public List<DeviceCapabilityDetails> deviceCapabilityDetails() {
        return this.deviceCapabilityDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deviceCapabilityDetails() != null) {
            deviceCapabilityDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceCapabilityResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceCapabilityResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceCapabilityResponse.
     */
    public static DeviceCapabilityResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceCapabilityResponse deserializedDeviceCapabilityResponse = new DeviceCapabilityResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceCapabilityDetails".equals(fieldName)) {
                    List<DeviceCapabilityDetails> deviceCapabilityDetails
                        = reader.readArray(reader1 -> DeviceCapabilityDetails.fromJson(reader1));
                    deserializedDeviceCapabilityResponse.deviceCapabilityDetails = deviceCapabilityDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceCapabilityResponse;
        });
    }
}
