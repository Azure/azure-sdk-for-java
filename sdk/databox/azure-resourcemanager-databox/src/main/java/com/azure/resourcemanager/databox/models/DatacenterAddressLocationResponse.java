// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Datacenter address for given storage location.
 */
@Immutable
public final class DatacenterAddressLocationResponse extends DatacenterAddressResponse {
    /*
     * Data center address type
     */
    private DatacenterAddressType datacenterAddressType = DatacenterAddressType.DATACENTER_ADDRESS_LOCATION;

    /*
     * Contact person name
     */
    private String contactPersonName;

    /*
     * Company name
     */
    private String company;

    /*
     * Street address line 1
     */
    private String street1;

    /*
     * Street address line 2
     */
    private String street2;

    /*
     * Street address line 3
     */
    private String street3;

    /*
     * City name
     */
    private String city;

    /*
     * name of the state
     */
    private String state;

    /*
     * Zip code
     */
    private String zip;

    /*
     * name of the country
     */
    private String country;

    /*
     * Phone number
     */
    private String phone;

    /*
     * Phone extension
     */
    private String phoneExtension;

    /*
     * Address type
     */
    private String addressType;

    /*
     * Special instruction for shipping
     */
    private String additionalShippingInformation;

    /**
     * Creates an instance of DatacenterAddressLocationResponse class.
     */
    public DatacenterAddressLocationResponse() {
    }

    /**
     * Get the datacenterAddressType property: Data center address type.
     * 
     * @return the datacenterAddressType value.
     */
    @Override
    public DatacenterAddressType datacenterAddressType() {
        return this.datacenterAddressType;
    }

    /**
     * Get the contactPersonName property: Contact person name.
     * 
     * @return the contactPersonName value.
     */
    public String contactPersonName() {
        return this.contactPersonName;
    }

    /**
     * Get the company property: Company name.
     * 
     * @return the company value.
     */
    public String company() {
        return this.company;
    }

    /**
     * Get the street1 property: Street address line 1.
     * 
     * @return the street1 value.
     */
    public String street1() {
        return this.street1;
    }

    /**
     * Get the street2 property: Street address line 2.
     * 
     * @return the street2 value.
     */
    public String street2() {
        return this.street2;
    }

    /**
     * Get the street3 property: Street address line 3.
     * 
     * @return the street3 value.
     */
    public String street3() {
        return this.street3;
    }

    /**
     * Get the city property: City name.
     * 
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Get the state property: name of the state.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the zip property: Zip code.
     * 
     * @return the zip value.
     */
    public String zip() {
        return this.zip;
    }

    /**
     * Get the country property: name of the country.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Get the phone property: Phone number.
     * 
     * @return the phone value.
     */
    public String phone() {
        return this.phone;
    }

    /**
     * Get the phoneExtension property: Phone extension.
     * 
     * @return the phoneExtension value.
     */
    public String phoneExtension() {
        return this.phoneExtension;
    }

    /**
     * Get the addressType property: Address type.
     * 
     * @return the addressType value.
     */
    public String addressType() {
        return this.addressType;
    }

    /**
     * Get the additionalShippingInformation property: Special instruction for shipping.
     * 
     * @return the additionalShippingInformation value.
     */
    public String additionalShippingInformation() {
        return this.additionalShippingInformation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("datacenterAddressType",
            this.datacenterAddressType == null ? null : this.datacenterAddressType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatacenterAddressLocationResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatacenterAddressLocationResponse if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatacenterAddressLocationResponse.
     */
    public static DatacenterAddressLocationResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatacenterAddressLocationResponse deserializedDatacenterAddressLocationResponse
                = new DatacenterAddressLocationResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("supportedCarriersForReturnShipment".equals(fieldName)) {
                    List<String> supportedCarriersForReturnShipment = reader.readArray(reader1 -> reader1.getString());
                    deserializedDatacenterAddressLocationResponse
                        .withSupportedCarriersForReturnShipment(supportedCarriersForReturnShipment);
                } else if ("dataCenterAzureLocation".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.withDataCenterAzureLocation(reader.getString());
                } else if ("datacenterAddressType".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.datacenterAddressType
                        = DatacenterAddressType.fromString(reader.getString());
                } else if ("contactPersonName".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.contactPersonName = reader.getString();
                } else if ("company".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.company = reader.getString();
                } else if ("street1".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.street1 = reader.getString();
                } else if ("street2".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.street2 = reader.getString();
                } else if ("street3".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.street3 = reader.getString();
                } else if ("city".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.city = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.state = reader.getString();
                } else if ("zip".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.zip = reader.getString();
                } else if ("country".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.country = reader.getString();
                } else if ("phone".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.phone = reader.getString();
                } else if ("phoneExtension".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.phoneExtension = reader.getString();
                } else if ("addressType".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.addressType = reader.getString();
                } else if ("additionalShippingInformation".equals(fieldName)) {
                    deserializedDatacenterAddressLocationResponse.additionalShippingInformation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatacenterAddressLocationResponse;
        });
    }
}
