// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databox.models.DataLocationToServiceLocationMap;
import com.azure.resourcemanager.databox.models.SkuCapacity;
import com.azure.resourcemanager.databox.models.SkuCost;
import com.azure.resourcemanager.databox.models.SkuDisabledReason;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the sku.
 */
@Immutable
public final class SkuProperties implements JsonSerializable<SkuProperties> {
    /*
     * The map of data location to service location.
     */
    private List<DataLocationToServiceLocationMap> dataLocationToServiceLocationMap;

    /*
     * Capacity of the Sku.
     */
    private SkuCapacity capacity;

    /*
     * Cost of the Sku.
     */
    private List<SkuCost> costs;

    /*
     * Api versions that support this Sku.
     */
    private List<String> apiVersions;

    /*
     * Reason why the Sku is disabled.
     */
    private SkuDisabledReason disabledReason;

    /*
     * Message for why the Sku is disabled.
     */
    private String disabledReasonMessage;

    /*
     * Required feature to access the sku.
     */
    private String requiredFeature;

    /*
     * List of all the Countries in the SKU specific commerce boundary
     */
    private List<String> countriesWithinCommerceBoundary;

    /**
     * Creates an instance of SkuProperties class.
     */
    public SkuProperties() {
    }

    /**
     * Get the dataLocationToServiceLocationMap property: The map of data location to service location.
     * 
     * @return the dataLocationToServiceLocationMap value.
     */
    public List<DataLocationToServiceLocationMap> dataLocationToServiceLocationMap() {
        return this.dataLocationToServiceLocationMap;
    }

    /**
     * Get the capacity property: Capacity of the Sku.
     * 
     * @return the capacity value.
     */
    public SkuCapacity capacity() {
        return this.capacity;
    }

    /**
     * Get the costs property: Cost of the Sku.
     * 
     * @return the costs value.
     */
    public List<SkuCost> costs() {
        return this.costs;
    }

    /**
     * Get the apiVersions property: Api versions that support this Sku.
     * 
     * @return the apiVersions value.
     */
    public List<String> apiVersions() {
        return this.apiVersions;
    }

    /**
     * Get the disabledReason property: Reason why the Sku is disabled.
     * 
     * @return the disabledReason value.
     */
    public SkuDisabledReason disabledReason() {
        return this.disabledReason;
    }

    /**
     * Get the disabledReasonMessage property: Message for why the Sku is disabled.
     * 
     * @return the disabledReasonMessage value.
     */
    public String disabledReasonMessage() {
        return this.disabledReasonMessage;
    }

    /**
     * Get the requiredFeature property: Required feature to access the sku.
     * 
     * @return the requiredFeature value.
     */
    public String requiredFeature() {
        return this.requiredFeature;
    }

    /**
     * Get the countriesWithinCommerceBoundary property: List of all the Countries in the SKU specific commerce
     * boundary.
     * 
     * @return the countriesWithinCommerceBoundary value.
     */
    public List<String> countriesWithinCommerceBoundary() {
        return this.countriesWithinCommerceBoundary;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataLocationToServiceLocationMap() != null) {
            dataLocationToServiceLocationMap().forEach(e -> e.validate());
        }
        if (capacity() != null) {
            capacity().validate();
        }
        if (costs() != null) {
            costs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuProperties.
     */
    public static SkuProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuProperties deserializedSkuProperties = new SkuProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataLocationToServiceLocationMap".equals(fieldName)) {
                    List<DataLocationToServiceLocationMap> dataLocationToServiceLocationMap
                        = reader.readArray(reader1 -> DataLocationToServiceLocationMap.fromJson(reader1));
                    deserializedSkuProperties.dataLocationToServiceLocationMap = dataLocationToServiceLocationMap;
                } else if ("capacity".equals(fieldName)) {
                    deserializedSkuProperties.capacity = SkuCapacity.fromJson(reader);
                } else if ("costs".equals(fieldName)) {
                    List<SkuCost> costs = reader.readArray(reader1 -> SkuCost.fromJson(reader1));
                    deserializedSkuProperties.costs = costs;
                } else if ("apiVersions".equals(fieldName)) {
                    List<String> apiVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuProperties.apiVersions = apiVersions;
                } else if ("disabledReason".equals(fieldName)) {
                    deserializedSkuProperties.disabledReason = SkuDisabledReason.fromString(reader.getString());
                } else if ("disabledReasonMessage".equals(fieldName)) {
                    deserializedSkuProperties.disabledReasonMessage = reader.getString();
                } else if ("requiredFeature".equals(fieldName)) {
                    deserializedSkuProperties.requiredFeature = reader.getString();
                } else if ("countriesWithinCommerceBoundary".equals(fieldName)) {
                    List<String> countriesWithinCommerceBoundary = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuProperties.countriesWithinCommerceBoundary = countriesWithinCommerceBoundary;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuProperties;
        });
    }
}
