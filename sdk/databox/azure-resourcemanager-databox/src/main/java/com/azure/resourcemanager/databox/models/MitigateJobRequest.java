// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The Mitigate Job captured from request body for Mitigate API.
 */
@Fluent
public final class MitigateJobRequest implements JsonSerializable<MitigateJobRequest> {
    /*
     * Resolution code for the job
     */
    private CustomerResolutionCode customerResolutionCode;

    /*
     * Serial number and the customer resolution code corresponding to each serial number
     */
    private Map<String, CustomerResolutionCode> serialNumberCustomerResolutionMap;

    /**
     * Creates an instance of MitigateJobRequest class.
     */
    public MitigateJobRequest() {
    }

    /**
     * Get the customerResolutionCode property: Resolution code for the job.
     * 
     * @return the customerResolutionCode value.
     */
    public CustomerResolutionCode customerResolutionCode() {
        return this.customerResolutionCode;
    }

    /**
     * Set the customerResolutionCode property: Resolution code for the job.
     * 
     * @param customerResolutionCode the customerResolutionCode value to set.
     * @return the MitigateJobRequest object itself.
     */
    public MitigateJobRequest withCustomerResolutionCode(CustomerResolutionCode customerResolutionCode) {
        this.customerResolutionCode = customerResolutionCode;
        return this;
    }

    /**
     * Get the serialNumberCustomerResolutionMap property: Serial number and the customer resolution code corresponding
     * to each serial number.
     * 
     * @return the serialNumberCustomerResolutionMap value.
     */
    public Map<String, CustomerResolutionCode> serialNumberCustomerResolutionMap() {
        return this.serialNumberCustomerResolutionMap;
    }

    /**
     * Set the serialNumberCustomerResolutionMap property: Serial number and the customer resolution code corresponding
     * to each serial number.
     * 
     * @param serialNumberCustomerResolutionMap the serialNumberCustomerResolutionMap value to set.
     * @return the MitigateJobRequest object itself.
     */
    public MitigateJobRequest
        withSerialNumberCustomerResolutionMap(Map<String, CustomerResolutionCode> serialNumberCustomerResolutionMap) {
        this.serialNumberCustomerResolutionMap = serialNumberCustomerResolutionMap;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("customerResolutionCode",
            this.customerResolutionCode == null ? null : this.customerResolutionCode.toString());
        jsonWriter.writeMapField("serialNumberCustomerResolutionMap", this.serialNumberCustomerResolutionMap,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MitigateJobRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MitigateJobRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MitigateJobRequest.
     */
    public static MitigateJobRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MitigateJobRequest deserializedMitigateJobRequest = new MitigateJobRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customerResolutionCode".equals(fieldName)) {
                    deserializedMitigateJobRequest.customerResolutionCode
                        = CustomerResolutionCode.fromString(reader.getString());
                } else if ("serialNumberCustomerResolutionMap".equals(fieldName)) {
                    Map<String, CustomerResolutionCode> serialNumberCustomerResolutionMap
                        = reader.readMap(reader1 -> CustomerResolutionCode.fromString(reader1.getString()));
                    deserializedMitigateJobRequest.serialNumberCustomerResolutionMap
                        = serialNumberCustomerResolutionMap;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMitigateJobRequest;
        });
    }
}
