// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Copy log details for a storage account for Databox heavy.
 */
@Immutable
public final class DataBoxHeavyAccountCopyLogDetails extends CopyLogDetails {
    /*
     * Indicates the type of job details.
     */
    private ClassDiscriminator copyLogDetailsType = ClassDiscriminator.DATA_BOX_HEAVY;

    /*
     * Account name.
     */
    private String accountName;

    /*
     * Link for copy logs.
     */
    private List<String> copyLogLink;

    /*
     * Link for copy verbose logs. This will be set only when the LogCollectionLevel is set to verbose.
     */
    private List<String> copyVerboseLogLink;

    /**
     * Creates an instance of DataBoxHeavyAccountCopyLogDetails class.
     */
    public DataBoxHeavyAccountCopyLogDetails() {
    }

    /**
     * Get the copyLogDetailsType property: Indicates the type of job details.
     * 
     * @return the copyLogDetailsType value.
     */
    @Override
    public ClassDiscriminator copyLogDetailsType() {
        return this.copyLogDetailsType;
    }

    /**
     * Get the accountName property: Account name.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Get the copyLogLink property: Link for copy logs.
     * 
     * @return the copyLogLink value.
     */
    public List<String> copyLogLink() {
        return this.copyLogLink;
    }

    /**
     * Get the copyVerboseLogLink property: Link for copy verbose logs. This will be set only when the
     * LogCollectionLevel is set to verbose.
     * 
     * @return the copyVerboseLogLink value.
     */
    public List<String> copyVerboseLogLink() {
        return this.copyVerboseLogLink;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("copyLogDetailsType",
            this.copyLogDetailsType == null ? null : this.copyLogDetailsType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataBoxHeavyAccountCopyLogDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataBoxHeavyAccountCopyLogDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataBoxHeavyAccountCopyLogDetails.
     */
    public static DataBoxHeavyAccountCopyLogDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataBoxHeavyAccountCopyLogDetails deserializedDataBoxHeavyAccountCopyLogDetails
                = new DataBoxHeavyAccountCopyLogDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("copyLogDetailsType".equals(fieldName)) {
                    deserializedDataBoxHeavyAccountCopyLogDetails.copyLogDetailsType
                        = ClassDiscriminator.fromString(reader.getString());
                } else if ("accountName".equals(fieldName)) {
                    deserializedDataBoxHeavyAccountCopyLogDetails.accountName = reader.getString();
                } else if ("copyLogLink".equals(fieldName)) {
                    List<String> copyLogLink = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataBoxHeavyAccountCopyLogDetails.copyLogLink = copyLogLink;
                } else if ("copyVerboseLogLink".equals(fieldName)) {
                    List<String> copyVerboseLogLink = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataBoxHeavyAccountCopyLogDetails.copyVerboseLogLink = copyVerboseLogLink;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataBoxHeavyAccountCopyLogDetails;
        });
    }
}
