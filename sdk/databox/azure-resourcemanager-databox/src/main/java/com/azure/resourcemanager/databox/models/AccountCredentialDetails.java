// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Credential details of the account.
 */
@Immutable
public final class AccountCredentialDetails implements JsonSerializable<AccountCredentialDetails> {
    /*
     * Name of the account.
     */
    private String accountName;

    /*
     * Type of the account.
     */
    private DataAccountType dataAccountType;

    /*
     * Connection string of the account endpoint to use the account as a storage endpoint on the device.
     */
    private String accountConnectionString;

    /*
     * Per share level unencrypted access credentials.
     */
    private List<ShareCredentialDetails> shareCredentialDetails;

    /**
     * Creates an instance of AccountCredentialDetails class.
     */
    public AccountCredentialDetails() {
    }

    /**
     * Get the accountName property: Name of the account.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Get the dataAccountType property: Type of the account.
     * 
     * @return the dataAccountType value.
     */
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Get the accountConnectionString property: Connection string of the account endpoint to use the account as a
     * storage endpoint on the device.
     * 
     * @return the accountConnectionString value.
     */
    public String accountConnectionString() {
        return this.accountConnectionString;
    }

    /**
     * Get the shareCredentialDetails property: Per share level unencrypted access credentials.
     * 
     * @return the shareCredentialDetails value.
     */
    public List<ShareCredentialDetails> shareCredentialDetails() {
        return this.shareCredentialDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (shareCredentialDetails() != null) {
            shareCredentialDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountCredentialDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountCredentialDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountCredentialDetails.
     */
    public static AccountCredentialDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountCredentialDetails deserializedAccountCredentialDetails = new AccountCredentialDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountName".equals(fieldName)) {
                    deserializedAccountCredentialDetails.accountName = reader.getString();
                } else if ("dataAccountType".equals(fieldName)) {
                    deserializedAccountCredentialDetails.dataAccountType
                        = DataAccountType.fromString(reader.getString());
                } else if ("accountConnectionString".equals(fieldName)) {
                    deserializedAccountCredentialDetails.accountConnectionString = reader.getString();
                } else if ("shareCredentialDetails".equals(fieldName)) {
                    List<ShareCredentialDetails> shareCredentialDetails
                        = reader.readArray(reader1 -> ShareCredentialDetails.fromJson(reader1));
                    deserializedAccountCredentialDetails.shareCredentialDetails = shareCredentialDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountCredentialDetails;
        });
    }
}
