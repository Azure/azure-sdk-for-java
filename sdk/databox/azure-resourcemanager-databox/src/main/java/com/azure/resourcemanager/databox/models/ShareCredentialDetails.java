// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Credential details of the shares in account.
 */
@Immutable
public final class ShareCredentialDetails implements JsonSerializable<ShareCredentialDetails> {
    /*
     * Name of the share.
     */
    private String shareName;

    /*
     * Type of the share.
     */
    private ShareDestinationFormatType shareType;

    /*
     * User name for the share.
     */
    private String username;

    /*
     * Password for the share.
     */
    private String password;

    /*
     * Access protocols supported on the device.
     */
    private List<AccessProtocol> supportedAccessProtocols;

    /**
     * Creates an instance of ShareCredentialDetails class.
     */
    public ShareCredentialDetails() {
    }

    /**
     * Get the shareName property: Name of the share.
     * 
     * @return the shareName value.
     */
    public String shareName() {
        return this.shareName;
    }

    /**
     * Get the shareType property: Type of the share.
     * 
     * @return the shareType value.
     */
    public ShareDestinationFormatType shareType() {
        return this.shareType;
    }

    /**
     * Get the username property: User name for the share.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Get the password property: Password for the share.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Get the supportedAccessProtocols property: Access protocols supported on the device.
     * 
     * @return the supportedAccessProtocols value.
     */
    public List<AccessProtocol> supportedAccessProtocols() {
        return this.supportedAccessProtocols;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShareCredentialDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShareCredentialDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ShareCredentialDetails.
     */
    public static ShareCredentialDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShareCredentialDetails deserializedShareCredentialDetails = new ShareCredentialDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("shareName".equals(fieldName)) {
                    deserializedShareCredentialDetails.shareName = reader.getString();
                } else if ("shareType".equals(fieldName)) {
                    deserializedShareCredentialDetails.shareType
                        = ShareDestinationFormatType.fromString(reader.getString());
                } else if ("userName".equals(fieldName)) {
                    deserializedShareCredentialDetails.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedShareCredentialDetails.password = reader.getString();
                } else if ("supportedAccessProtocols".equals(fieldName)) {
                    List<AccessProtocol> supportedAccessProtocols
                        = reader.readArray(reader1 -> AccessProtocol.fromString(reader1.getString()));
                    deserializedShareCredentialDetails.supportedAccessProtocols = supportedAccessProtocols;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShareCredentialDetails;
        });
    }
}
