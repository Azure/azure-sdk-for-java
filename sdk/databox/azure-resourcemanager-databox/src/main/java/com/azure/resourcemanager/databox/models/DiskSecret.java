// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contains all the secrets of a Disk.
 */
@Immutable
public final class DiskSecret implements JsonSerializable<DiskSecret> {
    /*
     * Serial number of the assigned disk.
     */
    private String diskSerialNumber;

    /*
     * Bit Locker key of the disk which can be used to unlock the disk to copy data.
     */
    private String bitLockerKey;

    /**
     * Creates an instance of DiskSecret class.
     */
    public DiskSecret() {
    }

    /**
     * Get the diskSerialNumber property: Serial number of the assigned disk.
     * 
     * @return the diskSerialNumber value.
     */
    public String diskSerialNumber() {
        return this.diskSerialNumber;
    }

    /**
     * Get the bitLockerKey property: Bit Locker key of the disk which can be used to unlock the disk to copy data.
     * 
     * @return the bitLockerKey value.
     */
    public String bitLockerKey() {
        return this.bitLockerKey;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskSecret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskSecret if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DiskSecret.
     */
    public static DiskSecret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskSecret deserializedDiskSecret = new DiskSecret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskSerialNumber".equals(fieldName)) {
                    deserializedDiskSecret.diskSerialNumber = reader.getString();
                } else if ("bitLockerKey".equals(fieldName)) {
                    deserializedDiskSecret.bitLockerKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskSecret;
        });
    }
}
