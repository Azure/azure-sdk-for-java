// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The secrets related to a DataBox.
 */
@Immutable
public final class DataBoxSecret implements JsonSerializable<DataBoxSecret> {
    /*
     * Serial number of the assigned device.
     */
    private String deviceSerialNumber;

    /*
     * Password for out of the box experience on device.
     */
    private String devicePassword;

    /*
     * Network configuration of the appliance.
     */
    private List<ApplianceNetworkConfiguration> networkConfigurations;

    /*
     * The base 64 encoded public key to authenticate with the device
     */
    private String encodedValidationCertPubKey;

    /*
     * Per account level access credentials.
     */
    private List<AccountCredentialDetails> accountCredentialDetails;

    /**
     * Creates an instance of DataBoxSecret class.
     */
    public DataBoxSecret() {
    }

    /**
     * Get the deviceSerialNumber property: Serial number of the assigned device.
     * 
     * @return the deviceSerialNumber value.
     */
    public String deviceSerialNumber() {
        return this.deviceSerialNumber;
    }

    /**
     * Get the devicePassword property: Password for out of the box experience on device.
     * 
     * @return the devicePassword value.
     */
    public String devicePassword() {
        return this.devicePassword;
    }

    /**
     * Get the networkConfigurations property: Network configuration of the appliance.
     * 
     * @return the networkConfigurations value.
     */
    public List<ApplianceNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }

    /**
     * Get the encodedValidationCertPubKey property: The base 64 encoded public key to authenticate with the device.
     * 
     * @return the encodedValidationCertPubKey value.
     */
    public String encodedValidationCertPubKey() {
        return this.encodedValidationCertPubKey;
    }

    /**
     * Get the accountCredentialDetails property: Per account level access credentials.
     * 
     * @return the accountCredentialDetails value.
     */
    public List<AccountCredentialDetails> accountCredentialDetails() {
        return this.accountCredentialDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkConfigurations() != null) {
            networkConfigurations().forEach(e -> e.validate());
        }
        if (accountCredentialDetails() != null) {
            accountCredentialDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataBoxSecret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataBoxSecret if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataBoxSecret.
     */
    public static DataBoxSecret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataBoxSecret deserializedDataBoxSecret = new DataBoxSecret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceSerialNumber".equals(fieldName)) {
                    deserializedDataBoxSecret.deviceSerialNumber = reader.getString();
                } else if ("devicePassword".equals(fieldName)) {
                    deserializedDataBoxSecret.devicePassword = reader.getString();
                } else if ("networkConfigurations".equals(fieldName)) {
                    List<ApplianceNetworkConfiguration> networkConfigurations
                        = reader.readArray(reader1 -> ApplianceNetworkConfiguration.fromJson(reader1));
                    deserializedDataBoxSecret.networkConfigurations = networkConfigurations;
                } else if ("encodedValidationCertPubKey".equals(fieldName)) {
                    deserializedDataBoxSecret.encodedValidationCertPubKey = reader.getString();
                } else if ("accountCredentialDetails".equals(fieldName)) {
                    List<AccountCredentialDetails> accountCredentialDetails
                        = reader.readArray(reader1 -> AccountCredentialDetails.fromJson(reader1));
                    deserializedDataBoxSecret.accountCredentialDetails = accountCredentialDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataBoxSecret;
        });
    }
}
