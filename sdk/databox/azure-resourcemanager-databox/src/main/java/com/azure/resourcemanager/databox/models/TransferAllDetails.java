// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details to transfer all data.
 */
@Fluent
public final class TransferAllDetails implements JsonSerializable<TransferAllDetails> {
    /*
     * Type of the account of data
     */
    private DataAccountType dataAccountType;

    /*
     * To indicate if all Azure blobs have to be transferred
     */
    private Boolean transferAllBlobs;

    /*
     * To indicate if all Azure Files have to be transferred
     */
    private Boolean transferAllFiles;

    /**
     * Creates an instance of TransferAllDetails class.
     */
    public TransferAllDetails() {
    }

    /**
     * Get the dataAccountType property: Type of the account of data.
     * 
     * @return the dataAccountType value.
     */
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Set the dataAccountType property: Type of the account of data.
     * 
     * @param dataAccountType the dataAccountType value to set.
     * @return the TransferAllDetails object itself.
     */
    public TransferAllDetails withDataAccountType(DataAccountType dataAccountType) {
        this.dataAccountType = dataAccountType;
        return this;
    }

    /**
     * Get the transferAllBlobs property: To indicate if all Azure blobs have to be transferred.
     * 
     * @return the transferAllBlobs value.
     */
    public Boolean transferAllBlobs() {
        return this.transferAllBlobs;
    }

    /**
     * Set the transferAllBlobs property: To indicate if all Azure blobs have to be transferred.
     * 
     * @param transferAllBlobs the transferAllBlobs value to set.
     * @return the TransferAllDetails object itself.
     */
    public TransferAllDetails withTransferAllBlobs(Boolean transferAllBlobs) {
        this.transferAllBlobs = transferAllBlobs;
        return this;
    }

    /**
     * Get the transferAllFiles property: To indicate if all Azure Files have to be transferred.
     * 
     * @return the transferAllFiles value.
     */
    public Boolean transferAllFiles() {
        return this.transferAllFiles;
    }

    /**
     * Set the transferAllFiles property: To indicate if all Azure Files have to be transferred.
     * 
     * @param transferAllFiles the transferAllFiles value to set.
     * @return the TransferAllDetails object itself.
     */
    public TransferAllDetails withTransferAllFiles(Boolean transferAllFiles) {
        this.transferAllFiles = transferAllFiles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataAccountType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataAccountType in model TransferAllDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TransferAllDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataAccountType",
            this.dataAccountType == null ? null : this.dataAccountType.toString());
        jsonWriter.writeBooleanField("transferAllBlobs", this.transferAllBlobs);
        jsonWriter.writeBooleanField("transferAllFiles", this.transferAllFiles);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransferAllDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransferAllDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TransferAllDetails.
     */
    public static TransferAllDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransferAllDetails deserializedTransferAllDetails = new TransferAllDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataAccountType".equals(fieldName)) {
                    deserializedTransferAllDetails.dataAccountType = DataAccountType.fromString(reader.getString());
                } else if ("transferAllBlobs".equals(fieldName)) {
                    deserializedTransferAllDetails.transferAllBlobs = reader.getNullable(JsonReader::getBoolean);
                } else if ("transferAllFiles".equals(fieldName)) {
                    deserializedTransferAllDetails.transferAllFiles = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransferAllDetails;
        });
    }
}
