// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request to validate export and import data details.
 */
@Fluent
public final class DataTransferDetailsValidationRequest extends ValidationInputRequest {
    /*
     * Identifies the type of validation request.
     */
    private ValidationInputDiscriminator validationType = ValidationInputDiscriminator.VALIDATE_DATA_TRANSFER_DETAILS;

    /*
     * List of DataTransfer details to be used to export data from azure.
     */
    private List<DataExportDetails> dataExportDetails;

    /*
     * List of DataTransfer details to be used to import data to azure.
     */
    private List<DataImportDetails> dataImportDetails;

    /*
     * Device type.
     */
    private SkuName deviceType;

    /*
     * Type of the transfer.
     */
    private TransferType transferType;

    /**
     * Creates an instance of DataTransferDetailsValidationRequest class.
     */
    public DataTransferDetailsValidationRequest() {
    }

    /**
     * Get the validationType property: Identifies the type of validation request.
     * 
     * @return the validationType value.
     */
    @Override
    public ValidationInputDiscriminator validationType() {
        return this.validationType;
    }

    /**
     * Get the dataExportDetails property: List of DataTransfer details to be used to export data from azure.
     * 
     * @return the dataExportDetails value.
     */
    public List<DataExportDetails> dataExportDetails() {
        return this.dataExportDetails;
    }

    /**
     * Set the dataExportDetails property: List of DataTransfer details to be used to export data from azure.
     * 
     * @param dataExportDetails the dataExportDetails value to set.
     * @return the DataTransferDetailsValidationRequest object itself.
     */
    public DataTransferDetailsValidationRequest withDataExportDetails(List<DataExportDetails> dataExportDetails) {
        this.dataExportDetails = dataExportDetails;
        return this;
    }

    /**
     * Get the dataImportDetails property: List of DataTransfer details to be used to import data to azure.
     * 
     * @return the dataImportDetails value.
     */
    public List<DataImportDetails> dataImportDetails() {
        return this.dataImportDetails;
    }

    /**
     * Set the dataImportDetails property: List of DataTransfer details to be used to import data to azure.
     * 
     * @param dataImportDetails the dataImportDetails value to set.
     * @return the DataTransferDetailsValidationRequest object itself.
     */
    public DataTransferDetailsValidationRequest withDataImportDetails(List<DataImportDetails> dataImportDetails) {
        this.dataImportDetails = dataImportDetails;
        return this;
    }

    /**
     * Get the deviceType property: Device type.
     * 
     * @return the deviceType value.
     */
    public SkuName deviceType() {
        return this.deviceType;
    }

    /**
     * Set the deviceType property: Device type.
     * 
     * @param deviceType the deviceType value to set.
     * @return the DataTransferDetailsValidationRequest object itself.
     */
    public DataTransferDetailsValidationRequest withDeviceType(SkuName deviceType) {
        this.deviceType = deviceType;
        return this;
    }

    /**
     * Get the transferType property: Type of the transfer.
     * 
     * @return the transferType value.
     */
    public TransferType transferType() {
        return this.transferType;
    }

    /**
     * Set the transferType property: Type of the transfer.
     * 
     * @param transferType the transferType value to set.
     * @return the DataTransferDetailsValidationRequest object itself.
     */
    public DataTransferDetailsValidationRequest withTransferType(TransferType transferType) {
        this.transferType = transferType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dataExportDetails() != null) {
            dataExportDetails().forEach(e -> e.validate());
        }
        if (dataImportDetails() != null) {
            dataImportDetails().forEach(e -> e.validate());
        }
        if (deviceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property deviceType in model DataTransferDetailsValidationRequest"));
        }
        if (transferType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property transferType in model DataTransferDetailsValidationRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataTransferDetailsValidationRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceType", this.deviceType == null ? null : this.deviceType.toString());
        jsonWriter.writeStringField("transferType", this.transferType == null ? null : this.transferType.toString());
        jsonWriter.writeStringField("validationType",
            this.validationType == null ? null : this.validationType.toString());
        jsonWriter.writeArrayField("dataExportDetails", this.dataExportDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dataImportDetails", this.dataImportDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataTransferDetailsValidationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataTransferDetailsValidationRequest if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataTransferDetailsValidationRequest.
     */
    public static DataTransferDetailsValidationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataTransferDetailsValidationRequest deserializedDataTransferDetailsValidationRequest
                = new DataTransferDetailsValidationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceType".equals(fieldName)) {
                    deserializedDataTransferDetailsValidationRequest.deviceType
                        = SkuName.fromString(reader.getString());
                } else if ("transferType".equals(fieldName)) {
                    deserializedDataTransferDetailsValidationRequest.transferType
                        = TransferType.fromString(reader.getString());
                } else if ("validationType".equals(fieldName)) {
                    deserializedDataTransferDetailsValidationRequest.validationType
                        = ValidationInputDiscriminator.fromString(reader.getString());
                } else if ("dataExportDetails".equals(fieldName)) {
                    List<DataExportDetails> dataExportDetails
                        = reader.readArray(reader1 -> DataExportDetails.fromJson(reader1));
                    deserializedDataTransferDetailsValidationRequest.dataExportDetails = dataExportDetails;
                } else if ("dataImportDetails".equals(fieldName)) {
                    List<DataImportDetails> dataImportDetails
                        = reader.readArray(reader1 -> DataImportDetails.fromJson(reader1));
                    deserializedDataTransferDetailsValidationRequest.dataImportDetails = dataImportDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataTransferDetailsValidationRequest;
        });
    }
}
