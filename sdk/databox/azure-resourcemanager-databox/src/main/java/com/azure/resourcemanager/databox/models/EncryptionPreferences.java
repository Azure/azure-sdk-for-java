// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Preferences related to the Encryption.
 */
@Fluent
public final class EncryptionPreferences implements JsonSerializable<EncryptionPreferences> {
    /*
     * Defines secondary layer of software-based encryption enablement.
     */
    private DoubleEncryption doubleEncryption;

    /*
     * Defines Hardware level encryption (Only for disk)
     */
    private HardwareEncryption hardwareEncryption;

    /**
     * Creates an instance of EncryptionPreferences class.
     */
    public EncryptionPreferences() {
    }

    /**
     * Get the doubleEncryption property: Defines secondary layer of software-based encryption enablement.
     * 
     * @return the doubleEncryption value.
     */
    public DoubleEncryption doubleEncryption() {
        return this.doubleEncryption;
    }

    /**
     * Set the doubleEncryption property: Defines secondary layer of software-based encryption enablement.
     * 
     * @param doubleEncryption the doubleEncryption value to set.
     * @return the EncryptionPreferences object itself.
     */
    public EncryptionPreferences withDoubleEncryption(DoubleEncryption doubleEncryption) {
        this.doubleEncryption = doubleEncryption;
        return this;
    }

    /**
     * Get the hardwareEncryption property: Defines Hardware level encryption (Only for disk).
     * 
     * @return the hardwareEncryption value.
     */
    public HardwareEncryption hardwareEncryption() {
        return this.hardwareEncryption;
    }

    /**
     * Set the hardwareEncryption property: Defines Hardware level encryption (Only for disk).
     * 
     * @param hardwareEncryption the hardwareEncryption value to set.
     * @return the EncryptionPreferences object itself.
     */
    public EncryptionPreferences withHardwareEncryption(HardwareEncryption hardwareEncryption) {
        this.hardwareEncryption = hardwareEncryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("doubleEncryption",
            this.doubleEncryption == null ? null : this.doubleEncryption.toString());
        jsonWriter.writeStringField("hardwareEncryption",
            this.hardwareEncryption == null ? null : this.hardwareEncryption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionPreferences from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionPreferences if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionPreferences.
     */
    public static EncryptionPreferences fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionPreferences deserializedEncryptionPreferences = new EncryptionPreferences();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("doubleEncryption".equals(fieldName)) {
                    deserializedEncryptionPreferences.doubleEncryption
                        = DoubleEncryption.fromString(reader.getString());
                } else if ("hardwareEncryption".equals(fieldName)) {
                    deserializedEncryptionPreferences.hardwareEncryption
                        = HardwareEncryption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionPreferences;
        });
    }
}
