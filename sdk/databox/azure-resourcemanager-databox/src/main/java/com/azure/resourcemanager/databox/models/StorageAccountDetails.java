// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details for the storage account.
 */
@Fluent
public final class StorageAccountDetails extends DataAccountDetails {
    /*
     * Account Type of the data to be transferred.
     */
    private DataAccountType dataAccountType = DataAccountType.STORAGE_ACCOUNT;

    /*
     * Storage Account Resource Id.
     */
    private String storageAccountId;

    /**
     * Creates an instance of StorageAccountDetails class.
     */
    public StorageAccountDetails() {
    }

    /**
     * Get the dataAccountType property: Account Type of the data to be transferred.
     * 
     * @return the dataAccountType value.
     */
    @Override
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Get the storageAccountId property: Storage Account Resource Id.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Set the storageAccountId property: Storage Account Resource Id.
     * 
     * @param storageAccountId the storageAccountId value to set.
     * @return the StorageAccountDetails object itself.
     */
    public StorageAccountDetails withStorageAccountId(String storageAccountId) {
        this.storageAccountId = storageAccountId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StorageAccountDetails withSharePassword(String sharePassword) {
        super.withSharePassword(sharePassword);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (storageAccountId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageAccountId in model StorageAccountDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageAccountDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sharePassword", sharePassword());
        jsonWriter.writeStringField("storageAccountId", this.storageAccountId);
        jsonWriter.writeStringField("dataAccountType",
            this.dataAccountType == null ? null : this.dataAccountType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageAccountDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageAccountDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageAccountDetails.
     */
    public static StorageAccountDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageAccountDetails deserializedStorageAccountDetails = new StorageAccountDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sharePassword".equals(fieldName)) {
                    deserializedStorageAccountDetails.withSharePassword(reader.getString());
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedStorageAccountDetails.storageAccountId = reader.getString();
                } else if ("dataAccountType".equals(fieldName)) {
                    deserializedStorageAccountDetails.dataAccountType = DataAccountType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageAccountDetails;
        });
    }
}
