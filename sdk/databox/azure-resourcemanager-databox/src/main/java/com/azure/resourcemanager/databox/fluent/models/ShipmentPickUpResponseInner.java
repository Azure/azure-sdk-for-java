// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Shipment pick up response.
 */
@Immutable
public final class ShipmentPickUpResponseInner implements JsonSerializable<ShipmentPickUpResponseInner> {
    /*
     * Confirmation number for the pick up request.
     */
    private String confirmationNumber;

    /*
     * Time by which shipment should be ready for pick up, this is in local time of pick up area.
     */
    private OffsetDateTime readyByTime;

    /**
     * Creates an instance of ShipmentPickUpResponseInner class.
     */
    public ShipmentPickUpResponseInner() {
    }

    /**
     * Get the confirmationNumber property: Confirmation number for the pick up request.
     * 
     * @return the confirmationNumber value.
     */
    public String confirmationNumber() {
        return this.confirmationNumber;
    }

    /**
     * Get the readyByTime property: Time by which shipment should be ready for pick up, this is in local time of pick
     * up area.
     * 
     * @return the readyByTime value.
     */
    public OffsetDateTime readyByTime() {
        return this.readyByTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShipmentPickUpResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShipmentPickUpResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ShipmentPickUpResponseInner.
     */
    public static ShipmentPickUpResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShipmentPickUpResponseInner deserializedShipmentPickUpResponseInner = new ShipmentPickUpResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("confirmationNumber".equals(fieldName)) {
                    deserializedShipmentPickUpResponseInner.confirmationNumber = reader.getString();
                } else if ("readyByTime".equals(fieldName)) {
                    deserializedShipmentPickUpResponseInner.readyByTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShipmentPickUpResponseInner;
        });
    }
}
