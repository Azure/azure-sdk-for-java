// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databox.models.CloudError;
import com.azure.resourcemanager.databox.models.JobDeliveryInfo;
import com.azure.resourcemanager.databox.models.JobDeliveryType;
import com.azure.resourcemanager.databox.models.JobDetails;
import com.azure.resourcemanager.databox.models.ReverseShippingDetailsEditStatus;
import com.azure.resourcemanager.databox.models.ReverseTransportPreferenceEditStatus;
import com.azure.resourcemanager.databox.models.StageName;
import com.azure.resourcemanager.databox.models.TransferType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Job Properties.
 */
@Fluent
public final class JobProperties implements JsonSerializable<JobProperties> {
    /*
     * Type of the data transfer.
     */
    private TransferType transferType;

    /*
     * Describes whether the job is cancellable or not.
     */
    private Boolean isCancellable;

    /*
     * Describes whether the job is deletable or not.
     */
    private Boolean isDeletable;

    /*
     * Describes whether the shipping address is editable or not.
     */
    private Boolean isShippingAddressEditable;

    /*
     * The Editable status for Reverse Shipping Address and Contact Info
     */
    private ReverseShippingDetailsEditStatus reverseShippingDetailsUpdate;

    /*
     * The Editable status for Reverse Transport preferences
     */
    private ReverseTransportPreferenceEditStatus reverseTransportPreferenceUpdate;

    /*
     * Is Prepare To Ship Enabled on this job
     */
    private Boolean isPrepareToShipEnabled;

    /*
     * Name of the stage which is in progress.
     */
    private StageName status;

    /*
     * Time at which the job was started in UTC ISO 8601 format.
     */
    private OffsetDateTime startTime;

    /*
     * Top level error for the job.
     */
    private CloudError error;

    /*
     * Details of a job run. This field will only be sent for expand details filter.
     */
    private JobDetails details;

    /*
     * Reason for cancellation.
     */
    private String cancellationReason;

    /*
     * Delivery type of Job.
     */
    private JobDeliveryType deliveryType;

    /*
     * Delivery Info of Job.
     */
    private JobDeliveryInfo deliveryInfo;

    /*
     * Flag to indicate cancellation of scheduled job.
     */
    private Boolean isCancellableWithoutFee;

    /**
     * Creates an instance of JobProperties class.
     */
    public JobProperties() {
    }

    /**
     * Get the transferType property: Type of the data transfer.
     * 
     * @return the transferType value.
     */
    public TransferType transferType() {
        return this.transferType;
    }

    /**
     * Set the transferType property: Type of the data transfer.
     * 
     * @param transferType the transferType value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withTransferType(TransferType transferType) {
        this.transferType = transferType;
        return this;
    }

    /**
     * Get the isCancellable property: Describes whether the job is cancellable or not.
     * 
     * @return the isCancellable value.
     */
    public Boolean isCancellable() {
        return this.isCancellable;
    }

    /**
     * Get the isDeletable property: Describes whether the job is deletable or not.
     * 
     * @return the isDeletable value.
     */
    public Boolean isDeletable() {
        return this.isDeletable;
    }

    /**
     * Get the isShippingAddressEditable property: Describes whether the shipping address is editable or not.
     * 
     * @return the isShippingAddressEditable value.
     */
    public Boolean isShippingAddressEditable() {
        return this.isShippingAddressEditable;
    }

    /**
     * Get the reverseShippingDetailsUpdate property: The Editable status for Reverse Shipping Address and Contact Info.
     * 
     * @return the reverseShippingDetailsUpdate value.
     */
    public ReverseShippingDetailsEditStatus reverseShippingDetailsUpdate() {
        return this.reverseShippingDetailsUpdate;
    }

    /**
     * Get the reverseTransportPreferenceUpdate property: The Editable status for Reverse Transport preferences.
     * 
     * @return the reverseTransportPreferenceUpdate value.
     */
    public ReverseTransportPreferenceEditStatus reverseTransportPreferenceUpdate() {
        return this.reverseTransportPreferenceUpdate;
    }

    /**
     * Get the isPrepareToShipEnabled property: Is Prepare To Ship Enabled on this job.
     * 
     * @return the isPrepareToShipEnabled value.
     */
    public Boolean isPrepareToShipEnabled() {
        return this.isPrepareToShipEnabled;
    }

    /**
     * Get the status property: Name of the stage which is in progress.
     * 
     * @return the status value.
     */
    public StageName status() {
        return this.status;
    }

    /**
     * Get the startTime property: Time at which the job was started in UTC ISO 8601 format.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the error property: Top level error for the job.
     * 
     * @return the error value.
     */
    public CloudError error() {
        return this.error;
    }

    /**
     * Get the details property: Details of a job run. This field will only be sent for expand details filter.
     * 
     * @return the details value.
     */
    public JobDetails details() {
        return this.details;
    }

    /**
     * Set the details property: Details of a job run. This field will only be sent for expand details filter.
     * 
     * @param details the details value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withDetails(JobDetails details) {
        this.details = details;
        return this;
    }

    /**
     * Get the cancellationReason property: Reason for cancellation.
     * 
     * @return the cancellationReason value.
     */
    public String cancellationReason() {
        return this.cancellationReason;
    }

    /**
     * Get the deliveryType property: Delivery type of Job.
     * 
     * @return the deliveryType value.
     */
    public JobDeliveryType deliveryType() {
        return this.deliveryType;
    }

    /**
     * Set the deliveryType property: Delivery type of Job.
     * 
     * @param deliveryType the deliveryType value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withDeliveryType(JobDeliveryType deliveryType) {
        this.deliveryType = deliveryType;
        return this;
    }

    /**
     * Get the deliveryInfo property: Delivery Info of Job.
     * 
     * @return the deliveryInfo value.
     */
    public JobDeliveryInfo deliveryInfo() {
        return this.deliveryInfo;
    }

    /**
     * Set the deliveryInfo property: Delivery Info of Job.
     * 
     * @param deliveryInfo the deliveryInfo value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withDeliveryInfo(JobDeliveryInfo deliveryInfo) {
        this.deliveryInfo = deliveryInfo;
        return this;
    }

    /**
     * Get the isCancellableWithoutFee property: Flag to indicate cancellation of scheduled job.
     * 
     * @return the isCancellableWithoutFee value.
     */
    public Boolean isCancellableWithoutFee() {
        return this.isCancellableWithoutFee;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (transferType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property transferType in model JobProperties"));
        }
        if (error() != null) {
            error().validate();
        }
        if (details() != null) {
            details().validate();
        }
        if (deliveryInfo() != null) {
            deliveryInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("transferType", this.transferType == null ? null : this.transferType.toString());
        jsonWriter.writeJsonField("details", this.details);
        jsonWriter.writeStringField("deliveryType", this.deliveryType == null ? null : this.deliveryType.toString());
        jsonWriter.writeJsonField("deliveryInfo", this.deliveryInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobProperties.
     */
    public static JobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobProperties deserializedJobProperties = new JobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("transferType".equals(fieldName)) {
                    deserializedJobProperties.transferType = TransferType.fromString(reader.getString());
                } else if ("isCancellable".equals(fieldName)) {
                    deserializedJobProperties.isCancellable = reader.getNullable(JsonReader::getBoolean);
                } else if ("isDeletable".equals(fieldName)) {
                    deserializedJobProperties.isDeletable = reader.getNullable(JsonReader::getBoolean);
                } else if ("isShippingAddressEditable".equals(fieldName)) {
                    deserializedJobProperties.isShippingAddressEditable = reader.getNullable(JsonReader::getBoolean);
                } else if ("reverseShippingDetailsUpdate".equals(fieldName)) {
                    deserializedJobProperties.reverseShippingDetailsUpdate
                        = ReverseShippingDetailsEditStatus.fromString(reader.getString());
                } else if ("reverseTransportPreferenceUpdate".equals(fieldName)) {
                    deserializedJobProperties.reverseTransportPreferenceUpdate
                        = ReverseTransportPreferenceEditStatus.fromString(reader.getString());
                } else if ("isPrepareToShipEnabled".equals(fieldName)) {
                    deserializedJobProperties.isPrepareToShipEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("status".equals(fieldName)) {
                    deserializedJobProperties.status = StageName.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedJobProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    deserializedJobProperties.error = CloudError.fromJson(reader);
                } else if ("details".equals(fieldName)) {
                    deserializedJobProperties.details = JobDetails.fromJson(reader);
                } else if ("cancellationReason".equals(fieldName)) {
                    deserializedJobProperties.cancellationReason = reader.getString();
                } else if ("deliveryType".equals(fieldName)) {
                    deserializedJobProperties.deliveryType = JobDeliveryType.fromString(reader.getString());
                } else if ("deliveryInfo".equals(fieldName)) {
                    deserializedJobProperties.deliveryInfo = JobDeliveryInfo.fromJson(reader);
                } else if ("isCancellableWithoutFee".equals(fieldName)) {
                    deserializedJobProperties.isCancellableWithoutFee = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobProperties;
        });
    }
}
