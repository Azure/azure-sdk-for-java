// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Shipment pick up request details.
 */
@Fluent
public final class ShipmentPickUpRequest implements JsonSerializable<ShipmentPickUpRequest> {
    /*
     * Minimum date after which the pick up should commence, this must be in local time of pick up area.
     */
    private OffsetDateTime startTime;

    /*
     * Maximum date before which the pick up should commence, this must be in local time of pick up area.
     */
    private OffsetDateTime endTime;

    /*
     * Shipment Location in the pickup place. Eg.front desk
     */
    private String shipmentLocation;

    /**
     * Creates an instance of ShipmentPickUpRequest class.
     */
    public ShipmentPickUpRequest() {
    }

    /**
     * Get the startTime property: Minimum date after which the pick up should commence, this must be in local time of
     * pick up area.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Minimum date after which the pick up should commence, this must be in local time of
     * pick up area.
     * 
     * @param startTime the startTime value to set.
     * @return the ShipmentPickUpRequest object itself.
     */
    public ShipmentPickUpRequest withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Maximum date before which the pick up should commence, this must be in local time of
     * pick up area.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Maximum date before which the pick up should commence, this must be in local time of
     * pick up area.
     * 
     * @param endTime the endTime value to set.
     * @return the ShipmentPickUpRequest object itself.
     */
    public ShipmentPickUpRequest withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the shipmentLocation property: Shipment Location in the pickup place. Eg.front desk.
     * 
     * @return the shipmentLocation value.
     */
    public String shipmentLocation() {
        return this.shipmentLocation;
    }

    /**
     * Set the shipmentLocation property: Shipment Location in the pickup place. Eg.front desk.
     * 
     * @param shipmentLocation the shipmentLocation value to set.
     * @return the ShipmentPickUpRequest object itself.
     */
    public ShipmentPickUpRequest withShipmentLocation(String shipmentLocation) {
        this.shipmentLocation = shipmentLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (startTime() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property startTime in model ShipmentPickUpRequest"));
        }
        if (endTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property endTime in model ShipmentPickUpRequest"));
        }
        if (shipmentLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property shipmentLocation in model ShipmentPickUpRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ShipmentPickUpRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("shipmentLocation", this.shipmentLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShipmentPickUpRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShipmentPickUpRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ShipmentPickUpRequest.
     */
    public static ShipmentPickUpRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShipmentPickUpRequest deserializedShipmentPickUpRequest = new ShipmentPickUpRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedShipmentPickUpRequest.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedShipmentPickUpRequest.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("shipmentLocation".equals(fieldName)) {
                    deserializedShipmentPickUpRequest.shipmentLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShipmentPickUpRequest;
        });
    }
}
