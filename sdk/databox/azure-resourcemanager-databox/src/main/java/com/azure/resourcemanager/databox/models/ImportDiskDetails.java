// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Import disk details.
 */
@Fluent
public final class ImportDiskDetails implements JsonSerializable<ImportDiskDetails> {
    /*
     * The relative path of the manifest file on the disk.
     */
    private String manifestFile;

    /*
     * The Base16-encoded MD5 hash of the manifest file on the disk.
     */
    private String manifestHash;

    /*
     * BitLocker key used to encrypt the disk.
     */
    private String bitLockerKey;

    /*
     * Path to backed up manifest, only returned if enableManifestBackup is true.
     */
    private String backupManifestCloudPath;

    /**
     * Creates an instance of ImportDiskDetails class.
     */
    public ImportDiskDetails() {
    }

    /**
     * Get the manifestFile property: The relative path of the manifest file on the disk.
     * 
     * @return the manifestFile value.
     */
    public String manifestFile() {
        return this.manifestFile;
    }

    /**
     * Set the manifestFile property: The relative path of the manifest file on the disk.
     * 
     * @param manifestFile the manifestFile value to set.
     * @return the ImportDiskDetails object itself.
     */
    public ImportDiskDetails withManifestFile(String manifestFile) {
        this.manifestFile = manifestFile;
        return this;
    }

    /**
     * Get the manifestHash property: The Base16-encoded MD5 hash of the manifest file on the disk.
     * 
     * @return the manifestHash value.
     */
    public String manifestHash() {
        return this.manifestHash;
    }

    /**
     * Set the manifestHash property: The Base16-encoded MD5 hash of the manifest file on the disk.
     * 
     * @param manifestHash the manifestHash value to set.
     * @return the ImportDiskDetails object itself.
     */
    public ImportDiskDetails withManifestHash(String manifestHash) {
        this.manifestHash = manifestHash;
        return this;
    }

    /**
     * Get the bitLockerKey property: BitLocker key used to encrypt the disk.
     * 
     * @return the bitLockerKey value.
     */
    public String bitLockerKey() {
        return this.bitLockerKey;
    }

    /**
     * Set the bitLockerKey property: BitLocker key used to encrypt the disk.
     * 
     * @param bitLockerKey the bitLockerKey value to set.
     * @return the ImportDiskDetails object itself.
     */
    public ImportDiskDetails withBitLockerKey(String bitLockerKey) {
        this.bitLockerKey = bitLockerKey;
        return this;
    }

    /**
     * Get the backupManifestCloudPath property: Path to backed up manifest, only returned if enableManifestBackup is
     * true.
     * 
     * @return the backupManifestCloudPath value.
     */
    public String backupManifestCloudPath() {
        return this.backupManifestCloudPath;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (manifestFile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property manifestFile in model ImportDiskDetails"));
        }
        if (manifestHash() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property manifestHash in model ImportDiskDetails"));
        }
        if (bitLockerKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property bitLockerKey in model ImportDiskDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImportDiskDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("manifestFile", this.manifestFile);
        jsonWriter.writeStringField("manifestHash", this.manifestHash);
        jsonWriter.writeStringField("bitLockerKey", this.bitLockerKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportDiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportDiskDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImportDiskDetails.
     */
    public static ImportDiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImportDiskDetails deserializedImportDiskDetails = new ImportDiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("manifestFile".equals(fieldName)) {
                    deserializedImportDiskDetails.manifestFile = reader.getString();
                } else if ("manifestHash".equals(fieldName)) {
                    deserializedImportDiskDetails.manifestHash = reader.getString();
                } else if ("bitLockerKey".equals(fieldName)) {
                    deserializedImportDiskDetails.bitLockerKey = reader.getString();
                } else if ("backupManifestCloudPath".equals(fieldName)) {
                    deserializedImportDiskDetails.backupManifestCloudPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImportDiskDetails;
        });
    }
}
