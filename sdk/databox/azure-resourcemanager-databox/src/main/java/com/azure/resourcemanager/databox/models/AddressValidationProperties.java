// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The address validation output.
 */
@Immutable
public final class AddressValidationProperties extends ValidationInputResponse {
    /*
     * Identifies the type of validation response.
     */
    private ValidationInputDiscriminator validationType = ValidationInputDiscriminator.VALIDATE_ADDRESS;

    /*
     * The address validation status.
     */
    private AddressValidationStatus validationStatus;

    /*
     * List of alternate addresses.
     */
    private List<ShippingAddress> alternateAddresses;

    /*
     * Error code and message of validation response.
     */
    private CloudError error;

    /**
     * Creates an instance of AddressValidationProperties class.
     */
    public AddressValidationProperties() {
    }

    /**
     * Get the validationType property: Identifies the type of validation response.
     * 
     * @return the validationType value.
     */
    @Override
    public ValidationInputDiscriminator validationType() {
        return this.validationType;
    }

    /**
     * Get the validationStatus property: The address validation status.
     * 
     * @return the validationStatus value.
     */
    public AddressValidationStatus validationStatus() {
        return this.validationStatus;
    }

    /**
     * Get the alternateAddresses property: List of alternate addresses.
     * 
     * @return the alternateAddresses value.
     */
    public List<ShippingAddress> alternateAddresses() {
        return this.alternateAddresses;
    }

    /**
     * Get the error property: Error code and message of validation response.
     * 
     * @return the error value.
     */
    @Override
    public CloudError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (alternateAddresses() != null) {
            alternateAddresses().forEach(e -> e.validate());
        }
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("validationType",
            this.validationType == null ? null : this.validationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddressValidationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddressValidationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddressValidationProperties.
     */
    public static AddressValidationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddressValidationProperties deserializedAddressValidationProperties = new AddressValidationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("error".equals(fieldName)) {
                    deserializedAddressValidationProperties.error = CloudError.fromJson(reader);
                } else if ("validationType".equals(fieldName)) {
                    deserializedAddressValidationProperties.validationType
                        = ValidationInputDiscriminator.fromString(reader.getString());
                } else if ("validationStatus".equals(fieldName)) {
                    deserializedAddressValidationProperties.validationStatus
                        = AddressValidationStatus.fromString(reader.getString());
                } else if ("alternateAddresses".equals(fieldName)) {
                    List<ShippingAddress> alternateAddresses
                        = reader.readArray(reader1 -> ShippingAddress.fromJson(reader1));
                    deserializedAddressValidationProperties.alternateAddresses = alternateAddresses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddressValidationProperties;
        });
    }
}
