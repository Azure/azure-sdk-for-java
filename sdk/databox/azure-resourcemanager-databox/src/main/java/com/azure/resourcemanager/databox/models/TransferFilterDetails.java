// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the filtering the transfer of data.
 */
@Fluent
public final class TransferFilterDetails implements JsonSerializable<TransferFilterDetails> {
    /*
     * Type of the account of data.
     */
    private DataAccountType dataAccountType;

    /*
     * Filter details to transfer blobs.
     */
    private BlobFilterDetails blobFilterDetails;

    /*
     * Filter details to transfer Azure files.
     */
    private AzureFileFilterDetails azureFileFilterDetails;

    /*
     * Details of the filter files to be used for data transfer.
     */
    private List<FilterFileDetails> filterFileDetails;

    /**
     * Creates an instance of TransferFilterDetails class.
     */
    public TransferFilterDetails() {
    }

    /**
     * Get the dataAccountType property: Type of the account of data.
     * 
     * @return the dataAccountType value.
     */
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Set the dataAccountType property: Type of the account of data.
     * 
     * @param dataAccountType the dataAccountType value to set.
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withDataAccountType(DataAccountType dataAccountType) {
        this.dataAccountType = dataAccountType;
        return this;
    }

    /**
     * Get the blobFilterDetails property: Filter details to transfer blobs.
     * 
     * @return the blobFilterDetails value.
     */
    public BlobFilterDetails blobFilterDetails() {
        return this.blobFilterDetails;
    }

    /**
     * Set the blobFilterDetails property: Filter details to transfer blobs.
     * 
     * @param blobFilterDetails the blobFilterDetails value to set.
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withBlobFilterDetails(BlobFilterDetails blobFilterDetails) {
        this.blobFilterDetails = blobFilterDetails;
        return this;
    }

    /**
     * Get the azureFileFilterDetails property: Filter details to transfer Azure files.
     * 
     * @return the azureFileFilterDetails value.
     */
    public AzureFileFilterDetails azureFileFilterDetails() {
        return this.azureFileFilterDetails;
    }

    /**
     * Set the azureFileFilterDetails property: Filter details to transfer Azure files.
     * 
     * @param azureFileFilterDetails the azureFileFilterDetails value to set.
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withAzureFileFilterDetails(AzureFileFilterDetails azureFileFilterDetails) {
        this.azureFileFilterDetails = azureFileFilterDetails;
        return this;
    }

    /**
     * Get the filterFileDetails property: Details of the filter files to be used for data transfer.
     * 
     * @return the filterFileDetails value.
     */
    public List<FilterFileDetails> filterFileDetails() {
        return this.filterFileDetails;
    }

    /**
     * Set the filterFileDetails property: Details of the filter files to be used for data transfer.
     * 
     * @param filterFileDetails the filterFileDetails value to set.
     * @return the TransferFilterDetails object itself.
     */
    public TransferFilterDetails withFilterFileDetails(List<FilterFileDetails> filterFileDetails) {
        this.filterFileDetails = filterFileDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataAccountType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataAccountType in model TransferFilterDetails"));
        }
        if (blobFilterDetails() != null) {
            blobFilterDetails().validate();
        }
        if (azureFileFilterDetails() != null) {
            azureFileFilterDetails().validate();
        }
        if (filterFileDetails() != null) {
            filterFileDetails().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TransferFilterDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataAccountType",
            this.dataAccountType == null ? null : this.dataAccountType.toString());
        jsonWriter.writeJsonField("blobFilterDetails", this.blobFilterDetails);
        jsonWriter.writeJsonField("azureFileFilterDetails", this.azureFileFilterDetails);
        jsonWriter.writeArrayField("filterFileDetails", this.filterFileDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransferFilterDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransferFilterDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TransferFilterDetails.
     */
    public static TransferFilterDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransferFilterDetails deserializedTransferFilterDetails = new TransferFilterDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataAccountType".equals(fieldName)) {
                    deserializedTransferFilterDetails.dataAccountType = DataAccountType.fromString(reader.getString());
                } else if ("blobFilterDetails".equals(fieldName)) {
                    deserializedTransferFilterDetails.blobFilterDetails = BlobFilterDetails.fromJson(reader);
                } else if ("azureFileFilterDetails".equals(fieldName)) {
                    deserializedTransferFilterDetails.azureFileFilterDetails = AzureFileFilterDetails.fromJson(reader);
                } else if ("filterFileDetails".equals(fieldName)) {
                    List<FilterFileDetails> filterFileDetails
                        = reader.readArray(reader1 -> FilterFileDetails.fromJson(reader1));
                    deserializedTransferFilterDetails.filterFileDetails = filterFileDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransferFilterDetails;
        });
    }
}
