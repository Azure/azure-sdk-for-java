// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Granular Copy progress.
 */
@Immutable
public class GranularCopyProgress implements JsonSerializable<GranularCopyProgress> {
    /*
     * Name of the storage account. This will be empty for data account types other than storage account.
     */
    private String storageAccountName;

    /*
     * Transfer type of data
     */
    private TransferType transferType;

    /*
     * Data Account Type.
     */
    private DataAccountType dataAccountType;

    /*
     * Id of the account where the data needs to be uploaded.
     */
    private String accountId;

    /*
     * To indicate bytes transferred.
     */
    private Long bytesProcessed;

    /*
     * Total amount of data to be processed by the job.
     */
    private Long totalBytesToProcess;

    /*
     * Number of files processed
     */
    private Long filesProcessed;

    /*
     * Total files to process
     */
    private Long totalFilesToProcess;

    /*
     * Number of files not adhering to azure naming conventions which were processed by automatic renaming
     */
    private Long invalidFilesProcessed;

    /*
     * Total amount of data not adhering to azure naming conventions which were processed by automatic renaming
     */
    private Long invalidFileBytesUploaded;

    /*
     * Number of folders not adhering to azure naming conventions which were processed by automatic renaming
     */
    private Long renamedContainerCount;

    /*
     * Number of files which could not be copied
     */
    private Long filesErroredOut;

    /*
     * To indicate directories errored out in the job.
     */
    private Long directoriesErroredOut;

    /*
     * To indicate directories renamed
     */
    private Long invalidDirectoriesProcessed;

    /*
     * To indicate if enumeration of data is in progress.
     * Until this is true, the TotalBytesToProcess may not be valid.
     */
    private Boolean isEnumerationInProgress;

    /*
     * Error, if any, in the stage
     */
    private CloudError error;

    /*
     * Available actions on the job.
     */
    private List<CustomerResolutionCode> actions;

    /**
     * Creates an instance of GranularCopyProgress class.
     */
    public GranularCopyProgress() {
    }

    /**
     * Get the storageAccountName property: Name of the storage account. This will be empty for data account types other
     * than storage account.
     * 
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: Name of the storage account. This will be empty for data account types other
     * than storage account.
     * 
     * @param storageAccountName the storageAccountName value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Get the transferType property: Transfer type of data.
     * 
     * @return the transferType value.
     */
    public TransferType transferType() {
        return this.transferType;
    }

    /**
     * Set the transferType property: Transfer type of data.
     * 
     * @param transferType the transferType value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withTransferType(TransferType transferType) {
        this.transferType = transferType;
        return this;
    }

    /**
     * Get the dataAccountType property: Data Account Type.
     * 
     * @return the dataAccountType value.
     */
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Set the dataAccountType property: Data Account Type.
     * 
     * @param dataAccountType the dataAccountType value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withDataAccountType(DataAccountType dataAccountType) {
        this.dataAccountType = dataAccountType;
        return this;
    }

    /**
     * Get the accountId property: Id of the account where the data needs to be uploaded.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Set the accountId property: Id of the account where the data needs to be uploaded.
     * 
     * @param accountId the accountId value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * Get the bytesProcessed property: To indicate bytes transferred.
     * 
     * @return the bytesProcessed value.
     */
    public Long bytesProcessed() {
        return this.bytesProcessed;
    }

    /**
     * Set the bytesProcessed property: To indicate bytes transferred.
     * 
     * @param bytesProcessed the bytesProcessed value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withBytesProcessed(Long bytesProcessed) {
        this.bytesProcessed = bytesProcessed;
        return this;
    }

    /**
     * Get the totalBytesToProcess property: Total amount of data to be processed by the job.
     * 
     * @return the totalBytesToProcess value.
     */
    public Long totalBytesToProcess() {
        return this.totalBytesToProcess;
    }

    /**
     * Set the totalBytesToProcess property: Total amount of data to be processed by the job.
     * 
     * @param totalBytesToProcess the totalBytesToProcess value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withTotalBytesToProcess(Long totalBytesToProcess) {
        this.totalBytesToProcess = totalBytesToProcess;
        return this;
    }

    /**
     * Get the filesProcessed property: Number of files processed.
     * 
     * @return the filesProcessed value.
     */
    public Long filesProcessed() {
        return this.filesProcessed;
    }

    /**
     * Set the filesProcessed property: Number of files processed.
     * 
     * @param filesProcessed the filesProcessed value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withFilesProcessed(Long filesProcessed) {
        this.filesProcessed = filesProcessed;
        return this;
    }

    /**
     * Get the totalFilesToProcess property: Total files to process.
     * 
     * @return the totalFilesToProcess value.
     */
    public Long totalFilesToProcess() {
        return this.totalFilesToProcess;
    }

    /**
     * Set the totalFilesToProcess property: Total files to process.
     * 
     * @param totalFilesToProcess the totalFilesToProcess value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withTotalFilesToProcess(Long totalFilesToProcess) {
        this.totalFilesToProcess = totalFilesToProcess;
        return this;
    }

    /**
     * Get the invalidFilesProcessed property: Number of files not adhering to azure naming conventions which were
     * processed by automatic renaming.
     * 
     * @return the invalidFilesProcessed value.
     */
    public Long invalidFilesProcessed() {
        return this.invalidFilesProcessed;
    }

    /**
     * Set the invalidFilesProcessed property: Number of files not adhering to azure naming conventions which were
     * processed by automatic renaming.
     * 
     * @param invalidFilesProcessed the invalidFilesProcessed value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withInvalidFilesProcessed(Long invalidFilesProcessed) {
        this.invalidFilesProcessed = invalidFilesProcessed;
        return this;
    }

    /**
     * Get the invalidFileBytesUploaded property: Total amount of data not adhering to azure naming conventions which
     * were processed by automatic renaming.
     * 
     * @return the invalidFileBytesUploaded value.
     */
    public Long invalidFileBytesUploaded() {
        return this.invalidFileBytesUploaded;
    }

    /**
     * Set the invalidFileBytesUploaded property: Total amount of data not adhering to azure naming conventions which
     * were processed by automatic renaming.
     * 
     * @param invalidFileBytesUploaded the invalidFileBytesUploaded value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withInvalidFileBytesUploaded(Long invalidFileBytesUploaded) {
        this.invalidFileBytesUploaded = invalidFileBytesUploaded;
        return this;
    }

    /**
     * Get the renamedContainerCount property: Number of folders not adhering to azure naming conventions which were
     * processed by automatic renaming.
     * 
     * @return the renamedContainerCount value.
     */
    public Long renamedContainerCount() {
        return this.renamedContainerCount;
    }

    /**
     * Set the renamedContainerCount property: Number of folders not adhering to azure naming conventions which were
     * processed by automatic renaming.
     * 
     * @param renamedContainerCount the renamedContainerCount value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withRenamedContainerCount(Long renamedContainerCount) {
        this.renamedContainerCount = renamedContainerCount;
        return this;
    }

    /**
     * Get the filesErroredOut property: Number of files which could not be copied.
     * 
     * @return the filesErroredOut value.
     */
    public Long filesErroredOut() {
        return this.filesErroredOut;
    }

    /**
     * Set the filesErroredOut property: Number of files which could not be copied.
     * 
     * @param filesErroredOut the filesErroredOut value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withFilesErroredOut(Long filesErroredOut) {
        this.filesErroredOut = filesErroredOut;
        return this;
    }

    /**
     * Get the directoriesErroredOut property: To indicate directories errored out in the job.
     * 
     * @return the directoriesErroredOut value.
     */
    public Long directoriesErroredOut() {
        return this.directoriesErroredOut;
    }

    /**
     * Set the directoriesErroredOut property: To indicate directories errored out in the job.
     * 
     * @param directoriesErroredOut the directoriesErroredOut value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withDirectoriesErroredOut(Long directoriesErroredOut) {
        this.directoriesErroredOut = directoriesErroredOut;
        return this;
    }

    /**
     * Get the invalidDirectoriesProcessed property: To indicate directories renamed.
     * 
     * @return the invalidDirectoriesProcessed value.
     */
    public Long invalidDirectoriesProcessed() {
        return this.invalidDirectoriesProcessed;
    }

    /**
     * Set the invalidDirectoriesProcessed property: To indicate directories renamed.
     * 
     * @param invalidDirectoriesProcessed the invalidDirectoriesProcessed value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withInvalidDirectoriesProcessed(Long invalidDirectoriesProcessed) {
        this.invalidDirectoriesProcessed = invalidDirectoriesProcessed;
        return this;
    }

    /**
     * Get the isEnumerationInProgress property: To indicate if enumeration of data is in progress.
     * Until this is true, the TotalBytesToProcess may not be valid.
     * 
     * @return the isEnumerationInProgress value.
     */
    public Boolean isEnumerationInProgress() {
        return this.isEnumerationInProgress;
    }

    /**
     * Set the isEnumerationInProgress property: To indicate if enumeration of data is in progress.
     * Until this is true, the TotalBytesToProcess may not be valid.
     * 
     * @param isEnumerationInProgress the isEnumerationInProgress value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withIsEnumerationInProgress(Boolean isEnumerationInProgress) {
        this.isEnumerationInProgress = isEnumerationInProgress;
        return this;
    }

    /**
     * Get the error property: Error, if any, in the stage.
     * 
     * @return the error value.
     */
    public CloudError error() {
        return this.error;
    }

    /**
     * Set the error property: Error, if any, in the stage.
     * 
     * @param error the error value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withError(CloudError error) {
        this.error = error;
        return this;
    }

    /**
     * Get the actions property: Available actions on the job.
     * 
     * @return the actions value.
     */
    public List<CustomerResolutionCode> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: Available actions on the job.
     * 
     * @param actions the actions value to set.
     * @return the GranularCopyProgress object itself.
     */
    GranularCopyProgress withActions(List<CustomerResolutionCode> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GranularCopyProgress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GranularCopyProgress if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GranularCopyProgress.
     */
    public static GranularCopyProgress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GranularCopyProgress deserializedGranularCopyProgress = new GranularCopyProgress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageAccountName".equals(fieldName)) {
                    deserializedGranularCopyProgress.storageAccountName = reader.getString();
                } else if ("transferType".equals(fieldName)) {
                    deserializedGranularCopyProgress.transferType = TransferType.fromString(reader.getString());
                } else if ("dataAccountType".equals(fieldName)) {
                    deserializedGranularCopyProgress.dataAccountType = DataAccountType.fromString(reader.getString());
                } else if ("accountId".equals(fieldName)) {
                    deserializedGranularCopyProgress.accountId = reader.getString();
                } else if ("bytesProcessed".equals(fieldName)) {
                    deserializedGranularCopyProgress.bytesProcessed = reader.getNullable(JsonReader::getLong);
                } else if ("totalBytesToProcess".equals(fieldName)) {
                    deserializedGranularCopyProgress.totalBytesToProcess = reader.getNullable(JsonReader::getLong);
                } else if ("filesProcessed".equals(fieldName)) {
                    deserializedGranularCopyProgress.filesProcessed = reader.getNullable(JsonReader::getLong);
                } else if ("totalFilesToProcess".equals(fieldName)) {
                    deserializedGranularCopyProgress.totalFilesToProcess = reader.getNullable(JsonReader::getLong);
                } else if ("invalidFilesProcessed".equals(fieldName)) {
                    deserializedGranularCopyProgress.invalidFilesProcessed = reader.getNullable(JsonReader::getLong);
                } else if ("invalidFileBytesUploaded".equals(fieldName)) {
                    deserializedGranularCopyProgress.invalidFileBytesUploaded = reader.getNullable(JsonReader::getLong);
                } else if ("renamedContainerCount".equals(fieldName)) {
                    deserializedGranularCopyProgress.renamedContainerCount = reader.getNullable(JsonReader::getLong);
                } else if ("filesErroredOut".equals(fieldName)) {
                    deserializedGranularCopyProgress.filesErroredOut = reader.getNullable(JsonReader::getLong);
                } else if ("directoriesErroredOut".equals(fieldName)) {
                    deserializedGranularCopyProgress.directoriesErroredOut = reader.getNullable(JsonReader::getLong);
                } else if ("invalidDirectoriesProcessed".equals(fieldName)) {
                    deserializedGranularCopyProgress.invalidDirectoriesProcessed
                        = reader.getNullable(JsonReader::getLong);
                } else if ("isEnumerationInProgress".equals(fieldName)) {
                    deserializedGranularCopyProgress.isEnumerationInProgress
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("error".equals(fieldName)) {
                    deserializedGranularCopyProgress.error = CloudError.fromJson(reader);
                } else if ("actions".equals(fieldName)) {
                    List<CustomerResolutionCode> actions
                        = reader.readArray(reader1 -> CustomerResolutionCode.fromString(reader1.getString()));
                    deserializedGranularCopyProgress.actions = actions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGranularCopyProgress;
        });
    }
}
