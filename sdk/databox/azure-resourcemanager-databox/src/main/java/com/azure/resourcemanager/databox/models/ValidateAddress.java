// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The requirements to validate customer address where the device needs to be shipped.
 */
@Fluent
public final class ValidateAddress extends ValidationInputRequest {
    /*
     * Identifies the type of validation request.
     */
    private ValidationInputDiscriminator validationType = ValidationInputDiscriminator.VALIDATE_ADDRESS;

    /*
     * Shipping address of the customer.
     */
    private ShippingAddress shippingAddress;

    /*
     * Device type to be used for the job.
     */
    private SkuName deviceType;

    /*
     * Preferences related to the shipment logistics of the sku.
     */
    private TransportPreferences transportPreferences;

    /**
     * Creates an instance of ValidateAddress class.
     */
    public ValidateAddress() {
    }

    /**
     * Get the validationType property: Identifies the type of validation request.
     * 
     * @return the validationType value.
     */
    @Override
    public ValidationInputDiscriminator validationType() {
        return this.validationType;
    }

    /**
     * Get the shippingAddress property: Shipping address of the customer.
     * 
     * @return the shippingAddress value.
     */
    public ShippingAddress shippingAddress() {
        return this.shippingAddress;
    }

    /**
     * Set the shippingAddress property: Shipping address of the customer.
     * 
     * @param shippingAddress the shippingAddress value to set.
     * @return the ValidateAddress object itself.
     */
    public ValidateAddress withShippingAddress(ShippingAddress shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * Get the deviceType property: Device type to be used for the job.
     * 
     * @return the deviceType value.
     */
    public SkuName deviceType() {
        return this.deviceType;
    }

    /**
     * Set the deviceType property: Device type to be used for the job.
     * 
     * @param deviceType the deviceType value to set.
     * @return the ValidateAddress object itself.
     */
    public ValidateAddress withDeviceType(SkuName deviceType) {
        this.deviceType = deviceType;
        return this;
    }

    /**
     * Get the transportPreferences property: Preferences related to the shipment logistics of the sku.
     * 
     * @return the transportPreferences value.
     */
    public TransportPreferences transportPreferences() {
        return this.transportPreferences;
    }

    /**
     * Set the transportPreferences property: Preferences related to the shipment logistics of the sku.
     * 
     * @param transportPreferences the transportPreferences value to set.
     * @return the ValidateAddress object itself.
     */
    public ValidateAddress withTransportPreferences(TransportPreferences transportPreferences) {
        this.transportPreferences = transportPreferences;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (shippingAddress() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property shippingAddress in model ValidateAddress"));
        } else {
            shippingAddress().validate();
        }
        if (deviceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property deviceType in model ValidateAddress"));
        }
        if (transportPreferences() != null) {
            transportPreferences().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidateAddress.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("shippingAddress", this.shippingAddress);
        jsonWriter.writeStringField("deviceType", this.deviceType == null ? null : this.deviceType.toString());
        jsonWriter.writeStringField("validationType",
            this.validationType == null ? null : this.validationType.toString());
        jsonWriter.writeJsonField("transportPreferences", this.transportPreferences);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidateAddress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidateAddress if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ValidateAddress.
     */
    public static ValidateAddress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidateAddress deserializedValidateAddress = new ValidateAddress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("shippingAddress".equals(fieldName)) {
                    deserializedValidateAddress.shippingAddress = ShippingAddress.fromJson(reader);
                } else if ("deviceType".equals(fieldName)) {
                    deserializedValidateAddress.deviceType = SkuName.fromString(reader.getString());
                } else if ("validationType".equals(fieldName)) {
                    deserializedValidateAddress.validationType
                        = ValidationInputDiscriminator.fromString(reader.getString());
                } else if ("transportPreferences".equals(fieldName)) {
                    deserializedValidateAddress.transportPreferences = TransportPreferences.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidateAddress;
        });
    }
}
