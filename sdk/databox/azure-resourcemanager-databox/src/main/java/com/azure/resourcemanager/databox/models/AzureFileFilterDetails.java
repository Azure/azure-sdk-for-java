// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Filter details to transfer Azure files.
 */
@Fluent
public final class AzureFileFilterDetails implements JsonSerializable<AzureFileFilterDetails> {
    /*
     * Prefix list of the Azure files to be transferred.
     */
    private List<String> filePrefixList;

    /*
     * List of full path of the files to be transferred.
     */
    private List<String> filePathList;

    /*
     * List of file shares to be transferred.
     */
    private List<String> fileShareList;

    /**
     * Creates an instance of AzureFileFilterDetails class.
     */
    public AzureFileFilterDetails() {
    }

    /**
     * Get the filePrefixList property: Prefix list of the Azure files to be transferred.
     * 
     * @return the filePrefixList value.
     */
    public List<String> filePrefixList() {
        return this.filePrefixList;
    }

    /**
     * Set the filePrefixList property: Prefix list of the Azure files to be transferred.
     * 
     * @param filePrefixList the filePrefixList value to set.
     * @return the AzureFileFilterDetails object itself.
     */
    public AzureFileFilterDetails withFilePrefixList(List<String> filePrefixList) {
        this.filePrefixList = filePrefixList;
        return this;
    }

    /**
     * Get the filePathList property: List of full path of the files to be transferred.
     * 
     * @return the filePathList value.
     */
    public List<String> filePathList() {
        return this.filePathList;
    }

    /**
     * Set the filePathList property: List of full path of the files to be transferred.
     * 
     * @param filePathList the filePathList value to set.
     * @return the AzureFileFilterDetails object itself.
     */
    public AzureFileFilterDetails withFilePathList(List<String> filePathList) {
        this.filePathList = filePathList;
        return this;
    }

    /**
     * Get the fileShareList property: List of file shares to be transferred.
     * 
     * @return the fileShareList value.
     */
    public List<String> fileShareList() {
        return this.fileShareList;
    }

    /**
     * Set the fileShareList property: List of file shares to be transferred.
     * 
     * @param fileShareList the fileShareList value to set.
     * @return the AzureFileFilterDetails object itself.
     */
    public AzureFileFilterDetails withFileShareList(List<String> fileShareList) {
        this.fileShareList = fileShareList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("filePrefixList", this.filePrefixList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("filePathList", this.filePathList, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("fileShareList", this.fileShareList,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureFileFilterDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureFileFilterDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureFileFilterDetails.
     */
    public static AzureFileFilterDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureFileFilterDetails deserializedAzureFileFilterDetails = new AzureFileFilterDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filePrefixList".equals(fieldName)) {
                    List<String> filePrefixList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureFileFilterDetails.filePrefixList = filePrefixList;
                } else if ("filePathList".equals(fieldName)) {
                    List<String> filePathList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureFileFilterDetails.filePathList = filePathList;
                } else if ("fileShareList".equals(fieldName)) {
                    List<String> fileShareList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureFileFilterDetails.fileShareList = fileShareList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureFileFilterDetails;
        });
    }
}
