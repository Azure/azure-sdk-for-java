// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Job details.
 */
@Fluent
public class JobDetails implements JsonSerializable<JobDetails> {
    /*
     * Indicates the type of job details.
     */
    private ClassDiscriminator jobDetailsType = ClassDiscriminator.fromString("JobDetails");

    /*
     * List of stages that run in the job.
     */
    private List<JobStages> jobStages;

    /*
     * Contact details for notification and shipping.
     */
    private ContactDetails contactDetails;

    /*
     * Shipping address of the customer.
     */
    private ShippingAddress shippingAddress;

    /*
     * Delivery package shipping details.
     */
    private PackageShippingDetails deliveryPackage;

    /*
     * Return package shipping details.
     */
    private PackageShippingDetails returnPackage;

    /*
     * Details of the data to be imported into azure.
     */
    private List<DataImportDetails> dataImportDetails;

    /*
     * Details of the data to be exported from azure.
     */
    private List<DataExportDetails> dataExportDetails;

    /*
     * Preferences for the order.
     */
    private Preferences preferences;

    /*
     * Optional Reverse Shipping details for order.
     */
    private ReverseShippingDetails reverseShippingDetails;

    /*
     * List of copy log details.
     */
    private List<CopyLogDetails> copyLogDetails;

    /*
     * Shared access key to download the return shipment label
     */
    private String reverseShipmentLabelSasKey;

    /*
     * Shared access key to download the chain of custody logs
     */
    private String chainOfCustodySasKey;

    /*
     * Holds device data erasure details
     */
    private DeviceErasureDetails deviceErasureDetails;

    /*
     * Details about which key encryption type is being used.
     */
    private KeyEncryptionKey keyEncryptionKey;

    /*
     * The expected size of the data, which needs to be transferred in this job, in terabytes.
     */
    private Integer expectedDataSizeInTeraBytes;

    /*
     * Available actions on the job.
     */
    private List<CustomerResolutionCode> actions;

    /*
     * Last mitigation action performed on the job.
     */
    private LastMitigationActionOnJob lastMitigationActionOnJob;

    /*
     * Datacenter address to ship to, for the given sku and storage location.
     */
    private DatacenterAddressResponse datacenterAddress;

    /*
     * DataCenter code.
     */
    private DataCenterCode dataCenterCode;

    /**
     * Creates an instance of JobDetails class.
     */
    public JobDetails() {
    }

    /**
     * Get the jobDetailsType property: Indicates the type of job details.
     * 
     * @return the jobDetailsType value.
     */
    public ClassDiscriminator jobDetailsType() {
        return this.jobDetailsType;
    }

    /**
     * Get the jobStages property: List of stages that run in the job.
     * 
     * @return the jobStages value.
     */
    public List<JobStages> jobStages() {
        return this.jobStages;
    }

    /**
     * Set the jobStages property: List of stages that run in the job.
     * 
     * @param jobStages the jobStages value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withJobStages(List<JobStages> jobStages) {
        this.jobStages = jobStages;
        return this;
    }

    /**
     * Get the contactDetails property: Contact details for notification and shipping.
     * 
     * @return the contactDetails value.
     */
    public ContactDetails contactDetails() {
        return this.contactDetails;
    }

    /**
     * Set the contactDetails property: Contact details for notification and shipping.
     * 
     * @param contactDetails the contactDetails value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withContactDetails(ContactDetails contactDetails) {
        this.contactDetails = contactDetails;
        return this;
    }

    /**
     * Get the shippingAddress property: Shipping address of the customer.
     * 
     * @return the shippingAddress value.
     */
    public ShippingAddress shippingAddress() {
        return this.shippingAddress;
    }

    /**
     * Set the shippingAddress property: Shipping address of the customer.
     * 
     * @param shippingAddress the shippingAddress value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withShippingAddress(ShippingAddress shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * Get the deliveryPackage property: Delivery package shipping details.
     * 
     * @return the deliveryPackage value.
     */
    public PackageShippingDetails deliveryPackage() {
        return this.deliveryPackage;
    }

    /**
     * Set the deliveryPackage property: Delivery package shipping details.
     * 
     * @param deliveryPackage the deliveryPackage value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withDeliveryPackage(PackageShippingDetails deliveryPackage) {
        this.deliveryPackage = deliveryPackage;
        return this;
    }

    /**
     * Get the returnPackage property: Return package shipping details.
     * 
     * @return the returnPackage value.
     */
    public PackageShippingDetails returnPackage() {
        return this.returnPackage;
    }

    /**
     * Set the returnPackage property: Return package shipping details.
     * 
     * @param returnPackage the returnPackage value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withReturnPackage(PackageShippingDetails returnPackage) {
        this.returnPackage = returnPackage;
        return this;
    }

    /**
     * Get the dataImportDetails property: Details of the data to be imported into azure.
     * 
     * @return the dataImportDetails value.
     */
    public List<DataImportDetails> dataImportDetails() {
        return this.dataImportDetails;
    }

    /**
     * Set the dataImportDetails property: Details of the data to be imported into azure.
     * 
     * @param dataImportDetails the dataImportDetails value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withDataImportDetails(List<DataImportDetails> dataImportDetails) {
        this.dataImportDetails = dataImportDetails;
        return this;
    }

    /**
     * Get the dataExportDetails property: Details of the data to be exported from azure.
     * 
     * @return the dataExportDetails value.
     */
    public List<DataExportDetails> dataExportDetails() {
        return this.dataExportDetails;
    }

    /**
     * Set the dataExportDetails property: Details of the data to be exported from azure.
     * 
     * @param dataExportDetails the dataExportDetails value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withDataExportDetails(List<DataExportDetails> dataExportDetails) {
        this.dataExportDetails = dataExportDetails;
        return this;
    }

    /**
     * Get the preferences property: Preferences for the order.
     * 
     * @return the preferences value.
     */
    public Preferences preferences() {
        return this.preferences;
    }

    /**
     * Set the preferences property: Preferences for the order.
     * 
     * @param preferences the preferences value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withPreferences(Preferences preferences) {
        this.preferences = preferences;
        return this;
    }

    /**
     * Get the reverseShippingDetails property: Optional Reverse Shipping details for order.
     * 
     * @return the reverseShippingDetails value.
     */
    public ReverseShippingDetails reverseShippingDetails() {
        return this.reverseShippingDetails;
    }

    /**
     * Set the reverseShippingDetails property: Optional Reverse Shipping details for order.
     * 
     * @param reverseShippingDetails the reverseShippingDetails value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withReverseShippingDetails(ReverseShippingDetails reverseShippingDetails) {
        this.reverseShippingDetails = reverseShippingDetails;
        return this;
    }

    /**
     * Get the copyLogDetails property: List of copy log details.
     * 
     * @return the copyLogDetails value.
     */
    public List<CopyLogDetails> copyLogDetails() {
        return this.copyLogDetails;
    }

    /**
     * Set the copyLogDetails property: List of copy log details.
     * 
     * @param copyLogDetails the copyLogDetails value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withCopyLogDetails(List<CopyLogDetails> copyLogDetails) {
        this.copyLogDetails = copyLogDetails;
        return this;
    }

    /**
     * Get the reverseShipmentLabelSasKey property: Shared access key to download the return shipment label.
     * 
     * @return the reverseShipmentLabelSasKey value.
     */
    public String reverseShipmentLabelSasKey() {
        return this.reverseShipmentLabelSasKey;
    }

    /**
     * Set the reverseShipmentLabelSasKey property: Shared access key to download the return shipment label.
     * 
     * @param reverseShipmentLabelSasKey the reverseShipmentLabelSasKey value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withReverseShipmentLabelSasKey(String reverseShipmentLabelSasKey) {
        this.reverseShipmentLabelSasKey = reverseShipmentLabelSasKey;
        return this;
    }

    /**
     * Get the chainOfCustodySasKey property: Shared access key to download the chain of custody logs.
     * 
     * @return the chainOfCustodySasKey value.
     */
    public String chainOfCustodySasKey() {
        return this.chainOfCustodySasKey;
    }

    /**
     * Set the chainOfCustodySasKey property: Shared access key to download the chain of custody logs.
     * 
     * @param chainOfCustodySasKey the chainOfCustodySasKey value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withChainOfCustodySasKey(String chainOfCustodySasKey) {
        this.chainOfCustodySasKey = chainOfCustodySasKey;
        return this;
    }

    /**
     * Get the deviceErasureDetails property: Holds device data erasure details.
     * 
     * @return the deviceErasureDetails value.
     */
    public DeviceErasureDetails deviceErasureDetails() {
        return this.deviceErasureDetails;
    }

    /**
     * Set the deviceErasureDetails property: Holds device data erasure details.
     * 
     * @param deviceErasureDetails the deviceErasureDetails value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withDeviceErasureDetails(DeviceErasureDetails deviceErasureDetails) {
        this.deviceErasureDetails = deviceErasureDetails;
        return this;
    }

    /**
     * Get the keyEncryptionKey property: Details about which key encryption type is being used.
     * 
     * @return the keyEncryptionKey value.
     */
    public KeyEncryptionKey keyEncryptionKey() {
        return this.keyEncryptionKey;
    }

    /**
     * Set the keyEncryptionKey property: Details about which key encryption type is being used.
     * 
     * @param keyEncryptionKey the keyEncryptionKey value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withKeyEncryptionKey(KeyEncryptionKey keyEncryptionKey) {
        this.keyEncryptionKey = keyEncryptionKey;
        return this;
    }

    /**
     * Get the expectedDataSizeInTeraBytes property: The expected size of the data, which needs to be transferred in
     * this job, in terabytes.
     * 
     * @return the expectedDataSizeInTeraBytes value.
     */
    public Integer expectedDataSizeInTeraBytes() {
        return this.expectedDataSizeInTeraBytes;
    }

    /**
     * Set the expectedDataSizeInTeraBytes property: The expected size of the data, which needs to be transferred in
     * this job, in terabytes.
     * 
     * @param expectedDataSizeInTeraBytes the expectedDataSizeInTeraBytes value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withExpectedDataSizeInTeraBytes(Integer expectedDataSizeInTeraBytes) {
        this.expectedDataSizeInTeraBytes = expectedDataSizeInTeraBytes;
        return this;
    }

    /**
     * Get the actions property: Available actions on the job.
     * 
     * @return the actions value.
     */
    public List<CustomerResolutionCode> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: Available actions on the job.
     * 
     * @param actions the actions value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withActions(List<CustomerResolutionCode> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Get the lastMitigationActionOnJob property: Last mitigation action performed on the job.
     * 
     * @return the lastMitigationActionOnJob value.
     */
    public LastMitigationActionOnJob lastMitigationActionOnJob() {
        return this.lastMitigationActionOnJob;
    }

    /**
     * Set the lastMitigationActionOnJob property: Last mitigation action performed on the job.
     * 
     * @param lastMitigationActionOnJob the lastMitigationActionOnJob value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withLastMitigationActionOnJob(LastMitigationActionOnJob lastMitigationActionOnJob) {
        this.lastMitigationActionOnJob = lastMitigationActionOnJob;
        return this;
    }

    /**
     * Get the datacenterAddress property: Datacenter address to ship to, for the given sku and storage location.
     * 
     * @return the datacenterAddress value.
     */
    public DatacenterAddressResponse datacenterAddress() {
        return this.datacenterAddress;
    }

    /**
     * Set the datacenterAddress property: Datacenter address to ship to, for the given sku and storage location.
     * 
     * @param datacenterAddress the datacenterAddress value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withDatacenterAddress(DatacenterAddressResponse datacenterAddress) {
        this.datacenterAddress = datacenterAddress;
        return this;
    }

    /**
     * Get the dataCenterCode property: DataCenter code.
     * 
     * @return the dataCenterCode value.
     */
    public DataCenterCode dataCenterCode() {
        return this.dataCenterCode;
    }

    /**
     * Set the dataCenterCode property: DataCenter code.
     * 
     * @param dataCenterCode the dataCenterCode value to set.
     * @return the JobDetails object itself.
     */
    JobDetails withDataCenterCode(DataCenterCode dataCenterCode) {
        this.dataCenterCode = dataCenterCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobStages() != null) {
            jobStages().forEach(e -> e.validate());
        }
        if (contactDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property contactDetails in model JobDetails"));
        } else {
            contactDetails().validate();
        }
        if (shippingAddress() != null) {
            shippingAddress().validate();
        }
        if (deliveryPackage() != null) {
            deliveryPackage().validate();
        }
        if (returnPackage() != null) {
            returnPackage().validate();
        }
        if (dataImportDetails() != null) {
            dataImportDetails().forEach(e -> e.validate());
        }
        if (dataExportDetails() != null) {
            dataExportDetails().forEach(e -> e.validate());
        }
        if (preferences() != null) {
            preferences().validate();
        }
        if (reverseShippingDetails() != null) {
            reverseShippingDetails().validate();
        }
        if (copyLogDetails() != null) {
            copyLogDetails().forEach(e -> e.validate());
        }
        if (deviceErasureDetails() != null) {
            deviceErasureDetails().validate();
        }
        if (keyEncryptionKey() != null) {
            keyEncryptionKey().validate();
        }
        if (lastMitigationActionOnJob() != null) {
            lastMitigationActionOnJob().validate();
        }
        if (datacenterAddress() != null) {
            datacenterAddress().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("contactDetails", this.contactDetails);
        jsonWriter.writeStringField("jobDetailsType",
            this.jobDetailsType == null ? null : this.jobDetailsType.toString());
        jsonWriter.writeJsonField("shippingAddress", this.shippingAddress);
        jsonWriter.writeArrayField("dataImportDetails", this.dataImportDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dataExportDetails", this.dataExportDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("preferences", this.preferences);
        jsonWriter.writeJsonField("reverseShippingDetails", this.reverseShippingDetails);
        jsonWriter.writeJsonField("keyEncryptionKey", this.keyEncryptionKey);
        jsonWriter.writeNumberField("expectedDataSizeInTeraBytes", this.expectedDataSizeInTeraBytes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobDetails if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobDetails.
     */
    public static JobDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("jobDetailsType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("DataBoxCustomerDisk".equals(discriminatorValue)) {
                    return DataBoxCustomerDiskJobDetails.fromJson(readerToUse.reset());
                } else if ("DataBoxDisk".equals(discriminatorValue)) {
                    return DataBoxDiskJobDetails.fromJson(readerToUse.reset());
                } else if ("DataBoxHeavy".equals(discriminatorValue)) {
                    return DataBoxHeavyJobDetails.fromJson(readerToUse.reset());
                } else if ("DataBox".equals(discriminatorValue)) {
                    return DataBoxJobDetails.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static JobDetails fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobDetails deserializedJobDetails = new JobDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contactDetails".equals(fieldName)) {
                    deserializedJobDetails.contactDetails = ContactDetails.fromJson(reader);
                } else if ("jobDetailsType".equals(fieldName)) {
                    deserializedJobDetails.jobDetailsType = ClassDiscriminator.fromString(reader.getString());
                } else if ("jobStages".equals(fieldName)) {
                    List<JobStages> jobStages = reader.readArray(reader1 -> JobStages.fromJson(reader1));
                    deserializedJobDetails.jobStages = jobStages;
                } else if ("shippingAddress".equals(fieldName)) {
                    deserializedJobDetails.shippingAddress = ShippingAddress.fromJson(reader);
                } else if ("deliveryPackage".equals(fieldName)) {
                    deserializedJobDetails.deliveryPackage = PackageShippingDetails.fromJson(reader);
                } else if ("returnPackage".equals(fieldName)) {
                    deserializedJobDetails.returnPackage = PackageShippingDetails.fromJson(reader);
                } else if ("dataImportDetails".equals(fieldName)) {
                    List<DataImportDetails> dataImportDetails
                        = reader.readArray(reader1 -> DataImportDetails.fromJson(reader1));
                    deserializedJobDetails.dataImportDetails = dataImportDetails;
                } else if ("dataExportDetails".equals(fieldName)) {
                    List<DataExportDetails> dataExportDetails
                        = reader.readArray(reader1 -> DataExportDetails.fromJson(reader1));
                    deserializedJobDetails.dataExportDetails = dataExportDetails;
                } else if ("preferences".equals(fieldName)) {
                    deserializedJobDetails.preferences = Preferences.fromJson(reader);
                } else if ("reverseShippingDetails".equals(fieldName)) {
                    deserializedJobDetails.reverseShippingDetails = ReverseShippingDetails.fromJson(reader);
                } else if ("copyLogDetails".equals(fieldName)) {
                    List<CopyLogDetails> copyLogDetails = reader.readArray(reader1 -> CopyLogDetails.fromJson(reader1));
                    deserializedJobDetails.copyLogDetails = copyLogDetails;
                } else if ("reverseShipmentLabelSasKey".equals(fieldName)) {
                    deserializedJobDetails.reverseShipmentLabelSasKey = reader.getString();
                } else if ("chainOfCustodySasKey".equals(fieldName)) {
                    deserializedJobDetails.chainOfCustodySasKey = reader.getString();
                } else if ("deviceErasureDetails".equals(fieldName)) {
                    deserializedJobDetails.deviceErasureDetails = DeviceErasureDetails.fromJson(reader);
                } else if ("keyEncryptionKey".equals(fieldName)) {
                    deserializedJobDetails.keyEncryptionKey = KeyEncryptionKey.fromJson(reader);
                } else if ("expectedDataSizeInTeraBytes".equals(fieldName)) {
                    deserializedJobDetails.expectedDataSizeInTeraBytes = reader.getNullable(JsonReader::getInt);
                } else if ("actions".equals(fieldName)) {
                    List<CustomerResolutionCode> actions
                        = reader.readArray(reader1 -> CustomerResolutionCode.fromString(reader1.getString()));
                    deserializedJobDetails.actions = actions;
                } else if ("lastMitigationActionOnJob".equals(fieldName)) {
                    deserializedJobDetails.lastMitigationActionOnJob = LastMitigationActionOnJob.fromJson(reader);
                } else if ("datacenterAddress".equals(fieldName)) {
                    deserializedJobDetails.datacenterAddress = DatacenterAddressResponse.fromJson(reader);
                } else if ("dataCenterCode".equals(fieldName)) {
                    deserializedJobDetails.dataCenterCode = DataCenterCode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobDetails;
        });
    }
}
