// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType
 * is given as TransferAll.
 */
@Fluent
public final class TransferConfigurationTransferAllDetails
    implements JsonSerializable<TransferConfigurationTransferAllDetails> {
    /*
     * Details to transfer all data.
     */
    private TransferAllDetails include;

    /**
     * Creates an instance of TransferConfigurationTransferAllDetails class.
     */
    public TransferConfigurationTransferAllDetails() {
    }

    /**
     * Get the include property: Details to transfer all data.
     * 
     * @return the include value.
     */
    public TransferAllDetails include() {
        return this.include;
    }

    /**
     * Set the include property: Details to transfer all data.
     * 
     * @param include the include value to set.
     * @return the TransferConfigurationTransferAllDetails object itself.
     */
    public TransferConfigurationTransferAllDetails withInclude(TransferAllDetails include) {
        this.include = include;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (include() != null) {
            include().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("include", this.include);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransferConfigurationTransferAllDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransferConfigurationTransferAllDetails if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TransferConfigurationTransferAllDetails.
     */
    public static TransferConfigurationTransferAllDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransferConfigurationTransferAllDetails deserializedTransferConfigurationTransferAllDetails
                = new TransferConfigurationTransferAllDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("include".equals(fieldName)) {
                    deserializedTransferConfigurationTransferAllDetails.include = TransferAllDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransferConfigurationTransferAllDetails;
        });
    }
}
