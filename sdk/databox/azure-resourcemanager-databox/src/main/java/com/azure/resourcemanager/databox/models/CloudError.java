// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Provides additional information about an http error response.
 */
@Fluent
public final class CloudError implements JsonSerializable<CloudError> {
    /*
     * Gets or sets additional error info.
     */
    private List<AdditionalErrorInfo> additionalInfo;

    /*
     * Error code.
     */
    private String code;

    /*
     * Gets or sets details for the error.
     */
    private List<CloudError> details;

    /*
     * The error message parsed from the body of the http error response.
     */
    private String message;

    /*
     * Gets or sets the target of the error.
     */
    private String target;

    /**
     * Creates an instance of CloudError class.
     */
    public CloudError() {
    }

    /**
     * Get the additionalInfo property: Gets or sets additional error info.
     * 
     * @return the additionalInfo value.
     */
    public List<AdditionalErrorInfo> additionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Get the code property: Error code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: Error code.
     * 
     * @param code the code value to set.
     * @return the CloudError object itself.
     */
    public CloudError withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the details property: Gets or sets details for the error.
     * 
     * @return the details value.
     */
    public List<CloudError> details() {
        return this.details;
    }

    /**
     * Get the message property: The error message parsed from the body of the http error response.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: The error message parsed from the body of the http error response.
     * 
     * @param message the message value to set.
     * @return the CloudError object itself.
     */
    public CloudError withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the target property: Gets or sets the target of the error.
     * 
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the target property: Gets or sets the target of the error.
     * 
     * @param target the target value to set.
     * @return the CloudError object itself.
     */
    public CloudError withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (additionalInfo() != null) {
            additionalInfo().forEach(e -> e.validate());
        }
        if (details() != null) {
            details().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("target", this.target);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudError if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CloudError.
     */
    public static CloudError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudError deserializedCloudError = new CloudError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalInfo".equals(fieldName)) {
                    List<AdditionalErrorInfo> additionalInfo
                        = reader.readArray(reader1 -> AdditionalErrorInfo.fromJson(reader1));
                    deserializedCloudError.additionalInfo = additionalInfo;
                } else if ("code".equals(fieldName)) {
                    deserializedCloudError.code = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<CloudError> details = reader.readArray(reader1 -> CloudError.fromJson(reader1));
                    deserializedCloudError.details = details;
                } else if ("message".equals(fieldName)) {
                    deserializedCloudError.message = reader.getString();
                } else if ("target".equals(fieldName)) {
                    deserializedCloudError.target = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudError;
        });
    }
}
