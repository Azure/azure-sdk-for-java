// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Sku.
 */
@Fluent
public final class Sku implements JsonSerializable<Sku> {
    /*
     * The sku name.
     */
    private SkuName name;

    /*
     * The display name of the sku.
     */
    private String displayName;

    /*
     * The sku family.
     */
    private String family;

    /*
     * The customer friendly name of the combination of version and capacity of the device. This field is necessary only
     * at the time of ordering the newer generation device i.e. AzureDataBox120 and AzureDataBox525 as of Feb/2025
     */
    private ModelName model;

    /**
     * Creates an instance of Sku class.
     */
    public Sku() {
    }

    /**
     * Get the name property: The sku name.
     * 
     * @return the name value.
     */
    public SkuName name() {
        return this.name;
    }

    /**
     * Set the name property: The sku name.
     * 
     * @param name the name value to set.
     * @return the Sku object itself.
     */
    public Sku withName(SkuName name) {
        this.name = name;
        return this;
    }

    /**
     * Get the displayName property: The display name of the sku.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the sku.
     * 
     * @param displayName the displayName value to set.
     * @return the Sku object itself.
     */
    public Sku withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the family property: The sku family.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: The sku family.
     * 
     * @param family the family value to set.
     * @return the Sku object itself.
     */
    public Sku withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the model property: The customer friendly name of the combination of version and capacity of the device. This
     * field is necessary only at the time of ordering the newer generation device i.e. AzureDataBox120 and
     * AzureDataBox525 as of Feb/2025.
     * 
     * @return the model value.
     */
    public ModelName model() {
        return this.model;
    }

    /**
     * Set the model property: The customer friendly name of the combination of version and capacity of the device. This
     * field is necessary only at the time of ordering the newer generation device i.e. AzureDataBox120 and
     * AzureDataBox525 as of Feb/2025.
     * 
     * @param model the model value to set.
     * @return the Sku object itself.
     */
    public Sku withModel(ModelName model) {
        this.model = model;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Sku"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Sku.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name == null ? null : this.name.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeStringField("model", this.model == null ? null : this.model.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Sku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Sku if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Sku.
     */
    public static Sku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Sku deserializedSku = new Sku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSku.name = SkuName.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedSku.displayName = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedSku.family = reader.getString();
                } else if ("model".equals(fieldName)) {
                    deserializedSku.model = ModelName.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSku;
        });
    }
}
