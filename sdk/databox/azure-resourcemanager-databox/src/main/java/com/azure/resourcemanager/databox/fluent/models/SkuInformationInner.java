// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databox.models.DataLocationToServiceLocationMap;
import com.azure.resourcemanager.databox.models.Sku;
import com.azure.resourcemanager.databox.models.SkuCapacity;
import com.azure.resourcemanager.databox.models.SkuCost;
import com.azure.resourcemanager.databox.models.SkuDisabledReason;
import java.io.IOException;
import java.util.List;

/**
 * Information of the sku.
 */
@Immutable
public final class SkuInformationInner implements JsonSerializable<SkuInformationInner> {
    /*
     * The Sku.
     */
    private Sku sku;

    /*
     * The sku is enabled or not.
     */
    private Boolean enabled;

    /*
     * Properties of the sku.
     */
    private SkuProperties innerProperties;

    /**
     * Creates an instance of SkuInformationInner class.
     */
    public SkuInformationInner() {
    }

    /**
     * Get the sku property: The Sku.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Get the enabled property: The sku is enabled or not.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Get the innerProperties property: Properties of the sku.
     * 
     * @return the innerProperties value.
     */
    private SkuProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the dataLocationToServiceLocationMap property: The map of data location to service location.
     * 
     * @return the dataLocationToServiceLocationMap value.
     */
    public List<DataLocationToServiceLocationMap> dataLocationToServiceLocationMap() {
        return this.innerProperties() == null ? null : this.innerProperties().dataLocationToServiceLocationMap();
    }

    /**
     * Get the capacity property: Capacity of the Sku.
     * 
     * @return the capacity value.
     */
    public SkuCapacity capacity() {
        return this.innerProperties() == null ? null : this.innerProperties().capacity();
    }

    /**
     * Get the costs property: Cost of the Sku.
     * 
     * @return the costs value.
     */
    public List<SkuCost> costs() {
        return this.innerProperties() == null ? null : this.innerProperties().costs();
    }

    /**
     * Get the apiVersions property: Api versions that support this Sku.
     * 
     * @return the apiVersions value.
     */
    public List<String> apiVersions() {
        return this.innerProperties() == null ? null : this.innerProperties().apiVersions();
    }

    /**
     * Get the disabledReason property: Reason why the Sku is disabled.
     * 
     * @return the disabledReason value.
     */
    public SkuDisabledReason disabledReason() {
        return this.innerProperties() == null ? null : this.innerProperties().disabledReason();
    }

    /**
     * Get the disabledReasonMessage property: Message for why the Sku is disabled.
     * 
     * @return the disabledReasonMessage value.
     */
    public String disabledReasonMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().disabledReasonMessage();
    }

    /**
     * Get the requiredFeature property: Required feature to access the sku.
     * 
     * @return the requiredFeature value.
     */
    public String requiredFeature() {
        return this.innerProperties() == null ? null : this.innerProperties().requiredFeature();
    }

    /**
     * Get the countriesWithinCommerceBoundary property: List of all the Countries in the SKU specific commerce
     * boundary.
     * 
     * @return the countriesWithinCommerceBoundary value.
     */
    public List<String> countriesWithinCommerceBoundary() {
        return this.innerProperties() == null ? null : this.innerProperties().countriesWithinCommerceBoundary();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuInformationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuInformationInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuInformationInner.
     */
    public static SkuInformationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuInformationInner deserializedSkuInformationInner = new SkuInformationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedSkuInformationInner.sku = Sku.fromJson(reader);
                } else if ("enabled".equals(fieldName)) {
                    deserializedSkuInformationInner.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("properties".equals(fieldName)) {
                    deserializedSkuInformationInner.innerProperties = SkuProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuInformationInner;
        });
    }
}
