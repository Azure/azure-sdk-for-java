// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the data to be used for importing data to azure.
 */
@Fluent
public final class DataImportDetails implements JsonSerializable<DataImportDetails> {
    /*
     * Account details of the data to be transferred
     */
    private DataAccountDetails accountDetails;

    /*
     * Level of the logs to be collected.
     */
    private LogCollectionLevel logCollectionLevel;

    /**
     * Creates an instance of DataImportDetails class.
     */
    public DataImportDetails() {
    }

    /**
     * Get the accountDetails property: Account details of the data to be transferred.
     * 
     * @return the accountDetails value.
     */
    public DataAccountDetails accountDetails() {
        return this.accountDetails;
    }

    /**
     * Set the accountDetails property: Account details of the data to be transferred.
     * 
     * @param accountDetails the accountDetails value to set.
     * @return the DataImportDetails object itself.
     */
    public DataImportDetails withAccountDetails(DataAccountDetails accountDetails) {
        this.accountDetails = accountDetails;
        return this;
    }

    /**
     * Get the logCollectionLevel property: Level of the logs to be collected.
     * 
     * @return the logCollectionLevel value.
     */
    public LogCollectionLevel logCollectionLevel() {
        return this.logCollectionLevel;
    }

    /**
     * Set the logCollectionLevel property: Level of the logs to be collected.
     * 
     * @param logCollectionLevel the logCollectionLevel value to set.
     * @return the DataImportDetails object itself.
     */
    public DataImportDetails withLogCollectionLevel(LogCollectionLevel logCollectionLevel) {
        this.logCollectionLevel = logCollectionLevel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accountDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accountDetails in model DataImportDetails"));
        } else {
            accountDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataImportDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("accountDetails", this.accountDetails);
        jsonWriter.writeStringField("logCollectionLevel",
            this.logCollectionLevel == null ? null : this.logCollectionLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataImportDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataImportDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataImportDetails.
     */
    public static DataImportDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataImportDetails deserializedDataImportDetails = new DataImportDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountDetails".equals(fieldName)) {
                    deserializedDataImportDetails.accountDetails = DataAccountDetails.fromJson(reader);
                } else if ("logCollectionLevel".equals(fieldName)) {
                    deserializedDataImportDetails.logCollectionLevel
                        = LogCollectionLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataImportDetails;
        });
    }
}
