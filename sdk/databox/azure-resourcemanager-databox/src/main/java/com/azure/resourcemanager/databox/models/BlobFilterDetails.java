// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Filter details to transfer Azure Blobs.
 */
@Fluent
public final class BlobFilterDetails implements JsonSerializable<BlobFilterDetails> {
    /*
     * Prefix list of the Azure blobs to be transferred.
     */
    private List<String> blobPrefixList;

    /*
     * List of full path of the blobs to be transferred.
     */
    private List<String> blobPathList;

    /*
     * List of blob containers to be transferred.
     */
    private List<String> containerList;

    /**
     * Creates an instance of BlobFilterDetails class.
     */
    public BlobFilterDetails() {
    }

    /**
     * Get the blobPrefixList property: Prefix list of the Azure blobs to be transferred.
     * 
     * @return the blobPrefixList value.
     */
    public List<String> blobPrefixList() {
        return this.blobPrefixList;
    }

    /**
     * Set the blobPrefixList property: Prefix list of the Azure blobs to be transferred.
     * 
     * @param blobPrefixList the blobPrefixList value to set.
     * @return the BlobFilterDetails object itself.
     */
    public BlobFilterDetails withBlobPrefixList(List<String> blobPrefixList) {
        this.blobPrefixList = blobPrefixList;
        return this;
    }

    /**
     * Get the blobPathList property: List of full path of the blobs to be transferred.
     * 
     * @return the blobPathList value.
     */
    public List<String> blobPathList() {
        return this.blobPathList;
    }

    /**
     * Set the blobPathList property: List of full path of the blobs to be transferred.
     * 
     * @param blobPathList the blobPathList value to set.
     * @return the BlobFilterDetails object itself.
     */
    public BlobFilterDetails withBlobPathList(List<String> blobPathList) {
        this.blobPathList = blobPathList;
        return this;
    }

    /**
     * Get the containerList property: List of blob containers to be transferred.
     * 
     * @return the containerList value.
     */
    public List<String> containerList() {
        return this.containerList;
    }

    /**
     * Set the containerList property: List of blob containers to be transferred.
     * 
     * @param containerList the containerList value to set.
     * @return the BlobFilterDetails object itself.
     */
    public BlobFilterDetails withContainerList(List<String> containerList) {
        this.containerList = containerList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("blobPrefixList", this.blobPrefixList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("blobPathList", this.blobPathList, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("containerList", this.containerList,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobFilterDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobFilterDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlobFilterDetails.
     */
    public static BlobFilterDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobFilterDetails deserializedBlobFilterDetails = new BlobFilterDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blobPrefixList".equals(fieldName)) {
                    List<String> blobPrefixList = reader.readArray(reader1 -> reader1.getString());
                    deserializedBlobFilterDetails.blobPrefixList = blobPrefixList;
                } else if ("blobPathList".equals(fieldName)) {
                    List<String> blobPathList = reader.readArray(reader1 -> reader1.getString());
                    deserializedBlobFilterDetails.blobPathList = blobPathList;
                } else if ("containerList".equals(fieldName)) {
                    List<String> containerList = reader.readArray(reader1 -> reader1.getString());
                    deserializedBlobFilterDetails.containerList = containerList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlobFilterDetails;
        });
    }
}
