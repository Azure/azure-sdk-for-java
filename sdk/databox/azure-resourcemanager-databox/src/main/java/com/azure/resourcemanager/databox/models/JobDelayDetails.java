// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Job Delay Notification details.
 */
@Immutable
public final class JobDelayDetails implements JsonSerializable<JobDelayDetails> {
    /*
     * Status of notification
     */
    private DelayNotificationStatus status;

    /*
     * Delay Error code
     */
    private PortalDelayErrorCode errorCode;

    /*
     * Description of the delay.
     */
    private String description;

    /*
     * Timestamp when the delay notification was created.
     */
    private OffsetDateTime startTime;

    /*
     * Timestamp when the delay notification was resolved.
     */
    private OffsetDateTime resolutionTime;

    /**
     * Creates an instance of JobDelayDetails class.
     */
    public JobDelayDetails() {
    }

    /**
     * Get the status property: Status of notification.
     * 
     * @return the status value.
     */
    public DelayNotificationStatus status() {
        return this.status;
    }

    /**
     * Get the errorCode property: Delay Error code.
     * 
     * @return the errorCode value.
     */
    public PortalDelayErrorCode errorCode() {
        return this.errorCode;
    }

    /**
     * Get the description property: Description of the delay.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the startTime property: Timestamp when the delay notification was created.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the resolutionTime property: Timestamp when the delay notification was resolved.
     * 
     * @return the resolutionTime value.
     */
    public OffsetDateTime resolutionTime() {
        return this.resolutionTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobDelayDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobDelayDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobDelayDetails.
     */
    public static JobDelayDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobDelayDetails deserializedJobDelayDetails = new JobDelayDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedJobDelayDetails.status = DelayNotificationStatus.fromString(reader.getString());
                } else if ("errorCode".equals(fieldName)) {
                    deserializedJobDelayDetails.errorCode = PortalDelayErrorCode.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedJobDelayDetails.description = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedJobDelayDetails.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("resolutionTime".equals(fieldName)) {
                    deserializedJobDelayDetails.resolutionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobDelayDetails;
        });
    }
}
