// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Account details of the data to be transferred.
 */
@Fluent
public class DataAccountDetails implements JsonSerializable<DataAccountDetails> {
    /*
     * Account Type of the data to be transferred.
     */
    private DataAccountType dataAccountType = DataAccountType.fromString("DataAccountDetails");

    /*
     * Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure
     * jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call.
     * Password Requirements : Password must be minimum of 12 and maximum of 64 characters. Password must have at least
     * one uppercase alphabet, one number and one special character. Password cannot have the following characters :
     * IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+
     */
    private String sharePassword;

    /**
     * Creates an instance of DataAccountDetails class.
     */
    public DataAccountDetails() {
    }

    /**
     * Get the dataAccountType property: Account Type of the data to be transferred.
     * 
     * @return the dataAccountType value.
     */
    public DataAccountType dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Get the sharePassword property: Password for all the shares to be created on the device. Should not be passed for
     * TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will
     * not be returned in Get Call. Password Requirements : Password must be minimum of 12 and maximum of 64 characters.
     * Password must have at least one uppercase alphabet, one number and one special character. Password cannot have
     * the following characters : IilLoO0 Password can have only alphabets, numbers and these characters :
     * &#064;#\-$%^!+=;:_()]+.
     * 
     * @return the sharePassword value.
     */
    public String sharePassword() {
        return this.sharePassword;
    }

    /**
     * Set the sharePassword property: Password for all the shares to be created on the device. Should not be passed for
     * TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will
     * not be returned in Get Call. Password Requirements : Password must be minimum of 12 and maximum of 64 characters.
     * Password must have at least one uppercase alphabet, one number and one special character. Password cannot have
     * the following characters : IilLoO0 Password can have only alphabets, numbers and these characters :
     * &#064;#\-$%^!+=;:_()]+.
     * 
     * @param sharePassword the sharePassword value to set.
     * @return the DataAccountDetails object itself.
     */
    public DataAccountDetails withSharePassword(String sharePassword) {
        this.sharePassword = sharePassword;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataAccountType",
            this.dataAccountType == null ? null : this.dataAccountType.toString());
        jsonWriter.writeStringField("sharePassword", this.sharePassword);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataAccountDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataAccountDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataAccountDetails.
     */
    public static DataAccountDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("dataAccountType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ManagedDisk".equals(discriminatorValue)) {
                    return ManagedDiskDetails.fromJson(readerToUse.reset());
                } else if ("StorageAccount".equals(discriminatorValue)) {
                    return StorageAccountDetails.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DataAccountDetails fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataAccountDetails deserializedDataAccountDetails = new DataAccountDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataAccountType".equals(fieldName)) {
                    deserializedDataAccountDetails.dataAccountType = DataAccountType.fromString(reader.getString());
                } else if ("sharePassword".equals(fieldName)) {
                    deserializedDataAccountDetails.sharePassword = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataAccountDetails;
        });
    }
}
