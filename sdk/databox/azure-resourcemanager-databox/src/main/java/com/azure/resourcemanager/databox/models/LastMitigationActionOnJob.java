// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Last Mitigation Action Performed On Job.
 */
@Fluent
public final class LastMitigationActionOnJob implements JsonSerializable<LastMitigationActionOnJob> {
    /*
     * Action performed date time
     */
    private OffsetDateTime actionDateTimeInUtc;

    /*
     * Action performed by customer,
     * possibility is that mitigation might happen by customer or service or by ops
     */
    private Boolean isPerformedByCustomer;

    /*
     * Resolution code provided by customer
     */
    private CustomerResolutionCode customerResolution;

    /**
     * Creates an instance of LastMitigationActionOnJob class.
     */
    public LastMitigationActionOnJob() {
    }

    /**
     * Get the actionDateTimeInUtc property: Action performed date time.
     * 
     * @return the actionDateTimeInUtc value.
     */
    public OffsetDateTime actionDateTimeInUtc() {
        return this.actionDateTimeInUtc;
    }

    /**
     * Set the actionDateTimeInUtc property: Action performed date time.
     * 
     * @param actionDateTimeInUtc the actionDateTimeInUtc value to set.
     * @return the LastMitigationActionOnJob object itself.
     */
    public LastMitigationActionOnJob withActionDateTimeInUtc(OffsetDateTime actionDateTimeInUtc) {
        this.actionDateTimeInUtc = actionDateTimeInUtc;
        return this;
    }

    /**
     * Get the isPerformedByCustomer property: Action performed by customer,
     * possibility is that mitigation might happen by customer or service or by ops.
     * 
     * @return the isPerformedByCustomer value.
     */
    public Boolean isPerformedByCustomer() {
        return this.isPerformedByCustomer;
    }

    /**
     * Set the isPerformedByCustomer property: Action performed by customer,
     * possibility is that mitigation might happen by customer or service or by ops.
     * 
     * @param isPerformedByCustomer the isPerformedByCustomer value to set.
     * @return the LastMitigationActionOnJob object itself.
     */
    public LastMitigationActionOnJob withIsPerformedByCustomer(Boolean isPerformedByCustomer) {
        this.isPerformedByCustomer = isPerformedByCustomer;
        return this;
    }

    /**
     * Get the customerResolution property: Resolution code provided by customer.
     * 
     * @return the customerResolution value.
     */
    public CustomerResolutionCode customerResolution() {
        return this.customerResolution;
    }

    /**
     * Set the customerResolution property: Resolution code provided by customer.
     * 
     * @param customerResolution the customerResolution value to set.
     * @return the LastMitigationActionOnJob object itself.
     */
    public LastMitigationActionOnJob withCustomerResolution(CustomerResolutionCode customerResolution) {
        this.customerResolution = customerResolution;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionDateTimeInUtc",
            this.actionDateTimeInUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.actionDateTimeInUtc));
        jsonWriter.writeBooleanField("isPerformedByCustomer", this.isPerformedByCustomer);
        jsonWriter.writeStringField("customerResolution",
            this.customerResolution == null ? null : this.customerResolution.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LastMitigationActionOnJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LastMitigationActionOnJob if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LastMitigationActionOnJob.
     */
    public static LastMitigationActionOnJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LastMitigationActionOnJob deserializedLastMitigationActionOnJob = new LastMitigationActionOnJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionDateTimeInUtc".equals(fieldName)) {
                    deserializedLastMitigationActionOnJob.actionDateTimeInUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("isPerformedByCustomer".equals(fieldName)) {
                    deserializedLastMitigationActionOnJob.isPerformedByCustomer
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("customerResolution".equals(fieldName)) {
                    deserializedLastMitigationActionOnJob.customerResolution
                        = CustomerResolutionCode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLastMitigationActionOnJob;
        });
    }
}
