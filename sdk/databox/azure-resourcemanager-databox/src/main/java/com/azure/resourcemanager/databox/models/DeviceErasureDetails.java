// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Device erasure details with erasure completion status and erasureordestructionlog sas key.
 */
@Immutable
public final class DeviceErasureDetails implements JsonSerializable<DeviceErasureDetails> {
    /*
     * Holds the device erasure completion status
     */
    private StageStatus deviceErasureStatus;

    /*
     * Shared access key to download cleanup or destruction certificate for device
     */
    private String erasureOrDestructionCertificateSasKey;

    /**
     * Creates an instance of DeviceErasureDetails class.
     */
    public DeviceErasureDetails() {
    }

    /**
     * Get the deviceErasureStatus property: Holds the device erasure completion status.
     * 
     * @return the deviceErasureStatus value.
     */
    public StageStatus deviceErasureStatus() {
        return this.deviceErasureStatus;
    }

    /**
     * Get the erasureOrDestructionCertificateSasKey property: Shared access key to download cleanup or destruction
     * certificate for device.
     * 
     * @return the erasureOrDestructionCertificateSasKey value.
     */
    public String erasureOrDestructionCertificateSasKey() {
        return this.erasureOrDestructionCertificateSasKey;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceErasureDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceErasureDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceErasureDetails.
     */
    public static DeviceErasureDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceErasureDetails deserializedDeviceErasureDetails = new DeviceErasureDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceErasureStatus".equals(fieldName)) {
                    deserializedDeviceErasureDetails.deviceErasureStatus = StageStatus.fromString(reader.getString());
                } else if ("erasureOrDestructionCertificateSasKey".equals(fieldName)) {
                    deserializedDeviceErasureDetails.erasureOrDestructionCertificateSasKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceErasureDetails;
        });
    }
}
