// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The secrets related to customer disk job.
 */
@Immutable
public final class CustomerDiskJobSecrets extends JobSecrets {
    /*
     * Used to indicate what type of job secrets object.
     */
    private ClassDiscriminator jobSecretsType = ClassDiscriminator.DATA_BOX_CUSTOMER_DISK;

    /*
     * Contains the list of secrets object for that device.
     */
    private List<DiskSecret> diskSecrets;

    /*
     * Carrier Account Number of the customer
     */
    private String carrierAccountNumber;

    /**
     * Creates an instance of CustomerDiskJobSecrets class.
     */
    public CustomerDiskJobSecrets() {
    }

    /**
     * Get the jobSecretsType property: Used to indicate what type of job secrets object.
     * 
     * @return the jobSecretsType value.
     */
    @Override
    public ClassDiscriminator jobSecretsType() {
        return this.jobSecretsType;
    }

    /**
     * Get the diskSecrets property: Contains the list of secrets object for that device.
     * 
     * @return the diskSecrets value.
     */
    public List<DiskSecret> diskSecrets() {
        return this.diskSecrets;
    }

    /**
     * Get the carrierAccountNumber property: Carrier Account Number of the customer.
     * 
     * @return the carrierAccountNumber value.
     */
    public String carrierAccountNumber() {
        return this.carrierAccountNumber;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (diskSecrets() != null) {
            diskSecrets().forEach(e -> e.validate());
        }
        if (dcAccessSecurityCode() != null) {
            dcAccessSecurityCode().validate();
        }
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobSecretsType",
            this.jobSecretsType == null ? null : this.jobSecretsType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomerDiskJobSecrets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomerDiskJobSecrets if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomerDiskJobSecrets.
     */
    public static CustomerDiskJobSecrets fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomerDiskJobSecrets deserializedCustomerDiskJobSecrets = new CustomerDiskJobSecrets();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dcAccessSecurityCode".equals(fieldName)) {
                    deserializedCustomerDiskJobSecrets.withDcAccessSecurityCode(DcAccessSecurityCode.fromJson(reader));
                } else if ("error".equals(fieldName)) {
                    deserializedCustomerDiskJobSecrets.withError(CloudError.fromJson(reader));
                } else if ("jobSecretsType".equals(fieldName)) {
                    deserializedCustomerDiskJobSecrets.jobSecretsType
                        = ClassDiscriminator.fromString(reader.getString());
                } else if ("diskSecrets".equals(fieldName)) {
                    List<DiskSecret> diskSecrets = reader.readArray(reader1 -> DiskSecret.fromJson(reader1));
                    deserializedCustomerDiskJobSecrets.diskSecrets = diskSecrets;
                } else if ("carrierAccountNumber".equals(fieldName)) {
                    deserializedCustomerDiskJobSecrets.carrierAccountNumber = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomerDiskJobSecrets;
        });
    }
}
