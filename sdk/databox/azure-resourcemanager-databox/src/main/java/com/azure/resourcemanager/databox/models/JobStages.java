// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Job stages.
 */
@Immutable
public final class JobStages implements JsonSerializable<JobStages> {
    /*
     * Name of the job stage.
     */
    private StageName stageName;

    /*
     * Display name of the job stage.
     */
    private String displayName;

    /*
     * Status of the job stage.
     */
    private StageStatus stageStatus;

    /*
     * Time for the job stage in UTC ISO 8601 format.
     */
    private OffsetDateTime stageTime;

    /*
     * Job Stage Details
     */
    private Object jobStageDetails;

    /*
     * Delay information for the job stages.
     */
    private List<JobDelayDetails> delayInformation;

    /**
     * Creates an instance of JobStages class.
     */
    public JobStages() {
    }

    /**
     * Get the stageName property: Name of the job stage.
     * 
     * @return the stageName value.
     */
    public StageName stageName() {
        return this.stageName;
    }

    /**
     * Get the displayName property: Display name of the job stage.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the stageStatus property: Status of the job stage.
     * 
     * @return the stageStatus value.
     */
    public StageStatus stageStatus() {
        return this.stageStatus;
    }

    /**
     * Get the stageTime property: Time for the job stage in UTC ISO 8601 format.
     * 
     * @return the stageTime value.
     */
    public OffsetDateTime stageTime() {
        return this.stageTime;
    }

    /**
     * Get the jobStageDetails property: Job Stage Details.
     * 
     * @return the jobStageDetails value.
     */
    public Object jobStageDetails() {
        return this.jobStageDetails;
    }

    /**
     * Get the delayInformation property: Delay information for the job stages.
     * 
     * @return the delayInformation value.
     */
    public List<JobDelayDetails> delayInformation() {
        return this.delayInformation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (delayInformation() != null) {
            delayInformation().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobStages from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobStages if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JobStages.
     */
    public static JobStages fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobStages deserializedJobStages = new JobStages();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stageName".equals(fieldName)) {
                    deserializedJobStages.stageName = StageName.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedJobStages.displayName = reader.getString();
                } else if ("stageStatus".equals(fieldName)) {
                    deserializedJobStages.stageStatus = StageStatus.fromString(reader.getString());
                } else if ("stageTime".equals(fieldName)) {
                    deserializedJobStages.stageTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobStageDetails".equals(fieldName)) {
                    deserializedJobStages.jobStageDetails = reader.readUntyped();
                } else if ("delayInformation".equals(fieldName)) {
                    List<JobDelayDetails> delayInformation
                        = reader.readArray(reader1 -> JobDelayDetails.fromJson(reader1));
                    deserializedJobStages.delayInformation = delayInformation;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobStages;
        });
    }
}
