// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databox.models.IdentityProperties;
import com.azure.resourcemanager.databox.models.KekType;
import com.azure.resourcemanager.databox.models.KeyEncryptionKey;
import com.azure.resourcemanager.databox.models.UserAssignedProperties;
import org.junit.jupiter.api.Assertions;

public final class KeyEncryptionKeyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KeyEncryptionKey model = BinaryData.fromString(
            "{\"kekType\":\"MicrosoftManaged\",\"identityProperties\":{\"type\":\"ddystkiiuxhqy\",\"userAssigned\":{\"resourceId\":\"o\"}},\"kekUrl\":\"qn\",\"kekVaultResourceID\":\"oczvy\"}")
            .toObject(KeyEncryptionKey.class);
        Assertions.assertEquals(KekType.MICROSOFT_MANAGED, model.kekType());
        Assertions.assertEquals("ddystkiiuxhqy", model.identityProperties().type());
        Assertions.assertEquals("o", model.identityProperties().userAssigned().resourceId());
        Assertions.assertEquals("qn", model.kekUrl());
        Assertions.assertEquals("oczvy", model.kekVaultResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KeyEncryptionKey model = new KeyEncryptionKey().withKekType(KekType.MICROSOFT_MANAGED)
            .withIdentityProperties(new IdentityProperties().withType("ddystkiiuxhqy")
                .withUserAssigned(new UserAssignedProperties().withResourceId("o")))
            .withKekUrl("qn")
            .withKekVaultResourceId("oczvy");
        model = BinaryData.fromObject(model).toObject(KeyEncryptionKey.class);
        Assertions.assertEquals(KekType.MICROSOFT_MANAGED, model.kekType());
        Assertions.assertEquals("ddystkiiuxhqy", model.identityProperties().type());
        Assertions.assertEquals("o", model.identityProperties().userAssigned().resourceId());
        Assertions.assertEquals("qn", model.kekUrl());
        Assertions.assertEquals("oczvy", model.kekVaultResourceId());
    }
}
