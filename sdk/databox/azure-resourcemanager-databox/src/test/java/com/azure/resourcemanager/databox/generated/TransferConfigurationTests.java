// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databox.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databox.models.AzureFileFilterDetails;
import com.azure.resourcemanager.databox.models.BlobFilterDetails;
import com.azure.resourcemanager.databox.models.DataAccountType;
import com.azure.resourcemanager.databox.models.FilterFileDetails;
import com.azure.resourcemanager.databox.models.FilterFileType;
import com.azure.resourcemanager.databox.models.TransferAllDetails;
import com.azure.resourcemanager.databox.models.TransferConfiguration;
import com.azure.resourcemanager.databox.models.TransferConfigurationTransferAllDetails;
import com.azure.resourcemanager.databox.models.TransferConfigurationTransferFilterDetails;
import com.azure.resourcemanager.databox.models.TransferConfigurationType;
import com.azure.resourcemanager.databox.models.TransferFilterDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TransferConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TransferConfiguration model = BinaryData.fromString(
            "{\"transferConfigurationType\":\"TransferAll\",\"transferFilterDetails\":{\"include\":{\"dataAccountType\":\"ManagedDisk\",\"blobFilterDetails\":{\"blobPrefixList\":[\"jcmmxdcufufsrp\",\"mzidnsezcxtb\"],\"blobPathList\":[\"fycc\",\"newmdwzjeiachbo\"],\"containerList\":[\"lnrosfqp\",\"eeh\",\"zvypyqrimzinp\",\"swjdkirso\"]},\"azureFileFilterDetails\":{\"filePrefixList\":[\"hc\"],\"filePathList\":[\"ohjtckw\",\"dsoifiyipj\"],\"fileShareList\":[\"wpgrjbzno\",\"cjxvsnbyxqab\",\"mocpc\"]},\"filterFileDetails\":[{\"filterFileType\":\"AzureBlob\",\"filterFilePath\":\"rzafbljjgpbtoqcj\"},{\"filterFileType\":\"AzureBlob\",\"filterFilePath\":\"ljavbqid\"},{\"filterFileType\":\"AzureFile\",\"filterFilePath\":\"ajzyul\"}]}},\"transferAllDetails\":{\"include\":{\"dataAccountType\":\"StorageAccount\",\"transferAllBlobs\":true,\"transferAllFiles\":false}}}")
            .toObject(TransferConfiguration.class);
        Assertions.assertEquals(TransferConfigurationType.TRANSFER_ALL, model.transferConfigurationType());
        Assertions.assertEquals(DataAccountType.MANAGED_DISK,
            model.transferFilterDetails().include().dataAccountType());
        Assertions.assertEquals("jcmmxdcufufsrp",
            model.transferFilterDetails().include().blobFilterDetails().blobPrefixList().get(0));
        Assertions.assertEquals("fycc",
            model.transferFilterDetails().include().blobFilterDetails().blobPathList().get(0));
        Assertions.assertEquals("lnrosfqp",
            model.transferFilterDetails().include().blobFilterDetails().containerList().get(0));
        Assertions.assertEquals("hc",
            model.transferFilterDetails().include().azureFileFilterDetails().filePrefixList().get(0));
        Assertions.assertEquals("ohjtckw",
            model.transferFilterDetails().include().azureFileFilterDetails().filePathList().get(0));
        Assertions.assertEquals("wpgrjbzno",
            model.transferFilterDetails().include().azureFileFilterDetails().fileShareList().get(0));
        Assertions.assertEquals(FilterFileType.AZURE_BLOB,
            model.transferFilterDetails().include().filterFileDetails().get(0).filterFileType());
        Assertions.assertEquals("rzafbljjgpbtoqcj",
            model.transferFilterDetails().include().filterFileDetails().get(0).filterFilePath());
        Assertions.assertEquals(DataAccountType.STORAGE_ACCOUNT,
            model.transferAllDetails().include().dataAccountType());
        Assertions.assertEquals(true, model.transferAllDetails().include().transferAllBlobs());
        Assertions.assertEquals(false, model.transferAllDetails().include().transferAllFiles());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TransferConfiguration model
            = new TransferConfiguration().withTransferConfigurationType(TransferConfigurationType.TRANSFER_ALL)
                .withTransferFilterDetails(
                    new TransferConfigurationTransferFilterDetails()
                        .withInclude(new TransferFilterDetails().withDataAccountType(DataAccountType.MANAGED_DISK)
                            .withBlobFilterDetails(new BlobFilterDetails()
                                .withBlobPrefixList(Arrays.asList("jcmmxdcufufsrp", "mzidnsezcxtb"))
                                .withBlobPathList(Arrays.asList("fycc", "newmdwzjeiachbo"))
                                .withContainerList(Arrays.asList("lnrosfqp", "eeh", "zvypyqrimzinp", "swjdkirso")))
                            .withAzureFileFilterDetails(
                                new AzureFileFilterDetails().withFilePrefixList(Arrays.asList("hc"))
                                    .withFilePathList(Arrays.asList("ohjtckw", "dsoifiyipj"))
                                    .withFileShareList(Arrays.asList("wpgrjbzno", "cjxvsnbyxqab", "mocpc")))
                            .withFilterFileDetails(Arrays.asList(
                                new FilterFileDetails().withFilterFileType(FilterFileType.AZURE_BLOB)
                                    .withFilterFilePath("rzafbljjgpbtoqcj"),
                                new FilterFileDetails().withFilterFileType(FilterFileType.AZURE_BLOB)
                                    .withFilterFilePath("ljavbqid"),
                                new FilterFileDetails().withFilterFileType(FilterFileType.AZURE_FILE)
                                    .withFilterFilePath("ajzyul")))))
                .withTransferAllDetails(new TransferConfigurationTransferAllDetails()
                    .withInclude(new TransferAllDetails().withDataAccountType(DataAccountType.STORAGE_ACCOUNT)
                        .withTransferAllBlobs(true)
                        .withTransferAllFiles(false)));
        model = BinaryData.fromObject(model).toObject(TransferConfiguration.class);
        Assertions.assertEquals(TransferConfigurationType.TRANSFER_ALL, model.transferConfigurationType());
        Assertions.assertEquals(DataAccountType.MANAGED_DISK,
            model.transferFilterDetails().include().dataAccountType());
        Assertions.assertEquals("jcmmxdcufufsrp",
            model.transferFilterDetails().include().blobFilterDetails().blobPrefixList().get(0));
        Assertions.assertEquals("fycc",
            model.transferFilterDetails().include().blobFilterDetails().blobPathList().get(0));
        Assertions.assertEquals("lnrosfqp",
            model.transferFilterDetails().include().blobFilterDetails().containerList().get(0));
        Assertions.assertEquals("hc",
            model.transferFilterDetails().include().azureFileFilterDetails().filePrefixList().get(0));
        Assertions.assertEquals("ohjtckw",
            model.transferFilterDetails().include().azureFileFilterDetails().filePathList().get(0));
        Assertions.assertEquals("wpgrjbzno",
            model.transferFilterDetails().include().azureFileFilterDetails().fileShareList().get(0));
        Assertions.assertEquals(FilterFileType.AZURE_BLOB,
            model.transferFilterDetails().include().filterFileDetails().get(0).filterFileType());
        Assertions.assertEquals("rzafbljjgpbtoqcj",
            model.transferFilterDetails().include().filterFileDetails().get(0).filterFilePath());
        Assertions.assertEquals(DataAccountType.STORAGE_ACCOUNT,
            model.transferAllDetails().include().dataAccountType());
        Assertions.assertEquals(true, model.transferAllDetails().include().transferAllBlobs());
        Assertions.assertEquals(false, model.transferAllDetails().include().transferAllFiles());
    }
}
