/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.SourceControlConfigurations;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.SourceControlConfiguration;

class SourceControlConfigurationsImpl extends WrapperImpl<SourceControlConfigurationsInner> implements SourceControlConfigurations {
    private final KubernetesConfigurationManager manager;

    SourceControlConfigurationsImpl(KubernetesConfigurationManager manager) {
        super(manager.inner().sourceControlConfigurations());
        this.manager = manager;
    }

    public KubernetesConfigurationManager manager() {
        return this.manager;
    }

    @Override
    public SourceControlConfigurationImpl define(String name) {
        return wrapModel(name);
    }

    private SourceControlConfigurationImpl wrapModel(SourceControlConfigurationInner inner) {
        return  new SourceControlConfigurationImpl(inner, manager());
    }

    private SourceControlConfigurationImpl wrapModel(String name) {
        return new SourceControlConfigurationImpl(name, this.manager());
    }

    @Override
    public Observable<SourceControlConfiguration> getAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        SourceControlConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName)
        .map(new Func1<SourceControlConfigurationInner, SourceControlConfiguration>() {
            @Override
            public SourceControlConfiguration call(SourceControlConfigurationInner inner) {
                return new SourceControlConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        SourceControlConfigurationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName).toCompletable();
    }

    @Override
    public Observable<SourceControlConfiguration> listAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        SourceControlConfigurationsInner client = this.inner();
        return client.listAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName)
        .flatMapIterable(new Func1<Page<SourceControlConfigurationInner>, Iterable<SourceControlConfigurationInner>>() {
            @Override
            public Iterable<SourceControlConfigurationInner> call(Page<SourceControlConfigurationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SourceControlConfigurationInner, SourceControlConfiguration>() {
            @Override
            public SourceControlConfiguration call(SourceControlConfigurationInner inner) {
                return new SourceControlConfigurationImpl(inner, manager());
            }
        });
    }

}
