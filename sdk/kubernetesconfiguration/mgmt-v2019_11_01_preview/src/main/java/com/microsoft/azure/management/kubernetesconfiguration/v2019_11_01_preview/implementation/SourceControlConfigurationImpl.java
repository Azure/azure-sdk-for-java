/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.implementation;

import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.SourceControlConfiguration;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.OperatorType;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.OperatorScope;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.EnableHelmOperator;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.HelmOperatorProperties;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.ProvisioningState;
import com.microsoft.azure.management.kubernetesconfiguration.v2019_11_01_preview.ComplianceStatus;

class SourceControlConfigurationImpl extends CreatableUpdatableImpl<SourceControlConfiguration, SourceControlConfigurationInner, SourceControlConfigurationImpl> implements SourceControlConfiguration, SourceControlConfiguration.Definition, SourceControlConfiguration.Update {
    private final KubernetesConfigurationManager manager;
    private String resourceGroupName;
    private String clusterRp;
    private String clusterResourceName;
    private String clusterName;
    private String sourceControlConfigurationName;

    SourceControlConfigurationImpl(String name, KubernetesConfigurationManager manager) {
        super(name, new SourceControlConfigurationInner());
        this.manager = manager;
        // Set resource name
        this.sourceControlConfigurationName = name;
        //
    }

    SourceControlConfigurationImpl(SourceControlConfigurationInner inner, KubernetesConfigurationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.sourceControlConfigurationName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterRp = IdParsingUtils.getValueFromIdByName(inner.id(), "providers");
        this.sourceControlConfigurationName = IdParsingUtils.getValueFromIdByName(inner.id(), "sourceControlConfigurations");
        this.clusterResourceName = IdParsingUtils.getValueFromIdByPosition(inner.id(), 6);
        this.clusterName = IdParsingUtils.getValueFromIdByPosition(inner.id(), 7);
        //
    }

    @Override
    public KubernetesConfigurationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SourceControlConfiguration> createResourceAsync() {
        SourceControlConfigurationsInner client = this.manager().inner().sourceControlConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterRp, this.clusterResourceName, this.clusterName, this.sourceControlConfigurationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SourceControlConfiguration> updateResourceAsync() {
        SourceControlConfigurationsInner client = this.manager().inner().sourceControlConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterRp, this.clusterResourceName, this.clusterName, this.sourceControlConfigurationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SourceControlConfigurationInner> getInnerAsync() {
        SourceControlConfigurationsInner client = this.manager().inner().sourceControlConfigurations();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public ComplianceStatus complianceStatus() {
        return this.inner().complianceStatus();
    }

    @Override
    public EnableHelmOperator enableHelmOperator() {
        return this.inner().enableHelmOperator();
    }

    @Override
    public HelmOperatorProperties helmOperatorProperties() {
        return this.inner().helmOperatorProperties();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String operatorInstanceName() {
        return this.inner().operatorInstanceName();
    }

    @Override
    public String operatorNamespace() {
        return this.inner().operatorNamespace();
    }

    @Override
    public String operatorParams() {
        return this.inner().operatorParams();
    }

    @Override
    public OperatorScope operatorScope() {
        return this.inner().operatorScope();
    }

    @Override
    public OperatorType operatorType() {
        return this.inner().operatorType();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String repositoryPublicKey() {
        return this.inner().repositoryPublicKey();
    }

    @Override
    public String repositoryUrl() {
        return this.inner().repositoryUrl();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SourceControlConfigurationImpl withExistingProvider(String resourceGroupName, String clusterRp) {
        this.resourceGroupName = resourceGroupName;
        this.clusterRp = clusterRp;
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withClusterResourceName(String clusterResourceName) {
        this.clusterResourceName = clusterResourceName;
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withEnableHelmOperator(EnableHelmOperator enableHelmOperator) {
        this.inner().withEnableHelmOperator(enableHelmOperator);
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withHelmOperatorProperties(HelmOperatorProperties helmOperatorProperties) {
        this.inner().withHelmOperatorProperties(helmOperatorProperties);
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withOperatorInstanceName(String operatorInstanceName) {
        this.inner().withOperatorInstanceName(operatorInstanceName);
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withOperatorNamespace(String operatorNamespace) {
        this.inner().withOperatorNamespace(operatorNamespace);
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withOperatorParams(String operatorParams) {
        this.inner().withOperatorParams(operatorParams);
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withOperatorScope(OperatorScope operatorScope) {
        this.inner().withOperatorScope(operatorScope);
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withOperatorType(OperatorType operatorType) {
        this.inner().withOperatorType(operatorType);
        return this;
    }

    @Override
    public SourceControlConfigurationImpl withRepositoryUrl(String repositoryUrl) {
        this.inner().withRepositoryUrl(repositoryUrl);
        return this;
    }

}
