// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.models.PrivateEndpointConnectionInner;
import java.io.IOException;
import java.util.List;

/**
 * Properties that define a Azure Arc PrivateLinkScope resource.
 */
@Fluent
public final class KubernetesConfigurationPrivateLinkScopeProperties
    implements JsonSerializable<KubernetesConfigurationPrivateLinkScopeProperties> {
    /*
     * Indicates whether machines associated with the private link scope can also use public Azure Arc service
     * endpoints.
     */
    private PublicNetworkAccessType publicNetworkAccess;

    /*
     * Current state of this PrivateLinkScope: whether or not is has been provisioned within the resource group it is
     * defined. Users cannot change this value but are able to read from it. Values will include Provisioning
     * ,Succeeded, Canceled and Failed.
     */
    private ProvisioningState provisioningState;

    /*
     * Managed Cluster ARM ID for the private link scope (Required)
     */
    private String clusterResourceId;

    /*
     * The Guid id of the private link scope.
     */
    private String privateLinkScopeId;

    /*
     * The collection of associated Private Endpoint Connections.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /**
     * Creates an instance of KubernetesConfigurationPrivateLinkScopeProperties class.
     */
    public KubernetesConfigurationPrivateLinkScopeProperties() {
    }

    /**
     * Get the publicNetworkAccess property: Indicates whether machines associated with the private link scope can also
     * use public Azure Arc service endpoints.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccessType publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Indicates whether machines associated with the private link scope can also
     * use public Azure Arc service endpoints.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the KubernetesConfigurationPrivateLinkScopeProperties object itself.
     */
    public KubernetesConfigurationPrivateLinkScopeProperties
        withPublicNetworkAccess(PublicNetworkAccessType publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the provisioningState property: Current state of this PrivateLinkScope: whether or not is has been
     * provisioned within the resource group it is defined. Users cannot change this value but are able to read from it.
     * Values will include Provisioning ,Succeeded, Canceled and Failed.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the clusterResourceId property: Managed Cluster ARM ID for the private link scope (Required).
     * 
     * @return the clusterResourceId value.
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * Set the clusterResourceId property: Managed Cluster ARM ID for the private link scope (Required).
     * 
     * @param clusterResourceId the clusterResourceId value to set.
     * @return the KubernetesConfigurationPrivateLinkScopeProperties object itself.
     */
    public KubernetesConfigurationPrivateLinkScopeProperties withClusterResourceId(String clusterResourceId) {
        this.clusterResourceId = clusterResourceId;
        return this;
    }

    /**
     * Get the privateLinkScopeId property: The Guid id of the private link scope.
     * 
     * @return the privateLinkScopeId value.
     */
    public String privateLinkScopeId() {
        return this.privateLinkScopeId;
    }

    /**
     * Get the privateEndpointConnections property: The collection of associated Private Endpoint Connections.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterResourceId in model KubernetesConfigurationPrivateLinkScopeProperties"));
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(KubernetesConfigurationPrivateLinkScopeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterResourceId", this.clusterResourceId);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesConfigurationPrivateLinkScopeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesConfigurationPrivateLinkScopeProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KubernetesConfigurationPrivateLinkScopeProperties.
     */
    public static KubernetesConfigurationPrivateLinkScopeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesConfigurationPrivateLinkScopeProperties deserializedKubernetesConfigurationPrivateLinkScopeProperties
                = new KubernetesConfigurationPrivateLinkScopeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterResourceId".equals(fieldName)) {
                    deserializedKubernetesConfigurationPrivateLinkScopeProperties.clusterResourceId
                        = reader.getString();
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedKubernetesConfigurationPrivateLinkScopeProperties.publicNetworkAccess
                        = PublicNetworkAccessType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedKubernetesConfigurationPrivateLinkScopeProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("privateLinkScopeId".equals(fieldName)) {
                    deserializedKubernetesConfigurationPrivateLinkScopeProperties.privateLinkScopeId
                        = reader.getString();
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedKubernetesConfigurationPrivateLinkScopeProperties.privateEndpointConnections
                        = privateEndpointConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesConfigurationPrivateLinkScopeProperties;
        });
    }
}
