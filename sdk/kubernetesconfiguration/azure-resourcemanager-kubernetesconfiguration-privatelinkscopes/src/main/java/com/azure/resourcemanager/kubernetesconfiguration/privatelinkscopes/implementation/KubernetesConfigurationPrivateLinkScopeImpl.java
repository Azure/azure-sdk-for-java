// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.models.KubernetesConfigurationPrivateLinkScopeInner;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.KubernetesConfigurationPrivateLinkScope;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.KubernetesConfigurationPrivateLinkScopeProperties;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.TagsResource;
import java.util.Collections;
import java.util.Map;

public final class KubernetesConfigurationPrivateLinkScopeImpl implements KubernetesConfigurationPrivateLinkScope,
    KubernetesConfigurationPrivateLinkScope.Definition, KubernetesConfigurationPrivateLinkScope.Update {
    private KubernetesConfigurationPrivateLinkScopeInner innerObject;

    private final com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public KubernetesConfigurationPrivateLinkScopeProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public KubernetesConfigurationPrivateLinkScopeInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String scopeName;

    private TagsResource updatePrivateLinkScopeTags;

    public KubernetesConfigurationPrivateLinkScopeImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public KubernetesConfigurationPrivateLinkScope create() {
        this.innerObject = serviceManager.serviceClient()
            .getPrivateLinkScopes()
            .createOrUpdateWithResponse(resourceGroupName, scopeName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public KubernetesConfigurationPrivateLinkScope create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getPrivateLinkScopes()
            .createOrUpdateWithResponse(resourceGroupName, scopeName, this.innerModel(), context)
            .getValue();
        return this;
    }

    KubernetesConfigurationPrivateLinkScopeImpl(String name,
        com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager serviceManager) {
        this.innerObject = new KubernetesConfigurationPrivateLinkScopeInner();
        this.serviceManager = serviceManager;
        this.scopeName = name;
    }

    public KubernetesConfigurationPrivateLinkScopeImpl update() {
        this.updatePrivateLinkScopeTags = new TagsResource();
        return this;
    }

    public KubernetesConfigurationPrivateLinkScope apply() {
        this.innerObject = serviceManager.serviceClient()
            .getPrivateLinkScopes()
            .updateTagsWithResponse(resourceGroupName, scopeName, updatePrivateLinkScopeTags, Context.NONE)
            .getValue();
        return this;
    }

    public KubernetesConfigurationPrivateLinkScope apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getPrivateLinkScopes()
            .updateTagsWithResponse(resourceGroupName, scopeName, updatePrivateLinkScopeTags, context)
            .getValue();
        return this;
    }

    KubernetesConfigurationPrivateLinkScopeImpl(KubernetesConfigurationPrivateLinkScopeInner innerObject,
        com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.scopeName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "privateLinkScopes");
    }

    public KubernetesConfigurationPrivateLinkScope refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getPrivateLinkScopes()
            .getByResourceGroupWithResponse(resourceGroupName, scopeName, Context.NONE)
            .getValue();
        return this;
    }

    public KubernetesConfigurationPrivateLinkScope refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getPrivateLinkScopes()
            .getByResourceGroupWithResponse(resourceGroupName, scopeName, context)
            .getValue();
        return this;
    }

    public KubernetesConfigurationPrivateLinkScopeImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public KubernetesConfigurationPrivateLinkScopeImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public KubernetesConfigurationPrivateLinkScopeImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updatePrivateLinkScopeTags.withTags(tags);
            return this;
        }
    }

    public KubernetesConfigurationPrivateLinkScopeImpl
        withProperties(KubernetesConfigurationPrivateLinkScopeProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
