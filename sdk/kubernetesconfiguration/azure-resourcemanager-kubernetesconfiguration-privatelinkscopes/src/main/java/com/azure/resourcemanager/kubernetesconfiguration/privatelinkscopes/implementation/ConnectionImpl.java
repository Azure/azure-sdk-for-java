// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.models.ConnectionInner;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.Connection;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.ConnectionProvisioningState;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PrivateEndpoint;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PrivateLinkServiceConnectionState;

public final class ConnectionImpl implements Connection, Connection.Definition, Connection.Update {
    private ConnectionInner innerObject;

    private final com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public PrivateEndpoint privateEndpoint() {
        return this.innerModel().privateEndpoint();
    }

    public PrivateLinkServiceConnectionState privateLinkServiceConnectionState() {
        return this.innerModel().privateLinkServiceConnectionState();
    }

    public ConnectionProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String scopeName;

    private String privateEndpointConnectionName;

    public ConnectionImpl withExistingPrivateLinkScope(String resourceGroupName, String scopeName) {
        this.resourceGroupName = resourceGroupName;
        this.scopeName = scopeName;
        return this;
    }

    public Connection create() {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .createOrUpdate(resourceGroupName, scopeName, privateEndpointConnectionName, this.innerModel(),
                Context.NONE);
        return this;
    }

    public Connection create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .createOrUpdate(resourceGroupName, scopeName, privateEndpointConnectionName, this.innerModel(), context);
        return this;
    }

    ConnectionImpl(String name,
        com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager serviceManager) {
        this.innerObject = new ConnectionInner();
        this.serviceManager = serviceManager;
        this.privateEndpointConnectionName = name;
    }

    public ConnectionImpl update() {
        return this;
    }

    public Connection apply() {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .createOrUpdate(resourceGroupName, scopeName, privateEndpointConnectionName, this.innerModel(),
                Context.NONE);
        return this;
    }

    public Connection apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .createOrUpdate(resourceGroupName, scopeName, privateEndpointConnectionName, this.innerModel(), context);
        return this;
    }

    ConnectionImpl(ConnectionInner innerObject,
        com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.scopeName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "privateLinkScopes");
        this.privateEndpointConnectionName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "privateEndpointConnections");
    }

    public Connection refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .getWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, Context.NONE)
            .getValue();
        return this;
    }

    public Connection refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .getWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, context)
            .getValue();
        return this;
    }

    public ConnectionImpl withPrivateEndpoint(PrivateEndpoint privateEndpoint) {
        this.innerModel().withPrivateEndpoint(privateEndpoint);
        return this;
    }

    public ConnectionImpl
        withPrivateLinkServiceConnectionState(PrivateLinkServiceConnectionState privateLinkServiceConnectionState) {
        this.innerModel().withPrivateLinkServiceConnectionState(privateLinkServiceConnectionState);
        return this;
    }
}
