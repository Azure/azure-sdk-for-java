// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.PrivateLinkScopesClient;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.models.KubernetesConfigurationPrivateLinkScopeInner;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.KubernetesConfigurationPrivateLinkScope;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PrivateLinkScopes;

public final class PrivateLinkScopesImpl implements PrivateLinkScopes {
    private static final ClientLogger LOGGER = new ClientLogger(PrivateLinkScopesImpl.class);

    private final PrivateLinkScopesClient innerClient;

    private final com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager serviceManager;

    public PrivateLinkScopesImpl(PrivateLinkScopesClient innerClient,
        com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<KubernetesConfigurationPrivateLinkScope> list() {
        PagedIterable<KubernetesConfigurationPrivateLinkScopeInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new KubernetesConfigurationPrivateLinkScopeImpl(inner1, this.manager()));
    }

    public PagedIterable<KubernetesConfigurationPrivateLinkScope> list(Context context) {
        PagedIterable<KubernetesConfigurationPrivateLinkScopeInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new KubernetesConfigurationPrivateLinkScopeImpl(inner1, this.manager()));
    }

    public PagedIterable<KubernetesConfigurationPrivateLinkScope> listByResourceGroup(String resourceGroupName) {
        PagedIterable<KubernetesConfigurationPrivateLinkScopeInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new KubernetesConfigurationPrivateLinkScopeImpl(inner1, this.manager()));
    }

    public PagedIterable<KubernetesConfigurationPrivateLinkScope> listByResourceGroup(String resourceGroupName,
        Context context) {
        PagedIterable<KubernetesConfigurationPrivateLinkScopeInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new KubernetesConfigurationPrivateLinkScopeImpl(inner1, this.manager()));
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String scopeName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, scopeName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String scopeName) {
        this.serviceClient().delete(resourceGroupName, scopeName);
    }

    public Response<KubernetesConfigurationPrivateLinkScope> getByResourceGroupWithResponse(String resourceGroupName,
        String scopeName, Context context) {
        Response<KubernetesConfigurationPrivateLinkScopeInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, scopeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new KubernetesConfigurationPrivateLinkScopeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public KubernetesConfigurationPrivateLinkScope getByResourceGroup(String resourceGroupName, String scopeName) {
        KubernetesConfigurationPrivateLinkScopeInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, scopeName);
        if (inner != null) {
            return new KubernetesConfigurationPrivateLinkScopeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public KubernetesConfigurationPrivateLinkScope getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, scopeName, Context.NONE).getValue();
    }

    public Response<KubernetesConfigurationPrivateLinkScope> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, scopeName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, scopeName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, scopeName, context);
    }

    private PrivateLinkScopesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager manager() {
        return this.serviceManager;
    }

    public KubernetesConfigurationPrivateLinkScopeImpl define(String name) {
        return new KubernetesConfigurationPrivateLinkScopeImpl(name, this.manager());
    }
}
