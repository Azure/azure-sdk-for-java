// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.ConnectionsClient;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.models.ConnectionInner;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.fluent.models.ConnectionListResultInner;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.Connection;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.ConnectionListResult;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.Connections;

public final class ConnectionsImpl implements Connections {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectionsImpl.class);

    private final ConnectionsClient innerClient;

    private final com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager serviceManager;

    public ConnectionsImpl(ConnectionsClient innerClient,
        com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Connection> getWithResponse(String resourceGroupName, String scopeName,
        String privateEndpointConnectionName, Context context) {
        Response<ConnectionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Connection get(String resourceGroupName, String scopeName, String privateEndpointConnectionName) {
        ConnectionInner inner = this.serviceClient().get(resourceGroupName, scopeName, privateEndpointConnectionName);
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String scopeName,
        String privateEndpointConnectionName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, context);
    }

    public void delete(String resourceGroupName, String scopeName, String privateEndpointConnectionName) {
        this.serviceClient().delete(resourceGroupName, scopeName, privateEndpointConnectionName);
    }

    public Response<ConnectionListResult> listByPrivateLinkScopeWithResponse(String resourceGroupName, String scopeName,
        Context context) {
        Response<ConnectionListResultInner> inner
            = this.serviceClient().listByPrivateLinkScopeWithResponse(resourceGroupName, scopeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectionListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionListResult listByPrivateLinkScope(String resourceGroupName, String scopeName) {
        ConnectionListResultInner inner = this.serviceClient().listByPrivateLinkScope(resourceGroupName, scopeName);
        if (inner != null) {
            return new ConnectionListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Connection getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String privateEndpointConnectionName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.getWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, Context.NONE)
            .getValue();
    }

    public Response<Connection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String privateEndpointConnectionName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.getWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String privateEndpointConnectionName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = ResourceManagerUtils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String privateEndpointConnectionName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, scopeName, privateEndpointConnectionName, context);
    }

    private ConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager manager() {
        return this.serviceManager;
    }

    public ConnectionImpl define(String name) {
        return new ConnectionImpl(name, this.manager());
    }
}
