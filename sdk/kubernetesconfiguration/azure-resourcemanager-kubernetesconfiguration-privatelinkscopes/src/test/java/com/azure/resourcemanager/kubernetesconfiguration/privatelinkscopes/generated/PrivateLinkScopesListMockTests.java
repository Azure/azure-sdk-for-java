// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.PrivateLinkScopesManager;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.KubernetesConfigurationPrivateLinkScope;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"Deleting\",\"clusterResourceId\":\"tqgtzxdpnqbqq\",\"privateLinkScopeId\":\"rjfeallnwsubisnj\",\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"scxaq\",\"name\":\"ooch\",\"type\":\"bonqvpkvlrxnjeas\"}]},\"location\":\"pheoflokeyy\",\"tags\":{\"asxazjpqyegualhb\":\"jbdlwtgrhpdjpju\"},\"id\":\"xhejjzzvdud\",\"name\":\"wdslfhotwmcy\",\"type\":\"pwlbjnpg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PrivateLinkScopesManager manager = PrivateLinkScopesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<KubernetesConfigurationPrivateLinkScope> response
            = manager.privateLinkScopes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pheoflokeyy", response.iterator().next().location());
        Assertions.assertEquals("jbdlwtgrhpdjpju", response.iterator().next().tags().get("asxazjpqyegualhb"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED,
            response.iterator().next().properties().publicNetworkAccess());
        Assertions.assertEquals("tqgtzxdpnqbqq", response.iterator().next().properties().clusterResourceId());
    }
}
