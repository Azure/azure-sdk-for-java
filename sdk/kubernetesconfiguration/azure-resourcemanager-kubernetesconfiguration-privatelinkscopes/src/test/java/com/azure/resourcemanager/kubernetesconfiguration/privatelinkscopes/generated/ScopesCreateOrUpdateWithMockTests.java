// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PrivateLinkScope;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PrivateLinkScopeProperties;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScopesCreateOrUpdateWithMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"Failed\",\"clusterResourceId\":\"zfbishcbkhaj\",\"privateLinkScopeId\":\"yeamdphagalpb\",\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"onowk\",\"name\":\"shwankixzbinje\",\"type\":\"uttmrywnuzoqft\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"kcqvyxl\",\"name\":\"hzls\",\"type\":\"cohoq\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"yav\",\"name\":\"hheunmmqhgyx\",\"type\":\"konocu\"}]},\"location\":\"klyaxuconu\",\"tags\":{\"ewrmjmwvvjektc\":\"fkbey\"},\"id\":\"senhwlrs\",\"name\":\"frzpwvlqdqgb\",\"type\":\"qylihkaetckt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ScopeManager manager = ScopeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateLinkScope response = manager.scopes()
            .define("vleggzfbuhfmvfax")
            .withRegion("ocipazyxoeg")
            .withExistingResourceGroup("pclhocohslk")
            .withTags(mapOf("vqzntypmrbpizcdr", "jnpiucgyg"))
            .withProperties(new PrivateLinkScopeProperties().withPublicNetworkAccess(PublicNetworkAccessType.DISABLED)
                .withClusterResourceId("th"))
            .create();

        Assertions.assertEquals("klyaxuconu", response.location());
        Assertions.assertEquals("fkbey", response.tags().get("ewrmjmwvvjektc"));
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals("zfbishcbkhaj", response.properties().clusterResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
