// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.ConnectionListResult;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.ServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConnectionsListByPrivateMockTests {
    @Test
    public void testListByPrivateLinkScopeWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"sx\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"cykvceo\",\"actionsRequired\":\"ilovnot\"},\"provisioningState\":\"Succeeded\"},\"id\":\"cnjbkcnxdhbt\",\"name\":\"kphywpnvjto\",\"type\":\"nermcl\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"hoxus\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"bgyepsbj\",\"actionsRequired\":\"zq\"},\"provisioningState\":\"Failed\"},\"id\":\"wpmueefj\",\"name\":\"wfqkquj\",\"type\":\"dsuyonobgla\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"tcc\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"dxyt\",\"actionsRequired\":\"oyrxvwfudwpzntxh\"},\"provisioningState\":\"Succeeded\"},\"id\":\"rqjbhckfrl\",\"name\":\"rxsbkyvp\",\"type\":\"ca\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ScopeManager manager = ScopeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConnectionListResult response = manager.connections()
            .listByPrivateLinkScopeWithResponse("uutkncw", "cwsvlxotog", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(ServiceConnectionStatus.APPROVED,
            response.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("cykvceo", response.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ilovnot",
            response.value().get(0).privateLinkServiceConnectionState().actionsRequired());
    }
}
