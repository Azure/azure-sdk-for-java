// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.ScopeManager;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.Connection;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PrivateEndpoint;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.kubernetesconfiguration.privatelinkscopes.models.ServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConnectionsCreateOrUpdatMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"vfadmws\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"vxpvgomz\",\"actionsRequired\":\"misgwbnb\"},\"provisioningState\":\"Succeeded\"},\"id\":\"awkz\",\"name\":\"ali\",\"type\":\"urqhaka\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ScopeManager manager = ScopeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Connection response = manager.connections()
            .define("rnwb")
            .withExistingPrivateLinkScope("uzbpzkafku", "b")
            .withPrivateEndpoint(new PrivateEndpoint())
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(ServiceConnectionStatus.APPROVED)
                    .withDescription("slhs")
                    .withActionsRequired("deemao"))
            .create();

        Assertions.assertEquals(ServiceConnectionStatus.APPROVED,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("vxpvgomz", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("misgwbnb", response.privateLinkServiceConnectionState().actionsRequired());
    }
}
