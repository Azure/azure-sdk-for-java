/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SourceControlConfigurations.
 */
public class SourceControlConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private SourceControlConfigurationsService service;
    /** The service client containing this operation class. */
    private SourceControlConfigurationClientImpl client;

    /**
     * Initializes an instance of SourceControlConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SourceControlConfigurationsInner(Retrofit retrofit, SourceControlConfigurationClientImpl client) {
        this.service = retrofit.create(SourceControlConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SourceControlConfigurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SourceControlConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.SourceControlConfigurations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/{sourceControlConfigurationName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("sourceControlConfigurationName") String sourceControlConfigurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.SourceControlConfigurations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/{sourceControlConfigurationName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("sourceControlConfigurationName") String sourceControlConfigurationName, @Query("api-version") String apiVersion, @Body SourceControlConfigurationInner sourceControlConfiguration, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.SourceControlConfigurations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/{sourceControlConfigurationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("sourceControlConfigurationName") String sourceControlConfigurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.SourceControlConfigurations beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/{sourceControlConfigurationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("sourceControlConfigurationName") String sourceControlConfigurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.SourceControlConfigurations list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2021_03_01.SourceControlConfigurations listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets details of the Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SourceControlConfigurationInner object if successful.
     */
    public SourceControlConfigurationInner get(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName).toBlocking().single().body();
    }

    /**
     * Gets details of the Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SourceControlConfigurationInner> getAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName, final ServiceCallback<SourceControlConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName), serviceCallback);
    }

    /**
     * Gets details of the Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SourceControlConfigurationInner object
     */
    public Observable<SourceControlConfigurationInner> getAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName).map(new Func1<ServiceResponse<SourceControlConfigurationInner>, SourceControlConfigurationInner>() {
            @Override
            public SourceControlConfigurationInner call(ServiceResponse<SourceControlConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets details of the Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SourceControlConfigurationInner object
     */
    public Observable<ServiceResponse<SourceControlConfigurationInner>> getWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (sourceControlConfigurationName == null) {
            throw new IllegalArgumentException("Parameter sourceControlConfigurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SourceControlConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<SourceControlConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SourceControlConfigurationInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SourceControlConfigurationInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SourceControlConfigurationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SourceControlConfigurationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create a new Kubernetes Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param sourceControlConfiguration Properties necessary to Create KubernetesConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SourceControlConfigurationInner object if successful.
     */
    public SourceControlConfigurationInner createOrUpdate(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName, SourceControlConfigurationInner sourceControlConfiguration) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, sourceControlConfiguration).toBlocking().single().body();
    }

    /**
     * Create a new Kubernetes Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param sourceControlConfiguration Properties necessary to Create KubernetesConfiguration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SourceControlConfigurationInner> createOrUpdateAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName, SourceControlConfigurationInner sourceControlConfiguration, final ServiceCallback<SourceControlConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, sourceControlConfiguration), serviceCallback);
    }

    /**
     * Create a new Kubernetes Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param sourceControlConfiguration Properties necessary to Create KubernetesConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SourceControlConfigurationInner object
     */
    public Observable<SourceControlConfigurationInner> createOrUpdateAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName, SourceControlConfigurationInner sourceControlConfiguration) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, sourceControlConfiguration).map(new Func1<ServiceResponse<SourceControlConfigurationInner>, SourceControlConfigurationInner>() {
            @Override
            public SourceControlConfigurationInner call(ServiceResponse<SourceControlConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new Kubernetes Source Control Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param sourceControlConfiguration Properties necessary to Create KubernetesConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SourceControlConfigurationInner object
     */
    public Observable<ServiceResponse<SourceControlConfigurationInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName, SourceControlConfigurationInner sourceControlConfiguration) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (sourceControlConfigurationName == null) {
            throw new IllegalArgumentException("Parameter sourceControlConfigurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (sourceControlConfiguration == null) {
            throw new IllegalArgumentException("Parameter sourceControlConfiguration is required and cannot be null.");
        }
        Validator.validate(sourceControlConfiguration);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, this.client.apiVersion(), sourceControlConfiguration, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SourceControlConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<SourceControlConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SourceControlConfigurationInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SourceControlConfigurationInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SourceControlConfigurationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SourceControlConfigurationInner>() { }.getType())
                .register(201, new TypeToken<SourceControlConfigurationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName).toBlocking().last().body();
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName), serviceCallback);
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (sourceControlConfigurationName == null) {
            throw new IllegalArgumentException("Parameter sourceControlConfigurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName).toBlocking().single().body();
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName), serviceCallback);
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future sync from the source repo.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String sourceControlConfigurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (sourceControlConfigurationName == null) {
            throw new IllegalArgumentException("Parameter sourceControlConfigurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SourceControlConfigurationInner&gt; object if successful.
     */
    public PagedList<SourceControlConfigurationInner> list(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        ServiceResponse<Page<SourceControlConfigurationInner>> response = listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName).toBlocking().single();
        return new PagedList<SourceControlConfigurationInner>(response.body()) {
            @Override
            public Page<SourceControlConfigurationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SourceControlConfigurationInner>> listAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName, final ListOperationCallback<SourceControlConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName),
            new Func1<String, Observable<ServiceResponse<Page<SourceControlConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SourceControlConfigurationInner&gt; object
     */
    public Observable<Page<SourceControlConfigurationInner>> listAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        return listWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName)
            .map(new Func1<ServiceResponse<Page<SourceControlConfigurationInner>>, Page<SourceControlConfigurationInner>>() {
                @Override
                public Page<SourceControlConfigurationInner> call(ServiceResponse<Page<SourceControlConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SourceControlConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        return listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName)
            .concatMap(new Func1<ServiceResponse<Page<SourceControlConfigurationInner>>, Observable<ServiceResponse<Page<SourceControlConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> call(ServiceResponse<Page<SourceControlConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
    ServiceResponse<PageImpl<SourceControlConfigurationInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<SourceControlConfigurationInner>> * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
    ServiceResponse<PageImpl<SourceControlConfigurationInner>> * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
    ServiceResponse<PageImpl<SourceControlConfigurationInner>> * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SourceControlConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> listSinglePageAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SourceControlConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SourceControlConfigurationInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SourceControlConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SourceControlConfigurationInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SourceControlConfigurationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SourceControlConfigurationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SourceControlConfigurationInner&gt; object if successful.
     */
    public PagedList<SourceControlConfigurationInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<SourceControlConfigurationInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SourceControlConfigurationInner>(response.body()) {
            @Override
            public Page<SourceControlConfigurationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SourceControlConfigurationInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<SourceControlConfigurationInner>> serviceFuture, final ListOperationCallback<SourceControlConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SourceControlConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SourceControlConfigurationInner&gt; object
     */
    public Observable<Page<SourceControlConfigurationInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SourceControlConfigurationInner>>, Page<SourceControlConfigurationInner>>() {
                @Override
                public Page<SourceControlConfigurationInner> call(ServiceResponse<Page<SourceControlConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SourceControlConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SourceControlConfigurationInner>>, Observable<ServiceResponse<Page<SourceControlConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> call(ServiceResponse<Page<SourceControlConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
    ServiceResponse<PageImpl<SourceControlConfigurationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SourceControlConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SourceControlConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SourceControlConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SourceControlConfigurationInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SourceControlConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SourceControlConfigurationInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SourceControlConfigurationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SourceControlConfigurationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
