// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The list of supported Kubernetes cluster versions for this extension type.
 */
@Fluent
public final class UnsupportedKubernetesVersions implements JsonSerializable<UnsupportedKubernetesVersions> {
    /*
     * The connectedCluster property.
     */
    private List<UnsupportedKubernetesMatrixItem> connectedCluster;

    /*
     * The appliances property.
     */
    private List<UnsupportedKubernetesMatrixItem> appliances;

    /*
     * The provisionedCluster property.
     */
    private List<UnsupportedKubernetesMatrixItem> provisionedCluster;

    /*
     * The managedCluster property.
     */
    private List<UnsupportedKubernetesMatrixItem> managedCluster;

    /**
     * Creates an instance of UnsupportedKubernetesVersions class.
     */
    public UnsupportedKubernetesVersions() {
    }

    /**
     * Get the connectedCluster property: The connectedCluster property.
     * 
     * @return the connectedCluster value.
     */
    public List<UnsupportedKubernetesMatrixItem> connectedCluster() {
        return this.connectedCluster;
    }

    /**
     * Set the connectedCluster property: The connectedCluster property.
     * 
     * @param connectedCluster the connectedCluster value to set.
     * @return the UnsupportedKubernetesVersions object itself.
     */
    public UnsupportedKubernetesVersions withConnectedCluster(List<UnsupportedKubernetesMatrixItem> connectedCluster) {
        this.connectedCluster = connectedCluster;
        return this;
    }

    /**
     * Get the appliances property: The appliances property.
     * 
     * @return the appliances value.
     */
    public List<UnsupportedKubernetesMatrixItem> appliances() {
        return this.appliances;
    }

    /**
     * Set the appliances property: The appliances property.
     * 
     * @param appliances the appliances value to set.
     * @return the UnsupportedKubernetesVersions object itself.
     */
    public UnsupportedKubernetesVersions withAppliances(List<UnsupportedKubernetesMatrixItem> appliances) {
        this.appliances = appliances;
        return this;
    }

    /**
     * Get the provisionedCluster property: The provisionedCluster property.
     * 
     * @return the provisionedCluster value.
     */
    public List<UnsupportedKubernetesMatrixItem> provisionedCluster() {
        return this.provisionedCluster;
    }

    /**
     * Set the provisionedCluster property: The provisionedCluster property.
     * 
     * @param provisionedCluster the provisionedCluster value to set.
     * @return the UnsupportedKubernetesVersions object itself.
     */
    public UnsupportedKubernetesVersions
        withProvisionedCluster(List<UnsupportedKubernetesMatrixItem> provisionedCluster) {
        this.provisionedCluster = provisionedCluster;
        return this;
    }

    /**
     * Get the managedCluster property: The managedCluster property.
     * 
     * @return the managedCluster value.
     */
    public List<UnsupportedKubernetesMatrixItem> managedCluster() {
        return this.managedCluster;
    }

    /**
     * Set the managedCluster property: The managedCluster property.
     * 
     * @param managedCluster the managedCluster value to set.
     * @return the UnsupportedKubernetesVersions object itself.
     */
    public UnsupportedKubernetesVersions withManagedCluster(List<UnsupportedKubernetesMatrixItem> managedCluster) {
        this.managedCluster = managedCluster;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectedCluster() != null) {
            connectedCluster().forEach(e -> e.validate());
        }
        if (appliances() != null) {
            appliances().forEach(e -> e.validate());
        }
        if (provisionedCluster() != null) {
            provisionedCluster().forEach(e -> e.validate());
        }
        if (managedCluster() != null) {
            managedCluster().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("connectedCluster", this.connectedCluster,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("appliances", this.appliances, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("provisionedCluster", this.provisionedCluster,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("managedCluster", this.managedCluster,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UnsupportedKubernetesVersions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UnsupportedKubernetesVersions if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UnsupportedKubernetesVersions.
     */
    public static UnsupportedKubernetesVersions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UnsupportedKubernetesVersions deserializedUnsupportedKubernetesVersions
                = new UnsupportedKubernetesVersions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectedCluster".equals(fieldName)) {
                    List<UnsupportedKubernetesMatrixItem> connectedCluster
                        = reader.readArray(reader1 -> UnsupportedKubernetesMatrixItem.fromJson(reader1));
                    deserializedUnsupportedKubernetesVersions.connectedCluster = connectedCluster;
                } else if ("appliances".equals(fieldName)) {
                    List<UnsupportedKubernetesMatrixItem> appliances
                        = reader.readArray(reader1 -> UnsupportedKubernetesMatrixItem.fromJson(reader1));
                    deserializedUnsupportedKubernetesVersions.appliances = appliances;
                } else if ("provisionedCluster".equals(fieldName)) {
                    List<UnsupportedKubernetesMatrixItem> provisionedCluster
                        = reader.readArray(reader1 -> UnsupportedKubernetesMatrixItem.fromJson(reader1));
                    deserializedUnsupportedKubernetesVersions.provisionedCluster = provisionedCluster;
                } else if ("managedCluster".equals(fieldName)) {
                    List<UnsupportedKubernetesMatrixItem> managedCluster
                        = reader.readArray(reader1 -> UnsupportedKubernetesMatrixItem.fromJson(reader1));
                    deserializedUnsupportedKubernetesVersions.managedCluster = managedCluster;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUnsupportedKubernetesVersions;
        });
    }
}
