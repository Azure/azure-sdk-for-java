// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The VersionForReleaseTrainProperties model.
 */
@Fluent
public final class VersionForReleaseTrainProperties implements JsonSerializable<VersionForReleaseTrainProperties> {
    /*
     * The version number for the extension type
     */
    private String version;

    /*
     * The list of supported Kubernetes cluster versions for this extension type
     */
    private UnsupportedKubernetesVersions unsupportedKubernetesVersions;

    /*
     * A list of supported cluster types for this version of the Extension Type
     */
    private List<String> supportedClusterTypes;

    /**
     * Creates an instance of VersionForReleaseTrainProperties class.
     */
    public VersionForReleaseTrainProperties() {
    }

    /**
     * Get the version property: The version number for the extension type.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version number for the extension type.
     * 
     * @param version the version value to set.
     * @return the VersionForReleaseTrainProperties object itself.
     */
    public VersionForReleaseTrainProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the unsupportedKubernetesVersions property: The list of supported Kubernetes cluster versions for this
     * extension type.
     * 
     * @return the unsupportedKubernetesVersions value.
     */
    public UnsupportedKubernetesVersions unsupportedKubernetesVersions() {
        return this.unsupportedKubernetesVersions;
    }

    /**
     * Set the unsupportedKubernetesVersions property: The list of supported Kubernetes cluster versions for this
     * extension type.
     * 
     * @param unsupportedKubernetesVersions the unsupportedKubernetesVersions value to set.
     * @return the VersionForReleaseTrainProperties object itself.
     */
    public VersionForReleaseTrainProperties
        withUnsupportedKubernetesVersions(UnsupportedKubernetesVersions unsupportedKubernetesVersions) {
        this.unsupportedKubernetesVersions = unsupportedKubernetesVersions;
        return this;
    }

    /**
     * Get the supportedClusterTypes property: A list of supported cluster types for this version of the Extension Type.
     * 
     * @return the supportedClusterTypes value.
     */
    public List<String> supportedClusterTypes() {
        return this.supportedClusterTypes;
    }

    /**
     * Set the supportedClusterTypes property: A list of supported cluster types for this version of the Extension Type.
     * 
     * @param supportedClusterTypes the supportedClusterTypes value to set.
     * @return the VersionForReleaseTrainProperties object itself.
     */
    public VersionForReleaseTrainProperties withSupportedClusterTypes(List<String> supportedClusterTypes) {
        this.supportedClusterTypes = supportedClusterTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (unsupportedKubernetesVersions() != null) {
            unsupportedKubernetesVersions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeJsonField("unsupportedKubernetesVersions", this.unsupportedKubernetesVersions);
        jsonWriter.writeArrayField("supportedClusterTypes", this.supportedClusterTypes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VersionForReleaseTrainProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VersionForReleaseTrainProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VersionForReleaseTrainProperties.
     */
    public static VersionForReleaseTrainProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VersionForReleaseTrainProperties deserializedVersionForReleaseTrainProperties
                = new VersionForReleaseTrainProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedVersionForReleaseTrainProperties.version = reader.getString();
                } else if ("unsupportedKubernetesVersions".equals(fieldName)) {
                    deserializedVersionForReleaseTrainProperties.unsupportedKubernetesVersions
                        = UnsupportedKubernetesVersions.fromJson(reader);
                } else if ("supportedClusterTypes".equals(fieldName)) {
                    List<String> supportedClusterTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedVersionForReleaseTrainProperties.supportedClusterTypes = supportedClusterTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVersionForReleaseTrainProperties;
        });
    }
}
