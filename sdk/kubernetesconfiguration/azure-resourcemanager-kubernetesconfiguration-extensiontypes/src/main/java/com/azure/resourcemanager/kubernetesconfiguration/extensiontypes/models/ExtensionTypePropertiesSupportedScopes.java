// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Supported Kubernetes Scopes for this Extension Type.
 */
@Fluent
public final class ExtensionTypePropertiesSupportedScopes
    implements JsonSerializable<ExtensionTypePropertiesSupportedScopes> {
    /*
     * The default scope of the extension type. This scope will be used if the user does not provide a scope while
     * creating an extension.
     */
    private String defaultScope;

    /*
     * Extension scope settings
     */
    private ClusterScopeSettings clusterScopeSettings;

    /**
     * Creates an instance of ExtensionTypePropertiesSupportedScopes class.
     */
    public ExtensionTypePropertiesSupportedScopes() {
    }

    /**
     * Get the defaultScope property: The default scope of the extension type. This scope will be used if the user does
     * not provide a scope while creating an extension.
     * 
     * @return the defaultScope value.
     */
    public String defaultScope() {
        return this.defaultScope;
    }

    /**
     * Set the defaultScope property: The default scope of the extension type. This scope will be used if the user does
     * not provide a scope while creating an extension.
     * 
     * @param defaultScope the defaultScope value to set.
     * @return the ExtensionTypePropertiesSupportedScopes object itself.
     */
    public ExtensionTypePropertiesSupportedScopes withDefaultScope(String defaultScope) {
        this.defaultScope = defaultScope;
        return this;
    }

    /**
     * Get the clusterScopeSettings property: Extension scope settings.
     * 
     * @return the clusterScopeSettings value.
     */
    public ClusterScopeSettings clusterScopeSettings() {
        return this.clusterScopeSettings;
    }

    /**
     * Set the clusterScopeSettings property: Extension scope settings.
     * 
     * @param clusterScopeSettings the clusterScopeSettings value to set.
     * @return the ExtensionTypePropertiesSupportedScopes object itself.
     */
    public ExtensionTypePropertiesSupportedScopes withClusterScopeSettings(ClusterScopeSettings clusterScopeSettings) {
        this.clusterScopeSettings = clusterScopeSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterScopeSettings() != null) {
            clusterScopeSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultScope", this.defaultScope);
        jsonWriter.writeJsonField("clusterScopeSettings", this.clusterScopeSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtensionTypePropertiesSupportedScopes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtensionTypePropertiesSupportedScopes if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExtensionTypePropertiesSupportedScopes.
     */
    public static ExtensionTypePropertiesSupportedScopes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtensionTypePropertiesSupportedScopes deserializedExtensionTypePropertiesSupportedScopes
                = new ExtensionTypePropertiesSupportedScopes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultScope".equals(fieldName)) {
                    deserializedExtensionTypePropertiesSupportedScopes.defaultScope = reader.getString();
                } else if ("clusterScopeSettings".equals(fieldName)) {
                    deserializedExtensionTypePropertiesSupportedScopes.clusterScopeSettings
                        = ClusterScopeSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtensionTypePropertiesSupportedScopes;
        });
    }
}
