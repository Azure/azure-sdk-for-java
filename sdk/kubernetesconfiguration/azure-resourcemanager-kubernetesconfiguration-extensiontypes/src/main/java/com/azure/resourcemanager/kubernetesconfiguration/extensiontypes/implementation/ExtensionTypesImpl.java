// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.fluent.ExtensionTypesClient;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.fluent.models.ExtensionTypeInner;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.fluent.models.VersionForReleaseTrainInner;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.models.ExtensionType;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.models.ExtensionTypes;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.models.VersionForReleaseTrain;

public final class ExtensionTypesImpl implements ExtensionTypes {
    private static final ClientLogger LOGGER = new ClientLogger(ExtensionTypesImpl.class);

    private final ExtensionTypesClient innerClient;

    private final com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.ExtensionTypesManager serviceManager;

    public ExtensionTypesImpl(ExtensionTypesClient innerClient,
        com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.ExtensionTypesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ExtensionType> locationList(String location) {
        PagedIterable<ExtensionTypeInner> inner = this.serviceClient().locationList(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionTypeImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionType> locationList(String location, String publisherId, String offerId, String planId,
        String releaseTrain, String clusterType, Context context) {
        PagedIterable<ExtensionTypeInner> inner = this.serviceClient()
            .locationList(location, publisherId, offerId, planId, releaseTrain, clusterType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionTypeImpl(inner1, this.manager()));
    }

    public Response<ExtensionType> locationGetWithResponse(String location, String extensionTypeName, Context context) {
        Response<ExtensionTypeInner> inner
            = this.serviceClient().locationGetWithResponse(location, extensionTypeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ExtensionTypeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ExtensionType locationGet(String location, String extensionTypeName) {
        ExtensionTypeInner inner = this.serviceClient().locationGet(location, extensionTypeName);
        if (inner != null) {
            return new ExtensionTypeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<VersionForReleaseTrain> listVersions(String location, String extensionTypeName) {
        PagedIterable<VersionForReleaseTrainInner> inner
            = this.serviceClient().listVersions(location, extensionTypeName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VersionForReleaseTrainImpl(inner1, this.manager()));
    }

    public PagedIterable<VersionForReleaseTrain> listVersions(String location, String extensionTypeName,
        String releaseTrain, String clusterType, String majorVersion, Boolean showLatest, Context context) {
        PagedIterable<VersionForReleaseTrainInner> inner = this.serviceClient()
            .listVersions(location, extensionTypeName, releaseTrain, clusterType, majorVersion, showLatest, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VersionForReleaseTrainImpl(inner1, this.manager()));
    }

    public Response<VersionForReleaseTrain> getVersionWithResponse(String location, String extensionTypeName,
        String versionNumber, Context context) {
        Response<VersionForReleaseTrainInner> inner
            = this.serviceClient().getVersionWithResponse(location, extensionTypeName, versionNumber, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new VersionForReleaseTrainImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VersionForReleaseTrain getVersion(String location, String extensionTypeName, String versionNumber) {
        VersionForReleaseTrainInner inner = this.serviceClient().getVersion(location, extensionTypeName, versionNumber);
        if (inner != null) {
            return new VersionForReleaseTrainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ExtensionType> list(String resourceGroupName, String clusterRp, String clusterResourceName,
        String clusterName) {
        PagedIterable<ExtensionTypeInner> inner
            = this.serviceClient().list(resourceGroupName, clusterRp, clusterResourceName, clusterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionTypeImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionType> list(String resourceGroupName, String clusterRp, String clusterResourceName,
        String clusterName, String publisherId, String offerId, String planId, String releaseTrain, Context context) {
        PagedIterable<ExtensionTypeInner> inner = this.serviceClient()
            .list(resourceGroupName, clusterRp, clusterResourceName, clusterName, publisherId, offerId, planId,
                releaseTrain, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionTypeImpl(inner1, this.manager()));
    }

    public Response<ExtensionType> getWithResponse(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName, Context context) {
        Response<ExtensionTypeInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ExtensionTypeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ExtensionType get(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName,
        String extensionTypeName) {
        ExtensionTypeInner inner = this.serviceClient()
            .get(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName);
        if (inner != null) {
            return new ExtensionTypeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<VersionForReleaseTrain> clusterListVersions(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName) {
        PagedIterable<VersionForReleaseTrainInner> inner = this.serviceClient()
            .clusterListVersions(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VersionForReleaseTrainImpl(inner1, this.manager()));
    }

    public PagedIterable<VersionForReleaseTrain> clusterListVersions(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName, String releaseTrain,
        String majorVersion, Boolean showLatest, Context context) {
        PagedIterable<VersionForReleaseTrainInner> inner = this.serviceClient()
            .clusterListVersions(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName,
                releaseTrain, majorVersion, showLatest, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VersionForReleaseTrainImpl(inner1, this.manager()));
    }

    public Response<VersionForReleaseTrain> clusterGetVersionWithResponse(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName, String versionNumber,
        Context context) {
        Response<VersionForReleaseTrainInner> inner = this.serviceClient()
            .clusterGetVersionWithResponse(resourceGroupName, clusterRp, clusterResourceName, clusterName,
                extensionTypeName, versionNumber, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new VersionForReleaseTrainImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VersionForReleaseTrain clusterGetVersion(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName, String versionNumber) {
        VersionForReleaseTrainInner inner = this.serviceClient()
            .clusterGetVersion(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName,
                versionNumber);
        if (inner != null) {
            return new VersionForReleaseTrainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ExtensionTypesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.ExtensionTypesManager manager() {
        return this.serviceManager;
    }
}
