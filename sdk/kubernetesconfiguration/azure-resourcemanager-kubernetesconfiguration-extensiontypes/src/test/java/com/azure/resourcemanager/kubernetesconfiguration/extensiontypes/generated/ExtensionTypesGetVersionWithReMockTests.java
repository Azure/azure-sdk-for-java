// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.ExtensionTypesManager;
import com.azure.resourcemanager.kubernetesconfiguration.extensiontypes.models.VersionForReleaseTrain;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExtensionTypesGetVersionWithReMockTests {
    @Test
    public void testGetVersionWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"version\":\"uahaquhcdhmd\",\"unsupportedKubernetesVersions\":{\"connectedCluster\":[{\"distributions\":[\"qpv\",\"adm\",\"sr\"],\"unsupportedVersions\":[\"vxpvgomz\"]}],\"appliances\":[{\"distributions\":[\"gwb\",\"b\",\"e\"],\"unsupportedVersions\":[\"wkz\"]},{\"distributions\":[\"io\",\"rqhakauha\",\"hsfwxosowzxcug\"],\"unsupportedVersions\":[\"ooxdjebwpuc\",\"wfvovbv\",\"euecivyhzceuoj\"]}],\"provisionedCluster\":[{\"distributions\":[\"ueiotwmcdyt\",\"x\",\"it\",\"nrjawgqwg\"],\"unsupportedVersions\":[\"isk\"]}],\"managedCluster\":[{\"distributions\":[\"y\"],\"unsupportedVersions\":[\"lwn\",\"nhjdauw\",\"vylwzbtdhxuj\",\"nbmpowuwprzq\"]},{\"distributions\":[\"ualupjmkh\",\"xobbcswsrt\",\"riplrbpbewtg\"],\"unsupportedVersions\":[\"blcg\",\"xzvlvqhjkbegib\",\"nmxiebwwaloayqc\"]}]},\"supportedClusterTypes\":[\"tzjuzgwyzmhtxo\",\"gmtsavjcbpwxqpsr\"]},\"id\":\"nftguvriuhpr\",\"name\":\"mdyvxqtayriw\",\"type\":\"ro\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ExtensionTypesManager manager = ExtensionTypesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        VersionForReleaseTrain response = manager.extensionTypes()
            .getVersionWithResponse("hspkdeemao", "mx", "gkvtmelmqkrhah", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("uahaquhcdhmd", response.properties().version());
        Assertions.assertEquals("qpv",
            response.properties().unsupportedKubernetesVersions().connectedCluster().get(0).distributions().get(0));
        Assertions.assertEquals("vxpvgomz",
            response.properties()
                .unsupportedKubernetesVersions()
                .connectedCluster()
                .get(0)
                .unsupportedVersions()
                .get(0));
        Assertions.assertEquals("gwb",
            response.properties().unsupportedKubernetesVersions().appliances().get(0).distributions().get(0));
        Assertions.assertEquals("wkz",
            response.properties().unsupportedKubernetesVersions().appliances().get(0).unsupportedVersions().get(0));
        Assertions.assertEquals("ueiotwmcdyt",
            response.properties().unsupportedKubernetesVersions().provisionedCluster().get(0).distributions().get(0));
        Assertions.assertEquals("isk",
            response.properties()
                .unsupportedKubernetesVersions()
                .provisionedCluster()
                .get(0)
                .unsupportedVersions()
                .get(0));
        Assertions.assertEquals("y",
            response.properties().unsupportedKubernetesVersions().managedCluster().get(0).distributions().get(0));
        Assertions.assertEquals("lwn",
            response.properties().unsupportedKubernetesVersions().managedCluster().get(0).unsupportedVersions().get(0));
        Assertions.assertEquals("tzjuzgwyzmhtxo", response.properties().supportedClusterTypes().get(0));
    }
}
