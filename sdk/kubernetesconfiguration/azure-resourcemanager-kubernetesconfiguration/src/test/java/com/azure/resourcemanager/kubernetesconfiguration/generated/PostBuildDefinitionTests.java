// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesconfiguration.models.PostBuildDefinition;
import com.azure.resourcemanager.kubernetesconfiguration.models.SubstituteFromDefinition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PostBuildDefinitionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PostBuildDefinition model =
            BinaryData
                .fromString(
                    "{\"substitute\":{\"cuiywgqyw\":\"yktz\",\"phrcgyncoc\":\"ndrvynhzg\",\"oo\":\"ecfvmm\"},\"substituteFrom\":[{\"kind\":\"zevgb\",\"name\":\"jqabcypmivkwlzuv\",\"optional\":false},{\"kind\":\"nfnbacfionlebxe\",\"name\":\"gtzxdpn\",\"optional\":false},{\"kind\":\"wxrjfeallnwsub\",\"name\":\"njampm\",\"optional\":false},{\"kind\":\"scxaq\",\"name\":\"ochcbonqvpkvl\",\"optional\":true}]}")
                .toObject(PostBuildDefinition.class);
        Assertions.assertEquals("yktz", model.substitute().get("cuiywgqyw"));
        Assertions.assertEquals("zevgb", model.substituteFrom().get(0).kind());
        Assertions.assertEquals("jqabcypmivkwlzuv", model.substituteFrom().get(0).name());
        Assertions.assertEquals(false, model.substituteFrom().get(0).optional());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PostBuildDefinition model =
            new PostBuildDefinition()
                .withSubstitute(mapOf("cuiywgqyw", "yktz", "phrcgyncoc", "ndrvynhzg", "oo", "ecfvmm"))
                .withSubstituteFrom(
                    Arrays
                        .asList(
                            new SubstituteFromDefinition()
                                .withKind("zevgb")
                                .withName("jqabcypmivkwlzuv")
                                .withOptional(false),
                            new SubstituteFromDefinition()
                                .withKind("nfnbacfionlebxe")
                                .withName("gtzxdpn")
                                .withOptional(false),
                            new SubstituteFromDefinition()
                                .withKind("wxrjfeallnwsub")
                                .withName("njampm")
                                .withOptional(false),
                            new SubstituteFromDefinition()
                                .withKind("scxaq")
                                .withName("ochcbonqvpkvl")
                                .withOptional(true)));
        model = BinaryData.fromObject(model).toObject(PostBuildDefinition.class);
        Assertions.assertEquals("yktz", model.substitute().get("cuiywgqyw"));
        Assertions.assertEquals("zevgb", model.substituteFrom().get(0).kind());
        Assertions.assertEquals("jqabcypmivkwlzuv", model.substituteFrom().get(0).name());
        Assertions.assertEquals(false, model.substituteFrom().get(0).optional());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
