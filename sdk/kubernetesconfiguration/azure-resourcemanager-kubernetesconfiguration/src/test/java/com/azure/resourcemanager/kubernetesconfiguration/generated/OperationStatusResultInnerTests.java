// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesconfiguration.fluent.models.OperationStatusResultInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OperationStatusResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationStatusResultInner model =
            BinaryData
                .fromString(
                    "{\"id\":\"amiheognarxz\",\"name\":\"heotusiv\",\"status\":\"evcciqihnhun\",\"properties\":{\"gxg\":\"jzrnf\",\"fublj\":\"spemvtzfk\",\"aeqjhqjbasvms\":\"fxqeof\",\"gsntnbybkzgcwr\":\"jqul\"}}")
                .toObject(OperationStatusResultInner.class);
        Assertions.assertEquals("amiheognarxz", model.id());
        Assertions.assertEquals("heotusiv", model.name());
        Assertions.assertEquals("evcciqihnhun", model.status());
        Assertions.assertEquals("jzrnf", model.properties().get("gxg"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationStatusResultInner model =
            new OperationStatusResultInner()
                .withId("amiheognarxz")
                .withName("heotusiv")
                .withStatus("evcciqihnhun")
                .withProperties(
                    mapOf("gxg", "jzrnf", "fublj", "spemvtzfk", "aeqjhqjbasvms", "fxqeof", "gsntnbybkzgcwr", "jqul"));
        model = BinaryData.fromObject(model).toObject(OperationStatusResultInner.class);
        Assertions.assertEquals("amiheognarxz", model.id());
        Assertions.assertEquals("heotusiv", model.name());
        Assertions.assertEquals("evcciqihnhun", model.status());
        Assertions.assertEquals("jzrnf", model.properties().get("gxg"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
