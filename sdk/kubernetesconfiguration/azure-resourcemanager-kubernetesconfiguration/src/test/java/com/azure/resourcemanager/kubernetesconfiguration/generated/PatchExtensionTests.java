// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesconfiguration.models.PatchExtension;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PatchExtensionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PatchExtension model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"autoUpgradeMinorVersion\":true,\"releaseTrain\":\"jhulsuuvmkjo\",\"version\":\"rwfndiod\",\"configurationSettings\":{\"ryo\":\"lwejdpv\",\"hbcryffdfdosyge\":\"psoacctazakljl\",\"rzevdphlxaol\":\"paojakhmsbzjh\"},\"configurationProtectedSettings\":{\"jbp\":\"trg\",\"jrwzox\":\"zfsinzgvf\",\"felluwfzitonpe\":\"j\",\"vhpfxxypininmay\":\"fpjkjlxofp\"}}}")
                .toObject(PatchExtension.class);
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
        Assertions.assertEquals("jhulsuuvmkjo", model.releaseTrain());
        Assertions.assertEquals("rwfndiod", model.version());
        Assertions.assertEquals("lwejdpv", model.configurationSettings().get("ryo"));
        Assertions.assertEquals("trg", model.configurationProtectedSettings().get("jbp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PatchExtension model =
            new PatchExtension()
                .withAutoUpgradeMinorVersion(true)
                .withReleaseTrain("jhulsuuvmkjo")
                .withVersion("rwfndiod")
                .withConfigurationSettings(
                    mapOf("ryo", "lwejdpv", "hbcryffdfdosyge", "psoacctazakljl", "rzevdphlxaol", "paojakhmsbzjh"))
                .withConfigurationProtectedSettings(
                    mapOf("jbp", "trg", "jrwzox", "zfsinzgvf", "felluwfzitonpe", "j", "vhpfxxypininmay", "fpjkjlxofp"));
        model = BinaryData.fromObject(model).toObject(PatchExtension.class);
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
        Assertions.assertEquals("jhulsuuvmkjo", model.releaseTrain());
        Assertions.assertEquals("rwfndiod", model.version());
        Assertions.assertEquals("lwejdpv", model.configurationSettings().get("ryo"));
        Assertions.assertEquals("trg", model.configurationProtectedSettings().get("jbp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
