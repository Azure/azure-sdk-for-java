// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Updatable properties of an Extension Patch Request.
 */
@Fluent
public final class PatchExtensionProperties implements JsonSerializable<PatchExtensionProperties> {
    /*
     * Flag to note if this extension participates in auto upgrade of minor version, or not.
     */
    private Boolean autoUpgradeMinorVersion;

    /*
     * ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if
     * autoUpgradeMinorVersion is 'true'.
     */
    private String releaseTrain;

    /*
     * Version of the extension for this extension, if it is 'pinned' to a specific version. autoUpgradeMinorVersion
     * must be 'false'.
     */
    private String version;

    /*
     * Configuration settings, as name-value pairs for configuring this extension.
     */
    private Map<String, String> configurationSettings;

    /*
     * Configuration settings that are sensitive, as name-value pairs for configuring this extension.
     */
    private Map<String, String> configurationProtectedSettings;

    /**
     * Creates an instance of PatchExtensionProperties class.
     */
    public PatchExtensionProperties() {
    }

    /**
     * Get the autoUpgradeMinorVersion property: Flag to note if this extension participates in auto upgrade of minor
     * version, or not.
     * 
     * @return the autoUpgradeMinorVersion value.
     */
    public Boolean autoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion;
    }

    /**
     * Set the autoUpgradeMinorVersion property: Flag to note if this extension participates in auto upgrade of minor
     * version, or not.
     * 
     * @param autoUpgradeMinorVersion the autoUpgradeMinorVersion value to set.
     * @return the PatchExtensionProperties object itself.
     */
    public PatchExtensionProperties withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        return this;
    }

    /**
     * Get the releaseTrain property: ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
     * Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     * 
     * @return the releaseTrain value.
     */
    public String releaseTrain() {
        return this.releaseTrain;
    }

    /**
     * Set the releaseTrain property: ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
     * Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     * 
     * @param releaseTrain the releaseTrain value to set.
     * @return the PatchExtensionProperties object itself.
     */
    public PatchExtensionProperties withReleaseTrain(String releaseTrain) {
        this.releaseTrain = releaseTrain;
        return this;
    }

    /**
     * Get the version property: Version of the extension for this extension, if it is 'pinned' to a specific version.
     * autoUpgradeMinorVersion must be 'false'.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of the extension for this extension, if it is 'pinned' to a specific version.
     * autoUpgradeMinorVersion must be 'false'.
     * 
     * @param version the version value to set.
     * @return the PatchExtensionProperties object itself.
     */
    public PatchExtensionProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the configurationSettings property: Configuration settings, as name-value pairs for configuring this
     * extension.
     * 
     * @return the configurationSettings value.
     */
    public Map<String, String> configurationSettings() {
        return this.configurationSettings;
    }

    /**
     * Set the configurationSettings property: Configuration settings, as name-value pairs for configuring this
     * extension.
     * 
     * @param configurationSettings the configurationSettings value to set.
     * @return the PatchExtensionProperties object itself.
     */
    public PatchExtensionProperties withConfigurationSettings(Map<String, String> configurationSettings) {
        this.configurationSettings = configurationSettings;
        return this;
    }

    /**
     * Get the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this extension.
     * 
     * @return the configurationProtectedSettings value.
     */
    public Map<String, String> configurationProtectedSettings() {
        return this.configurationProtectedSettings;
    }

    /**
     * Set the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this extension.
     * 
     * @param configurationProtectedSettings the configurationProtectedSettings value to set.
     * @return the PatchExtensionProperties object itself.
     */
    public PatchExtensionProperties
        withConfigurationProtectedSettings(Map<String, String> configurationProtectedSettings) {
        this.configurationProtectedSettings = configurationProtectedSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("autoUpgradeMinorVersion", this.autoUpgradeMinorVersion);
        jsonWriter.writeStringField("releaseTrain", this.releaseTrain);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeMapField("configurationSettings", this.configurationSettings,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("configurationProtectedSettings", this.configurationProtectedSettings,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatchExtensionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatchExtensionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PatchExtensionProperties.
     */
    public static PatchExtensionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PatchExtensionProperties deserializedPatchExtensionProperties = new PatchExtensionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoUpgradeMinorVersion".equals(fieldName)) {
                    deserializedPatchExtensionProperties.autoUpgradeMinorVersion
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("releaseTrain".equals(fieldName)) {
                    deserializedPatchExtensionProperties.releaseTrain = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedPatchExtensionProperties.version = reader.getString();
                } else if ("configurationSettings".equals(fieldName)) {
                    Map<String, String> configurationSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedPatchExtensionProperties.configurationSettings = configurationSettings;
                } else if ("configurationProtectedSettings".equals(fieldName)) {
                    Map<String, String> configurationProtectedSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedPatchExtensionProperties.configurationProtectedSettings
                        = configurationProtectedSettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPatchExtensionProperties;
        });
    }
}
