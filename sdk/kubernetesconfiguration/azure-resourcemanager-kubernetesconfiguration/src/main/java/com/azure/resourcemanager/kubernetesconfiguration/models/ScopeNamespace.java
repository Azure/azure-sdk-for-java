// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies that the scope of the extension is Namespace.
 */
@Fluent
public final class ScopeNamespace implements JsonSerializable<ScopeNamespace> {
    /*
     * Namespace where the extension will be created for an Namespace scoped extension. If this namespace does not
     * exist, it will be created
     */
    private String targetNamespace;

    /**
     * Creates an instance of ScopeNamespace class.
     */
    public ScopeNamespace() {
    }

    /**
     * Get the targetNamespace property: Namespace where the extension will be created for an Namespace scoped
     * extension. If this namespace does not exist, it will be created.
     * 
     * @return the targetNamespace value.
     */
    public String targetNamespace() {
        return this.targetNamespace;
    }

    /**
     * Set the targetNamespace property: Namespace where the extension will be created for an Namespace scoped
     * extension. If this namespace does not exist, it will be created.
     * 
     * @param targetNamespace the targetNamespace value to set.
     * @return the ScopeNamespace object itself.
     */
    public ScopeNamespace withTargetNamespace(String targetNamespace) {
        this.targetNamespace = targetNamespace;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetNamespace", this.targetNamespace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScopeNamespace from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScopeNamespace if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScopeNamespace.
     */
    public static ScopeNamespace fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScopeNamespace deserializedScopeNamespace = new ScopeNamespace();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetNamespace".equals(fieldName)) {
                    deserializedScopeNamespace.targetNamespace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScopeNamespace;
        });
    }
}
