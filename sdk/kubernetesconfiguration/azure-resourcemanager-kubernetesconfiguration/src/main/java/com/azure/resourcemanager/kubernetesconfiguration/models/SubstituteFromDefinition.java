// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization. */
@Fluent
public final class SubstituteFromDefinition {
    /*
     * Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Name of the ConfigMap/Secret that holds the variables to be used in substitution.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Set to True to proceed without ConfigMap/Secret, if it is not present.
     */
    @JsonProperty(value = "optional")
    private Boolean optional;

    /** Creates an instance of SubstituteFromDefinition class. */
    public SubstituteFromDefinition() {
    }

    /**
     * Get the kind property: Define whether it is ConfigMap or Secret that holds the variables to be used in
     * substitution.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Define whether it is ConfigMap or Secret that holds the variables to be used in
     * substitution.
     *
     * @param kind the kind value to set.
     * @return the SubstituteFromDefinition object itself.
     */
    public SubstituteFromDefinition withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the name property: Name of the ConfigMap/Secret that holds the variables to be used in substitution.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the ConfigMap/Secret that holds the variables to be used in substitution.
     *
     * @param name the name value to set.
     * @return the SubstituteFromDefinition object itself.
     */
    public SubstituteFromDefinition withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the optional property: Set to True to proceed without ConfigMap/Secret, if it is not present.
     *
     * @return the optional value.
     */
    public Boolean optional() {
        return this.optional;
    }

    /**
     * Set the optional property: Set to True to proceed without ConfigMap/Secret, if it is not present.
     *
     * @param optional the optional value to set.
     * @return the SubstituteFromDefinition object itself.
     */
    public SubstituteFromDefinition withOptional(Boolean optional) {
        this.optional = optional;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
