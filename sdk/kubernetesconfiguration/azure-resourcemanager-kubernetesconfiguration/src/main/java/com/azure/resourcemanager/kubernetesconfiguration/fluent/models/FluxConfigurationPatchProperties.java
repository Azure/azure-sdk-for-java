// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kubernetesconfiguration.models.AzureBlobPatchDefinition;
import com.azure.resourcemanager.kubernetesconfiguration.models.BucketPatchDefinition;
import com.azure.resourcemanager.kubernetesconfiguration.models.GitRepositoryPatchDefinition;
import com.azure.resourcemanager.kubernetesconfiguration.models.KustomizationPatchDefinition;
import com.azure.resourcemanager.kubernetesconfiguration.models.SourceKindType;
import java.io.IOException;
import java.util.Map;

/**
 * Updatable properties of an Flux Configuration Patch Request.
 */
@Fluent
public final class FluxConfigurationPatchProperties implements JsonSerializable<FluxConfigurationPatchProperties> {
    /*
     * Source Kind to pull the configuration data from.
     */
    private SourceKindType sourceKind;

    /*
     * Whether this configuration should suspend its reconciliation of its kustomizations and sources.
     */
    private Boolean suspend;

    /*
     * Parameters to reconcile to the GitRepository source kind type.
     */
    private GitRepositoryPatchDefinition gitRepository;

    /*
     * Parameters to reconcile to the Bucket source kind type.
     */
    private BucketPatchDefinition bucket;

    /*
     * Parameters to reconcile to the AzureBlob source kind type.
     */
    private AzureBlobPatchDefinition azureBlob;

    /*
     * Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.
     */
    private Map<String, KustomizationPatchDefinition> kustomizations;

    /*
     * Key-value pairs of protected configuration settings for the configuration
     */
    private Map<String, String> configurationProtectedSettings;

    /**
     * Creates an instance of FluxConfigurationPatchProperties class.
     */
    public FluxConfigurationPatchProperties() {
    }

    /**
     * Get the sourceKind property: Source Kind to pull the configuration data from.
     * 
     * @return the sourceKind value.
     */
    public SourceKindType sourceKind() {
        return this.sourceKind;
    }

    /**
     * Set the sourceKind property: Source Kind to pull the configuration data from.
     * 
     * @param sourceKind the sourceKind value to set.
     * @return the FluxConfigurationPatchProperties object itself.
     */
    public FluxConfigurationPatchProperties withSourceKind(SourceKindType sourceKind) {
        this.sourceKind = sourceKind;
        return this;
    }

    /**
     * Get the suspend property: Whether this configuration should suspend its reconciliation of its kustomizations and
     * sources.
     * 
     * @return the suspend value.
     */
    public Boolean suspend() {
        return this.suspend;
    }

    /**
     * Set the suspend property: Whether this configuration should suspend its reconciliation of its kustomizations and
     * sources.
     * 
     * @param suspend the suspend value to set.
     * @return the FluxConfigurationPatchProperties object itself.
     */
    public FluxConfigurationPatchProperties withSuspend(Boolean suspend) {
        this.suspend = suspend;
        return this;
    }

    /**
     * Get the gitRepository property: Parameters to reconcile to the GitRepository source kind type.
     * 
     * @return the gitRepository value.
     */
    public GitRepositoryPatchDefinition gitRepository() {
        return this.gitRepository;
    }

    /**
     * Set the gitRepository property: Parameters to reconcile to the GitRepository source kind type.
     * 
     * @param gitRepository the gitRepository value to set.
     * @return the FluxConfigurationPatchProperties object itself.
     */
    public FluxConfigurationPatchProperties withGitRepository(GitRepositoryPatchDefinition gitRepository) {
        this.gitRepository = gitRepository;
        return this;
    }

    /**
     * Get the bucket property: Parameters to reconcile to the Bucket source kind type.
     * 
     * @return the bucket value.
     */
    public BucketPatchDefinition bucket() {
        return this.bucket;
    }

    /**
     * Set the bucket property: Parameters to reconcile to the Bucket source kind type.
     * 
     * @param bucket the bucket value to set.
     * @return the FluxConfigurationPatchProperties object itself.
     */
    public FluxConfigurationPatchProperties withBucket(BucketPatchDefinition bucket) {
        this.bucket = bucket;
        return this;
    }

    /**
     * Get the azureBlob property: Parameters to reconcile to the AzureBlob source kind type.
     * 
     * @return the azureBlob value.
     */
    public AzureBlobPatchDefinition azureBlob() {
        return this.azureBlob;
    }

    /**
     * Set the azureBlob property: Parameters to reconcile to the AzureBlob source kind type.
     * 
     * @param azureBlob the azureBlob value to set.
     * @return the FluxConfigurationPatchProperties object itself.
     */
    public FluxConfigurationPatchProperties withAzureBlob(AzureBlobPatchDefinition azureBlob) {
        this.azureBlob = azureBlob;
        return this;
    }

    /**
     * Get the kustomizations property: Array of kustomizations used to reconcile the artifact pulled by the source type
     * on the cluster.
     * 
     * @return the kustomizations value.
     */
    public Map<String, KustomizationPatchDefinition> kustomizations() {
        return this.kustomizations;
    }

    /**
     * Set the kustomizations property: Array of kustomizations used to reconcile the artifact pulled by the source type
     * on the cluster.
     * 
     * @param kustomizations the kustomizations value to set.
     * @return the FluxConfigurationPatchProperties object itself.
     */
    public FluxConfigurationPatchProperties
        withKustomizations(Map<String, KustomizationPatchDefinition> kustomizations) {
        this.kustomizations = kustomizations;
        return this;
    }

    /**
     * Get the configurationProtectedSettings property: Key-value pairs of protected configuration settings for the
     * configuration.
     * 
     * @return the configurationProtectedSettings value.
     */
    public Map<String, String> configurationProtectedSettings() {
        return this.configurationProtectedSettings;
    }

    /**
     * Set the configurationProtectedSettings property: Key-value pairs of protected configuration settings for the
     * configuration.
     * 
     * @param configurationProtectedSettings the configurationProtectedSettings value to set.
     * @return the FluxConfigurationPatchProperties object itself.
     */
    public FluxConfigurationPatchProperties
        withConfigurationProtectedSettings(Map<String, String> configurationProtectedSettings) {
        this.configurationProtectedSettings = configurationProtectedSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (gitRepository() != null) {
            gitRepository().validate();
        }
        if (bucket() != null) {
            bucket().validate();
        }
        if (azureBlob() != null) {
            azureBlob().validate();
        }
        if (kustomizations() != null) {
            kustomizations().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceKind", this.sourceKind == null ? null : this.sourceKind.toString());
        jsonWriter.writeBooleanField("suspend", this.suspend);
        jsonWriter.writeJsonField("gitRepository", this.gitRepository);
        jsonWriter.writeJsonField("bucket", this.bucket);
        jsonWriter.writeJsonField("azureBlob", this.azureBlob);
        jsonWriter.writeMapField("kustomizations", this.kustomizations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("configurationProtectedSettings", this.configurationProtectedSettings,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FluxConfigurationPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FluxConfigurationPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FluxConfigurationPatchProperties.
     */
    public static FluxConfigurationPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FluxConfigurationPatchProperties deserializedFluxConfigurationPatchProperties
                = new FluxConfigurationPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceKind".equals(fieldName)) {
                    deserializedFluxConfigurationPatchProperties.sourceKind
                        = SourceKindType.fromString(reader.getString());
                } else if ("suspend".equals(fieldName)) {
                    deserializedFluxConfigurationPatchProperties.suspend = reader.getNullable(JsonReader::getBoolean);
                } else if ("gitRepository".equals(fieldName)) {
                    deserializedFluxConfigurationPatchProperties.gitRepository
                        = GitRepositoryPatchDefinition.fromJson(reader);
                } else if ("bucket".equals(fieldName)) {
                    deserializedFluxConfigurationPatchProperties.bucket = BucketPatchDefinition.fromJson(reader);
                } else if ("azureBlob".equals(fieldName)) {
                    deserializedFluxConfigurationPatchProperties.azureBlob = AzureBlobPatchDefinition.fromJson(reader);
                } else if ("kustomizations".equals(fieldName)) {
                    Map<String, KustomizationPatchDefinition> kustomizations
                        = reader.readMap(reader1 -> KustomizationPatchDefinition.fromJson(reader1));
                    deserializedFluxConfigurationPatchProperties.kustomizations = kustomizations;
                } else if ("configurationProtectedSettings".equals(fieldName)) {
                    Map<String, String> configurationProtectedSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedFluxConfigurationPatchProperties.configurationProtectedSettings
                        = configurationProtectedSettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFluxConfigurationPatchProperties;
        });
    }
}
