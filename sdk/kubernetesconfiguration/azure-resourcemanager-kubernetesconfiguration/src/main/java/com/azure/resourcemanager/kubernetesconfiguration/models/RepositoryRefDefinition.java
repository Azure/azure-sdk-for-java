// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The source reference for the GitRepository object.
 */
@Fluent
public final class RepositoryRefDefinition implements JsonSerializable<RepositoryRefDefinition> {
    /*
     * The git repository branch name to checkout.
     */
    private String branch;

    /*
     * The git repository tag name to checkout. This takes precedence over branch.
     */
    private String tag;

    /*
     * The semver range used to match against git repository tags. This takes precedence over tag.
     */
    private String semver;

    /*
     * The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence
     * over semver.
     */
    private String commit;

    /**
     * Creates an instance of RepositoryRefDefinition class.
     */
    public RepositoryRefDefinition() {
    }

    /**
     * Get the branch property: The git repository branch name to checkout.
     * 
     * @return the branch value.
     */
    public String branch() {
        return this.branch;
    }

    /**
     * Set the branch property: The git repository branch name to checkout.
     * 
     * @param branch the branch value to set.
     * @return the RepositoryRefDefinition object itself.
     */
    public RepositoryRefDefinition withBranch(String branch) {
        this.branch = branch;
        return this;
    }

    /**
     * Get the tag property: The git repository tag name to checkout. This takes precedence over branch.
     * 
     * @return the tag value.
     */
    public String tag() {
        return this.tag;
    }

    /**
     * Set the tag property: The git repository tag name to checkout. This takes precedence over branch.
     * 
     * @param tag the tag value to set.
     * @return the RepositoryRefDefinition object itself.
     */
    public RepositoryRefDefinition withTag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Get the semver property: The semver range used to match against git repository tags. This takes precedence over
     * tag.
     * 
     * @return the semver value.
     */
    public String semver() {
        return this.semver;
    }

    /**
     * Set the semver property: The semver range used to match against git repository tags. This takes precedence over
     * tag.
     * 
     * @param semver the semver value to set.
     * @return the RepositoryRefDefinition object itself.
     */
    public RepositoryRefDefinition withSemver(String semver) {
        this.semver = semver;
        return this;
    }

    /**
     * Get the commit property: The commit SHA to checkout. This value must be combined with the branch name to be
     * valid. This takes precedence over semver.
     * 
     * @return the commit value.
     */
    public String commit() {
        return this.commit;
    }

    /**
     * Set the commit property: The commit SHA to checkout. This value must be combined with the branch name to be
     * valid. This takes precedence over semver.
     * 
     * @param commit the commit value to set.
     * @return the RepositoryRefDefinition object itself.
     */
    public RepositoryRefDefinition withCommit(String commit) {
        this.commit = commit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("branch", this.branch);
        jsonWriter.writeStringField("tag", this.tag);
        jsonWriter.writeStringField("semver", this.semver);
        jsonWriter.writeStringField("commit", this.commit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RepositoryRefDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RepositoryRefDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RepositoryRefDefinition.
     */
    public static RepositoryRefDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RepositoryRefDefinition deserializedRepositoryRefDefinition = new RepositoryRefDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("branch".equals(fieldName)) {
                    deserializedRepositoryRefDefinition.branch = reader.getString();
                } else if ("tag".equals(fieldName)) {
                    deserializedRepositoryRefDefinition.tag = reader.getString();
                } else if ("semver".equals(fieldName)) {
                    deserializedRepositoryRefDefinition.semver = reader.getString();
                } else if ("commit".equals(fieldName)) {
                    deserializedRepositoryRefDefinition.commit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRepositoryRefDefinition;
        });
    }
}
