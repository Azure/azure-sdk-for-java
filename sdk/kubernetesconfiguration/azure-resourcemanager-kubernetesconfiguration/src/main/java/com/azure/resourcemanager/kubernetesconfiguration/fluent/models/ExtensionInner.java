// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionPropertiesAksAssignedIdentity;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionStatus;
import com.azure.resourcemanager.kubernetesconfiguration.models.Identity;
import com.azure.resourcemanager.kubernetesconfiguration.models.ProvisioningState;
import com.azure.resourcemanager.kubernetesconfiguration.models.Scope;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The Extension object. */
@JsonFlatten
@Fluent
public class ExtensionInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExtensionInner.class);

    /*
     * Identity of the Extension resource
     */
    @JsonProperty(value = "identity")
    private Identity identity;

    /*
     * Top level metadata
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Type of the Extension, of which this resource is an instance of.  It
     * must be one of the Extension Types registered with
     * Microsoft.KubernetesConfiguration by the Extension publisher.
     */
    @JsonProperty(value = "properties.extensionType")
    private String extensionType;

    /*
     * Flag to note if this extension participates in auto upgrade of minor
     * version, or not.
     */
    @JsonProperty(value = "properties.autoUpgradeMinorVersion")
    private Boolean autoUpgradeMinorVersion;

    /*
     * ReleaseTrain this extension participates in for auto-upgrade (e.g.
     * Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     */
    @JsonProperty(value = "properties.releaseTrain")
    private String releaseTrain;

    /*
     * Version of the extension for this extension, if it is 'pinned' to a
     * specific version. autoUpgradeMinorVersion must be 'false'.
     */
    @JsonProperty(value = "properties.version")
    private String version;

    /*
     * Scope at which the extension is installed.
     */
    @JsonProperty(value = "properties.scope")
    private Scope scope;

    /*
     * Configuration settings, as name-value pairs for configuring this
     * extension.
     */
    @JsonProperty(value = "properties.configurationSettings")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> configurationSettings;

    /*
     * Configuration settings that are sensitive, as name-value pairs for
     * configuring this extension.
     */
    @JsonProperty(value = "properties.configurationProtectedSettings")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> configurationProtectedSettings;

    /*
     * The provisioning state of the extension resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Status from this extension.
     */
    @JsonProperty(value = "properties.statuses")
    private List<ExtensionStatus> statuses;

    /*
     * The error detail.
     */
    @JsonProperty(value = "properties.errorInfo")
    private ManagementError errorInfo;

    /*
     * Custom Location settings properties.
     */
    @JsonProperty(value = "properties.customLocationSettings", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> customLocationSettings;

    /*
     * Uri of the Helm package
     */
    @JsonProperty(value = "properties.packageUri", access = JsonProperty.Access.WRITE_ONLY)
    private String packageUri;

    /*
     * Identity of the Extension resource in an AKS cluster
     */
    @JsonProperty(value = "properties.aksAssignedIdentity")
    private ExtensionPropertiesAksAssignedIdentity aksAssignedIdentity;

    /**
     * Get the identity property: Identity of the Extension resource.
     *
     * @return the identity value.
     */
    public Identity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity of the Extension resource.
     *
     * @param identity the identity value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Top level metadata
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the extensionType property: Type of the Extension, of which this resource is an instance of. It must be one
     * of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     *
     * @return the extensionType value.
     */
    public String extensionType() {
        return this.extensionType;
    }

    /**
     * Set the extensionType property: Type of the Extension, of which this resource is an instance of. It must be one
     * of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     *
     * @param extensionType the extensionType value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withExtensionType(String extensionType) {
        this.extensionType = extensionType;
        return this;
    }

    /**
     * Get the autoUpgradeMinorVersion property: Flag to note if this extension participates in auto upgrade of minor
     * version, or not.
     *
     * @return the autoUpgradeMinorVersion value.
     */
    public Boolean autoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion;
    }

    /**
     * Set the autoUpgradeMinorVersion property: Flag to note if this extension participates in auto upgrade of minor
     * version, or not.
     *
     * @param autoUpgradeMinorVersion the autoUpgradeMinorVersion value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        return this;
    }

    /**
     * Get the releaseTrain property: ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
     * Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @return the releaseTrain value.
     */
    public String releaseTrain() {
        return this.releaseTrain;
    }

    /**
     * Set the releaseTrain property: ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
     * Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @param releaseTrain the releaseTrain value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withReleaseTrain(String releaseTrain) {
        this.releaseTrain = releaseTrain;
        return this;
    }

    /**
     * Get the version property: Version of the extension for this extension, if it is 'pinned' to a specific version.
     * autoUpgradeMinorVersion must be 'false'.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of the extension for this extension, if it is 'pinned' to a specific version.
     * autoUpgradeMinorVersion must be 'false'.
     *
     * @param version the version value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the scope property: Scope at which the extension is installed.
     *
     * @return the scope value.
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Scope at which the extension is installed.
     *
     * @param scope the scope value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the configurationSettings property: Configuration settings, as name-value pairs for configuring this
     * extension.
     *
     * @return the configurationSettings value.
     */
    public Map<String, String> configurationSettings() {
        return this.configurationSettings;
    }

    /**
     * Set the configurationSettings property: Configuration settings, as name-value pairs for configuring this
     * extension.
     *
     * @param configurationSettings the configurationSettings value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withConfigurationSettings(Map<String, String> configurationSettings) {
        this.configurationSettings = configurationSettings;
        return this;
    }

    /**
     * Get the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this extension.
     *
     * @return the configurationProtectedSettings value.
     */
    public Map<String, String> configurationProtectedSettings() {
        return this.configurationProtectedSettings;
    }

    /**
     * Set the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this extension.
     *
     * @param configurationProtectedSettings the configurationProtectedSettings value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withConfigurationProtectedSettings(Map<String, String> configurationProtectedSettings) {
        this.configurationProtectedSettings = configurationProtectedSettings;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the extension resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the statuses property: Status from this extension.
     *
     * @return the statuses value.
     */
    public List<ExtensionStatus> statuses() {
        return this.statuses;
    }

    /**
     * Set the statuses property: Status from this extension.
     *
     * @param statuses the statuses value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withStatuses(List<ExtensionStatus> statuses) {
        this.statuses = statuses;
        return this;
    }

    /**
     * Get the errorInfo property: The error detail.
     *
     * @return the errorInfo value.
     */
    public ManagementError errorInfo() {
        return this.errorInfo;
    }

    /**
     * Set the errorInfo property: The error detail.
     *
     * @param errorInfo the errorInfo value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withErrorInfo(ManagementError errorInfo) {
        this.errorInfo = errorInfo;
        return this;
    }

    /**
     * Get the customLocationSettings property: Custom Location settings properties.
     *
     * @return the customLocationSettings value.
     */
    public Map<String, String> customLocationSettings() {
        return this.customLocationSettings;
    }

    /**
     * Get the packageUri property: Uri of the Helm package.
     *
     * @return the packageUri value.
     */
    public String packageUri() {
        return this.packageUri;
    }

    /**
     * Get the aksAssignedIdentity property: Identity of the Extension resource in an AKS cluster.
     *
     * @return the aksAssignedIdentity value.
     */
    public ExtensionPropertiesAksAssignedIdentity aksAssignedIdentity() {
        return this.aksAssignedIdentity;
    }

    /**
     * Set the aksAssignedIdentity property: Identity of the Extension resource in an AKS cluster.
     *
     * @param aksAssignedIdentity the aksAssignedIdentity value to set.
     * @return the ExtensionInner object itself.
     */
    public ExtensionInner withAksAssignedIdentity(ExtensionPropertiesAksAssignedIdentity aksAssignedIdentity) {
        this.aksAssignedIdentity = aksAssignedIdentity;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (scope() != null) {
            scope().validate();
        }
        if (statuses() != null) {
            statuses().forEach(e -> e.validate());
        }
        if (aksAssignedIdentity() != null) {
            aksAssignedIdentity().validate();
        }
    }
}
