// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for Helm operator.
 */
@Fluent
public final class HelmOperatorProperties implements JsonSerializable<HelmOperatorProperties> {
    /*
     * Version of the operator Helm chart.
     */
    private String chartVersion;

    /*
     * Values override for the operator Helm chart.
     */
    private String chartValues;

    /**
     * Creates an instance of HelmOperatorProperties class.
     */
    public HelmOperatorProperties() {
    }

    /**
     * Get the chartVersion property: Version of the operator Helm chart.
     * 
     * @return the chartVersion value.
     */
    public String chartVersion() {
        return this.chartVersion;
    }

    /**
     * Set the chartVersion property: Version of the operator Helm chart.
     * 
     * @param chartVersion the chartVersion value to set.
     * @return the HelmOperatorProperties object itself.
     */
    public HelmOperatorProperties withChartVersion(String chartVersion) {
        this.chartVersion = chartVersion;
        return this;
    }

    /**
     * Get the chartValues property: Values override for the operator Helm chart.
     * 
     * @return the chartValues value.
     */
    public String chartValues() {
        return this.chartValues;
    }

    /**
     * Set the chartValues property: Values override for the operator Helm chart.
     * 
     * @param chartValues the chartValues value to set.
     * @return the HelmOperatorProperties object itself.
     */
    public HelmOperatorProperties withChartValues(String chartValues) {
        this.chartValues = chartValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("chartVersion", this.chartVersion);
        jsonWriter.writeStringField("chartValues", this.chartValues);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HelmOperatorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HelmOperatorProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HelmOperatorProperties.
     */
    public static HelmOperatorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HelmOperatorProperties deserializedHelmOperatorProperties = new HelmOperatorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("chartVersion".equals(fieldName)) {
                    deserializedHelmOperatorProperties.chartVersion = reader.getString();
                } else if ("chartValues".equals(fieldName)) {
                    deserializedHelmOperatorProperties.chartValues = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHelmOperatorProperties;
        });
    }
}
