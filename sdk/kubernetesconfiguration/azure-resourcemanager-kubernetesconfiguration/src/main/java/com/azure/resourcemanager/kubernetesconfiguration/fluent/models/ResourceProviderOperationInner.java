// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kubernetesconfiguration.models.ResourceProviderOperationDisplay;
import java.io.IOException;

/**
 * Supported operation of this resource provider.
 */
@Fluent
public final class ResourceProviderOperationInner implements JsonSerializable<ResourceProviderOperationInner> {
    /*
     * Operation name, in format of {provider}/{resource}/{operation}
     */
    private String name;

    /*
     * Display metadata associated with the operation.
     */
    private ResourceProviderOperationDisplay display;

    /*
     * The flag that indicates whether the operation applies to data plane.
     */
    private Boolean isDataAction;

    /*
     * Origin of the operation
     */
    private String origin;

    /**
     * Creates an instance of ResourceProviderOperationInner class.
     */
    public ResourceProviderOperationInner() {
    }

    /**
     * Get the name property: Operation name, in format of {provider}/{resource}/{operation}.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Operation name, in format of {provider}/{resource}/{operation}.
     * 
     * @param name the name value to set.
     * @return the ResourceProviderOperationInner object itself.
     */
    public ResourceProviderOperationInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the display property: Display metadata associated with the operation.
     * 
     * @return the display value.
     */
    public ResourceProviderOperationDisplay display() {
        return this.display;
    }

    /**
     * Set the display property: Display metadata associated with the operation.
     * 
     * @param display the display value to set.
     * @return the ResourceProviderOperationInner object itself.
     */
    public ResourceProviderOperationInner withDisplay(ResourceProviderOperationDisplay display) {
        this.display = display;
        return this;
    }

    /**
     * Get the isDataAction property: The flag that indicates whether the operation applies to data plane.
     * 
     * @return the isDataAction value.
     */
    public Boolean isDataAction() {
        return this.isDataAction;
    }

    /**
     * Get the origin property: Origin of the operation.
     * 
     * @return the origin value.
     */
    public String origin() {
        return this.origin;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (display() != null) {
            display().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("display", this.display);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderOperationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderOperationInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderOperationInner.
     */
    public static ResourceProviderOperationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderOperationInner deserializedResourceProviderOperationInner
                = new ResourceProviderOperationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedResourceProviderOperationInner.name = reader.getString();
                } else if ("display".equals(fieldName)) {
                    deserializedResourceProviderOperationInner.display
                        = ResourceProviderOperationDisplay.fromJson(reader);
                } else if ("isDataAction".equals(fieldName)) {
                    deserializedResourceProviderOperationInner.isDataAction
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("origin".equals(fieldName)) {
                    deserializedResourceProviderOperationInner.origin = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderOperationInner;
        });
    }
}
