// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters to reconcile to the AzureBlob source kind type.
 */
@Fluent
public final class AzureBlobDefinition implements JsonSerializable<AzureBlobDefinition> {
    /*
     * The URL to sync for the flux configuration Azure Blob storage account.
     */
    private String url;

    /*
     * The Azure Blob container name to sync from the url endpoint for the flux configuration.
     */
    private String containerName;

    /*
     * The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
     */
    private Long timeoutInSeconds;

    /*
     * The interval at which to re-reconcile the cluster Azure Blob source with the remote.
     */
    private Long syncIntervalInSeconds;

    /*
     * Parameters to authenticate using Service Principal.
     */
    private ServicePrincipalDefinition servicePrincipal;

    /*
     * The account key (shared key) to access the storage account
     */
    private String accountKey;

    /*
     * The Shared Access token to access the storage container
     */
    private String sasToken;

    /*
     * Parameters to authenticate using a Managed Identity.
     */
    private ManagedIdentityDefinition managedIdentity;

    /*
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or
     * user-provided configuration secrets.
     */
    private String localAuthRef;

    /**
     * Creates an instance of AzureBlobDefinition class.
     */
    public AzureBlobDefinition() {
    }

    /**
     * Get the url property: The URL to sync for the flux configuration Azure Blob storage account.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The URL to sync for the flux configuration Azure Blob storage account.
     * 
     * @param url the url value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the containerName property: The Azure Blob container name to sync from the url endpoint for the flux
     * configuration.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: The Azure Blob container name to sync from the url endpoint for the flux
     * configuration.
     * 
     * @param containerName the containerName value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: The maximum time to attempt to reconcile the cluster Azure Blob source with
     * the remote.
     * 
     * @return the timeoutInSeconds value.
     */
    public Long timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: The maximum time to attempt to reconcile the cluster Azure Blob source with
     * the remote.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withTimeoutInSeconds(Long timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the syncIntervalInSeconds property: The interval at which to re-reconcile the cluster Azure Blob source with
     * the remote.
     * 
     * @return the syncIntervalInSeconds value.
     */
    public Long syncIntervalInSeconds() {
        return this.syncIntervalInSeconds;
    }

    /**
     * Set the syncIntervalInSeconds property: The interval at which to re-reconcile the cluster Azure Blob source with
     * the remote.
     * 
     * @param syncIntervalInSeconds the syncIntervalInSeconds value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withSyncIntervalInSeconds(Long syncIntervalInSeconds) {
        this.syncIntervalInSeconds = syncIntervalInSeconds;
        return this;
    }

    /**
     * Get the servicePrincipal property: Parameters to authenticate using Service Principal.
     * 
     * @return the servicePrincipal value.
     */
    public ServicePrincipalDefinition servicePrincipal() {
        return this.servicePrincipal;
    }

    /**
     * Set the servicePrincipal property: Parameters to authenticate using Service Principal.
     * 
     * @param servicePrincipal the servicePrincipal value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withServicePrincipal(ServicePrincipalDefinition servicePrincipal) {
        this.servicePrincipal = servicePrincipal;
        return this;
    }

    /**
     * Get the accountKey property: The account key (shared key) to access the storage account.
     * 
     * @return the accountKey value.
     */
    public String accountKey() {
        return this.accountKey;
    }

    /**
     * Set the accountKey property: The account key (shared key) to access the storage account.
     * 
     * @param accountKey the accountKey value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withAccountKey(String accountKey) {
        this.accountKey = accountKey;
        return this;
    }

    /**
     * Get the sasToken property: The Shared Access token to access the storage container.
     * 
     * @return the sasToken value.
     */
    public String sasToken() {
        return this.sasToken;
    }

    /**
     * Set the sasToken property: The Shared Access token to access the storage container.
     * 
     * @param sasToken the sasToken value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withSasToken(String sasToken) {
        this.sasToken = sasToken;
        return this;
    }

    /**
     * Get the managedIdentity property: Parameters to authenticate using a Managed Identity.
     * 
     * @return the managedIdentity value.
     */
    public ManagedIdentityDefinition managedIdentity() {
        return this.managedIdentity;
    }

    /**
     * Set the managedIdentity property: Parameters to authenticate using a Managed Identity.
     * 
     * @param managedIdentity the managedIdentity value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withManagedIdentity(ManagedIdentityDefinition managedIdentity) {
        this.managedIdentity = managedIdentity;
        return this;
    }

    /**
     * Get the localAuthRef property: Name of a local secret on the Kubernetes cluster to use as the authentication
     * secret rather than the managed or user-provided configuration secrets.
     * 
     * @return the localAuthRef value.
     */
    public String localAuthRef() {
        return this.localAuthRef;
    }

    /**
     * Set the localAuthRef property: Name of a local secret on the Kubernetes cluster to use as the authentication
     * secret rather than the managed or user-provided configuration secrets.
     * 
     * @param localAuthRef the localAuthRef value to set.
     * @return the AzureBlobDefinition object itself.
     */
    public AzureBlobDefinition withLocalAuthRef(String localAuthRef) {
        this.localAuthRef = localAuthRef;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (servicePrincipal() != null) {
            servicePrincipal().validate();
        }
        if (managedIdentity() != null) {
            managedIdentity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeNumberField("timeoutInSeconds", this.timeoutInSeconds);
        jsonWriter.writeNumberField("syncIntervalInSeconds", this.syncIntervalInSeconds);
        jsonWriter.writeJsonField("servicePrincipal", this.servicePrincipal);
        jsonWriter.writeStringField("accountKey", this.accountKey);
        jsonWriter.writeStringField("sasToken", this.sasToken);
        jsonWriter.writeJsonField("managedIdentity", this.managedIdentity);
        jsonWriter.writeStringField("localAuthRef", this.localAuthRef);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBlobDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBlobDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureBlobDefinition.
     */
    public static AzureBlobDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBlobDefinition deserializedAzureBlobDefinition = new AzureBlobDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedAzureBlobDefinition.url = reader.getString();
                } else if ("containerName".equals(fieldName)) {
                    deserializedAzureBlobDefinition.containerName = reader.getString();
                } else if ("timeoutInSeconds".equals(fieldName)) {
                    deserializedAzureBlobDefinition.timeoutInSeconds = reader.getNullable(JsonReader::getLong);
                } else if ("syncIntervalInSeconds".equals(fieldName)) {
                    deserializedAzureBlobDefinition.syncIntervalInSeconds = reader.getNullable(JsonReader::getLong);
                } else if ("servicePrincipal".equals(fieldName)) {
                    deserializedAzureBlobDefinition.servicePrincipal = ServicePrincipalDefinition.fromJson(reader);
                } else if ("accountKey".equals(fieldName)) {
                    deserializedAzureBlobDefinition.accountKey = reader.getString();
                } else if ("sasToken".equals(fieldName)) {
                    deserializedAzureBlobDefinition.sasToken = reader.getString();
                } else if ("managedIdentity".equals(fieldName)) {
                    deserializedAzureBlobDefinition.managedIdentity = ManagedIdentityDefinition.fromJson(reader);
                } else if ("localAuthRef".equals(fieldName)) {
                    deserializedAzureBlobDefinition.localAuthRef = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBlobDefinition;
        });
    }
}
