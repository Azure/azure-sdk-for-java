// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kubernetesconfiguration.models.ComplianceStatus;
import com.azure.resourcemanager.kubernetesconfiguration.models.HelmOperatorProperties;
import com.azure.resourcemanager.kubernetesconfiguration.models.OperatorScopeType;
import com.azure.resourcemanager.kubernetesconfiguration.models.OperatorType;
import com.azure.resourcemanager.kubernetesconfiguration.models.ProvisioningStateType;
import java.io.IOException;
import java.util.Map;

/**
 * Properties to create a Source Control Configuration resource.
 */
@Fluent
public final class SourceControlConfigurationProperties
    implements JsonSerializable<SourceControlConfigurationProperties> {
    /*
     * Url of the SourceControl Repository.
     */
    private String repositoryUrl;

    /*
     * The namespace to which this operator is installed to. Maximum of 253 lower case alphanumeric characters, hyphen
     * and period only.
     */
    private String operatorNamespace;

    /*
     * Instance name of the operator - identifying the specific configuration.
     */
    private String operatorInstanceName;

    /*
     * Type of the operator
     */
    private OperatorType operatorType;

    /*
     * Any Parameters for the Operator instance in string format.
     */
    private String operatorParams;

    /*
     * Name-value pairs of protected configuration settings for the configuration
     */
    private Map<String, String> configurationProtectedSettings;

    /*
     * Scope at which the operator will be installed.
     */
    private OperatorScopeType operatorScope;

    /*
     * Public Key associated with this SourceControl configuration (either generated within the cluster or provided by
     * the user).
     */
    private String repositoryPublicKey;

    /*
     * Base64-encoded known_hosts contents containing public SSH keys required to access private Git instances
     */
    private String sshKnownHostsContents;

    /*
     * Option to enable Helm Operator for this git configuration.
     */
    private Boolean enableHelmOperator;

    /*
     * Properties for Helm operator.
     */
    private HelmOperatorProperties helmOperatorProperties;

    /*
     * The provisioning state of the resource provider.
     */
    private ProvisioningStateType provisioningState;

    /*
     * Compliance Status of the Configuration
     */
    private ComplianceStatus complianceStatus;

    /**
     * Creates an instance of SourceControlConfigurationProperties class.
     */
    public SourceControlConfigurationProperties() {
    }

    /**
     * Get the repositoryUrl property: Url of the SourceControl Repository.
     * 
     * @return the repositoryUrl value.
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }

    /**
     * Set the repositoryUrl property: Url of the SourceControl Repository.
     * 
     * @param repositoryUrl the repositoryUrl value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
        return this;
    }

    /**
     * Get the operatorNamespace property: The namespace to which this operator is installed to. Maximum of 253 lower
     * case alphanumeric characters, hyphen and period only.
     * 
     * @return the operatorNamespace value.
     */
    public String operatorNamespace() {
        return this.operatorNamespace;
    }

    /**
     * Set the operatorNamespace property: The namespace to which this operator is installed to. Maximum of 253 lower
     * case alphanumeric characters, hyphen and period only.
     * 
     * @param operatorNamespace the operatorNamespace value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withOperatorNamespace(String operatorNamespace) {
        this.operatorNamespace = operatorNamespace;
        return this;
    }

    /**
     * Get the operatorInstanceName property: Instance name of the operator - identifying the specific configuration.
     * 
     * @return the operatorInstanceName value.
     */
    public String operatorInstanceName() {
        return this.operatorInstanceName;
    }

    /**
     * Set the operatorInstanceName property: Instance name of the operator - identifying the specific configuration.
     * 
     * @param operatorInstanceName the operatorInstanceName value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withOperatorInstanceName(String operatorInstanceName) {
        this.operatorInstanceName = operatorInstanceName;
        return this;
    }

    /**
     * Get the operatorType property: Type of the operator.
     * 
     * @return the operatorType value.
     */
    public OperatorType operatorType() {
        return this.operatorType;
    }

    /**
     * Set the operatorType property: Type of the operator.
     * 
     * @param operatorType the operatorType value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withOperatorType(OperatorType operatorType) {
        this.operatorType = operatorType;
        return this;
    }

    /**
     * Get the operatorParams property: Any Parameters for the Operator instance in string format.
     * 
     * @return the operatorParams value.
     */
    public String operatorParams() {
        return this.operatorParams;
    }

    /**
     * Set the operatorParams property: Any Parameters for the Operator instance in string format.
     * 
     * @param operatorParams the operatorParams value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withOperatorParams(String operatorParams) {
        this.operatorParams = operatorParams;
        return this;
    }

    /**
     * Get the configurationProtectedSettings property: Name-value pairs of protected configuration settings for the
     * configuration.
     * 
     * @return the configurationProtectedSettings value.
     */
    public Map<String, String> configurationProtectedSettings() {
        return this.configurationProtectedSettings;
    }

    /**
     * Set the configurationProtectedSettings property: Name-value pairs of protected configuration settings for the
     * configuration.
     * 
     * @param configurationProtectedSettings the configurationProtectedSettings value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties
        withConfigurationProtectedSettings(Map<String, String> configurationProtectedSettings) {
        this.configurationProtectedSettings = configurationProtectedSettings;
        return this;
    }

    /**
     * Get the operatorScope property: Scope at which the operator will be installed.
     * 
     * @return the operatorScope value.
     */
    public OperatorScopeType operatorScope() {
        return this.operatorScope;
    }

    /**
     * Set the operatorScope property: Scope at which the operator will be installed.
     * 
     * @param operatorScope the operatorScope value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withOperatorScope(OperatorScopeType operatorScope) {
        this.operatorScope = operatorScope;
        return this;
    }

    /**
     * Get the repositoryPublicKey property: Public Key associated with this SourceControl configuration (either
     * generated within the cluster or provided by the user).
     * 
     * @return the repositoryPublicKey value.
     */
    public String repositoryPublicKey() {
        return this.repositoryPublicKey;
    }

    /**
     * Get the sshKnownHostsContents property: Base64-encoded known_hosts contents containing public SSH keys required
     * to access private Git instances.
     * 
     * @return the sshKnownHostsContents value.
     */
    public String sshKnownHostsContents() {
        return this.sshKnownHostsContents;
    }

    /**
     * Set the sshKnownHostsContents property: Base64-encoded known_hosts contents containing public SSH keys required
     * to access private Git instances.
     * 
     * @param sshKnownHostsContents the sshKnownHostsContents value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withSshKnownHostsContents(String sshKnownHostsContents) {
        this.sshKnownHostsContents = sshKnownHostsContents;
        return this;
    }

    /**
     * Get the enableHelmOperator property: Option to enable Helm Operator for this git configuration.
     * 
     * @return the enableHelmOperator value.
     */
    public Boolean enableHelmOperator() {
        return this.enableHelmOperator;
    }

    /**
     * Set the enableHelmOperator property: Option to enable Helm Operator for this git configuration.
     * 
     * @param enableHelmOperator the enableHelmOperator value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties withEnableHelmOperator(Boolean enableHelmOperator) {
        this.enableHelmOperator = enableHelmOperator;
        return this;
    }

    /**
     * Get the helmOperatorProperties property: Properties for Helm operator.
     * 
     * @return the helmOperatorProperties value.
     */
    public HelmOperatorProperties helmOperatorProperties() {
        return this.helmOperatorProperties;
    }

    /**
     * Set the helmOperatorProperties property: Properties for Helm operator.
     * 
     * @param helmOperatorProperties the helmOperatorProperties value to set.
     * @return the SourceControlConfigurationProperties object itself.
     */
    public SourceControlConfigurationProperties
        withHelmOperatorProperties(HelmOperatorProperties helmOperatorProperties) {
        this.helmOperatorProperties = helmOperatorProperties;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource provider.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateType provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the complianceStatus property: Compliance Status of the Configuration.
     * 
     * @return the complianceStatus value.
     */
    public ComplianceStatus complianceStatus() {
        return this.complianceStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (helmOperatorProperties() != null) {
            helmOperatorProperties().validate();
        }
        if (complianceStatus() != null) {
            complianceStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repositoryUrl", this.repositoryUrl);
        jsonWriter.writeStringField("operatorNamespace", this.operatorNamespace);
        jsonWriter.writeStringField("operatorInstanceName", this.operatorInstanceName);
        jsonWriter.writeStringField("operatorType", this.operatorType == null ? null : this.operatorType.toString());
        jsonWriter.writeStringField("operatorParams", this.operatorParams);
        jsonWriter.writeMapField("configurationProtectedSettings", this.configurationProtectedSettings,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("operatorScope", this.operatorScope == null ? null : this.operatorScope.toString());
        jsonWriter.writeStringField("sshKnownHostsContents", this.sshKnownHostsContents);
        jsonWriter.writeBooleanField("enableHelmOperator", this.enableHelmOperator);
        jsonWriter.writeJsonField("helmOperatorProperties", this.helmOperatorProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceControlConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceControlConfigurationProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SourceControlConfigurationProperties.
     */
    public static SourceControlConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceControlConfigurationProperties deserializedSourceControlConfigurationProperties
                = new SourceControlConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repositoryUrl".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.repositoryUrl = reader.getString();
                } else if ("operatorNamespace".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.operatorNamespace = reader.getString();
                } else if ("operatorInstanceName".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.operatorInstanceName = reader.getString();
                } else if ("operatorType".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.operatorType
                        = OperatorType.fromString(reader.getString());
                } else if ("operatorParams".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.operatorParams = reader.getString();
                } else if ("configurationProtectedSettings".equals(fieldName)) {
                    Map<String, String> configurationProtectedSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedSourceControlConfigurationProperties.configurationProtectedSettings
                        = configurationProtectedSettings;
                } else if ("operatorScope".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.operatorScope
                        = OperatorScopeType.fromString(reader.getString());
                } else if ("repositoryPublicKey".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.repositoryPublicKey = reader.getString();
                } else if ("sshKnownHostsContents".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.sshKnownHostsContents = reader.getString();
                } else if ("enableHelmOperator".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.enableHelmOperator
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("helmOperatorProperties".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.helmOperatorProperties
                        = HelmOperatorProperties.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.provisioningState
                        = ProvisioningStateType.fromString(reader.getString());
                } else if ("complianceStatus".equals(fieldName)) {
                    deserializedSourceControlConfigurationProperties.complianceStatus
                        = ComplianceStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceControlConfigurationProperties;
        });
    }
}
