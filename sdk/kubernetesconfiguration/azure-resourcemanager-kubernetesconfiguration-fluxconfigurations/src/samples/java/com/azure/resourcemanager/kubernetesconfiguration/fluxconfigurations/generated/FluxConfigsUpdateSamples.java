// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.generated;

import com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.models.FluxConfigurationPatch;
import com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.models.GitRepositoryPatchDefinition;
import com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.models.KustomizationPatchDefinition;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FluxConfigs Update.
 */
public final class FluxConfigsUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/fluxConfigurations/
     * stable/2025-04-01/examples/PatchFluxConfiguration.json
     */
    /**
     * Sample code: Patch Flux Configuration.
     * 
     * @param manager Entry point to FluxConfigManager.
     */
    public static void patchFluxConfiguration(
        com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.FluxConfigManager manager) {
        manager.fluxConfigs()
            .update("rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "srs-fluxconfig",
                new FluxConfigurationPatch().withSuspend(true)
                    .withGitRepository(new GitRepositoryPatchDefinition()
                        .withUrl("https://github.com/jonathan-innis/flux2-kustomize-helm-example.git"))
                    .withKustomizations(mapOf("srs-kustomization1", null, "srs-kustomization2",
                        new KustomizationPatchDefinition().withPath("./test/alt-path").withSyncIntervalInSeconds(300L),
                        "srs-kustomization3", new KustomizationPatchDefinition().withPath("./test/another-path")
                            .withSyncIntervalInSeconds(300L))),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
