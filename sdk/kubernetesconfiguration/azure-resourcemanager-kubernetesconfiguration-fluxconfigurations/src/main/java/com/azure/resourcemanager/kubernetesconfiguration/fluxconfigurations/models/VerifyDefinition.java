// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Parameters to verify the authenticity of an OCI Artifact.
 */
@Fluent
public final class VerifyDefinition implements JsonSerializable<VerifyDefinition> {
    /*
     * Verification provider name.
     */
    private String provider;

    /*
     * An object containing trusted public keys of trusted authors.
     */
    private Map<String, String> verificationConfig;

    /*
     * Array defining the criteria for matching the identity while verifying an OCI artifact.
     */
    private List<MatchOidcIdentityDefinition> matchOidcIdentity;

    /**
     * Creates an instance of VerifyDefinition class.
     */
    public VerifyDefinition() {
    }

    /**
     * Get the provider property: Verification provider name.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Verification provider name.
     * 
     * @param provider the provider value to set.
     * @return the VerifyDefinition object itself.
     */
    public VerifyDefinition withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the verificationConfig property: An object containing trusted public keys of trusted authors.
     * 
     * @return the verificationConfig value.
     */
    public Map<String, String> verificationConfig() {
        return this.verificationConfig;
    }

    /**
     * Set the verificationConfig property: An object containing trusted public keys of trusted authors.
     * 
     * @param verificationConfig the verificationConfig value to set.
     * @return the VerifyDefinition object itself.
     */
    public VerifyDefinition withVerificationConfig(Map<String, String> verificationConfig) {
        this.verificationConfig = verificationConfig;
        return this;
    }

    /**
     * Get the matchOidcIdentity property: Array defining the criteria for matching the identity while verifying an OCI
     * artifact.
     * 
     * @return the matchOidcIdentity value.
     */
    public List<MatchOidcIdentityDefinition> matchOidcIdentity() {
        return this.matchOidcIdentity;
    }

    /**
     * Set the matchOidcIdentity property: Array defining the criteria for matching the identity while verifying an OCI
     * artifact.
     * 
     * @param matchOidcIdentity the matchOidcIdentity value to set.
     * @return the VerifyDefinition object itself.
     */
    public VerifyDefinition withMatchOidcIdentity(List<MatchOidcIdentityDefinition> matchOidcIdentity) {
        this.matchOidcIdentity = matchOidcIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (matchOidcIdentity() != null) {
            matchOidcIdentity().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeMapField("verificationConfig", this.verificationConfig,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("matchOidcIdentity", this.matchOidcIdentity,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VerifyDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VerifyDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VerifyDefinition.
     */
    public static VerifyDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VerifyDefinition deserializedVerifyDefinition = new VerifyDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedVerifyDefinition.provider = reader.getString();
                } else if ("verificationConfig".equals(fieldName)) {
                    Map<String, String> verificationConfig = reader.readMap(reader1 -> reader1.getString());
                    deserializedVerifyDefinition.verificationConfig = verificationConfig;
                } else if ("matchOidcIdentity".equals(fieldName)) {
                    List<MatchOidcIdentityDefinition> matchOidcIdentity
                        = reader.readArray(reader1 -> MatchOidcIdentityDefinition.fromJson(reader1));
                    deserializedVerifyDefinition.matchOidcIdentity = matchOidcIdentity;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVerifyDefinition;
        });
    }
}
