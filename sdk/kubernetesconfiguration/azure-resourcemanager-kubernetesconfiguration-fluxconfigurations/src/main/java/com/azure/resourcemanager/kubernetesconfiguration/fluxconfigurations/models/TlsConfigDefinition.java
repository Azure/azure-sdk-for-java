// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters to authenticate using TLS config for OCI repository.
 */
@Fluent
public final class TlsConfigDefinition implements JsonSerializable<TlsConfigDefinition> {
    /*
     * Base64-encoded certificate used to authenticate a client with the OCI repository.
     */
    private String clientCertificate;

    /*
     * Base64-encoded private key used to authenticate a client with the OCI repository.
     */
    private String privateKey;

    /*
     * Base64-encoded CA certificate used to verify the server.
     */
    private String caCertificate;

    /**
     * Creates an instance of TlsConfigDefinition class.
     */
    public TlsConfigDefinition() {
    }

    /**
     * Get the clientCertificate property: Base64-encoded certificate used to authenticate a client with the OCI
     * repository.
     * 
     * @return the clientCertificate value.
     */
    public String clientCertificate() {
        return this.clientCertificate;
    }

    /**
     * Set the clientCertificate property: Base64-encoded certificate used to authenticate a client with the OCI
     * repository.
     * 
     * @param clientCertificate the clientCertificate value to set.
     * @return the TlsConfigDefinition object itself.
     */
    public TlsConfigDefinition withClientCertificate(String clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }

    /**
     * Get the privateKey property: Base64-encoded private key used to authenticate a client with the OCI repository.
     * 
     * @return the privateKey value.
     */
    public String privateKey() {
        return this.privateKey;
    }

    /**
     * Set the privateKey property: Base64-encoded private key used to authenticate a client with the OCI repository.
     * 
     * @param privateKey the privateKey value to set.
     * @return the TlsConfigDefinition object itself.
     */
    public TlsConfigDefinition withPrivateKey(String privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Get the caCertificate property: Base64-encoded CA certificate used to verify the server.
     * 
     * @return the caCertificate value.
     */
    public String caCertificate() {
        return this.caCertificate;
    }

    /**
     * Set the caCertificate property: Base64-encoded CA certificate used to verify the server.
     * 
     * @param caCertificate the caCertificate value to set.
     * @return the TlsConfigDefinition object itself.
     */
    public TlsConfigDefinition withCaCertificate(String caCertificate) {
        this.caCertificate = caCertificate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientCertificate", this.clientCertificate);
        jsonWriter.writeStringField("privateKey", this.privateKey);
        jsonWriter.writeStringField("caCertificate", this.caCertificate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TlsConfigDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TlsConfigDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TlsConfigDefinition.
     */
    public static TlsConfigDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TlsConfigDefinition deserializedTlsConfigDefinition = new TlsConfigDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientCertificate".equals(fieldName)) {
                    deserializedTlsConfigDefinition.clientCertificate = reader.getString();
                } else if ("privateKey".equals(fieldName)) {
                    deserializedTlsConfigDefinition.privateKey = reader.getString();
                } else if ("caCertificate".equals(fieldName)) {
                    deserializedTlsConfigDefinition.caCertificate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTlsConfigDefinition;
        });
    }
}
