// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluxconfigurations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters to specify which layer to pull from the OCI artifact. By default, the first layer in the artifact is
 * pulled.
 */
@Fluent
public final class LayerSelectorPatchDefinition implements JsonSerializable<LayerSelectorPatchDefinition> {
    /*
     * The first layer matching the specified media type will be used.
     */
    private String mediaType;

    /*
     * The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'.
     */
    private OperationType operation;

    /**
     * Creates an instance of LayerSelectorPatchDefinition class.
     */
    public LayerSelectorPatchDefinition() {
    }

    /**
     * Get the mediaType property: The first layer matching the specified media type will be used.
     * 
     * @return the mediaType value.
     */
    public String mediaType() {
        return this.mediaType;
    }

    /**
     * Set the mediaType property: The first layer matching the specified media type will be used.
     * 
     * @param mediaType the mediaType value to set.
     * @return the LayerSelectorPatchDefinition object itself.
     */
    public LayerSelectorPatchDefinition withMediaType(String mediaType) {
        this.mediaType = mediaType;
        return this;
    }

    /**
     * Get the operation property: The operation to be performed on the selected layer. The default value is 'extract',
     * but it can be set to 'copy'.
     * 
     * @return the operation value.
     */
    public OperationType operation() {
        return this.operation;
    }

    /**
     * Set the operation property: The operation to be performed on the selected layer. The default value is 'extract',
     * but it can be set to 'copy'.
     * 
     * @param operation the operation value to set.
     * @return the LayerSelectorPatchDefinition object itself.
     */
    public LayerSelectorPatchDefinition withOperation(OperationType operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mediaType", this.mediaType);
        jsonWriter.writeStringField("operation", this.operation == null ? null : this.operation.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LayerSelectorPatchDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LayerSelectorPatchDefinition if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LayerSelectorPatchDefinition.
     */
    public static LayerSelectorPatchDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LayerSelectorPatchDefinition deserializedLayerSelectorPatchDefinition = new LayerSelectorPatchDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mediaType".equals(fieldName)) {
                    deserializedLayerSelectorPatchDefinition.mediaType = reader.getString();
                } else if ("operation".equals(fieldName)) {
                    deserializedLayerSelectorPatchDefinition.operation = OperationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLayerSelectorPatchDefinition;
        });
    }
}
