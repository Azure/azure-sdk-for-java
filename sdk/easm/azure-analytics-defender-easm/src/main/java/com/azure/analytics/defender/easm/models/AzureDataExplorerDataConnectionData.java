// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AzureDataExplorerDataConnectionData model.
 */
@Fluent
public final class AzureDataExplorerDataConnectionData extends DataConnectionData {

    /*
     * Discriminator property for DataConnectionData.
     */
    @Generated
    private String kind = "azureDataExplorer";

    /*
     * properties
     */
    @Generated
    private final AzureDataExplorerDataConnectionProperties properties;

    /**
     * Creates an instance of AzureDataExplorerDataConnectionData class.
     *
     * @param properties the properties value to set.
     */
    @Generated
    public AzureDataExplorerDataConnectionData(AzureDataExplorerDataConnectionProperties properties) {
        this.properties = properties;
    }

    /**
     * Get the kind property: Discriminator property for DataConnectionData.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public String getKind() {
        return this.kind;
    }

    /**
     * Get the properties property: properties.
     *
     * @return the properties value.
     */
    @Generated
    public AzureDataExplorerDataConnectionProperties getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureDataExplorerDataConnectionData setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureDataExplorerDataConnectionData setContent(DataConnectionContent content) {
        super.setContent(content);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureDataExplorerDataConnectionData setFrequency(DataConnectionFrequency frequency) {
        super.setFrequency(frequency);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureDataExplorerDataConnectionData setFrequencyOffset(Integer frequencyOffset) {
        super.setFrequencyOffset(frequencyOffset);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("content", getContent() == null ? null : getContent().toString());
        jsonWriter.writeStringField("frequency", getFrequency() == null ? null : getFrequency().toString());
        jsonWriter.writeNumberField("frequencyOffset", getFrequencyOffset());
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeStringField("kind", this.kind);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureDataExplorerDataConnectionData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureDataExplorerDataConnectionData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureDataExplorerDataConnectionData.
     */
    @Generated
    public static AzureDataExplorerDataConnectionData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            DataConnectionContent content = null;
            DataConnectionFrequency frequency = null;
            Integer frequencyOffset = null;
            AzureDataExplorerDataConnectionProperties properties = null;
            String kind = "azureDataExplorer";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("content".equals(fieldName)) {
                    content = DataConnectionContent.fromString(reader.getString());
                } else if ("frequency".equals(fieldName)) {
                    frequency = DataConnectionFrequency.fromString(reader.getString());
                } else if ("frequencyOffset".equals(fieldName)) {
                    frequencyOffset = reader.getNullable(JsonReader::getInt);
                } else if ("properties".equals(fieldName)) {
                    properties = AzureDataExplorerDataConnectionProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AzureDataExplorerDataConnectionData deserializedAzureDataExplorerDataConnectionData
                = new AzureDataExplorerDataConnectionData(properties);
            deserializedAzureDataExplorerDataConnectionData.setName(name);
            deserializedAzureDataExplorerDataConnectionData.setContent(content);
            deserializedAzureDataExplorerDataConnectionData.setFrequency(frequency);
            deserializedAzureDataExplorerDataConnectionData.setFrequencyOffset(frequencyOffset);
            deserializedAzureDataExplorerDataConnectionData.kind = kind;
            return deserializedAzureDataExplorerDataConnectionData;
        });
    }
}
