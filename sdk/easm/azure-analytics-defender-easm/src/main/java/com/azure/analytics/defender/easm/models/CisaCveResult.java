// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * cisa cve in a given workspace.
 */
@Immutable
public final class CisaCveResult implements JsonSerializable<CisaCveResult> {
    /*
     * The CVE ID of the vulnerability in the format CVE-YYYY-NNNN, note that the number portion can have more than 4
     * digits.
     */
    @Generated
    private String cveId;

    /*
     * The vendor or project name for the vulnerability.
     */
    @Generated
    private final String vendorProject;

    /*
     * The vulnerability product
     */
    @Generated
    private final String product;

    /*
     * The name of the vulnerability
     */
    @Generated
    private final String vulnerabilityName;

    /*
     * A short description of the vulnerability
     */
    @Generated
    private final String shortDescription;

    /*
     * The required action to address the vulnerability
     */
    @Generated
    private final String requiredAction;

    /*
     * Any additional notes about the vulnerability
     */
    @Generated
    private final String notes;

    /*
     * The date the vulnerability was added to the catalog in the format YYYY-MM-DD
     */
    @Generated
    private final OffsetDateTime dateAdded;

    /*
     * The date the required action is due in the format YYYY-MM-DD
     */
    @Generated
    private final OffsetDateTime dueDate;

    /*
     * The date the vulnerability was updated
     */
    @Generated
    private final OffsetDateTime updatedAt;

    /*
     * The number of assets affected by the vulnerability
     */
    @Generated
    private final long count;

    /**
     * Creates an instance of CisaCveResult class.
     * 
     * @param vendorProject the vendorProject value to set.
     * @param product the product value to set.
     * @param vulnerabilityName the vulnerabilityName value to set.
     * @param shortDescription the shortDescription value to set.
     * @param requiredAction the requiredAction value to set.
     * @param notes the notes value to set.
     * @param dateAdded the dateAdded value to set.
     * @param dueDate the dueDate value to set.
     * @param updatedAt the updatedAt value to set.
     * @param count the count value to set.
     */
    @Generated
    private CisaCveResult(String vendorProject, String product, String vulnerabilityName, String shortDescription,
        String requiredAction, String notes, OffsetDateTime dateAdded, OffsetDateTime dueDate, OffsetDateTime updatedAt,
        long count) {
        this.vendorProject = vendorProject;
        this.product = product;
        this.vulnerabilityName = vulnerabilityName;
        this.shortDescription = shortDescription;
        this.requiredAction = requiredAction;
        this.notes = notes;
        this.dateAdded = dateAdded;
        this.dueDate = dueDate;
        this.updatedAt = updatedAt;
        this.count = count;
    }

    /**
     * Get the cveId property: The CVE ID of the vulnerability in the format CVE-YYYY-NNNN, note that the number portion
     * can have more than 4 digits.
     * 
     * @return the cveId value.
     */
    @Generated
    public String getCveId() {
        return this.cveId;
    }

    /**
     * Get the vendorProject property: The vendor or project name for the vulnerability.
     * 
     * @return the vendorProject value.
     */
    @Generated
    public String getVendorProject() {
        return this.vendorProject;
    }

    /**
     * Get the product property: The vulnerability product.
     * 
     * @return the product value.
     */
    @Generated
    public String getProduct() {
        return this.product;
    }

    /**
     * Get the vulnerabilityName property: The name of the vulnerability.
     * 
     * @return the vulnerabilityName value.
     */
    @Generated
    public String getVulnerabilityName() {
        return this.vulnerabilityName;
    }

    /**
     * Get the shortDescription property: A short description of the vulnerability.
     * 
     * @return the shortDescription value.
     */
    @Generated
    public String getShortDescription() {
        return this.shortDescription;
    }

    /**
     * Get the requiredAction property: The required action to address the vulnerability.
     * 
     * @return the requiredAction value.
     */
    @Generated
    public String getRequiredAction() {
        return this.requiredAction;
    }

    /**
     * Get the notes property: Any additional notes about the vulnerability.
     * 
     * @return the notes value.
     */
    @Generated
    public String getNotes() {
        return this.notes;
    }

    /**
     * Get the dateAdded property: The date the vulnerability was added to the catalog in the format YYYY-MM-DD.
     * 
     * @return the dateAdded value.
     */
    @Generated
    public OffsetDateTime getDateAdded() {
        return this.dateAdded;
    }

    /**
     * Get the dueDate property: The date the required action is due in the format YYYY-MM-DD.
     * 
     * @return the dueDate value.
     */
    @Generated
    public OffsetDateTime getDueDate() {
        return this.dueDate;
    }

    /**
     * Get the updatedAt property: The date the vulnerability was updated.
     * 
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the count property: The number of assets affected by the vulnerability.
     * 
     * @return the count value.
     */
    @Generated
    public long getCount() {
        return this.count;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vendorProject", this.vendorProject);
        jsonWriter.writeStringField("product", this.product);
        jsonWriter.writeStringField("vulnerabilityName", this.vulnerabilityName);
        jsonWriter.writeStringField("shortDescription", this.shortDescription);
        jsonWriter.writeStringField("requiredAction", this.requiredAction);
        jsonWriter.writeStringField("notes", this.notes);
        jsonWriter.writeStringField("dateAdded",
            this.dateAdded == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.dateAdded));
        jsonWriter.writeStringField("dueDate",
            this.dueDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.dueDate));
        jsonWriter.writeStringField("updatedAt",
            this.updatedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedAt));
        jsonWriter.writeLongField("count", this.count);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CisaCveResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CisaCveResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CisaCveResult.
     */
    @Generated
    public static CisaCveResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String cveId = null;
            String vendorProject = null;
            String product = null;
            String vulnerabilityName = null;
            String shortDescription = null;
            String requiredAction = null;
            String notes = null;
            OffsetDateTime dateAdded = null;
            OffsetDateTime dueDate = null;
            OffsetDateTime updatedAt = null;
            long count = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cveId".equals(fieldName)) {
                    cveId = reader.getString();
                } else if ("vendorProject".equals(fieldName)) {
                    vendorProject = reader.getString();
                } else if ("product".equals(fieldName)) {
                    product = reader.getString();
                } else if ("vulnerabilityName".equals(fieldName)) {
                    vulnerabilityName = reader.getString();
                } else if ("shortDescription".equals(fieldName)) {
                    shortDescription = reader.getString();
                } else if ("requiredAction".equals(fieldName)) {
                    requiredAction = reader.getString();
                } else if ("notes".equals(fieldName)) {
                    notes = reader.getString();
                } else if ("dateAdded".equals(fieldName)) {
                    dateAdded = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("dueDate".equals(fieldName)) {
                    dueDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedAt".equals(fieldName)) {
                    updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    count = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            CisaCveResult deserializedCisaCveResult = new CisaCveResult(vendorProject, product, vulnerabilityName,
                shortDescription, requiredAction, notes, dateAdded, dueDate, updatedAt, count);
            deserializedCisaCveResult.cveId = cveId;

            return deserializedCisaCveResult;
        });
    }
}
