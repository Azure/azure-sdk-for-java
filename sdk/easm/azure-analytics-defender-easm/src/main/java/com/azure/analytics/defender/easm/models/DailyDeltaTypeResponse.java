// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Delta response for each day.
 */
@Immutable
public final class DailyDeltaTypeResponse extends DeltaTypeResponse {
    /*
     * The current number of assets for one asset kind
     */
    @Generated
    private final long count;

    /**
     * Creates an instance of DailyDeltaTypeResponse class.
     * 
     * @param kind the kind value to set.
     * @param removed the removed value to set.
     * @param added the added value to set.
     * @param difference the difference value to set.
     * @param count the count value to set.
     */
    @Generated
    private DailyDeltaTypeResponse(GlobalAssetType kind, long removed, long added, long difference, long count) {
        super(kind, removed, added, difference);
        this.count = count;
    }

    /**
     * Get the count property: The current number of assets for one asset kind.
     * 
     * @return the count value.
     */
    @Generated
    public long getCount() {
        return this.count;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", getKind() == null ? null : getKind().toString());
        jsonWriter.writeLongField("removed", getRemoved());
        jsonWriter.writeLongField("added", getAdded());
        jsonWriter.writeLongField("difference", getDifference());
        jsonWriter.writeLongField("count", this.count);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyDeltaTypeResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyDeltaTypeResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DailyDeltaTypeResponse.
     */
    @Generated
    public static DailyDeltaTypeResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalAssetType kind = null;
            long removed = 0L;
            long added = 0L;
            long difference = 0L;
            long count = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    kind = GlobalAssetType.fromString(reader.getString());
                } else if ("removed".equals(fieldName)) {
                    removed = reader.getLong();
                } else if ("added".equals(fieldName)) {
                    added = reader.getLong();
                } else if ("difference".equals(fieldName)) {
                    difference = reader.getLong();
                } else if ("count".equals(fieldName)) {
                    count = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new DailyDeltaTypeResponse(kind, removed, added, difference, count);
        });
    }
}
