// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Date information for the delta response.
 */
@Immutable
public final class DeltaDateResult implements JsonSerializable<DeltaDateResult> {
    /*
     * The date that is being requested
     */
    @Generated
    private final OffsetDateTime date;

    /*
     * A list of summary counts per day
     */
    @Generated
    private final List<DailyDeltaTypeResponse> deltas;

    /**
     * Creates an instance of DeltaDateResult class.
     * 
     * @param date the date value to set.
     * @param deltas the deltas value to set.
     */
    @Generated
    private DeltaDateResult(OffsetDateTime date, List<DailyDeltaTypeResponse> deltas) {
        this.date = date;
        this.deltas = deltas;
    }

    /**
     * Get the date property: The date that is being requested.
     * 
     * @return the date value.
     */
    @Generated
    public OffsetDateTime getDate() {
        return this.date;
    }

    /**
     * Get the deltas property: A list of summary counts per day.
     * 
     * @return the deltas value.
     */
    @Generated
    public List<DailyDeltaTypeResponse> getDeltas() {
        return this.deltas;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("date",
            this.date == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.date));
        jsonWriter.writeArrayField("deltas", this.deltas, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaDateResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaDateResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeltaDateResult.
     */
    @Generated
    public static DeltaDateResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime date = null;
            List<DailyDeltaTypeResponse> deltas = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("date".equals(fieldName)) {
                    date = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("deltas".equals(fieldName)) {
                    deltas = reader.readArray(reader1 -> DailyDeltaTypeResponse.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new DeltaDateResult(date, deltas);
        });
    }
}
