// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The WebComponent model.
 */
@Immutable
public final class WebComponent implements JsonSerializable<WebComponent> {

    /*
     * The name property.
     */
    @Generated
    private String name;

    /*
     * The type property.
     */
    @Generated
    private String type;

    /*
     * The version property.
     */
    @Generated
    private String version;

    /*
     * The ruleId property.
     */
    @Generated
    private List<String> ruleId;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The cve property.
     */
    @Generated
    private List<Cve> cve;

    /*
     * The endOfLife property.
     */
    @Generated
    private Long endOfLife;

    /*
     * The recent property.
     */
    @Generated
    private Boolean recent;

    /*
     * The ports property.
     */
    @Generated
    private List<Port> ports;

    /*
     * The sources property.
     */
    @Generated
    private List<Source> sources;

    /*
     * The service property.
     */
    @Generated
    private String service;

    /**
     * Creates an instance of WebComponent class.
     */
    @Generated
    private WebComponent() {
    }

    /**
     * Get the name property: The name property.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the version property: The version property.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the ruleId property: The ruleId property.
     *
     * @return the ruleId value.
     */
    @Generated
    public List<String> getRuleId() {
        return this.ruleId;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the cve property: The cve property.
     *
     * @return the cve value.
     */
    @Generated
    public List<Cve> getCve() {
        return this.cve;
    }

    /**
     * Get the endOfLife property: The endOfLife property.
     *
     * @return the endOfLife value.
     */
    @Generated
    public Long getEndOfLife() {
        return this.endOfLife;
    }

    /**
     * Get the recent property: The recent property.
     *
     * @return the recent value.
     */
    @Generated
    public Boolean isRecent() {
        return this.recent;
    }

    /**
     * Get the ports property: The ports property.
     *
     * @return the ports value.
     */
    @Generated
    public List<Port> getPorts() {
        return this.ports;
    }

    /**
     * Get the sources property: The sources property.
     *
     * @return the sources value.
     */
    @Generated
    public List<Source> getSources() {
        return this.sources;
    }

    /**
     * Get the service property: The service property.
     *
     * @return the service value.
     */
    @Generated
    public String getService() {
        return this.service;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeArrayField("ruleId", this.ruleId, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeArrayField("cve", this.cve, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("endOfLife", this.endOfLife);
        jsonWriter.writeBooleanField("recent", this.recent);
        jsonWriter.writeArrayField("ports", this.ports, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("service", this.service);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebComponent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebComponent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebComponent.
     */
    @Generated
    public static WebComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebComponent deserializedWebComponent = new WebComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedWebComponent.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedWebComponent.type = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedWebComponent.version = reader.getString();
                } else if ("ruleId".equals(fieldName)) {
                    List<String> ruleId = reader.readArray(reader1 -> reader1.getString());
                    deserializedWebComponent.ruleId = ruleId;
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedWebComponent.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedWebComponent.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedWebComponent.count = reader.getNullable(JsonReader::getLong);
                } else if ("cve".equals(fieldName)) {
                    List<Cve> cve = reader.readArray(reader1 -> Cve.fromJson(reader1));
                    deserializedWebComponent.cve = cve;
                } else if ("endOfLife".equals(fieldName)) {
                    deserializedWebComponent.endOfLife = reader.getNullable(JsonReader::getLong);
                } else if ("recent".equals(fieldName)) {
                    deserializedWebComponent.recent = reader.getNullable(JsonReader::getBoolean);
                } else if ("ports".equals(fieldName)) {
                    List<Port> ports = reader.readArray(reader1 -> Port.fromJson(reader1));
                    deserializedWebComponent.ports = ports;
                } else if ("sources".equals(fieldName)) {
                    List<Source> sources = reader.readArray(reader1 -> Source.fromJson(reader1));
                    deserializedWebComponent.sources = sources;
                } else if ("service".equals(fieldName)) {
                    deserializedWebComponent.service = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWebComponent;
        });
    }
}
