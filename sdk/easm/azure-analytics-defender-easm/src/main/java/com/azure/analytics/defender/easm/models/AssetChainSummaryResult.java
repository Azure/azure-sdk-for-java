// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Response for the asset chain summary.
 */
@Immutable
public final class AssetChainSummaryResult implements JsonSerializable<AssetChainSummaryResult> {
    /*
     * A list of asset chain summaries per asset kind
     */
    @Generated
    private final List<AssetChainKindSummaryResult> affectedAssetsSummary;

    /*
     * A list of disco group summaries
     */
    @Generated
    private final List<DiscoGroupSummaryResult> affectedGroupsSummary;

    /*
     * The list of exceptions
     */
    @Generated
    private List<ErrorResponse> errors;

    /**
     * Creates an instance of AssetChainSummaryResult class.
     * 
     * @param affectedAssetsSummary the affectedAssetsSummary value to set.
     * @param affectedGroupsSummary the affectedGroupsSummary value to set.
     */
    @Generated
    private AssetChainSummaryResult(List<AssetChainKindSummaryResult> affectedAssetsSummary,
        List<DiscoGroupSummaryResult> affectedGroupsSummary) {
        this.affectedAssetsSummary = affectedAssetsSummary;
        this.affectedGroupsSummary = affectedGroupsSummary;
    }

    /**
     * Get the affectedAssetsSummary property: A list of asset chain summaries per asset kind.
     * 
     * @return the affectedAssetsSummary value.
     */
    @Generated
    public List<AssetChainKindSummaryResult> getAffectedAssetsSummary() {
        return this.affectedAssetsSummary;
    }

    /**
     * Get the affectedGroupsSummary property: A list of disco group summaries.
     * 
     * @return the affectedGroupsSummary value.
     */
    @Generated
    public List<DiscoGroupSummaryResult> getAffectedGroupsSummary() {
        return this.affectedGroupsSummary;
    }

    /**
     * Get the errors property: The list of exceptions.
     * 
     * @return the errors value.
     */
    @Generated
    public List<ErrorResponse> getErrors() {
        return this.errors;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("affectedAssetsSummary", this.affectedAssetsSummary,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("affectedGroupsSummary", this.affectedGroupsSummary,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetChainSummaryResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetChainSummaryResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetChainSummaryResult.
     */
    @Generated
    public static AssetChainSummaryResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<AssetChainKindSummaryResult> affectedAssetsSummary = null;
            List<DiscoGroupSummaryResult> affectedGroupsSummary = null;
            List<ErrorResponse> errors = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("affectedAssetsSummary".equals(fieldName)) {
                    affectedAssetsSummary = reader.readArray(reader1 -> AssetChainKindSummaryResult.fromJson(reader1));
                } else if ("affectedGroupsSummary".equals(fieldName)) {
                    affectedGroupsSummary = reader.readArray(reader1 -> DiscoGroupSummaryResult.fromJson(reader1));
                } else if ("errors".equals(fieldName)) {
                    errors = reader.readArray(reader1 -> ErrorResponse.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AssetChainSummaryResult deserializedAssetChainSummaryResult
                = new AssetChainSummaryResult(affectedAssetsSummary, affectedGroupsSummary);
            deserializedAssetChainSummaryResult.errors = errors;

            return deserializedAssetChainSummaryResult;
        });
    }
}
