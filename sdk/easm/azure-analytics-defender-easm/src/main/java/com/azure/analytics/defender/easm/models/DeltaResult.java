// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Result for each of the delta detail response.
 */
@Immutable
public final class DeltaResult implements JsonSerializable<DeltaResult> {
    /*
     * Shows the asset kind
     */
    @Generated
    private final GlobalAssetType kind;

    /*
     * Shows the asset name
     */
    @Generated
    private final String name;

    /*
     * Shows the date when the asset was originally created
     */
    @Generated
    private final OffsetDateTime createdAt;

    /*
     * Shows the date when the asset was last updated, usually the date the we trying to pull up the results for
     */
    @Generated
    private final OffsetDateTime updatedAt;

    /*
     * Shows the inventory state
     */
    @Generated
    private final GlobalInventoryState state;

    /**
     * Creates an instance of DeltaResult class.
     * 
     * @param kind the kind value to set.
     * @param name the name value to set.
     * @param createdAt the createdAt value to set.
     * @param updatedAt the updatedAt value to set.
     * @param state the state value to set.
     */
    @Generated
    private DeltaResult(GlobalAssetType kind, String name, OffsetDateTime createdAt, OffsetDateTime updatedAt,
        GlobalInventoryState state) {
        this.kind = kind;
        this.name = name;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.state = state;
    }

    /**
     * Get the kind property: Shows the asset kind.
     * 
     * @return the kind value.
     */
    @Generated
    public GlobalAssetType getKind() {
        return this.kind;
    }

    /**
     * Get the name property: Shows the asset name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the createdAt property: Shows the date when the asset was originally created.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the updatedAt property: Shows the date when the asset was last updated, usually the date the we trying to
     * pull up the results for.
     * 
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the state property: Shows the inventory state.
     * 
     * @return the state value.
     */
    @Generated
    public GlobalInventoryState getState() {
        return this.state;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("updatedAt",
            this.updatedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedAt));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeltaResult.
     */
    @Generated
    public static DeltaResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalAssetType kind = null;
            String name = null;
            OffsetDateTime createdAt = null;
            OffsetDateTime updatedAt = null;
            GlobalInventoryState state = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    kind = GlobalAssetType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedAt".equals(fieldName)) {
                    updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    state = GlobalInventoryState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new DeltaResult(kind, name, createdAt, updatedAt, state);
        });
    }
}
