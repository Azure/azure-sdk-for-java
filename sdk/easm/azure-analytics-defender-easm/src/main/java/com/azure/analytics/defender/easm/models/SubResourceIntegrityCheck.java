// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The SubResourceIntegrityCheck model.
 */
@Immutable
public final class SubResourceIntegrityCheck implements JsonSerializable<SubResourceIntegrityCheck> {

    /*
     * The violation property.
     */
    @Generated
    private Boolean violation;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The causePageUrl property.
     */
    @Generated
    private String causePageUrl;

    /*
     * The crawlGuid property.
     */
    @Generated
    private String crawlGuid;

    /*
     * The pageGuid property.
     */
    @Generated
    private String pageGuid;

    /*
     * The resourceGuid property.
     */
    @Generated
    private String resourceGuid;

    /*
     * The expectedHash property.
     */
    @Generated
    private String expectedHash;

    /**
     * Creates an instance of SubResourceIntegrityCheck class.
     */
    @Generated
    private SubResourceIntegrityCheck() {
    }

    /**
     * Get the violation property: The violation property.
     *
     * @return the violation value.
     */
    @Generated
    public Boolean isViolation() {
        return this.violation;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the causePageUrl property: The causePageUrl property.
     *
     * @return the causePageUrl value.
     */
    @Generated
    public String getCausePageUrl() {
        return this.causePageUrl;
    }

    /**
     * Get the crawlGuid property: The crawlGuid property.
     *
     * @return the crawlGuid value.
     */
    @Generated
    public String getCrawlGuid() {
        return this.crawlGuid;
    }

    /**
     * Get the pageGuid property: The pageGuid property.
     *
     * @return the pageGuid value.
     */
    @Generated
    public String getPageGuid() {
        return this.pageGuid;
    }

    /**
     * Get the resourceGuid property: The resourceGuid property.
     *
     * @return the resourceGuid value.
     */
    @Generated
    public String getResourceGuid() {
        return this.resourceGuid;
    }

    /**
     * Get the expectedHash property: The expectedHash property.
     *
     * @return the expectedHash value.
     */
    @Generated
    public String getExpectedHash() {
        return this.expectedHash;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("violation", this.violation);
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("causePageUrl", this.causePageUrl);
        jsonWriter.writeStringField("crawlGuid", this.crawlGuid);
        jsonWriter.writeStringField("pageGuid", this.pageGuid);
        jsonWriter.writeStringField("resourceGuid", this.resourceGuid);
        jsonWriter.writeStringField("expectedHash", this.expectedHash);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubResourceIntegrityCheck from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubResourceIntegrityCheck if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubResourceIntegrityCheck.
     */
    @Generated
    public static SubResourceIntegrityCheck fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubResourceIntegrityCheck deserializedSubResourceIntegrityCheck = new SubResourceIntegrityCheck();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("violation".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.violation = reader.getNullable(JsonReader::getBoolean);
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.count = reader.getNullable(JsonReader::getLong);
                } else if ("causePageUrl".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.causePageUrl = reader.getString();
                } else if ("crawlGuid".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.crawlGuid = reader.getString();
                } else if ("pageGuid".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.pageGuid = reader.getString();
                } else if ("resourceGuid".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.resourceGuid = reader.getString();
                } else if ("expectedHash".equals(fieldName)) {
                    deserializedSubResourceIntegrityCheck.expectedHash = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSubResourceIntegrityCheck;
        });
    }
}
