// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The page result response for the observation.
 */
@Immutable
public final class ObservationPageResult implements JsonSerializable<ObservationPageResult> {
    /*
     * The total number of elements.
     */
    @Generated
    private final long totalElements;

    /*
     * The summary of observation counts by priority.
     */
    @Generated
    private final Map<String, Integer> prioritySummary;

    /*
     * The list of observation results.
     */
    @Generated
    private final List<ObservationResult> value;

    /**
     * Creates an instance of ObservationPageResult class.
     * 
     * @param totalElements the totalElements value to set.
     * @param prioritySummary the prioritySummary value to set.
     * @param value the value value to set.
     */
    @Generated
    private ObservationPageResult(long totalElements, Map<String, Integer> prioritySummary,
        List<ObservationResult> value) {
        this.totalElements = totalElements;
        this.prioritySummary = prioritySummary;
        this.value = value;
    }

    /**
     * Get the totalElements property: The total number of elements.
     * 
     * @return the totalElements value.
     */
    @Generated
    public long getTotalElements() {
        return this.totalElements;
    }

    /**
     * Get the prioritySummary property: The summary of observation counts by priority.
     * 
     * @return the prioritySummary value.
     */
    @Generated
    public Map<String, Integer> getPrioritySummary() {
        return this.prioritySummary;
    }

    /**
     * Get the value property: The list of observation results.
     * 
     * @return the value value.
     */
    @Generated
    public List<ObservationResult> getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("totalElements", this.totalElements);
        jsonWriter.writeMapField("prioritySummary", this.prioritySummary,
            (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ObservationPageResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ObservationPageResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ObservationPageResult.
     */
    @Generated
    public static ObservationPageResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long totalElements = 0L;
            Map<String, Integer> prioritySummary = null;
            List<ObservationResult> value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalElements".equals(fieldName)) {
                    totalElements = reader.getLong();
                } else if ("prioritySummary".equals(fieldName)) {
                    prioritySummary = reader.readMap(reader1 -> reader1.getInt());
                } else if ("value".equals(fieldName)) {
                    value = reader.readArray(reader1 -> ObservationResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new ObservationPageResult(totalElements, prioritySummary, value);
        });
    }
}
