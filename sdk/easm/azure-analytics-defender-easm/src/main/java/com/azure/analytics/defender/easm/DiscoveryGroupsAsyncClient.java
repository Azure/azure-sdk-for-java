// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm;

import com.azure.analytics.defender.easm.implementation.DiscoveryGroupsImpl;
import com.azure.analytics.defender.easm.models.DiscoGroup;
import com.azure.analytics.defender.easm.models.DiscoGroupData;
import com.azure.analytics.defender.easm.models.DiscoRunResult;
import com.azure.analytics.defender.easm.models.ValidateResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous EasmClient type.
 */
@ServiceClient(builder = EasmClientBuilder.class, isAsync = true)
public final class DiscoveryGroupsAsyncClient {
    @Generated
    private final DiscoveryGroupsImpl serviceClient;

    /**
     * Initializes an instance of DiscoveryGroupsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    DiscoveryGroupsAsyncClient(DiscoveryGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Optional): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoGroup items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDiscoGroup(RequestOptions requestOptions) {
        return this.serviceClient.listDiscoGroupAsync(requestOptions);
    }

    /**
     * Validate a discovery group with a given groupName.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param discoGroupData A request body used to create a discovery group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> validateDiscoGroupWithResponse(BinaryData discoGroupData,
        RequestOptions requestOptions) {
        return this.serviceClient.validateDiscoGroupWithResponseAsync(discoGroupData, requestOptions);
    }

    /**
     * Retrieve a discovery group with a given groupName.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Optional): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDiscoGroupWithResponse(String groupName, RequestOptions requestOptions) {
        return this.serviceClient.getDiscoGroupWithResponseAsync(groupName, requestOptions);
    }

    /**
     * Create a discovery group with a given groupName.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Optional): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupName The caller provided unique name for the resource.
     * @param discoGroupData A request body used to create a discovery group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceDiscoGroupWithResponse(String groupName, BinaryData discoGroupData,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceDiscoGroupWithResponseAsync(groupName, discoGroupData, requestOptions);
    }

    /**
     * Run a discovery group with a given groupName.
     * 
     * @param groupName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> runDiscoGroupWithResponse(String groupName, RequestOptions requestOptions) {
        return this.serviceClient.runDiscoGroupWithResponseAsync(groupName, requestOptions);
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     submittedDate: OffsetDateTime (Optional)
     *     startedDate: OffsetDateTime (Optional)
     *     completedDate: OffsetDateTime (Optional)
     *     tier: String (Optional)
     *     state: String(pending/running/completed/failed) (Optional)
     *     totalAssetsFoundCount: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param groupName The unique identifier for the discovery group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRuns(String groupName, RequestOptions requestOptions) {
        return this.serviceClient.listRunsAsync(groupName, requestOptions);
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     * 
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoGroup items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiscoGroup> listDiscoGroup(String filter, Integer skip) {
        // Generated convenience method for listDiscoGroup
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listDiscoGroup(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DiscoGroup>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DiscoGroup.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoGroup items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiscoGroup> listDiscoGroup() {
        // Generated convenience method for listDiscoGroup
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listDiscoGroup(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DiscoGroup>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DiscoGroup.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Validate a discovery group with a given groupName.
     * 
     * @param discoGroupData A request body used to create a discovery group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ValidateResult> validateDiscoGroup(DiscoGroupData discoGroupData) {
        // Generated convenience method for validateDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return validateDiscoGroupWithResponse(BinaryData.fromObject(discoGroupData), requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(ValidateResult.class));
    }

    /**
     * Retrieve a discovery group with a given groupName.
     * 
     * @param groupName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiscoGroup> getDiscoGroup(String groupName) {
        // Generated convenience method for getDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDiscoGroupWithResponse(groupName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DiscoGroup.class));
    }

    /**
     * Create a discovery group with a given groupName.
     * 
     * @param groupName The caller provided unique name for the resource.
     * @param discoGroupData A request body used to create a discovery group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiscoGroup> createOrReplaceDiscoGroup(String groupName, DiscoGroupData discoGroupData) {
        // Generated convenience method for createOrReplaceDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceDiscoGroupWithResponse(groupName, BinaryData.fromObject(discoGroupData), requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(DiscoGroup.class));
    }

    /**
     * Run a discovery group with a given groupName.
     * 
     * @param groupName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> runDiscoGroup(String groupName) {
        // Generated convenience method for runDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return runDiscoGroupWithResponse(groupName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     * 
     * @param groupName The unique identifier for the discovery group.
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiscoRunResult> listRuns(String groupName, String filter, Integer skip) {
        // Generated convenience method for listRuns
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listRuns(groupName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DiscoRunResult>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DiscoRunResult.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     * 
     * @param groupName The unique identifier for the discovery group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiscoRunResult> listRuns(String groupName) {
        // Generated convenience method for listRuns
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listRuns(groupName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DiscoRunResult>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DiscoRunResult.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
