// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LogAnalyticsDataConnectionProperties model.
 */
@Fluent
public final class LogAnalyticsDataConnectionProperties extends DataConnectionProperties {

    /*
     * log analytics api key
     */
    @Generated
    private String apiKey;

    /*
     * log analytics workspace id
     */
    @Generated
    private String workspaceId;

    /**
     * Creates an instance of LogAnalyticsDataConnectionProperties class.
     */
    @Generated
    public LogAnalyticsDataConnectionProperties() {
    }

    /**
     * Get the apiKey property: log analytics api key.
     *
     * @return the apiKey value.
     */
    @Generated
    public String getApiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: log analytics api key.
     *
     * @param apiKey the apiKey value to set.
     * @return the LogAnalyticsDataConnectionProperties object itself.
     */
    @Generated
    public LogAnalyticsDataConnectionProperties setApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get the workspaceId property: log analytics workspace id.
     *
     * @return the workspaceId value.
     */
    @Generated
    public String getWorkspaceId() {
        return this.workspaceId;
    }

    /**
     * Set the workspaceId property: log analytics workspace id.
     *
     * @param workspaceId the workspaceId value to set.
     * @return the LogAnalyticsDataConnectionProperties object itself.
     */
    @Generated
    public LogAnalyticsDataConnectionProperties setWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("apiKey", this.apiKey);
        jsonWriter.writeStringField("workspaceId", this.workspaceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogAnalyticsDataConnectionProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogAnalyticsDataConnectionProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogAnalyticsDataConnectionProperties.
     */
    @Generated
    public static LogAnalyticsDataConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogAnalyticsDataConnectionProperties deserializedLogAnalyticsDataConnectionProperties
                = new LogAnalyticsDataConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("apiKey".equals(fieldName)) {
                    deserializedLogAnalyticsDataConnectionProperties.apiKey = reader.getString();
                } else if ("workspaceId".equals(fieldName)) {
                    deserializedLogAnalyticsDataConnectionProperties.workspaceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedLogAnalyticsDataConnectionProperties;
        });
    }
}
