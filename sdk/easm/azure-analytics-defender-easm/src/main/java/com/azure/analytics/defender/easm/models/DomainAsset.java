// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The DomainAsset model.
 */
@Immutable
public final class DomainAsset implements JsonSerializable<DomainAsset> {

    /*
     * The domain property.
     */
    @Generated
    private String domain;

    /*
     * The whoisId property.
     */
    @Generated
    private Long whoisId;

    /*
     * The registrarIanaIds property.
     */
    @Generated
    private List<ObservedInteger> registrarIanaIds;

    /*
     * The registrantContacts property.
     */
    @Generated
    private List<ObservedString> registrantContacts;

    /*
     * The registrantOrgs property.
     */
    @Generated
    private List<ObservedString> registrantOrgs;

    /*
     * The adminContacts property.
     */
    @Generated
    private List<ObservedString> adminContacts;

    /*
     * The technicalContacts property.
     */
    @Generated
    private List<ObservedString> technicalContacts;

    /*
     * The alexaInfos property.
     */
    @Generated
    private List<AlexaDetails> alexaInfos;

    /*
     * The nameServers property.
     */
    @Generated
    private List<ObservedString> nameServers;

    /*
     * The mailServers property.
     */
    @Generated
    private List<ObservedString> mailServers;

    /*
     * The whoisServers property.
     */
    @Generated
    private List<ObservedString> whoisServers;

    /*
     * The domainStatuses property.
     */
    @Generated
    private List<ObservedString> domainStatuses;

    /*
     * The registrarCreatedAt property.
     */
    @Generated
    private List<ObservedLong> registrarCreatedAt;

    /*
     * The registrarUpdatedAt property.
     */
    @Generated
    private List<ObservedLong> registrarUpdatedAt;

    /*
     * The registrarExpiresAt property.
     */
    @Generated
    private List<ObservedLong> registrarExpiresAt;

    /*
     * The soaRecords property.
     */
    @Generated
    private List<SoaRecord> soaRecords;

    /*
     * The detailedFromWhoisAt property.
     */
    @Generated
    private OffsetDateTime detailedFromWhoisAt;

    /*
     * The registrarNames property.
     */
    @Generated
    private List<ObservedString> registrarNames;

    /*
     * The sources property.
     */
    @Generated
    private List<Source> sources;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The parkedDomain property.
     */
    @Generated
    private List<ObservedBoolean> parkedDomain;

    /*
     * The registrantNames property.
     */
    @Generated
    private List<ObservedString> registrantNames;

    /*
     * The adminNames property.
     */
    @Generated
    private List<ObservedString> adminNames;

    /*
     * The technicalNames property.
     */
    @Generated
    private List<ObservedString> technicalNames;

    /*
     * The adminOrgs property.
     */
    @Generated
    private List<ObservedString> adminOrgs;

    /*
     * The technicalOrgs property.
     */
    @Generated
    private List<ObservedString> technicalOrgs;

    /*
     * The registrantPhones property.
     */
    @Generated
    private List<ObservedString> registrantPhones;

    /*
     * The adminPhones property.
     */
    @Generated
    private List<ObservedString> adminPhones;

    /*
     * The technicalPhones property.
     */
    @Generated
    private List<ObservedString> technicalPhones;

    /**
     * Creates an instance of DomainAsset class.
     */
    @Generated
    private DomainAsset() {
    }

    /**
     * Get the domain property: The domain property.
     *
     * @return the domain value.
     */
    @Generated
    public String getDomain() {
        return this.domain;
    }

    /**
     * Get the whoisId property: The whoisId property.
     *
     * @return the whoisId value.
     */
    @Generated
    public Long getWhoisId() {
        return this.whoisId;
    }

    /**
     * Get the registrarIanaIds property: The registrarIanaIds property.
     *
     * @return the registrarIanaIds value.
     */
    @Generated
    public List<ObservedInteger> getRegistrarIanaIds() {
        return this.registrarIanaIds;
    }

    /**
     * Get the registrantContacts property: The registrantContacts property.
     *
     * @return the registrantContacts value.
     */
    @Generated
    public List<ObservedString> getRegistrantContacts() {
        return this.registrantContacts;
    }

    /**
     * Get the registrantOrgs property: The registrantOrgs property.
     *
     * @return the registrantOrgs value.
     */
    @Generated
    public List<ObservedString> getRegistrantOrgs() {
        return this.registrantOrgs;
    }

    /**
     * Get the adminContacts property: The adminContacts property.
     *
     * @return the adminContacts value.
     */
    @Generated
    public List<ObservedString> getAdminContacts() {
        return this.adminContacts;
    }

    /**
     * Get the technicalContacts property: The technicalContacts property.
     *
     * @return the technicalContacts value.
     */
    @Generated
    public List<ObservedString> getTechnicalContacts() {
        return this.technicalContacts;
    }

    /**
     * Get the alexaInfos property: The alexaInfos property.
     *
     * @return the alexaInfos value.
     */
    @Generated
    public List<AlexaDetails> getAlexaInfos() {
        return this.alexaInfos;
    }

    /**
     * Get the nameServers property: The nameServers property.
     *
     * @return the nameServers value.
     */
    @Generated
    public List<ObservedString> getNameServers() {
        return this.nameServers;
    }

    /**
     * Get the mailServers property: The mailServers property.
     *
     * @return the mailServers value.
     */
    @Generated
    public List<ObservedString> getMailServers() {
        return this.mailServers;
    }

    /**
     * Get the whoisServers property: The whoisServers property.
     *
     * @return the whoisServers value.
     */
    @Generated
    public List<ObservedString> getWhoisServers() {
        return this.whoisServers;
    }

    /**
     * Get the domainStatuses property: The domainStatuses property.
     *
     * @return the domainStatuses value.
     */
    @Generated
    public List<ObservedString> getDomainStatuses() {
        return this.domainStatuses;
    }

    /**
     * Get the registrarCreatedAt property: The registrarCreatedAt property.
     *
     * @return the registrarCreatedAt value.
     */
    @Generated
    public List<ObservedLong> getRegistrarCreatedAt() {
        return this.registrarCreatedAt;
    }

    /**
     * Get the registrarUpdatedAt property: The registrarUpdatedAt property.
     *
     * @return the registrarUpdatedAt value.
     */
    @Generated
    public List<ObservedLong> getRegistrarUpdatedAt() {
        return this.registrarUpdatedAt;
    }

    /**
     * Get the registrarExpiresAt property: The registrarExpiresAt property.
     *
     * @return the registrarExpiresAt value.
     */
    @Generated
    public List<ObservedLong> getRegistrarExpiresAt() {
        return this.registrarExpiresAt;
    }

    /**
     * Get the soaRecords property: The soaRecords property.
     *
     * @return the soaRecords value.
     */
    @Generated
    public List<SoaRecord> getSoaRecords() {
        return this.soaRecords;
    }

    /**
     * Get the detailedFromWhoisAt property: The detailedFromWhoisAt property.
     *
     * @return the detailedFromWhoisAt value.
     */
    @Generated
    public OffsetDateTime getDetailedFromWhoisAt() {
        return this.detailedFromWhoisAt;
    }

    /**
     * Get the registrarNames property: The registrarNames property.
     *
     * @return the registrarNames value.
     */
    @Generated
    public List<ObservedString> getRegistrarNames() {
        return this.registrarNames;
    }

    /**
     * Get the sources property: The sources property.
     *
     * @return the sources value.
     */
    @Generated
    public List<Source> getSources() {
        return this.sources;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the parkedDomain property: The parkedDomain property.
     *
     * @return the parkedDomain value.
     */
    @Generated
    public List<ObservedBoolean> getParkedDomain() {
        return this.parkedDomain;
    }

    /**
     * Get the registrantNames property: The registrantNames property.
     *
     * @return the registrantNames value.
     */
    @Generated
    public List<ObservedString> getRegistrantNames() {
        return this.registrantNames;
    }

    /**
     * Get the adminNames property: The adminNames property.
     *
     * @return the adminNames value.
     */
    @Generated
    public List<ObservedString> getAdminNames() {
        return this.adminNames;
    }

    /**
     * Get the technicalNames property: The technicalNames property.
     *
     * @return the technicalNames value.
     */
    @Generated
    public List<ObservedString> getTechnicalNames() {
        return this.technicalNames;
    }

    /**
     * Get the adminOrgs property: The adminOrgs property.
     *
     * @return the adminOrgs value.
     */
    @Generated
    public List<ObservedString> getAdminOrgs() {
        return this.adminOrgs;
    }

    /**
     * Get the technicalOrgs property: The technicalOrgs property.
     *
     * @return the technicalOrgs value.
     */
    @Generated
    public List<ObservedString> getTechnicalOrgs() {
        return this.technicalOrgs;
    }

    /**
     * Get the registrantPhones property: The registrantPhones property.
     *
     * @return the registrantPhones value.
     */
    @Generated
    public List<ObservedString> getRegistrantPhones() {
        return this.registrantPhones;
    }

    /**
     * Get the adminPhones property: The adminPhones property.
     *
     * @return the adminPhones value.
     */
    @Generated
    public List<ObservedString> getAdminPhones() {
        return this.adminPhones;
    }

    /**
     * Get the technicalPhones property: The technicalPhones property.
     *
     * @return the technicalPhones value.
     */
    @Generated
    public List<ObservedString> getTechnicalPhones() {
        return this.technicalPhones;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeNumberField("whoisId", this.whoisId);
        jsonWriter.writeArrayField("registrarIanaIds", this.registrarIanaIds,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrantContacts", this.registrantContacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrantOrgs", this.registrantOrgs,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminContacts", this.adminContacts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalContacts", this.technicalContacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("alexaInfos", this.alexaInfos, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("nameServers", this.nameServers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("mailServers", this.mailServers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("whoisServers", this.whoisServers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("domainStatuses", this.domainStatuses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrarCreatedAt", this.registrarCreatedAt,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrarUpdatedAt", this.registrarUpdatedAt,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrarExpiresAt", this.registrarExpiresAt,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("soaRecords", this.soaRecords, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("detailedFromWhoisAt",
            this.detailedFromWhoisAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.detailedFromWhoisAt));
        jsonWriter.writeArrayField("registrarNames", this.registrarNames,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeArrayField("parkedDomain", this.parkedDomain, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrantNames", this.registrantNames,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminNames", this.adminNames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalNames", this.technicalNames,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminOrgs", this.adminOrgs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalOrgs", this.technicalOrgs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrantPhones", this.registrantPhones,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminPhones", this.adminPhones, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalPhones", this.technicalPhones,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DomainAsset from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DomainAsset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DomainAsset.
     */
    @Generated
    public static DomainAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DomainAsset deserializedDomainAsset = new DomainAsset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("domain".equals(fieldName)) {
                    deserializedDomainAsset.domain = reader.getString();
                } else if ("whoisId".equals(fieldName)) {
                    deserializedDomainAsset.whoisId = reader.getNullable(JsonReader::getLong);
                } else if ("registrarIanaIds".equals(fieldName)) {
                    List<ObservedInteger> registrarIanaIds
                        = reader.readArray(reader1 -> ObservedInteger.fromJson(reader1));
                    deserializedDomainAsset.registrarIanaIds = registrarIanaIds;
                } else if ("registrantContacts".equals(fieldName)) {
                    List<ObservedString> registrantContacts
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.registrantContacts = registrantContacts;
                } else if ("registrantOrgs".equals(fieldName)) {
                    List<ObservedString> registrantOrgs = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.registrantOrgs = registrantOrgs;
                } else if ("adminContacts".equals(fieldName)) {
                    List<ObservedString> adminContacts = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.adminContacts = adminContacts;
                } else if ("technicalContacts".equals(fieldName)) {
                    List<ObservedString> technicalContacts
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.technicalContacts = technicalContacts;
                } else if ("alexaInfos".equals(fieldName)) {
                    List<AlexaDetails> alexaInfos = reader.readArray(reader1 -> AlexaDetails.fromJson(reader1));
                    deserializedDomainAsset.alexaInfos = alexaInfos;
                } else if ("nameServers".equals(fieldName)) {
                    List<ObservedString> nameServers = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.nameServers = nameServers;
                } else if ("mailServers".equals(fieldName)) {
                    List<ObservedString> mailServers = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.mailServers = mailServers;
                } else if ("whoisServers".equals(fieldName)) {
                    List<ObservedString> whoisServers = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.whoisServers = whoisServers;
                } else if ("domainStatuses".equals(fieldName)) {
                    List<ObservedString> domainStatuses = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.domainStatuses = domainStatuses;
                } else if ("registrarCreatedAt".equals(fieldName)) {
                    List<ObservedLong> registrarCreatedAt = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedDomainAsset.registrarCreatedAt = registrarCreatedAt;
                } else if ("registrarUpdatedAt".equals(fieldName)) {
                    List<ObservedLong> registrarUpdatedAt = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedDomainAsset.registrarUpdatedAt = registrarUpdatedAt;
                } else if ("registrarExpiresAt".equals(fieldName)) {
                    List<ObservedLong> registrarExpiresAt = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedDomainAsset.registrarExpiresAt = registrarExpiresAt;
                } else if ("soaRecords".equals(fieldName)) {
                    List<SoaRecord> soaRecords = reader.readArray(reader1 -> SoaRecord.fromJson(reader1));
                    deserializedDomainAsset.soaRecords = soaRecords;
                } else if ("detailedFromWhoisAt".equals(fieldName)) {
                    deserializedDomainAsset.detailedFromWhoisAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("registrarNames".equals(fieldName)) {
                    List<ObservedString> registrarNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.registrarNames = registrarNames;
                } else if ("sources".equals(fieldName)) {
                    List<Source> sources = reader.readArray(reader1 -> Source.fromJson(reader1));
                    deserializedDomainAsset.sources = sources;
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedDomainAsset.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedDomainAsset.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedDomainAsset.count = reader.getNullable(JsonReader::getLong);
                } else if ("parkedDomain".equals(fieldName)) {
                    List<ObservedBoolean> parkedDomain = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedDomainAsset.parkedDomain = parkedDomain;
                } else if ("registrantNames".equals(fieldName)) {
                    List<ObservedString> registrantNames
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.registrantNames = registrantNames;
                } else if ("adminNames".equals(fieldName)) {
                    List<ObservedString> adminNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.adminNames = adminNames;
                } else if ("technicalNames".equals(fieldName)) {
                    List<ObservedString> technicalNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.technicalNames = technicalNames;
                } else if ("adminOrgs".equals(fieldName)) {
                    List<ObservedString> adminOrgs = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.adminOrgs = adminOrgs;
                } else if ("technicalOrgs".equals(fieldName)) {
                    List<ObservedString> technicalOrgs = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.technicalOrgs = technicalOrgs;
                } else if ("registrantPhones".equals(fieldName)) {
                    List<ObservedString> registrantPhones
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.registrantPhones = registrantPhones;
                } else if ("adminPhones".equals(fieldName)) {
                    List<ObservedString> adminPhones = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.adminPhones = adminPhones;
                } else if ("technicalPhones".equals(fieldName)) {
                    List<ObservedString> technicalPhones
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedDomainAsset.technicalPhones = technicalPhones;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDomainAsset;
        });
    }
}
