// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The HostAsset model.
 */
@Immutable
public final class HostAsset extends InventoryAsset {

    /*
     * The host property.
     */
    @Generated
    private String host;

    /*
     * The domain property.
     */
    @Generated
    private String domain;

    /*
     * The ipAddresses property.
     */
    @Generated
    private List<ObservedString> ipAddresses;

    /*
     * The webComponents property.
     */
    @Generated
    private List<WebComponent> webComponents;

    /*
     * The headers property.
     */
    @Generated
    private List<ObservedHeader> headers;

    /*
     * The attributes property.
     */
    @Generated
    private List<Attribute> attributes;

    /*
     * The cookies property.
     */
    @Generated
    private List<Cookie> cookies;

    /*
     * The sslCerts property.
     */
    @Generated
    private List<SslCertAsset> sslCerts;

    /*
     * The parentHosts property.
     */
    @Generated
    private List<ObservedString> parentHosts;

    /*
     * The childHosts property.
     */
    @Generated
    private List<ObservedString> childHosts;

    /*
     * The hostCore property.
     */
    @Generated
    private HostCore hostCore;

    /*
     * The services property.
     */
    @Generated
    private List<Service> services;

    /*
     * The cnames property.
     */
    @Generated
    private List<ObservedString> cnames;

    /*
     * The sources property.
     */
    @Generated
    private List<Source> sources;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The resourceUrls property.
     */
    @Generated
    private List<ResourceUrl> resourceUrls;

    /*
     * The scanMetadata property.
     */
    @Generated
    private List<ScanMetadata> scanMetadata;

    /*
     * The asns property.
     */
    @Generated
    private List<ObservedLong> asns;

    /*
     * The ipBlocks property.
     */
    @Generated
    private List<IpBlock> ipBlocks;

    /*
     * The responseBodies property.
     */
    @Generated
    private List<ObservedString> responseBodies;

    /*
     * The domainAsset property.
     */
    @Generated
    private DomainAsset domainAsset;

    /*
     * The nsRecord property.
     */
    @Generated
    private List<ObservedBoolean> nsRecord;

    /*
     * The mxRecord property.
     */
    @Generated
    private List<ObservedBoolean> mxRecord;

    /*
     * The webserver property.
     */
    @Generated
    private List<ObservedBoolean> webserver;

    /*
     * The location property.
     */
    @Generated
    private List<ObservedLocation> location;

    /*
     * The nxdomain property.
     */
    @Generated
    private List<ObservedBoolean> nxdomain;

    /*
     * The sslServerConfig property.
     */
    @Generated
    private List<SslServerConfig> sslServerConfig;

    /*
     * The isWildcard property.
     */
    @Generated
    private List<ObservedBoolean> isWildcard;

    /*
     * The banners property.
     */
    @Generated
    private List<Banner> banners;

    /*
     * The ipv4 property.
     */
    @Generated
    private List<ObservedBoolean> ipv4;

    /*
     * The ipv6 property.
     */
    @Generated
    private List<ObservedBoolean> ipv6;

    /**
     * Creates an instance of HostAsset class.
     */
    @Generated
    private HostAsset() {
    }

    /**
     * Get the host property: The host property.
     *
     * @return the host value.
     */
    @Generated
    public String getHost() {
        return this.host;
    }

    /**
     * Get the domain property: The domain property.
     *
     * @return the domain value.
     */
    @Generated
    public String getDomain() {
        return this.domain;
    }

    /**
     * Get the ipAddresses property: The ipAddresses property.
     *
     * @return the ipAddresses value.
     */
    @Generated
    public List<ObservedString> getIpAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the webComponents property: The webComponents property.
     *
     * @return the webComponents value.
     */
    @Generated
    public List<WebComponent> getWebComponents() {
        return this.webComponents;
    }

    /**
     * Get the headers property: The headers property.
     *
     * @return the headers value.
     */
    @Generated
    public List<ObservedHeader> getHeaders() {
        return this.headers;
    }

    /**
     * Get the attributes property: The attributes property.
     *
     * @return the attributes value.
     */
    @Generated
    public List<Attribute> getAttributes() {
        return this.attributes;
    }

    /**
     * Get the cookies property: The cookies property.
     *
     * @return the cookies value.
     */
    @Generated
    public List<Cookie> getCookies() {
        return this.cookies;
    }

    /**
     * Get the sslCerts property: The sslCerts property.
     *
     * @return the sslCerts value.
     */
    @Generated
    public List<SslCertAsset> getSslCerts() {
        return this.sslCerts;
    }

    /**
     * Get the parentHosts property: The parentHosts property.
     *
     * @return the parentHosts value.
     */
    @Generated
    public List<ObservedString> getParentHosts() {
        return this.parentHosts;
    }

    /**
     * Get the childHosts property: The childHosts property.
     *
     * @return the childHosts value.
     */
    @Generated
    public List<ObservedString> getChildHosts() {
        return this.childHosts;
    }

    /**
     * Get the hostCore property: The hostCore property.
     *
     * @return the hostCore value.
     */
    @Generated
    public HostCore getHostCore() {
        return this.hostCore;
    }

    /**
     * Get the services property: The services property.
     *
     * @return the services value.
     */
    @Generated
    public List<Service> getServices() {
        return this.services;
    }

    /**
     * Get the cnames property: The cnames property.
     *
     * @return the cnames value.
     */
    @Generated
    public List<ObservedString> getCnames() {
        return this.cnames;
    }

    /**
     * Get the sources property: The sources property.
     *
     * @return the sources value.
     */
    @Generated
    public List<Source> getSources() {
        return this.sources;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the resourceUrls property: The resourceUrls property.
     *
     * @return the resourceUrls value.
     */
    @Generated
    public List<ResourceUrl> getResourceUrls() {
        return this.resourceUrls;
    }

    /**
     * Get the scanMetadata property: The scanMetadata property.
     *
     * @return the scanMetadata value.
     */
    @Generated
    public List<ScanMetadata> getScanMetadata() {
        return this.scanMetadata;
    }

    /**
     * Get the asns property: The asns property.
     *
     * @return the asns value.
     */
    @Generated
    public List<ObservedLong> getAsns() {
        return this.asns;
    }

    /**
     * Get the ipBlocks property: The ipBlocks property.
     *
     * @return the ipBlocks value.
     */
    @Generated
    public List<IpBlock> getIpBlocks() {
        return this.ipBlocks;
    }

    /**
     * Get the responseBodies property: The responseBodies property.
     *
     * @return the responseBodies value.
     */
    @Generated
    public List<ObservedString> getResponseBodies() {
        return this.responseBodies;
    }

    /**
     * Get the domainAsset property: The domainAsset property.
     *
     * @return the domainAsset value.
     */
    @Generated
    public DomainAsset getDomainAsset() {
        return this.domainAsset;
    }

    /**
     * Get the nsRecord property: The nsRecord property.
     *
     * @return the nsRecord value.
     */
    @Generated
    public List<ObservedBoolean> getNsRecord() {
        return this.nsRecord;
    }

    /**
     * Get the mxRecord property: The mxRecord property.
     *
     * @return the mxRecord value.
     */
    @Generated
    public List<ObservedBoolean> getMxRecord() {
        return this.mxRecord;
    }

    /**
     * Get the webserver property: The webserver property.
     *
     * @return the webserver value.
     */
    @Generated
    public List<ObservedBoolean> getWebserver() {
        return this.webserver;
    }

    /**
     * Get the location property: The location property.
     *
     * @return the location value.
     */
    @Generated
    public List<ObservedLocation> getLocation() {
        return this.location;
    }

    /**
     * Get the nxdomain property: The nxdomain property.
     *
     * @return the nxdomain value.
     */
    @Generated
    public List<ObservedBoolean> getNxdomain() {
        return this.nxdomain;
    }

    /**
     * Get the sslServerConfig property: The sslServerConfig property.
     *
     * @return the sslServerConfig value.
     */
    @Generated
    public List<SslServerConfig> getSslServerConfig() {
        return this.sslServerConfig;
    }

    /**
     * Get the isWildcard property: The isWildcard property.
     *
     * @return the isWildcard value.
     */
    @Generated
    public List<ObservedBoolean> getIsWildcard() {
        return this.isWildcard;
    }

    /**
     * Get the banners property: The banners property.
     *
     * @return the banners value.
     */
    @Generated
    public List<Banner> getBanners() {
        return this.banners;
    }

    /**
     * Get the ipv4 property: The ipv4 property.
     *
     * @return the ipv4 value.
     */
    @Generated
    public List<ObservedBoolean> getIpv4() {
        return this.ipv4;
    }

    /**
     * Get the ipv6 property: The ipv6 property.
     *
     * @return the ipv6 value.
     */
    @Generated
    public List<ObservedBoolean> getIpv6() {
        return this.ipv6;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeArrayField("ipAddresses", this.ipAddresses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("webComponents", this.webComponents, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("headers", this.headers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("attributes", this.attributes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("cookies", this.cookies, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sslCerts", this.sslCerts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("parentHosts", this.parentHosts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("childHosts", this.childHosts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("hostCore", this.hostCore);
        jsonWriter.writeArrayField("services", this.services, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("cnames", this.cnames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeArrayField("resourceUrls", this.resourceUrls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("scanMetadata", this.scanMetadata, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("asns", this.asns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipBlocks", this.ipBlocks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("responseBodies", this.responseBodies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("domainAsset", this.domainAsset);
        jsonWriter.writeArrayField("nsRecord", this.nsRecord, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("mxRecord", this.mxRecord, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("webserver", this.webserver, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("location", this.location, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("nxdomain", this.nxdomain, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sslServerConfig", this.sslServerConfig,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("isWildcard", this.isWildcard, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("banners", this.banners, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv4", this.ipv4, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6", this.ipv6, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostAsset from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostAsset if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the HostAsset.
     */
    @Generated
    public static HostAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostAsset deserializedHostAsset = new HostAsset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("host".equals(fieldName)) {
                    deserializedHostAsset.host = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedHostAsset.domain = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<ObservedString> ipAddresses = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedHostAsset.ipAddresses = ipAddresses;
                } else if ("webComponents".equals(fieldName)) {
                    List<WebComponent> webComponents = reader.readArray(reader1 -> WebComponent.fromJson(reader1));
                    deserializedHostAsset.webComponents = webComponents;
                } else if ("headers".equals(fieldName)) {
                    List<ObservedHeader> headers = reader.readArray(reader1 -> ObservedHeader.fromJson(reader1));
                    deserializedHostAsset.headers = headers;
                } else if ("attributes".equals(fieldName)) {
                    List<Attribute> attributes = reader.readArray(reader1 -> Attribute.fromJson(reader1));
                    deserializedHostAsset.attributes = attributes;
                } else if ("cookies".equals(fieldName)) {
                    List<Cookie> cookies = reader.readArray(reader1 -> Cookie.fromJson(reader1));
                    deserializedHostAsset.cookies = cookies;
                } else if ("sslCerts".equals(fieldName)) {
                    List<SslCertAsset> sslCerts = reader.readArray(reader1 -> SslCertAsset.fromJson(reader1));
                    deserializedHostAsset.sslCerts = sslCerts;
                } else if ("parentHosts".equals(fieldName)) {
                    List<ObservedString> parentHosts = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedHostAsset.parentHosts = parentHosts;
                } else if ("childHosts".equals(fieldName)) {
                    List<ObservedString> childHosts = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedHostAsset.childHosts = childHosts;
                } else if ("hostCore".equals(fieldName)) {
                    deserializedHostAsset.hostCore = HostCore.fromJson(reader);
                } else if ("services".equals(fieldName)) {
                    List<Service> services = reader.readArray(reader1 -> Service.fromJson(reader1));
                    deserializedHostAsset.services = services;
                } else if ("cnames".equals(fieldName)) {
                    List<ObservedString> cnames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedHostAsset.cnames = cnames;
                } else if ("sources".equals(fieldName)) {
                    List<Source> sources = reader.readArray(reader1 -> Source.fromJson(reader1));
                    deserializedHostAsset.sources = sources;
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedHostAsset.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedHostAsset.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedHostAsset.count = reader.getNullable(JsonReader::getLong);
                } else if ("resourceUrls".equals(fieldName)) {
                    List<ResourceUrl> resourceUrls = reader.readArray(reader1 -> ResourceUrl.fromJson(reader1));
                    deserializedHostAsset.resourceUrls = resourceUrls;
                } else if ("scanMetadata".equals(fieldName)) {
                    List<ScanMetadata> scanMetadata = reader.readArray(reader1 -> ScanMetadata.fromJson(reader1));
                    deserializedHostAsset.scanMetadata = scanMetadata;
                } else if ("asns".equals(fieldName)) {
                    List<ObservedLong> asns = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedHostAsset.asns = asns;
                } else if ("ipBlocks".equals(fieldName)) {
                    List<IpBlock> ipBlocks = reader.readArray(reader1 -> IpBlock.fromJson(reader1));
                    deserializedHostAsset.ipBlocks = ipBlocks;
                } else if ("responseBodies".equals(fieldName)) {
                    List<ObservedString> responseBodies = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedHostAsset.responseBodies = responseBodies;
                } else if ("domainAsset".equals(fieldName)) {
                    deserializedHostAsset.domainAsset = DomainAsset.fromJson(reader);
                } else if ("nsRecord".equals(fieldName)) {
                    List<ObservedBoolean> nsRecord = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedHostAsset.nsRecord = nsRecord;
                } else if ("mxRecord".equals(fieldName)) {
                    List<ObservedBoolean> mxRecord = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedHostAsset.mxRecord = mxRecord;
                } else if ("webserver".equals(fieldName)) {
                    List<ObservedBoolean> webserver = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedHostAsset.webserver = webserver;
                } else if ("location".equals(fieldName)) {
                    List<ObservedLocation> location = reader.readArray(reader1 -> ObservedLocation.fromJson(reader1));
                    deserializedHostAsset.location = location;
                } else if ("nxdomain".equals(fieldName)) {
                    List<ObservedBoolean> nxdomain = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedHostAsset.nxdomain = nxdomain;
                } else if ("sslServerConfig".equals(fieldName)) {
                    List<SslServerConfig> sslServerConfig
                        = reader.readArray(reader1 -> SslServerConfig.fromJson(reader1));
                    deserializedHostAsset.sslServerConfig = sslServerConfig;
                } else if ("isWildcard".equals(fieldName)) {
                    List<ObservedBoolean> isWildcard = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedHostAsset.isWildcard = isWildcard;
                } else if ("banners".equals(fieldName)) {
                    List<Banner> banners = reader.readArray(reader1 -> Banner.fromJson(reader1));
                    deserializedHostAsset.banners = banners;
                } else if ("ipv4".equals(fieldName)) {
                    List<ObservedBoolean> ipv4 = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedHostAsset.ipv4 = ipv4;
                } else if ("ipv6".equals(fieldName)) {
                    List<ObservedBoolean> ipv6 = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedHostAsset.ipv6 = ipv6;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedHostAsset;
        });
    }
}
