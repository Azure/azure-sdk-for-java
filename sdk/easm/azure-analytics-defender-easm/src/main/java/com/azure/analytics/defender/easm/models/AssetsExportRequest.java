// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A request body used to export an asset.
 */
@Immutable
public final class AssetsExportRequest implements JsonSerializable<AssetsExportRequest> {
    /*
     * The name of the file to export.
     */
    @Generated
    private final String fileName;

    /*
     * The columns to export.
     */
    @Generated
    private final List<String> columns;

    /**
     * Creates an instance of AssetsExportRequest class.
     * 
     * @param fileName the fileName value to set.
     * @param columns the columns value to set.
     */
    @Generated
    public AssetsExportRequest(String fileName, List<String> columns) {
        this.fileName = fileName;
        this.columns = columns;
    }

    /**
     * Get the fileName property: The name of the file to export.
     * 
     * @return the fileName value.
     */
    @Generated
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Get the columns property: The columns to export.
     * 
     * @return the columns value.
     */
    @Generated
    public List<String> getColumns() {
        return this.columns;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fileName", this.fileName);
        jsonWriter.writeArrayField("columns", this.columns, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetsExportRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetsExportRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetsExportRequest.
     */
    @Generated
    public static AssetsExportRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fileName = null;
            List<String> columns = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileName".equals(fieldName)) {
                    fileName = reader.getString();
                } else if ("columns".equals(fieldName)) {
                    columns = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new AssetsExportRequest(fileName, columns);
        });
    }
}
