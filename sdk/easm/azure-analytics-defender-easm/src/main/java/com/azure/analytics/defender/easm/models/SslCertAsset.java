// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The SslCertAsset model.
 */
@Immutable
public final class SslCertAsset extends InventoryAsset {

    /*
     * The sha1 property.
     */
    @Generated
    private String sha1;

    /*
     * The subjectCommonNames property.
     */
    @Generated
    private List<String> subjectCommonNames;

    /*
     * The organizations property.
     */
    @Generated
    private List<String> organizations;

    /*
     * The organizationalUnits property.
     */
    @Generated
    private List<String> organizationalUnits;

    /*
     * The issuerCommonNames property.
     */
    @Generated
    private List<String> issuerCommonNames;

    /*
     * The sigAlgName property.
     */
    @Generated
    private String sigAlgName;

    /*
     * The invalidAfter property.
     */
    @Generated
    private OffsetDateTime invalidAfter;

    /*
     * The serialNumber property.
     */
    @Generated
    private String serialNumber;

    /*
     * The subjectAlternativeNames property.
     */
    @Generated
    private List<String> subjectAlternativeNames;

    /*
     * The issuerAlternativeNames property.
     */
    @Generated
    private List<String> issuerAlternativeNames;

    /*
     * The sources property.
     */
    @Generated
    private List<Source> sources;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The invalidBefore property.
     */
    @Generated
    private OffsetDateTime invalidBefore;

    /*
     * The keySize property.
     */
    @Generated
    private Integer keySize;

    /*
     * The keyAlgorithm property.
     */
    @Generated
    private String keyAlgorithm;

    /*
     * The subjectLocality property.
     */
    @Generated
    private List<String> subjectLocality;

    /*
     * The subjectState property.
     */
    @Generated
    private List<String> subjectState;

    /*
     * The subjectCountry property.
     */
    @Generated
    private List<String> subjectCountry;

    /*
     * The issuerLocality property.
     */
    @Generated
    private List<String> issuerLocality;

    /*
     * The issuerState property.
     */
    @Generated
    private List<String> issuerState;

    /*
     * The issuerCountry property.
     */
    @Generated
    private List<String> issuerCountry;

    /*
     * The subjectOrganizations property.
     */
    @Generated
    private List<String> subjectOrganizations;

    /*
     * The subjectOrganizationalUnits property.
     */
    @Generated
    private List<String> subjectOrganizationalUnits;

    /*
     * The issuerOrganizations property.
     */
    @Generated
    private List<String> issuerOrganizations;

    /*
     * The issuerOrganizationalUnits property.
     */
    @Generated
    private List<String> issuerOrganizationalUnits;

    /*
     * The version property.
     */
    @Generated
    private Integer version;

    /*
     * The certificateAuthority property.
     */
    @Generated
    private Boolean certificateAuthority;

    /*
     * The selfSigned property.
     */
    @Generated
    private Boolean selfSigned;

    /*
     * The sigAlgOid property.
     */
    @Generated
    private String sigAlgOid;

    /*
     * The recent property.
     */
    @Generated
    private Boolean recent;

    /*
     * The validationType property.
     */
    @Generated
    private SslCertAssetValidationType validationType;

    /**
     * Creates an instance of SslCertAsset class.
     */
    @Generated
    private SslCertAsset() {
    }

    /**
     * Get the sha1 property: The sha1 property.
     *
     * @return the sha1 value.
     */
    @Generated
    public String getSha1() {
        return this.sha1;
    }

    /**
     * Get the subjectCommonNames property: The subjectCommonNames property.
     *
     * @return the subjectCommonNames value.
     */
    @Generated
    public List<String> getSubjectCommonNames() {
        return this.subjectCommonNames;
    }

    /**
     * Get the organizations property: The organizations property.
     *
     * @return the organizations value.
     */
    @Generated
    public List<String> getOrganizations() {
        return this.organizations;
    }

    /**
     * Get the organizationalUnits property: The organizationalUnits property.
     *
     * @return the organizationalUnits value.
     */
    @Generated
    public List<String> getOrganizationalUnits() {
        return this.organizationalUnits;
    }

    /**
     * Get the issuerCommonNames property: The issuerCommonNames property.
     *
     * @return the issuerCommonNames value.
     */
    @Generated
    public List<String> getIssuerCommonNames() {
        return this.issuerCommonNames;
    }

    /**
     * Get the sigAlgName property: The sigAlgName property.
     *
     * @return the sigAlgName value.
     */
    @Generated
    public String getSigAlgName() {
        return this.sigAlgName;
    }

    /**
     * Get the invalidAfter property: The invalidAfter property.
     *
     * @return the invalidAfter value.
     */
    @Generated
    public OffsetDateTime getInvalidAfter() {
        return this.invalidAfter;
    }

    /**
     * Get the serialNumber property: The serialNumber property.
     *
     * @return the serialNumber value.
     */
    @Generated
    public String getSerialNumber() {
        return this.serialNumber;
    }

    /**
     * Get the subjectAlternativeNames property: The subjectAlternativeNames property.
     *
     * @return the subjectAlternativeNames value.
     */
    @Generated
    public List<String> getSubjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }

    /**
     * Get the issuerAlternativeNames property: The issuerAlternativeNames property.
     *
     * @return the issuerAlternativeNames value.
     */
    @Generated
    public List<String> getIssuerAlternativeNames() {
        return this.issuerAlternativeNames;
    }

    /**
     * Get the sources property: The sources property.
     *
     * @return the sources value.
     */
    @Generated
    public List<Source> getSources() {
        return this.sources;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the invalidBefore property: The invalidBefore property.
     *
     * @return the invalidBefore value.
     */
    @Generated
    public OffsetDateTime getInvalidBefore() {
        return this.invalidBefore;
    }

    /**
     * Get the keySize property: The keySize property.
     *
     * @return the keySize value.
     */
    @Generated
    public Integer getKeySize() {
        return this.keySize;
    }

    /**
     * Get the keyAlgorithm property: The keyAlgorithm property.
     *
     * @return the keyAlgorithm value.
     */
    @Generated
    public String getKeyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * Get the subjectLocality property: The subjectLocality property.
     *
     * @return the subjectLocality value.
     */
    @Generated
    public List<String> getSubjectLocality() {
        return this.subjectLocality;
    }

    /**
     * Get the subjectState property: The subjectState property.
     *
     * @return the subjectState value.
     */
    @Generated
    public List<String> getSubjectState() {
        return this.subjectState;
    }

    /**
     * Get the subjectCountry property: The subjectCountry property.
     *
     * @return the subjectCountry value.
     */
    @Generated
    public List<String> getSubjectCountry() {
        return this.subjectCountry;
    }

    /**
     * Get the issuerLocality property: The issuerLocality property.
     *
     * @return the issuerLocality value.
     */
    @Generated
    public List<String> getIssuerLocality() {
        return this.issuerLocality;
    }

    /**
     * Get the issuerState property: The issuerState property.
     *
     * @return the issuerState value.
     */
    @Generated
    public List<String> getIssuerState() {
        return this.issuerState;
    }

    /**
     * Get the issuerCountry property: The issuerCountry property.
     *
     * @return the issuerCountry value.
     */
    @Generated
    public List<String> getIssuerCountry() {
        return this.issuerCountry;
    }

    /**
     * Get the subjectOrganizations property: The subjectOrganizations property.
     *
     * @return the subjectOrganizations value.
     */
    @Generated
    public List<String> getSubjectOrganizations() {
        return this.subjectOrganizations;
    }

    /**
     * Get the subjectOrganizationalUnits property: The subjectOrganizationalUnits property.
     *
     * @return the subjectOrganizationalUnits value.
     */
    @Generated
    public List<String> getSubjectOrganizationalUnits() {
        return this.subjectOrganizationalUnits;
    }

    /**
     * Get the issuerOrganizations property: The issuerOrganizations property.
     *
     * @return the issuerOrganizations value.
     */
    @Generated
    public List<String> getIssuerOrganizations() {
        return this.issuerOrganizations;
    }

    /**
     * Get the issuerOrganizationalUnits property: The issuerOrganizationalUnits property.
     *
     * @return the issuerOrganizationalUnits value.
     */
    @Generated
    public List<String> getIssuerOrganizationalUnits() {
        return this.issuerOrganizationalUnits;
    }

    /**
     * Get the version property: The version property.
     *
     * @return the version value.
     */
    @Generated
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Get the certificateAuthority property: The certificateAuthority property.
     *
     * @return the certificateAuthority value.
     */
    @Generated
    public Boolean isCertificateAuthority() {
        return this.certificateAuthority;
    }

    /**
     * Get the selfSigned property: The selfSigned property.
     *
     * @return the selfSigned value.
     */
    @Generated
    public Boolean isSelfSigned() {
        return this.selfSigned;
    }

    /**
     * Get the sigAlgOid property: The sigAlgOid property.
     *
     * @return the sigAlgOid value.
     */
    @Generated
    public String getSigAlgOid() {
        return this.sigAlgOid;
    }

    /**
     * Get the recent property: The recent property.
     *
     * @return the recent value.
     */
    @Generated
    public Boolean isRecent() {
        return this.recent;
    }

    /**
     * Get the validationType property: The validationType property.
     *
     * @return the validationType value.
     */
    @Generated
    public SslCertAssetValidationType getValidationType() {
        return this.validationType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sha1", this.sha1);
        jsonWriter.writeArrayField("subjectCommonNames", this.subjectCommonNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("organizations", this.organizations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("organizationalUnits", this.organizationalUnits,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("issuerCommonNames", this.issuerCommonNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sigAlgName", this.sigAlgName);
        jsonWriter.writeStringField("invalidAfter",
            this.invalidAfter == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.invalidAfter));
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeArrayField("subjectAlternativeNames", this.subjectAlternativeNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("issuerAlternativeNames", this.issuerAlternativeNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("invalidBefore",
            this.invalidBefore == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.invalidBefore));
        jsonWriter.writeNumberField("keySize", this.keySize);
        jsonWriter.writeStringField("keyAlgorithm", this.keyAlgorithm);
        jsonWriter.writeArrayField("subjectLocality", this.subjectLocality,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subjectState", this.subjectState, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subjectCountry", this.subjectCountry,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("issuerLocality", this.issuerLocality,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("issuerState", this.issuerState, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("issuerCountry", this.issuerCountry,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subjectOrganizations", this.subjectOrganizations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subjectOrganizationalUnits", this.subjectOrganizationalUnits,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("issuerOrganizations", this.issuerOrganizations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("issuerOrganizationalUnits", this.issuerOrganizationalUnits,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("version", this.version);
        jsonWriter.writeBooleanField("certificateAuthority", this.certificateAuthority);
        jsonWriter.writeBooleanField("selfSigned", this.selfSigned);
        jsonWriter.writeStringField("sigAlgOid", this.sigAlgOid);
        jsonWriter.writeBooleanField("recent", this.recent);
        jsonWriter.writeStringField("validationType",
            this.validationType == null ? null : this.validationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SslCertAsset from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SslCertAsset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SslCertAsset.
     */
    @Generated
    public static SslCertAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SslCertAsset deserializedSslCertAsset = new SslCertAsset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("sha1".equals(fieldName)) {
                    deserializedSslCertAsset.sha1 = reader.getString();
                } else if ("subjectCommonNames".equals(fieldName)) {
                    List<String> subjectCommonNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.subjectCommonNames = subjectCommonNames;
                } else if ("organizations".equals(fieldName)) {
                    List<String> organizations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.organizations = organizations;
                } else if ("organizationalUnits".equals(fieldName)) {
                    List<String> organizationalUnits = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.organizationalUnits = organizationalUnits;
                } else if ("issuerCommonNames".equals(fieldName)) {
                    List<String> issuerCommonNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.issuerCommonNames = issuerCommonNames;
                } else if ("sigAlgName".equals(fieldName)) {
                    deserializedSslCertAsset.sigAlgName = reader.getString();
                } else if ("invalidAfter".equals(fieldName)) {
                    deserializedSslCertAsset.invalidAfter = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedSslCertAsset.serialNumber = reader.getString();
                } else if ("subjectAlternativeNames".equals(fieldName)) {
                    List<String> subjectAlternativeNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.subjectAlternativeNames = subjectAlternativeNames;
                } else if ("issuerAlternativeNames".equals(fieldName)) {
                    List<String> issuerAlternativeNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.issuerAlternativeNames = issuerAlternativeNames;
                } else if ("sources".equals(fieldName)) {
                    List<Source> sources = reader.readArray(reader1 -> Source.fromJson(reader1));
                    deserializedSslCertAsset.sources = sources;
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedSslCertAsset.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedSslCertAsset.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedSslCertAsset.count = reader.getNullable(JsonReader::getLong);
                } else if ("invalidBefore".equals(fieldName)) {
                    deserializedSslCertAsset.invalidBefore = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("keySize".equals(fieldName)) {
                    deserializedSslCertAsset.keySize = reader.getNullable(JsonReader::getInt);
                } else if ("keyAlgorithm".equals(fieldName)) {
                    deserializedSslCertAsset.keyAlgorithm = reader.getString();
                } else if ("subjectLocality".equals(fieldName)) {
                    List<String> subjectLocality = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.subjectLocality = subjectLocality;
                } else if ("subjectState".equals(fieldName)) {
                    List<String> subjectState = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.subjectState = subjectState;
                } else if ("subjectCountry".equals(fieldName)) {
                    List<String> subjectCountry = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.subjectCountry = subjectCountry;
                } else if ("issuerLocality".equals(fieldName)) {
                    List<String> issuerLocality = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.issuerLocality = issuerLocality;
                } else if ("issuerState".equals(fieldName)) {
                    List<String> issuerState = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.issuerState = issuerState;
                } else if ("issuerCountry".equals(fieldName)) {
                    List<String> issuerCountry = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.issuerCountry = issuerCountry;
                } else if ("subjectOrganizations".equals(fieldName)) {
                    List<String> subjectOrganizations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.subjectOrganizations = subjectOrganizations;
                } else if ("subjectOrganizationalUnits".equals(fieldName)) {
                    List<String> subjectOrganizationalUnits = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.subjectOrganizationalUnits = subjectOrganizationalUnits;
                } else if ("issuerOrganizations".equals(fieldName)) {
                    List<String> issuerOrganizations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.issuerOrganizations = issuerOrganizations;
                } else if ("issuerOrganizationalUnits".equals(fieldName)) {
                    List<String> issuerOrganizationalUnits = reader.readArray(reader1 -> reader1.getString());
                    deserializedSslCertAsset.issuerOrganizationalUnits = issuerOrganizationalUnits;
                } else if ("version".equals(fieldName)) {
                    deserializedSslCertAsset.version = reader.getNullable(JsonReader::getInt);
                } else if ("certificateAuthority".equals(fieldName)) {
                    deserializedSslCertAsset.certificateAuthority = reader.getNullable(JsonReader::getBoolean);
                } else if ("selfSigned".equals(fieldName)) {
                    deserializedSslCertAsset.selfSigned = reader.getNullable(JsonReader::getBoolean);
                } else if ("sigAlgOid".equals(fieldName)) {
                    deserializedSslCertAsset.sigAlgOid = reader.getString();
                } else if ("recent".equals(fieldName)) {
                    deserializedSslCertAsset.recent = reader.getNullable(JsonReader::getBoolean);
                } else if ("validationType".equals(fieldName)) {
                    deserializedSslCertAsset.validationType = SslCertAssetValidationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSslCertAsset;
        });
    }
}
