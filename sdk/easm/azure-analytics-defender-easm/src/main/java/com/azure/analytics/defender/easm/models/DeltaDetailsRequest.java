// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A request body used to retrieve a list of deltas.
 */
@Fluent
public final class DeltaDetailsRequest implements JsonSerializable<DeltaDetailsRequest> {
    /*
     * The type of delta detail to retrieve.
     */
    @Generated
    private final DeltaDetailType deltaDetailType;

    /*
     * The number of days prior to retrieve deltas for.
     */
    @Generated
    private Integer priorDays;

    /*
     * The type of asset
     */
    @Generated
    private final GlobalAssetType kind;

    /*
     * expected format to be: yyyy-MM-dd
     */
    @Generated
    private String date;

    /**
     * Creates an instance of DeltaDetailsRequest class.
     * 
     * @param deltaDetailType the deltaDetailType value to set.
     * @param kind the kind value to set.
     */
    @Generated
    public DeltaDetailsRequest(DeltaDetailType deltaDetailType, GlobalAssetType kind) {
        this.deltaDetailType = deltaDetailType;
        this.kind = kind;
    }

    /**
     * Get the deltaDetailType property: The type of delta detail to retrieve.
     * 
     * @return the deltaDetailType value.
     */
    @Generated
    public DeltaDetailType getDeltaDetailType() {
        return this.deltaDetailType;
    }

    /**
     * Get the priorDays property: The number of days prior to retrieve deltas for.
     * 
     * @return the priorDays value.
     */
    @Generated
    public Integer getPriorDays() {
        return this.priorDays;
    }

    /**
     * Set the priorDays property: The number of days prior to retrieve deltas for.
     * 
     * @param priorDays the priorDays value to set.
     * @return the DeltaDetailsRequest object itself.
     */
    @Generated
    public DeltaDetailsRequest setPriorDays(Integer priorDays) {
        this.priorDays = priorDays;
        return this;
    }

    /**
     * Get the kind property: The type of asset.
     * 
     * @return the kind value.
     */
    @Generated
    public GlobalAssetType getKind() {
        return this.kind;
    }

    /**
     * Get the date property: expected format to be: yyyy-MM-dd.
     * 
     * @return the date value.
     */
    @Generated
    public String getDate() {
        return this.date;
    }

    /**
     * Set the date property: expected format to be: yyyy-MM-dd.
     * 
     * @param date the date value to set.
     * @return the DeltaDetailsRequest object itself.
     */
    @Generated
    public DeltaDetailsRequest setDate(String date) {
        this.date = date;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deltaDetailType",
            this.deltaDetailType == null ? null : this.deltaDetailType.toString());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeNumberField("priorDays", this.priorDays);
        jsonWriter.writeStringField("date", this.date);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaDetailsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaDetailsRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeltaDetailsRequest.
     */
    @Generated
    public static DeltaDetailsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaDetailType deltaDetailType = null;
            GlobalAssetType kind = null;
            Integer priorDays = null;
            String date = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deltaDetailType".equals(fieldName)) {
                    deltaDetailType = DeltaDetailType.fromString(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    kind = GlobalAssetType.fromString(reader.getString());
                } else if ("priorDays".equals(fieldName)) {
                    priorDays = reader.getNullable(JsonReader::getInt);
                } else if ("date".equals(fieldName)) {
                    date = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            DeltaDetailsRequest deserializedDeltaDetailsRequest = new DeltaDetailsRequest(deltaDetailType, kind);
            deserializedDeltaDetailsRequest.priorDays = priorDays;
            deserializedDeltaDetailsRequest.date = date;

            return deserializedDeltaDetailsRequest;
        });
    }
}
