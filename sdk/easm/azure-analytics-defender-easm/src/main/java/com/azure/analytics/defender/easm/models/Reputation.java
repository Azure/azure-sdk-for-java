// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The Reputation model.
 */
@Immutable
public final class Reputation implements JsonSerializable<Reputation> {

    /*
     * The listName property.
     */
    @Generated
    private String listName;

    /*
     * The threatType property.
     */
    @Generated
    private String threatType;

    /*
     * The trusted property.
     */
    @Generated
    private Boolean trusted;

    /*
     * The cidr property.
     */
    @Generated
    private String cidr;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The listUpdatedAt property.
     */
    @Generated
    private OffsetDateTime listUpdatedAt;

    /*
     * The recent property.
     */
    @Generated
    private Boolean recent;

    /**
     * Creates an instance of Reputation class.
     */
    @Generated
    private Reputation() {
    }

    /**
     * Get the listName property: The listName property.
     *
     * @return the listName value.
     */
    @Generated
    public String getListName() {
        return this.listName;
    }

    /**
     * Get the threatType property: The threatType property.
     *
     * @return the threatType value.
     */
    @Generated
    public String getThreatType() {
        return this.threatType;
    }

    /**
     * Get the trusted property: The trusted property.
     *
     * @return the trusted value.
     */
    @Generated
    public Boolean isTrusted() {
        return this.trusted;
    }

    /**
     * Get the cidr property: The cidr property.
     *
     * @return the cidr value.
     */
    @Generated
    public String getCidr() {
        return this.cidr;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the listUpdatedAt property: The listUpdatedAt property.
     *
     * @return the listUpdatedAt value.
     */
    @Generated
    public OffsetDateTime getListUpdatedAt() {
        return this.listUpdatedAt;
    }

    /**
     * Get the recent property: The recent property.
     *
     * @return the recent value.
     */
    @Generated
    public Boolean isRecent() {
        return this.recent;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("listName", this.listName);
        jsonWriter.writeStringField("threatType", this.threatType);
        jsonWriter.writeBooleanField("trusted", this.trusted);
        jsonWriter.writeStringField("cidr", this.cidr);
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeStringField("listUpdatedAt",
            this.listUpdatedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.listUpdatedAt));
        jsonWriter.writeBooleanField("recent", this.recent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Reputation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Reputation if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Reputation.
     */
    @Generated
    public static Reputation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Reputation deserializedReputation = new Reputation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("listName".equals(fieldName)) {
                    deserializedReputation.listName = reader.getString();
                } else if ("threatType".equals(fieldName)) {
                    deserializedReputation.threatType = reader.getString();
                } else if ("trusted".equals(fieldName)) {
                    deserializedReputation.trusted = reader.getNullable(JsonReader::getBoolean);
                } else if ("cidr".equals(fieldName)) {
                    deserializedReputation.cidr = reader.getString();
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedReputation.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedReputation.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("listUpdatedAt".equals(fieldName)) {
                    deserializedReputation.listUpdatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recent".equals(fieldName)) {
                    deserializedReputation.recent = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedReputation;
        });
    }
}
