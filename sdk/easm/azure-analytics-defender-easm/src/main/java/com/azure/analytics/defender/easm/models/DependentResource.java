// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The DependentResource model.
 */
@Immutable
public final class DependentResource implements JsonSerializable<DependentResource> {

    /*
     * The md5 property.
     */
    @Generated
    private String md5;

    /*
     * The responseBodySize property.
     */
    @Generated
    private Long responseBodySize;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The firstSeenCrawlGuid property.
     */
    @Generated
    private String firstSeenCrawlGuid;

    /*
     * The firstSeenPageGuid property.
     */
    @Generated
    private String firstSeenPageGuid;

    /*
     * The firstSeenResourceGuid property.
     */
    @Generated
    private String firstSeenResourceGuid;

    /*
     * The lastSeenCrawlGuid property.
     */
    @Generated
    private String lastSeenCrawlGuid;

    /*
     * The lastSeenPageGuid property.
     */
    @Generated
    private String lastSeenPageGuid;

    /*
     * The lastSeenResourceGuid property.
     */
    @Generated
    private String lastSeenResourceGuid;

    /*
     * The responseBodyMinhash property.
     */
    @Generated
    private List<Integer> responseBodyMinhash;

    /*
     * The contentType property.
     */
    @Generated
    private String contentType;

    /*
     * The sha256 property.
     */
    @Generated
    private String sha256;

    /*
     * The sha384 property.
     */
    @Generated
    private String sha384;

    /*
     * The sha512 property.
     */
    @Generated
    private String sha512;

    /*
     * The url property.
     */
    @Generated
    private String url;

    /*
     * The cached property.
     */
    @Generated
    private Boolean cached;

    /*
     * The sriChecks property.
     */
    @Generated
    private List<SubResourceIntegrityCheck> sriChecks;

    /*
     * The host property.
     */
    @Generated
    private String host;

    /*
     * The lastObservedViolation property.
     */
    @Generated
    private OffsetDateTime lastObservedViolation;

    /*
     * The lastObservedValidation property.
     */
    @Generated
    private OffsetDateTime lastObservedValidation;

    /*
     * The lastObservedActualSriHash property.
     */
    @Generated
    private String lastObservedActualSriHash;

    /*
     * The lastObservedExpectedSriHash property.
     */
    @Generated
    private String lastObservedExpectedSriHash;

    /**
     * Creates an instance of DependentResource class.
     */
    @Generated
    private DependentResource() {
    }

    /**
     * Get the md5 property: The md5 property.
     *
     * @return the md5 value.
     */
    @Generated
    public String getMd5() {
        return this.md5;
    }

    /**
     * Get the responseBodySize property: The responseBodySize property.
     *
     * @return the responseBodySize value.
     */
    @Generated
    public Long getResponseBodySize() {
        return this.responseBodySize;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the firstSeenCrawlGuid property: The firstSeenCrawlGuid property.
     *
     * @return the firstSeenCrawlGuid value.
     */
    @Generated
    public String getFirstSeenCrawlGuid() {
        return this.firstSeenCrawlGuid;
    }

    /**
     * Get the firstSeenPageGuid property: The firstSeenPageGuid property.
     *
     * @return the firstSeenPageGuid value.
     */
    @Generated
    public String getFirstSeenPageGuid() {
        return this.firstSeenPageGuid;
    }

    /**
     * Get the firstSeenResourceGuid property: The firstSeenResourceGuid property.
     *
     * @return the firstSeenResourceGuid value.
     */
    @Generated
    public String getFirstSeenResourceGuid() {
        return this.firstSeenResourceGuid;
    }

    /**
     * Get the lastSeenCrawlGuid property: The lastSeenCrawlGuid property.
     *
     * @return the lastSeenCrawlGuid value.
     */
    @Generated
    public String getLastSeenCrawlGuid() {
        return this.lastSeenCrawlGuid;
    }

    /**
     * Get the lastSeenPageGuid property: The lastSeenPageGuid property.
     *
     * @return the lastSeenPageGuid value.
     */
    @Generated
    public String getLastSeenPageGuid() {
        return this.lastSeenPageGuid;
    }

    /**
     * Get the lastSeenResourceGuid property: The lastSeenResourceGuid property.
     *
     * @return the lastSeenResourceGuid value.
     */
    @Generated
    public String getLastSeenResourceGuid() {
        return this.lastSeenResourceGuid;
    }

    /**
     * Get the responseBodyMinhash property: The responseBodyMinhash property.
     *
     * @return the responseBodyMinhash value.
     */
    @Generated
    public List<Integer> getResponseBodyMinhash() {
        return this.responseBodyMinhash;
    }

    /**
     * Get the contentType property: The contentType property.
     *
     * @return the contentType value.
     */
    @Generated
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Get the sha256 property: The sha256 property.
     *
     * @return the sha256 value.
     */
    @Generated
    public String getSha256() {
        return this.sha256;
    }

    /**
     * Get the sha384 property: The sha384 property.
     *
     * @return the sha384 value.
     */
    @Generated
    public String getSha384() {
        return this.sha384;
    }

    /**
     * Get the sha512 property: The sha512 property.
     *
     * @return the sha512 value.
     */
    @Generated
    public String getSha512() {
        return this.sha512;
    }

    /**
     * Get the url property: The url property.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the cached property: The cached property.
     *
     * @return the cached value.
     */
    @Generated
    public Boolean isCached() {
        return this.cached;
    }

    /**
     * Get the sriChecks property: The sriChecks property.
     *
     * @return the sriChecks value.
     */
    @Generated
    public List<SubResourceIntegrityCheck> getSriChecks() {
        return this.sriChecks;
    }

    /**
     * Get the host property: The host property.
     *
     * @return the host value.
     */
    @Generated
    public String getHost() {
        return this.host;
    }

    /**
     * Get the lastObservedViolation property: The lastObservedViolation property.
     *
     * @return the lastObservedViolation value.
     */
    @Generated
    public OffsetDateTime getLastObservedViolation() {
        return this.lastObservedViolation;
    }

    /**
     * Get the lastObservedValidation property: The lastObservedValidation property.
     *
     * @return the lastObservedValidation value.
     */
    @Generated
    public OffsetDateTime getLastObservedValidation() {
        return this.lastObservedValidation;
    }

    /**
     * Get the lastObservedActualSriHash property: The lastObservedActualSriHash property.
     *
     * @return the lastObservedActualSriHash value.
     */
    @Generated
    public String getLastObservedActualSriHash() {
        return this.lastObservedActualSriHash;
    }

    /**
     * Get the lastObservedExpectedSriHash property: The lastObservedExpectedSriHash property.
     *
     * @return the lastObservedExpectedSriHash value.
     */
    @Generated
    public String getLastObservedExpectedSriHash() {
        return this.lastObservedExpectedSriHash;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("md5", this.md5);
        jsonWriter.writeNumberField("responseBodySize", this.responseBodySize);
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("firstSeenCrawlGuid", this.firstSeenCrawlGuid);
        jsonWriter.writeStringField("firstSeenPageGuid", this.firstSeenPageGuid);
        jsonWriter.writeStringField("firstSeenResourceGuid", this.firstSeenResourceGuid);
        jsonWriter.writeStringField("lastSeenCrawlGuid", this.lastSeenCrawlGuid);
        jsonWriter.writeStringField("lastSeenPageGuid", this.lastSeenPageGuid);
        jsonWriter.writeStringField("lastSeenResourceGuid", this.lastSeenResourceGuid);
        jsonWriter.writeArrayField("responseBodyMinhash", this.responseBodyMinhash,
            (writer, element) -> writer.writeInt(element));
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeStringField("sha256", this.sha256);
        jsonWriter.writeStringField("sha384", this.sha384);
        jsonWriter.writeStringField("sha512", this.sha512);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeBooleanField("cached", this.cached);
        jsonWriter.writeArrayField("sriChecks", this.sriChecks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("lastObservedViolation",
            this.lastObservedViolation == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastObservedViolation));
        jsonWriter.writeStringField("lastObservedValidation",
            this.lastObservedValidation == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastObservedValidation));
        jsonWriter.writeStringField("lastObservedActualSriHash", this.lastObservedActualSriHash);
        jsonWriter.writeStringField("lastObservedExpectedSriHash", this.lastObservedExpectedSriHash);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DependentResource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DependentResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DependentResource.
     */
    @Generated
    public static DependentResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DependentResource deserializedDependentResource = new DependentResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("md5".equals(fieldName)) {
                    deserializedDependentResource.md5 = reader.getString();
                } else if ("responseBodySize".equals(fieldName)) {
                    deserializedDependentResource.responseBodySize = reader.getNullable(JsonReader::getLong);
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedDependentResource.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedDependentResource.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedDependentResource.count = reader.getNullable(JsonReader::getLong);
                } else if ("firstSeenCrawlGuid".equals(fieldName)) {
                    deserializedDependentResource.firstSeenCrawlGuid = reader.getString();
                } else if ("firstSeenPageGuid".equals(fieldName)) {
                    deserializedDependentResource.firstSeenPageGuid = reader.getString();
                } else if ("firstSeenResourceGuid".equals(fieldName)) {
                    deserializedDependentResource.firstSeenResourceGuid = reader.getString();
                } else if ("lastSeenCrawlGuid".equals(fieldName)) {
                    deserializedDependentResource.lastSeenCrawlGuid = reader.getString();
                } else if ("lastSeenPageGuid".equals(fieldName)) {
                    deserializedDependentResource.lastSeenPageGuid = reader.getString();
                } else if ("lastSeenResourceGuid".equals(fieldName)) {
                    deserializedDependentResource.lastSeenResourceGuid = reader.getString();
                } else if ("responseBodyMinhash".equals(fieldName)) {
                    List<Integer> responseBodyMinhash = reader.readArray(reader1 -> reader1.getInt());
                    deserializedDependentResource.responseBodyMinhash = responseBodyMinhash;
                } else if ("contentType".equals(fieldName)) {
                    deserializedDependentResource.contentType = reader.getString();
                } else if ("sha256".equals(fieldName)) {
                    deserializedDependentResource.sha256 = reader.getString();
                } else if ("sha384".equals(fieldName)) {
                    deserializedDependentResource.sha384 = reader.getString();
                } else if ("sha512".equals(fieldName)) {
                    deserializedDependentResource.sha512 = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedDependentResource.url = reader.getString();
                } else if ("cached".equals(fieldName)) {
                    deserializedDependentResource.cached = reader.getNullable(JsonReader::getBoolean);
                } else if ("sriChecks".equals(fieldName)) {
                    List<SubResourceIntegrityCheck> sriChecks
                        = reader.readArray(reader1 -> SubResourceIntegrityCheck.fromJson(reader1));
                    deserializedDependentResource.sriChecks = sriChecks;
                } else if ("host".equals(fieldName)) {
                    deserializedDependentResource.host = reader.getString();
                } else if ("lastObservedViolation".equals(fieldName)) {
                    deserializedDependentResource.lastObservedViolation = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastObservedValidation".equals(fieldName)) {
                    deserializedDependentResource.lastObservedValidation = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastObservedActualSriHash".equals(fieldName)) {
                    deserializedDependentResource.lastObservedActualSriHash = reader.getString();
                } else if ("lastObservedExpectedSriHash".equals(fieldName)) {
                    deserializedDependentResource.lastObservedExpectedSriHash = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDependentResource;
        });
    }
}
