// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result response for the observation.
 */
@Immutable
public final class ObservationResult implements JsonSerializable<ObservationResult> {
    /*
     * The name of the observation.
     */
    @Generated
    private final String name;

    /*
     * The list of applicable types.
     */
    @Generated
    private final List<ObservationType> types;

    /*
     * The priority of the observation.
     */
    @Generated
    private final ObservationPriority priority;

    /*
     * The CVSS v2 score.
     */
    @Generated
    private final double cvssScoreV2;

    /*
     * The CVSS v3 score.
     */
    @Generated
    private final double cvssScoreV3;

    /**
     * Creates an instance of ObservationResult class.
     * 
     * @param name the name value to set.
     * @param types the types value to set.
     * @param priority the priority value to set.
     * @param cvssScoreV2 the cvssScoreV2 value to set.
     * @param cvssScoreV3 the cvssScoreV3 value to set.
     */
    @Generated
    private ObservationResult(String name, List<ObservationType> types, ObservationPriority priority,
        double cvssScoreV2, double cvssScoreV3) {
        this.name = name;
        this.types = types;
        this.priority = priority;
        this.cvssScoreV2 = cvssScoreV2;
        this.cvssScoreV3 = cvssScoreV3;
    }

    /**
     * Get the name property: The name of the observation.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the types property: The list of applicable types.
     * 
     * @return the types value.
     */
    @Generated
    public List<ObservationType> getTypes() {
        return this.types;
    }

    /**
     * Get the priority property: The priority of the observation.
     * 
     * @return the priority value.
     */
    @Generated
    public ObservationPriority getPriority() {
        return this.priority;
    }

    /**
     * Get the cvssScoreV2 property: The CVSS v2 score.
     * 
     * @return the cvssScoreV2 value.
     */
    @Generated
    public double getCvssScoreV2() {
        return this.cvssScoreV2;
    }

    /**
     * Get the cvssScoreV3 property: The CVSS v3 score.
     * 
     * @return the cvssScoreV3 value.
     */
    @Generated
    public double getCvssScoreV3() {
        return this.cvssScoreV3;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("types", this.types,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("priority", this.priority == null ? null : this.priority.toString());
        jsonWriter.writeDoubleField("cvssScoreV2", this.cvssScoreV2);
        jsonWriter.writeDoubleField("cvssScoreV3", this.cvssScoreV3);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ObservationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ObservationResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ObservationResult.
     */
    @Generated
    public static ObservationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            List<ObservationType> types = null;
            ObservationPriority priority = null;
            double cvssScoreV2 = 0.0;
            double cvssScoreV3 = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("types".equals(fieldName)) {
                    types = reader.readArray(reader1 -> ObservationType.fromString(reader1.getString()));
                } else if ("priority".equals(fieldName)) {
                    priority = ObservationPriority.fromString(reader.getString());
                } else if ("cvssScoreV2".equals(fieldName)) {
                    cvssScoreV2 = reader.getDouble();
                } else if ("cvssScoreV3".equals(fieldName)) {
                    cvssScoreV3 = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new ObservationResult(name, types, priority, cvssScoreV2, cvssScoreV3);
        });
    }
}
