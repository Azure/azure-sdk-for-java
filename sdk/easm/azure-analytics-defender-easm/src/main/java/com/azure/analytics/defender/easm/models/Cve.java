// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Cve model.
 */
@Immutable
public final class Cve implements JsonSerializable<Cve> {

    /*
     * The name property.
     */
    @Generated
    private String name;

    /*
     * The cweId property.
     */
    @Generated
    private String cweId;

    /*
     * The cvssScore property.
     */
    @Generated
    private Double cvssScore;

    /*
     * The cvss3Summary property.
     */
    @Generated
    private Cvss3Summary cvss3Summary;

    /**
     * Creates an instance of Cve class.
     */
    @Generated
    private Cve() {
    }

    /**
     * Get the name property: The name property.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the cweId property: The cweId property.
     *
     * @return the cweId value.
     */
    @Generated
    public String getCweId() {
        return this.cweId;
    }

    /**
     * Get the cvssScore property: The cvssScore property.
     *
     * @return the cvssScore value.
     */
    @Generated
    public Double getCvssScore() {
        return this.cvssScore;
    }

    /**
     * Get the cvss3Summary property: The cvss3Summary property.
     *
     * @return the cvss3Summary value.
     */
    @Generated
    public Cvss3Summary getCvss3Summary() {
        return this.cvss3Summary;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("cweId", this.cweId);
        jsonWriter.writeNumberField("cvssScore", this.cvssScore);
        jsonWriter.writeJsonField("cvss3Summary", this.cvss3Summary);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cve from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cve if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Cve.
     */
    @Generated
    public static Cve fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cve deserializedCve = new Cve();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedCve.name = reader.getString();
                } else if ("cweId".equals(fieldName)) {
                    deserializedCve.cweId = reader.getString();
                } else if ("cvssScore".equals(fieldName)) {
                    deserializedCve.cvssScore = reader.getNullable(JsonReader::getDouble);
                } else if ("cvss3Summary".equals(fieldName)) {
                    deserializedCve.cvss3Summary = Cvss3Summary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedCve;
        });
    }
}
