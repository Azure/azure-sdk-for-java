// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * A snapshot of assets captured daily for the provided metric. Asset details only contain primary properties. Detailed
 * asset data can be retrieved from the asset endpoints.
 */
@Immutable
public final class ReportAssetSnapshotResult implements JsonSerializable<ReportAssetSnapshotResult> {

    /*
     * The name of the metric.
     */
    @Generated
    private String displayName;

    /*
     * The unique metric name.
     */
    @Generated
    private String metric;

    /*
     * The customer label that was filtered on, if one was provided.
     */
    @Generated
    private String labelName;

    /*
     * The last time this asset data was updated on this metric.
     */
    @Generated
    private OffsetDateTime updatedAt;

    /*
     * A description of what the metric represents.
     */
    @Generated
    private String description;

    /*
     * The page of assets that match the provided metric.
     */
    @Generated
    private AssetPageResult assets;

    /**
     * Creates an instance of ReportAssetSnapshotResult class.
     */
    @Generated
    private ReportAssetSnapshotResult() {
    }

    /**
     * Get the displayName property: The name of the metric.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the metric property: The unique metric name.
     *
     * @return the metric value.
     */
    @Generated
    public String getMetric() {
        return this.metric;
    }

    /**
     * Get the labelName property: The customer label that was filtered on, if one was provided.
     *
     * @return the labelName value.
     */
    @Generated
    public String getLabelName() {
        return this.labelName;
    }

    /**
     * Get the updatedAt property: The last time this asset data was updated on this metric.
     *
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the description property: A description of what the metric represents.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the assets property: The page of assets that match the provided metric.
     *
     * @return the assets value.
     */
    @Generated
    public AssetPageResult getAssets() {
        return this.assets;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("metric", this.metric);
        jsonWriter.writeStringField("labelName", this.labelName);
        jsonWriter.writeStringField("updatedAt",
            this.updatedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedAt));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("assets", this.assets);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReportAssetSnapshotResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReportAssetSnapshotResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReportAssetSnapshotResult.
     */
    @Generated
    public static ReportAssetSnapshotResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReportAssetSnapshotResult deserializedReportAssetSnapshotResult = new ReportAssetSnapshotResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("displayName".equals(fieldName)) {
                    deserializedReportAssetSnapshotResult.displayName = reader.getString();
                } else if ("metric".equals(fieldName)) {
                    deserializedReportAssetSnapshotResult.metric = reader.getString();
                } else if ("labelName".equals(fieldName)) {
                    deserializedReportAssetSnapshotResult.labelName = reader.getString();
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedReportAssetSnapshotResult.updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("description".equals(fieldName)) {
                    deserializedReportAssetSnapshotResult.description = reader.getString();
                } else if ("assets".equals(fieldName)) {
                    deserializedReportAssetSnapshotResult.assets = AssetPageResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedReportAssetSnapshotResult;
        });
    }
}
