// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The AsAsset model.
 */
@Immutable
public final class AsAsset extends InventoryAsset {

    /*
     * The asn property.
     */
    @Generated
    private Long asn;

    /*
     * The asNames property.
     */
    @Generated
    private List<ObservedString> asNames;

    /*
     * The orgNames property.
     */
    @Generated
    private List<ObservedString> orgNames;

    /*
     * The orgIds property.
     */
    @Generated
    private List<ObservedString> orgIds;

    /*
     * The countries property.
     */
    @Generated
    private List<ObservedString> countries;

    /*
     * The registries property.
     */
    @Generated
    private List<ObservedString> registries;

    /*
     * The sources property.
     */
    @Generated
    private List<Source> sources;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The registrarCreatedAt property.
     */
    @Generated
    private List<ObservedLong> registrarCreatedAt;

    /*
     * The registrarUpdatedAt property.
     */
    @Generated
    private List<ObservedLong> registrarUpdatedAt;

    /*
     * The registrantContacts property.
     */
    @Generated
    private List<ObservedString> registrantContacts;

    /*
     * The adminContacts property.
     */
    @Generated
    private List<ObservedString> adminContacts;

    /*
     * The technicalContacts property.
     */
    @Generated
    private List<ObservedString> technicalContacts;

    /*
     * The registrarNames property.
     */
    @Generated
    private List<ObservedString> registrarNames;

    /*
     * The registrantNames property.
     */
    @Generated
    private List<ObservedString> registrantNames;

    /*
     * The adminNames property.
     */
    @Generated
    private List<ObservedString> adminNames;

    /*
     * The technicalNames property.
     */
    @Generated
    private List<ObservedString> technicalNames;

    /*
     * The adminOrgs property.
     */
    @Generated
    private List<ObservedString> adminOrgs;

    /*
     * The technicalOrgs property.
     */
    @Generated
    private List<ObservedString> technicalOrgs;

    /*
     * The registrantPhones property.
     */
    @Generated
    private List<ObservedString> registrantPhones;

    /*
     * The adminPhones property.
     */
    @Generated
    private List<ObservedString> adminPhones;

    /*
     * The technicalPhones property.
     */
    @Generated
    private List<ObservedString> technicalPhones;

    /*
     * The detailedFromWhoisAt property.
     */
    @Generated
    private OffsetDateTime detailedFromWhoisAt;

    /**
     * Creates an instance of AsAsset class.
     */
    @Generated
    private AsAsset() {
    }

    /**
     * Get the asn property: The asn property.
     *
     * @return the asn value.
     */
    @Generated
    public Long getAsn() {
        return this.asn;
    }

    /**
     * Get the asNames property: The asNames property.
     *
     * @return the asNames value.
     */
    @Generated
    public List<ObservedString> getAsNames() {
        return this.asNames;
    }

    /**
     * Get the orgNames property: The orgNames property.
     *
     * @return the orgNames value.
     */
    @Generated
    public List<ObservedString> getOrgNames() {
        return this.orgNames;
    }

    /**
     * Get the orgIds property: The orgIds property.
     *
     * @return the orgIds value.
     */
    @Generated
    public List<ObservedString> getOrgIds() {
        return this.orgIds;
    }

    /**
     * Get the countries property: The countries property.
     *
     * @return the countries value.
     */
    @Generated
    public List<ObservedString> getCountries() {
        return this.countries;
    }

    /**
     * Get the registries property: The registries property.
     *
     * @return the registries value.
     */
    @Generated
    public List<ObservedString> getRegistries() {
        return this.registries;
    }

    /**
     * Get the sources property: The sources property.
     *
     * @return the sources value.
     */
    @Generated
    public List<Source> getSources() {
        return this.sources;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the registrarCreatedAt property: The registrarCreatedAt property.
     *
     * @return the registrarCreatedAt value.
     */
    @Generated
    public List<ObservedLong> getRegistrarCreatedAt() {
        return this.registrarCreatedAt;
    }

    /**
     * Get the registrarUpdatedAt property: The registrarUpdatedAt property.
     *
     * @return the registrarUpdatedAt value.
     */
    @Generated
    public List<ObservedLong> getRegistrarUpdatedAt() {
        return this.registrarUpdatedAt;
    }

    /**
     * Get the registrantContacts property: The registrantContacts property.
     *
     * @return the registrantContacts value.
     */
    @Generated
    public List<ObservedString> getRegistrantContacts() {
        return this.registrantContacts;
    }

    /**
     * Get the adminContacts property: The adminContacts property.
     *
     * @return the adminContacts value.
     */
    @Generated
    public List<ObservedString> getAdminContacts() {
        return this.adminContacts;
    }

    /**
     * Get the technicalContacts property: The technicalContacts property.
     *
     * @return the technicalContacts value.
     */
    @Generated
    public List<ObservedString> getTechnicalContacts() {
        return this.technicalContacts;
    }

    /**
     * Get the registrarNames property: The registrarNames property.
     *
     * @return the registrarNames value.
     */
    @Generated
    public List<ObservedString> getRegistrarNames() {
        return this.registrarNames;
    }

    /**
     * Get the registrantNames property: The registrantNames property.
     *
     * @return the registrantNames value.
     */
    @Generated
    public List<ObservedString> getRegistrantNames() {
        return this.registrantNames;
    }

    /**
     * Get the adminNames property: The adminNames property.
     *
     * @return the adminNames value.
     */
    @Generated
    public List<ObservedString> getAdminNames() {
        return this.adminNames;
    }

    /**
     * Get the technicalNames property: The technicalNames property.
     *
     * @return the technicalNames value.
     */
    @Generated
    public List<ObservedString> getTechnicalNames() {
        return this.technicalNames;
    }

    /**
     * Get the adminOrgs property: The adminOrgs property.
     *
     * @return the adminOrgs value.
     */
    @Generated
    public List<ObservedString> getAdminOrgs() {
        return this.adminOrgs;
    }

    /**
     * Get the technicalOrgs property: The technicalOrgs property.
     *
     * @return the technicalOrgs value.
     */
    @Generated
    public List<ObservedString> getTechnicalOrgs() {
        return this.technicalOrgs;
    }

    /**
     * Get the registrantPhones property: The registrantPhones property.
     *
     * @return the registrantPhones value.
     */
    @Generated
    public List<ObservedString> getRegistrantPhones() {
        return this.registrantPhones;
    }

    /**
     * Get the adminPhones property: The adminPhones property.
     *
     * @return the adminPhones value.
     */
    @Generated
    public List<ObservedString> getAdminPhones() {
        return this.adminPhones;
    }

    /**
     * Get the technicalPhones property: The technicalPhones property.
     *
     * @return the technicalPhones value.
     */
    @Generated
    public List<ObservedString> getTechnicalPhones() {
        return this.technicalPhones;
    }

    /**
     * Get the detailedFromWhoisAt property: The detailedFromWhoisAt property.
     *
     * @return the detailedFromWhoisAt value.
     */
    @Generated
    public OffsetDateTime getDetailedFromWhoisAt() {
        return this.detailedFromWhoisAt;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("asn", this.asn);
        jsonWriter.writeArrayField("asNames", this.asNames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("orgNames", this.orgNames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("orgIds", this.orgIds, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("countries", this.countries, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registries", this.registries, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeArrayField("registrarCreatedAt", this.registrarCreatedAt,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrarUpdatedAt", this.registrarUpdatedAt,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrantContacts", this.registrantContacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminContacts", this.adminContacts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalContacts", this.technicalContacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrarNames", this.registrarNames,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrantNames", this.registrantNames,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminNames", this.adminNames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalNames", this.technicalNames,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminOrgs", this.adminOrgs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalOrgs", this.technicalOrgs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registrantPhones", this.registrantPhones,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("adminPhones", this.adminPhones, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("technicalPhones", this.technicalPhones,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("detailedFromWhoisAt",
            this.detailedFromWhoisAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.detailedFromWhoisAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AsAsset from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AsAsset if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the AsAsset.
     */
    @Generated
    public static AsAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AsAsset deserializedAsAsset = new AsAsset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("asn".equals(fieldName)) {
                    deserializedAsAsset.asn = reader.getNullable(JsonReader::getLong);
                } else if ("asNames".equals(fieldName)) {
                    List<ObservedString> asNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.asNames = asNames;
                } else if ("orgNames".equals(fieldName)) {
                    List<ObservedString> orgNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.orgNames = orgNames;
                } else if ("orgIds".equals(fieldName)) {
                    List<ObservedString> orgIds = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.orgIds = orgIds;
                } else if ("countries".equals(fieldName)) {
                    List<ObservedString> countries = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.countries = countries;
                } else if ("registries".equals(fieldName)) {
                    List<ObservedString> registries = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.registries = registries;
                } else if ("sources".equals(fieldName)) {
                    List<Source> sources = reader.readArray(reader1 -> Source.fromJson(reader1));
                    deserializedAsAsset.sources = sources;
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedAsAsset.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedAsAsset.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedAsAsset.count = reader.getNullable(JsonReader::getLong);
                } else if ("registrarCreatedAt".equals(fieldName)) {
                    List<ObservedLong> registrarCreatedAt = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedAsAsset.registrarCreatedAt = registrarCreatedAt;
                } else if ("registrarUpdatedAt".equals(fieldName)) {
                    List<ObservedLong> registrarUpdatedAt = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedAsAsset.registrarUpdatedAt = registrarUpdatedAt;
                } else if ("registrantContacts".equals(fieldName)) {
                    List<ObservedString> registrantContacts
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.registrantContacts = registrantContacts;
                } else if ("adminContacts".equals(fieldName)) {
                    List<ObservedString> adminContacts = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.adminContacts = adminContacts;
                } else if ("technicalContacts".equals(fieldName)) {
                    List<ObservedString> technicalContacts
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.technicalContacts = technicalContacts;
                } else if ("registrarNames".equals(fieldName)) {
                    List<ObservedString> registrarNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.registrarNames = registrarNames;
                } else if ("registrantNames".equals(fieldName)) {
                    List<ObservedString> registrantNames
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.registrantNames = registrantNames;
                } else if ("adminNames".equals(fieldName)) {
                    List<ObservedString> adminNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.adminNames = adminNames;
                } else if ("technicalNames".equals(fieldName)) {
                    List<ObservedString> technicalNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.technicalNames = technicalNames;
                } else if ("adminOrgs".equals(fieldName)) {
                    List<ObservedString> adminOrgs = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.adminOrgs = adminOrgs;
                } else if ("technicalOrgs".equals(fieldName)) {
                    List<ObservedString> technicalOrgs = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.technicalOrgs = technicalOrgs;
                } else if ("registrantPhones".equals(fieldName)) {
                    List<ObservedString> registrantPhones
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.registrantPhones = registrantPhones;
                } else if ("adminPhones".equals(fieldName)) {
                    List<ObservedString> adminPhones = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.adminPhones = adminPhones;
                } else if ("technicalPhones".equals(fieldName)) {
                    List<ObservedString> technicalPhones
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedAsAsset.technicalPhones = technicalPhones;
                } else if ("detailedFromWhoisAt".equals(fieldName)) {
                    deserializedAsAsset.detailedFromWhoisAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAsAsset;
        });
    }
}
