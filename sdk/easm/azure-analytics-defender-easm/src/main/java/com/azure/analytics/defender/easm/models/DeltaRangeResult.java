// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contains added, removed, and difference values for the whole range either 7 or 30 days.
 */
@Immutable
public final class DeltaRangeResult implements JsonSerializable<DeltaRangeResult> {
    /*
     * The range of dates requested
     */
    @Generated
    private final long range;

    /*
     * The total amount of assets removed over a date range
     */
    @Generated
    private final long removed;

    /*
     * The total amount of assets added over a date range
     */
    @Generated
    private final long added;

    /*
     * The total amount of assets changed removed over a date range
     */
    @Generated
    private final long difference;

    /*
     * A list of summary changes per asset kind
     */
    @Generated
    private final List<DeltaTypeResponse> kindSummaries;

    /**
     * Creates an instance of DeltaRangeResult class.
     * 
     * @param range the range value to set.
     * @param removed the removed value to set.
     * @param added the added value to set.
     * @param difference the difference value to set.
     * @param kindSummaries the kindSummaries value to set.
     */
    @Generated
    private DeltaRangeResult(long range, long removed, long added, long difference,
        List<DeltaTypeResponse> kindSummaries) {
        this.range = range;
        this.removed = removed;
        this.added = added;
        this.difference = difference;
        this.kindSummaries = kindSummaries;
    }

    /**
     * Get the range property: The range of dates requested.
     * 
     * @return the range value.
     */
    @Generated
    public long getRange() {
        return this.range;
    }

    /**
     * Get the removed property: The total amount of assets removed over a date range.
     * 
     * @return the removed value.
     */
    @Generated
    public long getRemoved() {
        return this.removed;
    }

    /**
     * Get the added property: The total amount of assets added over a date range.
     * 
     * @return the added value.
     */
    @Generated
    public long getAdded() {
        return this.added;
    }

    /**
     * Get the difference property: The total amount of assets changed removed over a date range.
     * 
     * @return the difference value.
     */
    @Generated
    public long getDifference() {
        return this.difference;
    }

    /**
     * Get the kindSummaries property: A list of summary changes per asset kind.
     * 
     * @return the kindSummaries value.
     */
    @Generated
    public List<DeltaTypeResponse> getKindSummaries() {
        return this.kindSummaries;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("range", this.range);
        jsonWriter.writeLongField("removed", this.removed);
        jsonWriter.writeLongField("added", this.added);
        jsonWriter.writeLongField("difference", this.difference);
        jsonWriter.writeArrayField("kindSummaries", this.kindSummaries, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaRangeResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaRangeResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeltaRangeResult.
     */
    @Generated
    public static DeltaRangeResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long range = 0L;
            long removed = 0L;
            long added = 0L;
            long difference = 0L;
            List<DeltaTypeResponse> kindSummaries = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("range".equals(fieldName)) {
                    range = reader.getLong();
                } else if ("removed".equals(fieldName)) {
                    removed = reader.getLong();
                } else if ("added".equals(fieldName)) {
                    added = reader.getLong();
                } else if ("difference".equals(fieldName)) {
                    difference = reader.getLong();
                } else if ("kindSummaries".equals(fieldName)) {
                    kindSummaries = reader.readArray(reader1 -> DeltaTypeResponse.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new DeltaRangeResult(range, removed, added, difference, kindSummaries);
        });
    }
}
