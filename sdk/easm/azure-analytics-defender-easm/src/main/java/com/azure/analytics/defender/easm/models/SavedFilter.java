// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SavedFilter model.
 */
@Immutable
public final class SavedFilter implements JsonSerializable<SavedFilter> {

    /*
     * The system generated unique id for the resource.
     */
    @Generated
    private String id;

    /*
     * The caller provided unique name for the resource.
     */
    @Generated
    private String name;

    /*
     * The name that can be used for display purposes.
     */
    @Generated
    private String displayName;

    /*
     * The filter property.
     */
    @Generated
    private String filter;

    /*
     * The description property.
     */
    @Generated
    private String description;

    /**
     * Creates an instance of SavedFilter class.
     */
    @Generated
    private SavedFilter() {
    }

    /**
     * Get the id property: The system generated unique id for the resource.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The caller provided unique name for the resource.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the displayName property: The name that can be used for display purposes.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the filter property: The filter property.
     *
     * @return the filter value.
     */
    @Generated
    public String getFilter() {
        return this.filter;
    }

    /**
     * Get the description property: The description property.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("filter", this.filter);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SavedFilter from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SavedFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SavedFilter.
     */
    @Generated
    public static SavedFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String id = null;
            String displayName = null;
            String filter = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("filter".equals(fieldName)) {
                    filter = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            SavedFilter deserializedSavedFilter = new SavedFilter();
            deserializedSavedFilter.name = name;
            deserializedSavedFilter.id = id;
            deserializedSavedFilter.displayName = displayName;
            deserializedSavedFilter.filter = filter;
            deserializedSavedFilter.description = description;
            return deserializedSavedFilter;
        });
    }
}
