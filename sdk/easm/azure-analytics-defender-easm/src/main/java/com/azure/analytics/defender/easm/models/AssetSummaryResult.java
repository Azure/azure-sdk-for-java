// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The collection of asset summaries.
 */
@Immutable
public final class AssetSummaryResult implements JsonSerializable<AssetSummaryResult> {

    /*
     * The name of the summary response. Depending on the request time this will either be the asset filter, risk
     * category, or risk metric.
     */
    @Generated
    private String displayName;

    /*
     * The description of the summary response. Filters don't have a description.
     */
    @Generated
    private String description;

    /*
     * The last time risk categories or risk metrics were captured. Set to the current time for asset filter requests,
     * which always pull the live asset data.
     */
    @Generated
    private OffsetDateTime updatedAt;

    /*
     * If the request is for a metric category, this will contain the requested unique category name.
     */
    @Generated
    private String metricCategory;

    /*
     * If the request is for a metric, this will contain the requested unique metric name.
     */
    @Generated
    private String metric;

    /*
     * If the request is for an asset filter, this will contain the corresponding filter.
     */
    @Generated
    private String filter;

    /*
     * An optional label used to filter requests results.
     */
    @Generated
    private String labelName;

    /*
     * The count of assets matching the request parameters.
     */
    @Generated
    private Long count;

    /*
     * The link to the corresponding asset details.
     */
    @Generated
    private String link;

    /*
     * The corresponding child entities. For metric categories this will contain metrics. For filters with groupBy and
     * segmentBy this will contain facets.
     */
    @Generated
    private List<AssetSummaryResult> children;

    /**
     * Creates an instance of AssetSummaryResult class.
     */
    @Generated
    private AssetSummaryResult() {
    }

    /**
     * Get the displayName property: The name of the summary response. Depending on the request time this will either be
     * the asset filter, risk category, or risk metric.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the description property: The description of the summary response. Filters don't have a description.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the updatedAt property: The last time risk categories or risk metrics were captured. Set to the current time
     * for asset filter requests, which always pull the live asset data.
     *
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the metricCategory property: If the request is for a metric category, this will contain the requested unique
     * category name.
     *
     * @return the metricCategory value.
     */
    @Generated
    public String getMetricCategory() {
        return this.metricCategory;
    }

    /**
     * Get the metric property: If the request is for a metric, this will contain the requested unique metric name.
     *
     * @return the metric value.
     */
    @Generated
    public String getMetric() {
        return this.metric;
    }

    /**
     * Get the filter property: If the request is for an asset filter, this will contain the corresponding filter.
     *
     * @return the filter value.
     */
    @Generated
    public String getFilter() {
        return this.filter;
    }

    /**
     * Get the labelName property: An optional label used to filter requests results.
     *
     * @return the labelName value.
     */
    @Generated
    public String getLabelName() {
        return this.labelName;
    }

    /**
     * Get the count property: The count of assets matching the request parameters.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the link property: The link to the corresponding asset details.
     *
     * @return the link value.
     */
    @Generated
    public String getLink() {
        return this.link;
    }

    /**
     * Get the children property: The corresponding child entities. For metric categories this will contain metrics. For
     * filters with groupBy and segmentBy this will contain facets.
     *
     * @return the children value.
     */
    @Generated
    public List<AssetSummaryResult> getChildren() {
        return this.children;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("updatedAt",
            this.updatedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedAt));
        jsonWriter.writeStringField("metricCategory", this.metricCategory);
        jsonWriter.writeStringField("metric", this.metric);
        jsonWriter.writeStringField("filter", this.filter);
        jsonWriter.writeStringField("labelName", this.labelName);
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("link", this.link);
        jsonWriter.writeArrayField("children", this.children, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetSummaryResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetSummaryResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssetSummaryResult.
     */
    @Generated
    public static AssetSummaryResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetSummaryResult deserializedAssetSummaryResult = new AssetSummaryResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("displayName".equals(fieldName)) {
                    deserializedAssetSummaryResult.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAssetSummaryResult.description = reader.getString();
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedAssetSummaryResult.updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("metricCategory".equals(fieldName)) {
                    deserializedAssetSummaryResult.metricCategory = reader.getString();
                } else if ("metric".equals(fieldName)) {
                    deserializedAssetSummaryResult.metric = reader.getString();
                } else if ("filter".equals(fieldName)) {
                    deserializedAssetSummaryResult.filter = reader.getString();
                } else if ("labelName".equals(fieldName)) {
                    deserializedAssetSummaryResult.labelName = reader.getString();
                } else if ("count".equals(fieldName)) {
                    deserializedAssetSummaryResult.count = reader.getNullable(JsonReader::getLong);
                } else if ("link".equals(fieldName)) {
                    deserializedAssetSummaryResult.link = reader.getString();
                } else if ("children".equals(fieldName)) {
                    List<AssetSummaryResult> children
                        = reader.readArray(reader1 -> AssetSummaryResult.fromJson(reader1));
                    deserializedAssetSummaryResult.children = children;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAssetSummaryResult;
        });
    }
}
