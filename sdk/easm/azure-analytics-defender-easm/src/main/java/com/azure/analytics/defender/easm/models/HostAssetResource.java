// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The HostAssetResource model.
 */
@Immutable
public final class HostAssetResource extends AssetResource {

    /*
     * asset
     */
    @Generated
    private final HostAsset asset;

    /**
     * Creates an instance of HostAssetResource class.
     *
     * @param asset the asset value to set.
     */
    @Generated
    private HostAssetResource(HostAsset asset) {
        this.asset = asset;
        this.kind = "host";
    }

    /**
     * Get the asset property: asset.
     *
     * @return the asset value.
     */
    @Generated
    public HostAsset getAsset() {
        return this.asset;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        toJsonShared(jsonWriter);
        jsonWriter.writeJsonField("asset", this.asset);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostAssetResource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostAssetResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HostAssetResource.
     */
    @Generated
    public static HostAssetResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            String displayName = null;
            String uuid = null;
            OffsetDateTime createdDate = null;
            OffsetDateTime updatedDate = null;
            AssetState state = null;
            String externalId = null;
            List<String> labels = null;
            Boolean wildcard = null;
            String discoGroupName = null;
            List<AuditTrailItem> auditTrail = null;
            String reason = null;
            HostAsset asset = null;
            String kind = "host";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    uuid = reader.getString();
                } else if ("createdDate".equals(fieldName)) {
                    createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedDate".equals(fieldName)) {
                    updatedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    state = AssetState.fromString(reader.getString());
                } else if ("externalId".equals(fieldName)) {
                    externalId = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    labels = reader.readArray(reader1 -> reader1.getString());
                } else if ("wildcard".equals(fieldName)) {
                    wildcard = reader.getNullable(JsonReader::getBoolean);
                } else if ("discoGroupName".equals(fieldName)) {
                    discoGroupName = reader.getString();
                } else if ("auditTrail".equals(fieldName)) {
                    auditTrail = reader.readArray(reader1 -> AuditTrailItem.fromJson(reader1));
                } else if ("reason".equals(fieldName)) {
                    reason = reader.getString();
                } else if ("asset".equals(fieldName)) {
                    asset = HostAsset.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            HostAssetResource deserializedHostAssetResource = new HostAssetResource(asset);
            deserializedHostAssetResource.setId(id);
            deserializedHostAssetResource.name = name;
            deserializedHostAssetResource.displayName = displayName;
            deserializedHostAssetResource.uuid = uuid;
            deserializedHostAssetResource.createdDate = createdDate;
            deserializedHostAssetResource.updatedDate = updatedDate;
            deserializedHostAssetResource.state = state;
            deserializedHostAssetResource.externalId = externalId;
            deserializedHostAssetResource.labels = labels;
            deserializedHostAssetResource.wildcard = wildcard;
            deserializedHostAssetResource.discoGroupName = discoGroupName;
            deserializedHostAssetResource.auditTrail = auditTrail;
            deserializedHostAssetResource.reason = reason;
            deserializedHostAssetResource.kind = kind;
            return deserializedHostAssetResource;
        });
    }
}
