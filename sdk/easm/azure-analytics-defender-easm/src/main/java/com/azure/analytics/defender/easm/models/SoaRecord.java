// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The SoaRecord model.
 */
@Immutable
public final class SoaRecord implements JsonSerializable<SoaRecord> {

    /*
     * The nameServer property.
     */
    @Generated
    private String nameServer;

    /*
     * The email property.
     */
    @Generated
    private String email;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The serialNumber property.
     */
    @Generated
    private Long serialNumber;

    /*
     * The recent property.
     */
    @Generated
    private Boolean recent;

    /**
     * Creates an instance of SoaRecord class.
     */
    @Generated
    private SoaRecord() {
    }

    /**
     * Get the nameServer property: The nameServer property.
     *
     * @return the nameServer value.
     */
    @Generated
    public String getNameServer() {
        return this.nameServer;
    }

    /**
     * Get the email property: The email property.
     *
     * @return the email value.
     */
    @Generated
    public String getEmail() {
        return this.email;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the serialNumber property: The serialNumber property.
     *
     * @return the serialNumber value.
     */
    @Generated
    public Long getSerialNumber() {
        return this.serialNumber;
    }

    /**
     * Get the recent property: The recent property.
     *
     * @return the recent value.
     */
    @Generated
    public Boolean isRecent() {
        return this.recent;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nameServer", this.nameServer);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeNumberField("serialNumber", this.serialNumber);
        jsonWriter.writeBooleanField("recent", this.recent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SoaRecord from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SoaRecord if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SoaRecord.
     */
    @Generated
    public static SoaRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SoaRecord deserializedSoaRecord = new SoaRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("nameServer".equals(fieldName)) {
                    deserializedSoaRecord.nameServer = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedSoaRecord.email = reader.getString();
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedSoaRecord.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedSoaRecord.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedSoaRecord.count = reader.getNullable(JsonReader::getLong);
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedSoaRecord.serialNumber = reader.getNullable(JsonReader::getLong);
                } else if ("recent".equals(fieldName)) {
                    deserializedSoaRecord.recent = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSoaRecord;
        });
    }
}
