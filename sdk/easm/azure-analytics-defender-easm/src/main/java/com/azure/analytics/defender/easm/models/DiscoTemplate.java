// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The items in the current page of results.
 */
@Immutable
public final class DiscoTemplate implements JsonSerializable<DiscoTemplate> {

    /*
     * The system generated unique id for the resource.
     */
    @Generated
    private String id;

    /*
     * The caller provided unique name for the resource.
     */
    @Generated
    private String name;

    /*
     * The name that can be used for display purposes.
     */
    @Generated
    private String displayName;

    /*
     * The name of the industry.
     */
    @Generated
    private String industry;

    /*
     * The name of the region.
     */
    @Generated
    private String region;

    /*
     * The country code.
     */
    @Generated
    private String countryCode;

    /*
     * The state code.
     */
    @Generated
    private String stateCode;

    /*
     * The name of the city.
     */
    @Generated
    private String city;

    /*
     * The list of disco template seeds.
     */
    @Generated
    private List<DiscoSource> seeds;

    /*
     * The list of disco template names.
     */
    @Generated
    private List<String> names;

    /**
     * Creates an instance of DiscoTemplate class.
     */
    @Generated
    private DiscoTemplate() {
    }

    /**
     * Get the id property: The system generated unique id for the resource.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The caller provided unique name for the resource.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the displayName property: The name that can be used for display purposes.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the industry property: The name of the industry.
     *
     * @return the industry value.
     */
    @Generated
    public String getIndustry() {
        return this.industry;
    }

    /**
     * Get the region property: The name of the region.
     *
     * @return the region value.
     */
    @Generated
    public String getRegion() {
        return this.region;
    }

    /**
     * Get the countryCode property: The country code.
     *
     * @return the countryCode value.
     */
    @Generated
    public String getCountryCode() {
        return this.countryCode;
    }

    /**
     * Get the stateCode property: The state code.
     *
     * @return the stateCode value.
     */
    @Generated
    public String getStateCode() {
        return this.stateCode;
    }

    /**
     * Get the city property: The name of the city.
     *
     * @return the city value.
     */
    @Generated
    public String getCity() {
        return this.city;
    }

    /**
     * Get the seeds property: The list of disco template seeds.
     *
     * @return the seeds value.
     */
    @Generated
    public List<DiscoSource> getSeeds() {
        return this.seeds;
    }

    /**
     * Get the names property: The list of disco template names.
     *
     * @return the names value.
     */
    @Generated
    public List<String> getNames() {
        return this.names;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("industry", this.industry);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("countryCode", this.countryCode);
        jsonWriter.writeStringField("stateCode", this.stateCode);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeArrayField("seeds", this.seeds, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("names", this.names, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoTemplate from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoTemplate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscoTemplate.
     */
    @Generated
    public static DiscoTemplate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            String displayName = null;
            String industry = null;
            String region = null;
            String countryCode = null;
            String stateCode = null;
            String city = null;
            List<DiscoSource> seeds = null;
            List<String> names = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("industry".equals(fieldName)) {
                    industry = reader.getString();
                } else if ("region".equals(fieldName)) {
                    region = reader.getString();
                } else if ("countryCode".equals(fieldName)) {
                    countryCode = reader.getString();
                } else if ("stateCode".equals(fieldName)) {
                    stateCode = reader.getString();
                } else if ("city".equals(fieldName)) {
                    city = reader.getString();
                } else if ("seeds".equals(fieldName)) {
                    seeds = reader.readArray(reader1 -> DiscoSource.fromJson(reader1));
                } else if ("names".equals(fieldName)) {
                    names = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            DiscoTemplate deserializedDiscoTemplate = new DiscoTemplate();
            deserializedDiscoTemplate.id = id;
            deserializedDiscoTemplate.name = name;
            deserializedDiscoTemplate.displayName = displayName;
            deserializedDiscoTemplate.industry = industry;
            deserializedDiscoTemplate.region = region;
            deserializedDiscoTemplate.countryCode = countryCode;
            deserializedDiscoTemplate.stateCode = stateCode;
            deserializedDiscoTemplate.city = city;
            deserializedDiscoTemplate.seeds = seeds;
            deserializedDiscoTemplate.names = names;
            return deserializedDiscoTemplate;
        });
    }
}
