// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm;

import com.azure.analytics.defender.easm.implementation.EasmClientImpl;
import com.azure.analytics.defender.easm.models.AssetChainRequest;
import com.azure.analytics.defender.easm.models.AssetChainSummaryResult;
import com.azure.analytics.defender.easm.models.AssetResource;
import com.azure.analytics.defender.easm.models.AssetsExportRequest;
import com.azure.analytics.defender.easm.models.AssetUpdateData;
import com.azure.analytics.defender.easm.models.CisaCveResult;
import com.azure.analytics.defender.easm.models.DataConnection;
import com.azure.analytics.defender.easm.models.DataConnectionData;
import com.azure.analytics.defender.easm.models.DeltaDetailsRequest;
import com.azure.analytics.defender.easm.models.DeltaResult;
import com.azure.analytics.defender.easm.models.DeltaSummaryRequest;
import com.azure.analytics.defender.easm.models.DeltaSummaryResult;
import com.azure.analytics.defender.easm.models.DiscoGroup;
import com.azure.analytics.defender.easm.models.DiscoGroupData;
import com.azure.analytics.defender.easm.models.DiscoRunResult;
import com.azure.analytics.defender.easm.models.DiscoTemplate;
import com.azure.analytics.defender.easm.models.ObservationPageResult;
import com.azure.analytics.defender.easm.models.ReportAssetSnapshotExportRequest;
import com.azure.analytics.defender.easm.models.ReportAssetSnapshotRequest;
import com.azure.analytics.defender.easm.models.ReportAssetSnapshotResult;
import com.azure.analytics.defender.easm.models.ReportAssetSummaryRequest;
import com.azure.analytics.defender.easm.models.ReportAssetSummaryResult;
import com.azure.analytics.defender.easm.models.ReportBillableAssetSummaryResult;
import com.azure.analytics.defender.easm.models.SavedFilter;
import com.azure.analytics.defender.easm.models.SavedFilterData;
import com.azure.analytics.defender.easm.models.Task;
import com.azure.analytics.defender.easm.models.ValidateResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous EasmClient type.
 */
@ServiceClient(builder = EasmClientBuilder.class)
public final class EasmClient {

    @Generated
    private final EasmClientImpl serviceClient;

    /**
     * Initializes an instance of EasmClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    EasmClient(EasmClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * <p>
     * <strong>Query Parameters</strong>
     *
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A list of expressions that specify the order of the returned resources.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * <tr>
     * <td>mark</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Specify this value instead of 'skip' to use cursor-based searching. Initial value is '*' and subsequent
     * values are returned in the response.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     uuid: String (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     wildcard: Boolean (Optional)
     *     discoGroupName: String (Optional)
     *     auditTrail (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *             reason: String (Optional)
     *         }
     *     ]
     *     reason: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AssetResource items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAssetResource(RequestOptions requestOptions) {
        return this.serviceClient.listAssetResource(requestOptions).mapPage(bodyItemValue -> cleanUp(bodyItemValue));
    }

    /**
     * Update labels on assets matching the provided filter.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): {
     *         String: boolean (Required)
     *     }
     *     transfers: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param filter An expression on the resource type that selects the resources to be returned.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateAssetsWithResponse(String filter, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.updateAssetsWithResponse(filter, body, requestOptions);
    }

    /**
     * Retrieve an asset by assetId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     kind: String (Required)
     *     id: String (Required)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     uuid: String (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     wildcard: Boolean (Optional)
     *     discoGroupName: String (Optional)
     *     auditTrail (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *             reason: String (Optional)
     *         }
     *     ]
     *     reason: String (Optional)
     * }
     * }</pre>
     *
     * @param assetId The system generated unique id for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the items in the current page of results along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssetResourceWithResponse(String assetId, RequestOptions requestOptions) {
        return this.serviceClient.getAssetResourceWithResponse(assetId, requestOptions);
    }

    /**
     * Retrieve a list of data connections.
     *
     * <p>
     * <strong>Query Parameters</strong>
     *
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataConnection items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDataConnection(RequestOptions requestOptions) {
        return this.serviceClient.listDataConnection(requestOptions).mapPage(bodyItemValue -> cleanUp(bodyItemValue));
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     kind: String (Required)
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validate result for validate action endpoints along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> validateDataConnectionWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.validateDataConnectionWithResponse(body, requestOptions);
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     kind: String (Required)
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataConnectionWithResponse(String dataConnectionName,
        RequestOptions requestOptions) {
        return this.serviceClient.getDataConnectionWithResponse(dataConnectionName, requestOptions);
    }

    /**
     * Create or replace a data connection with a given dataConnectionName.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     kind: String (Required)
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     kind: String (Required)
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceDataConnectionWithResponse(String dataConnectionName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceDataConnectionWithResponse(dataConnectionName, body, requestOptions);
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDataConnectionWithResponse(String dataConnectionName, RequestOptions requestOptions) {
        return this.serviceClient.deleteDataConnectionWithResponse(dataConnectionName, requestOptions);
    }

    /**
     * Validate a discovery group with a given groupName.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validate result for validate action endpoints along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> validateDiscoGroupWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.validateDiscoGroupWithResponse(body, requestOptions);
    }

    /**
     * Retrieve a discovery group with a given groupName.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Optional): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param groupName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDiscoGroupWithResponse(String groupName, RequestOptions requestOptions) {
        return this.serviceClient.getDiscoGroupWithResponse(groupName, requestOptions);
    }

    /**
     * Create a discovery group with a given groupName.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Optional): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param groupName The caller provided unique name for the resource.
     * @param createOrReplaceDiscoGroupRequest The createOrReplaceDiscoGroupRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceDiscoGroupWithResponse(String groupName,
        BinaryData createOrReplaceDiscoGroupRequest, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceDiscoGroupWithResponse(groupName, createOrReplaceDiscoGroupRequest,
            requestOptions);
    }

    /**
     * Run a discovery group with a given groupName.
     *
     * @param groupName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> runDiscoGroupWithResponse(String groupName, RequestOptions requestOptions) {
        return this.serviceClient.runDiscoGroupWithResponse(groupName, requestOptions);
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * <p>
     * <strong>Query Parameters</strong>
     *
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     submittedDate: OffsetDateTime (Optional)
     *     startedDate: OffsetDateTime (Optional)
     *     completedDate: OffsetDateTime (Optional)
     *     tier: String (Optional)
     *     state: String(pending/running/completed/failed) (Optional)
     *     totalAssetsFoundCount: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param groupName The unique identifier for the discovery group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRuns(String groupName, RequestOptions requestOptions) {
        return this.serviceClient.listRuns(groupName, requestOptions).mapPage(bodyItemValue -> cleanUp(bodyItemValue));
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * <p>
     * <strong>Query Parameters</strong>
     *
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     industry: String (Optional)
     *     region: String (Optional)
     *     countryCode: String (Optional)
     *     stateCode: String (Optional)
     *     city: String (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoTemplate items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDiscoTemplate(RequestOptions requestOptions) {
        return this.serviceClient.listDiscoTemplate(requestOptions).mapPage(bodyItemValue -> cleanUp(bodyItemValue));
    }

    /**
     * Retrieve a disco template with a given templateId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     industry: String (Optional)
     *     region: String (Optional)
     *     countryCode: String (Optional)
     *     stateCode: String (Optional)
     *     city: String (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param templateId The system generated unique id for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the items in the current page of results along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDiscoTemplateWithResponse(String templateId, RequestOptions requestOptions) {
        return this.serviceClient.getDiscoTemplateWithResponse(templateId, requestOptions);
    }

    /**
     * Get billable assets summary for the workspace.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             date: LocalDate (Optional)
     *             total: Long (Optional)
     *             assetBreakdown (Optional): [
     *                  (Optional){
     *                     kind: String(domain/host/ipAddress) (Optional)
     *                     count: Long (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return billable assets summary for the workspace along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBillableWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getBillableWithResponse(requestOptions);
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     size: Integer (Optional)
     *     page: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     displayName: String (Optional)
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     updatedAt: OffsetDateTime (Optional)
     *     description: String (Optional)
     *     assets (Optional): {
     *         totalElements: Long (Optional)
     *         mark: String (Optional)
     *         nextLink: String (Optional)
     *         value (Optional): [
     *              (Optional){
     *                 kind: String (Required)
     *                 id: String (Required)
     *                 name: String (Optional)
     *                 displayName: String (Optional)
     *                 uuid: String (Optional)
     *                 createdDate: OffsetDateTime (Optional)
     *                 updatedDate: OffsetDateTime (Optional)
     *                 state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *                 externalId: String (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 wildcard: Boolean (Optional)
     *                 discoGroupName: String (Optional)
     *                 auditTrail (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         name: String (Optional)
     *                         displayName: String (Optional)
     *                         kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                         reason: String (Optional)
     *                     }
     *                 ]
     *                 reason: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the most recent snapshot of asset summary values for the snapshot request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSnapshotWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getSnapshotWithResponse(body, requestOptions);
    }

    /**
     * Get asset summary details for the summary request.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     metricCategories (Optional): [
     *         String (Optional)
     *     ]
     *     metrics (Optional): [
     *         String (Optional)
     *     ]
     *     filters (Optional): [
     *         String (Optional)
     *     ]
     *     groupBy: String (Optional)
     *     segmentBy: String (Optional)
     *     labelName: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             description: String (Optional)
     *             updatedAt: OffsetDateTime (Optional)
     *             metricCategory: String (Optional)
     *             metric: String (Optional)
     *             filter: String (Optional)
     *             labelName: String (Optional)
     *             count: Long (Optional)
     *             link: String (Optional)
     *             children (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return asset summary details for the summary request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSummaryWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getSummaryWithResponse(body, requestOptions);
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * <p>
     * <strong>Query Parameters</strong>
     *
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of SavedFilter items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSavedFilter(RequestOptions requestOptions) {
        return this.serviceClient.listSavedFilter(requestOptions).mapPage(bodyItemValue -> cleanUp(bodyItemValue));
    }

    /**
     * Retrieve a saved filter by filterName.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param filterName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSavedFilterWithResponse(String filterName, RequestOptions requestOptions) {
        return this.serviceClient.getSavedFilterWithResponse(filterName, requestOptions);
    }

    /**
     * Create or replace a saved filter with a given filterName.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     filter: String (Required)
     *     description: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param filterName The caller provided unique name for the resource.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceSavedFilterWithResponse(String filterName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceSavedFilterWithResponse(filterName, body, requestOptions);
    }

    /**
     * Delete a saved filter with a given filterName.
     *
     * @param filterName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteSavedFilterWithResponse(String filterName, RequestOptions requestOptions) {
        return this.serviceClient.deleteSavedFilterWithResponse(filterName, requestOptions);
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * <p>
     * <strong>Query Parameters</strong>
     *
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A list of expressions that specify the order of the returned resources.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Task items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTask(RequestOptions requestOptions) {
        return this.serviceClient.listTask(requestOptions).mapPage(bodyItemValue -> cleanUp(bodyItemValue));
    }

    /**
     * Retrieve a task by taskId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTaskWithResponse(String taskId, RequestOptions requestOptions) {
        return this.serviceClient.getTaskWithResponse(taskId, requestOptions);
    }

    /**
     * Cancel a task by taskId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelTaskWithResponse(String taskId, RequestOptions requestOptions) {
        return this.serviceClient.cancelTaskWithResponse(taskId, requestOptions);
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of AssetResource items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AssetResource> listAssetResource() {
        // Generated convenience method for listAssetResource
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listAssetResource(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(AssetResource.class));
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * @param filter An expression on the resource type that selects the resources to be returned.
     * @param assetUpdateData A request body used to update an asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task updateAssets(String filter, AssetUpdateData assetUpdateData) {
        // Generated convenience method for updateAssetsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(
            updateAssetsWithResponse(filter, BinaryData.fromObject(assetUpdateData), requestOptions).getValue())
            .toObject(Task.class);
    }

    /**
     * Retrieve an asset by assetId.
     *
     * @param assetId The system generated unique id for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the items in the current page of results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetResource getAssetResource(String assetId) {
        // Generated convenience method for getAssetResourceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(getAssetResourceWithResponse(assetId, requestOptions).getValue()).toObject(AssetResource.class);
    }

    /**
     * Retrieve a list of data connections.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataConnection items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataConnection> listDataConnection() {
        // Generated convenience method for listDataConnection
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDataConnection(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DataConnection.class));
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     *
     * @param dataConnectionData The dataConnectionData parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateResult validateDataConnection(DataConnectionData dataConnectionData) {
        // Generated convenience method for validateDataConnectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(
            validateDataConnectionWithResponse(BinaryData.fromObject(dataConnectionData), requestOptions).getValue())
            .toObject(ValidateResult.class);
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnection getDataConnection(String dataConnectionName) {
        // Generated convenience method for getDataConnectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(getDataConnectionWithResponse(dataConnectionName, requestOptions).getValue())
            .toObject(DataConnection.class);
    }

    /**
     * Create or update a data connection with a given dataConnectionName.
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param dataConnectionData The dataConnectionData parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnection createOrReplaceDataConnection(String dataConnectionName,
        DataConnectionData dataConnectionData) {
        // Generated convenience method for createOrReplaceDataConnectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(createOrReplaceDataConnectionWithResponse(dataConnectionName,
            BinaryData.fromObject(dataConnectionData), requestOptions).getValue()).toObject(DataConnection.class);
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDataConnection(String dataConnectionName) {
        // Generated convenience method for deleteDataConnectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteDataConnectionWithResponse(dataConnectionName, requestOptions).getValue();
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoGroup items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoGroup> listDiscoGroup() {
        // Generated convenience method for listDiscoGroup
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDiscoGroup(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DiscoGroup.class));
    }

    /**
     * Validate a discovery group with a given groupName.
     *
     * @param discoGroupData A request body used to create a discovery group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateResult validateDiscoGroup(DiscoGroupData discoGroupData) {
        // Generated convenience method for validateDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(validateDiscoGroupWithResponse(BinaryData.fromObject(discoGroupData), requestOptions).getValue())
            .toObject(ValidateResult.class);
    }

    /**
     * Retrieve a discovery group with a given groupName.
     *
     * @param groupName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoGroup getDiscoGroup(String groupName) {
        // Generated convenience method for getDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(getDiscoGroupWithResponse(groupName, requestOptions).getValue()).toObject(DiscoGroup.class);
    }

    /**
     * Create a discovery group with a given groupName.
     *
     * @param groupName The caller provided unique name for the resource.
     * @param discoGroupData A request body used to create a discovery group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoGroup createOrReplaceDiscoGroup(String groupName, DiscoGroupData discoGroupData) {
        // Generated convenience method for createOrReplaceDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(
            createOrReplaceDiscoGroupWithResponse(groupName, BinaryData.fromObject(discoGroupData), requestOptions)
                .getValue())
            .toObject(DiscoGroup.class);
    }

    private BinaryData cleanUp(BinaryData input) {
        return BinaryData.fromString(input.toString().replaceAll("\\+0000", "+00:00"));
    }

    /**
     * Run a discovery group with a given groupName.
     *
     * @param groupName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void runDiscoGroup(String groupName) {
        // Generated convenience method for runDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        runDiscoGroupWithResponse(groupName, requestOptions).getValue();
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * @param groupName The unique identifier for the discovery group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoRunResult> listRuns(String groupName) {
        // Generated convenience method for listRuns
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listRuns(groupName, requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DiscoRunResult.class));
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoTemplate items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoTemplate> listDiscoTemplate() {
        // Generated convenience method for listDiscoTemplate
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDiscoTemplate(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DiscoTemplate.class));
    }

    /**
     * Retrieve a disco template with a given templateId.
     *
     * @param templateId The system generated unique id for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the items in the current page of results.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoTemplate getDiscoTemplate(String templateId) {
        // Generated convenience method for getDiscoTemplateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDiscoTemplateWithResponse(templateId, requestOptions).getValue().toObject(DiscoTemplate.class);
    }

    /**
     * Get billable assets summary for the workspace.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return billable assets summary for the workspace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportBillableAssetSummaryResult getBillable() {
        // Generated convenience method for getBillableWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(getBillableWithResponse(requestOptions).getValue())
            .toObject(ReportBillableAssetSummaryResult.class);
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request.
     *
     * @param reportAssetSnapshotRequest A request body used to retrieve an asset report snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the most recent snapshot of asset summary values for the snapshot request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportAssetSnapshotResult getSnapshot(ReportAssetSnapshotRequest reportAssetSnapshotRequest) {
        // Generated convenience method for getSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(
            getSnapshotWithResponse(BinaryData.fromObject(reportAssetSnapshotRequest), requestOptions).getValue())
            .toObject(ReportAssetSnapshotResult.class);
    }

    /**
     * Get asset summary details for the summary request.
     *
     * @param reportAssetSummaryRequest A request body used to retrieve summary asset information. One and only one
     * collection of summary identifiers must be provided: filters, metrics, or metricCategories.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asset summary details for the summary request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportAssetSummaryResult getSummary(ReportAssetSummaryRequest reportAssetSummaryRequest) {
        // Generated convenience method for getSummaryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(
            getSummaryWithResponse(BinaryData.fromObject(reportAssetSummaryRequest), requestOptions).getValue())
            .toObject(ReportAssetSummaryResult.class);
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of SavedFilter items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SavedFilter> listSavedFilter() {
        // Generated convenience method for listSavedFilter
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSavedFilter(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(SavedFilter.class));
    }

    /**
     * Retrieve a saved filter by filterName.
     *
     * @param filterName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilter getSavedFilter(String filterName) {
        // Generated convenience method for getSavedFilterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(getSavedFilterWithResponse(filterName, requestOptions).getValue()).toObject(SavedFilter.class);
    }

    /**
     * Create or update a saved filter with a given filterName.
     *
     * @param filterName The caller provided unique name for the resource.
     * @param savedFilterData A request body used to create a saved filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilter createOrReplaceSavedFilter(String filterName, SavedFilterData savedFilterData) {
        // Generated convenience method for createOrReplaceSavedFilterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(
            createOrReplaceSavedFilterWithResponse(filterName, BinaryData.fromObject(savedFilterData), requestOptions)
                .getValue())
            .toObject(SavedFilter.class);
    }

    /**
     * Delete a saved filter with a given filterName.
     *
     * @param filterName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSavedFilter(String filterName) {
        // Generated convenience method for deleteSavedFilterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteSavedFilterWithResponse(filterName, requestOptions).getValue();
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Task items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Task> listTask() {
        // Generated convenience method for listTask
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTask(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(Task.class));
    }

    /**
     * Retrieve a task by taskId.
     *
     * @param taskId The unique identifier of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task getTask(String taskId) {
        // Generated convenience method for getTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(getTaskWithResponse(taskId, requestOptions).getValue()).toObject(Task.class);
    }

    /**
     * Cancel a task by taskId.
     *
     * @param taskId The unique identifier of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task cancelTask(String taskId) {
        // Generated convenience method for cancelTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(cancelTaskWithResponse(taskId, requestOptions).getValue()).toObject(Task.class);
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * <p>
     * <strong>Query Parameters</strong>
     *
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Optional): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoGroup items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDiscoGroup(RequestOptions requestOptions) {
        return this.serviceClient.listDiscoGroup(requestOptions).mapPage(bodyItemValue -> cleanUp(bodyItemValue));
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * @param filter Filter the result list using the given expression.
     * @param orderBy A list of expressions that specify the order of the returned resources.
     * @param skip The number of result items to skip.
     * @param mark Specify this value instead of 'skip' to use cursor-based searching. Initial value is '*' and
     * subsequent values are returned in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of AssetResource items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AssetResource> listAssetResource(String filter, String orderBy, Integer skip, String mark) {
        // Generated convenience method for listAssetResource
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (mark != null) {
            requestOptions.addQueryParam("mark", mark, false);
        }
        return serviceClient.listAssetResource(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(AssetResource.class));
    }

    /**
     * Retrieve a list of data connections.
     *
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataConnection items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataConnection> listDataConnection(Integer skip) {
        // Generated convenience method for listDataConnection
        RequestOptions requestOptions = new RequestOptions();
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listDataConnection(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DataConnection.class));
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoGroup items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoGroup> listDiscoGroup(String filter, Integer skip) {
        // Generated convenience method for listDiscoGroup
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listDiscoGroup(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DiscoGroup.class));
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoTemplate items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoTemplate> listDiscoTemplate(String filter, Integer skip) {
        // Generated convenience method for listDiscoTemplate
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listDiscoTemplate(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DiscoTemplate.class));
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of SavedFilter items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SavedFilter> listSavedFilter(String filter, Integer skip) {
        // Generated convenience method for listSavedFilter
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listSavedFilter(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(SavedFilter.class));
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * @param filter Filter the result list using the given expression.
     * @param orderBy A list of expressions that specify the order of the returned resources.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Task items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Task> listTask(String filter, String orderBy, Integer skip) {
        // Generated convenience method for listTask
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listTask(requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(Task.class));
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * @param groupName The unique identifier for the discovery group.
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoRunResult> listRuns(String groupName, String filter, Integer skip) {
        // Generated convenience method for listRuns
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listRuns(groupName, requestOptions)
            .mapPage(bodyItemValue -> cleanUp(bodyItemValue).toObject(DiscoRunResult.class));
    }

    /**
     * Export a list of assets for the provided search parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * <tr><td>orderby</td><td>String</td><td>No</td><td>A list of expressions that specify the order of the returned
     * resources.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     fileName: String (Required)
     *     columns (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssetsExportWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getAssetsExportWithResponse(body, requestOptions);
    }

    /**
     * Retrieve observations on an asset.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * <tr><td>orderby</td><td>String</td><td>No</td><td>A list of expressions that specify the order of the returned
     * resources.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     totalElements: long (Required)
     *     prioritySummary (Required): {
     *         String: int (Required)
     *     }
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             types (Required): [
     *                 String(cve/insight) (Required)
     *             ]
     *             priority: String(high/medium/low/none) (Required)
     *             cvssScoreV2: double (Required)
     *             cvssScoreV3: double (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param assetId The system generated unique id for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the page result response for the observation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getObservationsWithResponse(String assetId, RequestOptions requestOptions) {
        return this.serviceClient.getObservationsWithResponse(assetId, requestOptions);
    }

    /**
     * Retrieve a list of deltas for the provided time range.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     deltaDetailType: String(added/removed) (Required)
     *     priorDays: Integer (Optional)
     *     kind: String(page/resource/mailServer/nameServer/host/domain/ipAddress/ipBlock/as/contact/sslCert) (Required)
     *     date: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     kind: String(page/resource/mailServer/nameServer/host/domain/ipAddress/ipBlock/as/contact/sslCert) (Required)
     *     name: String (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     state: String(candidate/candidateInvestigate/confirmed/associated/associatedPartner/associatedThirdParty/archived/dismissed/autoconfirmed) (Required)
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDeltaDetails(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getDeltaDetails(body, requestOptions);
    }

    /**
     * Retrieve a list of deltas with overall summary changes for the provided time range.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     priorDays: Integer (Optional)
     *     date: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     summary (Required): {
     *         range: long (Required)
     *         removed: long (Required)
     *         added: long (Required)
     *         difference: long (Required)
     *         kindSummaries (Required): [
     *              (Required){
     *                 kind: String(page/resource/mailServer/nameServer/host/domain/ipAddress/ipBlock/as/contact/sslCert) (Required)
     *                 removed: long (Required)
     *                 added: long (Required)
     *                 difference: long (Required)
     *             }
     *         ]
     *     }
     *     daily (Required): [
     *          (Required){
     *             date: OffsetDateTime (Required)
     *             deltas (Required): [
     *                  (Required){
     *                     kind: String(page/resource/mailServer/nameServer/host/domain/ipAddress/ipBlock/as/contact/sslCert) (Required)
     *                     removed: long (Required)
     *                     added: long (Required)
     *                     difference: long (Required)
     *                     count: long (Required)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return define response body for getting delta summary along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeltaSummaryWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getDeltaSummaryWithResponse(body, requestOptions);
    }

    /**
     * Delete a discovery group with a given discovery group name.
     *
     * @param groupName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDiscoGroupWithResponse(String groupName, RequestOptions requestOptions) {
        return this.serviceClient.deleteDiscoGroupWithResponse(groupName, requestOptions);
    }

    /**
     * Retrieve an asset chain summary.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assetChainSource: String(DISCO_GROUP/ASSET) (Required)
     *     sourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     affectedAssetsSummary (Required): [
     *          (Required){
     *             kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Required)
     *             affectedCount: long (Required)
     *         }
     *     ]
     *     affectedGroupsSummary (Required): [
     *          (Required){
     *             id: String (Required)
     *             name: String (Required)
     *             displayName: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for the asset chain summary along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssetChainSummaryWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getAssetChainSummaryWithResponse(body, requestOptions);
    }

    /**
     * Dismiss discovery chain for a given asset chain source.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assetChainSource: String(DISCO_GROUP/ASSET) (Required)
     *     sourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dismissAssetChainWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.dismissAssetChainWithResponse(body, requestOptions);
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request exported to a file.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     fileName: String (Optional)
     *     columns (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the most recent snapshot of asset summary values for the snapshot request exported to a file along with
     * {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSnapshotExportWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.getSnapshotExportWithResponse(body, requestOptions);
    }

    /**
     * Run a task by taskId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> runTaskWithResponse(String taskId, RequestOptions requestOptions) {
        return this.serviceClient.runTaskWithResponse(taskId, requestOptions);
    }

    /**
     * Download a task.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadTaskWithResponse(String taskId, RequestOptions requestOptions) {
        return this.serviceClient.downloadTaskWithResponse(taskId, requestOptions);
    }

    /**
     * Retrieve a list of CisaCves for the provided search parameters.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     cveId: String (Required)
     *     vendorProject: String (Required)
     *     product: String (Required)
     *     vulnerabilityName: String (Required)
     *     shortDescription: String (Required)
     *     requiredAction: String (Required)
     *     notes: String (Required)
     *     dateAdded: OffsetDateTime (Required)
     *     dueDate: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     count: long (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of CisaCveResult items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getCisaCves(RequestOptions requestOptions) {
        return this.serviceClient.getCisaCves(requestOptions);
    }

    /**
     * Retrieve details of CisaCve by cveId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     cveId: String (Required)
     *     vendorProject: String (Required)
     *     product: String (Required)
     *     vulnerabilityName: String (Required)
     *     shortDescription: String (Required)
     *     requiredAction: String (Required)
     *     notes: String (Required)
     *     dateAdded: OffsetDateTime (Required)
     *     dueDate: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     count: long (Required)
     * }
     * }</pre>
     *
     * @param cveId The CVE ID of the vulnerability in the format CVE-YYYY-NNNN, note that the number portion can have
     * more than 4 digits.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return cisa cve in a given workspace along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCisaCveWithResponse(String cveId, RequestOptions requestOptions) {
        return this.serviceClient.getCisaCveWithResponse(cveId, requestOptions);
    }

    /**
     * Export a list of assets for the provided search parameters.
     *
     * @param body Body parameter.
     * @param filter Filter the result list using the given expression.
     * @param orderBy A list of expressions that specify the order of the returned resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task getAssetsExport(AssetsExportRequest body, String filter, String orderBy) {
        // Generated convenience method for getAssetsExportWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        return getAssetsExportWithResponse(BinaryData.fromObject(body), requestOptions).getValue().toObject(Task.class);
    }

    /**
     * Export a list of assets for the provided search parameters.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task getAssetsExport(AssetsExportRequest body) {
        // Generated convenience method for getAssetsExportWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAssetsExportWithResponse(BinaryData.fromObject(body), requestOptions).getValue().toObject(Task.class);
    }

    /**
     * Retrieve observations on an asset.
     *
     * @param assetId The system generated unique id for the resource.
     * @param filter Filter the result list using the given expression.
     * @param orderBy A list of expressions that specify the order of the returned resources.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the page result response for the observation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ObservationPageResult getObservations(String assetId, String filter, String orderBy, Integer skip,
        Integer maxPageSize) {
        // Generated convenience method for getObservationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return getObservationsWithResponse(assetId, requestOptions).getValue().toObject(ObservationPageResult.class);
    }

    /**
     * Retrieve observations on an asset.
     *
     * @param assetId The system generated unique id for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the page result response for the observation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ObservationPageResult getObservations(String assetId) {
        // Generated convenience method for getObservationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getObservationsWithResponse(assetId, requestOptions).getValue().toObject(ObservationPageResult.class);
    }

    /**
     * Retrieve a list of deltas for the provided time range.
     *
     * @param body Body parameter.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeltaResult> getDeltaDetails(DeltaDetailsRequest body, Integer skip) {
        // Generated convenience method for getDeltaDetails
        RequestOptions requestOptions = new RequestOptions();
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.getDeltaDetails(BinaryData.fromObject(body), requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DeltaResult.class));
    }

    /**
     * Retrieve a list of deltas for the provided time range.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeltaResult> getDeltaDetails(DeltaDetailsRequest body) {
        // Generated convenience method for getDeltaDetails
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getDeltaDetails(BinaryData.fromObject(body), requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DeltaResult.class));
    }

    /**
     * Retrieve a list of deltas with overall summary changes for the provided time range.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define response body for getting delta summary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeltaSummaryResult getDeltaSummary(DeltaSummaryRequest body) {
        // Generated convenience method for getDeltaSummaryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeltaSummaryWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(DeltaSummaryResult.class);
    }

    /**
     * Delete a discovery group with a given discovery group name.
     *
     * @param groupName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDiscoGroup(String groupName) {
        // Generated convenience method for deleteDiscoGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteDiscoGroupWithResponse(groupName, requestOptions).getValue();
    }

    /**
     * Retrieve an asset chain summary.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the asset chain summary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetChainSummaryResult getAssetChainSummary(AssetChainRequest body) {
        // Generated convenience method for getAssetChainSummaryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAssetChainSummaryWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AssetChainSummaryResult.class);
    }

    /**
     * Dismiss discovery chain for a given asset chain source.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task dismissAssetChain(AssetChainRequest body) {
        // Generated convenience method for dismissAssetChainWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return dismissAssetChainWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(Task.class);
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request exported to a file.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the most recent snapshot of asset summary values for the snapshot request exported to a file.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task getSnapshotExport(ReportAssetSnapshotExportRequest body) {
        // Generated convenience method for getSnapshotExportWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSnapshotExportWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(Task.class);
    }

    /**
     * Run a task by taskId.
     *
     * @param taskId The unique identifier of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task runTask(String taskId) {
        // Generated convenience method for runTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return runTaskWithResponse(taskId, requestOptions).getValue().toObject(Task.class);
    }

    /**
     * Download a task.
     *
     * @param taskId The unique identifier of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task downloadTask(String taskId) {
        // Generated convenience method for downloadTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return downloadTaskWithResponse(taskId, requestOptions).getValue().toObject(Task.class);
    }

    /**
     * Retrieve a list of CisaCves for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of CisaCveResult items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CisaCveResult> getCisaCves() {
        // Generated convenience method for getCisaCves
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getCisaCves(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(CisaCveResult.class));
    }

    /**
     * Retrieve details of CisaCve by cveId.
     *
     * @param cveId The CVE ID of the vulnerability in the format CVE-YYYY-NNNN, note that the number portion can have
     * more than 4 digits.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cisa cve in a given workspace.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CisaCveResult getCisaCve(String cveId) {
        // Generated convenience method for getCisaCveWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCisaCveWithResponse(cveId, requestOptions).getValue().toObject(CisaCveResult.class);
    }
}
