// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The PageAsset model.
 */
@Immutable
public final class PageAsset extends InventoryAsset {

    /*
     * The url property.
     */
    @Generated
    private String url;

    /*
     * The httpMethod property.
     */
    @Generated
    private String httpMethod;

    /*
     * The service property.
     */
    @Generated
    private String service;

    /*
     * The ipAddresses property.
     */
    @Generated
    private List<ObservedString> ipAddresses;

    /*
     * The successful property.
     */
    @Generated
    private List<ObservedBoolean> successful;

    /*
     * The httpResponseCodes property.
     */
    @Generated
    private List<ObservedInteger> httpResponseCodes;

    /*
     * The httpResponseMessages property.
     */
    @Generated
    private List<ObservedString> httpResponseMessages;

    /*
     * The responseTimes property.
     */
    @Generated
    private List<ObservedLong> responseTimes;

    /*
     * The frames property.
     */
    @Generated
    private List<ObservedBoolean> frames;

    /*
     * The windows property.
     */
    @Generated
    private List<ObservedBoolean> windows;

    /*
     * The nonHtmlFrames property.
     */
    @Generated
    private List<ObservedBoolean> nonHtmlFrames;

    /*
     * The undirectedContent property.
     */
    @Generated
    private List<ObservedBoolean> undirectedContent;

    /*
     * The contentTypes property.
     */
    @Generated
    private List<ObservedString> contentTypes;

    /*
     * The contentLengths property.
     */
    @Generated
    private List<ObservedLong> contentLengths;

    /*
     * The windowNames property.
     */
    @Generated
    private List<ObservedString> windowNames;

    /*
     * The charsets property.
     */
    @Generated
    private List<ObservedString> charsets;

    /*
     * The titles property.
     */
    @Generated
    private List<ObservedString> titles;

    /*
     * The languages property.
     */
    @Generated
    private List<ObservedString> languages;

    /*
     * The responseHeaders property.
     */
    @Generated
    private List<ObservedHeader> responseHeaders;

    /*
     * The cookies property.
     */
    @Generated
    private List<Cookie> cookies;

    /*
     * The webComponents property.
     */
    @Generated
    private List<WebComponent> webComponents;

    /*
     * The attributes property.
     */
    @Generated
    private List<Attribute> attributes;

    /*
     * The assetSecurityPolicies property.
     */
    @Generated
    private List<AssetSecurityPolicy> assetSecurityPolicies;

    /*
     * The responseBodyMinhashSignatures property.
     */
    @Generated
    private List<ObservedIntegers> responseBodyMinhashSignatures;

    /*
     * The fullDomMinhashSignatures property.
     */
    @Generated
    private List<ObservedIntegers> fullDomMinhashSignatures;

    /*
     * The responseBodyHashSignatures property.
     */
    @Generated
    private List<ObservedString> responseBodyHashSignatures;

    /*
     * The errors property.
     */
    @Generated
    private List<ObservedString> errors;

    /*
     * The sslCerts property.
     */
    @Generated
    private List<SslCertAsset> sslCerts;

    /*
     * The sources property.
     */
    @Generated
    private List<Source> sources;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The cause property.
     */
    @Generated
    private PageCause cause;

    /*
     * The referrer property.
     */
    @Generated
    private String referrer;

    /*
     * The redirectUrls property.
     */
    @Generated
    private List<ObservedString> redirectUrls;

    /*
     * The redirectType property.
     */
    @Generated
    private PageAssetRedirectType redirectType;

    /*
     * The finalUrls property.
     */
    @Generated
    private List<ObservedString> finalUrls;

    /*
     * The finalResponseCodes property.
     */
    @Generated
    private List<ObservedInteger> finalResponseCodes;

    /*
     * The parkedPage property.
     */
    @Generated
    private List<ObservedBoolean> parkedPage;

    /*
     * The resourceUrls property.
     */
    @Generated
    private List<ResourceUrl> resourceUrls;

    /*
     * The guids property.
     */
    @Generated
    private List<GuidPair> guids;

    /*
     * The finalIpAddresses property.
     */
    @Generated
    private List<ObservedString> finalIpAddresses;

    /*
     * The asns property.
     */
    @Generated
    private List<ObservedLong> asns;

    /*
     * The ipBlocks property.
     */
    @Generated
    private List<IpBlock> ipBlocks;

    /*
     * The finalAsns property.
     */
    @Generated
    private List<ObservedLong> finalAsns;

    /*
     * The finalIpBlocks property.
     */
    @Generated
    private List<IpBlock> finalIpBlocks;

    /*
     * The responseBodies property.
     */
    @Generated
    private List<ObservedString> responseBodies;

    /*
     * The domainAsset property.
     */
    @Generated
    private DomainAsset domainAsset;

    /*
     * The rootUrl property.
     */
    @Generated
    private ObservedBoolean rootUrl;

    /*
     * The isRootUrl property.
     */
    @Generated
    private Boolean isRootUrl;

    /*
     * The location property.
     */
    @Generated
    private List<ObservedLocation> location;

    /*
     * The services property.
     */
    @Generated
    private List<Service> services;

    /*
     * The siteStatus property.
     */
    @Generated
    private String siteStatus;

    /*
     * The cnames property.
     */
    @Generated
    private List<ObservedString> cnames;

    /*
     * The cdns property.
     */
    @Generated
    private List<ObservedString> cdns;

    /*
     * The host property.
     */
    @Generated
    private String host;

    /*
     * The domain property.
     */
    @Generated
    private String domain;

    /*
     * The sslServerConfig property.
     */
    @Generated
    private List<SslServerConfig> sslServerConfig;

    /*
     * The gdprAssetSecurityPolicies property.
     */
    @Generated
    private List<AssetSecurityPolicy> gdprAssetSecurityPolicies;

    /*
     * The ipv4 property.
     */
    @Generated
    private List<ObservedBoolean> ipv4;

    /*
     * The ipv6 property.
     */
    @Generated
    private List<ObservedBoolean> ipv6;

    /**
     * Creates an instance of PageAsset class.
     */
    @Generated
    private PageAsset() {
    }

    /**
     * Get the url property: The url property.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the httpMethod property: The httpMethod property.
     *
     * @return the httpMethod value.
     */
    @Generated
    public String getHttpMethod() {
        return this.httpMethod;
    }

    /**
     * Get the service property: The service property.
     *
     * @return the service value.
     */
    @Generated
    public String getService() {
        return this.service;
    }

    /**
     * Get the ipAddresses property: The ipAddresses property.
     *
     * @return the ipAddresses value.
     */
    @Generated
    public List<ObservedString> getIpAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the successful property: The successful property.
     *
     * @return the successful value.
     */
    @Generated
    public List<ObservedBoolean> getSuccessful() {
        return this.successful;
    }

    /**
     * Get the httpResponseCodes property: The httpResponseCodes property.
     *
     * @return the httpResponseCodes value.
     */
    @Generated
    public List<ObservedInteger> getHttpResponseCodes() {
        return this.httpResponseCodes;
    }

    /**
     * Get the httpResponseMessages property: The httpResponseMessages property.
     *
     * @return the httpResponseMessages value.
     */
    @Generated
    public List<ObservedString> getHttpResponseMessages() {
        return this.httpResponseMessages;
    }

    /**
     * Get the responseTimes property: The responseTimes property.
     *
     * @return the responseTimes value.
     */
    @Generated
    public List<ObservedLong> getResponseTimes() {
        return this.responseTimes;
    }

    /**
     * Get the frames property: The frames property.
     *
     * @return the frames value.
     */
    @Generated
    public List<ObservedBoolean> getFrames() {
        return this.frames;
    }

    /**
     * Get the windows property: The windows property.
     *
     * @return the windows value.
     */
    @Generated
    public List<ObservedBoolean> getWindows() {
        return this.windows;
    }

    /**
     * Get the nonHtmlFrames property: The nonHtmlFrames property.
     *
     * @return the nonHtmlFrames value.
     */
    @Generated
    public List<ObservedBoolean> getNonHtmlFrames() {
        return this.nonHtmlFrames;
    }

    /**
     * Get the undirectedContent property: The undirectedContent property.
     *
     * @return the undirectedContent value.
     */
    @Generated
    public List<ObservedBoolean> getUndirectedContent() {
        return this.undirectedContent;
    }

    /**
     * Get the contentTypes property: The contentTypes property.
     *
     * @return the contentTypes value.
     */
    @Generated
    public List<ObservedString> getContentTypes() {
        return this.contentTypes;
    }

    /**
     * Get the contentLengths property: The contentLengths property.
     *
     * @return the contentLengths value.
     */
    @Generated
    public List<ObservedLong> getContentLengths() {
        return this.contentLengths;
    }

    /**
     * Get the windowNames property: The windowNames property.
     *
     * @return the windowNames value.
     */
    @Generated
    public List<ObservedString> getWindowNames() {
        return this.windowNames;
    }

    /**
     * Get the charsets property: The charsets property.
     *
     * @return the charsets value.
     */
    @Generated
    public List<ObservedString> getCharsets() {
        return this.charsets;
    }

    /**
     * Get the titles property: The titles property.
     *
     * @return the titles value.
     */
    @Generated
    public List<ObservedString> getTitles() {
        return this.titles;
    }

    /**
     * Get the languages property: The languages property.
     *
     * @return the languages value.
     */
    @Generated
    public List<ObservedString> getLanguages() {
        return this.languages;
    }

    /**
     * Get the responseHeaders property: The responseHeaders property.
     *
     * @return the responseHeaders value.
     */
    @Generated
    public List<ObservedHeader> getResponseHeaders() {
        return this.responseHeaders;
    }

    /**
     * Get the cookies property: The cookies property.
     *
     * @return the cookies value.
     */
    @Generated
    public List<Cookie> getCookies() {
        return this.cookies;
    }

    /**
     * Get the webComponents property: The webComponents property.
     *
     * @return the webComponents value.
     */
    @Generated
    public List<WebComponent> getWebComponents() {
        return this.webComponents;
    }

    /**
     * Get the attributes property: The attributes property.
     *
     * @return the attributes value.
     */
    @Generated
    public List<Attribute> getAttributes() {
        return this.attributes;
    }

    /**
     * Get the assetSecurityPolicies property: The assetSecurityPolicies property.
     *
     * @return the assetSecurityPolicies value.
     */
    @Generated
    public List<AssetSecurityPolicy> getAssetSecurityPolicies() {
        return this.assetSecurityPolicies;
    }

    /**
     * Get the responseBodyMinhashSignatures property: The responseBodyMinhashSignatures property.
     *
     * @return the responseBodyMinhashSignatures value.
     */
    @Generated
    public List<ObservedIntegers> getResponseBodyMinhashSignatures() {
        return this.responseBodyMinhashSignatures;
    }

    /**
     * Get the fullDomMinhashSignatures property: The fullDomMinhashSignatures property.
     *
     * @return the fullDomMinhashSignatures value.
     */
    @Generated
    public List<ObservedIntegers> getFullDomMinhashSignatures() {
        return this.fullDomMinhashSignatures;
    }

    /**
     * Get the responseBodyHashSignatures property: The responseBodyHashSignatures property.
     *
     * @return the responseBodyHashSignatures value.
     */
    @Generated
    public List<ObservedString> getResponseBodyHashSignatures() {
        return this.responseBodyHashSignatures;
    }

    /**
     * Get the errors property: The errors property.
     *
     * @return the errors value.
     */
    @Generated
    public List<ObservedString> getErrors() {
        return this.errors;
    }

    /**
     * Get the sslCerts property: The sslCerts property.
     *
     * @return the sslCerts value.
     */
    @Generated
    public List<SslCertAsset> getSslCerts() {
        return this.sslCerts;
    }

    /**
     * Get the sources property: The sources property.
     *
     * @return the sources value.
     */
    @Generated
    public List<Source> getSources() {
        return this.sources;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the cause property: The cause property.
     *
     * @return the cause value.
     */
    @Generated
    public PageCause getCause() {
        return this.cause;
    }

    /**
     * Get the referrer property: The referrer property.
     *
     * @return the referrer value.
     */
    @Generated
    public String getReferrer() {
        return this.referrer;
    }

    /**
     * Get the redirectUrls property: The redirectUrls property.
     *
     * @return the redirectUrls value.
     */
    @Generated
    public List<ObservedString> getRedirectUrls() {
        return this.redirectUrls;
    }

    /**
     * Get the redirectType property: The redirectType property.
     *
     * @return the redirectType value.
     */
    @Generated
    public PageAssetRedirectType getRedirectType() {
        return this.redirectType;
    }

    /**
     * Get the finalUrls property: The finalUrls property.
     *
     * @return the finalUrls value.
     */
    @Generated
    public List<ObservedString> getFinalUrls() {
        return this.finalUrls;
    }

    /**
     * Get the finalResponseCodes property: The finalResponseCodes property.
     *
     * @return the finalResponseCodes value.
     */
    @Generated
    public List<ObservedInteger> getFinalResponseCodes() {
        return this.finalResponseCodes;
    }

    /**
     * Get the parkedPage property: The parkedPage property.
     *
     * @return the parkedPage value.
     */
    @Generated
    public List<ObservedBoolean> getParkedPage() {
        return this.parkedPage;
    }

    /**
     * Get the resourceUrls property: The resourceUrls property.
     *
     * @return the resourceUrls value.
     */
    @Generated
    public List<ResourceUrl> getResourceUrls() {
        return this.resourceUrls;
    }

    /**
     * Get the guids property: The guids property.
     *
     * @return the guids value.
     */
    @Generated
    public List<GuidPair> getGuids() {
        return this.guids;
    }

    /**
     * Get the finalIpAddresses property: The finalIpAddresses property.
     *
     * @return the finalIpAddresses value.
     */
    @Generated
    public List<ObservedString> getFinalIpAddresses() {
        return this.finalIpAddresses;
    }

    /**
     * Get the asns property: The asns property.
     *
     * @return the asns value.
     */
    @Generated
    public List<ObservedLong> getAsns() {
        return this.asns;
    }

    /**
     * Get the ipBlocks property: The ipBlocks property.
     *
     * @return the ipBlocks value.
     */
    @Generated
    public List<IpBlock> getIpBlocks() {
        return this.ipBlocks;
    }

    /**
     * Get the finalAsns property: The finalAsns property.
     *
     * @return the finalAsns value.
     */
    @Generated
    public List<ObservedLong> getFinalAsns() {
        return this.finalAsns;
    }

    /**
     * Get the finalIpBlocks property: The finalIpBlocks property.
     *
     * @return the finalIpBlocks value.
     */
    @Generated
    public List<IpBlock> getFinalIpBlocks() {
        return this.finalIpBlocks;
    }

    /**
     * Get the responseBodies property: The responseBodies property.
     *
     * @return the responseBodies value.
     */
    @Generated
    public List<ObservedString> getResponseBodies() {
        return this.responseBodies;
    }

    /**
     * Get the domainAsset property: The domainAsset property.
     *
     * @return the domainAsset value.
     */
    @Generated
    public DomainAsset getDomainAsset() {
        return this.domainAsset;
    }

    /**
     * Get the rootUrl property: The rootUrl property.
     *
     * @return the rootUrl value.
     */
    @Generated
    public ObservedBoolean getRootUrl() {
        return this.rootUrl;
    }

    /**
     * Get the isRootUrl property: The isRootUrl property.
     *
     * @return the isRootUrl value.
     */
    @Generated
    public Boolean isRootUrl() {
        return this.isRootUrl;
    }

    /**
     * Get the location property: The location property.
     *
     * @return the location value.
     */
    @Generated
    public List<ObservedLocation> getLocation() {
        return this.location;
    }

    /**
     * Get the services property: The services property.
     *
     * @return the services value.
     */
    @Generated
    public List<Service> getServices() {
        return this.services;
    }

    /**
     * Get the siteStatus property: The siteStatus property.
     *
     * @return the siteStatus value.
     */
    @Generated
    public String getSiteStatus() {
        return this.siteStatus;
    }

    /**
     * Get the cnames property: The cnames property.
     *
     * @return the cnames value.
     */
    @Generated
    public List<ObservedString> getCnames() {
        return this.cnames;
    }

    /**
     * Get the cdns property: The cdns property.
     *
     * @return the cdns value.
     */
    @Generated
    public List<ObservedString> getCdns() {
        return this.cdns;
    }

    /**
     * Get the host property: The host property.
     *
     * @return the host value.
     */
    @Generated
    public String getHost() {
        return this.host;
    }

    /**
     * Get the domain property: The domain property.
     *
     * @return the domain value.
     */
    @Generated
    public String getDomain() {
        return this.domain;
    }

    /**
     * Get the sslServerConfig property: The sslServerConfig property.
     *
     * @return the sslServerConfig value.
     */
    @Generated
    public List<SslServerConfig> getSslServerConfig() {
        return this.sslServerConfig;
    }

    /**
     * Get the gdprAssetSecurityPolicies property: The gdprAssetSecurityPolicies property.
     *
     * @return the gdprAssetSecurityPolicies value.
     */
    @Generated
    public List<AssetSecurityPolicy> getGdprAssetSecurityPolicies() {
        return this.gdprAssetSecurityPolicies;
    }

    /**
     * Get the ipv4 property: The ipv4 property.
     *
     * @return the ipv4 value.
     */
    @Generated
    public List<ObservedBoolean> getIpv4() {
        return this.ipv4;
    }

    /**
     * Get the ipv6 property: The ipv6 property.
     *
     * @return the ipv6 value.
     */
    @Generated
    public List<ObservedBoolean> getIpv6() {
        return this.ipv6;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("httpMethod", this.httpMethod);
        jsonWriter.writeStringField("service", this.service);
        jsonWriter.writeArrayField("ipAddresses", this.ipAddresses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("successful", this.successful, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("httpResponseCodes", this.httpResponseCodes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("httpResponseMessages", this.httpResponseMessages,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("responseTimes", this.responseTimes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("frames", this.frames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("windows", this.windows, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("nonHtmlFrames", this.nonHtmlFrames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("undirectedContent", this.undirectedContent,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("contentTypes", this.contentTypes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("contentLengths", this.contentLengths,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("windowNames", this.windowNames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("charsets", this.charsets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("titles", this.titles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("languages", this.languages, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("responseHeaders", this.responseHeaders,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("cookies", this.cookies, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("webComponents", this.webComponents, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("attributes", this.attributes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("assetSecurityPolicies", this.assetSecurityPolicies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("responseBodyMinhashSignatures", this.responseBodyMinhashSignatures,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("fullDomMinhashSignatures", this.fullDomMinhashSignatures,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("responseBodyHashSignatures", this.responseBodyHashSignatures,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sslCerts", this.sslCerts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeJsonField("cause", this.cause);
        jsonWriter.writeStringField("referrer", this.referrer);
        jsonWriter.writeArrayField("redirectUrls", this.redirectUrls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("redirectType", this.redirectType == null ? null : this.redirectType.toString());
        jsonWriter.writeArrayField("finalUrls", this.finalUrls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("finalResponseCodes", this.finalResponseCodes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("parkedPage", this.parkedPage, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("resourceUrls", this.resourceUrls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("guids", this.guids, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("finalIpAddresses", this.finalIpAddresses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("asns", this.asns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipBlocks", this.ipBlocks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("finalAsns", this.finalAsns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("finalIpBlocks", this.finalIpBlocks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("responseBodies", this.responseBodies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("domainAsset", this.domainAsset);
        jsonWriter.writeJsonField("rootUrl", this.rootUrl);
        jsonWriter.writeBooleanField("isRootUrl", this.isRootUrl);
        jsonWriter.writeArrayField("location", this.location, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("services", this.services, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("siteStatus", this.siteStatus);
        jsonWriter.writeArrayField("cnames", this.cnames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("cdns", this.cdns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeArrayField("sslServerConfig", this.sslServerConfig,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("gdprAssetSecurityPolicies", this.gdprAssetSecurityPolicies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv4", this.ipv4, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6", this.ipv6, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PageAsset from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PageAsset if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PageAsset.
     */
    @Generated
    public static PageAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PageAsset deserializedPageAsset = new PageAsset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("url".equals(fieldName)) {
                    deserializedPageAsset.url = reader.getString();
                } else if ("httpMethod".equals(fieldName)) {
                    deserializedPageAsset.httpMethod = reader.getString();
                } else if ("service".equals(fieldName)) {
                    deserializedPageAsset.service = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<ObservedString> ipAddresses = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.ipAddresses = ipAddresses;
                } else if ("successful".equals(fieldName)) {
                    List<ObservedBoolean> successful = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.successful = successful;
                } else if ("httpResponseCodes".equals(fieldName)) {
                    List<ObservedInteger> httpResponseCodes
                        = reader.readArray(reader1 -> ObservedInteger.fromJson(reader1));
                    deserializedPageAsset.httpResponseCodes = httpResponseCodes;
                } else if ("httpResponseMessages".equals(fieldName)) {
                    List<ObservedString> httpResponseMessages
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.httpResponseMessages = httpResponseMessages;
                } else if ("responseTimes".equals(fieldName)) {
                    List<ObservedLong> responseTimes = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedPageAsset.responseTimes = responseTimes;
                } else if ("frames".equals(fieldName)) {
                    List<ObservedBoolean> frames = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.frames = frames;
                } else if ("windows".equals(fieldName)) {
                    List<ObservedBoolean> windows = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.windows = windows;
                } else if ("nonHtmlFrames".equals(fieldName)) {
                    List<ObservedBoolean> nonHtmlFrames
                        = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.nonHtmlFrames = nonHtmlFrames;
                } else if ("undirectedContent".equals(fieldName)) {
                    List<ObservedBoolean> undirectedContent
                        = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.undirectedContent = undirectedContent;
                } else if ("contentTypes".equals(fieldName)) {
                    List<ObservedString> contentTypes = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.contentTypes = contentTypes;
                } else if ("contentLengths".equals(fieldName)) {
                    List<ObservedLong> contentLengths = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedPageAsset.contentLengths = contentLengths;
                } else if ("windowNames".equals(fieldName)) {
                    List<ObservedString> windowNames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.windowNames = windowNames;
                } else if ("charsets".equals(fieldName)) {
                    List<ObservedString> charsets = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.charsets = charsets;
                } else if ("titles".equals(fieldName)) {
                    List<ObservedString> titles = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.titles = titles;
                } else if ("languages".equals(fieldName)) {
                    List<ObservedString> languages = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.languages = languages;
                } else if ("responseHeaders".equals(fieldName)) {
                    List<ObservedHeader> responseHeaders
                        = reader.readArray(reader1 -> ObservedHeader.fromJson(reader1));
                    deserializedPageAsset.responseHeaders = responseHeaders;
                } else if ("cookies".equals(fieldName)) {
                    List<Cookie> cookies = reader.readArray(reader1 -> Cookie.fromJson(reader1));
                    deserializedPageAsset.cookies = cookies;
                } else if ("webComponents".equals(fieldName)) {
                    List<WebComponent> webComponents = reader.readArray(reader1 -> WebComponent.fromJson(reader1));
                    deserializedPageAsset.webComponents = webComponents;
                } else if ("attributes".equals(fieldName)) {
                    List<Attribute> attributes = reader.readArray(reader1 -> Attribute.fromJson(reader1));
                    deserializedPageAsset.attributes = attributes;
                } else if ("assetSecurityPolicies".equals(fieldName)) {
                    List<AssetSecurityPolicy> assetSecurityPolicies
                        = reader.readArray(reader1 -> AssetSecurityPolicy.fromJson(reader1));
                    deserializedPageAsset.assetSecurityPolicies = assetSecurityPolicies;
                } else if ("responseBodyMinhashSignatures".equals(fieldName)) {
                    List<ObservedIntegers> responseBodyMinhashSignatures
                        = reader.readArray(reader1 -> ObservedIntegers.fromJson(reader1));
                    deserializedPageAsset.responseBodyMinhashSignatures = responseBodyMinhashSignatures;
                } else if ("fullDomMinhashSignatures".equals(fieldName)) {
                    List<ObservedIntegers> fullDomMinhashSignatures
                        = reader.readArray(reader1 -> ObservedIntegers.fromJson(reader1));
                    deserializedPageAsset.fullDomMinhashSignatures = fullDomMinhashSignatures;
                } else if ("responseBodyHashSignatures".equals(fieldName)) {
                    List<ObservedString> responseBodyHashSignatures
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.responseBodyHashSignatures = responseBodyHashSignatures;
                } else if ("errors".equals(fieldName)) {
                    List<ObservedString> errors = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.errors = errors;
                } else if ("sslCerts".equals(fieldName)) {
                    List<SslCertAsset> sslCerts = reader.readArray(reader1 -> SslCertAsset.fromJson(reader1));
                    deserializedPageAsset.sslCerts = sslCerts;
                } else if ("sources".equals(fieldName)) {
                    List<Source> sources = reader.readArray(reader1 -> Source.fromJson(reader1));
                    deserializedPageAsset.sources = sources;
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedPageAsset.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedPageAsset.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedPageAsset.count = reader.getNullable(JsonReader::getLong);
                } else if ("cause".equals(fieldName)) {
                    deserializedPageAsset.cause = PageCause.fromJson(reader);
                } else if ("referrer".equals(fieldName)) {
                    deserializedPageAsset.referrer = reader.getString();
                } else if ("redirectUrls".equals(fieldName)) {
                    List<ObservedString> redirectUrls = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.redirectUrls = redirectUrls;
                } else if ("redirectType".equals(fieldName)) {
                    deserializedPageAsset.redirectType = PageAssetRedirectType.fromString(reader.getString());
                } else if ("finalUrls".equals(fieldName)) {
                    List<ObservedString> finalUrls = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.finalUrls = finalUrls;
                } else if ("finalResponseCodes".equals(fieldName)) {
                    List<ObservedInteger> finalResponseCodes
                        = reader.readArray(reader1 -> ObservedInteger.fromJson(reader1));
                    deserializedPageAsset.finalResponseCodes = finalResponseCodes;
                } else if ("parkedPage".equals(fieldName)) {
                    List<ObservedBoolean> parkedPage = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.parkedPage = parkedPage;
                } else if ("resourceUrls".equals(fieldName)) {
                    List<ResourceUrl> resourceUrls = reader.readArray(reader1 -> ResourceUrl.fromJson(reader1));
                    deserializedPageAsset.resourceUrls = resourceUrls;
                } else if ("guids".equals(fieldName)) {
                    List<GuidPair> guids = reader.readArray(reader1 -> GuidPair.fromJson(reader1));
                    deserializedPageAsset.guids = guids;
                } else if ("finalIpAddresses".equals(fieldName)) {
                    List<ObservedString> finalIpAddresses
                        = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.finalIpAddresses = finalIpAddresses;
                } else if ("asns".equals(fieldName)) {
                    List<ObservedLong> asns = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedPageAsset.asns = asns;
                } else if ("ipBlocks".equals(fieldName)) {
                    List<IpBlock> ipBlocks = reader.readArray(reader1 -> IpBlock.fromJson(reader1));
                    deserializedPageAsset.ipBlocks = ipBlocks;
                } else if ("finalAsns".equals(fieldName)) {
                    List<ObservedLong> finalAsns = reader.readArray(reader1 -> ObservedLong.fromJson(reader1));
                    deserializedPageAsset.finalAsns = finalAsns;
                } else if ("finalIpBlocks".equals(fieldName)) {
                    List<IpBlock> finalIpBlocks = reader.readArray(reader1 -> IpBlock.fromJson(reader1));
                    deserializedPageAsset.finalIpBlocks = finalIpBlocks;
                } else if ("responseBodies".equals(fieldName)) {
                    List<ObservedString> responseBodies = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.responseBodies = responseBodies;
                } else if ("domainAsset".equals(fieldName)) {
                    deserializedPageAsset.domainAsset = DomainAsset.fromJson(reader);
                } else if ("rootUrl".equals(fieldName)) {
                    deserializedPageAsset.rootUrl = ObservedBoolean.fromJson(reader);
                } else if ("isRootUrl".equals(fieldName)) {
                    deserializedPageAsset.isRootUrl = reader.getNullable(JsonReader::getBoolean);
                } else if ("location".equals(fieldName)) {
                    List<ObservedLocation> location = reader.readArray(reader1 -> ObservedLocation.fromJson(reader1));
                    deserializedPageAsset.location = location;
                } else if ("services".equals(fieldName)) {
                    List<Service> services = reader.readArray(reader1 -> Service.fromJson(reader1));
                    deserializedPageAsset.services = services;
                } else if ("siteStatus".equals(fieldName)) {
                    deserializedPageAsset.siteStatus = reader.getString();
                } else if ("cnames".equals(fieldName)) {
                    List<ObservedString> cnames = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.cnames = cnames;
                } else if ("cdns".equals(fieldName)) {
                    List<ObservedString> cdns = reader.readArray(reader1 -> ObservedString.fromJson(reader1));
                    deserializedPageAsset.cdns = cdns;
                } else if ("host".equals(fieldName)) {
                    deserializedPageAsset.host = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedPageAsset.domain = reader.getString();
                } else if ("sslServerConfig".equals(fieldName)) {
                    List<SslServerConfig> sslServerConfig
                        = reader.readArray(reader1 -> SslServerConfig.fromJson(reader1));
                    deserializedPageAsset.sslServerConfig = sslServerConfig;
                } else if ("gdprAssetSecurityPolicies".equals(fieldName)) {
                    List<AssetSecurityPolicy> gdprAssetSecurityPolicies
                        = reader.readArray(reader1 -> AssetSecurityPolicy.fromJson(reader1));
                    deserializedPageAsset.gdprAssetSecurityPolicies = gdprAssetSecurityPolicies;
                } else if ("ipv4".equals(fieldName)) {
                    List<ObservedBoolean> ipv4 = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.ipv4 = ipv4;
                } else if ("ipv6".equals(fieldName)) {
                    List<ObservedBoolean> ipv6 = reader.readArray(reader1 -> ObservedBoolean.fromJson(reader1));
                    deserializedPageAsset.ipv6 = ipv6;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPageAsset;
        });
    }
}
