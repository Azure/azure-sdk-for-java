// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Source entity used to drive discovery.
 */
@Fluent
public final class DiscoSource implements JsonSerializable<DiscoSource> {

    /*
     * The kind of disco source.
     */
    @Generated
    private DiscoSourceKind kind;

    /*
     * The name for the disco source.
     */
    @Generated
    private String name;

    /**
     * Creates an instance of DiscoSource class.
     */
    @Generated
    public DiscoSource() {
    }

    /**
     * Get the kind property: The kind of disco source.
     *
     * @return the kind value.
     */
    @Generated
    public DiscoSourceKind getKind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of disco source.
     *
     * @param kind the kind value to set.
     * @return the DiscoSource object itself.
     */
    @Generated
    public DiscoSource setKind(DiscoSourceKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the name property: The name for the disco source.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name for the disco source.
     *
     * @param name the name value to set.
     * @return the DiscoSource object itself.
     */
    @Generated
    public DiscoSource setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoSource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiscoSource.
     */
    @Generated
    public static DiscoSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoSource deserializedDiscoSource = new DiscoSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedDiscoSource.kind = DiscoSourceKind.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedDiscoSource.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDiscoSource;
        });
    }
}
