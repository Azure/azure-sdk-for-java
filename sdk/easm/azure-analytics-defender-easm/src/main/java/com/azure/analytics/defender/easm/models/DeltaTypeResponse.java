// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The type of Delta response for each asset kind.
 */
@Immutable
public class DeltaTypeResponse implements JsonSerializable<DeltaTypeResponse> {
    /*
     * The kind of asset
     */
    @Generated
    private final GlobalAssetType kind;

    /*
     * The amount of assets removed for one asset kind
     */
    @Generated
    private final long removed;

    /*
     * The amount of assets added for one asset kind
     */
    @Generated
    private final long added;

    /*
     * The amount of assets changed for one asset kind
     */
    @Generated
    private final long difference;

    /**
     * Creates an instance of DeltaTypeResponse class.
     * 
     * @param kind the kind value to set.
     * @param removed the removed value to set.
     * @param added the added value to set.
     * @param difference the difference value to set.
     */
    @Generated
    protected DeltaTypeResponse(GlobalAssetType kind, long removed, long added, long difference) {
        this.kind = kind;
        this.removed = removed;
        this.added = added;
        this.difference = difference;
    }

    /**
     * Get the kind property: The kind of asset.
     * 
     * @return the kind value.
     */
    @Generated
    public GlobalAssetType getKind() {
        return this.kind;
    }

    /**
     * Get the removed property: The amount of assets removed for one asset kind.
     * 
     * @return the removed value.
     */
    @Generated
    public long getRemoved() {
        return this.removed;
    }

    /**
     * Get the added property: The amount of assets added for one asset kind.
     * 
     * @return the added value.
     */
    @Generated
    public long getAdded() {
        return this.added;
    }

    /**
     * Get the difference property: The amount of assets changed for one asset kind.
     * 
     * @return the difference value.
     */
    @Generated
    public long getDifference() {
        return this.difference;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeLongField("removed", this.removed);
        jsonWriter.writeLongField("added", this.added);
        jsonWriter.writeLongField("difference", this.difference);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaTypeResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaTypeResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeltaTypeResponse.
     */
    @Generated
    public static DeltaTypeResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalAssetType kind = null;
            long removed = 0L;
            long added = 0L;
            long difference = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    kind = GlobalAssetType.fromString(reader.getString());
                } else if ("removed".equals(fieldName)) {
                    removed = reader.getLong();
                } else if ("added".equals(fieldName)) {
                    added = reader.getLong();
                } else if ("difference".equals(fieldName)) {
                    difference = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new DeltaTypeResponse(kind, removed, added, difference);
        });
    }
}
