// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Define response body for getting delta summary.
 */
@Immutable
public final class DeltaSummaryResult implements JsonSerializable<DeltaSummaryResult> {
    /*
     * Contains added, removed, and difference values for the whole range either 7 or 30 days
     */
    @Generated
    private final DeltaRangeResult summary;

    /*
     * Contains added, removed, count, and difference values for each day
     */
    @Generated
    private final List<DeltaDateResult> daily;

    /**
     * Creates an instance of DeltaSummaryResult class.
     * 
     * @param summary the summary value to set.
     * @param daily the daily value to set.
     */
    @Generated
    private DeltaSummaryResult(DeltaRangeResult summary, List<DeltaDateResult> daily) {
        this.summary = summary;
        this.daily = daily;
    }

    /**
     * Get the summary property: Contains added, removed, and difference values for the whole range either 7 or 30 days.
     * 
     * @return the summary value.
     */
    @Generated
    public DeltaRangeResult getSummary() {
        return this.summary;
    }

    /**
     * Get the daily property: Contains added, removed, count, and difference values for each day.
     * 
     * @return the daily value.
     */
    @Generated
    public List<DeltaDateResult> getDaily() {
        return this.daily;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("summary", this.summary);
        jsonWriter.writeArrayField("daily", this.daily, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaSummaryResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaSummaryResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeltaSummaryResult.
     */
    @Generated
    public static DeltaSummaryResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaRangeResult summary = null;
            List<DeltaDateResult> daily = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summary".equals(fieldName)) {
                    summary = DeltaRangeResult.fromJson(reader);
                } else if ("daily".equals(fieldName)) {
                    daily = reader.readArray(reader1 -> DeltaDateResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new DeltaSummaryResult(summary, daily);
        });
    }
}
