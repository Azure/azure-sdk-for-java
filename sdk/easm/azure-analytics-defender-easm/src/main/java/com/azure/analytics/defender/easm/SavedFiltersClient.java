// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm;

import com.azure.analytics.defender.easm.implementation.SavedFiltersImpl;
import com.azure.analytics.defender.easm.models.SavedFilter;
import com.azure.analytics.defender.easm.models.SavedFilterData;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous EasmClient type.
 */
@ServiceClient(builder = EasmClientBuilder.class)
public final class SavedFiltersClient {
    @Generated
    private final SavedFiltersImpl serviceClient;

    /**
     * Initializes an instance of SavedFiltersClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SavedFiltersClient(SavedFiltersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Filter the result list using the given expression.</td>
     * </tr>
     * <tr>
     * <td>skip</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of result items to skip.</td>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of SavedFilter items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSavedFilter(RequestOptions requestOptions) {
        return this.serviceClient.listSavedFilter(requestOptions);
    }

    /**
     * Retrieve a saved filter by filterName.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     * 
     * @param filterName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSavedFilterWithResponse(String filterName, RequestOptions requestOptions) {
        return this.serviceClient.getSavedFilterWithResponse(filterName, requestOptions);
    }

    /**
     * Create or replace a saved filter with a given filterName.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     filter: String (Required)
     *     description: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     * 
     * @param filterName The caller provided unique name for the resource.
     * @param savedFilterData A request body used to create a saved filter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceSavedFilterWithResponse(String filterName, BinaryData savedFilterData,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceSavedFilterWithResponse(filterName, savedFilterData, requestOptions);
    }

    /**
     * Delete a saved filter with a given filterName.
     * 
     * @param filterName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteSavedFilterWithResponse(String filterName, RequestOptions requestOptions) {
        return this.serviceClient.deleteSavedFilterWithResponse(filterName, requestOptions);
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     * 
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of SavedFilter items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SavedFilter> listSavedFilter(String filter, Integer skip) {
        // Generated convenience method for listSavedFilter
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listSavedFilter(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(SavedFilter.class));
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of SavedFilter items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SavedFilter> listSavedFilter() {
        // Generated convenience method for listSavedFilter
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSavedFilter(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(SavedFilter.class));
    }

    /**
     * Retrieve a saved filter by filterName.
     * 
     * @param filterName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilter getSavedFilter(String filterName) {
        // Generated convenience method for getSavedFilterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSavedFilterWithResponse(filterName, requestOptions).getValue().toObject(SavedFilter.class);
    }

    /**
     * Create or replace a saved filter with a given filterName.
     * 
     * @param filterName The caller provided unique name for the resource.
     * @param savedFilterData A request body used to create a saved filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilter createOrReplaceSavedFilter(String filterName, SavedFilterData savedFilterData) {
        // Generated convenience method for createOrReplaceSavedFilterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceSavedFilterWithResponse(filterName, BinaryData.fromObject(savedFilterData),
            requestOptions).getValue().toObject(SavedFilter.class);
    }

    /**
     * Delete a saved filter with a given filterName.
     * 
     * @param filterName The caller provided unique name for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSavedFilter(String filterName) {
        // Generated convenience method for deleteSavedFilterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteSavedFilterWithResponse(filterName, requestOptions).getValue();
    }
}
