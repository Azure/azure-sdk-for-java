// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Cvss3Summary model.
 */
@Immutable
public final class Cvss3Summary implements JsonSerializable<Cvss3Summary> {

    /*
     * The version property.
     */
    @Generated
    private String version;

    /*
     * The vectorString property.
     */
    @Generated
    private String vectorString;

    /*
     * The attackVector property.
     */
    @Generated
    private String attackVector;

    /*
     * The attackComplexity property.
     */
    @Generated
    private String attackComplexity;

    /*
     * The privilegesRequired property.
     */
    @Generated
    private String privilegesRequired;

    /*
     * The userInteraction property.
     */
    @Generated
    private String userInteraction;

    /*
     * The scope property.
     */
    @Generated
    private String scope;

    /*
     * The confidentialityImpact property.
     */
    @Generated
    private String confidentialityImpact;

    /*
     * The integrityImpact property.
     */
    @Generated
    private String integrityImpact;

    /*
     * The availabilityImpact property.
     */
    @Generated
    private String availabilityImpact;

    /*
     * The baseScore property.
     */
    @Generated
    private Double baseScore;

    /*
     * The baseSeverity property.
     */
    @Generated
    private String baseSeverity;

    /*
     * The exploitCodeMaturity property.
     */
    @Generated
    private String exploitCodeMaturity;

    /*
     * The remediationLevel property.
     */
    @Generated
    private String remediationLevel;

    /*
     * The reportConfidence property.
     */
    @Generated
    private String reportConfidence;

    /*
     * The exploitabilityScore property.
     */
    @Generated
    private Double exploitabilityScore;

    /*
     * The impactScore property.
     */
    @Generated
    private Double impactScore;

    /**
     * Creates an instance of Cvss3Summary class.
     */
    @Generated
    private Cvss3Summary() {
    }

    /**
     * Get the version property: The version property.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the vectorString property: The vectorString property.
     *
     * @return the vectorString value.
     */
    @Generated
    public String getVectorString() {
        return this.vectorString;
    }

    /**
     * Get the attackVector property: The attackVector property.
     *
     * @return the attackVector value.
     */
    @Generated
    public String getAttackVector() {
        return this.attackVector;
    }

    /**
     * Get the attackComplexity property: The attackComplexity property.
     *
     * @return the attackComplexity value.
     */
    @Generated
    public String getAttackComplexity() {
        return this.attackComplexity;
    }

    /**
     * Get the privilegesRequired property: The privilegesRequired property.
     *
     * @return the privilegesRequired value.
     */
    @Generated
    public String getPrivilegesRequired() {
        return this.privilegesRequired;
    }

    /**
     * Get the userInteraction property: The userInteraction property.
     *
     * @return the userInteraction value.
     */
    @Generated
    public String getUserInteraction() {
        return this.userInteraction;
    }

    /**
     * Get the scope property: The scope property.
     *
     * @return the scope value.
     */
    @Generated
    public String getScope() {
        return this.scope;
    }

    /**
     * Get the confidentialityImpact property: The confidentialityImpact property.
     *
     * @return the confidentialityImpact value.
     */
    @Generated
    public String getConfidentialityImpact() {
        return this.confidentialityImpact;
    }

    /**
     * Get the integrityImpact property: The integrityImpact property.
     *
     * @return the integrityImpact value.
     */
    @Generated
    public String getIntegrityImpact() {
        return this.integrityImpact;
    }

    /**
     * Get the availabilityImpact property: The availabilityImpact property.
     *
     * @return the availabilityImpact value.
     */
    @Generated
    public String getAvailabilityImpact() {
        return this.availabilityImpact;
    }

    /**
     * Get the baseScore property: The baseScore property.
     *
     * @return the baseScore value.
     */
    @Generated
    public Double getBaseScore() {
        return this.baseScore;
    }

    /**
     * Get the baseSeverity property: The baseSeverity property.
     *
     * @return the baseSeverity value.
     */
    @Generated
    public String getBaseSeverity() {
        return this.baseSeverity;
    }

    /**
     * Get the exploitCodeMaturity property: The exploitCodeMaturity property.
     *
     * @return the exploitCodeMaturity value.
     */
    @Generated
    public String getExploitCodeMaturity() {
        return this.exploitCodeMaturity;
    }

    /**
     * Get the remediationLevel property: The remediationLevel property.
     *
     * @return the remediationLevel value.
     */
    @Generated
    public String getRemediationLevel() {
        return this.remediationLevel;
    }

    /**
     * Get the reportConfidence property: The reportConfidence property.
     *
     * @return the reportConfidence value.
     */
    @Generated
    public String getReportConfidence() {
        return this.reportConfidence;
    }

    /**
     * Get the exploitabilityScore property: The exploitabilityScore property.
     *
     * @return the exploitabilityScore value.
     */
    @Generated
    public Double getExploitabilityScore() {
        return this.exploitabilityScore;
    }

    /**
     * Get the impactScore property: The impactScore property.
     *
     * @return the impactScore value.
     */
    @Generated
    public Double getImpactScore() {
        return this.impactScore;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("vectorString", this.vectorString);
        jsonWriter.writeStringField("attackVector", this.attackVector);
        jsonWriter.writeStringField("attackComplexity", this.attackComplexity);
        jsonWriter.writeStringField("privilegesRequired", this.privilegesRequired);
        jsonWriter.writeStringField("userInteraction", this.userInteraction);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("confidentialityImpact", this.confidentialityImpact);
        jsonWriter.writeStringField("integrityImpact", this.integrityImpact);
        jsonWriter.writeStringField("availabilityImpact", this.availabilityImpact);
        jsonWriter.writeNumberField("baseScore", this.baseScore);
        jsonWriter.writeStringField("baseSeverity", this.baseSeverity);
        jsonWriter.writeStringField("exploitCodeMaturity", this.exploitCodeMaturity);
        jsonWriter.writeStringField("remediationLevel", this.remediationLevel);
        jsonWriter.writeStringField("reportConfidence", this.reportConfidence);
        jsonWriter.writeNumberField("exploitabilityScore", this.exploitabilityScore);
        jsonWriter.writeNumberField("impactScore", this.impactScore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cvss3Summary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cvss3Summary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Cvss3Summary.
     */
    @Generated
    public static Cvss3Summary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cvss3Summary deserializedCvss3Summary = new Cvss3Summary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("version".equals(fieldName)) {
                    deserializedCvss3Summary.version = reader.getString();
                } else if ("vectorString".equals(fieldName)) {
                    deserializedCvss3Summary.vectorString = reader.getString();
                } else if ("attackVector".equals(fieldName)) {
                    deserializedCvss3Summary.attackVector = reader.getString();
                } else if ("attackComplexity".equals(fieldName)) {
                    deserializedCvss3Summary.attackComplexity = reader.getString();
                } else if ("privilegesRequired".equals(fieldName)) {
                    deserializedCvss3Summary.privilegesRequired = reader.getString();
                } else if ("userInteraction".equals(fieldName)) {
                    deserializedCvss3Summary.userInteraction = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedCvss3Summary.scope = reader.getString();
                } else if ("confidentialityImpact".equals(fieldName)) {
                    deserializedCvss3Summary.confidentialityImpact = reader.getString();
                } else if ("integrityImpact".equals(fieldName)) {
                    deserializedCvss3Summary.integrityImpact = reader.getString();
                } else if ("availabilityImpact".equals(fieldName)) {
                    deserializedCvss3Summary.availabilityImpact = reader.getString();
                } else if ("baseScore".equals(fieldName)) {
                    deserializedCvss3Summary.baseScore = reader.getNullable(JsonReader::getDouble);
                } else if ("baseSeverity".equals(fieldName)) {
                    deserializedCvss3Summary.baseSeverity = reader.getString();
                } else if ("exploitCodeMaturity".equals(fieldName)) {
                    deserializedCvss3Summary.exploitCodeMaturity = reader.getString();
                } else if ("remediationLevel".equals(fieldName)) {
                    deserializedCvss3Summary.remediationLevel = reader.getString();
                } else if ("reportConfidence".equals(fieldName)) {
                    deserializedCvss3Summary.reportConfidence = reader.getString();
                } else if ("exploitabilityScore".equals(fieldName)) {
                    deserializedCvss3Summary.exploitabilityScore = reader.getNullable(JsonReader::getDouble);
                } else if ("impactScore".equals(fieldName)) {
                    deserializedCvss3Summary.impactScore = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedCvss3Summary;
        });
    }
}
