// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The HostCore model.
 */
@Immutable
public final class HostCore implements JsonSerializable<HostCore> {

    /*
     * The host property.
     */
    @Generated
    private String host;

    /*
     * The domain property.
     */
    @Generated
    private String domain;

    /*
     * The firstSeen property.
     */
    @Generated
    private OffsetDateTime firstSeen;

    /*
     * The lastSeen property.
     */
    @Generated
    private OffsetDateTime lastSeen;

    /*
     * The count property.
     */
    @Generated
    private Long count;

    /*
     * The blacklistCauseFirstSeen property.
     */
    @Generated
    private OffsetDateTime blacklistCauseFirstSeen;

    /*
     * The blacklistCauseLastSeen property.
     */
    @Generated
    private OffsetDateTime blacklistCauseLastSeen;

    /*
     * The blacklistCauseCount property.
     */
    @Generated
    private Long blacklistCauseCount;

    /*
     * The blacklistResourceFirstSeen property.
     */
    @Generated
    private OffsetDateTime blacklistResourceFirstSeen;

    /*
     * The blacklistResourceLastSeen property.
     */
    @Generated
    private OffsetDateTime blacklistResourceLastSeen;

    /*
     * The blacklistResourceCount property.
     */
    @Generated
    private Long blacklistResourceCount;

    /*
     * The blacklistSequenceFirstSeen property.
     */
    @Generated
    private OffsetDateTime blacklistSequenceFirstSeen;

    /*
     * The blacklistSequenceLastSeen property.
     */
    @Generated
    private OffsetDateTime blacklistSequenceLastSeen;

    /*
     * The blacklistSequenceCount property.
     */
    @Generated
    private Long blacklistSequenceCount;

    /*
     * The phishCauseCount property.
     */
    @Generated
    private Long phishCauseCount;

    /*
     * The malwareCauseCount property.
     */
    @Generated
    private Long malwareCauseCount;

    /*
     * The spamCauseCount property.
     */
    @Generated
    private Long spamCauseCount;

    /*
     * The scamCauseCount property.
     */
    @Generated
    private Long scamCauseCount;

    /*
     * The phishResourceCount property.
     */
    @Generated
    private Long phishResourceCount;

    /*
     * The malwareResourceCount property.
     */
    @Generated
    private Long malwareResourceCount;

    /*
     * The spamResourceCount property.
     */
    @Generated
    private Long spamResourceCount;

    /*
     * The scamResourceCount property.
     */
    @Generated
    private Long scamResourceCount;

    /*
     * The phishSequenceCount property.
     */
    @Generated
    private Long phishSequenceCount;

    /*
     * The malwareSequenceCount property.
     */
    @Generated
    private Long malwareSequenceCount;

    /*
     * The spamSequenceCount property.
     */
    @Generated
    private Long spamSequenceCount;

    /*
     * The scamSequenceCount property.
     */
    @Generated
    private Long scamSequenceCount;

    /*
     * The alexaRank property.
     */
    @Generated
    private Integer alexaRank;

    /*
     * The hostReputationScore property.
     */
    @Generated
    private Integer hostReputationScore;

    /*
     * The hostPhishReputationScore property.
     */
    @Generated
    private Integer hostPhishReputationScore;

    /*
     * The hostMalwareReputationScore property.
     */
    @Generated
    private Integer hostMalwareReputationScore;

    /*
     * The hostSpamReputationScore property.
     */
    @Generated
    private Integer hostSpamReputationScore;

    /*
     * The hostScamReputationScore property.
     */
    @Generated
    private Integer hostScamReputationScore;

    /*
     * The domainReputationScore property.
     */
    @Generated
    private Integer domainReputationScore;

    /*
     * The domainPhishReputationScore property.
     */
    @Generated
    private Integer domainPhishReputationScore;

    /*
     * The domainMalwareReputationScore property.
     */
    @Generated
    private Integer domainMalwareReputationScore;

    /*
     * The domainSpamReputationScore property.
     */
    @Generated
    private Integer domainSpamReputationScore;

    /*
     * The domainScamReputationScore property.
     */
    @Generated
    private Integer domainScamReputationScore;

    /*
     * The uuid property.
     */
    @Generated
    private String uuid;

    /**
     * Creates an instance of HostCore class.
     */
    @Generated
    private HostCore() {
    }

    /**
     * Get the host property: The host property.
     *
     * @return the host value.
     */
    @Generated
    public String getHost() {
        return this.host;
    }

    /**
     * Get the domain property: The domain property.
     *
     * @return the domain value.
     */
    @Generated
    public String getDomain() {
        return this.domain;
    }

    /**
     * Get the firstSeen property: The firstSeen property.
     *
     * @return the firstSeen value.
     */
    @Generated
    public OffsetDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Get the lastSeen property: The lastSeen property.
     *
     * @return the lastSeen value.
     */
    @Generated
    public OffsetDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Get the count property: The count property.
     *
     * @return the count value.
     */
    @Generated
    public Long getCount() {
        return this.count;
    }

    /**
     * Get the blacklistCauseFirstSeen property: The blacklistCauseFirstSeen property.
     *
     * @return the blacklistCauseFirstSeen value.
     */
    @Generated
    public OffsetDateTime getBlacklistCauseFirstSeen() {
        return this.blacklistCauseFirstSeen;
    }

    /**
     * Get the blacklistCauseLastSeen property: The blacklistCauseLastSeen property.
     *
     * @return the blacklistCauseLastSeen value.
     */
    @Generated
    public OffsetDateTime getBlacklistCauseLastSeen() {
        return this.blacklistCauseLastSeen;
    }

    /**
     * Get the blacklistCauseCount property: The blacklistCauseCount property.
     *
     * @return the blacklistCauseCount value.
     */
    @Generated
    public Long getBlacklistCauseCount() {
        return this.blacklistCauseCount;
    }

    /**
     * Get the blacklistResourceFirstSeen property: The blacklistResourceFirstSeen property.
     *
     * @return the blacklistResourceFirstSeen value.
     */
    @Generated
    public OffsetDateTime getBlacklistResourceFirstSeen() {
        return this.blacklistResourceFirstSeen;
    }

    /**
     * Get the blacklistResourceLastSeen property: The blacklistResourceLastSeen property.
     *
     * @return the blacklistResourceLastSeen value.
     */
    @Generated
    public OffsetDateTime getBlacklistResourceLastSeen() {
        return this.blacklistResourceLastSeen;
    }

    /**
     * Get the blacklistResourceCount property: The blacklistResourceCount property.
     *
     * @return the blacklistResourceCount value.
     */
    @Generated
    public Long getBlacklistResourceCount() {
        return this.blacklistResourceCount;
    }

    /**
     * Get the blacklistSequenceFirstSeen property: The blacklistSequenceFirstSeen property.
     *
     * @return the blacklistSequenceFirstSeen value.
     */
    @Generated
    public OffsetDateTime getBlacklistSequenceFirstSeen() {
        return this.blacklistSequenceFirstSeen;
    }

    /**
     * Get the blacklistSequenceLastSeen property: The blacklistSequenceLastSeen property.
     *
     * @return the blacklistSequenceLastSeen value.
     */
    @Generated
    public OffsetDateTime getBlacklistSequenceLastSeen() {
        return this.blacklistSequenceLastSeen;
    }

    /**
     * Get the blacklistSequenceCount property: The blacklistSequenceCount property.
     *
     * @return the blacklistSequenceCount value.
     */
    @Generated
    public Long getBlacklistSequenceCount() {
        return this.blacklistSequenceCount;
    }

    /**
     * Get the phishCauseCount property: The phishCauseCount property.
     *
     * @return the phishCauseCount value.
     */
    @Generated
    public Long getPhishCauseCount() {
        return this.phishCauseCount;
    }

    /**
     * Get the malwareCauseCount property: The malwareCauseCount property.
     *
     * @return the malwareCauseCount value.
     */
    @Generated
    public Long getMalwareCauseCount() {
        return this.malwareCauseCount;
    }

    /**
     * Get the spamCauseCount property: The spamCauseCount property.
     *
     * @return the spamCauseCount value.
     */
    @Generated
    public Long getSpamCauseCount() {
        return this.spamCauseCount;
    }

    /**
     * Get the scamCauseCount property: The scamCauseCount property.
     *
     * @return the scamCauseCount value.
     */
    @Generated
    public Long getScamCauseCount() {
        return this.scamCauseCount;
    }

    /**
     * Get the phishResourceCount property: The phishResourceCount property.
     *
     * @return the phishResourceCount value.
     */
    @Generated
    public Long getPhishResourceCount() {
        return this.phishResourceCount;
    }

    /**
     * Get the malwareResourceCount property: The malwareResourceCount property.
     *
     * @return the malwareResourceCount value.
     */
    @Generated
    public Long getMalwareResourceCount() {
        return this.malwareResourceCount;
    }

    /**
     * Get the spamResourceCount property: The spamResourceCount property.
     *
     * @return the spamResourceCount value.
     */
    @Generated
    public Long getSpamResourceCount() {
        return this.spamResourceCount;
    }

    /**
     * Get the scamResourceCount property: The scamResourceCount property.
     *
     * @return the scamResourceCount value.
     */
    @Generated
    public Long getScamResourceCount() {
        return this.scamResourceCount;
    }

    /**
     * Get the phishSequenceCount property: The phishSequenceCount property.
     *
     * @return the phishSequenceCount value.
     */
    @Generated
    public Long getPhishSequenceCount() {
        return this.phishSequenceCount;
    }

    /**
     * Get the malwareSequenceCount property: The malwareSequenceCount property.
     *
     * @return the malwareSequenceCount value.
     */
    @Generated
    public Long getMalwareSequenceCount() {
        return this.malwareSequenceCount;
    }

    /**
     * Get the spamSequenceCount property: The spamSequenceCount property.
     *
     * @return the spamSequenceCount value.
     */
    @Generated
    public Long getSpamSequenceCount() {
        return this.spamSequenceCount;
    }

    /**
     * Get the scamSequenceCount property: The scamSequenceCount property.
     *
     * @return the scamSequenceCount value.
     */
    @Generated
    public Long getScamSequenceCount() {
        return this.scamSequenceCount;
    }

    /**
     * Get the alexaRank property: The alexaRank property.
     *
     * @return the alexaRank value.
     */
    @Generated
    public Integer getAlexaRank() {
        return this.alexaRank;
    }

    /**
     * Get the hostReputationScore property: The hostReputationScore property.
     *
     * @return the hostReputationScore value.
     */
    @Generated
    public Integer getHostReputationScore() {
        return this.hostReputationScore;
    }

    /**
     * Get the hostPhishReputationScore property: The hostPhishReputationScore property.
     *
     * @return the hostPhishReputationScore value.
     */
    @Generated
    public Integer getHostPhishReputationScore() {
        return this.hostPhishReputationScore;
    }

    /**
     * Get the hostMalwareReputationScore property: The hostMalwareReputationScore property.
     *
     * @return the hostMalwareReputationScore value.
     */
    @Generated
    public Integer getHostMalwareReputationScore() {
        return this.hostMalwareReputationScore;
    }

    /**
     * Get the hostSpamReputationScore property: The hostSpamReputationScore property.
     *
     * @return the hostSpamReputationScore value.
     */
    @Generated
    public Integer getHostSpamReputationScore() {
        return this.hostSpamReputationScore;
    }

    /**
     * Get the hostScamReputationScore property: The hostScamReputationScore property.
     *
     * @return the hostScamReputationScore value.
     */
    @Generated
    public Integer getHostScamReputationScore() {
        return this.hostScamReputationScore;
    }

    /**
     * Get the domainReputationScore property: The domainReputationScore property.
     *
     * @return the domainReputationScore value.
     */
    @Generated
    public Integer getDomainReputationScore() {
        return this.domainReputationScore;
    }

    /**
     * Get the domainPhishReputationScore property: The domainPhishReputationScore property.
     *
     * @return the domainPhishReputationScore value.
     */
    @Generated
    public Integer getDomainPhishReputationScore() {
        return this.domainPhishReputationScore;
    }

    /**
     * Get the domainMalwareReputationScore property: The domainMalwareReputationScore property.
     *
     * @return the domainMalwareReputationScore value.
     */
    @Generated
    public Integer getDomainMalwareReputationScore() {
        return this.domainMalwareReputationScore;
    }

    /**
     * Get the domainSpamReputationScore property: The domainSpamReputationScore property.
     *
     * @return the domainSpamReputationScore value.
     */
    @Generated
    public Integer getDomainSpamReputationScore() {
        return this.domainSpamReputationScore;
    }

    /**
     * Get the domainScamReputationScore property: The domainScamReputationScore property.
     *
     * @return the domainScamReputationScore value.
     */
    @Generated
    public Integer getDomainScamReputationScore() {
        return this.domainScamReputationScore;
    }

    /**
     * Get the uuid property: The uuid property.
     *
     * @return the uuid value.
     */
    @Generated
    public String getUuid() {
        return this.uuid;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeStringField("firstSeen",
            this.firstSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstSeen));
        jsonWriter.writeStringField("lastSeen",
            this.lastSeen == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeen));
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("blacklistCauseFirstSeen",
            this.blacklistCauseFirstSeen == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.blacklistCauseFirstSeen));
        jsonWriter.writeStringField("blacklistCauseLastSeen",
            this.blacklistCauseLastSeen == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.blacklistCauseLastSeen));
        jsonWriter.writeNumberField("blacklistCauseCount", this.blacklistCauseCount);
        jsonWriter.writeStringField("blacklistResourceFirstSeen",
            this.blacklistResourceFirstSeen == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.blacklistResourceFirstSeen));
        jsonWriter.writeStringField("blacklistResourceLastSeen",
            this.blacklistResourceLastSeen == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.blacklistResourceLastSeen));
        jsonWriter.writeNumberField("blacklistResourceCount", this.blacklistResourceCount);
        jsonWriter.writeStringField("blacklistSequenceFirstSeen",
            this.blacklistSequenceFirstSeen == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.blacklistSequenceFirstSeen));
        jsonWriter.writeStringField("blacklistSequenceLastSeen",
            this.blacklistSequenceLastSeen == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.blacklistSequenceLastSeen));
        jsonWriter.writeNumberField("blacklistSequenceCount", this.blacklistSequenceCount);
        jsonWriter.writeNumberField("phishCauseCount", this.phishCauseCount);
        jsonWriter.writeNumberField("malwareCauseCount", this.malwareCauseCount);
        jsonWriter.writeNumberField("spamCauseCount", this.spamCauseCount);
        jsonWriter.writeNumberField("scamCauseCount", this.scamCauseCount);
        jsonWriter.writeNumberField("phishResourceCount", this.phishResourceCount);
        jsonWriter.writeNumberField("malwareResourceCount", this.malwareResourceCount);
        jsonWriter.writeNumberField("spamResourceCount", this.spamResourceCount);
        jsonWriter.writeNumberField("scamResourceCount", this.scamResourceCount);
        jsonWriter.writeNumberField("phishSequenceCount", this.phishSequenceCount);
        jsonWriter.writeNumberField("malwareSequenceCount", this.malwareSequenceCount);
        jsonWriter.writeNumberField("spamSequenceCount", this.spamSequenceCount);
        jsonWriter.writeNumberField("scamSequenceCount", this.scamSequenceCount);
        jsonWriter.writeNumberField("alexaRank", this.alexaRank);
        jsonWriter.writeNumberField("hostReputationScore", this.hostReputationScore);
        jsonWriter.writeNumberField("hostPhishReputationScore", this.hostPhishReputationScore);
        jsonWriter.writeNumberField("hostMalwareReputationScore", this.hostMalwareReputationScore);
        jsonWriter.writeNumberField("hostSpamReputationScore", this.hostSpamReputationScore);
        jsonWriter.writeNumberField("hostScamReputationScore", this.hostScamReputationScore);
        jsonWriter.writeNumberField("domainReputationScore", this.domainReputationScore);
        jsonWriter.writeNumberField("domainPhishReputationScore", this.domainPhishReputationScore);
        jsonWriter.writeNumberField("domainMalwareReputationScore", this.domainMalwareReputationScore);
        jsonWriter.writeNumberField("domainSpamReputationScore", this.domainSpamReputationScore);
        jsonWriter.writeNumberField("domainScamReputationScore", this.domainScamReputationScore);
        jsonWriter.writeStringField("uuid", this.uuid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostCore from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostCore if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the HostCore.
     */
    @Generated
    public static HostCore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostCore deserializedHostCore = new HostCore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("host".equals(fieldName)) {
                    deserializedHostCore.host = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedHostCore.domain = reader.getString();
                } else if ("firstSeen".equals(fieldName)) {
                    deserializedHostCore.firstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSeen".equals(fieldName)) {
                    deserializedHostCore.lastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("count".equals(fieldName)) {
                    deserializedHostCore.count = reader.getNullable(JsonReader::getLong);
                } else if ("blacklistCauseFirstSeen".equals(fieldName)) {
                    deserializedHostCore.blacklistCauseFirstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("blacklistCauseLastSeen".equals(fieldName)) {
                    deserializedHostCore.blacklistCauseLastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("blacklistCauseCount".equals(fieldName)) {
                    deserializedHostCore.blacklistCauseCount = reader.getNullable(JsonReader::getLong);
                } else if ("blacklistResourceFirstSeen".equals(fieldName)) {
                    deserializedHostCore.blacklistResourceFirstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("blacklistResourceLastSeen".equals(fieldName)) {
                    deserializedHostCore.blacklistResourceLastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("blacklistResourceCount".equals(fieldName)) {
                    deserializedHostCore.blacklistResourceCount = reader.getNullable(JsonReader::getLong);
                } else if ("blacklistSequenceFirstSeen".equals(fieldName)) {
                    deserializedHostCore.blacklistSequenceFirstSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("blacklistSequenceLastSeen".equals(fieldName)) {
                    deserializedHostCore.blacklistSequenceLastSeen = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("blacklistSequenceCount".equals(fieldName)) {
                    deserializedHostCore.blacklistSequenceCount = reader.getNullable(JsonReader::getLong);
                } else if ("phishCauseCount".equals(fieldName)) {
                    deserializedHostCore.phishCauseCount = reader.getNullable(JsonReader::getLong);
                } else if ("malwareCauseCount".equals(fieldName)) {
                    deserializedHostCore.malwareCauseCount = reader.getNullable(JsonReader::getLong);
                } else if ("spamCauseCount".equals(fieldName)) {
                    deserializedHostCore.spamCauseCount = reader.getNullable(JsonReader::getLong);
                } else if ("scamCauseCount".equals(fieldName)) {
                    deserializedHostCore.scamCauseCount = reader.getNullable(JsonReader::getLong);
                } else if ("phishResourceCount".equals(fieldName)) {
                    deserializedHostCore.phishResourceCount = reader.getNullable(JsonReader::getLong);
                } else if ("malwareResourceCount".equals(fieldName)) {
                    deserializedHostCore.malwareResourceCount = reader.getNullable(JsonReader::getLong);
                } else if ("spamResourceCount".equals(fieldName)) {
                    deserializedHostCore.spamResourceCount = reader.getNullable(JsonReader::getLong);
                } else if ("scamResourceCount".equals(fieldName)) {
                    deserializedHostCore.scamResourceCount = reader.getNullable(JsonReader::getLong);
                } else if ("phishSequenceCount".equals(fieldName)) {
                    deserializedHostCore.phishSequenceCount = reader.getNullable(JsonReader::getLong);
                } else if ("malwareSequenceCount".equals(fieldName)) {
                    deserializedHostCore.malwareSequenceCount = reader.getNullable(JsonReader::getLong);
                } else if ("spamSequenceCount".equals(fieldName)) {
                    deserializedHostCore.spamSequenceCount = reader.getNullable(JsonReader::getLong);
                } else if ("scamSequenceCount".equals(fieldName)) {
                    deserializedHostCore.scamSequenceCount = reader.getNullable(JsonReader::getLong);
                } else if ("alexaRank".equals(fieldName)) {
                    deserializedHostCore.alexaRank = reader.getNullable(JsonReader::getInt);
                } else if ("hostReputationScore".equals(fieldName)) {
                    deserializedHostCore.hostReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("hostPhishReputationScore".equals(fieldName)) {
                    deserializedHostCore.hostPhishReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("hostMalwareReputationScore".equals(fieldName)) {
                    deserializedHostCore.hostMalwareReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("hostSpamReputationScore".equals(fieldName)) {
                    deserializedHostCore.hostSpamReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("hostScamReputationScore".equals(fieldName)) {
                    deserializedHostCore.hostScamReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("domainReputationScore".equals(fieldName)) {
                    deserializedHostCore.domainReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("domainPhishReputationScore".equals(fieldName)) {
                    deserializedHostCore.domainPhishReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("domainMalwareReputationScore".equals(fieldName)) {
                    deserializedHostCore.domainMalwareReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("domainSpamReputationScore".equals(fieldName)) {
                    deserializedHostCore.domainSpamReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("domainScamReputationScore".equals(fieldName)) {
                    deserializedHostCore.domainScamReputationScore = reader.getNullable(JsonReader::getInt);
                } else if ("uuid".equals(fieldName)) {
                    deserializedHostCore.uuid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedHostCore;
        });
    }
}
