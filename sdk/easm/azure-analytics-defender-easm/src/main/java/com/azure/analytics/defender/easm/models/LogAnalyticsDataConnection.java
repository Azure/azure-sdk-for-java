// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The LogAnalyticsDataConnection model.
 */
@Immutable
public final class LogAnalyticsDataConnection extends DataConnection {

    /*
     * properties
     */
    @Generated
    private final LogAnalyticsDataConnectionProperties properties;

    /**
     * Creates an instance of LogAnalyticsDataConnection class.
     *
     * @param properties the properties value to set.
     */
    @Generated
    private LogAnalyticsDataConnection(LogAnalyticsDataConnectionProperties properties) {
        this.properties = properties;
        this.kind = "logAnalytics";
    }

    /**
     * Get the properties property: properties.
     *
     * @return the properties value.
     */
    @Generated
    public LogAnalyticsDataConnectionProperties getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        toJsonShared(jsonWriter);
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogAnalyticsDataConnection from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogAnalyticsDataConnection if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LogAnalyticsDataConnection.
     */
    @Generated
    public static LogAnalyticsDataConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String id = null;
            String displayName = null;
            DataConnectionContent content = null;
            OffsetDateTime createdDate = null;
            DataConnectionFrequency frequency = null;
            Integer frequencyOffset = null;
            OffsetDateTime updatedDate = null;
            OffsetDateTime userUpdatedAt = null;
            Boolean active = null;
            String inactiveMessage = null;
            LogAnalyticsDataConnectionProperties properties = null;
            String kind = "logAnalytics";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("content".equals(fieldName)) {
                    content = DataConnectionContent.fromString(reader.getString());
                } else if ("createdDate".equals(fieldName)) {
                    createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("frequency".equals(fieldName)) {
                    frequency = DataConnectionFrequency.fromString(reader.getString());
                } else if ("frequencyOffset".equals(fieldName)) {
                    frequencyOffset = reader.getNullable(JsonReader::getInt);
                } else if ("updatedDate".equals(fieldName)) {
                    updatedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("userUpdatedAt".equals(fieldName)) {
                    userUpdatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("active".equals(fieldName)) {
                    active = reader.getNullable(JsonReader::getBoolean);
                } else if ("inactiveMessage".equals(fieldName)) {
                    inactiveMessage = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties = LogAnalyticsDataConnectionProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            LogAnalyticsDataConnection deserializedLogAnalyticsDataConnection
                = new LogAnalyticsDataConnection(properties);
            deserializedLogAnalyticsDataConnection.setName(name);
            deserializedLogAnalyticsDataConnection.id = id;
            deserializedLogAnalyticsDataConnection.displayName = displayName;
            deserializedLogAnalyticsDataConnection.content = content;
            deserializedLogAnalyticsDataConnection.createdDate = createdDate;
            deserializedLogAnalyticsDataConnection.frequency = frequency;
            deserializedLogAnalyticsDataConnection.frequencyOffset = frequencyOffset;
            deserializedLogAnalyticsDataConnection.updatedDate = updatedDate;
            deserializedLogAnalyticsDataConnection.userUpdatedAt = userUpdatedAt;
            deserializedLogAnalyticsDataConnection.active = active;
            deserializedLogAnalyticsDataConnection.inactiveMessage = inactiveMessage;
            deserializedLogAnalyticsDataConnection.kind = kind;
            return deserializedLogAnalyticsDataConnection;
        });
    }
}
