// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The DiscoGroup model.
 */
@Immutable
public final class DiscoGroup implements JsonSerializable<DiscoGroup> {

    /*
     * The system generated unique id for the resource.
     */
    @Generated
    private String id;

    /*
     * The caller provided unique name for the resource.
     */
    @Generated
    private String name;

    /*
     * The name that can be used for display purposes.
     */
    @Generated
    private String displayName;

    /*
     * The description for a disco group.
     */
    @Generated
    private String description;

    /*
     * The tier for the disco group which will affect the algorithm used for the disco runs in this group.
     */
    @Generated
    private String tier;

    /*
     * The frequency at which the disco group is supposed to be rerun in milliseconds.
     */
    @Generated
    private Long frequencyMilliseconds;

    /*
     * The list of seeds used for the disco group runs.
     */
    @Generated
    private List<DiscoSource> seeds;

    /*
     * The list of names used for the disco group runs.
     */
    @Generated
    private List<String> names;

    /*
     * The list of excludes used for the disco group runs, aka assets to exclude from the discovery algorithm.
     */
    @Generated
    private List<DiscoSource> excludes;

    /*
     * The latest run of this disco group with some limited information, null if the group has never been run.
     */
    @Generated
    private DiscoRunResult latestRun;

    /*
     * The date for the disco group was created.
     */
    @Generated
    private OffsetDateTime createdDate;

    /*
     * The unique identifier for the disco template used for the disco group creation.
     */
    @Generated
    private String templateId;

    /**
     * Creates an instance of DiscoGroup class.
     */
    @Generated
    private DiscoGroup() {
    }

    /**
     * Get the id property: The system generated unique id for the resource.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The caller provided unique name for the resource.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the displayName property: The name that can be used for display purposes.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the description property: The description for a disco group.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the tier property: The tier for the disco group which will affect the algorithm used for the disco runs in
     * this group.
     *
     * @return the tier value.
     */
    @Generated
    public String getTier() {
        return this.tier;
    }

    /**
     * Get the frequencyMilliseconds property: The frequency at which the disco group is supposed to be rerun in
     * milliseconds.
     *
     * @return the frequencyMilliseconds value.
     */
    @Generated
    public Long getFrequencyMilliseconds() {
        return this.frequencyMilliseconds;
    }

    /**
     * Get the seeds property: The list of seeds used for the disco group runs.
     *
     * @return the seeds value.
     */
    @Generated
    public List<DiscoSource> getSeeds() {
        return this.seeds;
    }

    /**
     * Get the names property: The list of names used for the disco group runs.
     *
     * @return the names value.
     */
    @Generated
    public List<String> getNames() {
        return this.names;
    }

    /**
     * Get the excludes property: The list of excludes used for the disco group runs, aka assets to exclude from the
     * discovery algorithm.
     *
     * @return the excludes value.
     */
    @Generated
    public List<DiscoSource> getExcludes() {
        return this.excludes;
    }

    /**
     * Get the latestRun property: The latest run of this disco group with some limited information, null if the group
     * has never been run.
     *
     * @return the latestRun value.
     */
    @Generated
    public DiscoRunResult getLatestRun() {
        return this.latestRun;
    }

    /**
     * Get the createdDate property: The date for the disco group was created.
     *
     * @return the createdDate value.
     */
    @Generated
    public OffsetDateTime getCreatedDate() {
        return this.createdDate;
    }

    /**
     * Get the templateId property: The unique identifier for the disco template used for the disco group creation.
     *
     * @return the templateId value.
     */
    @Generated
    public String getTemplateId() {
        return this.templateId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("tier", this.tier);
        jsonWriter.writeNumberField("frequencyMilliseconds", this.frequencyMilliseconds);
        jsonWriter.writeArrayField("seeds", this.seeds, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("names", this.names, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludes", this.excludes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("latestRun", this.latestRun);
        jsonWriter.writeStringField("createdDate",
            this.createdDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDate));
        jsonWriter.writeStringField("templateId", this.templateId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoGroup from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoGroup if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscoGroup.
     */
    @Generated
    public static DiscoGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoGroup deserializedDiscoGroup = new DiscoGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedDiscoGroup.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedDiscoGroup.id = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedDiscoGroup.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDiscoGroup.description = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedDiscoGroup.tier = reader.getString();
                } else if ("frequencyMilliseconds".equals(fieldName)) {
                    deserializedDiscoGroup.frequencyMilliseconds = reader.getNullable(JsonReader::getLong);
                } else if ("seeds".equals(fieldName)) {
                    List<DiscoSource> seeds = reader.readArray(reader1 -> DiscoSource.fromJson(reader1));
                    deserializedDiscoGroup.seeds = seeds;
                } else if ("names".equals(fieldName)) {
                    List<String> names = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiscoGroup.names = names;
                } else if ("excludes".equals(fieldName)) {
                    List<DiscoSource> excludes = reader.readArray(reader1 -> DiscoSource.fromJson(reader1));
                    deserializedDiscoGroup.excludes = excludes;
                } else if ("latestRun".equals(fieldName)) {
                    deserializedDiscoGroup.latestRun = DiscoRunResult.fromJson(reader);
                } else if ("createdDate".equals(fieldName)) {
                    deserializedDiscoGroup.createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("templateId".equals(fieldName)) {
                    deserializedDiscoGroup.templateId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDiscoGroup;
        });
    }
}
