// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PageCause model.
 */
@Immutable
public final class PageCause implements JsonSerializable<PageCause> {

    /*
     * The cause property.
     */
    @Generated
    private String cause;

    /*
     * The causeElementXPath property.
     */
    @Generated
    private String causeElementXPath;

    /*
     * The location property.
     */
    @Generated
    private String location;

    /*
     * The possibleMatches property.
     */
    @Generated
    private Integer possibleMatches;

    /*
     * The loopDetected property.
     */
    @Generated
    private Boolean loopDetected;

    /*
     * The version property.
     */
    @Generated
    private Integer version;

    /*
     * The domChangeIndex property.
     */
    @Generated
    private Integer domChangeIndex;

    /**
     * Creates an instance of PageCause class.
     */
    @Generated
    private PageCause() {
    }

    /**
     * Get the cause property: The cause property.
     *
     * @return the cause value.
     */
    @Generated
    public String getCause() {
        return this.cause;
    }

    /**
     * Get the causeElementXPath property: The causeElementXPath property.
     *
     * @return the causeElementXPath value.
     */
    @Generated
    public String getCauseElementXPath() {
        return this.causeElementXPath;
    }

    /**
     * Get the location property: The location property.
     *
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the possibleMatches property: The possibleMatches property.
     *
     * @return the possibleMatches value.
     */
    @Generated
    public Integer getPossibleMatches() {
        return this.possibleMatches;
    }

    /**
     * Get the loopDetected property: The loopDetected property.
     *
     * @return the loopDetected value.
     */
    @Generated
    public Boolean isLoopDetected() {
        return this.loopDetected;
    }

    /**
     * Get the version property: The version property.
     *
     * @return the version value.
     */
    @Generated
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Get the domChangeIndex property: The domChangeIndex property.
     *
     * @return the domChangeIndex value.
     */
    @Generated
    public Integer getDomChangeIndex() {
        return this.domChangeIndex;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cause", this.cause);
        jsonWriter.writeStringField("causeElementXPath", this.causeElementXPath);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeNumberField("possibleMatches", this.possibleMatches);
        jsonWriter.writeBooleanField("loopDetected", this.loopDetected);
        jsonWriter.writeNumberField("version", this.version);
        jsonWriter.writeNumberField("domChangeIndex", this.domChangeIndex);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PageCause from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PageCause if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PageCause.
     */
    @Generated
    public static PageCause fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PageCause deserializedPageCause = new PageCause();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("cause".equals(fieldName)) {
                    deserializedPageCause.cause = reader.getString();
                } else if ("causeElementXPath".equals(fieldName)) {
                    deserializedPageCause.causeElementXPath = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedPageCause.location = reader.getString();
                } else if ("possibleMatches".equals(fieldName)) {
                    deserializedPageCause.possibleMatches = reader.getNullable(JsonReader::getInt);
                } else if ("loopDetected".equals(fieldName)) {
                    deserializedPageCause.loopDetected = reader.getNullable(JsonReader::getBoolean);
                } else if ("version".equals(fieldName)) {
                    deserializedPageCause.version = reader.getNullable(JsonReader::getInt);
                } else if ("domChangeIndex".equals(fieldName)) {
                    deserializedPageCause.domChangeIndex = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPageCause;
        });
    }
}
