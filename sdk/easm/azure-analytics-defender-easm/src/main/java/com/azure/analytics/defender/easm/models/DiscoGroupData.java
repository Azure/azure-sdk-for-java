// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A request body used to create a discovery group.
 */
@Fluent
public final class DiscoGroupData implements JsonSerializable<DiscoGroupData> {

    /*
     * The name for a disco group.
     */
    @Generated
    private String name;

    /*
     * The description for a disco group.
     */
    @Generated
    private String description;

    /*
     * The tier for the disco group which will affect the algorithm used for the disco runs in this group.
     */
    @Generated
    private String tier;

    /*
     * The frequency at which the disco group is supposed to be rerun in milliseconds.
     */
    @Generated
    private Long frequencyMilliseconds;

    /*
     * The list of seeds used for the disco group runs.
     */
    @Generated
    private List<DiscoSource> seeds;

    /*
     * The list of names used for the disco group runs.
     */
    @Generated
    private List<String> names;

    /*
     * The list of excludes used for the disco group runs, aka assets to exclude from the discovery algorithm.
     */
    @Generated
    private List<DiscoSource> excludes;

    /*
     * The unique identifier for the disco template used for the disco group creation.
     */
    @Generated
    private String templateId;

    /**
     * Creates an instance of DiscoGroupData class.
     */
    @Generated
    public DiscoGroupData() {
    }

    /**
     * Get the name property: The name for a disco group.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name for a disco group.
     *
     * @param name the name value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: The description for a disco group.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description for a disco group.
     *
     * @param description the description value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the tier property: The tier for the disco group which will affect the algorithm used for the disco runs in
     * this group.
     *
     * @return the tier value.
     */
    @Generated
    public String getTier() {
        return this.tier;
    }

    /**
     * Set the tier property: The tier for the disco group which will affect the algorithm used for the disco runs in
     * this group.
     *
     * @param tier the tier value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setTier(String tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the frequencyMilliseconds property: The frequency at which the disco group is supposed to be rerun in
     * milliseconds.
     *
     * @return the frequencyMilliseconds value.
     */
    @Generated
    public Long getFrequencyMilliseconds() {
        return this.frequencyMilliseconds;
    }

    /**
     * Set the frequencyMilliseconds property: The frequency at which the disco group is supposed to be rerun in
     * milliseconds.
     *
     * @param frequencyMilliseconds the frequencyMilliseconds value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setFrequencyMilliseconds(Long frequencyMilliseconds) {
        this.frequencyMilliseconds = frequencyMilliseconds;
        return this;
    }

    /**
     * Get the seeds property: The list of seeds used for the disco group runs.
     *
     * @return the seeds value.
     */
    @Generated
    public List<DiscoSource> getSeeds() {
        return this.seeds;
    }

    /**
     * Set the seeds property: The list of seeds used for the disco group runs.
     *
     * @param seeds the seeds value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setSeeds(List<DiscoSource> seeds) {
        this.seeds = seeds;
        return this;
    }

    /**
     * Get the names property: The list of names used for the disco group runs.
     *
     * @return the names value.
     */
    @Generated
    public List<String> getNames() {
        return this.names;
    }

    /**
     * Set the names property: The list of names used for the disco group runs.
     *
     * @param names the names value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setNames(List<String> names) {
        this.names = names;
        return this;
    }

    /**
     * Get the excludes property: The list of excludes used for the disco group runs, aka assets to exclude from the
     * discovery algorithm.
     *
     * @return the excludes value.
     */
    @Generated
    public List<DiscoSource> getExcludes() {
        return this.excludes;
    }

    /**
     * Set the excludes property: The list of excludes used for the disco group runs, aka assets to exclude from the
     * discovery algorithm.
     *
     * @param excludes the excludes value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setExcludes(List<DiscoSource> excludes) {
        this.excludes = excludes;
        return this;
    }

    /**
     * Get the templateId property: The unique identifier for the disco template used for the disco group creation.
     *
     * @return the templateId value.
     */
    @Generated
    public String getTemplateId() {
        return this.templateId;
    }

    /**
     * Set the templateId property: The unique identifier for the disco template used for the disco group creation.
     *
     * @param templateId the templateId value to set.
     * @return the DiscoGroupData object itself.
     */
    @Generated
    public DiscoGroupData setTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("tier", this.tier);
        jsonWriter.writeNumberField("frequencyMilliseconds", this.frequencyMilliseconds);
        jsonWriter.writeArrayField("seeds", this.seeds, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("names", this.names, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludes", this.excludes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("templateId", this.templateId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoGroupData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoGroupData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiscoGroupData.
     */
    @Generated
    public static DiscoGroupData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoGroupData deserializedDiscoGroupData = new DiscoGroupData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedDiscoGroupData.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDiscoGroupData.description = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedDiscoGroupData.tier = reader.getString();
                } else if ("frequencyMilliseconds".equals(fieldName)) {
                    deserializedDiscoGroupData.frequencyMilliseconds = reader.getNullable(JsonReader::getLong);
                } else if ("seeds".equals(fieldName)) {
                    List<DiscoSource> seeds = reader.readArray(reader1 -> DiscoSource.fromJson(reader1));
                    deserializedDiscoGroupData.seeds = seeds;
                } else if ("names".equals(fieldName)) {
                    List<String> names = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiscoGroupData.names = names;
                } else if ("excludes".equals(fieldName)) {
                    List<DiscoSource> excludes = reader.readArray(reader1 -> DiscoSource.fromJson(reader1));
                    deserializedDiscoGroupData.excludes = excludes;
                } else if ("templateId".equals(fieldName)) {
                    deserializedDiscoGroupData.templateId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDiscoGroupData;
        });
    }
}
