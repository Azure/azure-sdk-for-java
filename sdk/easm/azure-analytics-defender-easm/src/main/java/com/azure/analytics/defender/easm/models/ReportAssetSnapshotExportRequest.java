// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A request body used for an asset report snapshot export.
 */
@Fluent
public final class ReportAssetSnapshotExportRequest implements JsonSerializable<ReportAssetSnapshotExportRequest> {
    /*
     * The metric to retrieve a snapshot for.
     */
    @Generated
    private String metric;

    /*
     * The filename of the exported file.
     */
    @Generated
    private String fileName;

    /*
     * The columns to include in the export
     */
    @Generated
    private List<String> columns;

    /**
     * Creates an instance of ReportAssetSnapshotExportRequest class.
     */
    @Generated
    public ReportAssetSnapshotExportRequest() {
    }

    /**
     * Get the metric property: The metric to retrieve a snapshot for.
     * 
     * @return the metric value.
     */
    @Generated
    public String getMetric() {
        return this.metric;
    }

    /**
     * Set the metric property: The metric to retrieve a snapshot for.
     * 
     * @param metric the metric value to set.
     * @return the ReportAssetSnapshotExportRequest object itself.
     */
    @Generated
    public ReportAssetSnapshotExportRequest setMetric(String metric) {
        this.metric = metric;
        return this;
    }

    /**
     * Get the fileName property: The filename of the exported file.
     * 
     * @return the fileName value.
     */
    @Generated
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: The filename of the exported file.
     * 
     * @param fileName the fileName value to set.
     * @return the ReportAssetSnapshotExportRequest object itself.
     */
    @Generated
    public ReportAssetSnapshotExportRequest setFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get the columns property: The columns to include in the export.
     * 
     * @return the columns value.
     */
    @Generated
    public List<String> getColumns() {
        return this.columns;
    }

    /**
     * Set the columns property: The columns to include in the export.
     * 
     * @param columns the columns value to set.
     * @return the ReportAssetSnapshotExportRequest object itself.
     */
    @Generated
    public ReportAssetSnapshotExportRequest setColumns(List<String> columns) {
        this.columns = columns;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metric", this.metric);
        jsonWriter.writeStringField("fileName", this.fileName);
        jsonWriter.writeArrayField("columns", this.columns, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReportAssetSnapshotExportRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReportAssetSnapshotExportRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReportAssetSnapshotExportRequest.
     */
    @Generated
    public static ReportAssetSnapshotExportRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReportAssetSnapshotExportRequest deserializedReportAssetSnapshotExportRequest
                = new ReportAssetSnapshotExportRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metric".equals(fieldName)) {
                    deserializedReportAssetSnapshotExportRequest.metric = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    deserializedReportAssetSnapshotExportRequest.fileName = reader.getString();
                } else if ("columns".equals(fieldName)) {
                    List<String> columns = reader.readArray(reader1 -> reader1.getString());
                    deserializedReportAssetSnapshotExportRequest.columns = columns;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReportAssetSnapshotExportRequest;
        });
    }
}
