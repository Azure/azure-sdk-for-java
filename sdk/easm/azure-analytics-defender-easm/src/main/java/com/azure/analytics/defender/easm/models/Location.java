// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Location model.
 */
@Immutable
public final class Location implements JsonSerializable<Location> {

    /*
     * The countryCode property.
     */
    @Generated
    private String countryCode;

    /*
     * The countryName property.
     */
    @Generated
    private String countryName;

    /*
     * The region property.
     */
    @Generated
    private String region;

    /*
     * The regionName property.
     */
    @Generated
    private String regionName;

    /*
     * The city property.
     */
    @Generated
    private String city;

    /*
     * The areaCode property.
     */
    @Generated
    private Integer areaCode;

    /*
     * The postalCode property.
     */
    @Generated
    private String postalCode;

    /*
     * The latitude property.
     */
    @Generated
    private Double latitude;

    /*
     * The longitude property.
     */
    @Generated
    private Double longitude;

    /*
     * The dmaCode property.
     */
    @Generated
    private Integer dmaCode;

    /*
     * The metroCodeId property.
     */
    @Generated
    private Integer metroCodeId;

    /**
     * Creates an instance of Location class.
     */
    @Generated
    private Location() {
    }

    /**
     * Get the countryCode property: The countryCode property.
     *
     * @return the countryCode value.
     */
    @Generated
    public String getCountryCode() {
        return this.countryCode;
    }

    /**
     * Get the countryName property: The countryName property.
     *
     * @return the countryName value.
     */
    @Generated
    public String getCountryName() {
        return this.countryName;
    }

    /**
     * Get the region property: The region property.
     *
     * @return the region value.
     */
    @Generated
    public String getRegion() {
        return this.region;
    }

    /**
     * Get the regionName property: The regionName property.
     *
     * @return the regionName value.
     */
    @Generated
    public String getRegionName() {
        return this.regionName;
    }

    /**
     * Get the city property: The city property.
     *
     * @return the city value.
     */
    @Generated
    public String getCity() {
        return this.city;
    }

    /**
     * Get the areaCode property: The areaCode property.
     *
     * @return the areaCode value.
     */
    @Generated
    public Integer getAreaCode() {
        return this.areaCode;
    }

    /**
     * Get the postalCode property: The postalCode property.
     *
     * @return the postalCode value.
     */
    @Generated
    public String getPostalCode() {
        return this.postalCode;
    }

    /**
     * Get the latitude property: The latitude property.
     *
     * @return the latitude value.
     */
    @Generated
    public Double getLatitude() {
        return this.latitude;
    }

    /**
     * Get the longitude property: The longitude property.
     *
     * @return the longitude value.
     */
    @Generated
    public Double getLongitude() {
        return this.longitude;
    }

    /**
     * Get the dmaCode property: The dmaCode property.
     *
     * @return the dmaCode value.
     */
    @Generated
    public Integer getDmaCode() {
        return this.dmaCode;
    }

    /**
     * Get the metroCodeId property: The metroCodeId property.
     *
     * @return the metroCodeId value.
     */
    @Generated
    public Integer getMetroCodeId() {
        return this.metroCodeId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("countryCode", this.countryCode);
        jsonWriter.writeStringField("countryName", this.countryName);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("regionName", this.regionName);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeNumberField("areaCode", this.areaCode);
        jsonWriter.writeStringField("postalCode", this.postalCode);
        jsonWriter.writeNumberField("latitude", this.latitude);
        jsonWriter.writeNumberField("longitude", this.longitude);
        jsonWriter.writeNumberField("dmaCode", this.dmaCode);
        jsonWriter.writeNumberField("metroCodeId", this.metroCodeId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Location from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Location if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Location.
     */
    @Generated
    public static Location fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Location deserializedLocation = new Location();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("countryCode".equals(fieldName)) {
                    deserializedLocation.countryCode = reader.getString();
                } else if ("countryName".equals(fieldName)) {
                    deserializedLocation.countryName = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedLocation.region = reader.getString();
                } else if ("regionName".equals(fieldName)) {
                    deserializedLocation.regionName = reader.getString();
                } else if ("city".equals(fieldName)) {
                    deserializedLocation.city = reader.getString();
                } else if ("areaCode".equals(fieldName)) {
                    deserializedLocation.areaCode = reader.getNullable(JsonReader::getInt);
                } else if ("postalCode".equals(fieldName)) {
                    deserializedLocation.postalCode = reader.getString();
                } else if ("latitude".equals(fieldName)) {
                    deserializedLocation.latitude = reader.getNullable(JsonReader::getDouble);
                } else if ("longitude".equals(fieldName)) {
                    deserializedLocation.longitude = reader.getNullable(JsonReader::getDouble);
                } else if ("dmaCode".equals(fieldName)) {
                    deserializedLocation.dmaCode = reader.getNullable(JsonReader::getInt);
                } else if ("metroCodeId".equals(fieldName)) {
                    deserializedLocation.metroCodeId = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedLocation;
        });
    }
}
