// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The GuidPair model.
 */
@Immutable
public final class GuidPair implements JsonSerializable<GuidPair> {

    /*
     * The pageGuid property.
     */
    @Generated
    private String pageGuid;

    /*
     * The crawlStateGuid property.
     */
    @Generated
    private String crawlStateGuid;

    /*
     * The loadDate property.
     */
    @Generated
    private OffsetDateTime loadDate;

    /*
     * The recent property.
     */
    @Generated
    private Boolean recent;

    /**
     * Creates an instance of GuidPair class.
     */
    @Generated
    private GuidPair() {
    }

    /**
     * Get the pageGuid property: The pageGuid property.
     *
     * @return the pageGuid value.
     */
    @Generated
    public String getPageGuid() {
        return this.pageGuid;
    }

    /**
     * Get the crawlStateGuid property: The crawlStateGuid property.
     *
     * @return the crawlStateGuid value.
     */
    @Generated
    public String getCrawlStateGuid() {
        return this.crawlStateGuid;
    }

    /**
     * Get the loadDate property: The loadDate property.
     *
     * @return the loadDate value.
     */
    @Generated
    public OffsetDateTime getLoadDate() {
        return this.loadDate;
    }

    /**
     * Get the recent property: The recent property.
     *
     * @return the recent value.
     */
    @Generated
    public Boolean isRecent() {
        return this.recent;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pageGuid", this.pageGuid);
        jsonWriter.writeStringField("crawlStateGuid", this.crawlStateGuid);
        jsonWriter.writeStringField("loadDate",
            this.loadDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.loadDate));
        jsonWriter.writeBooleanField("recent", this.recent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GuidPair from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GuidPair if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the GuidPair.
     */
    @Generated
    public static GuidPair fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GuidPair deserializedGuidPair = new GuidPair();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("pageGuid".equals(fieldName)) {
                    deserializedGuidPair.pageGuid = reader.getString();
                } else if ("crawlStateGuid".equals(fieldName)) {
                    deserializedGuidPair.crawlStateGuid = reader.getString();
                } else if ("loadDate".equals(fieldName)) {
                    deserializedGuidPair.loadDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recent".equals(fieldName)) {
                    deserializedGuidPair.recent = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedGuidPair;
        });
    }
}
