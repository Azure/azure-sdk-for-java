// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.defender.easm.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A request body used to create a saved filter.
 */
@Immutable
public final class SavedFilterData implements JsonSerializable<SavedFilterData> {

    /*
     * An expression on the resource type that selects the resources to be returned.
     */
    @Generated
    private final String filter;

    /*
     * A human readable description of the saved filter.
     */
    @Generated
    private final String description;

    /**
     * Creates an instance of SavedFilterData class.
     *
     * @param filter the filter value to set.
     * @param description the description value to set.
     */
    @Generated
    public SavedFilterData(String filter, String description) {
        this.filter = filter;
        this.description = description;
    }

    /**
     * Get the filter property: An expression on the resource type that selects the resources to be returned.
     *
     * @return the filter value.
     */
    @Generated
    public String getFilter() {
        return this.filter;
    }

    /**
     * Get the description property: A human readable description of the saved filter.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filter", this.filter);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SavedFilterData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SavedFilterData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SavedFilterData.
     */
    @Generated
    public static SavedFilterData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String filter = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("filter".equals(fieldName)) {
                    filter = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new SavedFilterData(filter, description);
        });
    }
}
