// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.generated;

import com.azure.analytics.defender.easm.models.DiscoGroup;
import com.azure.analytics.defender.easm.models.DiscoRunResult;
import com.azure.analytics.defender.easm.models.DiscoRunState;
import com.azure.analytics.defender.easm.models.DiscoSource;
import com.azure.analytics.defender.easm.models.DiscoSourceKind;
import com.azure.core.http.rest.PagedIterable;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class DiscoveryGroupsListDiscoGroupTests extends EasmClientTestBase {
    @Test
    @Disabled
    public void testDiscoveryGroupsListDiscoGroupTests() {
        // method invocation
        PagedIterable<DiscoGroup> response = easmClient.listDiscoGroup(null, null);

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        DiscoGroup firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("ThisisaDiscoGroup", firstItem.getId());
        // verify property "name"
        Assertions.assertEquals("ThisisaDiscoGroup", firstItem.getName());
        // verify property "displayName"
        Assertions.assertEquals("ThisisaDiscoGroup", firstItem.getDisplayName());
        // verify property "description"
        Assertions.assertEquals("This is a disco group", firstItem.getDescription());
        // verify property "tier"
        Assertions.assertEquals("advanced", firstItem.getTier());
        // verify property "frequencyMilliseconds"
        Assertions.assertEquals(0L, firstItem.getFrequencyMilliseconds());
        // verify property "seeds"
        List<DiscoSource> firstItemSeeds = firstItem.getSeeds();
        DiscoSource firstItemSeedsFirstItem = firstItemSeeds.iterator().next();
        Assertions.assertNotNull(firstItemSeedsFirstItem);
        Assertions.assertEquals(DiscoSourceKind.HOST, firstItemSeedsFirstItem.getKind());
        Assertions.assertEquals("thisisatest.microsoft.com", firstItemSeedsFirstItem.getName());
        // verify property "excludes"
        List<DiscoSource> firstItemExcludes = firstItem.getExcludes();
        DiscoSource firstItemExcludesFirstItem = firstItemExcludes.iterator().next();
        Assertions.assertNotNull(firstItemExcludesFirstItem);
        Assertions.assertEquals(DiscoSourceKind.HOST, firstItemExcludesFirstItem.getKind());
        Assertions.assertEquals("thisisanothertest.microsoft.com", firstItemExcludesFirstItem.getName());
        // verify property "latestRun"
        DiscoRunResult firstItemLatestRun = firstItem.getLatestRun();
        Assertions.assertNotNull(firstItemLatestRun);
        Assertions.assertNotNull(firstItemLatestRun.getStartedDate());
        Assertions.assertEquals(DiscoRunState.COMPLETED, firstItemLatestRun.getState());
        // verify property "createdDate"
        Assertions.assertNotNull(firstItem.getCreatedDate());
        // verify property "templateId"
        Assertions.assertEquals("123", firstItem.getTemplateId());
    }
}
