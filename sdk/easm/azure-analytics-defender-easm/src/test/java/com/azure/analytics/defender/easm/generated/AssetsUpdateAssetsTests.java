// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.defender.easm.generated;

import com.azure.analytics.defender.easm.models.AssetUpdateData;
import com.azure.analytics.defender.easm.models.AssetUpdateState;
import com.azure.analytics.defender.easm.models.Task;
import com.azure.analytics.defender.easm.models.TaskPhase;
import com.azure.analytics.defender.easm.models.TaskState;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class AssetsUpdateAssetsTests extends EasmClientTestBase {
    @Test
    @Disabled
    public void testAssetsUpdateAssetsTests() {
        // method invocation
        Task response = easmClient.updateAssets("state = \"confirmed\" AND name ^= \"contoso.com\"",
            new AssetUpdateData().setState(AssetUpdateState.CONFIRMED)
                .setExternalId("contosoInternalId")
                .setLabels(mapOf("contosoLabel", true)));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("ThisisaTaskId", response.getId());
        // verify property "startedAt"
        Assertions.assertNotNull(response.getStartedAt());
        // verify property "completedAt"
        Assertions.assertNotNull(response.getCompletedAt());
        // verify property "lastPolledAt"
        Assertions.assertNotNull(response.getLastPolledAt());
        // verify property "state"
        Assertions.assertEquals(TaskState.COMPLETE, response.getState());
        // verify property "phase"
        Assertions.assertEquals(TaskPhase.COMPLETE, response.getPhase());
        // verify property "reason"
        Assertions.assertEquals("This is a Task id", response.getReason());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
