// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.defender.easm.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.analytics.defender.easm.AssetsClient;
import com.azure.analytics.defender.easm.DataConnectionsClient;
import com.azure.analytics.defender.easm.DiscoveryGroupsClient;
import com.azure.analytics.defender.easm.DiscoveryTemplatesClient;
import com.azure.analytics.defender.easm.EasmDefenderClientBuilder;
import com.azure.analytics.defender.easm.ReportsClient;
import com.azure.analytics.defender.easm.SavedFiltersClient;
import com.azure.analytics.defender.easm.TasksClient;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.test.models.TestProxySanitizer;
import com.azure.core.test.models.TestProxySanitizerType;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import reactor.core.publisher.Mono;

public class EasmDefenderClientTestBase extends TestProxyTestBase {
    protected AssetsClient assetsClient;

    protected DataConnectionsClient dataConnectionsClient;

    protected DiscoveryGroupsClient discoveryGroupsClient;

    protected DiscoveryTemplatesClient discoveryTemplatesClient;

    protected ReportsClient reportsClient;

    protected SavedFiltersClient savedFiltersClient;

    protected TasksClient tasksClient;
    protected final String UUID_REGEX = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}";
    private String SANITIZED_REQUEST_URI = "https://REDACTED/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/REDACTED/workspaces/REDACTED/";
    private String REQUEST_URI_REGEX = "https://.*/subscriptions/.*/resourceGroups/.*/workspaces/.*?/";


    @Override
    protected void beforeTest() {
        List<TestProxySanitizer> customSanitizers = new ArrayList<>();
        EasmDefenderClientBuilder assetsClientbuilder =
                new EasmDefenderClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID", "subscriptionid"))
                        .resourceGroupName(
                                Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME", "resourcegroupname"))
                        .workspaceName("sdktest")
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            assetsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            assetsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            assetsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        assetsClient = assetsClientbuilder.buildAssetsClient();

        EasmDefenderClientBuilder dataConnectionsClientbuilder =
                new EasmDefenderClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID", "subscriptionid"))
                        .resourceGroupName(
                                Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME", "resourcegroupname"))
                        .workspaceName("sdktest")
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            dataConnectionsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            dataConnectionsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            dataConnectionsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        dataConnectionsClient = dataConnectionsClientbuilder.buildDataConnectionsClient();

        EasmDefenderClientBuilder discoveryGroupsClientbuilder =
                new EasmDefenderClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID", "subscriptionid"))
                        .resourceGroupName(
                                Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME", "resourcegroupname"))
                        .workspaceName("sdktest")
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            discoveryGroupsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            discoveryGroupsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            discoveryGroupsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        discoveryGroupsClient = discoveryGroupsClientbuilder.buildDiscoveryGroupsClient();

        EasmDefenderClientBuilder discoveryTemplatesClientbuilder =
                new EasmDefenderClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID", "subscriptionid"))
                        .resourceGroupName(
                                Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME", "resourcegroupname"))
                        .workspaceName("sdktest")
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            discoveryTemplatesClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            discoveryTemplatesClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            discoveryTemplatesClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        discoveryTemplatesClient = discoveryTemplatesClientbuilder.buildDiscoveryTemplatesClient();

        EasmDefenderClientBuilder reportsClientbuilder =
                new EasmDefenderClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID", "subscriptionid"))
                        .resourceGroupName(
                                Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME", "resourcegroupname"))
                        .workspaceName("sdktest")
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            reportsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            reportsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            reportsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        reportsClient = reportsClientbuilder.buildReportsClient();

        EasmDefenderClientBuilder savedFiltersClientbuilder =
                new EasmDefenderClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID", "subscriptionid"))
                        .resourceGroupName(
                                Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME", "resourcegroupname"))
                        .workspaceName("sdktest")
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            savedFiltersClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            savedFiltersClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            savedFiltersClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        savedFiltersClient = savedFiltersClientbuilder.buildSavedFiltersClient();

        EasmDefenderClientBuilder tasksClientbuilder =
                new EasmDefenderClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID", "subscriptionid"))
                        .resourceGroupName(
                                Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME", "resourcegroupname"))
                        .workspaceName("sdktest")
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            tasksClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            tasksClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            tasksClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        tasksClient = tasksClientbuilder.buildTasksClient();
        customSanitizers.add(new TestProxySanitizer(REQUEST_URI_REGEX, SANITIZED_REQUEST_URI, TestProxySanitizerType.URL));
        interceptorManager.addSanitizers(customSanitizers);

    }
}
