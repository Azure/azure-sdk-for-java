// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.defender.easm;

import com.azure.analytics.defender.easm.implementation.DiscoveryTemplatesImpl;
import com.azure.analytics.defender.easm.models.DiscoTemplate;
import com.azure.analytics.defender.easm.models.DiscoTemplatePageResponse;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous EasmDefenderClient type. */
@ServiceClient(builder = EasmDefenderClientBuilder.class, isAsync = true)
public final class DiscoveryTemplatesAsyncClient {
    @Generated private final DiscoveryTemplatesImpl serviceClient;

    /**
     * Initializes an instance of DiscoveryTemplatesAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    DiscoveryTemplatesAsyncClient(DiscoveryTemplatesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             industry: String (Optional)
     *             region: String (Optional)
     *             countryCode: String (Optional)
     *             stateCode: String (Optional)
     *             city: String (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listWithResponseAsync(requestOptions);
    }

    /**
     * Retrieve a disco template with a given templateId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     industry: String (Optional)
     *     region: String (Optional)
     *     countryCode: String (Optional)
     *     stateCode: String (Optional)
     *     city: String (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param templateId The system generated unique id for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the items in the current page of results along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String templateId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(templateId, requestOptions);
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * @param filter Filter the result list using the given expression.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiscoTemplatePageResponse> list(String filter, Integer skip, Integer maxPageSize) {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return listWithResponse(requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(DiscoTemplatePageResponse.class));
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiscoTemplatePageResponse> list() {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listWithResponse(requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(DiscoTemplatePageResponse.class));
    }

    /**
     * Retrieve a disco template with a given templateId.
     *
     * @param templateId The system generated unique id for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the items in the current page of results on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiscoTemplate> get(String templateId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(templateId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(DiscoTemplate.class));
    }
}
