// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.defender.easm.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Tasks. */
public final class TasksImpl {
    /** The proxy service used to perform REST calls. */
    private final TasksService service;

    /** The service client containing this operation class. */
    private final EasmDefenderClientImpl client;

    /**
     * Initializes an instance of TasksImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TasksImpl(EasmDefenderClientImpl client) {
        this.service = RestProxy.create(TasksService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EasmDefenderClientTasks to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}")
    @ServiceInterface(name = "EasmDefenderClientTa")
    public interface TasksService {
        @Get("/tasks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/tasks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/tasks/{taskId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("taskId") String taskId,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/tasks/{taskId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("taskId") String taskId,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/tasks/{taskId}:cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancel(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("taskId") String taskId,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/tasks/{taskId}:cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("taskId") String taskId,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>A list of expressions that specify the order of the returned resources.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             startedAt: OffsetDateTime (Optional)
     *             completedAt: OffsetDateTime (Optional)
     *             lastPolledAt: OffsetDateTime (Optional)
     *             state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *             phase: String(running/polling/complete) (Optional)
     *             reason: String (Optional)
     *             metadata (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.list(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>A list of expressions that specify the order of the returned resources.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             startedAt: OffsetDateTime (Optional)
     *             completedAt: OffsetDateTime (Optional)
     *             lastPolledAt: OffsetDateTime (Optional)
     *             state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *             phase: String(running/polling/complete) (Optional)
     *             reason: String (Optional)
     *             metadata (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Retrieve a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String taskId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                taskId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String taskId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                taskId,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Cancel a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelWithResponseAsync(String taskId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancel(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                taskId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Cancel a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param taskId The unique identifier of the task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelWithResponse(String taskId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                taskId,
                accept,
                requestOptions,
                Context.NONE);
    }
}
