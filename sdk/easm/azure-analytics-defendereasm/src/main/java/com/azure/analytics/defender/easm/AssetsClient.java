// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.defender.easm;

import com.azure.analytics.defender.easm.implementation.AssetsImpl;
import com.azure.analytics.defender.easm.models.AssetPageResponse;
import com.azure.analytics.defender.easm.models.AssetResource;
import com.azure.analytics.defender.easm.models.AssetUpdateData;
import com.azure.analytics.defender.easm.models.Task;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous EasmDefenderClient type. */
@ServiceClient(builder = EasmDefenderClientBuilder.class)
public final class AssetsClient {
    @Generated private final AssetsImpl serviceClient;

    /**
     * Initializes an instance of AssetsClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AssetsClient(AssetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>A list of expressions that specify the order of the returned resources.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     *     <tr><td>mark</td><td>String</td><td>No</td><td>Specify this value instead of 'skip' to use cursor-based searching. Initial value is '*' and subsequent values are returned in the response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     mark: String (Optional)
     *     nextLink: String (Optional)
     *     value (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             uuid: String (Optional)
     *             createdDate: OffsetDateTime (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *             externalId: String (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             wildcard: Boolean (Optional)
     *             discoGroupName: String (Optional)
     *             auditTrail (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     name: String (Optional)
     *                     displayName: String (Optional)
     *                     kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                     reason: String (Optional)
     *                 }
     *             ]
     *             reason: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the page of assets that match the provided metric along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listWithResponse(requestOptions);
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): {
     *         String: boolean (Optional)
     *     }
     *     transfers: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param filter An expression on the resource type that selects the resources to be returned.
     * @param assetUpdateData A request body used to update an asset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateWithResponse(
            String filter, BinaryData assetUpdateData, RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponse(filter, assetUpdateData, requestOptions);
    }

    /**
     * Retrieve an asset by assetId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     uuid: String (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     wildcard: Boolean (Optional)
     *     discoGroupName: String (Optional)
     *     auditTrail (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *             reason: String (Optional)
     *         }
     *     ]
     *     reason: String (Optional)
     * }
     * }</pre>
     *
     * @param assetId The system generated unique id for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the items in the current page of results along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String assetId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(assetId, requestOptions);
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * @param filter Filter the result list using the given expression.
     * @param orderBy A list of expressions that specify the order of the returned resources.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param mark Specify this value instead of 'skip' to use cursor-based searching. Initial value is '*' and
     *     subsequent values are returned in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the page of assets that match the provided metric.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetPageResponse list(String filter, String orderBy, Integer skip, Integer maxPageSize, String mark) {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        if (mark != null) {
            requestOptions.addQueryParam("mark", mark, false);
        }
        return cleanUp(listWithResponse(requestOptions).getValue()).toObject(AssetPageResponse.class);
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the page of assets that match the provided metric.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetPageResponse list() {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(listWithResponse(requestOptions).getValue()).toObject(AssetPageResponse.class);
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * @param filter An expression on the resource type that selects the resources to be returned.
     * @param assetUpdateData A request body used to update an asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Task update(String filter, AssetUpdateData assetUpdateData) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(updateWithResponse(filter, BinaryData.fromObject(assetUpdateData), requestOptions)
                .getValue())
                .toObject(Task.class);
    }

    /**
     * Retrieve an asset by assetId.
     *
     * @param assetId The system generated unique id for the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the items in the current page of results.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetResource get(String assetId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cleanUp(getWithResponse(assetId, requestOptions).getValue()).toObject(AssetResource.class);
    }

    private BinaryData cleanUp(BinaryData input){
        return BinaryData.fromString(input.toString().replaceAll("\\+0000", "+00:00"));
    }
}
