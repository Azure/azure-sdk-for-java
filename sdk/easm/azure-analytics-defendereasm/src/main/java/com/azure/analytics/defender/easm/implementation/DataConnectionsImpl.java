// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.defender.easm.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DataConnections. */
public final class DataConnectionsImpl {
    /** The proxy service used to perform REST calls. */
    private final DataConnectionsService service;

    /** The service client containing this operation class. */
    private final EasmDefenderClientImpl client;

    /**
     * Initializes an instance of DataConnectionsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DataConnectionsImpl(EasmDefenderClientImpl client) {
        this.service =
                RestProxy.create(DataConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EasmDefenderClientDataConnections to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}")
    @ServiceInterface(name = "EasmDefenderClientDa")
    public interface DataConnectionsService {
        @Get("/dataConnections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/dataConnections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/dataConnections:validate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> validate(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData dataConnectionData,
                RequestOptions requestOptions,
                Context context);

        @Post("/dataConnections:validate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> validateSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData dataConnectionData,
                RequestOptions requestOptions,
                Context context);

        @Get("/dataConnections/{dataConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("dataConnectionName") String dataConnectionName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/dataConnections/{dataConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("dataConnectionName") String dataConnectionName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/dataConnections/{dataConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> put(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("dataConnectionName") String dataConnectionName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData dataConnectionData,
                RequestOptions requestOptions,
                Context context);

        @Put("/dataConnections/{dataConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> putSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("dataConnectionName") String dataConnectionName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData dataConnectionData,
                RequestOptions requestOptions,
                Context context);

        @Delete("/dataConnections/{dataConnectionName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("dataConnectionName") String dataConnectionName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/dataConnections/{dataConnectionName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(
                @HostParam("endpoint") String endpoint,
                @HostParam("subscriptionId") String subscriptionId,
                @HostParam("resourceGroupName") String resourceGroupName,
                @HostParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("dataConnectionName") String dataConnectionName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Retrieve a list of data connections.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Required)
     *             displayName: String (Optional)
     *             content: String(assets/attackSurfaceInsights) (Optional)
     *             createdDate: OffsetDateTime (Optional)
     *             frequency: String(daily/weekly/monthly) (Optional)
     *             frequencyOffset: Integer (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             userUpdatedAt: OffsetDateTime (Optional)
     *             active: Boolean (Optional)
     *             inactiveMessage: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.list(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of data connections.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Required)
     *             displayName: String (Optional)
     *             content: String(assets/attackSurfaceInsights) (Optional)
     *             createdDate: OffsetDateTime (Optional)
     *             frequency: String(daily/weekly/monthly) (Optional)
     *             frequencyOffset: Integer (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             userUpdatedAt: OffsetDateTime (Optional)
     *             active: Boolean (Optional)
     *             inactiveMessage: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param dataConnectionData The dataConnectionData parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> validateWithResponseAsync(
            BinaryData dataConnectionData, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.validate(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                dataConnectionData,
                                requestOptions,
                                context));
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param dataConnectionData The dataConnectionData parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> validateWithResponse(BinaryData dataConnectionData, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.validateSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                accept,
                dataConnectionData,
                requestOptions,
                Context.NONE);
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String dataConnectionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                dataConnectionName,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String dataConnectionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                dataConnectionName,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Create or update a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param dataConnectionData The dataConnectionData parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithResponseAsync(
            String dataConnectionName, BinaryData dataConnectionData, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.put(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                dataConnectionName,
                                accept,
                                dataConnectionData,
                                requestOptions,
                                context));
    }

    /**
     * Create or update a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Required)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param dataConnectionData The dataConnectionData parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> putWithResponse(
            String dataConnectionName, BinaryData dataConnectionData, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.putSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                dataConnectionName,
                accept,
                dataConnectionData,
                requestOptions,
                Context.NONE);
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String dataConnectionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.delete(
                                this.client.getEndpoint(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                this.client.getServiceVersion().getVersion(),
                                dataConnectionName,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param dataConnectionName The caller provided unique name for the resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String dataConnectionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                this.client.getServiceVersion().getVersion(),
                dataConnectionName,
                accept,
                requestOptions,
                Context.NONE);
    }
}
