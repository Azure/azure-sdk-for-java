// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.contoso.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.Base64Url;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;

/**
 * Employee properties.
 */
@Fluent
public final class EmployeeProperties implements JsonSerializable<EmployeeProperties> {
    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];

    /*
     * Age of employee
     */
    private Integer age;

    /*
     * City of employee
     */
    private String city;

    /*
     * Country of employee
     */
    private String country;

    /*
     * Profile of employee
     */
    private Base64Url profile;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of EmployeeProperties class.
     */
    public EmployeeProperties() {
    }

    /**
     * Get the age property: Age of employee.
     * 
     * @return the age value.
     */
    public Integer age() {
        return this.age;
    }

    /**
     * Set the age property: Age of employee.
     * 
     * @param age the age value to set.
     * @return the EmployeeProperties object itself.
     */
    public EmployeeProperties withAge(Integer age) {
        this.age = age;
        return this;
    }

    /**
     * Get the city property: City of employee.
     * 
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Set the city property: City of employee.
     * 
     * @param city the city value to set.
     * @return the EmployeeProperties object itself.
     */
    public EmployeeProperties withCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the country property: Country of employee.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: Country of employee.
     * 
     * @param country the country value to set.
     * @return the EmployeeProperties object itself.
     */
    public EmployeeProperties withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the profile property: Profile of employee.
     * 
     * @return the profile value.
     */
    public byte[] profile() {
        if (this.profile == null) {
            return EMPTY_BYTE_ARRAY;
        }
        return this.profile.decodedBytes();
    }

    /**
     * Set the profile property: Profile of employee.
     * 
     * @param profile the profile value to set.
     * @return the EmployeeProperties object itself.
     */
    public EmployeeProperties withProfile(byte[] profile) {
        if (profile == null) {
            this.profile = null;
        } else {
            this.profile = Base64Url.encode(CoreUtils.clone(profile));
        }
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("age", this.age);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeStringField("country", this.country);
        jsonWriter.writeStringField("profile", Objects.toString(this.profile, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EmployeeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EmployeeProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EmployeeProperties.
     */
    public static EmployeeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EmployeeProperties deserializedEmployeeProperties = new EmployeeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("age".equals(fieldName)) {
                    deserializedEmployeeProperties.age = reader.getNullable(JsonReader::getInt);
                } else if ("city".equals(fieldName)) {
                    deserializedEmployeeProperties.city = reader.getString();
                } else if ("country".equals(fieldName)) {
                    deserializedEmployeeProperties.country = reader.getString();
                } else if ("profile".equals(fieldName)) {
                    deserializedEmployeeProperties.profile
                        = reader.getNullable(nonNullReader -> new Base64Url(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEmployeeProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEmployeeProperties;
        });
    }
}
