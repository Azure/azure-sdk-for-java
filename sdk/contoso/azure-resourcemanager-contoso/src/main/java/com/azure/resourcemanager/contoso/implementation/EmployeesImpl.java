// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.contoso.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.contoso.fluent.EmployeesClient;
import com.azure.resourcemanager.contoso.fluent.models.EmployeeInner;
import com.azure.resourcemanager.contoso.models.Employee;
import com.azure.resourcemanager.contoso.models.Employees;

public final class EmployeesImpl implements Employees {
    private static final ClientLogger LOGGER = new ClientLogger(EmployeesImpl.class);

    private final EmployeesClient innerClient;

    private final com.azure.resourcemanager.contoso.ContosoManager serviceManager;

    public EmployeesImpl(EmployeesClient innerClient, com.azure.resourcemanager.contoso.ContosoManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Employee> getByResourceGroupWithResponse(String resourceGroupName, String employeeName,
        Context context) {
        Response<EmployeeInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, employeeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EmployeeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Employee getByResourceGroup(String resourceGroupName, String employeeName) {
        EmployeeInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, employeeName);
        if (inner != null) {
            return new EmployeeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String employeeName) {
        this.serviceClient().delete(resourceGroupName, employeeName);
    }

    public void delete(String resourceGroupName, String employeeName, Context context) {
        this.serviceClient().delete(resourceGroupName, employeeName, context);
    }

    public PagedIterable<Employee> listByResourceGroup(String resourceGroupName) {
        PagedIterable<EmployeeInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EmployeeImpl(inner1, this.manager()));
    }

    public PagedIterable<Employee> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<EmployeeInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EmployeeImpl(inner1, this.manager()));
    }

    public PagedIterable<Employee> list() {
        PagedIterable<EmployeeInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EmployeeImpl(inner1, this.manager()));
    }

    public PagedIterable<Employee> list(Context context) {
        PagedIterable<EmployeeInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EmployeeImpl(inner1, this.manager()));
    }

    public Employee getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String employeeName = ResourceManagerUtils.getValueFromIdByName(id, "employees");
        if (employeeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'employees'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, employeeName, Context.NONE).getValue();
    }

    public Response<Employee> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String employeeName = ResourceManagerUtils.getValueFromIdByName(id, "employees");
        if (employeeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'employees'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, employeeName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String employeeName = ResourceManagerUtils.getValueFromIdByName(id, "employees");
        if (employeeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'employees'.", id)));
        }
        this.delete(resourceGroupName, employeeName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String employeeName = ResourceManagerUtils.getValueFromIdByName(id, "employees");
        if (employeeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'employees'.", id)));
        }
        this.delete(resourceGroupName, employeeName, context);
    }

    private EmployeesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.contoso.ContosoManager manager() {
        return this.serviceManager;
    }

    public EmployeeImpl define(String name) {
        return new EmployeeImpl(name, this.manager());
    }
}
