// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.contoso.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.contoso.fluent.models.EmployeeInner;

/**
 * An instance of this class provides access to all the operations defined in EmployeesClient.
 */
public interface EmployeesClient {
    /**
     * Get a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Employee along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EmployeeInner> getByResourceGroupWithResponse(String resourceGroupName, String employeeName,
        Context context);

    /**
     * Get a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Employee.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EmployeeInner getByResourceGroup(String resourceGroupName, String employeeName);

    /**
     * Create a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of employee resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EmployeeInner>, EmployeeInner> beginCreateOrUpdate(String resourceGroupName,
        String employeeName, EmployeeInner resource);

    /**
     * Create a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of employee resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EmployeeInner>, EmployeeInner> beginCreateOrUpdate(String resourceGroupName,
        String employeeName, EmployeeInner resource, Context context);

    /**
     * Create a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return employee resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EmployeeInner createOrUpdate(String resourceGroupName, String employeeName, EmployeeInner resource);

    /**
     * Create a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return employee resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EmployeeInner createOrUpdate(String resourceGroupName, String employeeName, EmployeeInner resource,
        Context context);

    /**
     * Update a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return employee resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EmployeeInner> updateWithResponse(String resourceGroupName, String employeeName, EmployeeInner properties,
        Context context);

    /**
     * Update a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return employee resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EmployeeInner update(String resourceGroupName, String employeeName, EmployeeInner properties);

    /**
     * Delete a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String employeeName);

    /**
     * Delete a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String employeeName, Context context);

    /**
     * Delete a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String employeeName);

    /**
     * Delete a Employee.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param employeeName The name of the Employee.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String employeeName, Context context);

    /**
     * List Employee resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Employee list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EmployeeInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Employee resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Employee list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EmployeeInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List Employee resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Employee list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EmployeeInner> list();

    /**
     * List Employee resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Employee list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EmployeeInner> list(Context context);
}
