// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.contoso.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.contoso.ContosoManager;
import com.azure.resourcemanager.contoso.models.Employee;
import com.azure.resourcemanager.contoso.models.EmployeeProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EmployeesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"age\":1325323583,\"city\":\"kyfi\",\"country\":\"fidfvzw\",\"provisioningState\":\"Succeeded\"},\"location\":\"ymwisdkft\",\"tags\":{\"vkmijcmmxdcuf\":\"mnteiwao\",\"cxtbzsg\":\"fsrpymzidnse\",\"sne\":\"yc\"},\"id\":\"mdwzjeiachboo\",\"name\":\"flnrosfqpteehzz\",\"type\":\"ypyqrimzinp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContosoManager manager = ContosoManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Employee response = manager.employees()
            .define("kdosvqw")
            .withRegion("gbquxigj")
            .withExistingResourceGroup("pwgcuertu")
            .withTags(mapOf("erkujys", "zjaoyfhrtxil", "juvf", "l", "jkcpr", "awrlyx", "nruj", "nwbxgjvtbvpyssz"))
            .withProperties(
                new EmployeeProperties().withAge(813702940).withCity("bbjfddgmbmbexp").withCountry("htqqrolfp"))
            .create();

        Assertions.assertEquals("ymwisdkft", response.location());
        Assertions.assertEquals("mnteiwao", response.tags().get("vkmijcmmxdcuf"));
        Assertions.assertEquals(1325323583, response.properties().age());
        Assertions.assertEquals("kyfi", response.properties().city());
        Assertions.assertEquals("fidfvzw", response.properties().country());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
