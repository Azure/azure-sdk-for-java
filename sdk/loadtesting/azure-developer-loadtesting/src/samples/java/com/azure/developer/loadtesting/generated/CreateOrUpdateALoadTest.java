// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.Configuration;
import com.azure.developer.loadtesting.LoadTestAdministrationClient;
import com.azure.developer.loadtesting.LoadTestAdministrationClientBuilder;
import com.azure.developer.loadtesting.models.AutoStopCriteria;
import com.azure.developer.loadtesting.models.LoadTestConfiguration;
import com.azure.developer.loadtesting.models.ManagedIdentityType;
import com.azure.developer.loadtesting.models.PFMetrics;
import com.azure.developer.loadtesting.models.PassFailAction;
import com.azure.developer.loadtesting.models.PassFailAggregationFunction;
import com.azure.developer.loadtesting.models.PassFailCriteria;
import com.azure.developer.loadtesting.models.PassFailMetric;
import com.azure.developer.loadtesting.models.PassFailServerMetric;
import com.azure.developer.loadtesting.models.Secret;
import com.azure.developer.loadtesting.models.SecretType;
import com.azure.developer.loadtesting.models.Test;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class CreateOrUpdateALoadTest {
    public static void main(String[] args) {
        LoadTestAdministrationClient loadTestAdministrationClient
            = new LoadTestAdministrationClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildClient();
        // BEGIN:com.azure.developer.loadtesting.generated.createorupdatetest.createorupdatealoadtest
        Test response = loadTestAdministrationClient.createOrUpdateTest("12345678-1234-1234-1234-123456789012",
            new Test()
                .setPassFailCriteria(new PassFailCriteria()
                    .setPassFailMetrics(mapOf(
                        "fefd759d-7fe8-4f83-8b6d-aeebe0f491fe",
                        new PassFailMetric()
                            .setClientMetric(PFMetrics.RESPONSE_TIME_MS)
                            .setAggregate(PassFailAggregationFunction.PERCENTAGE)
                            .setCondition(">")
                            .setValue(20.0D)
                            .setAction(PassFailAction.CONTINUE)))
                    .setPassFailServerMetrics(mapOf("fefd759d-7fe8-4f83-8b6d-aeebe0f491fe",
                        new PassFailServerMetric().setResourceId(
                            "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM")
                            .setMetricNamespace("Microsoft.Compute/virtualMachines")
                            .setMetricName("Percentage CPU")
                            .setAggregation("Average")
                            .setCondition(">")
                            .setValue(20.0)
                            .setAction(PassFailAction.CONTINUE))))
                .setAutoStopCriteria(new AutoStopCriteria().setAutoStopDisabled(true)
                    .setErrorRate(70.0D)
                    .setErrorRateTimeWindowInSeconds(60))
                .setSecrets(mapOf("secret1",
                    new Secret().setValue(
                        "https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827")
                        .setType(SecretType.KEY_VAULT_SECRET_URI)))
                .setEnvironmentVariables(mapOf("envvar1", "sampletext"))
                .setLoadTestConfiguration(new LoadTestConfiguration().setEngineInstances(6).setSplitAllCsvs(true))
                .setDescription("sample description")
                .setDisplayName("Performance_LoadTest")
                .setSubnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0")
                .setKeyvaultReferenceIdentityType("fakeTokenPlaceholder")
                .setKeyvaultReferenceIdentityId("fakeTokenPlaceholder")
                .setMetricsReferenceIdentityType(ManagedIdentityType.USER_ASSIGNED)
                .setMetricsReferenceIdentityId(
                    "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename")
                .setEngineBuiltInIdentityType(ManagedIdentityType.USER_ASSIGNED)
                .setEngineBuiltInIdentityIds(Arrays.asList(
                    "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename")));
        // END:com.azure.developer.loadtesting.generated.createorupdatetest.createorupdatealoadtest
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
