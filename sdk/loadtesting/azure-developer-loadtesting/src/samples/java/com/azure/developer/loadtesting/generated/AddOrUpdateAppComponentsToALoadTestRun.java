// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.Configuration;
import com.azure.developer.loadtesting.LoadTestRunClient;
import com.azure.developer.loadtesting.LoadTestRunClientBuilder;
import com.azure.developer.loadtesting.models.LoadTestingAppComponent;
import com.azure.developer.loadtesting.models.TestRunAppComponents;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.util.HashMap;
import java.util.Map;

public class AddOrUpdateAppComponentsToALoadTestRun {
    public static void main(String[] args) {
        LoadTestRunClient loadTestRunClient
            = new LoadTestRunClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildClient();
        // BEGIN:com.azure.developer.loadtesting.generated.createorupdateappcomponents.addorupdateappcomponentstoaloadtestrun
        TestRunAppComponents response = loadTestRunClient.createOrUpdateAppComponents(
            "ee843bd9-a6d4-4364-a45c-427a03c39fa7",
            new TestRunAppComponents().setComponents(mapOf(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource",
                new LoadTestingAppComponent().setResourceName("appcomponentresource")
                    .setResourceType("microsoft.insights/components")
                    .setDisplayName("Performance_LoadTest_Insights")
                    .setKind("web"))));
        // END:com.azure.developer.loadtesting.generated.createorupdateappcomponents.addorupdateappcomponentstoaloadtestrun
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
