// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Test Profile Run model.
 * 
 * The Test Profile Run Model. Test Profile Run resource enables you to instantiate an already created test profile and
 * run load tests to get recommendations on the optimal configuration for the target resource.
 */
@Fluent
public final class TestProfileRun implements JsonSerializable<TestProfileRun> {
    /*
     * Unique identifier for the test profile run, must contain only lower-case alphabetic, numeric, underscore or
     * hyphen characters.
     */
    @Generated
    private String testProfileRunId;

    /*
     * Display name for the test profile run.
     */
    @Generated
    private String displayName;

    /*
     * The test profile run description
     */
    @Generated
    private String description;

    /*
     * Associated test profile ID for the test profile run. This is required to create a test profile run and can't be
     * updated.
     */
    @Generated
    private String testProfileId;

    /*
     * Target resource ID on which the test profile run is created
     */
    @Generated
    private String targetResourceId;

    /*
     * Configurations of the target resource on which the test profile ran.
     */
    @Generated
    private TargetResourceConfigurations targetResourceConfigurations;

    /*
     * The test profile run status.
     */
    @Generated
    private TestProfileRunStatus status;

    /*
     * Error details if there is any failure in test profile run. These errors are specific to the Test Profile Run.
     */
    @Generated
    private List<ErrorDetails> errorDetails;

    /*
     * The test profile run start DateTime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime startDateTime;

    /*
     * The test profile run end DateTime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime endDateTime;

    /*
     * Test profile run duration in seconds.
     */
    @Generated
    private Long durationInSeconds;

    /*
     * Details of the test runs ran as part of the test profile run.
     * Key is the testRunId of the corresponding testRun.
     */
    @Generated
    private Map<String, TestRunDetail> testRunDetails;

    /*
     * Recommendations provided based on a successful test profile run.
     */
    @Generated
    private List<TestProfileRunRecommendation> recommendations;

    /*
     * The creation datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * The user that created.
     */
    @Generated
    private String createdBy;

    /*
     * The last Modified datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The user that last modified.
     */
    @Generated
    private String lastModifiedBy;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestProfileRunAccessor(new JsonMergePatchHelper.TestProfileRunAccessor() {
            @Override
            public TestProfileRun prepareModelForJsonMergePatch(TestProfileRun model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TestProfileRun model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TestProfileRun class.
     */
    @Generated
    public TestProfileRun() {
    }

    /**
     * Get the testProfileRunId property: Unique identifier for the test profile run, must contain only lower-case
     * alphabetic, numeric, underscore or hyphen characters.
     * 
     * @return the testProfileRunId value.
     */
    @Generated
    public String getTestProfileRunId() {
        return this.testProfileRunId;
    }

    /**
     * Get the displayName property: Display name for the test profile run.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name for the test profile run.
     * 
     * @param displayName the displayName value to set.
     * @return the TestProfileRun object itself.
     */
    @Generated
    public TestProfileRun setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the description property: The test profile run description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The test profile run description.
     * 
     * @param description the description value to set.
     * @return the TestProfileRun object itself.
     */
    @Generated
    public TestProfileRun setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the testProfileId property: Associated test profile ID for the test profile run. This is required to create a
     * test profile run and can't be updated.
     * 
     * @return the testProfileId value.
     */
    @Generated
    public String getTestProfileId() {
        return this.testProfileId;
    }

    /**
     * Set the testProfileId property: Associated test profile ID for the test profile run. This is required to create a
     * test profile run and can't be updated.
     * 
     * @param testProfileId the testProfileId value to set.
     * @return the TestProfileRun object itself.
     */
    @Generated
    public TestProfileRun setTestProfileId(String testProfileId) {
        this.testProfileId = testProfileId;
        this.updatedProperties.add("testProfileId");
        return this;
    }

    /**
     * Get the targetResourceId property: Target resource ID on which the test profile run is created.
     * 
     * @return the targetResourceId value.
     */
    @Generated
    public String getTargetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Get the targetResourceConfigurations property: Configurations of the target resource on which the test profile
     * ran.
     * 
     * @return the targetResourceConfigurations value.
     */
    @Generated
    public TargetResourceConfigurations getTargetResourceConfigurations() {
        return this.targetResourceConfigurations;
    }

    /**
     * Get the status property: The test profile run status.
     * 
     * @return the status value.
     */
    @Generated
    public TestProfileRunStatus getStatus() {
        return this.status;
    }

    /**
     * Get the errorDetails property: Error details if there is any failure in test profile run. These errors are
     * specific to the Test Profile Run.
     * 
     * @return the errorDetails value.
     */
    @Generated
    public List<ErrorDetails> getErrorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the startDateTime property: The test profile run start DateTime(RFC 3339 literal format).
     * 
     * @return the startDateTime value.
     */
    @Generated
    public OffsetDateTime getStartDateTime() {
        return this.startDateTime;
    }

    /**
     * Get the endDateTime property: The test profile run end DateTime(RFC 3339 literal format).
     * 
     * @return the endDateTime value.
     */
    @Generated
    public OffsetDateTime getEndDateTime() {
        return this.endDateTime;
    }

    /**
     * Get the durationInSeconds property: Test profile run duration in seconds.
     * 
     * @return the durationInSeconds value.
     */
    @Generated
    public Long getDurationInSeconds() {
        return this.durationInSeconds;
    }

    /**
     * Get the testRunDetails property: Details of the test runs ran as part of the test profile run.
     * Key is the testRunId of the corresponding testRun.
     * 
     * @return the testRunDetails value.
     */
    @Generated
    public Map<String, TestRunDetail> getTestRunDetails() {
        return this.testRunDetails;
    }

    /**
     * Get the recommendations property: Recommendations provided based on a successful test profile run.
     * 
     * @return the recommendations value.
     */
    @Generated
    public List<TestProfileRunRecommendation> getRecommendations() {
        return this.recommendations;
    }

    /**
     * Get the createdDateTime property: The creation datetime(RFC 3339 literal format).
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the createdBy property: The user that created.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last Modified datetime(RFC 3339 literal format).
     * 
     * @return the lastModifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastModifiedBy property: The user that last modified.
     * 
     * @return the lastModifiedBy value.
     */
    @Generated
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeStringField("testProfileId", this.testProfileId);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("testProfileId")) {
            if (this.testProfileId == null) {
                jsonWriter.writeNullField("testProfileId");
            } else {
                jsonWriter.writeStringField("testProfileId", this.testProfileId);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestProfileRun from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestProfileRun if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestProfileRun.
     */
    @Generated
    public static TestProfileRun fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestProfileRun deserializedTestProfileRun = new TestProfileRun();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testProfileRunId".equals(fieldName)) {
                    deserializedTestProfileRun.testProfileRunId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedTestProfileRun.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedTestProfileRun.description = reader.getString();
                } else if ("testProfileId".equals(fieldName)) {
                    deserializedTestProfileRun.testProfileId = reader.getString();
                } else if ("targetResourceId".equals(fieldName)) {
                    deserializedTestProfileRun.targetResourceId = reader.getString();
                } else if ("targetResourceConfigurations".equals(fieldName)) {
                    deserializedTestProfileRun.targetResourceConfigurations
                        = TargetResourceConfigurations.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedTestProfileRun.status = TestProfileRunStatus.fromString(reader.getString());
                } else if ("errorDetails".equals(fieldName)) {
                    List<ErrorDetails> errorDetails = reader.readArray(reader1 -> ErrorDetails.fromJson(reader1));
                    deserializedTestProfileRun.errorDetails = errorDetails;
                } else if ("startDateTime".equals(fieldName)) {
                    deserializedTestProfileRun.startDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTime".equals(fieldName)) {
                    deserializedTestProfileRun.endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("durationInSeconds".equals(fieldName)) {
                    deserializedTestProfileRun.durationInSeconds = reader.getNullable(JsonReader::getLong);
                } else if ("testRunDetails".equals(fieldName)) {
                    Map<String, TestRunDetail> testRunDetails
                        = reader.readMap(reader1 -> TestRunDetail.fromJson(reader1));
                    deserializedTestProfileRun.testRunDetails = testRunDetails;
                } else if ("recommendations".equals(fieldName)) {
                    List<TestProfileRunRecommendation> recommendations
                        = reader.readArray(reader1 -> TestProfileRunRecommendation.fromJson(reader1));
                    deserializedTestProfileRun.recommendations = recommendations;
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedTestProfileRun.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedTestProfileRun.createdBy = reader.getString();
                } else if ("lastModifiedDateTime".equals(fieldName)) {
                    deserializedTestProfileRun.lastModifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedTestProfileRun.lastModifiedBy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestProfileRun;
        });
    }
}
