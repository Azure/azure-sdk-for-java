// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Artifacts container info.
 */
@Immutable
public final class ArtifactsContainerInfo implements JsonSerializable<ArtifactsContainerInfo> {
    /*
     * This is a SAS URI to an Azure Storage Container that contains the test run artifacts.
     */
    @Generated
    private String url;

    /*
     * Expiry time of the container (RFC 3339 literal format)
     */
    @Generated
    private OffsetDateTime expireDateTime;

    /**
     * Creates an instance of ArtifactsContainerInfo class.
     */
    @Generated
    private ArtifactsContainerInfo() {
    }

    /**
     * Get the url property: This is a SAS URI to an Azure Storage Container that contains the test run artifacts.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the expireDateTime property: Expiry time of the container (RFC 3339 literal format).
     * 
     * @return the expireDateTime value.
     */
    @Generated
    public OffsetDateTime getExpireDateTime() {
        return this.expireDateTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("expireDateTime",
            this.expireDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expireDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArtifactsContainerInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArtifactsContainerInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArtifactsContainerInfo.
     */
    @Generated
    public static ArtifactsContainerInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArtifactsContainerInfo deserializedArtifactsContainerInfo = new ArtifactsContainerInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedArtifactsContainerInfo.url = reader.getString();
                } else if ("expireDateTime".equals(fieldName)) {
                    deserializedArtifactsContainerInfo.expireDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArtifactsContainerInfo;
        });
    }
}
