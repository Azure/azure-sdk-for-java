// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Region distribution configuration for the load test.
 */
@Fluent
public final class RegionalConfiguration implements JsonSerializable<RegionalConfiguration> {
    /*
     * The number of engine instances to execute load test in specified region. Supported values are in range of 1-400.
     */
    @Generated
    private int engineInstances;

    /*
     * Azure region name.
     * The region name should of format accepted by ARM, and should be a region supported by Azure Load Testing. For
     * example, East US should be passed as "eastus".
     * The region name must match one of the strings in the "Name" column returned from running the
     * "az account list-locations -o table" Azure CLI command.
     */
    @Generated
    private String region;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRegionalConfigurationAccessor(new JsonMergePatchHelper.RegionalConfigurationAccessor() {
            @Override
            public RegionalConfiguration prepareModelForJsonMergePatch(RegionalConfiguration model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(RegionalConfiguration model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of RegionalConfiguration class.
     */
    @Generated
    public RegionalConfiguration() {
    }

    /**
     * Get the engineInstances property: The number of engine instances to execute load test in specified region.
     * Supported values are in range of 1-400.
     * 
     * @return the engineInstances value.
     */
    @Generated
    public int getEngineInstances() {
        return this.engineInstances;
    }

    /**
     * Set the engineInstances property: The number of engine instances to execute load test in specified region.
     * Supported values are in range of 1-400.
     * <p>Required when create the resource.</p>
     * 
     * @param engineInstances the engineInstances value to set.
     * @return the RegionalConfiguration object itself.
     */
    @Generated
    public RegionalConfiguration setEngineInstances(int engineInstances) {
        this.engineInstances = engineInstances;
        this.updatedProperties.add("engineInstances");
        return this;
    }

    /**
     * Get the region property: Azure region name.
     * The region name should of format accepted by ARM, and should be a region supported by Azure Load Testing. For
     * example, East US should be passed as "eastus".
     * The region name must match one of the strings in the "Name" column returned from running the "az account
     * list-locations -o table" Azure CLI command.
     * 
     * @return the region value.
     */
    @Generated
    public String getRegion() {
        return this.region;
    }

    /**
     * Set the region property: Azure region name.
     * The region name should of format accepted by ARM, and should be a region supported by Azure Load Testing. For
     * example, East US should be passed as "eastus".
     * The region name must match one of the strings in the "Name" column returned from running the "az account
     * list-locations -o table" Azure CLI command.
     * <p>Required when create the resource.</p>
     * 
     * @param region the region value to set.
     * @return the RegionalConfiguration object itself.
     */
    @Generated
    public RegionalConfiguration setRegion(String region) {
        this.region = region;
        this.updatedProperties.add("region");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeIntField("engineInstances", this.engineInstances);
            jsonWriter.writeStringField("region", this.region);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("engineInstances")) {
            jsonWriter.writeIntField("engineInstances", this.engineInstances);
        }
        if (updatedProperties.contains("region")) {
            if (this.region == null) {
                jsonWriter.writeNullField("region");
            } else {
                jsonWriter.writeStringField("region", this.region);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegionalConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegionalConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegionalConfiguration.
     */
    @Generated
    public static RegionalConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegionalConfiguration deserializedRegionalConfiguration = new RegionalConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("engineInstances".equals(fieldName)) {
                    deserializedRegionalConfiguration.engineInstances = reader.getInt();
                } else if ("region".equals(fieldName)) {
                    deserializedRegionalConfiguration.region = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegionalConfiguration;
        });
    }
}
