// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The input artifacts for the test run.
 */
@Immutable
public final class TestRunInputArtifacts implements JsonSerializable<TestRunInputArtifacts> {

    /*
     * The load test YAML file that contains the the test configuration
     */
    @Generated
    private TestRunFileInfo configFileInfo;

    /*
     * The test script file for the test run
     */
    @Generated
    private TestRunFileInfo testScriptFileInfo;

    /*
     * The zip file for all input artifacts
     */
    @Generated
    private TestRunFileInfo inputArtifactsZipFileInfo;

    /*
     * The config json file for url based test
     */
    @Generated
    private TestRunFileInfo urlTestConfigFileInfo;

    /*
     * Additional supported files for the test run
     */
    @Generated
    private List<TestRunFileInfo> additionalFileInfo;

    /**
     * Creates an instance of TestRunInputArtifacts class.
     */
    @Generated
    private TestRunInputArtifacts() {
    }

    /**
     * Get the configFileInfo property: The load test YAML file that contains the the test configuration.
     *
     * @return the configFileInfo value.
     */
    @Generated
    public TestRunFileInfo getConfigFileInfo() {
        return this.configFileInfo;
    }

    /**
     * Get the testScriptFileInfo property: The test script file for the test run.
     *
     * @return the testScriptFileInfo value.
     */
    @Generated
    public TestRunFileInfo getTestScriptFileInfo() {
        return this.testScriptFileInfo;
    }

    /**
     * Get the inputArtifactsZipFileInfo property: The zip file for all input artifacts.
     *
     * @return the inputArtifactsZipFileInfo value.
     */
    @Generated
    public TestRunFileInfo getInputArtifactsZipFileInfo() {
        return this.inputArtifactsZipFileInfo;
    }

    /**
     * Get the urlTestConfigFileInfo property: The config json file for url based test.
     *
     * @return the urlTestConfigFileInfo value.
     */
    @Generated
    public TestRunFileInfo getUrlTestConfigFileInfo() {
        return this.urlTestConfigFileInfo;
    }

    /**
     * Get the additionalFileInfo property: Additional supported files for the test run.
     *
     * @return the additionalFileInfo value.
     */
    @Generated
    public List<TestRunFileInfo> getAdditionalFileInfo() {
        return this.additionalFileInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("configFileInfo", this.configFileInfo);
        jsonWriter.writeJsonField("testScriptFileInfo", this.testScriptFileInfo);
        jsonWriter.writeJsonField("userPropFileInfo", this.userPropertyFileInfo);
        jsonWriter.writeJsonField("inputArtifactsZipFileInfo", this.inputArtifactsZipFileInfo);
        jsonWriter.writeJsonField("urlTestConfigFileInfo", this.urlTestConfigFileInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunInputArtifacts from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunInputArtifacts if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunInputArtifacts.
     */
    @Generated
    public static TestRunInputArtifacts fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunInputArtifacts deserializedTestRunInputArtifacts = new TestRunInputArtifacts();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("configFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.configFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("testScriptFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.testScriptFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("userPropFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.userPropertyFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("inputArtifactsZipFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.inputArtifactsZipFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("urlTestConfigFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.urlTestConfigFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("additionalFileInfo".equals(fieldName)) {
                    List<TestRunFileInfo> additionalFileInfo
                        = reader.readArray(reader1 -> TestRunFileInfo.fromJson(reader1));
                    deserializedTestRunInputArtifacts.additionalFileInfo = additionalFileInfo;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTestRunInputArtifacts;
        });
    }

    /*
     * The user properties file
     */
    @Generated
    private TestRunFileInfo userPropertyFileInfo;

    /**
     * Get the userPropertyFileInfo property: The user properties file.
     *
     * @return the userPropertyFileInfo value.
     */
    @Generated
    public TestRunFileInfo getUserPropertyFileInfo() {
        return this.userPropertyFileInfo;
    }
}
