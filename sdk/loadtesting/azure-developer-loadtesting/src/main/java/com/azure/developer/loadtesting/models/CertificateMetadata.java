// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Certificates metadata.
 */
@Fluent
public final class CertificateMetadata implements JsonSerializable<CertificateMetadata> {
    /*
     * The value of the certificate for respective type
     */
    @Generated
    private String value;

    /*
     * Type of certificate
     */
    @Generated
    private CertificateType type;

    /*
     * Name of the certificate.
     */
    @Generated
    private String name;

    /**
     * Creates an instance of CertificateMetadata class.
     */
    @Generated
    public CertificateMetadata() {
    }

    /**
     * Get the value property: The value of the certificate for respective type.
     * 
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value of the certificate for respective type.
     * 
     * @param value the value value to set.
     * @return the CertificateMetadata object itself.
     */
    @Generated
    public CertificateMetadata setValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the type property: Type of certificate.
     * 
     * @return the type value.
     */
    @Generated
    public CertificateType getType() {
        return this.type;
    }

    /**
     * Set the type property: Type of certificate.
     * 
     * @param type the type value to set.
     * @return the CertificateMetadata object itself.
     */
    @Generated
    public CertificateMetadata setType(CertificateType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: Name of the certificate.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the certificate.
     * 
     * @param name the name value to set.
     * @return the CertificateMetadata object itself.
     */
    @Generated
    public CertificateMetadata setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CertificateMetadata.
     */
    public static CertificateMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateMetadata deserializedCertificateMetadata = new CertificateMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedCertificateMetadata.value = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCertificateMetadata.type = CertificateType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedCertificateMetadata.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateMetadata;
        });
    }
}
