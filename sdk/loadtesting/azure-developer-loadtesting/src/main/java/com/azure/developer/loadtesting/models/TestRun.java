// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Load test run model. */
@Fluent
public final class TestRun {

    /*
     * Pass fail criteria for a test.
     */
    @Generated
    @JsonProperty(value = "passFailCriteria")
    private PassFailCriteria passFailCriteria;

    /*
     * Secrets can be stored in an Azure Key Vault or any other secret store. If the
     * secret is stored in an Azure Key Vault, the value should be the secret
     * identifier and the type should be AKV_SECRET_URI. If the secret is stored
     * elsewhere, the secret value should be provided directly and the type should be
     * SECRET_VALUE.
     */
    @Generated
    @JsonProperty(value = "secrets")
    private Map<String, Secret> secrets;

    /*
     * Certificates metadata
     */
    @Generated
    @JsonProperty(value = "certificate")
    private CertificateMetadata certificate;

    /*
     * Environment variables which are defined as a set of <name,value> pairs.
     */
    @Generated
    @JsonProperty(value = "environmentVariables")
    private Map<String, String> environmentVariables;

    /*
     * Error details if there is any failure in load test run
     */
    @Generated
    @JsonProperty(value = "errorDetails", access = JsonProperty.Access.WRITE_ONLY)
    private List<ErrorDetails> errorDetails;

    /*
     * Test run statistics.
     */
    @Generated
    @JsonProperty(value = "testRunStatistics", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, TestRunStatistics> testRunStatistics;

    /*
     * The load test configuration.
     */
    @Generated
    @JsonProperty(value = "loadTestConfiguration")
    private LoadTestConfiguration loadTestConfiguration;

    /*
     * Collection of test run artifacts
     */
    @Generated
    @JsonProperty(value = "testArtifacts", access = JsonProperty.Access.WRITE_ONLY)
    private TestRunArtifacts testArtifacts;

    /*
     * Test result for pass/Fail criteria used during the test run.
     */
    @Generated
    @JsonProperty(value = "testResult", access = JsonProperty.Access.WRITE_ONLY)
    private PFTestResult testResult;

    /*
     * Number of virtual users, for which test has been run.
     */
    @Generated
    @JsonProperty(value = "virtualUsers", access = JsonProperty.Access.WRITE_ONLY)
    private Integer virtualUsers;

    /*
     * Display name of a testRun.
     */
    @Generated
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Associated test Id.
     */
    @Generated
    @JsonProperty(value = "testId")
    private String testId;

    /*
     * The test run description.
     */
    @Generated
    @JsonProperty(value = "description")
    private String description;

    /*
     * The test run status.
     */
    @Generated
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private Status status;

    /*
     * The test run start DateTime(ISO 8601 literal format).
     */
    @Generated
    @JsonProperty(value = "startDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startDateTime;

    /*
     * The test run end DateTime(ISO 8601 literal format).
     */
    @Generated
    @JsonProperty(value = "endDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endDateTime;

    /*
     * Test run initiated time.
     */
    @Generated
    @JsonProperty(value = "executedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime executedDateTime;

    /*
     * Portal url.
     */
    @Generated
    @JsonProperty(value = "portalUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String portalUrl;

    /*
     * Test run duration in milliseconds.
     */
    @Generated
    @JsonProperty(value = "duration", access = JsonProperty.Access.WRITE_ONLY)
    private Integer duration;

    /*
     * Subnet ID on which the load test instances should run.
     */
    @Generated
    @JsonProperty(value = "subnetId", access = JsonProperty.Access.WRITE_ONLY)
    private String subnetId;

    /*
     * The creation datetime(ISO 8601 literal format).
     */
    @Generated
    @JsonProperty(value = "createdDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDateTime;

    /*
     * The user that created.
     */
    @Generated
    @JsonProperty(value = "createdBy", access = JsonProperty.Access.WRITE_ONLY)
    private String createdBy;

    /*
     * The last Modified datetime(ISO 8601 literal format).
     */
    @Generated
    @JsonProperty(value = "lastModifiedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The user that last modified.
     */
    @Generated
    @JsonProperty(value = "lastModifiedBy", access = JsonProperty.Access.WRITE_ONLY)
    private String lastModifiedBy;

    /** Creates an instance of TestRun class. */
    @Generated
    public TestRun() {}

    /**
     * Get the passFailCriteria property: Pass fail criteria for a test.
     *
     * @return the passFailCriteria value.
     */
    @Generated
    public PassFailCriteria getPassFailCriteria() {
        return this.passFailCriteria;
    }

    /**
     * Set the passFailCriteria property: Pass fail criteria for a test.
     *
     * @param passFailCriteria the passFailCriteria value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setPassFailCriteria(PassFailCriteria passFailCriteria) {
        this.passFailCriteria = passFailCriteria;
        return this;
    }

    /**
     * Get the secrets property: Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is
     * stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If
     * the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
     *
     * @return the secrets value.
     */
    @Generated
    public Map<String, Secret> getSecrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is
     * stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If
     * the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
     *
     * @param secrets the secrets value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setSecrets(Map<String, Secret> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Get the certificate property: Certificates metadata.
     *
     * @return the certificate value.
     */
    @Generated
    public CertificateMetadata getCertificate() {
        return this.certificate;
    }

    /**
     * Set the certificate property: Certificates metadata.
     *
     * @param certificate the certificate value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setCertificate(CertificateMetadata certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables which are defined as a set of &lt;name,value&gt;
     * pairs.
     *
     * @return the environmentVariables value.
     */
    @Generated
    public Map<String, String> getEnvironmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables which are defined as a set of &lt;name,value&gt;
     * pairs.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the errorDetails property: Error details if there is any failure in load test run.
     *
     * @return the errorDetails value.
     */
    @Generated
    public List<ErrorDetails> getErrorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the testRunStatistics property: Test run statistics.
     *
     * @return the testRunStatistics value.
     */
    @Generated
    public Map<String, TestRunStatistics> getTestRunStatistics() {
        return this.testRunStatistics;
    }

    /**
     * Get the loadTestConfiguration property: The load test configuration.
     *
     * @return the loadTestConfiguration value.
     */
    @Generated
    public LoadTestConfiguration getLoadTestConfiguration() {
        return this.loadTestConfiguration;
    }

    /**
     * Set the loadTestConfiguration property: The load test configuration.
     *
     * @param loadTestConfiguration the loadTestConfiguration value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setLoadTestConfiguration(LoadTestConfiguration loadTestConfiguration) {
        this.loadTestConfiguration = loadTestConfiguration;
        return this;
    }

    /**
     * Get the testArtifacts property: Collection of test run artifacts.
     *
     * @return the testArtifacts value.
     */
    @Generated
    public TestRunArtifacts getTestArtifacts() {
        return this.testArtifacts;
    }

    /**
     * Get the testResult property: Test result for pass/Fail criteria used during the test run.
     *
     * @return the testResult value.
     */
    @Generated
    public PFTestResult getTestResult() {
        return this.testResult;
    }

    /**
     * Get the virtualUsers property: Number of virtual users, for which test has been run.
     *
     * @return the virtualUsers value.
     */
    @Generated
    public Integer getVirtualUsers() {
        return this.virtualUsers;
    }

    /**
     * Get the displayName property: Display name of a testRun.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of a testRun.
     *
     * @param displayName the displayName value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the testId property: Associated test Id.
     *
     * @return the testId value.
     */
    @Generated
    public String getTestId() {
        return this.testId;
    }

    /**
     * Set the testId property: Associated test Id.
     *
     * @param testId the testId value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setTestId(String testId) {
        this.testId = testId;
        return this;
    }

    /**
     * Get the description property: The test run description.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The test run description.
     *
     * @param description the description value to set.
     * @return the TestRun object itself.
     */
    @Generated
    public TestRun setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the status property: The test run status.
     *
     * @return the status value.
     */
    @Generated
    public Status getStatus() {
        return this.status;
    }

    /**
     * Get the startDateTime property: The test run start DateTime(ISO 8601 literal format).
     *
     * @return the startDateTime value.
     */
    @Generated
    public OffsetDateTime getStartDateTime() {
        return this.startDateTime;
    }

    /**
     * Get the endDateTime property: The test run end DateTime(ISO 8601 literal format).
     *
     * @return the endDateTime value.
     */
    @Generated
    public OffsetDateTime getEndDateTime() {
        return this.endDateTime;
    }

    /**
     * Get the executedDateTime property: Test run initiated time.
     *
     * @return the executedDateTime value.
     */
    @Generated
    public OffsetDateTime getExecutedDateTime() {
        return this.executedDateTime;
    }

    /**
     * Get the portalUrl property: Portal url.
     *
     * @return the portalUrl value.
     */
    @Generated
    public String getPortalUrl() {
        return this.portalUrl;
    }

    /**
     * Get the duration property: Test run duration in milliseconds.
     *
     * @return the duration value.
     */
    @Generated
    public Integer getDuration() {
        return this.duration;
    }

    /**
     * Get the subnetId property: Subnet ID on which the load test instances should run.
     *
     * @return the subnetId value.
     */
    @Generated
    public String getSubnetId() {
        return this.subnetId;
    }

    /**
     * Get the createdDateTime property: The creation datetime(ISO 8601 literal format).
     *
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the createdBy property: The user that created.
     *
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last Modified datetime(ISO 8601 literal format).
     *
     * @return the lastModifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastModifiedBy property: The user that last modified.
     *
     * @return the lastModifiedBy value.
     */
    @Generated
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }
}
