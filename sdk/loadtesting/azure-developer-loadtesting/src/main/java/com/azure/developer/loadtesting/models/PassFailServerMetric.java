// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Pass fail server metric.
 */
@Fluent
public final class PassFailServerMetric implements JsonSerializable<PassFailServerMetric> {

    /*
     * The resource id of the resource emitting the metric.
     */
    @Generated
    private String resourceId;

    /*
     * The server metric namespace.
     */
    @Generated
    private String metricNamespace;

    /*
     * The server metric name.
     */
    @Generated
    private String metricName;

    /*
     * Aggregation Type
     */
    @Generated
    private String aggregation;

    /*
     * The comparison operator. Supported types ‘>’, ‘<’
     */
    @Generated
    private String condition;

    /*
     * The value to compare with the server metric.
     */
    @Generated
    private double value;

    /*
     * Action taken after the threshold is met. Default is ‘continue’.
     */
    @Generated
    private PFAction action;

    /*
     * The actual value of the server metric
     */
    @Generated
    private Double actualValue;

    /*
     * Outcome of the test run.
     */
    @Generated
    private PFResult result;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setPassFailServerMetricAccessor(new JsonMergePatchHelper.PassFailServerMetricAccessor() {

            @Override
            public PassFailServerMetric prepareModelForJsonMergePatch(PassFailServerMetric model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(PassFailServerMetric model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of PassFailServerMetric class.
     */
    @Generated
    public PassFailServerMetric() {
    }

    /**
     * Get the resourceId property: The resource id of the resource emitting the metric.
     *
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource id of the resource emitting the metric.
     * <p>Required when create the resource.</p>
     *
     * @param resourceId the resourceId value to set.
     * @return the PassFailServerMetric object itself.
     */
    @Generated
    public PassFailServerMetric setResourceId(String resourceId) {
        this.resourceId = resourceId;
        this.updatedProperties.add("resourceId");
        return this;
    }

    /**
     * Get the metricNamespace property: The server metric namespace.
     *
     * @return the metricNamespace value.
     */
    @Generated
    public String getMetricNamespace() {
        return this.metricNamespace;
    }

    /**
     * Set the metricNamespace property: The server metric namespace.
     * <p>Required when create the resource.</p>
     *
     * @param metricNamespace the metricNamespace value to set.
     * @return the PassFailServerMetric object itself.
     */
    @Generated
    public PassFailServerMetric setMetricNamespace(String metricNamespace) {
        this.metricNamespace = metricNamespace;
        this.updatedProperties.add("metricNamespace");
        return this;
    }

    /**
     * Get the metricName property: The server metric name.
     *
     * @return the metricName value.
     */
    @Generated
    public String getMetricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: The server metric name.
     * <p>Required when create the resource.</p>
     *
     * @param metricName the metricName value to set.
     * @return the PassFailServerMetric object itself.
     */
    @Generated
    public PassFailServerMetric setMetricName(String metricName) {
        this.metricName = metricName;
        this.updatedProperties.add("metricName");
        return this;
    }

    /**
     * Get the aggregation property: Aggregation Type.
     *
     * @return the aggregation value.
     */
    @Generated
    public String getAggregation() {
        return this.aggregation;
    }

    /**
     * Set the aggregation property: Aggregation Type.
     * <p>Required when create the resource.</p>
     *
     * @param aggregation the aggregation value to set.
     * @return the PassFailServerMetric object itself.
     */
    @Generated
    public PassFailServerMetric setAggregation(String aggregation) {
        this.aggregation = aggregation;
        this.updatedProperties.add("aggregation");
        return this;
    }

    /**
     * Get the condition property: The comparison operator. Supported types ‘&gt;’, ‘&lt;’.
     *
     * @return the condition value.
     */
    @Generated
    public String getCondition() {
        return this.condition;
    }

    /**
     * Set the condition property: The comparison operator. Supported types ‘&gt;’, ‘&lt;’.
     * <p>Required when create the resource.</p>
     *
     * @param condition the condition value to set.
     * @return the PassFailServerMetric object itself.
     */
    @Generated
    public PassFailServerMetric setCondition(String condition) {
        this.condition = condition;
        this.updatedProperties.add("condition");
        return this;
    }

    /**
     * Get the value property: The value to compare with the server metric.
     *
     * @return the value value.
     */
    @Generated
    public double getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value to compare with the server metric.
     * <p>Required when create the resource.</p>
     *
     * @param value the value value to set.
     * @return the PassFailServerMetric object itself.
     */
    @Generated
    public PassFailServerMetric setValue(double value) {
        this.value = value;
        this.updatedProperties.add("value");
        return this;
    }

    /**
     * Get the action property: Action taken after the threshold is met. Default is ‘continue’.
     *
     * @return the action value.
     */
    @Generated
    public PFAction getAction() {
        return this.action;
    }

    /**
     * Set the action property: Action taken after the threshold is met. Default is ‘continue’.
     *
     * @param action the action value to set.
     * @return the PassFailServerMetric object itself.
     */
    @Generated
    public PassFailServerMetric setAction(PFAction action) {
        this.action = action;
        this.updatedProperties.add("action");
        return this;
    }

    /**
     * Get the actualValue property: The actual value of the server metric.
     *
     * @return the actualValue value.
     */
    @Generated
    public Double getActualValue() {
        return this.actualValue;
    }

    /**
     * Get the result property: Outcome of the test run.
     *
     * @return the result value.
     */
    @Generated
    public PFResult getResult() {
        return this.result;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("resourceId", this.resourceId);
            jsonWriter.writeStringField("metricNamespace", this.metricNamespace);
            jsonWriter.writeStringField("metricName", this.metricName);
            jsonWriter.writeStringField("aggregation", this.aggregation);
            jsonWriter.writeStringField("condition", this.condition);
            jsonWriter.writeDoubleField("value", this.value);
            jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("resourceId")) {
            if (this.resourceId == null) {
                jsonWriter.writeNullField("resourceId");
            } else {
                jsonWriter.writeStringField("resourceId", this.resourceId);
            }
        }
        if (updatedProperties.contains("metricNamespace")) {
            if (this.metricNamespace == null) {
                jsonWriter.writeNullField("metricNamespace");
            } else {
                jsonWriter.writeStringField("metricNamespace", this.metricNamespace);
            }
        }
        if (updatedProperties.contains("metricName")) {
            if (this.metricName == null) {
                jsonWriter.writeNullField("metricName");
            } else {
                jsonWriter.writeStringField("metricName", this.metricName);
            }
        }
        if (updatedProperties.contains("aggregation")) {
            if (this.aggregation == null) {
                jsonWriter.writeNullField("aggregation");
            } else {
                jsonWriter.writeStringField("aggregation", this.aggregation);
            }
        }
        if (updatedProperties.contains("condition")) {
            if (this.condition == null) {
                jsonWriter.writeNullField("condition");
            } else {
                jsonWriter.writeStringField("condition", this.condition);
            }
        }
        if (updatedProperties.contains("value")) {
            jsonWriter.writeDoubleField("value", this.value);
        }
        if (updatedProperties.contains("action")) {
            if (this.action == null) {
                jsonWriter.writeNullField("action");
            } else {
                jsonWriter.writeStringField("action", this.action.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PassFailServerMetric from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PassFailServerMetric if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PassFailServerMetric.
     */
    @Generated
    public static PassFailServerMetric fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PassFailServerMetric deserializedPassFailServerMetric = new PassFailServerMetric();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("resourceId".equals(fieldName)) {
                    deserializedPassFailServerMetric.resourceId = reader.getString();
                } else if ("metricNamespace".equals(fieldName)) {
                    deserializedPassFailServerMetric.metricNamespace = reader.getString();
                } else if ("metricName".equals(fieldName)) {
                    deserializedPassFailServerMetric.metricName = reader.getString();
                } else if ("aggregation".equals(fieldName)) {
                    deserializedPassFailServerMetric.aggregation = reader.getString();
                } else if ("condition".equals(fieldName)) {
                    deserializedPassFailServerMetric.condition = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedPassFailServerMetric.value = reader.getDouble();
                } else if ("action".equals(fieldName)) {
                    deserializedPassFailServerMetric.action = PFAction.fromString(reader.getString());
                } else if ("actualValue".equals(fieldName)) {
                    deserializedPassFailServerMetric.actualValue = reader.getNullable(JsonReader::getDouble);
                } else if ("result".equals(fieldName)) {
                    deserializedPassFailServerMetric.result = PFResult.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPassFailServerMetric;
        });
    }
}
