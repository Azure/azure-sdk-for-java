// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Filters to fetch the set of metric.
 */
@Fluent
public final class MetricRequestPayload implements JsonSerializable<MetricRequestPayload> {
    /*
     * Get metrics for specific dimension values. Example: Metric contains dimension
     * like SamplerName, Error. To retrieve all the time series data where SamplerName
     * is equals to HTTPRequest1 or HTTPRequest2, the DimensionFilter value will be
     * {"SamplerName", ["HTTPRequest1", "HTTPRequest2"}
     */
    @Generated
    private List<DimensionFilter> filters;

    /**
     * Creates an instance of MetricRequestPayload class.
     */
    @Generated
    public MetricRequestPayload() {
    }

    /**
     * Get the filters property: Get metrics for specific dimension values. Example: Metric contains dimension
     * like SamplerName, Error. To retrieve all the time series data where SamplerName
     * is equals to HTTPRequest1 or HTTPRequest2, the DimensionFilter value will be
     * {"SamplerName", ["HTTPRequest1", "HTTPRequest2"}.
     * 
     * @return the filters value.
     */
    @Generated
    public List<DimensionFilter> getFilters() {
        return this.filters;
    }

    /**
     * Set the filters property: Get metrics for specific dimension values. Example: Metric contains dimension
     * like SamplerName, Error. To retrieve all the time series data where SamplerName
     * is equals to HTTPRequest1 or HTTPRequest2, the DimensionFilter value will be
     * {"SamplerName", ["HTTPRequest1", "HTTPRequest2"}.
     * 
     * @param filters the filters value to set.
     * @return the MetricRequestPayload object itself.
     */
    @Generated
    public MetricRequestPayload setFilters(List<DimensionFilter> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("filters", this.filters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricRequestPayload from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricRequestPayload if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricRequestPayload.
     */
    @Generated
    public static MetricRequestPayload fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricRequestPayload deserializedMetricRequestPayload = new MetricRequestPayload();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filters".equals(fieldName)) {
                    List<DimensionFilter> filters = reader.readArray(reader1 -> DimensionFilter.fromJson(reader1));
                    deserializedMetricRequestPayload.filters = filters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricRequestPayload;
        });
    }
}
