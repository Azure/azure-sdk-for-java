// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * Container info.
 */
@Immutable
public final class ContainerInfo implements JsonSerializable<ContainerInfo> {

    /*
     * Container URL.
     */
    @Generated
    private String url;

    /*
     * Expiry time of the container (ISO 8601 literal format)
     */
    @Generated
    private OffsetDateTime expireDateTime;

    /**
     * Creates an instance of ContainerInfo class.
     */
    @Generated
    private ContainerInfo() {
    }

    /**
     * Get the url property: Container URL.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the expireDateTime property: Expiry time of the container (ISO 8601 literal format).
     *
     * @return the expireDateTime value.
     */
    @Generated
    public OffsetDateTime getExpireDateTime() {
        return this.expireDateTime;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("expireDateTime", Objects.toString(this.expireDateTime, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerInfo from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContainerInfo.
     */
    public static ContainerInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerInfo deserializedContainerInfo = new ContainerInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("url".equals(fieldName)) {
                    deserializedContainerInfo.url = reader.getString();
                } else if ("expireDateTime".equals(fieldName)) {
                    deserializedContainerInfo.expireDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedContainerInfo;
        });
    }
}
