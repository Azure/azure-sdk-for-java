// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Configurations for the load test.
 */
@Fluent
public final class LoadTestConfiguration implements JsonSerializable<LoadTestConfiguration> {

    /*
     * The number of engine instances to execute load test. Supported values are in range of 1-400. Required for
     * creating a new test.
     */
    @Generated
    private Integer engineInstances;

    /*
     * If true, optionalLoadTestConfig is required and JMX script for the load test is
     * not required to upload.
     */
    @Generated
    private Boolean quickStartTest;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setLoadTestConfigurationAccessor(new JsonMergePatchHelper.LoadTestConfigurationAccessor() {

            @Override
            public LoadTestConfiguration prepareModelForJsonMergePatch(LoadTestConfiguration model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(LoadTestConfiguration model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of LoadTestConfiguration class.
     */
    @Generated
    public LoadTestConfiguration() {
    }

    /**
     * Get the engineInstances property: The number of engine instances to execute load test. Supported values are in
     * range of 1-400. Required for creating a new test.
     *
     * @return the engineInstances value.
     */
    @Generated
    public Integer getEngineInstances() {
        return this.engineInstances;
    }

    /**
     * Set the engineInstances property: The number of engine instances to execute load test. Supported values are in
     * range of 1-400. Required for creating a new test.
     *
     * @param engineInstances the engineInstances value to set.
     * @return the LoadTestConfiguration object itself.
     */
    @Generated
    public LoadTestConfiguration setEngineInstances(Integer engineInstances) {
        this.engineInstances = engineInstances;
        this.updatedProperties.add("engineInstances");
        return this;
    }

    /**
     * Get the quickStartTest property: If true, optionalLoadTestConfig is required and JMX script for the load test is
     * not required to upload.
     *
     * @return the quickStartTest value.
     */
    @Generated
    public Boolean isQuickStartTest() {
        return this.quickStartTest;
    }

    /**
     * Set the quickStartTest property: If true, optionalLoadTestConfig is required and JMX script for the load test is
     * not required to upload.
     *
     * @param quickStartTest the quickStartTest value to set.
     * @return the LoadTestConfiguration object itself.
     */
    @Generated
    public LoadTestConfiguration setQuickStartTest(Boolean quickStartTest) {
        this.quickStartTest = quickStartTest;
        this.updatedProperties.add("quickStartTest");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeNumberField("engineInstances", this.engineInstances);
            jsonWriter.writeBooleanField("splitAllCSVs", this.splitAllCsvs);
            jsonWriter.writeBooleanField("quickStartTest", this.quickStartTest);
            jsonWriter.writeJsonField("optionalLoadTestConfig", this.optionalLoadTestConfiguration);
            jsonWriter.writeArrayField("regionalLoadTestConfig", this.regionalLoadTestConfiguration,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("engineInstances")) {
            if (this.engineInstances == null) {
                jsonWriter.writeNullField("engineInstances");
            } else {
                jsonWriter.writeNumberField("engineInstances", this.engineInstances);
            }
        }
        if (updatedProperties.contains("splitAllCsvs")) {
            if (this.splitAllCsvs == null) {
                jsonWriter.writeNullField("splitAllCSVs");
            } else {
                jsonWriter.writeBooleanField("splitAllCSVs", this.splitAllCsvs);
            }
        }
        if (updatedProperties.contains("quickStartTest")) {
            if (this.quickStartTest == null) {
                jsonWriter.writeNullField("quickStartTest");
            } else {
                jsonWriter.writeBooleanField("quickStartTest", this.quickStartTest);
            }
        }
        if (updatedProperties.contains("optionalLoadTestConfiguration")) {
            if (this.optionalLoadTestConfiguration == null) {
                jsonWriter.writeNullField("optionalLoadTestConfig");
            } else {
                JsonMergePatchHelper.getOptionalLoadTestConfigurationAccessor()
                    .prepareModelForJsonMergePatch(this.optionalLoadTestConfiguration, true);
                jsonWriter.writeJsonField("optionalLoadTestConfig", this.optionalLoadTestConfiguration);
                JsonMergePatchHelper.getOptionalLoadTestConfigurationAccessor()
                    .prepareModelForJsonMergePatch(this.optionalLoadTestConfiguration, false);
            }
        }
        if (updatedProperties.contains("regionalLoadTestConfiguration")) {
            if (this.regionalLoadTestConfiguration == null) {
                jsonWriter.writeNullField("regionalLoadTestConfig");
            } else {
                jsonWriter.writeArrayField("regionalLoadTestConfig", this.regionalLoadTestConfiguration,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadTestConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadTestConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadTestConfiguration.
     */
    @Generated
    public static LoadTestConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadTestConfiguration deserializedLoadTestConfiguration = new LoadTestConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("engineInstances".equals(fieldName)) {
                    deserializedLoadTestConfiguration.engineInstances = reader.getNullable(JsonReader::getInt);
                } else if ("splitAllCSVs".equals(fieldName)) {
                    deserializedLoadTestConfiguration.splitAllCsvs = reader.getNullable(JsonReader::getBoolean);
                } else if ("quickStartTest".equals(fieldName)) {
                    deserializedLoadTestConfiguration.quickStartTest = reader.getNullable(JsonReader::getBoolean);
                } else if ("optionalLoadTestConfig".equals(fieldName)) {
                    deserializedLoadTestConfiguration.optionalLoadTestConfiguration
                        = OptionalLoadTestConfiguration.fromJson(reader);
                } else if ("regionalLoadTestConfig".equals(fieldName)) {
                    List<RegionalConfiguration> regionalLoadTestConfiguration
                        = reader.readArray(reader1 -> RegionalConfiguration.fromJson(reader1));
                    deserializedLoadTestConfiguration.regionalLoadTestConfiguration = regionalLoadTestConfiguration;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedLoadTestConfiguration;
        });
    }

    /*
     * If false, Azure Load Testing copies and processes your input files unmodified
     * across all test engine instances. If true, Azure Load Testing splits the CSV
     * input data evenly across all engine instances. If you provide multiple CSV
     * files, each file will be split evenly.
     */
    @Generated
    private Boolean splitAllCsvs;

    /**
     * Get the splitAllCsvs property: If false, Azure Load Testing copies and processes your input files unmodified
     * across all test engine instances. If true, Azure Load Testing splits the CSV
     * input data evenly across all engine instances. If you provide multiple CSV
     * files, each file will be split evenly.
     *
     * @return the splitAllCsvs value.
     */
    @Generated
    public Boolean isSplitAllCsvs() {
        return this.splitAllCsvs;
    }

    /**
     * Set the splitAllCsvs property: If false, Azure Load Testing copies and processes your input files unmodified
     * across all test engine instances. If true, Azure Load Testing splits the CSV
     * input data evenly across all engine instances. If you provide multiple CSV
     * files, each file will be split evenly.
     *
     * @param splitAllCsvs the splitAllCsvs value to set.
     * @return the LoadTestConfiguration object itself.
     */
    @Generated
    public LoadTestConfiguration setSplitAllCsvs(Boolean splitAllCsvs) {
        this.splitAllCsvs = splitAllCsvs;
        this.updatedProperties.add("splitAllCsvs");
        return this;
    }

    /*
     * Configuration for quick load test
     */
    @Generated
    private OptionalLoadTestConfiguration optionalLoadTestConfiguration;

    /*
     * Region distribution configuration for the load test.
     */
    @Generated
    private List<RegionalConfiguration> regionalLoadTestConfiguration;

    /**
     * Get the optionalLoadTestConfiguration property: Configuration for quick load test.
     *
     * @return the optionalLoadTestConfiguration value.
     */
    @Generated
    public OptionalLoadTestConfiguration getOptionalLoadTestConfiguration() {
        return this.optionalLoadTestConfiguration;
    }

    /**
     * Set the optionalLoadTestConfiguration property: Configuration for quick load test.
     *
     * @param optionalLoadTestConfiguration the optionalLoadTestConfiguration value to set.
     * @return the LoadTestConfiguration object itself.
     */
    @Generated
    public LoadTestConfiguration
        setOptionalLoadTestConfiguration(OptionalLoadTestConfiguration optionalLoadTestConfiguration) {
        this.optionalLoadTestConfiguration = optionalLoadTestConfiguration;
        this.updatedProperties.add("optionalLoadTestConfiguration");
        return this;
    }

    /**
     * Get the regionalLoadTestConfiguration property: Region distribution configuration for the load test.
     *
     * @return the regionalLoadTestConfiguration value.
     */
    @Generated
    public List<RegionalConfiguration> getRegionalLoadTestConfiguration() {
        return this.regionalLoadTestConfiguration;
    }

    /**
     * Set the regionalLoadTestConfiguration property: Region distribution configuration for the load test.
     *
     * @param regionalLoadTestConfiguration the regionalLoadTestConfiguration value to set.
     * @return the LoadTestConfiguration object itself.
     */
    @Generated
    public LoadTestConfiguration
        setRegionalLoadTestConfiguration(List<RegionalConfiguration> regionalLoadTestConfiguration) {
        this.regionalLoadTestConfiguration = regionalLoadTestConfiguration;
        this.updatedProperties.add("regionalLoadTestConfiguration");
        return this;
    }
}
