// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.implementation;

import com.azure.developer.loadtesting.models.AppComponent;
import com.azure.developer.loadtesting.models.AutoStopCriteria;
import com.azure.developer.loadtesting.models.CertificateMetadata;
import com.azure.developer.loadtesting.models.FunctionFlexConsumptionResourceConfiguration;
import com.azure.developer.loadtesting.models.LoadTestConfiguration;
import com.azure.developer.loadtesting.models.OptionalLoadTestConfig;
import com.azure.developer.loadtesting.models.PassFailCriteria;
import com.azure.developer.loadtesting.models.PassFailMetric;
import com.azure.developer.loadtesting.models.PassFailServerMetric;
import com.azure.developer.loadtesting.models.RegionalConfiguration;
import com.azure.developer.loadtesting.models.ResourceMetric;
import com.azure.developer.loadtesting.models.Secret;
import com.azure.developer.loadtesting.models.TargetResourceConfigurations;
import com.azure.developer.loadtesting.models.Test;
import com.azure.developer.loadtesting.models.TestAppComponents;
import com.azure.developer.loadtesting.models.TestProfile;
import com.azure.developer.loadtesting.models.TestProfileRun;
import com.azure.developer.loadtesting.models.TestRun;
import com.azure.developer.loadtesting.models.TestRunAppComponents;
import com.azure.developer.loadtesting.models.TestRunServerMetricConfig;
import com.azure.developer.loadtesting.models.TestServerMetricConfig;

/**
 * This is the Helper class to enable json merge patch serialization for a model.
 */
public class JsonMergePatchHelper {
    private static TestAccessor testAccessor;

    public interface TestAccessor {
        Test prepareModelForJsonMergePatch(Test test, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Test test);
    }

    public static void setTestAccessor(TestAccessor accessor) {
        testAccessor = accessor;
    }

    public static TestAccessor getTestAccessor() {
        return testAccessor;
    }

    private static PassFailCriteriaAccessor passFailCriteriaAccessor;

    public interface PassFailCriteriaAccessor {
        PassFailCriteria prepareModelForJsonMergePatch(PassFailCriteria passFailCriteria,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(PassFailCriteria passFailCriteria);
    }

    public static void setPassFailCriteriaAccessor(PassFailCriteriaAccessor accessor) {
        passFailCriteriaAccessor = accessor;
    }

    public static PassFailCriteriaAccessor getPassFailCriteriaAccessor() {
        return passFailCriteriaAccessor;
    }

    private static PassFailMetricAccessor passFailMetricAccessor;

    public interface PassFailMetricAccessor {
        PassFailMetric prepareModelForJsonMergePatch(PassFailMetric passFailMetric, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(PassFailMetric passFailMetric);
    }

    public static void setPassFailMetricAccessor(PassFailMetricAccessor accessor) {
        passFailMetricAccessor = accessor;
    }

    public static PassFailMetricAccessor getPassFailMetricAccessor() {
        return passFailMetricAccessor;
    }

    private static PassFailServerMetricAccessor passFailServerMetricAccessor;

    public interface PassFailServerMetricAccessor {
        PassFailServerMetric prepareModelForJsonMergePatch(PassFailServerMetric passFailServerMetric,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(PassFailServerMetric passFailServerMetric);
    }

    public static void setPassFailServerMetricAccessor(PassFailServerMetricAccessor accessor) {
        passFailServerMetricAccessor = accessor;
    }

    public static PassFailServerMetricAccessor getPassFailServerMetricAccessor() {
        return passFailServerMetricAccessor;
    }

    private static AutoStopCriteriaAccessor autoStopCriteriaAccessor;

    public interface AutoStopCriteriaAccessor {
        AutoStopCriteria prepareModelForJsonMergePatch(AutoStopCriteria autoStopCriteria,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(AutoStopCriteria autoStopCriteria);
    }

    public static void setAutoStopCriteriaAccessor(AutoStopCriteriaAccessor accessor) {
        autoStopCriteriaAccessor = accessor;
    }

    public static AutoStopCriteriaAccessor getAutoStopCriteriaAccessor() {
        return autoStopCriteriaAccessor;
    }

    private static SecretAccessor secretAccessor;

    public interface SecretAccessor {
        Secret prepareModelForJsonMergePatch(Secret secret, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Secret secret);
    }

    public static void setSecretAccessor(SecretAccessor accessor) {
        secretAccessor = accessor;
    }

    public static SecretAccessor getSecretAccessor() {
        return secretAccessor;
    }

    private static CertificateMetadataAccessor certificateMetadataAccessor;

    public interface CertificateMetadataAccessor {
        CertificateMetadata prepareModelForJsonMergePatch(CertificateMetadata certificateMetadata,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(CertificateMetadata certificateMetadata);
    }

    public static void setCertificateMetadataAccessor(CertificateMetadataAccessor accessor) {
        certificateMetadataAccessor = accessor;
    }

    public static CertificateMetadataAccessor getCertificateMetadataAccessor() {
        return certificateMetadataAccessor;
    }

    private static LoadTestConfigurationAccessor loadTestConfigurationAccessor;

    public interface LoadTestConfigurationAccessor {
        LoadTestConfiguration prepareModelForJsonMergePatch(LoadTestConfiguration loadTestConfiguration,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(LoadTestConfiguration loadTestConfiguration);
    }

    public static void setLoadTestConfigurationAccessor(LoadTestConfigurationAccessor accessor) {
        loadTestConfigurationAccessor = accessor;
    }

    public static LoadTestConfigurationAccessor getLoadTestConfigurationAccessor() {
        return loadTestConfigurationAccessor;
    }

    private static OptionalLoadTestConfigAccessor optionalLoadTestConfigAccessor;

    public interface OptionalLoadTestConfigAccessor {
        OptionalLoadTestConfig prepareModelForJsonMergePatch(OptionalLoadTestConfig optionalLoadTestConfig,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(OptionalLoadTestConfig optionalLoadTestConfig);
    }

    public static void setOptionalLoadTestConfigAccessor(OptionalLoadTestConfigAccessor accessor) {
        optionalLoadTestConfigAccessor = accessor;
    }

    public static OptionalLoadTestConfigAccessor getOptionalLoadTestConfigAccessor() {
        return optionalLoadTestConfigAccessor;
    }

    private static RegionalConfigurationAccessor regionalConfigurationAccessor;

    public interface RegionalConfigurationAccessor {
        RegionalConfiguration prepareModelForJsonMergePatch(RegionalConfiguration regionalConfiguration,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RegionalConfiguration regionalConfiguration);
    }

    public static void setRegionalConfigurationAccessor(RegionalConfigurationAccessor accessor) {
        regionalConfigurationAccessor = accessor;
    }

    public static RegionalConfigurationAccessor getRegionalConfigurationAccessor() {
        return regionalConfigurationAccessor;
    }

    private static TestAppComponentsAccessor testAppComponentsAccessor;

    public interface TestAppComponentsAccessor {
        TestAppComponents prepareModelForJsonMergePatch(TestAppComponents testAppComponents,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestAppComponents testAppComponents);
    }

    public static void setTestAppComponentsAccessor(TestAppComponentsAccessor accessor) {
        testAppComponentsAccessor = accessor;
    }

    public static TestAppComponentsAccessor getTestAppComponentsAccessor() {
        return testAppComponentsAccessor;
    }

    private static AppComponentAccessor appComponentAccessor;

    public interface AppComponentAccessor {
        AppComponent prepareModelForJsonMergePatch(AppComponent appComponent, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(AppComponent appComponent);
    }

    public static void setAppComponentAccessor(AppComponentAccessor accessor) {
        appComponentAccessor = accessor;
    }

    public static AppComponentAccessor getAppComponentAccessor() {
        return appComponentAccessor;
    }

    private static TestServerMetricConfigAccessor testServerMetricConfigAccessor;

    public interface TestServerMetricConfigAccessor {
        TestServerMetricConfig prepareModelForJsonMergePatch(TestServerMetricConfig testServerMetricConfig,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestServerMetricConfig testServerMetricConfig);
    }

    public static void setTestServerMetricConfigAccessor(TestServerMetricConfigAccessor accessor) {
        testServerMetricConfigAccessor = accessor;
    }

    public static TestServerMetricConfigAccessor getTestServerMetricConfigAccessor() {
        return testServerMetricConfigAccessor;
    }

    private static ResourceMetricAccessor resourceMetricAccessor;

    public interface ResourceMetricAccessor {
        ResourceMetric prepareModelForJsonMergePatch(ResourceMetric resourceMetric, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ResourceMetric resourceMetric);
    }

    public static void setResourceMetricAccessor(ResourceMetricAccessor accessor) {
        resourceMetricAccessor = accessor;
    }

    public static ResourceMetricAccessor getResourceMetricAccessor() {
        return resourceMetricAccessor;
    }

    private static TestProfileAccessor testProfileAccessor;

    public interface TestProfileAccessor {
        TestProfile prepareModelForJsonMergePatch(TestProfile testProfile, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestProfile testProfile);
    }

    public static void setTestProfileAccessor(TestProfileAccessor accessor) {
        testProfileAccessor = accessor;
    }

    public static TestProfileAccessor getTestProfileAccessor() {
        return testProfileAccessor;
    }

    private static TargetResourceConfigurationsAccessor targetResourceConfigurationsAccessor;

    public interface TargetResourceConfigurationsAccessor {
        TargetResourceConfigurations prepareModelForJsonMergePatch(
            TargetResourceConfigurations targetResourceConfigurations, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TargetResourceConfigurations targetResourceConfigurations);
    }

    public static void setTargetResourceConfigurationsAccessor(TargetResourceConfigurationsAccessor accessor) {
        targetResourceConfigurationsAccessor = accessor;
    }

    public static TargetResourceConfigurationsAccessor getTargetResourceConfigurationsAccessor() {
        return targetResourceConfigurationsAccessor;
    }

    private static FunctionFlexConsumptionResourceConfigurationAccessor functionFlexConsumptionResourceConfigurationAccessor;

    public interface FunctionFlexConsumptionResourceConfigurationAccessor {
        FunctionFlexConsumptionResourceConfiguration prepareModelForJsonMergePatch(
            FunctionFlexConsumptionResourceConfiguration functionFlexConsumptionResourceConfiguration,
            boolean jsonMergePatchEnabled);

        boolean
            isJsonMergePatch(FunctionFlexConsumptionResourceConfiguration functionFlexConsumptionResourceConfiguration);
    }

    public static void setFunctionFlexConsumptionResourceConfigurationAccessor(
        FunctionFlexConsumptionResourceConfigurationAccessor accessor) {
        functionFlexConsumptionResourceConfigurationAccessor = accessor;
    }

    public static FunctionFlexConsumptionResourceConfigurationAccessor
        getFunctionFlexConsumptionResourceConfigurationAccessor() {
        return functionFlexConsumptionResourceConfigurationAccessor;
    }

    private static TestRunAccessor testRunAccessor;

    public interface TestRunAccessor {
        TestRun prepareModelForJsonMergePatch(TestRun testRun, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRun testRun);
    }

    public static void setTestRunAccessor(TestRunAccessor accessor) {
        testRunAccessor = accessor;
    }

    public static TestRunAccessor getTestRunAccessor() {
        return testRunAccessor;
    }

    private static TestRunAppComponentsAccessor testRunAppComponentsAccessor;

    public interface TestRunAppComponentsAccessor {
        TestRunAppComponents prepareModelForJsonMergePatch(TestRunAppComponents testRunAppComponents,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRunAppComponents testRunAppComponents);
    }

    public static void setTestRunAppComponentsAccessor(TestRunAppComponentsAccessor accessor) {
        testRunAppComponentsAccessor = accessor;
    }

    public static TestRunAppComponentsAccessor getTestRunAppComponentsAccessor() {
        return testRunAppComponentsAccessor;
    }

    private static TestRunServerMetricConfigAccessor testRunServerMetricConfigAccessor;

    public interface TestRunServerMetricConfigAccessor {
        TestRunServerMetricConfig prepareModelForJsonMergePatch(TestRunServerMetricConfig testRunServerMetricConfig,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRunServerMetricConfig testRunServerMetricConfig);
    }

    public static void setTestRunServerMetricConfigAccessor(TestRunServerMetricConfigAccessor accessor) {
        testRunServerMetricConfigAccessor = accessor;
    }

    public static TestRunServerMetricConfigAccessor getTestRunServerMetricConfigAccessor() {
        return testRunServerMetricConfigAccessor;
    }

    private static TestProfileRunAccessor testProfileRunAccessor;

    public interface TestProfileRunAccessor {
        TestProfileRun prepareModelForJsonMergePatch(TestProfileRun testProfileRun, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestProfileRun testProfileRun);
    }

    public static void setTestProfileRunAccessor(TestProfileRunAccessor accessor) {
        testProfileRunAccessor = accessor;
    }

    public static TestProfileRunAccessor getTestProfileRunAccessor() {
        return testProfileRunAccessor;
    }
}
