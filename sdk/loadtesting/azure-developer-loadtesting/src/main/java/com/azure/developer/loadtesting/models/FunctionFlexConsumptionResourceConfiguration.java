// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Resource configuration instance for a Flex Consumption based Azure Function App.
 */
@Fluent
public final class FunctionFlexConsumptionResourceConfiguration
    implements JsonSerializable<FunctionFlexConsumptionResourceConfiguration> {
    /*
     * Memory size of the instance. Supported values are 2048, 4096.
     */
    @Generated
    private long instanceMemoryMB;

    /*
     * HTTP Concurrency for the function app.
     */
    @Generated
    private long httpConcurrency;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setFunctionFlexConsumptionResourceConfigurationAccessor(
            new JsonMergePatchHelper.FunctionFlexConsumptionResourceConfigurationAccessor() {
                @Override
                public FunctionFlexConsumptionResourceConfiguration prepareModelForJsonMergePatch(
                    FunctionFlexConsumptionResourceConfiguration model, boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(FunctionFlexConsumptionResourceConfiguration model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of FunctionFlexConsumptionResourceConfiguration class.
     */
    @Generated
    public FunctionFlexConsumptionResourceConfiguration() {
    }

    /**
     * Get the instanceMemoryMB property: Memory size of the instance. Supported values are 2048, 4096.
     * 
     * @return the instanceMemoryMB value.
     */
    @Generated
    public long getInstanceMemoryMB() {
        return this.instanceMemoryMB;
    }

    /**
     * Set the instanceMemoryMB property: Memory size of the instance. Supported values are 2048, 4096.
     * <p>Required when create the resource.</p>
     * 
     * @param instanceMemoryMB the instanceMemoryMB value to set.
     * @return the FunctionFlexConsumptionResourceConfiguration object itself.
     */
    @Generated
    public FunctionFlexConsumptionResourceConfiguration setInstanceMemoryMB(long instanceMemoryMB) {
        this.instanceMemoryMB = instanceMemoryMB;
        this.updatedProperties.add("instanceMemoryMB");
        return this;
    }

    /**
     * Get the httpConcurrency property: HTTP Concurrency for the function app.
     * 
     * @return the httpConcurrency value.
     */
    @Generated
    public long getHttpConcurrency() {
        return this.httpConcurrency;
    }

    /**
     * Set the httpConcurrency property: HTTP Concurrency for the function app.
     * <p>Required when create the resource.</p>
     * 
     * @param httpConcurrency the httpConcurrency value to set.
     * @return the FunctionFlexConsumptionResourceConfiguration object itself.
     */
    @Generated
    public FunctionFlexConsumptionResourceConfiguration setHttpConcurrency(long httpConcurrency) {
        this.httpConcurrency = httpConcurrency;
        this.updatedProperties.add("httpConcurrency");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeLongField("instanceMemoryMB", this.instanceMemoryMB);
            jsonWriter.writeLongField("httpConcurrency", this.httpConcurrency);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("instanceMemoryMB")) {
            jsonWriter.writeLongField("instanceMemoryMB", this.instanceMemoryMB);
        }
        if (updatedProperties.contains("httpConcurrency")) {
            jsonWriter.writeLongField("httpConcurrency", this.httpConcurrency);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FunctionFlexConsumptionResourceConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FunctionFlexConsumptionResourceConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FunctionFlexConsumptionResourceConfiguration.
     */
    @Generated
    public static FunctionFlexConsumptionResourceConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FunctionFlexConsumptionResourceConfiguration deserializedFunctionFlexConsumptionResourceConfiguration
                = new FunctionFlexConsumptionResourceConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceMemoryMB".equals(fieldName)) {
                    deserializedFunctionFlexConsumptionResourceConfiguration.instanceMemoryMB = reader.getLong();
                } else if ("httpConcurrency".equals(fieldName)) {
                    deserializedFunctionFlexConsumptionResourceConfiguration.httpConcurrency = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFunctionFlexConsumptionResourceConfiguration;
        });
    }
}
