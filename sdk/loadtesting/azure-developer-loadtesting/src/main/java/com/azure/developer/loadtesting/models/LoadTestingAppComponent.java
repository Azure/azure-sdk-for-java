// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * An Azure resource object (Refer azure generic resource model
 * :https://learn.microsoft.com/en-us/rest/api/resources/resources/get-by-id#genericresource).
 */
@Fluent
public final class LoadTestingAppComponent implements JsonSerializable<LoadTestingAppComponent> {

    /*
     * fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}
     */
    @Generated
    private String resourceId;

    /*
     * Azure resource name, required while creating the app component.
     */
    @Generated
    private String resourceName;

    /*
     * Azure resource type, required while creating the app component.
     */
    @Generated
    private String resourceType;

    /*
     * Azure resource display name
     */
    @Generated
    private String displayName;

    /*
     * Resource group name of the Azure resource
     */
    @Generated
    private String resourceGroup;

    /*
     * Subscription Id of the Azure resource
     */
    @Generated
    private String subscriptionId;

    /*
     * Kind of Azure resource type
     */
    @Generated
    private String kind;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setLoadTestingAppComponentAccessor(new JsonMergePatchHelper.LoadTestingAppComponentAccessor() {

                @Override
                public LoadTestingAppComponent prepareModelForJsonMergePatch(LoadTestingAppComponent model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(LoadTestingAppComponent model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of LoadTestingAppComponent class.
     */
    @Generated
    public LoadTestingAppComponent() {
    }

    /**
     * Get the resourceId property: fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the resourceName property: Azure resource name, required while creating the app component.
     *
     * @return the resourceName value.
     */
    @Generated
    public String getResourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Azure resource name, required while creating the app component.
     * <p>Required when create the resource.</p>
     *
     * @param resourceName the resourceName value to set.
     * @return the LoadTestingAppComponent object itself.
     */
    @Generated
    public LoadTestingAppComponent setResourceName(String resourceName) {
        this.resourceName = resourceName;
        this.updatedProperties.add("resourceName");
        return this;
    }

    /**
     * Get the resourceType property: Azure resource type, required while creating the app component.
     *
     * @return the resourceType value.
     */
    @Generated
    public String getResourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: Azure resource type, required while creating the app component.
     * <p>Required when create the resource.</p>
     *
     * @param resourceType the resourceType value to set.
     * @return the LoadTestingAppComponent object itself.
     */
    @Generated
    public LoadTestingAppComponent setResourceType(String resourceType) {
        this.resourceType = resourceType;
        this.updatedProperties.add("resourceType");
        return this;
    }

    /**
     * Get the displayName property: Azure resource display name.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Azure resource display name.
     *
     * @param displayName the displayName value to set.
     * @return the LoadTestingAppComponent object itself.
     */
    @Generated
    public LoadTestingAppComponent setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the resourceGroup property: Resource group name of the Azure resource.
     *
     * @return the resourceGroup value.
     */
    @Generated
    public String getResourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the subscriptionId property: Subscription Id of the Azure resource.
     *
     * @return the subscriptionId value.
     */
    @Generated
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the kind property: Kind of Azure resource type.
     *
     * @return the kind value.
     */
    @Generated
    public String getKind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of Azure resource type.
     *
     * @param kind the kind value to set.
     * @return the LoadTestingAppComponent object itself.
     */
    @Generated
    public LoadTestingAppComponent setKind(String kind) {
        this.kind = kind;
        this.updatedProperties.add("kind");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("resourceName", this.resourceName);
            jsonWriter.writeStringField("resourceType", this.resourceType);
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("kind", this.kind);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("resourceName")) {
            if (this.resourceName == null) {
                jsonWriter.writeNullField("resourceName");
            } else {
                jsonWriter.writeStringField("resourceName", this.resourceName);
            }
        }
        if (updatedProperties.contains("resourceType")) {
            if (this.resourceType == null) {
                jsonWriter.writeNullField("resourceType");
            } else {
                jsonWriter.writeStringField("resourceType", this.resourceType);
            }
        }
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadTestingAppComponent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadTestingAppComponent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoadTestingAppComponent.
     */
    @Generated
    public static LoadTestingAppComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadTestingAppComponent deserializedLoadTestingAppComponent = new LoadTestingAppComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("resourceId".equals(fieldName)) {
                    deserializedLoadTestingAppComponent.resourceId = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedLoadTestingAppComponent.resourceName = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedLoadTestingAppComponent.resourceType = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedLoadTestingAppComponent.displayName = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedLoadTestingAppComponent.resourceGroup = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedLoadTestingAppComponent.subscriptionId = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedLoadTestingAppComponent.kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedLoadTestingAppComponent;
        });
    }
}
