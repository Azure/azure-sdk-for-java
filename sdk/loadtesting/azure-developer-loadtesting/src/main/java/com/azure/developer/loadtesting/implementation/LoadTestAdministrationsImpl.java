// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in LoadTestAdministrations. */
public final class LoadTestAdministrationsImpl {
    /** The proxy service used to perform REST calls. */
    private final LoadTestAdministrationsService service;

    /** The service client containing this operation class. */
    private final LoadTestingClientImpl client;

    /**
     * Initializes an instance of LoadTestAdministrationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    LoadTestAdministrationsImpl(LoadTestingClientImpl client) {
        this.service =
                RestProxy.create(
                        LoadTestAdministrationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for LoadTestingClientLoadTestAdministrations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("https://{Endpoint}")
    @ServiceInterface(name = "LoadTestingClientLoa")
    private interface LoadTestAdministrationsService {
        @Patch("/appcomponents/{name}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateAppComponents(
                @HostParam("Endpoint") String endpoint,
                @PathParam("name") String name,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData body,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/appcomponents/{name}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteAppComponent(
                @HostParam("Endpoint") String endpoint,
                @PathParam("name") String name,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/appcomponents/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAppComponentByName(
                @HostParam("Endpoint") String endpoint,
                @PathParam("name") String name,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/appcomponents")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAppComponent(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Patch("/serverMetricsConfig/{name}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateServerMetricsConfig(
                @HostParam("Endpoint") String endpoint,
                @PathParam("name") String name,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData body,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/serverMetricsConfig/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServerMetricsByName(
                @HostParam("Endpoint") String endpoint,
                @PathParam("name") String name,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/serverMetricsConfig/{name}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteServerMetrics(
                @HostParam("Endpoint") String endpoint,
                @PathParam("name") String name,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/serverMetricsConfig")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServerMetrics(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/serverMetricsConfig/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getServerDefaultMetrics(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/serverMetricsConfig/supportedResourceTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSupportedResourceType(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Patch("/loadtests/{testId}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateTest(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @BodyParam("application/merge-patch+json") BinaryData body,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/loadtests/{testId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteLoadTest(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/loadtests/{testId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLoadTest(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/loadtests/sortAndFilter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listLoadTestSearch(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        // @Multipart not supported by RestProxy
        @Put("/loadtests/{testId}/files/{fileId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> uploadTestFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testId") String testId,
                @PathParam("fileId") String fileId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("multipart/form-data") BinaryData file,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/loadtests/{testId}/files/{fileId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTestFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testId") String testId,
                @PathParam("fileId") String fileId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/loadtests/{testId}/files/{fileId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTestFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testId") String testId,
                @PathParam("fileId") String fileId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/loadtests/{testId}/files")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllTestFiles(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listLoadTestSearchNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllTestFilesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Associate an App Component (Azure resource) to a test or test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body App Component model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Components model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateAppComponentsWithResponseAsync(
            String name, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateAppComponents(
                                this.client.getEndpoint(),
                                name,
                                this.client.getServiceVersion().getVersion(),
                                body,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Associate an App Component (Azure resource) to a test or test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body App Component model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Components model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateAppComponentsWithResponseAsync(
            String name, BinaryData body, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.createOrUpdateAppComponents(
                this.client.getEndpoint(),
                name,
                this.client.getServiceVersion().getVersion(),
                body,
                accept,
                requestOptions,
                context);
    }

    /**
     * Associate an App Component (Azure resource) to a test or test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body App Component model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Components model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateAppComponentsWithResponse(
            String name, BinaryData body, RequestOptions requestOptions) {
        return createOrUpdateAppComponentsWithResponseAsync(name, body, requestOptions).block();
    }

    /**
     * Delete an App Component.
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAppComponentWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteAppComponent(
                                this.client.getEndpoint(),
                                name,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete an App Component.
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAppComponentWithResponseAsync(
            String name, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteAppComponent(
                this.client.getEndpoint(),
                name,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Delete an App Component.
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAppComponentWithResponse(String name, RequestOptions requestOptions) {
        return deleteAppComponentWithResponseAsync(name, requestOptions).block();
    }

    /**
     * Get App Component details by App Component name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Component details by App Component name along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppComponentByNameWithResponseAsync(
            String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getAppComponentByName(
                                this.client.getEndpoint(),
                                name,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get App Component details by App Component name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Component details by App Component name along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppComponentByNameWithResponseAsync(
            String name, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getAppComponentByName(
                this.client.getEndpoint(),
                name,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get App Component details by App Component name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Component details by App Component name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAppComponentByNameWithResponse(String name, RequestOptions requestOptions) {
        return getAppComponentByNameWithResponseAsync(name, requestOptions).block();
    }

    /**
     * Get App Components for a test or a test run by its name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>testRunId</td><td>String</td><td>No</td><td>[Required, if testId is not provided] Test run Id.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Components for a test or a test run by its name along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppComponentWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getAppComponent(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get App Components for a test or a test run by its name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>testRunId</td><td>String</td><td>No</td><td>[Required, if testId is not provided] Test run Id.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Components for a test or a test run by its name along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppComponentWithResponseAsync(RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getAppComponent(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get App Components for a test or a test run by its name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>testRunId</td><td>String</td><td>No</td><td>[Required, if testId is not provided] Test run Id.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     name: String (Optional)
     *     value (Required): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Required)
     *             resourceType: String (Required)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return app Components for a test or a test run by its name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAppComponentWithResponse(RequestOptions requestOptions) {
        return getAppComponentWithResponseAsync(requestOptions).block();
    }

    /**
     * Configure server metrics for a test or test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Server metrics configuration model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics config model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateServerMetricsConfigWithResponseAsync(
            String name, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateServerMetricsConfig(
                                this.client.getEndpoint(),
                                name,
                                this.client.getServiceVersion().getVersion(),
                                body,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Configure server metrics for a test or test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Server metrics configuration model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics config model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateServerMetricsConfigWithResponseAsync(
            String name, BinaryData body, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.createOrUpdateServerMetricsConfig(
                this.client.getEndpoint(),
                name,
                this.client.getServiceVersion().getVersion(),
                body,
                accept,
                requestOptions,
                context);
    }

    /**
     * Configure server metrics for a test or test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Server metrics configuration model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics config model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateServerMetricsConfigWithResponse(
            String name, BinaryData body, RequestOptions requestOptions) {
        return createOrUpdateServerMetricsConfigWithResponseAsync(name, body, requestOptions).block();
    }

    /**
     * Get server metrics configuration by its name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics configuration by its name along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServerMetricsByNameWithResponseAsync(
            String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getServerMetricsByName(
                                this.client.getEndpoint(),
                                name,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get server metrics configuration by its name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics configuration by its name along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServerMetricsByNameWithResponseAsync(
            String name, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getServerMetricsByName(
                this.client.getEndpoint(),
                name,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get server metrics configuration by its name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics configuration by its name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServerMetricsByNameWithResponse(String name, RequestOptions requestOptions) {
        return getServerMetricsByNameWithResponseAsync(name, requestOptions).block();
    }

    /**
     * Delete server metrics configuration by its name.
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteServerMetricsWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteServerMetrics(
                                this.client.getEndpoint(),
                                name,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete server metrics configuration by its name.
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteServerMetricsWithResponseAsync(
            String name, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteServerMetrics(
                this.client.getEndpoint(),
                name,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Delete server metrics configuration by its name.
     *
     * @param name Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteServerMetricsWithResponse(String name, RequestOptions requestOptions) {
        return deleteServerMetricsWithResponseAsync(name, requestOptions).block();
    }

    /**
     * Get server metrics configuration for a test or test run by its name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>testRunId</td><td>String</td><td>No</td><td>[Required, if testId is not provided] Test run Id.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics configuration for a test or test run by its name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServerMetricsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getServerMetrics(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get server metrics configuration for a test or test run by its name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>testRunId</td><td>String</td><td>No</td><td>[Required, if testId is not provided] Test run Id.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics configuration for a test or test run by its name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServerMetricsWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getServerMetrics(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get server metrics configuration for a test or test run by its name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>testRunId</td><td>String</td><td>No</td><td>[Required, if testId is not provided] Test run Id.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     testId: String (Optional)
     *     testRunId: String (Optional)
     *     metrics (Optional): {
     *         String (Optional): {
     *             id: String (Optional)
     *             resourceId: String (Required)
     *             metricnamespace: String (Required)
     *             displayDescription: String (Optional)
     *             name (Required): {
     *                 value: String (Required)
     *                 localizedValue: String (Required)
     *             }
     *             aggregation: String (Required)
     *             unit: String (Optional)
     *             resourceType: String (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return server metrics configuration for a test or test run by its name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServerMetricsWithResponse(RequestOptions requestOptions) {
        return getServerMetricsWithResponseAsync(requestOptions).block();
    }

    /**
     * Get all default server metrics configuration for supported resource types.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     defaultMetrics (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 metricnamespace: String (Optional)
     *                 aggregation: String (Optional)
     *                 name (Optional): {
     *                     value: String (Optional)
     *                     localizedValue: String (Optional)
     *                 }
     *                 unit: String (Optional)
     *                 displayDescription: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all default server metrics configuration for supported resource types along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServerDefaultMetricsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getServerDefaultMetrics(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get all default server metrics configuration for supported resource types.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     defaultMetrics (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 metricnamespace: String (Optional)
     *                 aggregation: String (Optional)
     *                 name (Optional): {
     *                     value: String (Optional)
     *                     localizedValue: String (Optional)
     *                 }
     *                 unit: String (Optional)
     *                 displayDescription: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all default server metrics configuration for supported resource types along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServerDefaultMetricsWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getServerDefaultMetrics(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get all default server metrics configuration for supported resource types.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     defaultMetrics (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 metricnamespace: String (Optional)
     *                 aggregation: String (Optional)
     *                 name (Optional): {
     *                     value: String (Optional)
     *                     localizedValue: String (Optional)
     *                 }
     *                 unit: String (Optional)
     *                 displayDescription: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all default server metrics configuration for supported resource types along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServerDefaultMetricsWithResponse(RequestOptions requestOptions) {
        return getServerDefaultMetricsWithResponseAsync(requestOptions).block();
    }

    /**
     * Get all supported resource types for App Components(Azure resource types).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all supported resource types for App Components(Azure resource types) along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listSupportedResourceTypeWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.listSupportedResourceType(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get all supported resource types for App Components(Azure resource types).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all supported resource types for App Components(Azure resource types) along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listSupportedResourceTypeWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listSupportedResourceType(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get all supported resource types for App Components(Azure resource types).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all supported resource types for App Components(Azure resource types) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listSupportedResourceTypeWithResponse(RequestOptions requestOptions) {
        return listSupportedResourceTypeWithResponseAsync(requestOptions).block();
    }

    /**
     * Create a new test or Update an existing test.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateTestWithResponseAsync(
            String testId, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateTest(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                testId,
                                body,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Create a new test or Update an existing test.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateTestWithResponseAsync(
            String testId, BinaryData body, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.createOrUpdateTest(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                testId,
                body,
                accept,
                requestOptions,
                context);
    }

    /**
     * Create a new test or Update an existing test.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateTestWithResponse(
            String testId, BinaryData body, RequestOptions requestOptions) {
        return createOrUpdateTestWithResponseAsync(testId, body, requestOptions).block();
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLoadTestWithResponseAsync(String testId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteLoadTest(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                testId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLoadTestWithResponseAsync(
            String testId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteLoadTest(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                testId,
                accept,
                requestOptions,
                context);
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLoadTestWithResponse(String testId, RequestOptions requestOptions) {
        return deleteLoadTestWithResponseAsync(testId, requestOptions).block();
    }

    /**
     * Get load test details by test name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test details by test name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLoadTestWithResponseAsync(String testId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getLoadTest(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                testId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get load test details by test name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test details by test name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLoadTestWithResponseAsync(
            String testId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getLoadTest(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                testId,
                accept,
                requestOptions,
                context);
    }

    /**
     * Get load test details by test name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     resourceId: String (Optional)
     *     loadTestConfig (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *     }
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Optional): {
     *                 clientmetric: String (Optional)
     *                 aggregate: String (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String (Optional)
     *             }
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     *     inputArtifacts (Optional): {
     *         configUrl (Optional): {
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *         userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets (Optional): {
     *         String (Optional): {
     *             value: String (Optional)
     *             type: String (Optional)
     *         }
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Optional)
     *     }
     *     subnetId: String (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test details by test name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLoadTestWithResponse(String testId, RequestOptions requestOptions) {
        return getLoadTestWithResponseAsync(testId, requestOptions).block();
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - testId, createdBy.</td></tr>
     *     <tr><td>lastUpdatedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>lastUpdatedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             testId: String (Optional)
     *             description: String (Optional)
     *             displayName: String (Optional)
     *             resourceId: String (Optional)
     *             loadTestConfig (Optional): {
     *                 engineInstances: Integer (Optional)
     *                 splitAllCSVs: Boolean (Optional)
     *             }
     *             passFailCriteria (Optional): {
     *                 passFailMetrics (Optional): {
     *                     String (Optional): {
     *                         clientmetric: String (Optional)
     *                         aggregate: String (Optional)
     *                         condition: String (Optional)
     *                         requestName: String (Optional)
     *                         value: Double (Optional)
     *                         action: String (Optional)
     *                         actualValue: Double (Optional)
     *                         result: String (Optional)
     *                     }
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime (Optional)
     *             createdBy: String (Optional)
     *             lastModifiedDateTime: OffsetDateTime (Optional)
     *             lastModifiedBy: String (Optional)
     *             inputArtifacts (Optional): {
     *                 configUrl (Optional): {
     *                     url: String (Optional)
     *                     fileId: String (Optional)
     *                     filename: String (Optional)
     *                     fileType: String(0/1/2) (Optional)
     *                     expireTime: OffsetDateTime (Optional)
     *                     validationStatus: String (Optional)
     *                 }
     *                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *                 userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets (Optional): {
     *                 String (Optional): {
     *                     value: String (Optional)
     *                     type: String (Optional)
     *                 }
     *             }
     *             environmentVariables (Optional): {
     *                 String: String (Optional)
     *             }
     *             subnetId: String (Optional)
     *             keyvaultReferenceIdentityType: String (Optional)
     *             keyvaultReferenceIdentityId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} along with
     *     {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLoadTestSearchSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listLoadTestSearch(
                                        this.client.getEndpoint(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - testId, createdBy.</td></tr>
     *     <tr><td>lastUpdatedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>lastUpdatedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             testId: String (Optional)
     *             description: String (Optional)
     *             displayName: String (Optional)
     *             resourceId: String (Optional)
     *             loadTestConfig (Optional): {
     *                 engineInstances: Integer (Optional)
     *                 splitAllCSVs: Boolean (Optional)
     *             }
     *             passFailCriteria (Optional): {
     *                 passFailMetrics (Optional): {
     *                     String (Optional): {
     *                         clientmetric: String (Optional)
     *                         aggregate: String (Optional)
     *                         condition: String (Optional)
     *                         requestName: String (Optional)
     *                         value: Double (Optional)
     *                         action: String (Optional)
     *                         actualValue: Double (Optional)
     *                         result: String (Optional)
     *                     }
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime (Optional)
     *             createdBy: String (Optional)
     *             lastModifiedDateTime: OffsetDateTime (Optional)
     *             lastModifiedBy: String (Optional)
     *             inputArtifacts (Optional): {
     *                 configUrl (Optional): {
     *                     url: String (Optional)
     *                     fileId: String (Optional)
     *                     filename: String (Optional)
     *                     fileType: String(0/1/2) (Optional)
     *                     expireTime: OffsetDateTime (Optional)
     *                     validationStatus: String (Optional)
     *                 }
     *                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *                 userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets (Optional): {
     *                 String (Optional): {
     *                     value: String (Optional)
     *                     type: String (Optional)
     *                 }
     *             }
     *             environmentVariables (Optional): {
     *                 String: String (Optional)
     *             }
     *             subnetId: String (Optional)
     *             keyvaultReferenceIdentityType: String (Optional)
     *             keyvaultReferenceIdentityId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} along with
     *     {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLoadTestSearchSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listLoadTestSearch(
                        this.client.getEndpoint(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - testId, createdBy.</td></tr>
     *     <tr><td>lastUpdatedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>lastUpdatedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             testId: String (Optional)
     *             description: String (Optional)
     *             displayName: String (Optional)
     *             resourceId: String (Optional)
     *             loadTestConfig (Optional): {
     *                 engineInstances: Integer (Optional)
     *                 splitAllCSVs: Boolean (Optional)
     *             }
     *             passFailCriteria (Optional): {
     *                 passFailMetrics (Optional): {
     *                     String (Optional): {
     *                         clientmetric: String (Optional)
     *                         aggregate: String (Optional)
     *                         condition: String (Optional)
     *                         requestName: String (Optional)
     *                         value: Double (Optional)
     *                         action: String (Optional)
     *                         actualValue: Double (Optional)
     *                         result: String (Optional)
     *                     }
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime (Optional)
     *             createdBy: String (Optional)
     *             lastModifiedDateTime: OffsetDateTime (Optional)
     *             lastModifiedBy: String (Optional)
     *             inputArtifacts (Optional): {
     *                 configUrl (Optional): {
     *                     url: String (Optional)
     *                     fileId: String (Optional)
     *                     filename: String (Optional)
     *                     fileType: String(0/1/2) (Optional)
     *                     expireTime: OffsetDateTime (Optional)
     *                     validationStatus: String (Optional)
     *                 }
     *                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *                 userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets (Optional): {
     *                 String (Optional): {
     *                     value: String (Optional)
     *                     type: String (Optional)
     *                 }
     *             }
     *             environmentVariables (Optional): {
     *                 String: String (Optional)
     *             }
     *             subnetId: String (Optional)
     *             keyvaultReferenceIdentityType: String (Optional)
     *             keyvaultReferenceIdentityId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listLoadTestSearchAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listLoadTestSearchSinglePageAsync(requestOptions),
                nextLink -> listLoadTestSearchNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - testId, createdBy.</td></tr>
     *     <tr><td>lastUpdatedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>lastUpdatedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             testId: String (Optional)
     *             description: String (Optional)
     *             displayName: String (Optional)
     *             resourceId: String (Optional)
     *             loadTestConfig (Optional): {
     *                 engineInstances: Integer (Optional)
     *                 splitAllCSVs: Boolean (Optional)
     *             }
     *             passFailCriteria (Optional): {
     *                 passFailMetrics (Optional): {
     *                     String (Optional): {
     *                         clientmetric: String (Optional)
     *                         aggregate: String (Optional)
     *                         condition: String (Optional)
     *                         requestName: String (Optional)
     *                         value: Double (Optional)
     *                         action: String (Optional)
     *                         actualValue: Double (Optional)
     *                         result: String (Optional)
     *                     }
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime (Optional)
     *             createdBy: String (Optional)
     *             lastModifiedDateTime: OffsetDateTime (Optional)
     *             lastModifiedBy: String (Optional)
     *             inputArtifacts (Optional): {
     *                 configUrl (Optional): {
     *                     url: String (Optional)
     *                     fileId: String (Optional)
     *                     filename: String (Optional)
     *                     fileType: String(0/1/2) (Optional)
     *                     expireTime: OffsetDateTime (Optional)
     *                     validationStatus: String (Optional)
     *                 }
     *                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *                 userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets (Optional): {
     *                 String (Optional): {
     *                     value: String (Optional)
     *                     type: String (Optional)
     *                 }
     *             }
     *             environmentVariables (Optional): {
     *                 String: String (Optional)
     *             }
     *             subnetId: String (Optional)
     *             keyvaultReferenceIdentityType: String (Optional)
     *             keyvaultReferenceIdentityId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listLoadTestSearchAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listLoadTestSearchSinglePageAsync(requestOptions, context),
                nextLink -> listLoadTestSearchNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - testId, createdBy.</td></tr>
     *     <tr><td>lastUpdatedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>lastUpdatedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             testId: String (Optional)
     *             description: String (Optional)
     *             displayName: String (Optional)
     *             resourceId: String (Optional)
     *             loadTestConfig (Optional): {
     *                 engineInstances: Integer (Optional)
     *                 splitAllCSVs: Boolean (Optional)
     *             }
     *             passFailCriteria (Optional): {
     *                 passFailMetrics (Optional): {
     *                     String (Optional): {
     *                         clientmetric: String (Optional)
     *                         aggregate: String (Optional)
     *                         condition: String (Optional)
     *                         requestName: String (Optional)
     *                         value: Double (Optional)
     *                         action: String (Optional)
     *                         actualValue: Double (Optional)
     *                         result: String (Optional)
     *                     }
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime (Optional)
     *             createdBy: String (Optional)
     *             lastModifiedDateTime: OffsetDateTime (Optional)
     *             lastModifiedBy: String (Optional)
     *             inputArtifacts (Optional): {
     *                 configUrl (Optional): {
     *                     url: String (Optional)
     *                     fileId: String (Optional)
     *                     filename: String (Optional)
     *                     fileType: String(0/1/2) (Optional)
     *                     expireTime: OffsetDateTime (Optional)
     *                     validationStatus: String (Optional)
     *                 }
     *                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *                 userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets (Optional): {
     *                 String (Optional): {
     *                     value: String (Optional)
     *                     type: String (Optional)
     *                 }
     *             }
     *             environmentVariables (Optional): {
     *                 String: String (Optional)
     *             }
     *             subnetId: String (Optional)
     *             keyvaultReferenceIdentityType: String (Optional)
     *             keyvaultReferenceIdentityId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listLoadTestSearch(RequestOptions requestOptions) {
        return new PagedIterable<>(listLoadTestSearchAsync(requestOptions));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>fileType</td><td>Integer</td><td>No</td><td>Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS).</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Optional)
     *     fileId: String (Optional)
     *     filename: String (Optional)
     *     fileType: String(0/1/2) (Optional)
     *     expireTime: OffsetDateTime (Optional)
     *     validationStatus: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return fileUrl Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> uploadTestFileWithResponseAsync(
            String testId, String fileId, BinaryData file, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.uploadTestFile(
                                this.client.getEndpoint(),
                                testId,
                                fileId,
                                this.client.getServiceVersion().getVersion(),
                                file,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>fileType</td><td>Integer</td><td>No</td><td>Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS).</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Optional)
     *     fileId: String (Optional)
     *     filename: String (Optional)
     *     fileType: String(0/1/2) (Optional)
     *     expireTime: OffsetDateTime (Optional)
     *     validationStatus: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return fileUrl Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> uploadTestFileWithResponseAsync(
            String testId, String fileId, BinaryData file, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.uploadTestFile(
                this.client.getEndpoint(),
                testId,
                fileId,
                this.client.getServiceVersion().getVersion(),
                file,
                accept,
                requestOptions,
                context);
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>fileType</td><td>Integer</td><td>No</td><td>Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS).</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Optional)
     *     fileId: String (Optional)
     *     filename: String (Optional)
     *     fileType: String(0/1/2) (Optional)
     *     expireTime: OffsetDateTime (Optional)
     *     validationStatus: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return fileUrl Model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> uploadTestFileWithResponse(
            String testId, String fileId, BinaryData file, RequestOptions requestOptions) {
        return uploadTestFileWithResponseAsync(testId, fileId, file, requestOptions).block();
    }

    /**
     * Get test file by the file name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Optional)
     *     fileId: String (Optional)
     *     filename: String (Optional)
     *     fileType: String(0/1/2) (Optional)
     *     expireTime: OffsetDateTime (Optional)
     *     validationStatus: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test file by the file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestFileWithResponseAsync(
            String testId, String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestFile(
                                this.client.getEndpoint(),
                                testId,
                                fileId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get test file by the file name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Optional)
     *     fileId: String (Optional)
     *     filename: String (Optional)
     *     fileType: String(0/1/2) (Optional)
     *     expireTime: OffsetDateTime (Optional)
     *     validationStatus: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test file by the file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestFileWithResponseAsync(
            String testId, String fileId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getTestFile(
                this.client.getEndpoint(),
                testId,
                fileId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get test file by the file name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Optional)
     *     fileId: String (Optional)
     *     filename: String (Optional)
     *     fileType: String(0/1/2) (Optional)
     *     expireTime: OffsetDateTime (Optional)
     *     validationStatus: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test file by the file name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions) {
        return getTestFileWithResponseAsync(testId, fileId, requestOptions).block();
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestFileWithResponseAsync(
            String testId, String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteTestFile(
                                this.client.getEndpoint(),
                                testId,
                                fileId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestFileWithResponseAsync(
            String testId, String fileId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteTestFile(
                this.client.getEndpoint(),
                testId,
                fileId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions) {
        return deleteTestFileWithResponseAsync(testId, fileId, requestOptions).block();
    }

    /**
     * Get all test files.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test files along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllTestFilesSinglePageAsync(
            String testId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getAllTestFiles(
                                        this.client.getEndpoint(),
                                        this.client.getServiceVersion().getVersion(),
                                        testId,
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get all test files.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test files along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllTestFilesSinglePageAsync(
            String testId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getAllTestFiles(
                        this.client.getEndpoint(),
                        this.client.getServiceVersion().getVersion(),
                        testId,
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get all test files.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test files as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getAllTestFilesAsync(String testId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> getAllTestFilesSinglePageAsync(testId, requestOptions),
                nextLink -> getAllTestFilesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get all test files.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test files as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getAllTestFilesAsync(String testId, RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> getAllTestFilesSinglePageAsync(testId, requestOptions, context),
                nextLink -> getAllTestFilesNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Get all test files.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test files as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getAllTestFiles(String testId, RequestOptions requestOptions) {
        return new PagedIterable<>(getAllTestFilesAsync(testId, requestOptions));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             testId: String (Optional)
     *             description: String (Optional)
     *             displayName: String (Optional)
     *             resourceId: String (Optional)
     *             loadTestConfig (Optional): {
     *                 engineInstances: Integer (Optional)
     *                 splitAllCSVs: Boolean (Optional)
     *             }
     *             passFailCriteria (Optional): {
     *                 passFailMetrics (Optional): {
     *                     String (Optional): {
     *                         clientmetric: String (Optional)
     *                         aggregate: String (Optional)
     *                         condition: String (Optional)
     *                         requestName: String (Optional)
     *                         value: Double (Optional)
     *                         action: String (Optional)
     *                         actualValue: Double (Optional)
     *                         result: String (Optional)
     *                     }
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime (Optional)
     *             createdBy: String (Optional)
     *             lastModifiedDateTime: OffsetDateTime (Optional)
     *             lastModifiedBy: String (Optional)
     *             inputArtifacts (Optional): {
     *                 configUrl (Optional): {
     *                     url: String (Optional)
     *                     fileId: String (Optional)
     *                     filename: String (Optional)
     *                     fileType: String(0/1/2) (Optional)
     *                     expireTime: OffsetDateTime (Optional)
     *                     validationStatus: String (Optional)
     *                 }
     *                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *                 userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets (Optional): {
     *                 String (Optional): {
     *                     value: String (Optional)
     *                     type: String (Optional)
     *                 }
     *             }
     *             environmentVariables (Optional): {
     *                 String: String (Optional)
     *             }
     *             subnetId: String (Optional)
     *             keyvaultReferenceIdentityType: String (Optional)
     *             keyvaultReferenceIdentityId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of Resources along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLoadTestSearchNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listLoadTestSearchNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             testId: String (Optional)
     *             description: String (Optional)
     *             displayName: String (Optional)
     *             resourceId: String (Optional)
     *             loadTestConfig (Optional): {
     *                 engineInstances: Integer (Optional)
     *                 splitAllCSVs: Boolean (Optional)
     *             }
     *             passFailCriteria (Optional): {
     *                 passFailMetrics (Optional): {
     *                     String (Optional): {
     *                         clientmetric: String (Optional)
     *                         aggregate: String (Optional)
     *                         condition: String (Optional)
     *                         requestName: String (Optional)
     *                         value: Double (Optional)
     *                         action: String (Optional)
     *                         actualValue: Double (Optional)
     *                         result: String (Optional)
     *                     }
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime (Optional)
     *             createdBy: String (Optional)
     *             lastModifiedDateTime: OffsetDateTime (Optional)
     *             lastModifiedBy: String (Optional)
     *             inputArtifacts (Optional): {
     *                 configUrl (Optional): {
     *                     url: String (Optional)
     *                     fileId: String (Optional)
     *                     filename: String (Optional)
     *                     fileType: String(0/1/2) (Optional)
     *                     expireTime: OffsetDateTime (Optional)
     *                     validationStatus: String (Optional)
     *                 }
     *                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)
     *                 userPropUrl (Optional): (recursive schema, see userPropUrl above)
     *                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets (Optional): {
     *                 String (Optional): {
     *                     value: String (Optional)
     *                     type: String (Optional)
     *                 }
     *             }
     *             environmentVariables (Optional): {
     *                 String: String (Optional)
     *             }
     *             subnetId: String (Optional)
     *             keyvaultReferenceIdentityType: String (Optional)
     *             keyvaultReferenceIdentityId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of Resources along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLoadTestSearchNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listLoadTestSearchNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllTestFilesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getAllTestFilesNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             url: String (Optional)
     *             fileId: String (Optional)
     *             filename: String (Optional)
     *             fileType: String(0/1/2) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *             validationStatus: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllTestFilesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getAllTestFilesNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
