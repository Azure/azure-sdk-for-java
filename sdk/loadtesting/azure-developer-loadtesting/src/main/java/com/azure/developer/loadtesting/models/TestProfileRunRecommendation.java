// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A recommendation object that provides a list of configuration that optimizes its category.
 */
@Immutable
public final class TestProfileRunRecommendation implements JsonSerializable<TestProfileRunRecommendation> {
    /*
     * Category of the recommendation.
     */
    @Generated
    private final RecommendationCategory category;

    /*
     * List of configurations IDs for which the recommendation is applicable. These are a subset of the provided target
     * resource configurations.
     */
    @Generated
    private List<String> configurations;

    /**
     * Creates an instance of TestProfileRunRecommendation class.
     * 
     * @param category the category value to set.
     */
    @Generated
    private TestProfileRunRecommendation(RecommendationCategory category) {
        this.category = category;
    }

    /**
     * Get the category property: Category of the recommendation.
     * 
     * @return the category value.
     */
    @Generated
    public RecommendationCategory getCategory() {
        return this.category;
    }

    /**
     * Get the configurations property: List of configurations IDs for which the recommendation is applicable. These are
     * a subset of the provided target resource configurations.
     * 
     * @return the configurations value.
     */
    @Generated
    public List<String> getConfigurations() {
        return this.configurations;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeArrayField("configurations", this.configurations,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestProfileRunRecommendation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestProfileRunRecommendation if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestProfileRunRecommendation.
     */
    @Generated
    public static TestProfileRunRecommendation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendationCategory category = null;
            List<String> configurations = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    category = RecommendationCategory.fromString(reader.getString());
                } else if ("configurations".equals(fieldName)) {
                    configurations = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TestProfileRunRecommendation deserializedTestProfileRunRecommendation
                = new TestProfileRunRecommendation(category);
            deserializedTestProfileRunRecommendation.configurations = configurations;

            return deserializedTestProfileRunRecommendation;
        });
    }
}
