// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The time series returned when a data query is performed.
 */
@Immutable
public final class TimeSeriesElement implements JsonSerializable<TimeSeriesElement> {
    /*
     * An array of data points representing the metric values.
     */
    @Generated
    private List<MetricValue> data;

    /*
     * The dimension values
     */
    @Generated
    private List<DimensionValue> dimensionValues;

    /**
     * Creates an instance of TimeSeriesElement class.
     */
    @Generated
    private TimeSeriesElement() {
    }

    /**
     * Get the data property: An array of data points representing the metric values.
     * 
     * @return the data value.
     */
    @Generated
    public List<MetricValue> getData() {
        return this.data;
    }

    /**
     * Get the dimensionValues property: The dimension values.
     * 
     * @return the dimensionValues value.
     */
    @Generated
    public List<DimensionValue> getDimensionValues() {
        return this.dimensionValues;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("data", this.data, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dimensionValues", this.dimensionValues,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeSeriesElement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeSeriesElement if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeSeriesElement.
     */
    @Generated
    public static TimeSeriesElement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeSeriesElement deserializedTimeSeriesElement = new TimeSeriesElement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    List<MetricValue> data = reader.readArray(reader1 -> MetricValue.fromJson(reader1));
                    deserializedTimeSeriesElement.data = data;
                } else if ("dimensionValues".equals(fieldName)) {
                    List<DimensionValue> dimensionValues
                        = reader.readArray(reader1 -> DimensionValue.fromJson(reader1));
                    deserializedTimeSeriesElement.dimensionValues = dimensionValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimeSeriesElement;
        });
    }
}
