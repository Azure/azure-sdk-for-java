// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Pass fail criteria for a test.
 */
@Fluent
public final class PassFailCriteria implements JsonSerializable<PassFailCriteria> {

    /*
     * Map of id and pass fail metrics { id : pass fail metrics }.
     */
    @Generated
    private Map<String, PassFailMetric> passFailMetrics;

    /*
     * Map of id and pass fail server metrics { id : pass fail metrics }.
     */
    @Generated
    private Map<String, PassFailServerMetric> passFailServerMetrics;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setPassFailCriteriaAccessor(new JsonMergePatchHelper.PassFailCriteriaAccessor() {

            @Override
            public PassFailCriteria prepareModelForJsonMergePatch(PassFailCriteria model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(PassFailCriteria model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of PassFailCriteria class.
     */
    @Generated
    public PassFailCriteria() {
    }

    /**
     * Get the passFailMetrics property: Map of id and pass fail metrics { id : pass fail metrics }.
     *
     * @return the passFailMetrics value.
     */
    @Generated
    public Map<String, PassFailMetric> getPassFailMetrics() {
        return this.passFailMetrics;
    }

    /**
     * Set the passFailMetrics property: Map of id and pass fail metrics { id : pass fail metrics }.
     *
     * @param passFailMetrics the passFailMetrics value to set.
     * @return the PassFailCriteria object itself.
     */
    @Generated
    public PassFailCriteria setPassFailMetrics(Map<String, PassFailMetric> passFailMetrics) {
        this.passFailMetrics = passFailMetrics;
        this.updatedProperties.add("passFailMetrics");
        return this;
    }

    /**
     * Get the passFailServerMetrics property: Map of id and pass fail server metrics { id : pass fail metrics }.
     *
     * @return the passFailServerMetrics value.
     */
    @Generated
    public Map<String, PassFailServerMetric> getPassFailServerMetrics() {
        return this.passFailServerMetrics;
    }

    /**
     * Set the passFailServerMetrics property: Map of id and pass fail server metrics { id : pass fail metrics }.
     *
     * @param passFailServerMetrics the passFailServerMetrics value to set.
     * @return the PassFailCriteria object itself.
     */
    @Generated
    public PassFailCriteria setPassFailServerMetrics(Map<String, PassFailServerMetric> passFailServerMetrics) {
        this.passFailServerMetrics = passFailServerMetrics;
        this.updatedProperties.add("passFailServerMetrics");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeMapField("passFailMetrics", this.passFailMetrics,
                (writer, element) -> writer.writeJson(element));
            jsonWriter.writeMapField("passFailServerMetrics", this.passFailServerMetrics,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("passFailMetrics")) {
            if (this.passFailMetrics == null) {
                jsonWriter.writeNullField("passFailMetrics");
            } else {
                jsonWriter.writeMapField("passFailMetrics", this.passFailMetrics, (writer, element) -> {
                    if (element != null) {
                        JsonMergePatchHelper.getPassFailMetricAccessor().prepareModelForJsonMergePatch(element, true);
                        writer.writeJson(element);
                        JsonMergePatchHelper.getPassFailMetricAccessor().prepareModelForJsonMergePatch(element, false);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("passFailServerMetrics")) {
            if (this.passFailServerMetrics == null) {
                jsonWriter.writeNullField("passFailServerMetrics");
            } else {
                jsonWriter.writeMapField("passFailServerMetrics", this.passFailServerMetrics, (writer, element) -> {
                    if (element != null) {
                        JsonMergePatchHelper.getPassFailServerMetricAccessor()
                            .prepareModelForJsonMergePatch(element, true);
                        writer.writeJson(element);
                        JsonMergePatchHelper.getPassFailServerMetricAccessor()
                            .prepareModelForJsonMergePatch(element, false);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PassFailCriteria from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PassFailCriteria if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PassFailCriteria.
     */
    @Generated
    public static PassFailCriteria fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PassFailCriteria deserializedPassFailCriteria = new PassFailCriteria();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("passFailMetrics".equals(fieldName)) {
                    Map<String, PassFailMetric> passFailMetrics
                        = reader.readMap(reader1 -> PassFailMetric.fromJson(reader1));
                    deserializedPassFailCriteria.passFailMetrics = passFailMetrics;
                } else if ("passFailServerMetrics".equals(fieldName)) {
                    Map<String, PassFailServerMetric> passFailServerMetrics
                        = reader.readMap(reader1 -> PassFailServerMetric.fromJson(reader1));
                    deserializedPassFailCriteria.passFailServerMetrics = passFailServerMetrics;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPassFailCriteria;
        });
    }
}
