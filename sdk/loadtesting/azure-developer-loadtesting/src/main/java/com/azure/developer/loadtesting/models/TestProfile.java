// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Test Profile Model.
 * 
 * The Test Profile Model. A Test Profile resource enables you to set up a test profile which contains various
 * configurations for a supported resource type and a load test to execute on that resource.
 */
@Fluent
public final class TestProfile implements JsonSerializable<TestProfile> {
    /*
     * Unique identifier for the test profile, must contain only lower-case alphabetic, numeric, underscore or hyphen
     * characters.
     */
    @Generated
    private String testProfileId;

    /*
     * Display name of the test profile.
     */
    @Generated
    private String displayName;

    /*
     * Description for the test profile.
     */
    @Generated
    private String description;

    /*
     * Associated test ID for the test profile. This property is required for creating a Test Profile and it's not
     * allowed to be updated.
     */
    @Generated
    private String testId;

    /*
     * Target resource ID on which the test profile is created. This property is required for creating a Test Profile
     * and it's not allowed to be updated.
     */
    @Generated
    private String targetResourceId;

    /*
     * Configurations of the target resource on which testing would be done.
     */
    @Generated
    private TargetResourceConfigurations targetResourceConfigurations;

    /*
     * The creation datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * The user that created.
     */
    @Generated
    private String createdBy;

    /*
     * The last Modified datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The user that last modified.
     */
    @Generated
    private String lastModifiedBy;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestProfileAccessor(new JsonMergePatchHelper.TestProfileAccessor() {
            @Override
            public TestProfile prepareModelForJsonMergePatch(TestProfile model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TestProfile model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TestProfile class.
     */
    @Generated
    public TestProfile() {
    }

    /**
     * Get the testProfileId property: Unique identifier for the test profile, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * 
     * @return the testProfileId value.
     */
    @Generated
    public String getTestProfileId() {
        return this.testProfileId;
    }

    /**
     * Get the displayName property: Display name of the test profile.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the test profile.
     * 
     * @param displayName the displayName value to set.
     * @return the TestProfile object itself.
     */
    @Generated
    public TestProfile setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the description property: Description for the test profile.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Description for the test profile.
     * 
     * @param description the description value to set.
     * @return the TestProfile object itself.
     */
    @Generated
    public TestProfile setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the testId property: Associated test ID for the test profile. This property is required for creating a Test
     * Profile and it's not allowed to be updated.
     * 
     * @return the testId value.
     */
    @Generated
    public String getTestId() {
        return this.testId;
    }

    /**
     * Set the testId property: Associated test ID for the test profile. This property is required for creating a Test
     * Profile and it's not allowed to be updated.
     * 
     * @param testId the testId value to set.
     * @return the TestProfile object itself.
     */
    @Generated
    public TestProfile setTestId(String testId) {
        this.testId = testId;
        this.updatedProperties.add("testId");
        return this;
    }

    /**
     * Get the targetResourceId property: Target resource ID on which the test profile is created. This property is
     * required for creating a Test Profile and it's not allowed to be updated.
     * 
     * @return the targetResourceId value.
     */
    @Generated
    public String getTargetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: Target resource ID on which the test profile is created. This property is
     * required for creating a Test Profile and it's not allowed to be updated.
     * 
     * @param targetResourceId the targetResourceId value to set.
     * @return the TestProfile object itself.
     */
    @Generated
    public TestProfile setTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        this.updatedProperties.add("targetResourceId");
        return this;
    }

    /**
     * Get the targetResourceConfigurations property: Configurations of the target resource on which testing would be
     * done.
     * 
     * @return the targetResourceConfigurations value.
     */
    @Generated
    public TargetResourceConfigurations getTargetResourceConfigurations() {
        return this.targetResourceConfigurations;
    }

    /**
     * Set the targetResourceConfigurations property: Configurations of the target resource on which testing would be
     * done.
     * 
     * @param targetResourceConfigurations the targetResourceConfigurations value to set.
     * @return the TestProfile object itself.
     */
    @Generated
    public TestProfile setTargetResourceConfigurations(TargetResourceConfigurations targetResourceConfigurations) {
        this.targetResourceConfigurations = targetResourceConfigurations;
        this.updatedProperties.add("targetResourceConfigurations");
        return this;
    }

    /**
     * Get the createdDateTime property: The creation datetime(RFC 3339 literal format).
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the createdBy property: The user that created.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last Modified datetime(RFC 3339 literal format).
     * 
     * @return the lastModifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastModifiedBy property: The user that last modified.
     * 
     * @return the lastModifiedBy value.
     */
    @Generated
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeStringField("testId", this.testId);
            jsonWriter.writeStringField("targetResourceId", this.targetResourceId);
            jsonWriter.writeJsonField("targetResourceConfigurations", this.targetResourceConfigurations);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("testId")) {
            if (this.testId == null) {
                jsonWriter.writeNullField("testId");
            } else {
                jsonWriter.writeStringField("testId", this.testId);
            }
        }
        if (updatedProperties.contains("targetResourceId")) {
            if (this.targetResourceId == null) {
                jsonWriter.writeNullField("targetResourceId");
            } else {
                jsonWriter.writeStringField("targetResourceId", this.targetResourceId);
            }
        }
        if (updatedProperties.contains("targetResourceConfigurations")) {
            if (this.targetResourceConfigurations == null) {
                jsonWriter.writeNullField("targetResourceConfigurations");
            } else {
                JsonMergePatchHelper.getTargetResourceConfigurationsAccessor()
                    .prepareModelForJsonMergePatch(this.targetResourceConfigurations, true);
                jsonWriter.writeJsonField("targetResourceConfigurations", this.targetResourceConfigurations);
                JsonMergePatchHelper.getTargetResourceConfigurationsAccessor()
                    .prepareModelForJsonMergePatch(this.targetResourceConfigurations, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestProfile.
     */
    @Generated
    public static TestProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestProfile deserializedTestProfile = new TestProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testProfileId".equals(fieldName)) {
                    deserializedTestProfile.testProfileId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedTestProfile.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedTestProfile.description = reader.getString();
                } else if ("testId".equals(fieldName)) {
                    deserializedTestProfile.testId = reader.getString();
                } else if ("targetResourceId".equals(fieldName)) {
                    deserializedTestProfile.targetResourceId = reader.getString();
                } else if ("targetResourceConfigurations".equals(fieldName)) {
                    deserializedTestProfile.targetResourceConfigurations
                        = TargetResourceConfigurations.fromJson(reader);
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedTestProfile.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedTestProfile.createdBy = reader.getString();
                } else if ("lastModifiedDateTime".equals(fieldName)) {
                    deserializedTestProfile.lastModifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedTestProfile.lastModifiedBy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestProfile;
        });
    }
}
