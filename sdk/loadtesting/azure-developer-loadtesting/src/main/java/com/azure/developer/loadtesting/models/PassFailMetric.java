// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;

/**
 * Pass fail metric.
 */
@Fluent
public final class PassFailMetric implements JsonSerializable<PassFailMetric> {

    /*
     * The client metric on which the criteria should be applied.
     */
    @Generated
    private PFMetrics clientMetric;

    /*
     * The aggregation function to be applied on the client metric. Allowed functions
     * - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
     * ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
     * ‘count’ - for requests
     */
    @Generated
    private PFAgFunc aggregate;

    /*
     * The comparison operator. Supported types ‘>’, ‘<’
     */
    @Generated
    private String condition;

    /*
     * Request name for which the Pass fail criteria has to be applied
     */
    @Generated
    private String requestName;

    /*
     * The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
     * 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
     */
    @Generated
    private Double value;

    /*
     * Action taken after the threshold is met. Default is ‘continue’.
     */
    @Generated
    private PFAction action;

    /*
     * The actual value of the client metric for the test run.
     */
    @Generated
    private Double actualValue;

    /*
     * Outcome of the test run.
     */
    @Generated
    private PFResult result;

    /**
     * Creates an instance of PassFailMetric class.
     */
    @Generated
    public PassFailMetric() {
    }

    /**
     * Get the clientMetric property: The client metric on which the criteria should be applied.
     *
     * @return the clientMetric value.
     */
    @Generated
    public PFMetrics getClientMetric() {
        return this.clientMetric;
    }

    /**
     * Set the clientMetric property: The client metric on which the criteria should be applied.
     *
     * @param clientMetric the clientMetric value to set.
     * @return the PassFailMetric object itself.
     */
    @Generated
    public PassFailMetric setClientMetric(PFMetrics clientMetric) {
        this.clientMetric = clientMetric;
        return this;
    }

    /**
     * Get the aggregate property: The aggregation function to be applied on the client metric. Allowed functions
     * - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
     * ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
     * ‘count’ - for requests.
     *
     * @return the aggregate value.
     */
    @Generated
    public PFAgFunc getAggregate() {
        return this.aggregate;
    }

    /**
     * Set the aggregate property: The aggregation function to be applied on the client metric. Allowed functions
     * - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
     * ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
     * ‘count’ - for requests.
     *
     * @param aggregate the aggregate value to set.
     * @return the PassFailMetric object itself.
     */
    @Generated
    public PassFailMetric setAggregate(PFAgFunc aggregate) {
        this.aggregate = aggregate;
        return this;
    }

    /**
     * Get the condition property: The comparison operator. Supported types ‘&gt;’, ‘&lt;’.
     *
     * @return the condition value.
     */
    @Generated
    public String getCondition() {
        return this.condition;
    }

    /**
     * Set the condition property: The comparison operator. Supported types ‘&gt;’, ‘&lt;’.
     *
     * @param condition the condition value to set.
     * @return the PassFailMetric object itself.
     */
    @Generated
    public PassFailMetric setCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the requestName property: Request name for which the Pass fail criteria has to be applied.
     *
     * @return the requestName value.
     */
    @Generated
    public String getRequestName() {
        return this.requestName;
    }

    /**
     * Set the requestName property: Request name for which the Pass fail criteria has to be applied.
     *
     * @param requestName the requestName value to set.
     * @return the PassFailMetric object itself.
     */
    @Generated
    public PassFailMetric setRequestName(String requestName) {
        this.requestName = requestName;
        return this;
    }

    /**
     * Get the value property: The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
     * 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
     *
     * @return the value value.
     */
    @Generated
    public Double getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
     * 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
     *
     * @param value the value value to set.
     * @return the PassFailMetric object itself.
     */
    @Generated
    public PassFailMetric setValue(Double value) {
        this.value = value;
        return this;
    }

    /**
     * Get the action property: Action taken after the threshold is met. Default is ‘continue’.
     *
     * @return the action value.
     */
    @Generated
    public PFAction getAction() {
        return this.action;
    }

    /**
     * Set the action property: Action taken after the threshold is met. Default is ‘continue’.
     *
     * @param action the action value to set.
     * @return the PassFailMetric object itself.
     */
    @Generated
    public PassFailMetric setAction(PFAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the actualValue property: The actual value of the client metric for the test run.
     *
     * @return the actualValue value.
     */
    @Generated
    public Double getActualValue() {
        return this.actualValue;
    }

    /**
     * Get the result property: Outcome of the test run.
     *
     * @return the result value.
     */
    @Generated
    public PFResult getResult() {
        return this.result;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientMetric", Objects.toString(this.clientMetric, null));
        jsonWriter.writeStringField("aggregate", Objects.toString(this.aggregate, null));
        jsonWriter.writeStringField("condition", this.condition);
        jsonWriter.writeStringField("requestName", this.requestName);
        jsonWriter.writeNumberField("value", this.value);
        jsonWriter.writeStringField("action", Objects.toString(this.action, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PassFailMetric from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PassFailMetric if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PassFailMetric.
     */
    public static PassFailMetric fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PassFailMetric deserializedPassFailMetric = new PassFailMetric();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("clientMetric".equals(fieldName)) {
                    deserializedPassFailMetric.clientMetric = PFMetrics.fromString(reader.getString());
                } else if ("aggregate".equals(fieldName)) {
                    deserializedPassFailMetric.aggregate = PFAgFunc.fromString(reader.getString());
                } else if ("condition".equals(fieldName)) {
                    deserializedPassFailMetric.condition = reader.getString();
                } else if ("requestName".equals(fieldName)) {
                    deserializedPassFailMetric.requestName = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedPassFailMetric.value = reader.getNullable(JsonReader::getDouble);
                } else if ("action".equals(fieldName)) {
                    deserializedPassFailMetric.action = PFAction.fromString(reader.getString());
                } else if ("actualValue".equals(fieldName)) {
                    deserializedPassFailMetric.actualValue = reader.getNullable(JsonReader::getDouble);
                } else if ("result".equals(fieldName)) {
                    deserializedPassFailMetric.result = PFResult.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPassFailMetric;
        });
    }
}
