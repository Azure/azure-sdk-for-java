// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Test run app component.
 */
@Fluent
public final class TestRunAppComponents implements JsonSerializable<TestRunAppComponents> {
    /*
     * Azure resource collection { resource id (fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
     * : resource object }
     */
    @Generated
    private Map<String, AppComponent> components;

    /*
     * Test run identifier
     */
    @Generated
    private String testRunId;

    /*
     * The creation datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * The user that created.
     */
    @Generated
    private String createdBy;

    /*
     * The last Modified datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The user that last modified.
     */
    @Generated
    private String lastModifiedBy;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestRunAppComponentsAccessor(new JsonMergePatchHelper.TestRunAppComponentsAccessor() {
            @Override
            public TestRunAppComponents prepareModelForJsonMergePatch(TestRunAppComponents model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TestRunAppComponents model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TestRunAppComponents class.
     */
    @Generated
    public TestRunAppComponents() {
    }

    /**
     * Get the components property: Azure resource collection { resource id (fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
     * : resource object }.
     * 
     * @return the components value.
     */
    @Generated
    public Map<String, AppComponent> getComponents() {
        return this.components;
    }

    /**
     * Set the components property: Azure resource collection { resource id (fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
     * : resource object }.
     * <p>Required when create the resource.</p>
     * 
     * @param components the components value to set.
     * @return the TestRunAppComponents object itself.
     */
    @Generated
    public TestRunAppComponents setComponents(Map<String, AppComponent> components) {
        this.components = components;
        this.updatedProperties.add("components");
        return this;
    }

    /**
     * Get the testRunId property: Test run identifier.
     * 
     * @return the testRunId value.
     */
    @Generated
    public String getTestRunId() {
        return this.testRunId;
    }

    /**
     * Get the createdDateTime property: The creation datetime(RFC 3339 literal format).
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the createdBy property: The user that created.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last Modified datetime(RFC 3339 literal format).
     * 
     * @return the lastModifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastModifiedBy property: The user that last modified.
     * 
     * @return the lastModifiedBy value.
     */
    @Generated
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeMapField("components", this.components, (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("components")) {
            if (this.components == null) {
                jsonWriter.writeNullField("components");
            } else {
                jsonWriter.writeMapField("components", this.components, (writer, element) -> {
                    if (element != null) {
                        JsonMergePatchHelper.getAppComponentAccessor().prepareModelForJsonMergePatch(element, true);
                        writer.writeJson(element);
                        JsonMergePatchHelper.getAppComponentAccessor().prepareModelForJsonMergePatch(element, false);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunAppComponents from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunAppComponents if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunAppComponents.
     */
    @Generated
    public static TestRunAppComponents fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunAppComponents deserializedTestRunAppComponents = new TestRunAppComponents();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("components".equals(fieldName)) {
                    Map<String, AppComponent> components = reader.readMap(reader1 -> AppComponent.fromJson(reader1));
                    deserializedTestRunAppComponents.components = components;
                } else if ("testRunId".equals(fieldName)) {
                    deserializedTestRunAppComponents.testRunId = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedTestRunAppComponents.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedTestRunAppComponents.createdBy = reader.getString();
                } else if ("lastModifiedDateTime".equals(fieldName)) {
                    deserializedTestRunAppComponents.lastModifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedTestRunAppComponents.lastModifiedBy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunAppComponents;
        });
    }
}
