// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Test run statistics.
 */
@Immutable
public final class TestRunStatistics implements JsonSerializable<TestRunStatistics> {

    /*
     * Transaction name.
     */
    @Generated
    private String transaction;

    /*
     * Sampler count.
     */
    @Generated
    private Double sampleCount;

    /*
     * Error count.
     */
    @Generated
    private Double errorCount;

    /*
     * Throughput.
     */
    @Generated
    private Double throughput;

    /*
     * Received network bytes.
     */
    @Generated
    private Double receivedKBytesPerSec;

    /*
     * Send network bytes.
     */
    @Generated
    private Double sentKBytesPerSec;

    /**
     * Creates an instance of TestRunStatistics class.
     */
    @Generated
    private TestRunStatistics() {
    }

    /**
     * Get the transaction property: Transaction name.
     *
     * @return the transaction value.
     */
    @Generated
    public String getTransaction() {
        return this.transaction;
    }

    /**
     * Get the sampleCount property: Sampler count.
     *
     * @return the sampleCount value.
     */
    @Generated
    public Double getSampleCount() {
        return this.sampleCount;
    }

    /**
     * Get the errorCount property: Error count.
     *
     * @return the errorCount value.
     */
    @Generated
    public Double getErrorCount() {
        return this.errorCount;
    }

    /**
     * Get the throughput property: Throughput.
     *
     * @return the throughput value.
     */
    @Generated
    public Double getThroughput() {
        return this.throughput;
    }

    /**
     * Get the receivedKBytesPerSec property: Received network bytes.
     *
     * @return the receivedKBytesPerSec value.
     */
    @Generated
    public Double getReceivedKBytesPerSec() {
        return this.receivedKBytesPerSec;
    }

    /**
     * Get the sentKBytesPerSec property: Send network bytes.
     *
     * @return the sentKBytesPerSec value.
     */
    @Generated
    public Double getSentKBytesPerSec() {
        return this.sentKBytesPerSec;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunStatistics from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunStatistics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunStatistics.
     */
    @Generated
    public static TestRunStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunStatistics deserializedTestRunStatistics = new TestRunStatistics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("transaction".equals(fieldName)) {
                    deserializedTestRunStatistics.transaction = reader.getString();
                } else if ("sampleCount".equals(fieldName)) {
                    deserializedTestRunStatistics.sampleCount = reader.getNullable(JsonReader::getDouble);
                } else if ("errorCount".equals(fieldName)) {
                    deserializedTestRunStatistics.errorCount = reader.getNullable(JsonReader::getDouble);
                } else if ("errorPct".equals(fieldName)) {
                    deserializedTestRunStatistics.errorPercentage = reader.getNullable(JsonReader::getDouble);
                } else if ("meanResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.meanResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("medianResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.medianResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("maxResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.maxResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("minResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.minResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct1ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile90ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct2ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile95ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct3ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile99ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct75ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile75ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct96ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile96ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct97ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile97ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct98ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile98ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct999ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile999ResponseTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct9999ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.percentile9999ResponseTime
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("throughput".equals(fieldName)) {
                    deserializedTestRunStatistics.throughput = reader.getNullable(JsonReader::getDouble);
                } else if ("receivedKBytesPerSec".equals(fieldName)) {
                    deserializedTestRunStatistics.receivedKBytesPerSec = reader.getNullable(JsonReader::getDouble);
                } else if ("sentKBytesPerSec".equals(fieldName)) {
                    deserializedTestRunStatistics.sentKBytesPerSec = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTestRunStatistics;
        });
    }

    /*
     * Error percentage.
     */
    @Generated
    private Double errorPercentage;

    /*
     * Mean response time.
     */
    @Generated
    private Double meanResponseTime;

    /*
     * Median response time.
     */
    @Generated
    private Double medianResponseTime;

    /*
     * Max response time.
     */
    @Generated
    private Double maxResponseTime;

    /*
     * Minimum response time.
     */
    @Generated
    private Double minResponseTime;

    /*
     * 90 percentile response time.
     */
    @Generated
    private Double percentile90ResponseTime;

    /*
     * 95 percentile response time.
     */
    @Generated
    private Double percentile95ResponseTime;

    /*
     * 99 percentile response time.
     */
    @Generated
    private Double percentile99ResponseTime;

    /*
     * 75 percentile response time.
     */
    @Generated
    private Double percentile75ResponseTime;

    /*
     * 96 percentile response time.
     */
    @Generated
    private Double percentile96ResponseTime;

    /*
     * 97 percentile response time.
     */
    @Generated
    private Double percentile97ResponseTime;

    /*
     * 98 percentile response time.
     */
    @Generated
    private Double percentile98ResponseTime;

    /*
     * 99.9 percentile response time.
     */
    @Generated
    private Double percentile999ResponseTime;

    /*
     * 99.99 percentile response time.
     */
    @Generated
    private Double percentile9999ResponseTime;

    /**
     * Get the errorPercentage property: Error percentage.
     *
     * @return the errorPercentage value.
     */
    @Generated
    public Double getErrorPercentage() {
        return this.errorPercentage;
    }

    /**
     * Get the meanResponseTime property: Mean response time.
     *
     * @return the meanResponseTime value.
     */
    @Generated
    public Double getMeanResponseTime() {
        return this.meanResponseTime;
    }

    /**
     * Get the medianResponseTime property: Median response time.
     *
     * @return the medianResponseTime value.
     */
    @Generated
    public Double getMedianResponseTime() {
        return this.medianResponseTime;
    }

    /**
     * Get the maxResponseTime property: Max response time.
     *
     * @return the maxResponseTime value.
     */
    @Generated
    public Double getMaxResponseTime() {
        return this.maxResponseTime;
    }

    /**
     * Get the minResponseTime property: Minimum response time.
     *
     * @return the minResponseTime value.
     */
    @Generated
    public Double getMinResponseTime() {
        return this.minResponseTime;
    }

    /**
     * Get the percentile90ResponseTime property: 90 percentile response time.
     *
     * @return the percentile90ResponseTime value.
     */
    @Generated
    public Double getPercentile90ResponseTime() {
        return this.percentile90ResponseTime;
    }

    /**
     * Get the percentile95ResponseTime property: 95 percentile response time.
     *
     * @return the percentile95ResponseTime value.
     */
    @Generated
    public Double getPercentile95ResponseTime() {
        return this.percentile95ResponseTime;
    }

    /**
     * Get the percentile99ResponseTime property: 99 percentile response time.
     *
     * @return the percentile99ResponseTime value.
     */
    @Generated
    public Double getPercentile99ResponseTime() {
        return this.percentile99ResponseTime;
    }

    /**
     * Get the percentile75ResponseTime property: 75 percentile response time.
     *
     * @return the percentile75ResponseTime value.
     */
    @Generated
    public Double getPercentile75ResponseTime() {
        return this.percentile75ResponseTime;
    }

    /**
     * Get the percentile96ResponseTime property: 96 percentile response time.
     *
     * @return the percentile96ResponseTime value.
     */
    @Generated
    public Double getPercentile96ResponseTime() {
        return this.percentile96ResponseTime;
    }

    /**
     * Get the percentile97ResponseTime property: 97 percentile response time.
     *
     * @return the percentile97ResponseTime value.
     */
    @Generated
    public Double getPercentile97ResponseTime() {
        return this.percentile97ResponseTime;
    }

    /**
     * Get the percentile98ResponseTime property: 98 percentile response time.
     *
     * @return the percentile98ResponseTime value.
     */
    @Generated
    public Double getPercentile98ResponseTime() {
        return this.percentile98ResponseTime;
    }

    /**
     * Get the percentile999ResponseTime property: 99.9 percentile response time.
     *
     * @return the percentile999ResponseTime value.
     */
    @Generated
    public Double getPercentile999ResponseTime() {
        return this.percentile999ResponseTime;
    }

    /**
     * Get the percentile9999ResponseTime property: 99.99 percentile response time.
     *
     * @return the percentile9999ResponseTime value.
     */
    @Generated
    public Double getPercentile9999ResponseTime() {
        return this.percentile9999ResponseTime;
    }
}
