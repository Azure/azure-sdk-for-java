// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Test run statistics.
 */
@Immutable
public final class TestRunStatistics implements JsonSerializable<TestRunStatistics> {
    /*
     * Transaction name.
     */
    @Generated
    private String transaction;

    /*
     * Sampler count.
     */
    @Generated
    private Double sampleCount;

    /*
     * Error count.
     */
    @Generated
    private Double errorCount;

    /*
     * Error percentage.
     */
    @Generated
    private Double errorPct;

    /*
     * Mean response time.
     */
    @Generated
    private Double meanResTime;

    /*
     * Median response time.
     */
    @Generated
    private Double medianResTime;

    /*
     * Max response time.
     */
    @Generated
    private Double maxResTime;

    /*
     * Minimum response time.
     */
    @Generated
    private Double minResTime;

    /*
     * 90 percentile response time.
     */
    @Generated
    private Double pct1ResTime;

    /*
     * 95 percentile response time.
     */
    @Generated
    private Double pct2ResTime;

    /*
     * 99 percentile response time.
     */
    @Generated
    private Double pct3ResTime;

    /*
     * 75 percentile response time.
     */
    @Generated
    private Double pct75ResTime;

    /*
     * 96 percentile response time.
     */
    @Generated
    private Double pct96ResTime;

    /*
     * 97 percentile response time.
     */
    @Generated
    private Double pct97ResTime;

    /*
     * 98 percentile response time.
     */
    @Generated
    private Double pct98ResTime;

    /*
     * 99.9 percentile response time.
     */
    @Generated
    private Double pct999ResTime;

    /*
     * 99.99 percentile response time.
     */
    @Generated
    private Double pct9999ResTime;

    /*
     * Throughput.
     */
    @Generated
    private Double throughput;

    /*
     * Received network bytes.
     */
    @Generated
    private Double receivedKBytesPerSec;

    /*
     * Send network bytes.
     */
    @Generated
    private Double sentKBytesPerSec;

    /**
     * Creates an instance of TestRunStatistics class.
     */
    @Generated
    private TestRunStatistics() {
    }

    /**
     * Get the transaction property: Transaction name.
     * 
     * @return the transaction value.
     */
    @Generated
    public String getTransaction() {
        return this.transaction;
    }

    /**
     * Get the sampleCount property: Sampler count.
     * 
     * @return the sampleCount value.
     */
    @Generated
    public Double getSampleCount() {
        return this.sampleCount;
    }

    /**
     * Get the errorCount property: Error count.
     * 
     * @return the errorCount value.
     */
    @Generated
    public Double getErrorCount() {
        return this.errorCount;
    }

    /**
     * Get the errorPct property: Error percentage.
     * 
     * @return the errorPct value.
     */
    @Generated
    public Double getErrorPct() {
        return this.errorPct;
    }

    /**
     * Get the meanResTime property: Mean response time.
     * 
     * @return the meanResTime value.
     */
    @Generated
    public Double getMeanResTime() {
        return this.meanResTime;
    }

    /**
     * Get the medianResTime property: Median response time.
     * 
     * @return the medianResTime value.
     */
    @Generated
    public Double getMedianResTime() {
        return this.medianResTime;
    }

    /**
     * Get the maxResTime property: Max response time.
     * 
     * @return the maxResTime value.
     */
    @Generated
    public Double getMaxResTime() {
        return this.maxResTime;
    }

    /**
     * Get the minResTime property: Minimum response time.
     * 
     * @return the minResTime value.
     */
    @Generated
    public Double getMinResTime() {
        return this.minResTime;
    }

    /**
     * Get the pct1ResTime property: 90 percentile response time.
     * 
     * @return the pct1ResTime value.
     */
    @Generated
    public Double getPct1ResTime() {
        return this.pct1ResTime;
    }

    /**
     * Get the pct2ResTime property: 95 percentile response time.
     * 
     * @return the pct2ResTime value.
     */
    @Generated
    public Double getPct2ResTime() {
        return this.pct2ResTime;
    }

    /**
     * Get the pct3ResTime property: 99 percentile response time.
     * 
     * @return the pct3ResTime value.
     */
    @Generated
    public Double getPct3ResTime() {
        return this.pct3ResTime;
    }

    /**
     * Get the pct75ResTime property: 75 percentile response time.
     * 
     * @return the pct75ResTime value.
     */
    @Generated
    public Double getPct75ResTime() {
        return this.pct75ResTime;
    }

    /**
     * Get the pct96ResTime property: 96 percentile response time.
     * 
     * @return the pct96ResTime value.
     */
    @Generated
    public Double getPct96ResTime() {
        return this.pct96ResTime;
    }

    /**
     * Get the pct97ResTime property: 97 percentile response time.
     * 
     * @return the pct97ResTime value.
     */
    @Generated
    public Double getPct97ResTime() {
        return this.pct97ResTime;
    }

    /**
     * Get the pct98ResTime property: 98 percentile response time.
     * 
     * @return the pct98ResTime value.
     */
    @Generated
    public Double getPct98ResTime() {
        return this.pct98ResTime;
    }

    /**
     * Get the pct999ResTime property: 99.9 percentile response time.
     * 
     * @return the pct999ResTime value.
     */
    @Generated
    public Double getPct999ResTime() {
        return this.pct999ResTime;
    }

    /**
     * Get the pct9999ResTime property: 99.99 percentile response time.
     * 
     * @return the pct9999ResTime value.
     */
    @Generated
    public Double getPct9999ResTime() {
        return this.pct9999ResTime;
    }

    /**
     * Get the throughput property: Throughput.
     * 
     * @return the throughput value.
     */
    @Generated
    public Double getThroughput() {
        return this.throughput;
    }

    /**
     * Get the receivedKBytesPerSec property: Received network bytes.
     * 
     * @return the receivedKBytesPerSec value.
     */
    @Generated
    public Double getReceivedKBytesPerSec() {
        return this.receivedKBytesPerSec;
    }

    /**
     * Get the sentKBytesPerSec property: Send network bytes.
     * 
     * @return the sentKBytesPerSec value.
     */
    @Generated
    public Double getSentKBytesPerSec() {
        return this.sentKBytesPerSec;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunStatistics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunStatistics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunStatistics.
     */
    @Generated
    public static TestRunStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunStatistics deserializedTestRunStatistics = new TestRunStatistics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("transaction".equals(fieldName)) {
                    deserializedTestRunStatistics.transaction = reader.getString();
                } else if ("sampleCount".equals(fieldName)) {
                    deserializedTestRunStatistics.sampleCount = reader.getNullable(JsonReader::getDouble);
                } else if ("errorCount".equals(fieldName)) {
                    deserializedTestRunStatistics.errorCount = reader.getNullable(JsonReader::getDouble);
                } else if ("errorPct".equals(fieldName)) {
                    deserializedTestRunStatistics.errorPct = reader.getNullable(JsonReader::getDouble);
                } else if ("meanResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.meanResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("medianResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.medianResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("maxResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.maxResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("minResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.minResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct1ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct1ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct2ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct2ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct3ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct3ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct75ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct75ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct96ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct96ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct97ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct97ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct98ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct98ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct999ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct999ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("pct9999ResTime".equals(fieldName)) {
                    deserializedTestRunStatistics.pct9999ResTime = reader.getNullable(JsonReader::getDouble);
                } else if ("throughput".equals(fieldName)) {
                    deserializedTestRunStatistics.throughput = reader.getNullable(JsonReader::getDouble);
                } else if ("receivedKBytesPerSec".equals(fieldName)) {
                    deserializedTestRunStatistics.receivedKBytesPerSec = reader.getNullable(JsonReader::getDouble);
                } else if ("sentKBytesPerSec".equals(fieldName)) {
                    deserializedTestRunStatistics.sentKBytesPerSec = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunStatistics;
        });
    }
}
