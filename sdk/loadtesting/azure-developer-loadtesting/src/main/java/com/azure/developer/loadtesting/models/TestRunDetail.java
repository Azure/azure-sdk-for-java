// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Details of a particular test run for a test profile run.
 */
@Immutable
public final class TestRunDetail implements JsonSerializable<TestRunDetail> {
    /*
     * Status of the test run.
     */
    @Generated
    private final Status status;

    /*
     * ID of the configuration on which the test ran.
     */
    @Generated
    private final String configurationId;

    /*
     * Key value pair of extra properties associated with the test run.
     */
    @Generated
    private final Map<String, String> properties;

    /**
     * Creates an instance of TestRunDetail class.
     * 
     * @param status the status value to set.
     * @param configurationId the configurationId value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private TestRunDetail(Status status, String configurationId, Map<String, String> properties) {
        this.status = status;
        this.configurationId = configurationId;
        this.properties = properties;
    }

    /**
     * Get the status property: Status of the test run.
     * 
     * @return the status value.
     */
    @Generated
    public Status getStatus() {
        return this.status;
    }

    /**
     * Get the configurationId property: ID of the configuration on which the test ran.
     * 
     * @return the configurationId value.
     */
    @Generated
    public String getConfigurationId() {
        return this.configurationId;
    }

    /**
     * Get the properties property: Key value pair of extra properties associated with the test run.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("configurationId", this.configurationId);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunDetail if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestRunDetail.
     */
    @Generated
    public static TestRunDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Status status = null;
            String configurationId = null;
            Map<String, String> properties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    status = Status.fromString(reader.getString());
                } else if ("configurationId".equals(fieldName)) {
                    configurationId = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new TestRunDetail(status, configurationId, properties);
        });
    }
}
