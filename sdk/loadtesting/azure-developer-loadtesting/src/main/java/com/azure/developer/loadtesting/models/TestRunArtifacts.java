// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Collection of test run artifacts.
 */
@Immutable
public final class TestRunArtifacts implements JsonSerializable<TestRunArtifacts> {
    /*
     * The input artifacts for the test run.
     */
    @Generated
    private TestRunInputArtifacts inputArtifacts;

    /*
     * The output artifacts for the test run.
     */
    @Generated
    private TestRunOutputArtifacts outputArtifacts;

    /**
     * Creates an instance of TestRunArtifacts class.
     */
    @Generated
    private TestRunArtifacts() {
    }

    /**
     * Get the inputArtifacts property: The input artifacts for the test run.
     * 
     * @return the inputArtifacts value.
     */
    @Generated
    public TestRunInputArtifacts getInputArtifacts() {
        return this.inputArtifacts;
    }

    /**
     * Get the outputArtifacts property: The output artifacts for the test run.
     * 
     * @return the outputArtifacts value.
     */
    @Generated
    public TestRunOutputArtifacts getOutputArtifacts() {
        return this.outputArtifacts;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("outputArtifacts", this.outputArtifacts);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunArtifacts from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunArtifacts if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunArtifacts.
     */
    @Generated
    public static TestRunArtifacts fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunArtifacts deserializedTestRunArtifacts = new TestRunArtifacts();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputArtifacts".equals(fieldName)) {
                    deserializedTestRunArtifacts.inputArtifacts = TestRunInputArtifacts.fromJson(reader);
                } else if ("outputArtifacts".equals(fieldName)) {
                    deserializedTestRunArtifacts.outputArtifacts = TestRunOutputArtifacts.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunArtifacts;
        });
    }
}
