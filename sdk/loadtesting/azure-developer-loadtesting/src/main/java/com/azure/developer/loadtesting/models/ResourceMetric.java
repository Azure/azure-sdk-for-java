// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Associated metric definition for particular metrics of the azure resource (
 * Refer :
 * https://learn.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition).
 */
@Fluent
public final class ResourceMetric implements JsonSerializable<ResourceMetric> {
    /*
     * Unique name for metric.
     */
    @Generated
    private String id;

    /*
     * Azure resource id.
     */
    @Generated
    private String resourceId;

    /*
     * Metric name space.
     */
    @Generated
    private String metricNamespace;

    /*
     * Metric description.
     */
    @Generated
    private String displayDescription;

    /*
     * The invariant value of metric name
     */
    @Generated
    private String name;

    /*
     * Metric aggregation.
     */
    @Generated
    private String aggregation;

    /*
     * Metric unit.
     */
    @Generated
    private String unit;

    /*
     * Azure resource type.
     */
    @Generated
    private String resourceType;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setResourceMetricAccessor(new JsonMergePatchHelper.ResourceMetricAccessor() {
            @Override
            public ResourceMetric prepareModelForJsonMergePatch(ResourceMetric model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(ResourceMetric model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of ResourceMetric class.
     */
    @Generated
    public ResourceMetric() {
    }

    /**
     * Get the id property: Unique name for metric.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the resourceId property: Azure resource id.
     * 
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Azure resource id.
     * <p>Required when create the resource.</p>
     * 
     * @param resourceId the resourceId value to set.
     * @return the ResourceMetric object itself.
     */
    @Generated
    public ResourceMetric setResourceId(String resourceId) {
        this.resourceId = resourceId;
        this.updatedProperties.add("resourceId");
        return this;
    }

    /**
     * Get the metricNamespace property: Metric name space.
     * 
     * @return the metricNamespace value.
     */
    @Generated
    public String getMetricNamespace() {
        return this.metricNamespace;
    }

    /**
     * Set the metricNamespace property: Metric name space.
     * <p>Required when create the resource.</p>
     * 
     * @param metricNamespace the metricNamespace value to set.
     * @return the ResourceMetric object itself.
     */
    @Generated
    public ResourceMetric setMetricNamespace(String metricNamespace) {
        this.metricNamespace = metricNamespace;
        this.updatedProperties.add("metricNamespace");
        return this;
    }

    /**
     * Get the displayDescription property: Metric description.
     * 
     * @return the displayDescription value.
     */
    @Generated
    public String getDisplayDescription() {
        return this.displayDescription;
    }

    /**
     * Set the displayDescription property: Metric description.
     * 
     * @param displayDescription the displayDescription value to set.
     * @return the ResourceMetric object itself.
     */
    @Generated
    public ResourceMetric setDisplayDescription(String displayDescription) {
        this.displayDescription = displayDescription;
        this.updatedProperties.add("displayDescription");
        return this;
    }

    /**
     * Get the name property: The invariant value of metric name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The invariant value of metric name.
     * <p>Required when create the resource.</p>
     * 
     * @param name the name value to set.
     * @return the ResourceMetric object itself.
     */
    @Generated
    public ResourceMetric setName(String name) {
        this.name = name;
        this.updatedProperties.add("name");
        return this;
    }

    /**
     * Get the aggregation property: Metric aggregation.
     * 
     * @return the aggregation value.
     */
    @Generated
    public String getAggregation() {
        return this.aggregation;
    }

    /**
     * Set the aggregation property: Metric aggregation.
     * <p>Required when create the resource.</p>
     * 
     * @param aggregation the aggregation value to set.
     * @return the ResourceMetric object itself.
     */
    @Generated
    public ResourceMetric setAggregation(String aggregation) {
        this.aggregation = aggregation;
        this.updatedProperties.add("aggregation");
        return this;
    }

    /**
     * Get the unit property: Metric unit.
     * 
     * @return the unit value.
     */
    @Generated
    public String getUnit() {
        return this.unit;
    }

    /**
     * Set the unit property: Metric unit.
     * 
     * @param unit the unit value to set.
     * @return the ResourceMetric object itself.
     */
    @Generated
    public ResourceMetric setUnit(String unit) {
        this.unit = unit;
        this.updatedProperties.add("unit");
        return this;
    }

    /**
     * Get the resourceType property: Azure resource type.
     * 
     * @return the resourceType value.
     */
    @Generated
    public String getResourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: Azure resource type.
     * <p>Required when create the resource.</p>
     * 
     * @param resourceType the resourceType value to set.
     * @return the ResourceMetric object itself.
     */
    @Generated
    public ResourceMetric setResourceType(String resourceType) {
        this.resourceType = resourceType;
        this.updatedProperties.add("resourceType");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("resourceId", this.resourceId);
            jsonWriter.writeStringField("metricNamespace", this.metricNamespace);
            jsonWriter.writeStringField("displayDescription", this.displayDescription);
            jsonWriter.writeStringField("name", this.name);
            jsonWriter.writeStringField("aggregation", this.aggregation);
            jsonWriter.writeStringField("unit", this.unit);
            jsonWriter.writeStringField("resourceType", this.resourceType);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("resourceId")) {
            if (this.resourceId == null) {
                jsonWriter.writeNullField("resourceId");
            } else {
                jsonWriter.writeStringField("resourceId", this.resourceId);
            }
        }
        if (updatedProperties.contains("metricNamespace")) {
            if (this.metricNamespace == null) {
                jsonWriter.writeNullField("metricNamespace");
            } else {
                jsonWriter.writeStringField("metricNamespace", this.metricNamespace);
            }
        }
        if (updatedProperties.contains("displayDescription")) {
            if (this.displayDescription == null) {
                jsonWriter.writeNullField("displayDescription");
            } else {
                jsonWriter.writeStringField("displayDescription", this.displayDescription);
            }
        }
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name);
            }
        }
        if (updatedProperties.contains("aggregation")) {
            if (this.aggregation == null) {
                jsonWriter.writeNullField("aggregation");
            } else {
                jsonWriter.writeStringField("aggregation", this.aggregation);
            }
        }
        if (updatedProperties.contains("unit")) {
            if (this.unit == null) {
                jsonWriter.writeNullField("unit");
            } else {
                jsonWriter.writeStringField("unit", this.unit);
            }
        }
        if (updatedProperties.contains("resourceType")) {
            if (this.resourceType == null) {
                jsonWriter.writeNullField("resourceType");
            } else {
                jsonWriter.writeStringField("resourceType", this.resourceType);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceMetric from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceMetric if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceMetric.
     */
    @Generated
    public static ResourceMetric fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceMetric deserializedResourceMetric = new ResourceMetric();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedResourceMetric.id = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedResourceMetric.resourceId = reader.getString();
                } else if ("metricNamespace".equals(fieldName)) {
                    deserializedResourceMetric.metricNamespace = reader.getString();
                } else if ("displayDescription".equals(fieldName)) {
                    deserializedResourceMetric.displayDescription = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedResourceMetric.name = reader.getString();
                } else if ("aggregation".equals(fieldName)) {
                    deserializedResourceMetric.aggregation = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedResourceMetric.unit = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedResourceMetric.resourceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceMetric;
        });
    }
}
