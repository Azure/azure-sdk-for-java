// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Secret.
 */
@Fluent
public final class Secret implements JsonSerializable<Secret> {
    /*
     * The value of the secret for the respective type
     */
    @Generated
    private String value;

    /*
     * Type of secret
     */
    @Generated
    private SecretType type;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setSecretAccessor(new JsonMergePatchHelper.SecretAccessor() {
            @Override
            public Secret prepareModelForJsonMergePatch(Secret model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Secret model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of Secret class.
     */
    @Generated
    public Secret() {
    }

    /**
     * Get the value property: The value of the secret for the respective type.
     * 
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value of the secret for the respective type.
     * 
     * @param value the value value to set.
     * @return the Secret object itself.
     */
    @Generated
    public Secret setValue(String value) {
        this.value = value;
        this.updatedProperties.add("value");
        return this;
    }

    /**
     * Get the type property: Type of secret.
     * 
     * @return the type value.
     */
    @Generated
    public SecretType getType() {
        return this.type;
    }

    /**
     * Set the type property: Type of secret.
     * 
     * @param type the type value to set.
     * @return the Secret object itself.
     */
    @Generated
    public Secret setType(SecretType type) {
        this.type = type;
        this.updatedProperties.add("type");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("value", this.value);
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("value")) {
            if (this.value == null) {
                jsonWriter.writeNullField("value");
            } else {
                jsonWriter.writeStringField("value", this.value);
            }
        }
        if (updatedProperties.contains("type")) {
            if (this.type == null) {
                jsonWriter.writeNullField("type");
            } else {
                jsonWriter.writeStringField("type", this.type.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Secret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Secret if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Secret.
     */
    @Generated
    public static Secret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Secret deserializedSecret = new Secret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedSecret.value = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSecret.type = SecretType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecret;
        });
    }
}
