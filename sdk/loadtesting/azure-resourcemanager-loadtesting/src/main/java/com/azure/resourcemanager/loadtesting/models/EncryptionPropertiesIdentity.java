// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key
 * Vault.
 */
@Fluent
public final class EncryptionPropertiesIdentity implements JsonSerializable<EncryptionPropertiesIdentity> {
    /*
     * Managed identity type to use for accessing encryption key Url.
     */
    private Type type;

    /*
     * User assigned identity to use for accessing key encryption key Url. Ex:
     * /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
     * group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId.
     */
    private String resourceId;

    /**
     * Creates an instance of EncryptionPropertiesIdentity class.
     */
    public EncryptionPropertiesIdentity() {
    }

    /**
     * Get the type property: Managed identity type to use for accessing encryption key Url.
     * 
     * @return the type value.
     */
    public Type type() {
        return this.type;
    }

    /**
     * Set the type property: Managed identity type to use for accessing encryption key Url.
     * 
     * @param type the type value to set.
     * @return the EncryptionPropertiesIdentity object itself.
     */
    public EncryptionPropertiesIdentity withType(Type type) {
        this.type = type;
        return this;
    }

    /**
     * Get the resourceId property: User assigned identity to use for accessing key encryption key Url. Ex:
     * /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/&lt;resource
     * group&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: User assigned identity to use for accessing key encryption key Url. Ex:
     * /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/&lt;resource
     * group&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId.
     * 
     * @param resourceId the resourceId value to set.
     * @return the EncryptionPropertiesIdentity object itself.
     */
    public EncryptionPropertiesIdentity withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("resourceId", this.resourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionPropertiesIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionPropertiesIdentity if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionPropertiesIdentity.
     */
    public static EncryptionPropertiesIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionPropertiesIdentity deserializedEncryptionPropertiesIdentity = new EncryptionPropertiesIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedEncryptionPropertiesIdentity.type = Type.fromString(reader.getString());
                } else if ("resourceId".equals(fieldName)) {
                    deserializedEncryptionPropertiesIdentity.resourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionPropertiesIdentity;
        });
    }
}
