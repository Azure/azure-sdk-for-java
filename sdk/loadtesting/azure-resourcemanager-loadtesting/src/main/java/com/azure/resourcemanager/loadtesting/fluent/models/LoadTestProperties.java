// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loadtesting.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.loadtesting.models.EncryptionProperties;
import com.azure.resourcemanager.loadtesting.models.ResourceState;
import java.io.IOException;

/**
 * LoadTest resource properties.
 */
@Fluent
public final class LoadTestProperties implements JsonSerializable<LoadTestProperties> {
    /*
     * Description of the resource.
     */
    private String description;

    /*
     * Resource provisioning state.
     */
    private ResourceState provisioningState;

    /*
     * Resource data plane URI.
     */
    private String dataPlaneUri;

    /*
     * CMK Encryption property.
     */
    private EncryptionProperties encryption;

    /**
     * Creates an instance of LoadTestProperties class.
     */
    public LoadTestProperties() {
    }

    /**
     * Get the description property: Description of the resource.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the resource.
     * 
     * @param description the description value to set.
     * @return the LoadTestProperties object itself.
     */
    public LoadTestProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the dataPlaneUri property: Resource data plane URI.
     * 
     * @return the dataPlaneUri value.
     */
    public String dataPlaneUri() {
        return this.dataPlaneUri;
    }

    /**
     * Get the encryption property: CMK Encryption property.
     * 
     * @return the encryption value.
     */
    public EncryptionProperties encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: CMK Encryption property.
     * 
     * @param encryption the encryption value to set.
     * @return the LoadTestProperties object itself.
     */
    public LoadTestProperties withEncryption(EncryptionProperties encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryption() != null) {
            encryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("encryption", this.encryption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadTestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadTestProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadTestProperties.
     */
    public static LoadTestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadTestProperties deserializedLoadTestProperties = new LoadTestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedLoadTestProperties.description = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLoadTestProperties.provisioningState = ResourceState.fromString(reader.getString());
                } else if ("dataPlaneURI".equals(fieldName)) {
                    deserializedLoadTestProperties.dataPlaneUri = reader.getString();
                } else if ("encryption".equals(fieldName)) {
                    deserializedLoadTestProperties.encryption = EncryptionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadTestProperties;
        });
    }
}
