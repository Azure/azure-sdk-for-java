// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.loadtesting.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.loadtesting.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.loadtesting.fluent.models.CheckQuotaAvailabilityResponseInner;
import com.azure.resourcemanager.loadtesting.fluent.models.LoadTestResourceInner;
import com.azure.resourcemanager.loadtesting.fluent.models.OutboundEnvironmentEndpointInner;
import com.azure.resourcemanager.loadtesting.fluent.models.QuotaResourceInner;
import com.azure.resourcemanager.loadtesting.models.CheckQuotaAvailabilityResponse;
import com.azure.resourcemanager.loadtesting.models.LoadTestResource;
import com.azure.resourcemanager.loadtesting.models.OutboundEnvironmentEndpoint;
import com.azure.resourcemanager.loadtesting.models.QuotaBucketRequest;
import com.azure.resourcemanager.loadtesting.models.QuotaResource;
import com.azure.resourcemanager.loadtesting.models.ResourceProviders;

public final class ResourceProvidersImpl implements ResourceProviders {
    private static final ClientLogger LOGGER = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final com.azure.resourcemanager.loadtesting.LoadTestManager serviceManager;

    public ResourceProvidersImpl(ResourceProvidersClient innerClient,
        com.azure.resourcemanager.loadtesting.LoadTestManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LoadTestResource> list() {
        PagedIterable<LoadTestResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LoadTestResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<LoadTestResource> list(Context context) {
        PagedIterable<LoadTestResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LoadTestResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<LoadTestResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<LoadTestResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LoadTestResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<LoadTestResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<LoadTestResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LoadTestResourceImpl(inner1, this.manager()));
    }

    public Response<LoadTestResource> getByResourceGroupWithResponse(String resourceGroupName, String loadTestName,
        Context context) {
        Response<LoadTestResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, loadTestName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LoadTestResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LoadTestResource getByResourceGroup(String resourceGroupName, String loadTestName) {
        LoadTestResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, loadTestName);
        if (inner != null) {
            return new LoadTestResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String loadTestName) {
        this.serviceClient().delete(resourceGroupName, loadTestName);
    }

    public void delete(String resourceGroupName, String loadTestName, Context context) {
        this.serviceClient().delete(resourceGroupName, loadTestName, context);
    }

    public PagedIterable<OutboundEnvironmentEndpoint> outboundNetworkDependenciesEndpoints(String resourceGroupName,
        String loadTestName) {
        PagedIterable<OutboundEnvironmentEndpointInner> inner
            = this.serviceClient().outboundNetworkDependenciesEndpoints(resourceGroupName, loadTestName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new OutboundEnvironmentEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<OutboundEnvironmentEndpoint> outboundNetworkDependenciesEndpoints(String resourceGroupName,
        String loadTestName, Context context) {
        PagedIterable<OutboundEnvironmentEndpointInner> inner
            = this.serviceClient().outboundNetworkDependenciesEndpoints(resourceGroupName, loadTestName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new OutboundEnvironmentEndpointImpl(inner1, this.manager()));
    }

    public Response<QuotaResource> getQuotaWithResponse(String location, String quotaBucketName, Context context) {
        Response<QuotaResourceInner> inner
            = this.serviceClient().getQuotaWithResponse(location, quotaBucketName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new QuotaResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public QuotaResource getQuota(String location, String quotaBucketName) {
        QuotaResourceInner inner = this.serviceClient().getQuota(location, quotaBucketName);
        if (inner != null) {
            return new QuotaResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<QuotaResource> listQuota(String location) {
        PagedIterable<QuotaResourceInner> inner = this.serviceClient().listQuota(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new QuotaResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<QuotaResource> listQuota(String location, Context context) {
        PagedIterable<QuotaResourceInner> inner = this.serviceClient().listQuota(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new QuotaResourceImpl(inner1, this.manager()));
    }

    public Response<CheckQuotaAvailabilityResponse> checkAvailabilityQuotaWithResponse(String location,
        String quotaBucketName, QuotaBucketRequest quotaBucketRequest, Context context) {
        Response<CheckQuotaAvailabilityResponseInner> inner = this.serviceClient()
            .checkAvailabilityQuotaWithResponse(location, quotaBucketName, quotaBucketRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckQuotaAvailabilityResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckQuotaAvailabilityResponse checkAvailabilityQuota(String location, String quotaBucketName,
        QuotaBucketRequest quotaBucketRequest) {
        CheckQuotaAvailabilityResponseInner inner
            = this.serviceClient().checkAvailabilityQuota(location, quotaBucketName, quotaBucketRequest);
        if (inner != null) {
            return new CheckQuotaAvailabilityResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LoadTestResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadTestName = ResourceManagerUtils.getValueFromIdByName(id, "loadTests");
        if (loadTestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadTests'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, loadTestName, Context.NONE).getValue();
    }

    public Response<LoadTestResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadTestName = ResourceManagerUtils.getValueFromIdByName(id, "loadTests");
        if (loadTestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadTests'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, loadTestName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadTestName = ResourceManagerUtils.getValueFromIdByName(id, "loadTests");
        if (loadTestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadTests'.", id)));
        }
        this.delete(resourceGroupName, loadTestName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadTestName = ResourceManagerUtils.getValueFromIdByName(id, "loadTests");
        if (loadTestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadTests'.", id)));
        }
        this.delete(resourceGroupName, loadTestName, context);
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.loadtesting.LoadTestManager manager() {
        return this.serviceManager;
    }

    public LoadTestResourceImpl define(String name) {
        return new LoadTestResourceImpl(name, this.manager());
    }
}
