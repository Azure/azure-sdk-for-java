// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.loadtesting.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Quota bucket resource properties.
 */
@Immutable
public final class QuotaResourceProperties implements JsonSerializable<QuotaResourceProperties> {
    /*
     * Current quota limit of the quota bucket.
     */
    private Integer limit;

    /*
     * Current quota usage of the quota bucket.
     */
    private Integer usage;

    /*
     * Resource provisioning state.
     */
    private ResourceState provisioningState;

    /**
     * Creates an instance of QuotaResourceProperties class.
     */
    private QuotaResourceProperties() {
    }

    /**
     * Get the limit property: Current quota limit of the quota bucket.
     * 
     * @return the limit value.
     */
    public Integer limit() {
        return this.limit;
    }

    /**
     * Get the usage property: Current quota usage of the quota bucket.
     * 
     * @return the usage value.
     */
    public Integer usage() {
        return this.usage;
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeNumberField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaResourceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuotaResourceProperties.
     */
    public static QuotaResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaResourceProperties deserializedQuotaResourceProperties = new QuotaResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("limit".equals(fieldName)) {
                    deserializedQuotaResourceProperties.limit = reader.getNullable(JsonReader::getInt);
                } else if ("usage".equals(fieldName)) {
                    deserializedQuotaResourceProperties.usage = reader.getNullable(JsonReader::getInt);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedQuotaResourceProperties.provisioningState
                        = ResourceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaResourceProperties;
        });
    }
}
