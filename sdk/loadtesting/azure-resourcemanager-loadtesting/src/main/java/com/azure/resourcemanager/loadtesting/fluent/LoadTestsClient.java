// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loadtesting.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.loadtesting.fluent.models.LoadTestResourceInner;
import com.azure.resourcemanager.loadtesting.fluent.models.OutboundEnvironmentEndpointInner;
import com.azure.resourcemanager.loadtesting.models.LoadTestResourcePatchRequestBody;

/**
 * An instance of this class provides access to all the operations defined in LoadTestsClient.
 */
public interface LoadTestsClient {
    /**
     * List LoadTestResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadTestResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LoadTestResourceInner> list();

    /**
     * List LoadTestResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadTestResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LoadTestResourceInner> list(Context context);

    /**
     * List LoadTestResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadTestResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LoadTestResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List LoadTestResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadTestResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LoadTestResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadTestResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<LoadTestResourceInner> getByResourceGroupWithResponse(String resourceGroupName, String loadTestName,
        Context context);

    /**
     * Get a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadTestResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadTestResourceInner getByResourceGroup(String resourceGroupName, String loadTestName);

    /**
     * Create a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of loadTest details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LoadTestResourceInner>, LoadTestResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String loadTestName, LoadTestResourceInner resource);

    /**
     * Create a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of loadTest details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LoadTestResourceInner>, LoadTestResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String loadTestName, LoadTestResourceInner resource, Context context);

    /**
     * Create a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadTest details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadTestResourceInner createOrUpdate(String resourceGroupName, String loadTestName, LoadTestResourceInner resource);

    /**
     * Create a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadTest details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadTestResourceInner createOrUpdate(String resourceGroupName, String loadTestName, LoadTestResourceInner resource,
        Context context);

    /**
     * Update a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of loadTest details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LoadTestResourceInner>, LoadTestResourceInner> beginUpdate(String resourceGroupName,
        String loadTestName, LoadTestResourcePatchRequestBody properties);

    /**
     * Update a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of loadTest details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LoadTestResourceInner>, LoadTestResourceInner> beginUpdate(String resourceGroupName,
        String loadTestName, LoadTestResourcePatchRequestBody properties, Context context);

    /**
     * Update a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadTest details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadTestResourceInner update(String resourceGroupName, String loadTestName,
        LoadTestResourcePatchRequestBody properties);

    /**
     * Update a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadTest details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadTestResourceInner update(String resourceGroupName, String loadTestName,
        LoadTestResourcePatchRequestBody properties, Context context);

    /**
     * Delete a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String loadTestName);

    /**
     * Delete a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String loadTestName, Context context);

    /**
     * Delete a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String loadTestName);

    /**
     * Delete a LoadTestResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String loadTestName, Context context);

    /**
     * Lists the endpoints that agents may call as part of load testing.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return values returned by the List operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OutboundEnvironmentEndpointInner> listOutboundNetworkDependenciesEndpoints(String resourceGroupName,
        String loadTestName);

    /**
     * Lists the endpoints that agents may call as part of load testing.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param loadTestName Load Test name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return values returned by the List operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OutboundEnvironmentEndpointInner> listOutboundNetworkDependenciesEndpoints(String resourceGroupName,
        String loadTestName, Context context);
}
