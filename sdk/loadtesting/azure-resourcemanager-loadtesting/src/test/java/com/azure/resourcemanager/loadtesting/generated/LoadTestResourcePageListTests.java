// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loadtesting.fluent.models.LoadTestResourceInner;
import com.azure.resourcemanager.loadtesting.models.LoadTestResourcePageList;
import com.azure.resourcemanager.loadtesting.models.ManagedServiceIdentity;
import com.azure.resourcemanager.loadtesting.models.ManagedServiceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LoadTestResourcePageListTests {
    @Test
    public void testDeserialize() {
        LoadTestResourcePageList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"description\":\"ojakhmsbzjhcrze\",\"provisioningState\":\"Failed\",\"dataPlaneURI\":\"lxaolthqtrgqjbp\"},\"identity\":{\"principalId\":\"c3517be6-628d-499d-82aa-049d6f4d02c1\",\"tenantId\":\"64fd0348-3757-4ef0-bcc5-643d769f61b8\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"location\":\"v\",\"tags\":{\"it\":\"rwzoxxjtfelluwf\",\"qfpjk\":\"np\"},\"id\":\"lxofpdvhpfxxypin\",\"name\":\"nmayhuybb\",\"type\":\"podepoo\"},{\"properties\":{\"description\":\"uvamiheognarxzxt\",\"provisioningState\":\"Succeeded\",\"dataPlaneURI\":\"usivye\"},\"identity\":{\"principalId\":\"217c35c3-3f3e-4bcc-822d-234c956c225f\",\"tenantId\":\"9b5e21c7-a98c-457d-a9a1-0b327cbb5909\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"hungbwjzrnf\",\"tags\":{\"ofx\":\"gispemvtzfkufubl\",\"jbasvmsmjqulngs\":\"eofjaeqjh\",\"bkzgcwrwclx\":\"tnb\",\"vkocrcjdkwtn\":\"wrljdouskc\"},\"id\":\"xbnjbiksq\",\"name\":\"gls\",\"type\":\"ainqpjwnzlljfm\"},{\"properties\":{\"description\":\"ebvmgxsabkyqd\",\"provisioningState\":\"Canceled\",\"dataPlaneURI\":\"tcj\"},\"identity\":{\"principalId\":\"3f1f4131-8097-4399-a587-bbbeeb1c6146\",\"tenantId\":\"03be0763-d164-45a1-9c38-e3d0e29310aa\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"hkr\",\"tags\":{\"bdkvwrwjf\":\"appd\"},\"id\":\"usnhutje\",\"name\":\"tmrldhugjzzdatq\",\"type\":\"hocdgeab\"}],\"nextLink\":\"phut\"}")
                .toObject(LoadTestResourcePageList.class);
        Assertions.assertEquals("v", model.value().get(0).location());
        Assertions.assertEquals("rwzoxxjtfelluwf", model.value().get(0).tags().get("it"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("ojakhmsbzjhcrze", model.value().get(0).description());
        Assertions.assertEquals("phut", model.nextLink());
    }

    @Test
    public void testSerialize() {
        LoadTestResourcePageList model =
            new LoadTestResourcePageList()
                .withValue(
                    Arrays
                        .asList(
                            new LoadTestResourceInner()
                                .withLocation("v")
                                .withTags(mapOf("it", "rwzoxxjtfelluwf", "qfpjk", "np"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf()))
                                .withDescription("ojakhmsbzjhcrze"),
                            new LoadTestResourceInner()
                                .withLocation("hungbwjzrnf")
                                .withTags(
                                    mapOf(
                                        "ofx",
                                        "gispemvtzfkufubl",
                                        "jbasvmsmjqulngs",
                                        "eofjaeqjh",
                                        "bkzgcwrwclx",
                                        "tnb",
                                        "vkocrcjdkwtn",
                                        "wrljdouskc"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withDescription("uvamiheognarxzxt"),
                            new LoadTestResourceInner()
                                .withLocation("hkr")
                                .withTags(mapOf("bdkvwrwjf", "appd"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withDescription("ebvmgxsabkyqd")))
                .withNextLink("phut");
        model = BinaryData.fromObject(model).toObject(LoadTestResourcePageList.class);
        Assertions.assertEquals("v", model.value().get(0).location());
        Assertions.assertEquals("rwzoxxjtfelluwf", model.value().get(0).tags().get("it"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("ojakhmsbzjhcrze", model.value().get(0).description());
        Assertions.assertEquals("phut", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
