// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billingbenefits.models.AppliedScopeProperties;
import com.azure.resourcemanager.billingbenefits.models.AppliedScopeType;
import com.azure.resourcemanager.billingbenefits.models.BillingPlan;
import com.azure.resourcemanager.billingbenefits.models.ProvisioningState;
import com.azure.resourcemanager.billingbenefits.models.ReservationOrderAliasResponsePropertiesReservedResourceProperties;
import com.azure.resourcemanager.billingbenefits.models.ReservedResourceType;
import com.azure.resourcemanager.billingbenefits.models.Term;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Reservation properties.
 */
@Fluent
public final class ReservationOrderAliasResponseProperties
    implements JsonSerializable<ReservationOrderAliasResponseProperties> {
    /*
     * Display name
     */
    private String displayName;

    /*
     * Identifier of the reservation order created
     */
    private String reservationOrderId;

    /*
     * Provisioning state
     */
    private ProvisioningState provisioningState;

    /*
     * Subscription that will be charged for purchasing the benefit
     */
    private String billingScopeId;

    /*
     * Represent benefit term in ISO 8601 format.
     */
    private Term term;

    /*
     * Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
     */
    private BillingPlan billingPlan;

    /*
     * Type of the Applied Scope.
     */
    private AppliedScopeType appliedScopeType;

    /*
     * Properties specific to applied scope type. Not required if not applicable.
     */
    private AppliedScopeProperties appliedScopeProperties;

    /*
     * Total Quantity of the SKUs purchased in the Reservation.
     */
    private Integer quantity;

    /*
     * Setting this to true will automatically purchase a new benefit on the expiration date time.
     */
    private Boolean renew;

    /*
     * The type of the resource that is being reserved.
     */
    private ReservedResourceType reservedResourceType;

    /*
     * This is the date-time when the Reservation needs to be reviewed.
     */
    private OffsetDateTime reviewDateTime;

    /*
     * Properties specific to each reserved resource type. Not required if not applicable.
     */
    private ReservationOrderAliasResponsePropertiesReservedResourceProperties reservedResourceProperties;

    /**
     * Creates an instance of ReservationOrderAliasResponseProperties class.
     */
    public ReservationOrderAliasResponseProperties() {
    }

    /**
     * Get the displayName property: Display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name.
     * 
     * @param displayName the displayName value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the reservationOrderId property: Identifier of the reservation order created.
     * 
     * @return the reservationOrderId value.
     */
    public String reservationOrderId() {
        return this.reservationOrderId;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the billingScopeId property: Subscription that will be charged for purchasing the benefit.
     * 
     * @return the billingScopeId value.
     */
    public String billingScopeId() {
        return this.billingScopeId;
    }

    /**
     * Set the billingScopeId property: Subscription that will be charged for purchasing the benefit.
     * 
     * @param billingScopeId the billingScopeId value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withBillingScopeId(String billingScopeId) {
        this.billingScopeId = billingScopeId;
        return this;
    }

    /**
     * Get the term property: Represent benefit term in ISO 8601 format.
     * 
     * @return the term value.
     */
    public Term term() {
        return this.term;
    }

    /**
     * Set the term property: Represent benefit term in ISO 8601 format.
     * 
     * @param term the term value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withTerm(Term term) {
        this.term = term;
        return this;
    }

    /**
     * Get the billingPlan property: Represents the billing plan in ISO 8601 format. Required only for monthly billing
     * plans.
     * 
     * @return the billingPlan value.
     */
    public BillingPlan billingPlan() {
        return this.billingPlan;
    }

    /**
     * Set the billingPlan property: Represents the billing plan in ISO 8601 format. Required only for monthly billing
     * plans.
     * 
     * @param billingPlan the billingPlan value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withBillingPlan(BillingPlan billingPlan) {
        this.billingPlan = billingPlan;
        return this;
    }

    /**
     * Get the appliedScopeType property: Type of the Applied Scope.
     * 
     * @return the appliedScopeType value.
     */
    public AppliedScopeType appliedScopeType() {
        return this.appliedScopeType;
    }

    /**
     * Set the appliedScopeType property: Type of the Applied Scope.
     * 
     * @param appliedScopeType the appliedScopeType value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withAppliedScopeType(AppliedScopeType appliedScopeType) {
        this.appliedScopeType = appliedScopeType;
        return this;
    }

    /**
     * Get the appliedScopeProperties property: Properties specific to applied scope type. Not required if not
     * applicable.
     * 
     * @return the appliedScopeProperties value.
     */
    public AppliedScopeProperties appliedScopeProperties() {
        return this.appliedScopeProperties;
    }

    /**
     * Set the appliedScopeProperties property: Properties specific to applied scope type. Not required if not
     * applicable.
     * 
     * @param appliedScopeProperties the appliedScopeProperties value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties
        withAppliedScopeProperties(AppliedScopeProperties appliedScopeProperties) {
        this.appliedScopeProperties = appliedScopeProperties;
        return this;
    }

    /**
     * Get the quantity property: Total Quantity of the SKUs purchased in the Reservation.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: Total Quantity of the SKUs purchased in the Reservation.
     * 
     * @param quantity the quantity value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the renew property: Setting this to true will automatically purchase a new benefit on the expiration date
     * time.
     * 
     * @return the renew value.
     */
    public Boolean renew() {
        return this.renew;
    }

    /**
     * Set the renew property: Setting this to true will automatically purchase a new benefit on the expiration date
     * time.
     * 
     * @param renew the renew value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withRenew(Boolean renew) {
        this.renew = renew;
        return this;
    }

    /**
     * Get the reservedResourceType property: The type of the resource that is being reserved.
     * 
     * @return the reservedResourceType value.
     */
    public ReservedResourceType reservedResourceType() {
        return this.reservedResourceType;
    }

    /**
     * Set the reservedResourceType property: The type of the resource that is being reserved.
     * 
     * @param reservedResourceType the reservedResourceType value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withReservedResourceType(ReservedResourceType reservedResourceType) {
        this.reservedResourceType = reservedResourceType;
        return this;
    }

    /**
     * Get the reviewDateTime property: This is the date-time when the Reservation needs to be reviewed.
     * 
     * @return the reviewDateTime value.
     */
    public OffsetDateTime reviewDateTime() {
        return this.reviewDateTime;
    }

    /**
     * Set the reviewDateTime property: This is the date-time when the Reservation needs to be reviewed.
     * 
     * @param reviewDateTime the reviewDateTime value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withReviewDateTime(OffsetDateTime reviewDateTime) {
        this.reviewDateTime = reviewDateTime;
        return this;
    }

    /**
     * Get the reservedResourceProperties property: Properties specific to each reserved resource type. Not required if
     * not applicable.
     * 
     * @return the reservedResourceProperties value.
     */
    public ReservationOrderAliasResponsePropertiesReservedResourceProperties reservedResourceProperties() {
        return this.reservedResourceProperties;
    }

    /**
     * Set the reservedResourceProperties property: Properties specific to each reserved resource type. Not required if
     * not applicable.
     * 
     * @param reservedResourceProperties the reservedResourceProperties value to set.
     * @return the ReservationOrderAliasResponseProperties object itself.
     */
    public ReservationOrderAliasResponseProperties withReservedResourceProperties(
        ReservationOrderAliasResponsePropertiesReservedResourceProperties reservedResourceProperties) {
        this.reservedResourceProperties = reservedResourceProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appliedScopeProperties() != null) {
            appliedScopeProperties().validate();
        }
        if (reservedResourceProperties() != null) {
            reservedResourceProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("billingScopeId", this.billingScopeId);
        jsonWriter.writeStringField("term", this.term == null ? null : this.term.toString());
        jsonWriter.writeStringField("billingPlan", this.billingPlan == null ? null : this.billingPlan.toString());
        jsonWriter.writeStringField("appliedScopeType",
            this.appliedScopeType == null ? null : this.appliedScopeType.toString());
        jsonWriter.writeJsonField("appliedScopeProperties", this.appliedScopeProperties);
        jsonWriter.writeNumberField("quantity", this.quantity);
        jsonWriter.writeBooleanField("renew", this.renew);
        jsonWriter.writeStringField("reservedResourceType",
            this.reservedResourceType == null ? null : this.reservedResourceType.toString());
        jsonWriter.writeStringField("reviewDateTime",
            this.reviewDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.reviewDateTime));
        jsonWriter.writeJsonField("reservedResourceProperties", this.reservedResourceProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationOrderAliasResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationOrderAliasResponseProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationOrderAliasResponseProperties.
     */
    public static ReservationOrderAliasResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationOrderAliasResponseProperties deserializedReservationOrderAliasResponseProperties
                = new ReservationOrderAliasResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.displayName = reader.getString();
                } else if ("reservationOrderId".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.reservationOrderId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("billingScopeId".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.billingScopeId = reader.getString();
                } else if ("term".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.term = Term.fromString(reader.getString());
                } else if ("billingPlan".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.billingPlan
                        = BillingPlan.fromString(reader.getString());
                } else if ("appliedScopeType".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.appliedScopeType
                        = AppliedScopeType.fromString(reader.getString());
                } else if ("appliedScopeProperties".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.appliedScopeProperties
                        = AppliedScopeProperties.fromJson(reader);
                } else if ("quantity".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.quantity
                        = reader.getNullable(JsonReader::getInt);
                } else if ("renew".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.renew
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("reservedResourceType".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.reservedResourceType
                        = ReservedResourceType.fromString(reader.getString());
                } else if ("reviewDateTime".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.reviewDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reservedResourceProperties".equals(fieldName)) {
                    deserializedReservationOrderAliasResponseProperties.reservedResourceProperties
                        = ReservationOrderAliasResponsePropertiesReservedResourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationOrderAliasResponseProperties;
        });
    }
}
