// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PricingCurrencyTotal model.
 */
@Fluent
public final class PricingCurrencyTotal extends Price {
    /*
     * Represents either billing plan or savings plan term in ISO 8601 format.
     */
    private PricingCurrencyDuration duration;

    /**
     * Creates an instance of PricingCurrencyTotal class.
     */
    public PricingCurrencyTotal() {
    }

    /**
     * Get the duration property: Represents either billing plan or savings plan term in ISO 8601 format.
     * 
     * @return the duration value.
     */
    public PricingCurrencyDuration duration() {
        return this.duration;
    }

    /**
     * Set the duration property: Represents either billing plan or savings plan term in ISO 8601 format.
     * 
     * @param duration the duration value to set.
     * @return the PricingCurrencyTotal object itself.
     */
    public PricingCurrencyTotal withDuration(PricingCurrencyDuration duration) {
        this.duration = duration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PricingCurrencyTotal withCurrencyCode(String currencyCode) {
        super.withCurrencyCode(currencyCode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PricingCurrencyTotal withAmount(Double amount) {
        super.withAmount(amount);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("currencyCode", currencyCode());
        jsonWriter.writeNumberField("amount", amount());
        jsonWriter.writeStringField("duration", this.duration == null ? null : this.duration.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PricingCurrencyTotal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PricingCurrencyTotal if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PricingCurrencyTotal.
     */
    public static PricingCurrencyTotal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PricingCurrencyTotal deserializedPricingCurrencyTotal = new PricingCurrencyTotal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("currencyCode".equals(fieldName)) {
                    deserializedPricingCurrencyTotal.withCurrencyCode(reader.getString());
                } else if ("amount".equals(fieldName)) {
                    deserializedPricingCurrencyTotal.withAmount(reader.getNullable(JsonReader::getDouble));
                } else if ("duration".equals(fieldName)) {
                    deserializedPricingCurrencyTotal.duration = PricingCurrencyDuration.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPricingCurrencyTotal;
        });
    }
}
