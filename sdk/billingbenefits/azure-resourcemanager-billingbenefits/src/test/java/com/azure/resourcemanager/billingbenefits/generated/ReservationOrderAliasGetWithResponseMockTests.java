// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billingbenefits.BillingBenefitsManager;
import com.azure.resourcemanager.billingbenefits.models.AppliedScopeType;
import com.azure.resourcemanager.billingbenefits.models.BillingPlan;
import com.azure.resourcemanager.billingbenefits.models.InstanceFlexibility;
import com.azure.resourcemanager.billingbenefits.models.ReservationOrderAliasResponse;
import com.azure.resourcemanager.billingbenefits.models.ReservedResourceType;
import com.azure.resourcemanager.billingbenefits.models.Term;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReservationOrderAliasGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"cjwvn\"},\"location\":\"ld\",\"properties\":{\"displayName\":\"xcxrsl\",\"reservationOrderId\":\"utwu\",\"provisioningState\":\"Cancelled\",\"billingScopeId\":\"pkhjwni\",\"term\":\"P5Y\",\"billingPlan\":\"P1M\",\"appliedScopeType\":\"ManagementGroup\",\"appliedScopeProperties\":{\"tenantId\":\"ggkzzlvmbmpa\",\"managementGroupId\":\"odfvuefywsbp\",\"subscriptionId\":\"mwyhr\",\"resourceGroupId\":\"uyfta\",\"displayName\":\"cpwi\"},\"quantity\":1777343462,\"renew\":true,\"reservedResourceType\":\"RedisCache\",\"reviewDateTime\":\"2021-09-22T09:26:58Z\",\"reservedResourceProperties\":{\"instanceFlexibility\":\"Off\"}},\"id\":\"zksmondj\",\"name\":\"quxvypomgkop\",\"type\":\"whojvp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingBenefitsManager manager = BillingBenefitsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ReservationOrderAliasResponse response = manager.reservationOrderAlias()
            .getWithResponse("hvoodsotbobzd", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cjwvn", response.sku().name());
        Assertions.assertEquals("ld", response.location());
        Assertions.assertEquals("xcxrsl", response.displayName());
        Assertions.assertEquals("pkhjwni", response.billingScopeId());
        Assertions.assertEquals(Term.P5Y, response.term());
        Assertions.assertEquals(BillingPlan.P1M, response.billingPlan());
        Assertions.assertEquals(AppliedScopeType.MANAGEMENT_GROUP, response.appliedScopeType());
        Assertions.assertEquals("ggkzzlvmbmpa", response.appliedScopeProperties().tenantId());
        Assertions.assertEquals("odfvuefywsbp", response.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("mwyhr", response.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("uyfta", response.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("cpwi", response.appliedScopeProperties().displayName());
        Assertions.assertEquals(1777343462, response.quantity());
        Assertions.assertEquals(true, response.renew());
        Assertions.assertEquals(ReservedResourceType.REDIS_CACHE, response.reservedResourceType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-22T09:26:58Z"), response.reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.OFF, response.reservedResourceProperties().instanceFlexibility());
    }
}
