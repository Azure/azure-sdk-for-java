// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billingbenefits.models.AppliedScopeProperties;
import com.azure.resourcemanager.billingbenefits.models.AppliedScopeType;
import com.azure.resourcemanager.billingbenefits.models.BillingPlan;
import com.azure.resourcemanager.billingbenefits.models.InstanceFlexibility;
import com.azure.resourcemanager.billingbenefits.models.ReservationOrderAliasRequest;
import com.azure.resourcemanager.billingbenefits.models.ReservationOrderAliasRequestPropertiesReservedResourceProperties;
import com.azure.resourcemanager.billingbenefits.models.ReservedResourceType;
import com.azure.resourcemanager.billingbenefits.models.Sku;
import com.azure.resourcemanager.billingbenefits.models.Term;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ReservationOrderAliasRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReservationOrderAliasRequest model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"rkcciwwzjuqk\"},\"location\":\"sa\",\"properties\":{\"displayName\":\"ku\",\"billingScopeId\":\"oskg\",\"term\":\"P5Y\",\"billingPlan\":\"P1M\",\"appliedScopeType\":\"Single\",\"appliedScopeProperties\":{\"tenantId\":\"vxieduugidyj\",\"managementGroupId\":\"f\",\"subscriptionId\":\"aos\",\"resourceGroupId\":\"xc\",\"displayName\":\"npc\"},\"quantity\":817727758,\"renew\":true,\"reservedResourceType\":\"RedHatOsa\",\"reviewDateTime\":\"2021-02-22T17:02:03Z\",\"reservedResourceProperties\":{\"instanceFlexibility\":\"On\"}},\"id\":\"ggzfbu\",\"name\":\"fmvfaxkffeiit\",\"type\":\"lvmezyvshxmzsbbz\"}")
            .toObject(ReservationOrderAliasRequest.class);
        Assertions.assertEquals("rkcciwwzjuqk", model.sku().name());
        Assertions.assertEquals("sa", model.location());
        Assertions.assertEquals("ku", model.displayName());
        Assertions.assertEquals("oskg", model.billingScopeId());
        Assertions.assertEquals(Term.P5Y, model.term());
        Assertions.assertEquals(BillingPlan.P1M, model.billingPlan());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.appliedScopeType());
        Assertions.assertEquals("vxieduugidyj", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("f", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("aos", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("xc", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("npc", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(817727758, model.quantity());
        Assertions.assertEquals(true, model.renew());
        Assertions.assertEquals(ReservedResourceType.RED_HAT_OSA, model.reservedResourceType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T17:02:03Z"), model.reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.ON, model.reservedResourceProperties().instanceFlexibility());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReservationOrderAliasRequest model
            = new ReservationOrderAliasRequest().withSku(new Sku().withName("rkcciwwzjuqk"))
                .withLocation("sa")
                .withDisplayName("ku")
                .withBillingScopeId("oskg")
                .withTerm(Term.P5Y)
                .withBillingPlan(BillingPlan.P1M)
                .withAppliedScopeType(AppliedScopeType.SINGLE)
                .withAppliedScopeProperties(new AppliedScopeProperties().withTenantId("vxieduugidyj")
                    .withManagementGroupId("f")
                    .withSubscriptionId("aos")
                    .withResourceGroupId("xc")
                    .withDisplayName("npc"))
                .withQuantity(817727758)
                .withRenew(true)
                .withReservedResourceType(ReservedResourceType.RED_HAT_OSA)
                .withReviewDateTime(OffsetDateTime.parse("2021-02-22T17:02:03Z"))
                .withReservedResourceProperties(new ReservationOrderAliasRequestPropertiesReservedResourceProperties()
                    .withInstanceFlexibility(InstanceFlexibility.ON));
        model = BinaryData.fromObject(model).toObject(ReservationOrderAliasRequest.class);
        Assertions.assertEquals("rkcciwwzjuqk", model.sku().name());
        Assertions.assertEquals("sa", model.location());
        Assertions.assertEquals("ku", model.displayName());
        Assertions.assertEquals("oskg", model.billingScopeId());
        Assertions.assertEquals(Term.P5Y, model.term());
        Assertions.assertEquals(BillingPlan.P1M, model.billingPlan());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.appliedScopeType());
        Assertions.assertEquals("vxieduugidyj", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("f", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("aos", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("xc", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("npc", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(817727758, model.quantity());
        Assertions.assertEquals(true, model.renew());
        Assertions.assertEquals(ReservedResourceType.RED_HAT_OSA, model.reservedResourceType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T17:02:03Z"), model.reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.ON, model.reservedResourceProperties().instanceFlexibility());
    }
}
