// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.generated;

import com.azure.core.util.Context;
import com.azure.resourcemanager.postgresqlhsc.models.MaintenanceWindow;
import com.azure.resourcemanager.postgresqlhsc.models.PostgreSqlVersion;
import com.azure.resourcemanager.postgresqlhsc.models.ServerEdition;
import com.azure.resourcemanager.postgresqlhsc.models.ServerGroup;
import com.azure.resourcemanager.postgresqlhsc.models.ServerRole;
import com.azure.resourcemanager.postgresqlhsc.models.ServerRoleGroup;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for ServerGroups Update. */
public final class ServerGroupsUpdateSamples {
    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleStorage.json
     */
    /**
     * Sample code: Scale storage.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void scaleStorage(com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        ServerGroup resource =
            manager.serverGroups().getByResourceGroupWithResponse("TestGroup", "hsctestsg", Context.NONE).getValue();
        resource
            .update()
            .withServerRoleGroups(
                Arrays
                    .asList(
                        new ServerRoleGroup().withStorageQuotaInMb(8388608L).withName("").withRole(ServerRole.WORKER)))
            .apply();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupAddNode.json
     */
    /**
     * Sample code: Add new worker nodes.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void addNewWorkerNodes(com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        ServerGroup resource =
            manager.serverGroups().getByResourceGroupWithResponse("TestGroup", "hsctestsg", Context.NONE).getValue();
        resource
            .update()
            .withServerRoleGroups(
                Arrays.asList(new ServerRoleGroup().withName("").withRole(ServerRole.WORKER).withServerCount(10)))
            .apply();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdateMaintenanceWindow.json
     */
    /**
     * Sample code: Update customer maintenance window.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void updateCustomerMaintenanceWindow(
        com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        ServerGroup resource =
            manager.serverGroups().getByResourceGroupWithResponse("TestGroup", "hsctestsg", Context.NONE).getValue();
        resource
            .update()
            .withMaintenanceWindow(
                new MaintenanceWindow()
                    .withCustomWindow("Enabled")
                    .withStartHour(8)
                    .withStartMinute(0)
                    .withDayOfWeek(0))
            .apply();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleCompute.json
     */
    /**
     * Sample code: Scale compute.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void scaleCompute(com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        ServerGroup resource =
            manager.serverGroups().getByResourceGroupWithResponse("TestGroup", "hsctestsg", Context.NONE).getValue();
        resource
            .update()
            .withServerRoleGroups(
                Arrays.asList(new ServerRoleGroup().withVCores(16L).withName("").withRole(ServerRole.COORDINATOR)))
            .apply();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdate.json
     */
    /**
     * Sample code: Update the server group.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void updateTheServerGroup(com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        ServerGroup resource =
            manager.serverGroups().getByResourceGroupWithResponse("TestGroup", "hsctestsg", Context.NONE).getValue();
        resource
            .update()
            .withTags(mapOf("ElasticServer", "2"))
            .withAdministratorLoginPassword("secret")
            .withBackupRetentionDays(30)
            .withPostgresqlVersion(PostgreSqlVersion.ONE_TWO)
            .withServerRoleGroups(
                Arrays
                    .asList(
                        new ServerRoleGroup()
                            .withServerEdition(ServerEdition.GENERAL_PURPOSE)
                            .withStorageQuotaInMb(1048576L)
                            .withVCores(8L)
                            .withEnableHa(false)
                            .withName("")
                            .withRole(ServerRole.COORDINATOR)
                            .withServerCount(1),
                        new ServerRoleGroup()
                            .withServerEdition(ServerEdition.MEMORY_OPTIMIZED)
                            .withStorageQuotaInMb(524288L)
                            .withVCores(4L)
                            .withEnableHa(true)
                            .withName("")
                            .withRole(ServerRole.WORKER)
                            .withServerCount(4)))
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
