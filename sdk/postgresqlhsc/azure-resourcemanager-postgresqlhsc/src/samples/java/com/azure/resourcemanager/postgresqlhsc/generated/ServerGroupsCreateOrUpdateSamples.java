// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.generated;

import com.azure.resourcemanager.postgresqlhsc.models.CitusVersion;
import com.azure.resourcemanager.postgresqlhsc.models.CreateMode;
import com.azure.resourcemanager.postgresqlhsc.models.PostgreSqlVersion;
import com.azure.resourcemanager.postgresqlhsc.models.ServerEdition;
import com.azure.resourcemanager.postgresqlhsc.models.ServerGroupPropertiesDelegatedSubnetArguments;
import com.azure.resourcemanager.postgresqlhsc.models.ServerGroupPropertiesPrivateDnsZoneArguments;
import com.azure.resourcemanager.postgresqlhsc.models.ServerRole;
import com.azure.resourcemanager.postgresqlhsc.models.ServerRoleGroup;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for ServerGroups CreateOrUpdate. */
public final class ServerGroupsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreateReadReplica.json
     */
    /**
     * Sample code: Create a new server group as a read replica.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void createANewServerGroupAsAReadReplica(
        com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        manager
            .serverGroups()
            .define("hsctestsg")
            .withRegion("westus")
            .withExistingResourceGroup("TestGroup")
            .withCreateMode(CreateMode.READ_REPLICA)
            .withSourceSubscriptionId("dddddddd-dddd-dddd-dddd-dddddddddddd")
            .withSourceResourceGroupName("SourceGroup")
            .withSourceServerGroupName("pgtests-source-server-group")
            .withSourceLocation("eastus")
            .create();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreate.json
     */
    /**
     * Sample code: Create a new server group.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void createANewServerGroup(com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        manager
            .serverGroups()
            .define("hsctestsg")
            .withRegion("westus")
            .withExistingResourceGroup("TestGroup")
            .withTags(mapOf("ElasticServer", "1"))
            .withAdministratorLogin("citus")
            .withAdministratorLoginPassword("password")
            .withBackupRetentionDays(35)
            .withPostgresqlVersion(PostgreSqlVersion.ONE_TWO)
            .withCitusVersion(CitusVersion.NINE_FIVE)
            .withEnableMx(true)
            .withEnableZfs(false)
            .withServerRoleGroups(
                Arrays
                    .asList(
                        new ServerRoleGroup()
                            .withServerEdition(ServerEdition.GENERAL_PURPOSE)
                            .withStorageQuotaInMb(524288L)
                            .withVCores(4L)
                            .withEnableHa(true)
                            .withName("")
                            .withRole(ServerRole.COORDINATOR)
                            .withServerCount(1),
                        new ServerRoleGroup()
                            .withServerEdition(ServerEdition.MEMORY_OPTIMIZED)
                            .withStorageQuotaInMb(524288L)
                            .withVCores(4L)
                            .withEnableHa(false)
                            .withName("")
                            .withRole(ServerRole.WORKER)
                            .withServerCount(3)))
            .withAvailabilityZone("1")
            .withStandbyAvailabilityZone("2")
            .withDelegatedSubnetArguments(
                new ServerGroupPropertiesDelegatedSubnetArguments()
                    .withSubnetArmResourceId(
                        "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"))
            .withPrivateDnsZoneArguments(
                new ServerGroupPropertiesPrivateDnsZoneArguments()
                    .withPrivateDnsZoneArmResourceId(
                        "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone"))
            .create();
    }

    /*
     * x-ms-original-file: specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreatePITR.json
     */
    /**
     * Sample code: Create a new server group as a point in time restore.
     *
     * @param manager Entry point to PostgresqlhscManager.
     */
    public static void createANewServerGroupAsAPointInTimeRestore(
        com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager) {
        manager
            .serverGroups()
            .define("hsctestsg")
            .withRegion("westus")
            .withExistingResourceGroup("TestGroup")
            .withCreateMode(CreateMode.POINT_IN_TIME_RESTORE)
            .withEnableMx(true)
            .withEnableZfs(false)
            .withSourceSubscriptionId("dddddddd-dddd-dddd-dddd-dddddddddddd")
            .withSourceResourceGroupName("SourceGroup")
            .withSourceServerGroupName("pgtests-source-server-group")
            .withSourceLocation("eastus")
            .withPointInTimeUtc(OffsetDateTime.parse("2017-12-14T00:00:37.467Z"))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
