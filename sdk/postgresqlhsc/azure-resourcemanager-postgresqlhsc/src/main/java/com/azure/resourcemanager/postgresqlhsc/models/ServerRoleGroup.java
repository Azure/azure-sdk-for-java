// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents a server role group. */
@Fluent
public final class ServerRoleGroup extends ServerProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerRoleGroup.class);

    /*
     * The name of the server role group.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The role of servers in the server role group.
     */
    @JsonProperty(value = "role")
    private ServerRole role;

    /*
     * The number of servers in the server role group.
     */
    @JsonProperty(value = "serverCount")
    private Integer serverCount;

    /*
     * The list of server names in the server role group.
     */
    @JsonProperty(value = "serverNames", access = JsonProperty.Access.WRITE_ONLY)
    private List<ServerNameItem> serverNames;

    /**
     * Get the name property: The name of the server role group.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the server role group.
     *
     * @param name the name value to set.
     * @return the ServerRoleGroup object itself.
     */
    public ServerRoleGroup withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the role property: The role of servers in the server role group.
     *
     * @return the role value.
     */
    public ServerRole role() {
        return this.role;
    }

    /**
     * Set the role property: The role of servers in the server role group.
     *
     * @param role the role value to set.
     * @return the ServerRoleGroup object itself.
     */
    public ServerRoleGroup withRole(ServerRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the serverCount property: The number of servers in the server role group.
     *
     * @return the serverCount value.
     */
    public Integer serverCount() {
        return this.serverCount;
    }

    /**
     * Set the serverCount property: The number of servers in the server role group.
     *
     * @param serverCount the serverCount value to set.
     * @return the ServerRoleGroup object itself.
     */
    public ServerRoleGroup withServerCount(Integer serverCount) {
        this.serverCount = serverCount;
        return this;
    }

    /**
     * Get the serverNames property: The list of server names in the server role group.
     *
     * @return the serverNames value.
     */
    public List<ServerNameItem> serverNames() {
        return this.serverNames;
    }

    /** {@inheritDoc} */
    @Override
    public ServerRoleGroup withServerEdition(ServerEdition serverEdition) {
        super.withServerEdition(serverEdition);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServerRoleGroup withStorageQuotaInMb(Long storageQuotaInMb) {
        super.withStorageQuotaInMb(storageQuotaInMb);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServerRoleGroup withVCores(Long vCores) {
        super.withVCores(vCores);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServerRoleGroup withEnableHa(Boolean enableHa) {
        super.withEnableHa(enableHa);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (serverNames() != null) {
            serverNames().forEach(e -> e.validate());
        }
    }
}
