// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.postgresqlhsc.fluent.ServersClient;
import com.azure.resourcemanager.postgresqlhsc.fluent.models.ServerGroupServerInner;
import com.azure.resourcemanager.postgresqlhsc.models.ServerGroupServerListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ServersClient. */
public final class ServersClientImpl implements ServersClient {
    private final ClientLogger logger = new ClientLogger(ServersClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ServersService service;

    /** The service client containing this operation class. */
    private final MicrosoftPostgreSqlHyperscaleImpl client;

    /**
     * Initializes an instance of ServersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ServersClientImpl(MicrosoftPostgreSqlHyperscaleImpl client) {
        this.service = RestProxy.create(ServersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftPostgreSqlHyperscaleServers to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftPostgreSqlH")
    private interface ServersService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql"
                + "/serverGroupsv2/{serverGroupName}/servers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerGroupServerListResult>> listByServerGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("serverGroupName") String serverGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql"
                + "/serverGroupsv2/{serverGroupName}/servers/{serverName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerGroupServerInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("serverGroupName") String serverGroupName,
            @PathParam("serverName") String serverName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists servers of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of servers in a server group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerGroupServerInner>> listByServerGroupSinglePageAsync(
        String resourceGroupName, String serverGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByServerGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            serverGroupName,
                            accept,
                            context))
            .<PagedResponse<ServerGroupServerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists servers of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of servers in a server group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerGroupServerInner>> listByServerGroupSinglePageAsync(
        String resourceGroupName, String serverGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByServerGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                serverGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null));
    }

    /**
     * Lists servers of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of servers in a server group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerGroupServerInner> listByServerGroupAsync(String resourceGroupName, String serverGroupName) {
        return new PagedFlux<>(() -> listByServerGroupSinglePageAsync(resourceGroupName, serverGroupName));
    }

    /**
     * Lists servers of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of servers in a server group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerGroupServerInner> listByServerGroupAsync(
        String resourceGroupName, String serverGroupName, Context context) {
        return new PagedFlux<>(() -> listByServerGroupSinglePageAsync(resourceGroupName, serverGroupName, context));
    }

    /**
     * Lists servers of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of servers in a server group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerGroupServerInner> listByServerGroup(String resourceGroupName, String serverGroupName) {
        return new PagedIterable<>(listByServerGroupAsync(resourceGroupName, serverGroupName));
    }

    /**
     * Lists servers of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of servers in a server group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerGroupServerInner> listByServerGroup(
        String resourceGroupName, String serverGroupName, Context context) {
        return new PagedIterable<>(listByServerGroupAsync(resourceGroupName, serverGroupName, context));
    }

    /**
     * Gets information about a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a server in server group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ServerGroupServerInner>> getWithResponseAsync(
        String resourceGroupName, String serverGroupName, String serverName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            serverGroupName,
                            serverName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a server in server group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ServerGroupServerInner>> getWithResponseAsync(
        String resourceGroupName, String serverGroupName, String serverName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                serverGroupName,
                serverName,
                accept,
                context);
    }

    /**
     * Gets information about a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a server in server group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerGroupServerInner> getAsync(String resourceGroupName, String serverGroupName, String serverName) {
        return getWithResponseAsync(resourceGroupName, serverGroupName, serverName)
            .flatMap(
                (Response<ServerGroupServerInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets information about a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a server in server group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerGroupServerInner get(String resourceGroupName, String serverGroupName, String serverName) {
        return getAsync(resourceGroupName, serverGroupName, serverName).block();
    }

    /**
     * Gets information about a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a server in server group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ServerGroupServerInner> getWithResponse(
        String resourceGroupName, String serverGroupName, String serverName, Context context) {
        return getWithResponseAsync(resourceGroupName, serverGroupName, serverName, context).block();
    }
}
