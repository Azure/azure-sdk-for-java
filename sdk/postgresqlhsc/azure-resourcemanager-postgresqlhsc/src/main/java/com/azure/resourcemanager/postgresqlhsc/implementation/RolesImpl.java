// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlhsc.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.postgresqlhsc.fluent.RolesClient;
import com.azure.resourcemanager.postgresqlhsc.fluent.models.RoleInner;
import com.azure.resourcemanager.postgresqlhsc.models.Role;
import com.azure.resourcemanager.postgresqlhsc.models.Roles;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RolesImpl implements Roles {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RolesImpl.class);

    private final RolesClient innerClient;

    private final com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager;

    public RolesImpl(
        RolesClient innerClient, com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String serverGroupName, String roleName) {
        this.serviceClient().delete(resourceGroupName, serverGroupName, roleName);
    }

    public void delete(String resourceGroupName, String serverGroupName, String roleName, Context context) {
        this.serviceClient().delete(resourceGroupName, serverGroupName, roleName, context);
    }

    public PagedIterable<Role> listByServerGroup(String resourceGroupName, String serverGroupName) {
        PagedIterable<RoleInner> inner = this.serviceClient().listByServerGroup(resourceGroupName, serverGroupName);
        return Utils.mapPage(inner, inner1 -> new RoleImpl(inner1, this.manager()));
    }

    public PagedIterable<Role> listByServerGroup(String resourceGroupName, String serverGroupName, Context context) {
        PagedIterable<RoleInner> inner =
            this.serviceClient().listByServerGroup(resourceGroupName, serverGroupName, context);
        return Utils.mapPage(inner, inner1 -> new RoleImpl(inner1, this.manager()));
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverGroupName = Utils.getValueFromIdByName(id, "serverGroupsv2");
        if (serverGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'serverGroupsv2'.", id)));
        }
        String roleName = Utils.getValueFromIdByName(id, "roles");
        if (roleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'roles'.", id)));
        }
        this.delete(resourceGroupName, serverGroupName, roleName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverGroupName = Utils.getValueFromIdByName(id, "serverGroupsv2");
        if (serverGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'serverGroupsv2'.", id)));
        }
        String roleName = Utils.getValueFromIdByName(id, "roles");
        if (roleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'roles'.", id)));
        }
        this.delete(resourceGroupName, serverGroupName, roleName, context);
    }

    private RolesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.postgresqlhsc.PostgresqlhscManager manager() {
        return this.serviceManager;
    }

    public RoleImpl define(String name) {
        return new RoleImpl(name, this.manager());
    }
}
