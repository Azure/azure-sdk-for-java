/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batchai.v2018_03_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specifies the settings for pyTorch job.
 */
public class PyTorchSettings {
    /**
     * The path and file name of the python script to execute the job.
     */
    @JsonProperty(value = "pythonScriptFilePath", required = true)
    private String pythonScriptFilePath;

    /**
     * The path to python interpreter.
     */
    @JsonProperty(value = "pythonInterpreterPath")
    private String pythonInterpreterPath;

    /**
     * Specifies the command line arguments for the master task.
     */
    @JsonProperty(value = "commandLineArgs")
    private String commandLineArgs;

    /**
     * Number of processes to launch for the job execution.
     * The default value for this property is equal to nodeCount property.
     */
    @JsonProperty(value = "processCount")
    private Integer processCount;

    /**
     * Type of the communication backend for distributed jobs.
     * Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for
     * non-distributed jobs.
     */
    @JsonProperty(value = "communicationBackend")
    private String communicationBackend;

    /**
     * Get the pythonScriptFilePath value.
     *
     * @return the pythonScriptFilePath value
     */
    public String pythonScriptFilePath() {
        return this.pythonScriptFilePath;
    }

    /**
     * Set the pythonScriptFilePath value.
     *
     * @param pythonScriptFilePath the pythonScriptFilePath value to set
     * @return the PyTorchSettings object itself.
     */
    public PyTorchSettings withPythonScriptFilePath(String pythonScriptFilePath) {
        this.pythonScriptFilePath = pythonScriptFilePath;
        return this;
    }

    /**
     * Get the pythonInterpreterPath value.
     *
     * @return the pythonInterpreterPath value
     */
    public String pythonInterpreterPath() {
        return this.pythonInterpreterPath;
    }

    /**
     * Set the pythonInterpreterPath value.
     *
     * @param pythonInterpreterPath the pythonInterpreterPath value to set
     * @return the PyTorchSettings object itself.
     */
    public PyTorchSettings withPythonInterpreterPath(String pythonInterpreterPath) {
        this.pythonInterpreterPath = pythonInterpreterPath;
        return this;
    }

    /**
     * Get the commandLineArgs value.
     *
     * @return the commandLineArgs value
     */
    public String commandLineArgs() {
        return this.commandLineArgs;
    }

    /**
     * Set the commandLineArgs value.
     *
     * @param commandLineArgs the commandLineArgs value to set
     * @return the PyTorchSettings object itself.
     */
    public PyTorchSettings withCommandLineArgs(String commandLineArgs) {
        this.commandLineArgs = commandLineArgs;
        return this;
    }

    /**
     * Get the default value for this property is equal to nodeCount property.
     *
     * @return the processCount value
     */
    public Integer processCount() {
        return this.processCount;
    }

    /**
     * Set the default value for this property is equal to nodeCount property.
     *
     * @param processCount the processCount value to set
     * @return the PyTorchSettings object itself.
     */
    public PyTorchSettings withProcessCount(Integer processCount) {
        this.processCount = processCount;
        return this;
    }

    /**
     * Get valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
     *
     * @return the communicationBackend value
     */
    public String communicationBackend() {
        return this.communicationBackend;
    }

    /**
     * Set valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
     *
     * @param communicationBackend the communicationBackend value to set
     * @return the PyTorchSettings object itself.
     */
    public PyTorchSettings withCommunicationBackend(String communicationBackend) {
        this.communicationBackend = communicationBackend;
        return this;
    }

}
