/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batchai.v2017_09_01_preview.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.batchai.v2017_09_01_preview.Operations;
import com.microsoft.azure.management.batchai.v2017_09_01_preview.Clusters;
import com.microsoft.azure.management.batchai.v2017_09_01_preview.Jobs;
import com.microsoft.azure.management.batchai.v2017_09_01_preview.FileServers;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure BatchAI resource management.
 */
public final class BatchAIManager extends ManagerCore<BatchAIManager, BatchAIManagementClientImpl> {
    private Operations operations;
    private Clusters clusters;
    private Jobs jobs;
    private FileServers fileServers;
    /**
    * Get a Configurable instance that can be used to create BatchAIManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new BatchAIManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of BatchAIManager that exposes BatchAI resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the BatchAIManager
    */
    public static BatchAIManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new BatchAIManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of BatchAIManager that exposes BatchAI resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the BatchAIManager
    */
    public static BatchAIManager authenticate(RestClient restClient, String subscriptionId) {
        return new BatchAIManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of BatchAIManager that exposes BatchAI management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing BatchAI management API entry points that work across subscriptions
        */
        BatchAIManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage Clusters.
     */
    public Clusters clusters() {
        if (this.clusters == null) {
            this.clusters = new ClustersImpl(this);
        }
        return this.clusters;
    }

    /**
     * @return Entry point to manage Jobs.
     */
    public Jobs jobs() {
        if (this.jobs == null) {
            this.jobs = new JobsImpl(this);
        }
        return this.jobs;
    }

    /**
     * @return Entry point to manage FileServers.
     */
    public FileServers fileServers() {
        if (this.fileServers == null) {
            this.fileServers = new FileServersImpl(this);
        }
        return this.fileServers;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public BatchAIManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return BatchAIManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private BatchAIManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new BatchAIManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
