/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batchai.v2017_09_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.batchai.v2017_09_01_preview.implementation.BatchAIManager;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.batchai.v2017_09_01_preview.implementation.ClusterInner;

/**
 * Type representing Cluster.
 */
public interface Cluster extends HasInner<ClusterInner>, Resource, GroupableResourceCore<BatchAIManager, ClusterInner>, HasResourceGroup, Refreshable<Cluster>, Updatable<Cluster.Update>, HasManager<BatchAIManager> {
    /**
     * @return the allocationState value.
     */
    AllocationState allocationState();

    /**
     * @return the allocationStateTransitionTime value.
     */
    DateTime allocationStateTransitionTime();

    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the currentNodeCount value.
     */
    Integer currentNodeCount();

    /**
     * @return the errors value.
     */
    List<BatchAIError> errors();

    /**
     * @return the nodeSetup value.
     */
    NodeSetup nodeSetup();

    /**
     * @return the nodeStateCounts value.
     */
    NodeStateCounts nodeStateCounts();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the provisioningStateTransitionTime value.
     */
    DateTime provisioningStateTransitionTime();

    /**
     * @return the scaleSettings value.
     */
    ScaleSettings scaleSettings();

    /**
     * @return the subnet value.
     */
    ResourceId subnet();

    /**
     * @return the userAccountSettings value.
     */
    UserAccountSettings userAccountSettings();

    /**
     * @return the virtualMachineConfiguration value.
     */
    VirtualMachineConfiguration virtualMachineConfiguration();

    /**
     * @return the vmPriority value.
     */
    VmPriority vmPriority();

    /**
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * The entirety of the Cluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithUserAccountSettings, DefinitionStages.WithVmSize, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Cluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Cluster definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Cluster definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithUserAccountSettings> {
        }

        /**
         * The stage of the cluster definition allowing to specify UserAccountSettings.
         */
        interface WithUserAccountSettings {
           /**
            * Specifies userAccountSettings.
            * @param userAccountSettings the userAccountSettings parameter value
            * @return the next definition stage
*/
            WithVmSize withUserAccountSettings(UserAccountSettings userAccountSettings);
        }

        /**
         * The stage of the cluster definition allowing to specify VmSize.
         */
        interface WithVmSize {
           /**
            * Specifies vmSize.
            * @param vmSize All virtual machines in a cluster are the same size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)
            * @return the next definition stage
*/
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the cluster definition allowing to specify NodeSetup.
         */
        interface WithNodeSetup {
            /**
             * Specifies nodeSetup.
             * @param nodeSetup the nodeSetup parameter value
             * @return the next definition stage
             */
            WithCreate withNodeSetup(NodeSetup nodeSetup);
        }

        /**
         * The stage of the cluster definition allowing to specify ScaleSettings.
         */
        interface WithScaleSettings {
            /**
             * Specifies scaleSettings.
             * @param scaleSettings the scaleSettings parameter value
             * @return the next definition stage
             */
            WithCreate withScaleSettings(ScaleSettings scaleSettings);
        }

        /**
         * The stage of the cluster definition allowing to specify Subnet.
         */
        interface WithSubnet {
            /**
             * Specifies subnet.
             * @param subnet the subnet parameter value
             * @return the next definition stage
             */
            WithCreate withSubnet(ResourceId subnet);
        }

        /**
         * The stage of the cluster definition allowing to specify VirtualMachineConfiguration.
         */
        interface WithVirtualMachineConfiguration {
            /**
             * Specifies virtualMachineConfiguration.
             * @param virtualMachineConfiguration the virtualMachineConfiguration parameter value
             * @return the next definition stage
             */
            WithCreate withVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration);
        }

        /**
         * The stage of the cluster definition allowing to specify VmPriority.
         */
        interface WithVmPriority {
            /**
             * Specifies vmPriority.
             * @param vmPriority Default is dedicated. Possible values include: 'dedicated', 'lowpriority'
             * @return the next definition stage
             */
            WithCreate withVmPriority(VmPriority vmPriority);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Cluster>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithNodeSetup, DefinitionStages.WithScaleSettings, DefinitionStages.WithSubnet, DefinitionStages.WithVirtualMachineConfiguration, DefinitionStages.WithVmPriority {
        }
    }
    /**
     * The template for a Cluster update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Cluster>, Resource.UpdateWithTags<Update>, UpdateStages.WithScaleSettings {
    }

    /**
     * Grouping of Cluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the cluster update allowing to specify ScaleSettings.
         */
        interface WithScaleSettings {
            /**
             * Specifies scaleSettings.
             * @param scaleSettings the scaleSettings parameter value
             * @return the next update stage
             */
            Update withScaleSettings(ScaleSettings scaleSettings);
        }

    }
}
