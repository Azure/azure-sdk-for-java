/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batchai.v2018_05_01.implementation;

import com.microsoft.azure.management.batchai.v2018_05_01.FileServer;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.batchai.v2018_05_01.FileServerCreateParameters;
import org.joda.time.DateTime;
import com.microsoft.azure.management.batchai.v2018_05_01.DataDisks;
import com.microsoft.azure.management.batchai.v2018_05_01.MountSettings;
import com.microsoft.azure.management.batchai.v2018_05_01.FileServerProvisioningState;
import com.microsoft.azure.management.batchai.v2018_05_01.SshConfiguration;
import com.microsoft.azure.management.batchai.v2018_05_01.ResourceId;
import rx.functions.Func1;

class FileServerImpl extends CreatableUpdatableImpl<FileServer, FileServerInner, FileServerImpl> implements FileServer, FileServer.Definition, FileServer.Update {
    private final BatchAIManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String fileServerName;
    private FileServerCreateParameters createOrUpdateParameter;

    FileServerImpl(String name, BatchAIManager manager) {
        super(name, new FileServerInner());
        this.manager = manager;
        // Set resource name
        this.fileServerName = name;
        //
        this.createOrUpdateParameter = new FileServerCreateParameters();
    }

    FileServerImpl(FileServerInner inner, BatchAIManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.fileServerName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.fileServerName = IdParsingUtils.getValueFromIdByName(inner.id(), "fileServers");
        //
        this.createOrUpdateParameter = new FileServerCreateParameters();
    }

    @Override
    public BatchAIManager manager() {
        return this.manager;
    }

    @Override
    public Observable<FileServer> createResourceAsync() {
        FileServersInner client = this.manager().inner().fileServers();
        return client.createAsync(this.resourceGroupName, this.workspaceName, this.fileServerName, this.createOrUpdateParameter)
            .map(new Func1<FileServerInner, FileServerInner>() {
               @Override
               public FileServerInner call(FileServerInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<FileServer> updateResourceAsync() {
        FileServersInner client = this.manager().inner().fileServers();
        return client.createAsync(this.resourceGroupName, this.workspaceName, this.fileServerName, this.createOrUpdateParameter)
            .map(new Func1<FileServerInner, FileServerInner>() {
               @Override
               public FileServerInner call(FileServerInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<FileServerInner> getInnerAsync() {
        FileServersInner client = this.manager().inner().fileServers();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.fileServerName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new FileServerCreateParameters();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public DataDisks dataDisks() {
        return this.inner().dataDisks();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public MountSettings mountSettings() {
        return this.inner().mountSettings();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public FileServerProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public DateTime provisioningStateTransitionTime() {
        return this.inner().provisioningStateTransitionTime();
    }

    @Override
    public SshConfiguration sshConfiguration() {
        return this.inner().sshConfiguration();
    }

    @Override
    public ResourceId subnet() {
        return this.inner().subnet();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String vmSize() {
        return this.inner().vmSize();
    }

    @Override
    public FileServerImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    @Override
    public FileServerImpl withDataDisks(DataDisks dataDisks) {
        this.createOrUpdateParameter.withDataDisks(dataDisks);
        return this;
    }

    @Override
    public FileServerImpl withSshConfiguration(SshConfiguration sshConfiguration) {
        this.createOrUpdateParameter.withSshConfiguration(sshConfiguration);
        return this;
    }

    @Override
    public FileServerImpl withVmSize(String vmSize) {
        this.createOrUpdateParameter.withVmSize(vmSize);
        return this;
    }

    @Override
    public FileServerImpl withSubnet(ResourceId subnet) {
        this.createOrUpdateParameter.withSubnet(subnet);
        return this;
    }

}
