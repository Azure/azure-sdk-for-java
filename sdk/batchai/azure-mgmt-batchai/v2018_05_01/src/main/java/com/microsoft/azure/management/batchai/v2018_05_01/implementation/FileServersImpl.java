/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.batchai.v2018_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.batchai.v2018_05_01.FileServers;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.batchai.v2018_05_01.FileServer;

class FileServersImpl extends WrapperImpl<FileServersInner> implements FileServers {
    private final BatchAIManager manager;

    FileServersImpl(BatchAIManager manager) {
        super(manager.inner().fileServers());
        this.manager = manager;
    }

    public BatchAIManager manager() {
        return this.manager;
    }

    @Override
    public FileServerImpl define(String name) {
        return wrapModel(name);
    }

    private FileServerImpl wrapModel(FileServerInner inner) {
        return  new FileServerImpl(inner, manager());
    }

    private FileServerImpl wrapModel(String name) {
        return new FileServerImpl(name, this.manager());
    }

    @Override
    public Observable<FileServer> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName) {
        FileServersInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMapIterable(new Func1<Page<FileServerInner>, Iterable<FileServerInner>>() {
            @Override
            public Iterable<FileServerInner> call(Page<FileServerInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FileServerInner, FileServer>() {
            @Override
            public FileServer call(FileServerInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<FileServer> getAsync(String resourceGroupName, String workspaceName, String fileServerName) {
        FileServersInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, fileServerName)
        .map(new Func1<FileServerInner, FileServer>() {
            @Override
            public FileServer call(FileServerInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String fileServerName) {
        FileServersInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, fileServerName).toCompletable();
    }

}
