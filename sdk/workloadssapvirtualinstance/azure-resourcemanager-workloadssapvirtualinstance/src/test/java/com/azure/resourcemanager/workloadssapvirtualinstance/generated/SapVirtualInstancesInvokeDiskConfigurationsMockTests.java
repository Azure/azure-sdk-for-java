// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSkuName;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDatabaseType;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDeploymentType;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfigurationsRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfigurationsResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapEnvironmentType;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapProductType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SapVirtualInstancesInvokeDiskConfigurationsMockTests {
    @Test
    public void testInvokeDiskConfigurationsWithResponse() throws Exception {
        String responseStr
            = "{\"volumeConfigurations\":{\"tmdvypgikdgs\":{\"recommendedConfiguration\":{\"count\":785524711548722896,\"sizeGB\":7407196234438308565,\"sku\":{\"name\":\"Premium_ZRS\"}},\"supportedConfigurations\":[{\"sku\":{},\"sizeGB\":8675435699341057313,\"minimumSupportedDiskCount\":5076002706235027340,\"maximumSupportedDiskCount\":4327238325462389804,\"iopsReadWrite\":2375775335459055266,\"mbpsReadWrite\":8033941183121511931,\"diskTier\":\"gxedkow\"},{\"sku\":{},\"sizeGB\":5074641707512401409,\"minimumSupportedDiskCount\":8802280890027613046,\"maximumSupportedDiskCount\":8386884670086176875,\"iopsReadWrite\":9039908149169573292,\"mbpsReadWrite\":4047365707392656751,\"diskTier\":\"dw\"},{\"sku\":{},\"sizeGB\":2835133550919993149,\"minimumSupportedDiskCount\":7896878092355879254,\"maximumSupportedDiskCount\":3605355194210234889,\"iopsReadWrite\":3519470178146937835,\"mbpsReadWrite\":362076039986657077,\"diskTier\":\"wfqatmtd\"}]}}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadsSapVirtualInstanceManager manager = WorkloadsSapVirtualInstanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SapDiskConfigurationsResult response = manager.sapVirtualInstances()
            .invokeDiskConfigurationsWithResponse("fhwygzlvdnkfxus",
                new SapDiskConfigurationsRequest().withAppLocation("mdwzrmuhapfcqdps")
                    .withEnvironment(SapEnvironmentType.NON_PROD)
                    .withSapProduct(SapProductType.S4HANA)
                    .withDatabaseType(SapDatabaseType.DB2)
                    .withDeploymentType(SapDeploymentType.THREE_TIER)
                    .withDbVmSku("svuo"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(785524711548722896L,
            response.volumeConfigurations().get("tmdvypgikdgs").recommendedConfiguration().count());
        Assertions.assertEquals(7407196234438308565L,
            response.volumeConfigurations().get("tmdvypgikdgs").recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.PREMIUM_ZRS,
            response.volumeConfigurations().get("tmdvypgikdgs").recommendedConfiguration().sku().name());
        Assertions.assertEquals(8675435699341057313L,
            response.volumeConfigurations().get("tmdvypgikdgs").supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(5076002706235027340L,
            response.volumeConfigurations()
                .get("tmdvypgikdgs")
                .supportedConfigurations()
                .get(0)
                .minimumSupportedDiskCount());
        Assertions.assertEquals(4327238325462389804L,
            response.volumeConfigurations()
                .get("tmdvypgikdgs")
                .supportedConfigurations()
                .get(0)
                .maximumSupportedDiskCount());
        Assertions.assertEquals(2375775335459055266L,
            response.volumeConfigurations().get("tmdvypgikdgs").supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(8033941183121511931L,
            response.volumeConfigurations().get("tmdvypgikdgs").supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("gxedkow",
            response.volumeConfigurations().get("tmdvypgikdgs").supportedConfigurations().get(0).diskTier());
    }
}
