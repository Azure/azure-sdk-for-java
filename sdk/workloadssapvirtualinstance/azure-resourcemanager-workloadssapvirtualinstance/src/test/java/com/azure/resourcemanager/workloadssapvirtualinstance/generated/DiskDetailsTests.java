// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskDetails;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSku;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSkuName;
import org.junit.jupiter.api.Assertions;

public final class DiskDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskDetails model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"StandardSSD_ZRS\"},\"sizeGB\":7655054782448841652,\"minimumSupportedDiskCount\":1270602397466940950,\"maximumSupportedDiskCount\":6969998015103392710,\"iopsReadWrite\":3562341719442439228,\"mbpsReadWrite\":7388479766741189073,\"diskTier\":\"tu\"}")
            .toObject(DiskDetails.class);
        Assertions.assertEquals(DiskSkuName.STANDARD_SSD_ZRS, model.sku().name());
        Assertions.assertEquals(7655054782448841652L, model.sizeGB());
        Assertions.assertEquals(1270602397466940950L, model.minimumSupportedDiskCount());
        Assertions.assertEquals(6969998015103392710L, model.maximumSupportedDiskCount());
        Assertions.assertEquals(3562341719442439228L, model.iopsReadWrite());
        Assertions.assertEquals(7388479766741189073L, model.mbpsReadWrite());
        Assertions.assertEquals("tu", model.diskTier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskDetails model = new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.STANDARD_SSD_ZRS))
            .withSizeGB(7655054782448841652L)
            .withMinimumSupportedDiskCount(1270602397466940950L)
            .withMaximumSupportedDiskCount(6969998015103392710L)
            .withIopsReadWrite(3562341719442439228L)
            .withMbpsReadWrite(7388479766741189073L)
            .withDiskTier("tu");
        model = BinaryData.fromObject(model).toObject(DiskDetails.class);
        Assertions.assertEquals(DiskSkuName.STANDARD_SSD_ZRS, model.sku().name());
        Assertions.assertEquals(7655054782448841652L, model.sizeGB());
        Assertions.assertEquals(1270602397466940950L, model.minimumSupportedDiskCount());
        Assertions.assertEquals(6969998015103392710L, model.maximumSupportedDiskCount());
        Assertions.assertEquals(3562341719442439228L, model.iopsReadWrite());
        Assertions.assertEquals(7388479766741189073L, model.mbpsReadWrite());
        Assertions.assertEquals("tu", model.diskTier());
    }
}
