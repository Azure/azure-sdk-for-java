// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.ApplicationServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"hbttkphyw\",\"hostName\":\"vjtoqnermclfp\",\"networkInterfaces\":[{\"networkInterfaceName\":\"xus\"},{\"networkInterfaceName\":\"pabgyeps\"}],\"osDiskName\":\"tazqugxywpmueefj\",\"dataDiskNames\":{\"g\":[\"kqujidsuyono\",\"glaocq\",\"tcc\"],\"rqjbhckfrl\":[\"dxyt\",\"moyrxvwfudwpz\",\"txhdzh\"]}}],\"availabilitySetName\":\"xsbkyvpyca\"}")
            .toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("hbttkphyw", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("vjtoqnermclfp", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("xus",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("tazqugxywpmueefj", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("kqujidsuyono", model.virtualMachines().get(0).dataDiskNames().get("g").get(0));
        Assertions.assertEquals("xsbkyvpyca", model.availabilitySetName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationServerFullResourceNames model
            = new ApplicationServerFullResourceNames()
                .withVirtualMachines(
                    Arrays
                        .asList(new VirtualMachineResourceNames().withVmName("hbttkphyw")
                            .withHostName("vjtoqnermclfp")
                            .withNetworkInterfaces(
                                Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("xus"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("pabgyeps")))
                            .withOsDiskName("tazqugxywpmueefj")
                            .withDataDiskNames(mapOf("g", Arrays.asList("kqujidsuyono", "glaocq", "tcc"), "rqjbhckfrl",
                                Arrays.asList("dxyt", "moyrxvwfudwpz", "txhdzh")))))
                .withAvailabilitySetName("xsbkyvpyca");
        model = BinaryData.fromObject(model).toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("hbttkphyw", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("vjtoqnermclfp", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("xus",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("tazqugxywpmueefj", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("kqujidsuyono", model.virtualMachines().get(0).dataDiskNames().get("g").get(0));
        Assertions.assertEquals("xsbkyvpyca", model.availabilitySetName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
