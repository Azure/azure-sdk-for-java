// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.ApplicationServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"xhniskxfbkpycgk\",\"hostName\":\"ndnhj\",\"networkInterfaces\":[{\"networkInterfaceName\":\"hvylwzbt\"},{\"networkInterfaceName\":\"xujznbmpowu\"},{\"networkInterfaceName\":\"rzqlveu\"},{\"networkInterfaceName\":\"upjm\"}],\"osDiskName\":\"fxobbcsws\",\"dataDiskNames\":{\"gibtnm\":[\"iplrbpbewtghfgb\",\"c\",\"wxzvlvqhjkb\"],\"wxqpsrknftguvri\":[\"ebwwaloayqc\",\"wrtz\",\"uzgwyzmhtx\",\"ngmtsavjcb\"],\"xrmcqibycnojvk\":[\"prwmdyvxqt\",\"yriwwroyqb\"],\"vawjvzunlu\":[\"e\",\"qsgzvahapj\",\"zhpvgqzcjrvxd\",\"zlmwlxkvugfhz\"]}},{\"vmName\":\"nnprn\",\"hostName\":\"peilpjzuaejxdu\",\"networkInterfaces\":[{\"networkInterfaceName\":\"zbbtdzumveek\"},{\"networkInterfaceName\":\"wozuhkf\"}],\"osDiskName\":\"sjyofdx\",\"dataDiskNames\":{\"smv\":[\"dttouwaboekqvkel\"]}}],\"availabilitySetName\":\"wyjsflhhcaalnjix\"}")
            .toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("xhniskxfbkpycgk", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("ndnhj", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("hvylwzbt",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("fxobbcsws", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("iplrbpbewtghfgb", model.virtualMachines().get(0).dataDiskNames().get("gibtnm").get(0));
        Assertions.assertEquals("wyjsflhhcaalnjix", model.availabilitySetName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationServerFullResourceNames model
            = new ApplicationServerFullResourceNames()
                .withVirtualMachines(
                    Arrays.asList(
                        new VirtualMachineResourceNames().withVmName("xhniskxfbkpycgk")
                            .withHostname("ndnhj")
                            .withNetworkInterfaces(
                                Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("hvylwzbt"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("xujznbmpowu"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("rzqlveu"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("upjm")))
                            .withOsDiskName("fxobbcsws")
                            .withDataDiskNames(mapOf("gibtnm", Arrays.asList("iplrbpbewtghfgb", "c", "wxzvlvqhjkb"),
                                "wxqpsrknftguvri", Arrays.asList("ebwwaloayqc", "wrtz", "uzgwyzmhtx", "ngmtsavjcb"),
                                "xrmcqibycnojvk", Arrays.asList("prwmdyvxqt", "yriwwroyqb"), "vawjvzunlu",
                                Arrays.asList("e", "qsgzvahapj", "zhpvgqzcjrvxd", "zlmwlxkvugfhz"))),
                        new VirtualMachineResourceNames().withVmName("nnprn")
                            .withHostname("peilpjzuaejxdu")
                            .withNetworkInterfaces(Arrays.asList(
                                new NetworkInterfaceResourceNames().withNetworkInterfaceName("zbbtdzumveek"),
                                new NetworkInterfaceResourceNames().withNetworkInterfaceName("wozuhkf")))
                            .withOsDiskName("sjyofdx")
                            .withDataDiskNames(mapOf("smv", Arrays.asList("dttouwaboekqvkel")))))
                .withAvailabilitySetName("wyjsflhhcaalnjix");
        model = BinaryData.fromObject(model).toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("xhniskxfbkpycgk", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("ndnhj", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("hvylwzbt",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("fxobbcsws", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("iplrbpbewtghfgb", model.virtualMachines().get(0).dataDiskNames().get("gibtnm").get(0));
        Assertions.assertEquals("wyjsflhhcaalnjix", model.availabilitySetName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
