// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.ApplicationServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"utrc\",\"hostName\":\"na\",\"networkInterfaces\":[{\"networkInterfaceName\":\"jrunmpxtt\"},{\"networkInterfaceName\":\"hrbnlankxmyskpbh\"},{\"networkInterfaceName\":\"btkcxywnytnrsyn\"},{\"networkInterfaceName\":\"idybyxczf\"}],\"osDiskName\":\"haaxdbabphl\",\"dataDiskNames\":{\"nyyazttbtwwrqpue\":[\"fkts\",\"hsucoc\"],\"qwalmuzyoxaepd\":[\"kzywbiex\",\"fey\",\"eaxib\",\"ujwb\"],\"jswztsdbpg\":[\"jancu\",\"rhdwbavxbniw\"]}}],\"availabilitySetName\":\"ytxhp\"}")
            .toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("utrc", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("na", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("jrunmpxtt",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("haaxdbabphl", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("fkts", model.virtualMachines().get(0).dataDiskNames().get("nyyazttbtwwrqpue").get(0));
        Assertions.assertEquals("ytxhp", model.availabilitySetName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationServerFullResourceNames model
            = new ApplicationServerFullResourceNames()
                .withVirtualMachines(
                    Arrays
                        .asList(
                            new VirtualMachineResourceNames().withVmName("utrc")
                                .withHostName("na")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("jrunmpxtt"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("hrbnlankxmyskpbh"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("btkcxywnytnrsyn"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("idybyxczf")))
                                .withOsDiskName("haaxdbabphl")
                                .withDataDiskNames(mapOf("nyyazttbtwwrqpue", Arrays.asList("fkts", "hsucoc"),
                                    "qwalmuzyoxaepd", Arrays.asList("kzywbiex", "fey", "eaxib", "ujwb"), "jswztsdbpg",
                                    Arrays.asList("jancu", "rhdwbavxbniw")))))
                .withAvailabilitySetName("ytxhp");
        model = BinaryData.fromObject(model).toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("utrc", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("na", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("jrunmpxtt",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("haaxdbabphl", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("fkts", model.virtualMachines().get(0).dataDiskNames().get("nyyazttbtwwrqpue").get(0));
        Assertions.assertEquals("ytxhp", model.availabilitySetName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
