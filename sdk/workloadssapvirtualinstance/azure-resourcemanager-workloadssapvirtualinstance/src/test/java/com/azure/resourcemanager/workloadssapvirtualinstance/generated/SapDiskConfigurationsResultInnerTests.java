// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapDiskConfigurationsResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskDetails;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSku;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSkuName;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskVolumeConfiguration;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapDiskConfigurationsResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapDiskConfigurationsResultInner model = BinaryData.fromString(
            "{\"volumeConfigurations\":{\"btcqq\":{\"recommendedConfiguration\":{\"count\":7736151544221720702,\"sizeGB\":4280956441582620229,\"sku\":{\"name\":\"UltraSSD_LRS\"}},\"supportedConfigurations\":[{\"sku\":{\"name\":\"StandardSSD_LRS\"},\"sizeGB\":20493833557789223,\"minimumSupportedDiskCount\":720868683195544113,\"maximumSupportedDiskCount\":6184334798486509461,\"iopsReadWrite\":6483131069666113769,\"mbpsReadWrite\":992448233232938324,\"diskTier\":\"bpazlobcufpdzn\"}]},\"f\":{\"recommendedConfiguration\":{\"count\":4769385499542162193,\"sizeGB\":3151069189097095004,\"sku\":{\"name\":\"PremiumV2_LRS\"}},\"supportedConfigurations\":[{\"sku\":{\"name\":\"Standard_LRS\"},\"sizeGB\":4639857503275168137,\"minimumSupportedDiskCount\":2616088513476383289,\"maximumSupportedDiskCount\":7306204410731777268,\"iopsReadWrite\":1922912336542709926,\"mbpsReadWrite\":7192314906891689336,\"diskTier\":\"lhjxr\"}]}}}")
            .toObject(SapDiskConfigurationsResultInner.class);
        Assertions.assertEquals(7736151544221720702L,
            model.volumeConfigurations().get("btcqq").recommendedConfiguration().count());
        Assertions.assertEquals(4280956441582620229L,
            model.volumeConfigurations().get("btcqq").recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.ULTRA_SSD_LRS,
            model.volumeConfigurations().get("btcqq").recommendedConfiguration().sku().name());
        Assertions.assertEquals(DiskSkuName.STANDARD_SSD_LRS,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).sku().name());
        Assertions.assertEquals(20493833557789223L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(720868683195544113L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).minimumSupportedDiskCount());
        Assertions.assertEquals(6184334798486509461L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).maximumSupportedDiskCount());
        Assertions.assertEquals(6483131069666113769L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(992448233232938324L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("bpazlobcufpdzn",
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).diskTier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapDiskConfigurationsResultInner model
            = new SapDiskConfigurationsResultInner().withVolumeConfigurations(mapOf("btcqq",
                new SapDiskConfiguration()
                    .withRecommendedConfiguration(new DiskVolumeConfiguration().withCount(7736151544221720702L)
                        .withSizeGB(4280956441582620229L)
                        .withSku(new DiskSku().withName(DiskSkuName.ULTRA_SSD_LRS)))
                    .withSupportedConfigurations(
                        Arrays.asList(new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.STANDARD_SSD_LRS))
                            .withSizeGB(20493833557789223L)
                            .withMinimumSupportedDiskCount(720868683195544113L)
                            .withMaximumSupportedDiskCount(6184334798486509461L)
                            .withIopsReadWrite(6483131069666113769L)
                            .withMbpsReadWrite(992448233232938324L)
                            .withDiskTier("bpazlobcufpdzn"))),
                "f",
                new SapDiskConfiguration()
                    .withRecommendedConfiguration(new DiskVolumeConfiguration().withCount(4769385499542162193L)
                        .withSizeGB(3151069189097095004L)
                        .withSku(new DiskSku().withName(DiskSkuName.PREMIUM_V2_LRS)))
                    .withSupportedConfigurations(
                        Arrays.asList(new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.STANDARD_LRS))
                            .withSizeGB(4639857503275168137L)
                            .withMinimumSupportedDiskCount(2616088513476383289L)
                            .withMaximumSupportedDiskCount(7306204410731777268L)
                            .withIopsReadWrite(1922912336542709926L)
                            .withMbpsReadWrite(7192314906891689336L)
                            .withDiskTier("lhjxr")))));
        model = BinaryData.fromObject(model).toObject(SapDiskConfigurationsResultInner.class);
        Assertions.assertEquals(7736151544221720702L,
            model.volumeConfigurations().get("btcqq").recommendedConfiguration().count());
        Assertions.assertEquals(4280956441582620229L,
            model.volumeConfigurations().get("btcqq").recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.ULTRA_SSD_LRS,
            model.volumeConfigurations().get("btcqq").recommendedConfiguration().sku().name());
        Assertions.assertEquals(DiskSkuName.STANDARD_SSD_LRS,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).sku().name());
        Assertions.assertEquals(20493833557789223L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(720868683195544113L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).minimumSupportedDiskCount());
        Assertions.assertEquals(6184334798486509461L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).maximumSupportedDiskCount());
        Assertions.assertEquals(6483131069666113769L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(992448233232938324L,
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("bpazlobcufpdzn",
            model.volumeConfigurations().get("btcqq").supportedConfigurations().get(0).diskTier());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
