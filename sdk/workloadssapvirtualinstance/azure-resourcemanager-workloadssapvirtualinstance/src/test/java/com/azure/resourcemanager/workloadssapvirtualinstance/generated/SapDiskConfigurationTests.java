// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskDetails;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSku;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSkuName;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskVolumeConfiguration;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SapDiskConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapDiskConfiguration model = BinaryData.fromString(
            "{\"recommendedConfiguration\":{\"count\":6421947061498150983,\"sizeGB\":6890840342903312019,\"sku\":{\"name\":\"Standard_LRS\"}},\"supportedConfigurations\":[{\"sku\":{\"name\":\"Premium_ZRS\"},\"sizeGB\":6126446614006072505,\"minimumSupportedDiskCount\":3525728051657376574,\"maximumSupportedDiskCount\":6283812381833889592,\"iopsReadWrite\":6505103417183468045,\"mbpsReadWrite\":2130961958634360268,\"diskTier\":\"kfo\"},{\"sku\":{\"name\":\"Standard_LRS\"},\"sizeGB\":4894427393547205979,\"minimumSupportedDiskCount\":7184832566228979398,\"maximumSupportedDiskCount\":8620711774108455397,\"iopsReadWrite\":2115374097438254062,\"mbpsReadWrite\":5606993477274811025,\"diskTier\":\"wnw\"},{\"sku\":{\"name\":\"Premium_LRS\"},\"sizeGB\":2534987154024922406,\"minimumSupportedDiskCount\":6545894172823535543,\"maximumSupportedDiskCount\":3686137269539867377,\"iopsReadWrite\":5128252551550278404,\"mbpsReadWrite\":5048423606513513533,\"diskTier\":\"smy\"},{\"sku\":{\"name\":\"Premium_ZRS\"},\"sizeGB\":8158709168465986380,\"minimumSupportedDiskCount\":1801059877260196266,\"maximumSupportedDiskCount\":4186832634002979532,\"iopsReadWrite\":8364289038127439850,\"mbpsReadWrite\":8520799989899984961,\"diskTier\":\"dmpa\"}]}")
            .toObject(SapDiskConfiguration.class);
        Assertions.assertEquals(6421947061498150983L, model.recommendedConfiguration().count());
        Assertions.assertEquals(6890840342903312019L, model.recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.STANDARD_LRS, model.recommendedConfiguration().sku().name());
        Assertions.assertEquals(DiskSkuName.PREMIUM_ZRS, model.supportedConfigurations().get(0).sku().name());
        Assertions.assertEquals(6126446614006072505L, model.supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(3525728051657376574L,
            model.supportedConfigurations().get(0).minimumSupportedDiskCount());
        Assertions.assertEquals(6283812381833889592L,
            model.supportedConfigurations().get(0).maximumSupportedDiskCount());
        Assertions.assertEquals(6505103417183468045L, model.supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(2130961958634360268L, model.supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("kfo", model.supportedConfigurations().get(0).diskTier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapDiskConfiguration model = new SapDiskConfiguration()
            .withRecommendedConfiguration(new DiskVolumeConfiguration().withCount(6421947061498150983L)
                .withSizeGB(6890840342903312019L)
                .withSku(new DiskSku().withName(DiskSkuName.STANDARD_LRS)))
            .withSupportedConfigurations(Arrays.asList(
                new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.PREMIUM_ZRS))
                    .withSizeGB(6126446614006072505L)
                    .withMinimumSupportedDiskCount(3525728051657376574L)
                    .withMaximumSupportedDiskCount(6283812381833889592L)
                    .withIopsReadWrite(6505103417183468045L)
                    .withMbpsReadWrite(2130961958634360268L)
                    .withDiskTier("kfo"),
                new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.STANDARD_LRS))
                    .withSizeGB(4894427393547205979L)
                    .withMinimumSupportedDiskCount(7184832566228979398L)
                    .withMaximumSupportedDiskCount(8620711774108455397L)
                    .withIopsReadWrite(2115374097438254062L)
                    .withMbpsReadWrite(5606993477274811025L)
                    .withDiskTier("wnw"),
                new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.PREMIUM_LRS))
                    .withSizeGB(2534987154024922406L)
                    .withMinimumSupportedDiskCount(6545894172823535543L)
                    .withMaximumSupportedDiskCount(3686137269539867377L)
                    .withIopsReadWrite(5128252551550278404L)
                    .withMbpsReadWrite(5048423606513513533L)
                    .withDiskTier("smy"),
                new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.PREMIUM_ZRS))
                    .withSizeGB(8158709168465986380L)
                    .withMinimumSupportedDiskCount(1801059877260196266L)
                    .withMaximumSupportedDiskCount(4186832634002979532L)
                    .withIopsReadWrite(8364289038127439850L)
                    .withMbpsReadWrite(8520799989899984961L)
                    .withDiskTier("dmpa")));
        model = BinaryData.fromObject(model).toObject(SapDiskConfiguration.class);
        Assertions.assertEquals(6421947061498150983L, model.recommendedConfiguration().count());
        Assertions.assertEquals(6890840342903312019L, model.recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.STANDARD_LRS, model.recommendedConfiguration().sku().name());
        Assertions.assertEquals(DiskSkuName.PREMIUM_ZRS, model.supportedConfigurations().get(0).sku().name());
        Assertions.assertEquals(6126446614006072505L, model.supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(3525728051657376574L,
            model.supportedConfigurations().get(0).minimumSupportedDiskCount());
        Assertions.assertEquals(6283812381833889592L,
            model.supportedConfigurations().get(0).maximumSupportedDiskCount());
        Assertions.assertEquals(6505103417183468045L, model.supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(2130961958634360268L, model.supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("kfo", model.supportedConfigurations().get(0).diskTier());
    }
}
