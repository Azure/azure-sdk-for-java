// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.ApplicationServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.CentralServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DatabaseServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SharedStorageResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.ThreeTierFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ThreeTierFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ThreeTierFullResourceNames model = BinaryData.fromString(
            "{\"namingPatternType\":\"FullResourceName\",\"centralServer\":{\"virtualMachines\":[{\"vmName\":\"utncorm\",\"hostName\":\"xqtvcofu\",\"networkInterfaces\":[{\"networkInterfaceName\":\"kgjubgdknnqvsazn\"},{\"networkInterfaceName\":\"tor\"}],\"osDiskName\":\"sgsahmkycgr\",\"dataDiskNames\":{\"kif\":[\"uetae\",\"uruv\",\"movsmzlxwabmqoe\"]}},{\"vmName\":\"tpuqujmq\",\"hostName\":\"kfbtndoaongbjc\",\"networkInterfaces\":[{\"networkInterfaceName\":\"i\"},{\"networkInterfaceName\":\"jed\"},{\"networkInterfaceName\":\"wwa\"}],\"osDiskName\":\"kojvd\",\"dataDiskNames\":{\"zxkhnzbonlwnto\":[\"oqouicybxarzgszu\",\"oxciqopidoamcio\",\"hkh\"],\"bt\":[\"okdwb\",\"hksz\",\"cmrvexzt\"],\"uximerqfobw\":[\"sfraoyzko\",\"wtl\",\"nguxawqaldsy\"],\"gvbbejdcng\":[\"nkbykutwpfhp\",\"gmhrskdsnfdsdoak\",\"tdlmkkzevd\",\"hewpusdsttwv\"]}}],\"availabilitySetName\":\"m\",\"loadBalancer\":{\"loadBalancerName\":\"ufgmjzrwrdg\",\"frontendIpConfigurationNames\":[\"aenuuz\"],\"backendPoolNames\":[\"bminrfdwoyuhhzi\",\"iefozbhdmsml\"],\"healthProbeNames\":[\"hoftr\",\"ae\",\"u\",\"ah\"]}},\"applicationServer\":{\"virtualMachines\":[{\"vmName\":\"faoqzpiyylhal\",\"hostName\":\"whccs\",\"networkInterfaces\":[{\"networkInterfaceName\":\"ivwitqscywugg\"},{\"networkInterfaceName\":\"luhczbw\"}],\"osDiskName\":\"hairsbrgzdwms\",\"dataDiskNames\":{\"n\":[\"qwdxggicc\"],\"zrncsdt\":[\"huexmk\",\"tlstvlzywem\"],\"eadcygqukyhejhz\":[\"u\",\"iypbsfgytgusl\"]}},{\"vmName\":\"xgfpelolppv\",\"hostName\":\"r\",\"networkInterfaces\":[{\"networkInterfaceName\":\"jzraehtwdwrf\"}],\"osDiskName\":\"wib\",\"dataDiskNames\":{\"h\":[\"l\"]}},{\"vmName\":\"fwpracstwi\",\"hostName\":\"khevxccedc\",\"networkInterfaces\":[{\"networkInterfaceName\":\"yodnwzxltj\"}],\"osDiskName\":\"nhltiugcxn\",\"dataDiskNames\":{\"unyowxwl\":[\"xqi\",\"y\"],\"rwkq\":[\"jrkvfgbvfvpdbo\",\"acizsjqlhkrr\",\"bdeibqipqk\",\"hvxndzwmkrefajpj\"],\"bkzbzkd\":[\"hgbijt\",\"ivfxzsjabibsyst\",\"wfsdjpvkvpbj\"]}}],\"availabilitySetName\":\"cjabudurgkakmo\"},\"databaseServer\":{\"virtualMachines\":[{\"vmName\":\"klff\",\"hostName\":\"ouw\",\"networkInterfaces\":[{\"networkInterfaceName\":\"rfzeey\"}],\"osDiskName\":\"izikayuhq\",\"dataDiskNames\":{\"t\":[\"sybbqwr\"],\"owqkdwytisi\":[\"gmfpgvmp\",\"paslthaqfxssmwu\",\"wbdsr\",\"zpdrhneu\"]}},{\"vmName\":\"rcgp\",\"hostName\":\"pzimejzanlfzxi\",\"networkInterfaces\":[{\"networkInterfaceName\":\"bzonok\"},{\"networkInterfaceName\":\"rjqc\"}],\"osDiskName\":\"gzpfrla\",\"dataDiskNames\":{\"jvfbgofelja\":[\"nwoiind\",\"pwp\",\"ylwbtlhflsjcdhsz\"]}}],\"availabilitySetName\":\"qmqhldvriii\",\"loadBalancer\":{\"loadBalancerName\":\"al\",\"frontendIpConfigurationNames\":[\"kvtvsexso\"],\"backendPoolNames\":[\"luqhhahhxv\"],\"healthProbeNames\":[\"zkw\",\"jgwwspughftq\"]}},\"sharedStorage\":{\"sharedStorageAccountName\":\"qxujxukndxd\",\"sharedStorageAccountPrivateEndPointName\":\"rjguufzdmsyqtf\"}}")
            .toObject(ThreeTierFullResourceNames.class);
        Assertions.assertEquals("utncorm", model.centralServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("xqtvcofu", model.centralServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("kgjubgdknnqvsazn",
            model.centralServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("sgsahmkycgr", model.centralServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("uetae",
            model.centralServer().virtualMachines().get(0).dataDiskNames().get("kif").get(0));
        Assertions.assertEquals("m", model.centralServer().availabilitySetName());
        Assertions.assertEquals("ufgmjzrwrdg", model.centralServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("aenuuz", model.centralServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("bminrfdwoyuhhzi", model.centralServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("hoftr", model.centralServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("faoqzpiyylhal", model.applicationServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("whccs", model.applicationServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("ivwitqscywugg",
            model.applicationServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("hairsbrgzdwms", model.applicationServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("qwdxggicc",
            model.applicationServer().virtualMachines().get(0).dataDiskNames().get("n").get(0));
        Assertions.assertEquals("cjabudurgkakmo", model.applicationServer().availabilitySetName());
        Assertions.assertEquals("klff", model.databaseServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("ouw", model.databaseServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("rfzeey",
            model.databaseServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("izikayuhq", model.databaseServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("sybbqwr",
            model.databaseServer().virtualMachines().get(0).dataDiskNames().get("t").get(0));
        Assertions.assertEquals("qmqhldvriii", model.databaseServer().availabilitySetName());
        Assertions.assertEquals("al", model.databaseServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("kvtvsexso",
            model.databaseServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("luqhhahhxv", model.databaseServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("zkw", model.databaseServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("qxujxukndxd", model.sharedStorage().sharedStorageAccountName());
        Assertions.assertEquals("rjguufzdmsyqtf", model.sharedStorage().sharedStorageAccountPrivateEndPointName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ThreeTierFullResourceNames model
            = new ThreeTierFullResourceNames()
                .withCentralServer(
                    new CentralServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays.asList(
                                new VirtualMachineResourceNames().withVmName("utncorm")
                                    .withHostname("xqtvcofu")
                                    .withNetworkInterfaces(Arrays.asList(
                                        new NetworkInterfaceResourceNames()
                                            .withNetworkInterfaceName("kgjubgdknnqvsazn"),
                                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("tor")))
                                    .withOsDiskName("sgsahmkycgr")
                                    .withDataDiskNames(mapOf("kif", Arrays.asList("uetae", "uruv", "movsmzlxwabmqoe"))),
                                new VirtualMachineResourceNames().withVmName("tpuqujmq")
                                    .withHostname("kfbtndoaongbjc")
                                    .withNetworkInterfaces(
                                        Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("i"),
                                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("jed"),
                                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("wwa")))
                                    .withOsDiskName("kojvd")
                                    .withDataDiskNames(mapOf("zxkhnzbonlwnto",
                                        Arrays.asList("oqouicybxarzgszu", "oxciqopidoamcio", "hkh"), "bt",
                                        Arrays.asList("okdwb", "hksz", "cmrvexzt"), "uximerqfobw",
                                        Arrays.asList("sfraoyzko", "wtl", "nguxawqaldsy"), "gvbbejdcng",
                                        Arrays.asList("nkbykutwpfhp", "gmhrskdsnfdsdoak", "tdlmkkzevd",
                                            "hewpusdsttwv")))))
                        .withAvailabilitySetName("m")
                        .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("ufgmjzrwrdg")
                            .withFrontendIpConfigurationNames(Arrays.asList("aenuuz"))
                            .withBackendPoolNames(Arrays.asList("bminrfdwoyuhhzi", "iefozbhdmsml"))
                            .withHealthProbeNames(Arrays.asList("hoftr", "ae", "u", "ah"))))
                .withApplicationServer(
                    new ApplicationServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays
                                .asList(
                                    new VirtualMachineResourceNames().withVmName("faoqzpiyylhal")
                                        .withHostname("whccs")
                                        .withNetworkInterfaces(Arrays.asList(
                                            new NetworkInterfaceResourceNames()
                                                .withNetworkInterfaceName("ivwitqscywugg"),
                                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("luhczbw")))
                                        .withOsDiskName("hairsbrgzdwms")
                                        .withDataDiskNames(mapOf("n", Arrays.asList("qwdxggicc"), "zrncsdt",
                                            Arrays.asList("huexmk", "tlstvlzywem"), "eadcygqukyhejhz",
                                            Arrays.asList("u", "iypbsfgytgusl"))),
                                    new VirtualMachineResourceNames().withVmName("xgfpelolppv")
                                        .withHostname("r")
                                        .withNetworkInterfaces(Arrays.asList(new NetworkInterfaceResourceNames()
                                            .withNetworkInterfaceName("jzraehtwdwrf")))
                                        .withOsDiskName("wib")
                                        .withDataDiskNames(mapOf("h", Arrays.asList("l"))),
                                    new VirtualMachineResourceNames().withVmName("fwpracstwi")
                                        .withHostname("khevxccedc")
                                        .withNetworkInterfaces(Arrays.asList(
                                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("yodnwzxltj")))
                                        .withOsDiskName("nhltiugcxn")
                                        .withDataDiskNames(mapOf("unyowxwl", Arrays.asList("xqi", "y"), "rwkq",
                                            Arrays.asList("jrkvfgbvfvpdbo", "acizsjqlhkrr", "bdeibqipqk",
                                                "hvxndzwmkrefajpj"),
                                            "bkzbzkd", Arrays.asList("hgbijt", "ivfxzsjabibsyst", "wfsdjpvkvpbj")))))
                        .withAvailabilitySetName("cjabudurgkakmo"))
                .withDatabaseServer(
                    new DatabaseServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays
                                .asList(
                                    new VirtualMachineResourceNames().withVmName("klff")
                                        .withHostname("ouw")
                                        .withNetworkInterfaces(Arrays.asList(
                                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("rfzeey")))
                                        .withOsDiskName("izikayuhq")
                                        .withDataDiskNames(mapOf("t", Arrays.asList("sybbqwr"), "owqkdwytisi",
                                            Arrays.asList("gmfpgvmp", "paslthaqfxssmwu", "wbdsr", "zpdrhneu"))),
                                    new VirtualMachineResourceNames().withVmName("rcgp")
                                        .withHostname("pzimejzanlfzxi")
                                        .withNetworkInterfaces(Arrays.asList(
                                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("bzonok"),
                                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("rjqc")))
                                        .withOsDiskName("gzpfrla")
                                        .withDataDiskNames(
                                            mapOf("jvfbgofelja", Arrays.asList("nwoiind", "pwp", "ylwbtlhflsjcdhsz")))))
                        .withAvailabilitySetName("qmqhldvriii")
                        .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("al")
                            .withFrontendIpConfigurationNames(Arrays.asList("kvtvsexso"))
                            .withBackendPoolNames(Arrays.asList("luqhhahhxv"))
                            .withHealthProbeNames(Arrays.asList("zkw", "jgwwspughftq"))))
                .withSharedStorage(new SharedStorageResourceNames().withSharedStorageAccountName("qxujxukndxd")
                    .withSharedStorageAccountPrivateEndPointName("rjguufzdmsyqtf"));
        model = BinaryData.fromObject(model).toObject(ThreeTierFullResourceNames.class);
        Assertions.assertEquals("utncorm", model.centralServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("xqtvcofu", model.centralServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("kgjubgdknnqvsazn",
            model.centralServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("sgsahmkycgr", model.centralServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("uetae",
            model.centralServer().virtualMachines().get(0).dataDiskNames().get("kif").get(0));
        Assertions.assertEquals("m", model.centralServer().availabilitySetName());
        Assertions.assertEquals("ufgmjzrwrdg", model.centralServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("aenuuz", model.centralServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("bminrfdwoyuhhzi", model.centralServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("hoftr", model.centralServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("faoqzpiyylhal", model.applicationServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("whccs", model.applicationServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("ivwitqscywugg",
            model.applicationServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("hairsbrgzdwms", model.applicationServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("qwdxggicc",
            model.applicationServer().virtualMachines().get(0).dataDiskNames().get("n").get(0));
        Assertions.assertEquals("cjabudurgkakmo", model.applicationServer().availabilitySetName());
        Assertions.assertEquals("klff", model.databaseServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("ouw", model.databaseServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("rfzeey",
            model.databaseServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("izikayuhq", model.databaseServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("sybbqwr",
            model.databaseServer().virtualMachines().get(0).dataDiskNames().get("t").get(0));
        Assertions.assertEquals("qmqhldvriii", model.databaseServer().availabilitySetName());
        Assertions.assertEquals("al", model.databaseServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("kvtvsexso",
            model.databaseServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("luqhhahhxv", model.databaseServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("zkw", model.databaseServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("qxujxukndxd", model.sharedStorage().sharedStorageAccountName());
        Assertions.assertEquals("rjguufzdmsyqtf", model.sharedStorage().sharedStorageAccountPrivateEndPointName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
