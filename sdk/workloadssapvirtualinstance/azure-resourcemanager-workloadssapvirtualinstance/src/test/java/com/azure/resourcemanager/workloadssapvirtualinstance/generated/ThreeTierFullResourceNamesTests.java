// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.ApplicationServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.CentralServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DatabaseServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SharedStorageResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.ThreeTierFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ThreeTierFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ThreeTierFullResourceNames model = BinaryData.fromString(
            "{\"namingPatternType\":\"FullResourceName\",\"centralServer\":{\"virtualMachines\":[{\"vmName\":\"eojnxqbzvddn\",\"hostName\":\"ndei\",\"networkInterfaces\":[{\"networkInterfaceName\":\"npzaoq\"},{\"networkInterfaceName\":\"hrhcffcyddglmjth\"},{\"networkInterfaceName\":\"kw\"},{\"networkInterfaceName\":\"eicxmqciwqvhkhi\"}],\"osDiskName\":\"igdtopbob\",\"dataDiskNames\":{\"w\":[\"m\"],\"uhrzayvvt\":[\"m\"]}}],\"availabilitySetName\":\"vdfgiotk\",\"loadBalancer\":{\"loadBalancerName\":\"tqxln\",\"frontendIpConfigurationNames\":[\"efgugnxk\",\"xdqmidtthzrvqdra\",\"hjybigehoqfbo\"],\"backendPoolNames\":[\"anyktzlcuiywg\",\"ywgndrv\",\"nhzgpphrcgyn\",\"ocpecfvmmco\"],\"healthProbeNames\":[\"xlzevgbmqjqabcy\",\"mivkwlzuvcc\",\"wnfnbacf\"]}},\"applicationServer\":{\"virtualMachines\":[{\"vmName\":\"bxetqgtzxdpn\",\"hostName\":\"qqwx\",\"networkInterfaces\":[{\"networkInterfaceName\":\"al\"},{\"networkInterfaceName\":\"wsubisnja\"},{\"networkInterfaceName\":\"mngnzscxaqw\"}],\"osDiskName\":\"chcbonqvpkvlrxnj\",\"dataDiskNames\":{\"wdslfhotwmcy\":[\"ipheoflokeyyien\",\"bdlwtgrhpdjpj\",\"masxazjpqyegu\",\"lhbxxhejjzzvdud\"],\"uesnzwdejbavo\":[\"wlbjnpgacftade\",\"xnltyfsoppu\"]}}],\"availabilitySetName\":\"zdmohctbqvu\"},\"databaseServer\":{\"virtualMachines\":[{\"vmName\":\"dnvowg\",\"hostName\":\"jugwdkcglhsl\",\"networkInterfaces\":[{\"networkInterfaceName\":\"yggdtjixh\"},{\"networkInterfaceName\":\"uofqwe\"},{\"networkInterfaceName\":\"hmenevfyexfwhybc\"}],\"osDiskName\":\"vyvdcs\",\"dataDiskNames\":{\"jpkcattpng\":[\"naamde\",\"tehfiqscjeypvh\",\"zrkgqhcjrefovg\",\"kqsleyyvxy\"],\"jvnysounqe\":[\"rcczsqpjhvmd\"]}},{\"vmName\":\"noae\",\"hostName\":\"fhyhltrpmopjmcma\",\"networkInterfaces\":[{\"networkInterfaceName\":\"thfuiuaodsfcpkvx\"}],\"osDiskName\":\"puozmyzydag\",\"dataDiskNames\":{\"ryocfsfksymdd\":[\"bezy\",\"uokktwhrdxwz\",\"wqsmbsur\",\"xim\"],\"czvyifq\":[\"tki\",\"uxh\",\"yudxorrqnbp\"],\"mvvd\":[\"kdvjsll\"]}}],\"availabilitySetName\":\"atkpnp\",\"loadBalancer\":{\"loadBalancerName\":\"xxbczwtr\",\"frontendIpConfigurationNames\":[\"qzbqjvsov\",\"yokacspkw\"],\"backendPoolNames\":[\"dobpxjmflbvvn\",\"hrk\",\"ciwwzjuqkhr\",\"ajiwkuo\"],\"healthProbeNames\":[\"kg\",\"sauuimj\",\"vxieduugidyj\"]}},\"sharedStorage\":{\"sharedStorageAccountName\":\"byao\",\"sharedStorageAccountPrivateEndPointName\":\"e\"}}")
            .toObject(ThreeTierFullResourceNames.class);
        Assertions.assertEquals("eojnxqbzvddn", model.centralServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("ndei", model.centralServer().virtualMachines().get(0).hostName());
        Assertions.assertEquals("npzaoq",
            model.centralServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("igdtopbob", model.centralServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("m", model.centralServer().virtualMachines().get(0).dataDiskNames().get("w").get(0));
        Assertions.assertEquals("vdfgiotk", model.centralServer().availabilitySetName());
        Assertions.assertEquals("tqxln", model.centralServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("efgugnxk", model.centralServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("anyktzlcuiywg", model.centralServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("xlzevgbmqjqabcy", model.centralServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("bxetqgtzxdpn", model.applicationServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("qqwx", model.applicationServer().virtualMachines().get(0).hostName());
        Assertions.assertEquals("al",
            model.applicationServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.applicationServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("ipheoflokeyyien",
            model.applicationServer().virtualMachines().get(0).dataDiskNames().get("wdslfhotwmcy").get(0));
        Assertions.assertEquals("zdmohctbqvu", model.applicationServer().availabilitySetName());
        Assertions.assertEquals("dnvowg", model.databaseServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("jugwdkcglhsl", model.databaseServer().virtualMachines().get(0).hostName());
        Assertions.assertEquals("yggdtjixh",
            model.databaseServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("vyvdcs", model.databaseServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("naamde",
            model.databaseServer().virtualMachines().get(0).dataDiskNames().get("jpkcattpng").get(0));
        Assertions.assertEquals("atkpnp", model.databaseServer().availabilitySetName());
        Assertions.assertEquals("xxbczwtr", model.databaseServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("qzbqjvsov",
            model.databaseServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("dobpxjmflbvvn", model.databaseServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("kg", model.databaseServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("byao", model.sharedStorage().sharedStorageAccountName());
        Assertions.assertEquals("e", model.sharedStorage().sharedStorageAccountPrivateEndPointName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ThreeTierFullResourceNames model
            = new ThreeTierFullResourceNames()
                .withCentralServer(
                    new CentralServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays.asList(new VirtualMachineResourceNames().withVmName("eojnxqbzvddn")
                                .withHostName("ndei")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("npzaoq"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("hrhcffcyddglmjth"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("kw"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("eicxmqciwqvhkhi")))
                                .withOsDiskName("igdtopbob")
                                .withDataDiskNames(mapOf("w", Arrays.asList("m"), "uhrzayvvt", Arrays.asList("m")))))
                        .withAvailabilitySetName("vdfgiotk")
                        .withLoadBalancer(
                            new LoadBalancerResourceNames().withLoadBalancerName("tqxln")
                                .withFrontendIpConfigurationNames(
                                    Arrays.asList("efgugnxk", "xdqmidtthzrvqdra", "hjybigehoqfbo"))
                                .withBackendPoolNames(
                                    Arrays.asList("anyktzlcuiywg", "ywgndrv", "nhzgpphrcgyn", "ocpecfvmmco"))
                                .withHealthProbeNames(Arrays.asList("xlzevgbmqjqabcy", "mivkwlzuvcc", "wnfnbacf"))))
                .withApplicationServer(
                    new ApplicationServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays
                                .asList(new VirtualMachineResourceNames().withVmName("bxetqgtzxdpn")
                                    .withHostName("qqwx")
                                    .withNetworkInterfaces(Arrays.asList(
                                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("al"),
                                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("wsubisnja"),
                                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("mngnzscxaqw")))
                                    .withOsDiskName("chcbonqvpkvlrxnj")
                                    .withDataDiskNames(mapOf("wdslfhotwmcy",
                                        Arrays.asList("ipheoflokeyyien", "bdlwtgrhpdjpj", "masxazjpqyegu",
                                            "lhbxxhejjzzvdud"),
                                        "uesnzwdejbavo", Arrays.asList("wlbjnpgacftade", "xnltyfsoppu")))))
                        .withAvailabilitySetName("zdmohctbqvu"))
                .withDatabaseServer(
                    new DatabaseServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays.asList(
                                new VirtualMachineResourceNames().withVmName("dnvowg")
                                    .withHostName("jugwdkcglhsl")
                                    .withNetworkInterfaces(Arrays.asList(
                                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("yggdtjixh"),
                                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("uofqwe"),
                                        new NetworkInterfaceResourceNames()
                                            .withNetworkInterfaceName("hmenevfyexfwhybc")))
                                    .withOsDiskName("vyvdcs")
                                    .withDataDiskNames(mapOf("jpkcattpng",
                                        Arrays.asList("naamde", "tehfiqscjeypvh", "zrkgqhcjrefovg", "kqsleyyvxy"),
                                        "jvnysounqe", Arrays.asList("rcczsqpjhvmd"))),
                                new VirtualMachineResourceNames().withVmName("noae")
                                    .withHostName("fhyhltrpmopjmcma")
                                    .withNetworkInterfaces(Arrays.asList(new NetworkInterfaceResourceNames()
                                        .withNetworkInterfaceName("thfuiuaodsfcpkvx")))
                                    .withOsDiskName("puozmyzydag")
                                    .withDataDiskNames(mapOf("ryocfsfksymdd",
                                        Arrays.asList("bezy", "uokktwhrdxwz", "wqsmbsur", "xim"), "czvyifq",
                                        Arrays.asList("tki", "uxh", "yudxorrqnbp"), "mvvd", Arrays.asList("kdvjsll")))))
                        .withAvailabilitySetName("atkpnp")
                        .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("xxbczwtr")
                            .withFrontendIpConfigurationNames(Arrays.asList("qzbqjvsov", "yokacspkw"))
                            .withBackendPoolNames(Arrays.asList("dobpxjmflbvvn", "hrk", "ciwwzjuqkhr", "ajiwkuo"))
                            .withHealthProbeNames(Arrays.asList("kg", "sauuimj", "vxieduugidyj"))))
                .withSharedStorage(new SharedStorageResourceNames().withSharedStorageAccountName("byao")
                    .withSharedStorageAccountPrivateEndPointName("e"));
        model = BinaryData.fromObject(model).toObject(ThreeTierFullResourceNames.class);
        Assertions.assertEquals("eojnxqbzvddn", model.centralServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("ndei", model.centralServer().virtualMachines().get(0).hostName());
        Assertions.assertEquals("npzaoq",
            model.centralServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("igdtopbob", model.centralServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("m", model.centralServer().virtualMachines().get(0).dataDiskNames().get("w").get(0));
        Assertions.assertEquals("vdfgiotk", model.centralServer().availabilitySetName());
        Assertions.assertEquals("tqxln", model.centralServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("efgugnxk", model.centralServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("anyktzlcuiywg", model.centralServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("xlzevgbmqjqabcy", model.centralServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("bxetqgtzxdpn", model.applicationServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("qqwx", model.applicationServer().virtualMachines().get(0).hostName());
        Assertions.assertEquals("al",
            model.applicationServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.applicationServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("ipheoflokeyyien",
            model.applicationServer().virtualMachines().get(0).dataDiskNames().get("wdslfhotwmcy").get(0));
        Assertions.assertEquals("zdmohctbqvu", model.applicationServer().availabilitySetName());
        Assertions.assertEquals("dnvowg", model.databaseServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("jugwdkcglhsl", model.databaseServer().virtualMachines().get(0).hostName());
        Assertions.assertEquals("yggdtjixh",
            model.databaseServer().virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("vyvdcs", model.databaseServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("naamde",
            model.databaseServer().virtualMachines().get(0).dataDiskNames().get("jpkcattpng").get(0));
        Assertions.assertEquals("atkpnp", model.databaseServer().availabilitySetName());
        Assertions.assertEquals("xxbczwtr", model.databaseServer().loadBalancer().loadBalancerName());
        Assertions.assertEquals("qzbqjvsov",
            model.databaseServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("dobpxjmflbvvn", model.databaseServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("kg", model.databaseServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("byao", model.sharedStorage().sharedStorageAccountName());
        Assertions.assertEquals("e", model.sharedStorage().sharedStorageAccountPrivateEndPointName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
