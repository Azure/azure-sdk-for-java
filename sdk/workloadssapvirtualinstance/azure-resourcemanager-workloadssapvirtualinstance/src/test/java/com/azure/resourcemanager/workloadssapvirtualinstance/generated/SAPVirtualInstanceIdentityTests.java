// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SAPVirtualInstanceIdentity;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SAPVirtualInstanceIdentityType;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SAPVirtualInstanceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SAPVirtualInstanceIdentity model = BinaryData.fromString(
            "{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"qcgw\":{\"clientId\":\"lvqhjkbegibtnmx\",\"principalId\":\"bwwaloa\"},\"mtsavjcbpwxqp\":{\"clientId\":\"zjuzgwyz\",\"principalId\":\"txon\"},\"iwwroyqbexrmc\":{\"clientId\":\"knftguvriuh\",\"principalId\":\"wmdyvxqtay\"},\"hpvgqz\":{\"clientId\":\"bycnojvkn\",\"principalId\":\"fqsgzvahapjy\"}}}")
            .toObject(SAPVirtualInstanceIdentity.class);
        Assertions.assertEquals(SAPVirtualInstanceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SAPVirtualInstanceIdentity model
            = new SAPVirtualInstanceIdentity().withType(SAPVirtualInstanceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("qcgw", new UserAssignedIdentity(), "mtsavjcbpwxqp", new UserAssignedIdentity(),
                        "iwwroyqbexrmc", new UserAssignedIdentity(), "hpvgqz", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(SAPVirtualInstanceIdentity.class);
        Assertions.assertEquals(SAPVirtualInstanceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
