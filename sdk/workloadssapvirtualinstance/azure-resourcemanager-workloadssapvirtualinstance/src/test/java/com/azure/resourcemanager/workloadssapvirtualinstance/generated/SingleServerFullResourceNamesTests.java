// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SingleServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SingleServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SingleServerFullResourceNames model = BinaryData.fromString(
            "{\"namingPatternType\":\"FullResourceName\",\"virtualMachine\":{\"vmName\":\"lcvydy\",\"hostName\":\"tdooaoj\",\"networkInterfaces\":[{\"networkInterfaceName\":\"dkooebwnu\"},{\"networkInterfaceName\":\"emmsbvdkc\"},{\"networkInterfaceName\":\"dtjinfw\"},{\"networkInterfaceName\":\"fltkacjv\"}],\"osDiskName\":\"kdlfoa\",\"dataDiskNames\":{\"r\":[\"fpagaowpulp\",\"blylsyxkqjnsj\"],\"beyvpnqicvinvkjj\":[\"iagxsdszuempsbz\",\"f\"]}}}")
            .toObject(SingleServerFullResourceNames.class);
        Assertions.assertEquals("lcvydy", model.virtualMachine().vmName());
        Assertions.assertEquals("tdooaoj", model.virtualMachine().hostname());
        Assertions.assertEquals("dkooebwnu", model.virtualMachine().networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("kdlfoa", model.virtualMachine().osDiskName());
        Assertions.assertEquals("fpagaowpulp", model.virtualMachine().dataDiskNames().get("r").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SingleServerFullResourceNames model = new SingleServerFullResourceNames()
            .withVirtualMachine(new VirtualMachineResourceNames().withVmName("lcvydy")
                .withHostname("tdooaoj")
                .withNetworkInterfaces(
                    Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("dkooebwnu"),
                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("emmsbvdkc"),
                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("dtjinfw"),
                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("fltkacjv")))
                .withOsDiskName("kdlfoa")
                .withDataDiskNames(mapOf("r", Arrays.asList("fpagaowpulp", "blylsyxkqjnsj"), "beyvpnqicvinvkjj",
                    Arrays.asList("iagxsdszuempsbz", "f"))));
        model = BinaryData.fromObject(model).toObject(SingleServerFullResourceNames.class);
        Assertions.assertEquals("lcvydy", model.virtualMachine().vmName());
        Assertions.assertEquals("tdooaoj", model.virtualMachine().hostname());
        Assertions.assertEquals("dkooebwnu", model.virtualMachine().networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("kdlfoa", model.virtualMachine().osDiskName());
        Assertions.assertEquals("fpagaowpulp", model.virtualMachine().dataDiskNames().get("r").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
