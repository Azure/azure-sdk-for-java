// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SingleServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SingleServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SingleServerFullResourceNames model = BinaryData.fromString(
            "{\"namingPatternType\":\"FullResourceName\",\"virtualMachine\":{\"vmName\":\"tnb\",\"hostName\":\"kzgcwrwcl\",\"networkInterfaces\":[{\"networkInterfaceName\":\"ljdousk\"},{\"networkInterfaceName\":\"vkocrcjdkwtn\"},{\"networkInterfaceName\":\"bnjbiksqrglssain\"}],\"osDiskName\":\"jwnzlljfmp\",\"dataDiskNames\":{\"feusnhut\":[\"vmgxsab\",\"yqduujit\",\"jczdzevndh\",\"rwpdappdsbdkvwrw\"],\"ftyxolniw\":[\"ltmrldh\",\"gjzzdatqxhocdg\",\"ablgphuticndvk\",\"ozwyiftyhxhuro\"],\"jkot\":[\"cukjf\",\"giawx\",\"lryplwckbasyy\",\"nddhsgcbacph\"],\"dgak\":[\"qgoulznd\",\"i\",\"wyqkgfgibm\"]}}}")
            .toObject(SingleServerFullResourceNames.class);
        Assertions.assertEquals("tnb", model.virtualMachine().vmName());
        Assertions.assertEquals("kzgcwrwcl", model.virtualMachine().hostName());
        Assertions.assertEquals("ljdousk", model.virtualMachine().networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("jwnzlljfmp", model.virtualMachine().osDiskName());
        Assertions.assertEquals("vmgxsab", model.virtualMachine().dataDiskNames().get("feusnhut").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SingleServerFullResourceNames model
            = new SingleServerFullResourceNames()
                .withVirtualMachine(
                    new VirtualMachineResourceNames().withVmName("tnb")
                        .withHostName("kzgcwrwcl")
                        .withNetworkInterfaces(
                            Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("ljdousk"),
                                new NetworkInterfaceResourceNames().withNetworkInterfaceName("vkocrcjdkwtn"),
                                new NetworkInterfaceResourceNames().withNetworkInterfaceName("bnjbiksqrglssain")))
                        .withOsDiskName("jwnzlljfmp")
                        .withDataDiskNames(mapOf("feusnhut",
                            Arrays.asList("vmgxsab", "yqduujit", "jczdzevndh", "rwpdappdsbdkvwrw"), "ftyxolniw",
                            Arrays.asList("ltmrldh", "gjzzdatqxhocdg", "ablgphuticndvk", "ozwyiftyhxhuro"), "jkot",
                            Arrays.asList("cukjf", "giawx", "lryplwckbasyy", "nddhsgcbacph"), "dgak",
                            Arrays.asList("qgoulznd", "i", "wyqkgfgibm"))));
        model = BinaryData.fromObject(model).toObject(SingleServerFullResourceNames.class);
        Assertions.assertEquals("tnb", model.virtualMachine().vmName());
        Assertions.assertEquals("kzgcwrwcl", model.virtualMachine().hostName());
        Assertions.assertEquals("ljdousk", model.virtualMachine().networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("jwnzlljfmp", model.virtualMachine().osDiskName());
        Assertions.assertEquals("vmgxsab", model.virtualMachine().dataDiskNames().get("feusnhut").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
