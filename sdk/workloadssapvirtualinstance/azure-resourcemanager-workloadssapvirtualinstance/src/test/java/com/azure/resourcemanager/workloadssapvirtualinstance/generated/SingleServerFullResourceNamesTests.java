// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SingleServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SingleServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SingleServerFullResourceNames model = BinaryData.fromString(
            "{\"namingPatternType\":\"FullResourceName\",\"virtualMachine\":{\"vmName\":\"nhsjcnyej\",\"hostName\":\"ryhtnapczwlokjy\",\"networkInterfaces\":[{\"networkInterfaceName\":\"vnipjox\"},{\"networkInterfaceName\":\"nchgej\"},{\"networkInterfaceName\":\"odmailzyd\"}],\"osDiskName\":\"o\",\"dataDiskNames\":{\"vcputegj\":[\"huxinpmqnj\",\"qwixjspro\"],\"odjpslwejd\":[\"mfdatscmdvpj\",\"u\",\"suuv\",\"kjozkrwfnd\"]}}}")
            .toObject(SingleServerFullResourceNames.class);
        Assertions.assertEquals("nhsjcnyej", model.virtualMachine().vmName());
        Assertions.assertEquals("ryhtnapczwlokjy", model.virtualMachine().hostName());
        Assertions.assertEquals("vnipjox", model.virtualMachine().networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("o", model.virtualMachine().osDiskName());
        Assertions.assertEquals("huxinpmqnj", model.virtualMachine().dataDiskNames().get("vcputegj").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SingleServerFullResourceNames model = new SingleServerFullResourceNames()
            .withVirtualMachine(new VirtualMachineResourceNames().withVmName("nhsjcnyej")
                .withHostName("ryhtnapczwlokjy")
                .withNetworkInterfaces(
                    Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("vnipjox"),
                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("nchgej"),
                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("odmailzyd")))
                .withOsDiskName("o")
                .withDataDiskNames(mapOf("vcputegj", Arrays.asList("huxinpmqnj", "qwixjspro"), "odjpslwejd",
                    Arrays.asList("mfdatscmdvpj", "u", "suuv", "kjozkrwfnd"))));
        model = BinaryData.fromObject(model).toObject(SingleServerFullResourceNames.class);
        Assertions.assertEquals("nhsjcnyej", model.virtualMachine().vmName());
        Assertions.assertEquals("ryhtnapczwlokjy", model.virtualMachine().hostName());
        Assertions.assertEquals("vnipjox", model.virtualMachine().networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("o", model.virtualMachine().osDiskName());
        Assertions.assertEquals("huxinpmqnj", model.virtualMachine().dataDiskNames().get("vcputegj").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
