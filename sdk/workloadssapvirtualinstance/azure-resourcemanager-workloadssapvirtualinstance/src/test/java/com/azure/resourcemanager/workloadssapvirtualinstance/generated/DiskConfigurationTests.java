// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskConfiguration;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSku;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSkuName;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskVolumeConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskConfiguration model = BinaryData.fromString(
            "{\"diskVolumeConfigurations\":{\"mjgr\":{\"count\":4260756516043295776,\"sizeGB\":617825802143230964,\"sku\":{\"name\":\"Standard_LRS\"}}}}")
            .toObject(DiskConfiguration.class);
        Assertions.assertEquals(4260756516043295776L, model.diskVolumeConfigurations().get("mjgr").count());
        Assertions.assertEquals(617825802143230964L, model.diskVolumeConfigurations().get("mjgr").sizeGB());
        Assertions.assertEquals(DiskSkuName.STANDARD_LRS, model.diskVolumeConfigurations().get("mjgr").sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskConfiguration model = new DiskConfiguration().withDiskVolumeConfigurations(mapOf("mjgr",
            new DiskVolumeConfiguration().withCount(4260756516043295776L)
                .withSizeGB(617825802143230964L)
                .withSku(new DiskSku().withName(DiskSkuName.STANDARD_LRS))));
        model = BinaryData.fromObject(model).toObject(DiskConfiguration.class);
        Assertions.assertEquals(4260756516043295776L, model.diskVolumeConfigurations().get("mjgr").count());
        Assertions.assertEquals(617825802143230964L, model.diskVolumeConfigurations().get("mjgr").sizeGB());
        Assertions.assertEquals(DiskSkuName.STANDARD_LRS, model.diskVolumeConfigurations().get("mjgr").sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
