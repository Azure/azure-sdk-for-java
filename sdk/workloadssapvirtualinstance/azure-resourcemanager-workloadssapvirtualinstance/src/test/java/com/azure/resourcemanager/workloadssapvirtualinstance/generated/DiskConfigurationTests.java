// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskConfiguration;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSku;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSkuName;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskVolumeConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskConfiguration model = BinaryData.fromString(
            "{\"diskVolumeConfigurations\":{\"uyfta\":{\"count\":4032235244253302526,\"sizeGB\":7141166949546611504,\"sku\":{\"name\":\"Premium_LRS\"}},\"tmnubexkpzksmon\":{\"count\":4246550492793008168,\"sizeGB\":1587260248401579893,\"sku\":{\"name\":\"StandardSSD_ZRS\"}},\"mg\":{\"count\":8288629982072129308,\"sizeGB\":2698439393081810654,\"sku\":{\"name\":\"Standard_LRS\"}}}}")
            .toObject(DiskConfiguration.class);
        Assertions.assertEquals(4032235244253302526L, model.diskVolumeConfigurations().get("uyfta").count());
        Assertions.assertEquals(7141166949546611504L, model.diskVolumeConfigurations().get("uyfta").sizeGB());
        Assertions.assertEquals(DiskSkuName.PREMIUM_LRS, model.diskVolumeConfigurations().get("uyfta").sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskConfiguration model = new DiskConfiguration().withDiskVolumeConfigurations(mapOf("uyfta",
            new DiskVolumeConfiguration().withCount(4032235244253302526L)
                .withSizeGB(7141166949546611504L)
                .withSku(new DiskSku().withName(DiskSkuName.PREMIUM_LRS)),
            "tmnubexkpzksmon",
            new DiskVolumeConfiguration().withCount(4246550492793008168L)
                .withSizeGB(1587260248401579893L)
                .withSku(new DiskSku().withName(DiskSkuName.STANDARD_SSD_ZRS)),
            "mg",
            new DiskVolumeConfiguration().withCount(8288629982072129308L)
                .withSizeGB(2698439393081810654L)
                .withSku(new DiskSku().withName(DiskSkuName.STANDARD_LRS))));
        model = BinaryData.fromObject(model).toObject(DiskConfiguration.class);
        Assertions.assertEquals(4032235244253302526L, model.diskVolumeConfigurations().get("uyfta").count());
        Assertions.assertEquals(7141166949546611504L, model.diskVolumeConfigurations().get("uyfta").sizeGB());
        Assertions.assertEquals(DiskSkuName.PREMIUM_LRS, model.diskVolumeConfigurations().get("uyfta").sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
