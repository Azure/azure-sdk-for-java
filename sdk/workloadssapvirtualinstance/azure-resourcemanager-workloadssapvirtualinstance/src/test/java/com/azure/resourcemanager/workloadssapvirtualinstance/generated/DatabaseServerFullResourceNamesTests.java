// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DatabaseServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabaseServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabaseServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"pfza\",\"hostName\":\"lcuhxwtctyqiklb\",\"networkInterfaces\":[{\"networkInterfaceName\":\"lwzbhvgyugu\"},{\"networkInterfaceName\":\"vmkfssxqu\"}],\"osDiskName\":\"fpl\",\"dataDiskNames\":{\"txp\":[\"xnkjzkdesl\",\"vlopwiyighx\",\"kdwzbaiuebbaumny\",\"upedeojnabckhs\"],\"krdqmh\":[\"ebtfhvpesap\"],\"wrupqsxvnmicykvc\":[\"dhtldwkyz\",\"uutkncw\",\"cwsvlxotog\"],\"ovnotyfjfcnjbkcn\":[\"vei\"]}},{\"vmName\":\"hbttkphyw\",\"hostName\":\"vjtoqnermclfp\",\"networkInterfaces\":[{\"networkInterfaceName\":\"xus\"},{\"networkInterfaceName\":\"pabgyeps\"}],\"osDiskName\":\"tazqugxywpmueefj\",\"dataDiskNames\":{\"g\":[\"kqujidsuyono\",\"glaocq\",\"tcc\"],\"rqjbhckfrl\":[\"dxyt\",\"moyrxvwfudwpz\",\"txhdzh\"]}}],\"availabilitySetName\":\"xsbkyvpyca\",\"loadBalancer\":{\"loadBalancerName\":\"bpzkafkuwbc\",\"frontendIpConfigurationNames\":[\"bmehh\"],\"backendPoolNames\":[\"v\",\"us\",\"tslhspkdeem\"],\"healthProbeNames\":[\"mx\"]}}")
            .toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("pfza", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("lcuhxwtctyqiklb", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("lwzbhvgyugu",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("fpl", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("xnkjzkdesl", model.virtualMachines().get(0).dataDiskNames().get("txp").get(0));
        Assertions.assertEquals("xsbkyvpyca", model.availabilitySetName());
        Assertions.assertEquals("bpzkafkuwbc", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("bmehh", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("v", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("mx", model.loadBalancer().healthProbeNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabaseServerFullResourceNames model
            = new DatabaseServerFullResourceNames()
                .withVirtualMachines(
                    Arrays.asList(
                        new VirtualMachineResourceNames().withVmName("pfza")
                            .withHostName("lcuhxwtctyqiklb")
                            .withNetworkInterfaces(Arrays.asList(
                                new NetworkInterfaceResourceNames().withNetworkInterfaceName("lwzbhvgyugu"),
                                new NetworkInterfaceResourceNames().withNetworkInterfaceName("vmkfssxqu")))
                            .withOsDiskName("fpl")
                            .withDataDiskNames(mapOf("txp",
                                Arrays.asList("xnkjzkdesl", "vlopwiyighx", "kdwzbaiuebbaumny", "upedeojnabckhs"),
                                "krdqmh", Arrays.asList("ebtfhvpesap"), "wrupqsxvnmicykvc",
                                Arrays.asList("dhtldwkyz", "uutkncw", "cwsvlxotog"), "ovnotyfjfcnjbkcn",
                                Arrays.asList("vei"))),
                        new VirtualMachineResourceNames().withVmName("hbttkphyw")
                            .withHostName("vjtoqnermclfp")
                            .withNetworkInterfaces(
                                Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("xus"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("pabgyeps")))
                            .withOsDiskName("tazqugxywpmueefj")
                            .withDataDiskNames(mapOf("g", Arrays.asList("kqujidsuyono", "glaocq", "tcc"), "rqjbhckfrl",
                                Arrays.asList("dxyt", "moyrxvwfudwpz", "txhdzh")))))
                .withAvailabilitySetName("xsbkyvpyca")
                .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("bpzkafkuwbc")
                    .withFrontendIpConfigurationNames(Arrays.asList("bmehh"))
                    .withBackendPoolNames(Arrays.asList("v", "us", "tslhspkdeem"))
                    .withHealthProbeNames(Arrays.asList("mx")));
        model = BinaryData.fromObject(model).toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("pfza", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("lcuhxwtctyqiklb", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("lwzbhvgyugu",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("fpl", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("xnkjzkdesl", model.virtualMachines().get(0).dataDiskNames().get("txp").get(0));
        Assertions.assertEquals("xsbkyvpyca", model.availabilitySetName());
        Assertions.assertEquals("bpzkafkuwbc", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("bmehh", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("v", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("mx", model.loadBalancer().healthProbeNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
