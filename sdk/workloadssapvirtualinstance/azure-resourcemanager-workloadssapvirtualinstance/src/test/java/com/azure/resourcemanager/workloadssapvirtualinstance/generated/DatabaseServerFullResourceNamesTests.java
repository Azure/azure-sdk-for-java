// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DatabaseServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabaseServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabaseServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"p\",\"hostName\":\"afkuwb\",\"networkInterfaces\":[{\"networkInterfaceName\":\"bmehh\"},{\"networkInterfaceName\":\"yvjusrtslhsp\"}],\"osDiskName\":\"eemaofmxagkvtme\",\"dataDiskNames\":{\"mdua\":[\"rhahvljuahaquhcd\"],\"vfadmws\":[\"exq\"],\"bnbbeldawkz\":[\"r\",\"vxpvgomz\",\"fmisg\"]}}],\"availabilitySetName\":\"liourqhak\",\"loadBalancer\":{\"loadBalancerName\":\"ashsfwxos\",\"frontendIpConfigurationNames\":[\"xcug\"],\"backendPoolNames\":[\"ooxdjebwpuc\",\"wfvovbv\",\"euecivyhzceuoj\"],\"healthProbeNames\":[\"wjue\"]}}")
            .toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("p", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("afkuwb", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("bmehh",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("eemaofmxagkvtme", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("rhahvljuahaquhcd", model.virtualMachines().get(0).dataDiskNames().get("mdua").get(0));
        Assertions.assertEquals("liourqhak", model.availabilitySetName());
        Assertions.assertEquals("ashsfwxos", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("xcug", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("ooxdjebwpuc", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("wjue", model.loadBalancer().healthProbeNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabaseServerFullResourceNames model = new DatabaseServerFullResourceNames()
            .withVirtualMachines(Arrays.asList(new VirtualMachineResourceNames().withVmName("p")
                .withHostName("afkuwb")
                .withNetworkInterfaces(
                    Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("bmehh"),
                        new NetworkInterfaceResourceNames().withNetworkInterfaceName("yvjusrtslhsp")))
                .withOsDiskName("eemaofmxagkvtme")
                .withDataDiskNames(mapOf("mdua", Arrays.asList("rhahvljuahaquhcd"), "vfadmws", Arrays.asList("exq"),
                    "bnbbeldawkz", Arrays.asList("r", "vxpvgomz", "fmisg")))))
            .withAvailabilitySetName("liourqhak")
            .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("ashsfwxos")
                .withFrontendIpConfigurationNames(Arrays.asList("xcug"))
                .withBackendPoolNames(Arrays.asList("ooxdjebwpuc", "wfvovbv", "euecivyhzceuoj"))
                .withHealthProbeNames(Arrays.asList("wjue")));
        model = BinaryData.fromObject(model).toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("p", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("afkuwb", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("bmehh",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("eemaofmxagkvtme", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("rhahvljuahaquhcd", model.virtualMachines().get(0).dataDiskNames().get("mdua").get(0));
        Assertions.assertEquals("liourqhak", model.availabilitySetName());
        Assertions.assertEquals("ashsfwxos", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("xcug", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("ooxdjebwpuc", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("wjue", model.loadBalancer().healthProbeNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
