// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DatabaseServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabaseServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabaseServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"whojvp\",\"hostName\":\"qgxy\",\"networkInterfaces\":[{\"networkInterfaceName\":\"mbqfqvmk\"},{\"networkInterfaceName\":\"oz\"},{\"networkInterfaceName\":\"vhelxprglyatdd\"},{\"networkInterfaceName\":\"cbcuejrjxgciqi\"}],\"osDiskName\":\"hos\",\"dataDiskNames\":{\"yvoqa\":[\"rhzo\",\"m\",\"bmrqyibahwfl\",\"szdtmhrkwof\"],\"ulpiuj\":[\"iexpbtgiwbwo\",\"nwashrtd\",\"kcnqxwbpo\"],\"rpqlp\":[\"asipqiio\",\"yuq\"]}},{\"vmName\":\"cciuqgbdbutau\",\"hostName\":\"btkuwhh\",\"networkInterfaces\":[{\"networkInterfaceName\":\"ojoxafnndlp\"},{\"networkInterfaceName\":\"hkoymkcdyhbp\"},{\"networkInterfaceName\":\"pwdreqnovvqf\"},{\"networkInterfaceName\":\"ljxywsu\"}],\"osDiskName\":\"yrs\",\"dataDiskNames\":{\"e\":[\"tgadgvraeaen\",\"qnzarrwl\",\"uu\",\"jfqka\"],\"sgplsakn\":[\"ipfpubji\",\"wwiftohqkvpuv\"],\"odlqiyntor\":[\"fsynljphuop\"]}},{\"vmName\":\"hleosjsw\",\"hostName\":\"mslyzrpzbchckqqz\",\"networkInterfaces\":[{\"networkInterfaceName\":\"iysui\"}],\"osDiskName\":\"ynkedyatrwyhqmib\",\"dataDiskNames\":{\"cdpu\":[\"itsmypyyn\"]}}],\"availabilitySetName\":\"zgmwznmabikns\",\"loadBalancer\":{\"loadBalancerName\":\"jhxbld\",\"frontendIpConfigurationNames\":[\"wrlkdmtn\",\"vokotllxdyh\",\"syocogjltdtbnnha\"],\"backendPoolNames\":[\"crkvcikhnv\",\"amqgxqquezikyw\",\"gxk\"],\"healthProbeNames\":[\"atmelwui\"]}}")
            .toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("whojvp", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("qgxy", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("mbqfqvmk",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("hos", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("rhzo", model.virtualMachines().get(0).dataDiskNames().get("yvoqa").get(0));
        Assertions.assertEquals("zgmwznmabikns", model.availabilitySetName());
        Assertions.assertEquals("jhxbld", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("wrlkdmtn", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("crkvcikhnv", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("atmelwui", model.loadBalancer().healthProbeNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabaseServerFullResourceNames model
            = new DatabaseServerFullResourceNames()
                .withVirtualMachines(
                    Arrays
                        .asList(
                            new VirtualMachineResourceNames().withVmName("whojvp")
                                .withHostname("qgxy")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("mbqfqvmk"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("oz"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("vhelxprglyatdd"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("cbcuejrjxgciqi")))
                                .withOsDiskName("hos")
                                .withDataDiskNames(
                                    mapOf("yvoqa", Arrays.asList("rhzo", "m", "bmrqyibahwfl", "szdtmhrkwof"), "ulpiuj",
                                        Arrays.asList("iexpbtgiwbwo", "nwashrtd", "kcnqxwbpo"), "rpqlp",
                                        Arrays.asList("asipqiio", "yuq"))),
                            new VirtualMachineResourceNames().withVmName("cciuqgbdbutau")
                                .withHostname("btkuwhh")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("ojoxafnndlp"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("hkoymkcdyhbp"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("pwdreqnovvqf"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("ljxywsu")))
                                .withOsDiskName("yrs")
                                .withDataDiskNames(mapOf("e", Arrays.asList("tgadgvraeaen", "qnzarrwl", "uu", "jfqka"),
                                    "sgplsakn", Arrays.asList("ipfpubji", "wwiftohqkvpuv"), "odlqiyntor",
                                    Arrays.asList("fsynljphuop"))),
                            new VirtualMachineResourceNames().withVmName("hleosjsw")
                                .withHostname("mslyzrpzbchckqqz")
                                .withNetworkInterfaces(Arrays
                                    .asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("iysui")))
                                .withOsDiskName("ynkedyatrwyhqmib")
                                .withDataDiskNames(mapOf("cdpu", Arrays.asList("itsmypyyn")))))
                .withAvailabilitySetName("zgmwznmabikns")
                .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("jhxbld")
                    .withFrontendIpConfigurationNames(Arrays.asList("wrlkdmtn", "vokotllxdyh", "syocogjltdtbnnha"))
                    .withBackendPoolNames(Arrays.asList("crkvcikhnv", "amqgxqquezikyw", "gxk"))
                    .withHealthProbeNames(Arrays.asList("atmelwui")));
        model = BinaryData.fromObject(model).toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("whojvp", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("qgxy", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("mbqfqvmk",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("hos", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("rhzo", model.virtualMachines().get(0).dataDiskNames().get("yvoqa").get(0));
        Assertions.assertEquals("zgmwznmabikns", model.availabilitySetName());
        Assertions.assertEquals("jhxbld", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("wrlkdmtn", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("crkvcikhnv", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("atmelwui", model.loadBalancer().healthProbeNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
