// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.CentralServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CentralServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CentralServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"npc\",\"hostName\":\"ocohslkevleg\",\"networkInterfaces\":[{\"networkInterfaceName\":\"u\"},{\"networkInterfaceName\":\"mvfaxkffeiith\"},{\"networkInterfaceName\":\"m\"},{\"networkInterfaceName\":\"yvshxmz\"}],\"osDiskName\":\"bzoggigrx\",\"dataDiskNames\":{\"dptkoenkouk\":[\"vjxxjnsp\"]}},{\"vmName\":\"udwtiukbl\",\"hostName\":\"gkpocipazyxoe\",\"networkInterfaces\":[{\"networkInterfaceName\":\"jnpiucgyg\"}],\"osDiskName\":\"qzntypm\",\"dataDiskNames\":{\"hajdeyeamdpha\":[\"zcdrqjsdpydnfyhx\",\"eoejzic\",\"ifsjttgzfbishcb\"]}},{\"vmName\":\"lpbuxwgipwhonowk\",\"hostName\":\"hwankixzbinjepu\",\"networkInterfaces\":[{\"networkInterfaceName\":\"ywnuzoq\"}],\"osDiskName\":\"iyqzrnk\",\"dataDiskNames\":{\"qqn\":[\"xlwhzlsicoh\"],\"zf\":[\"lryav\",\"hheunmmqhgyx\",\"konocu\",\"oklyaxuconuq\"],\"frzpwvlqdqgb\":[\"eyp\",\"wrmjmwvvjektc\",\"senhwlrs\"],\"jf\":[\"ylihkaetckt\",\"fcivfsnkym\",\"ctq\"]}}],\"availabilitySetName\":\"brjcxe\",\"loadBalancer\":{\"loadBalancerName\":\"wutttxfvjrbi\",\"frontendIpConfigurationNames\":[\"xepcyvahfn\",\"jky\",\"xjvuujqgidokg\",\"ljyoxgvcltb\"],\"backendPoolNames\":[\"c\",\"hkjeszzhbi\"],\"healthProbeNames\":[\"xfvgxbfsmxne\",\"mpvecxgodebfqk\"]}}")
            .toObject(CentralServerFullResourceNames.class);
        Assertions.assertEquals("npc", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("ocohslkevleg", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("u", model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("bzoggigrx", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("vjxxjnsp", model.virtualMachines().get(0).dataDiskNames().get("dptkoenkouk").get(0));
        Assertions.assertEquals("brjcxe", model.availabilitySetName());
        Assertions.assertEquals("wutttxfvjrbi", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("xepcyvahfn", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("c", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("xfvgxbfsmxne", model.loadBalancer().healthProbeNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CentralServerFullResourceNames model = new CentralServerFullResourceNames()
            .withVirtualMachines(Arrays.asList(new VirtualMachineResourceNames().withVmName("npc")
                .withHostName("ocohslkevleg")
                .withNetworkInterfaces(Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("u"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("mvfaxkffeiith"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("m"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("yvshxmz")))
                .withOsDiskName("bzoggigrx")
                .withDataDiskNames(mapOf("dptkoenkouk", Arrays.asList("vjxxjnsp"))),
                new VirtualMachineResourceNames().withVmName("udwtiukbl")
                    .withHostName("gkpocipazyxoe")
                    .withNetworkInterfaces(
                        Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("jnpiucgyg")))
                    .withOsDiskName("qzntypm")
                    .withDataDiskNames(
                        mapOf("hajdeyeamdpha", Arrays.asList("zcdrqjsdpydnfyhx", "eoejzic", "ifsjttgzfbishcb"))),
                new VirtualMachineResourceNames().withVmName("lpbuxwgipwhonowk")
                    .withHostName("hwankixzbinjepu")
                    .withNetworkInterfaces(
                        Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("ywnuzoq")))
                    .withOsDiskName("iyqzrnk")
                    .withDataDiskNames(mapOf("qqn", Arrays.asList("xlwhzlsicoh"), "zf",
                        Arrays.asList("lryav", "hheunmmqhgyx", "konocu", "oklyaxuconuq"), "frzpwvlqdqgb",
                        Arrays.asList("eyp", "wrmjmwvvjektc", "senhwlrs"), "jf",
                        Arrays.asList("ylihkaetckt", "fcivfsnkym", "ctq")))))
            .withAvailabilitySetName("brjcxe")
            .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("wutttxfvjrbi")
                .withFrontendIpConfigurationNames(Arrays.asList("xepcyvahfn", "jky", "xjvuujqgidokg", "ljyoxgvcltb"))
                .withBackendPoolNames(Arrays.asList("c", "hkjeszzhbi"))
                .withHealthProbeNames(Arrays.asList("xfvgxbfsmxne", "mpvecxgodebfqk")));
        model = BinaryData.fromObject(model).toObject(CentralServerFullResourceNames.class);
        Assertions.assertEquals("npc", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("ocohslkevleg", model.virtualMachines().get(0).hostName());
        Assertions.assertEquals("u", model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("bzoggigrx", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("vjxxjnsp", model.virtualMachines().get(0).dataDiskNames().get("dptkoenkouk").get(0));
        Assertions.assertEquals("brjcxe", model.availabilitySetName());
        Assertions.assertEquals("wutttxfvjrbi", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("xepcyvahfn", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("c", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("xfvgxbfsmxne", model.loadBalancer().healthProbeNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
