// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.CentralServerFullResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CentralServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CentralServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"fxoblytkb\",\"hostName\":\"pe\",\"networkInterfaces\":[{\"networkInterfaceName\":\"bkrvrnsvshqj\"},{\"networkInterfaceName\":\"xc\"},{\"networkInterfaceName\":\"bfovasrruvwbhsq\"}],\"osDiskName\":\"ubcgjbirxb\",\"dataDiskNames\":{\"tpvjzbexilzznfqq\":[\"rfbjf\",\"twss\",\"t\"],\"ruoujmk\":[\"wpmqt\"]}},{\"vmName\":\"hwqytj\",\"hostName\":\"bnw\",\"networkInterfaces\":[{\"networkInterfaceName\":\"drjervnaenqpehin\"},{\"networkInterfaceName\":\"ygmi\"},{\"networkInterfaceName\":\"hnzdndslgnayqi\"},{\"networkInterfaceName\":\"nduhavhqlkthum\"}],\"osDiskName\":\"olbgycduiertgccy\",\"dataDiskNames\":{\"d\":[\"l\",\"ssl\",\"lfmmdnbbglzpswi\"],\"dvxzbncblylpst\":[\"wyhzdx\",\"sadbz\",\"nvdfznuda\"]}},{\"vmName\":\"hh\",\"hostName\":\"rzdzucerscdnt\",\"networkInterfaces\":[{\"networkInterfaceName\":\"iwjmygtdssls\"},{\"networkInterfaceName\":\"mweriofzpy\"},{\"networkInterfaceName\":\"emwabnet\"}],\"osDiskName\":\"hszhedplvwiwu\",\"dataDiskNames\":{\"ogaok\":[\"besldnkwwtppjflc\"],\"bdagxt\":[\"z\",\"nsikvmkqzeqqkdl\",\"fzxmhhvhgureodkw\"],\"iplbpodxunkbebxm\":[\"qdxbxwa\",\"bogqxndlkzgxhu\"]}}],\"availabilitySetName\":\"yyntwl\",\"loadBalancer\":{\"loadBalancerName\":\"tkoievseotgq\",\"frontendIpConfigurationNames\":[\"tmuwlauwzi\",\"xbmp\",\"cjefuzmu\",\"pbttdum\"],\"backendPoolNames\":[\"pxebmnzbt\"],\"healthProbeNames\":[\"pglkf\",\"ohdneuel\",\"phsdyhto\"]}}")
            .toObject(CentralServerFullResourceNames.class);
        Assertions.assertEquals("fxoblytkb", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("pe", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("bkrvrnsvshqj",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("ubcgjbirxb", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("rfbjf", model.virtualMachines().get(0).dataDiskNames().get("tpvjzbexilzznfqq").get(0));
        Assertions.assertEquals("yyntwl", model.availabilitySetName());
        Assertions.assertEquals("tkoievseotgq", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("tmuwlauwzi", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("pxebmnzbt", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("pglkf", model.loadBalancer().healthProbeNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CentralServerFullResourceNames model
            = new CentralServerFullResourceNames()
                .withVirtualMachines(
                    Arrays
                        .asList(
                            new VirtualMachineResourceNames().withVmName("fxoblytkb")
                                .withHostname("pe")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("bkrvrnsvshqj"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("xc"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("bfovasrruvwbhsq")))
                                .withOsDiskName("ubcgjbirxb")
                                .withDataDiskNames(mapOf("tpvjzbexilzznfqq", Arrays.asList("rfbjf", "twss", "t"),
                                    "ruoujmk", Arrays.asList("wpmqt"))),
                            new VirtualMachineResourceNames().withVmName("hwqytj")
                                .withHostname("bnw")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("drjervnaenqpehin"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("ygmi"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("hnzdndslgnayqi"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("nduhavhqlkthum")))
                                .withOsDiskName("olbgycduiertgccy")
                                .withDataDiskNames(mapOf("d", Arrays.asList("l", "ssl", "lfmmdnbbglzpswi"),
                                    "dvxzbncblylpst", Arrays.asList("wyhzdx", "sadbz", "nvdfznuda"))),
                            new VirtualMachineResourceNames().withVmName("hh")
                                .withHostname("rzdzucerscdnt")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("iwjmygtdssls"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("mweriofzpy"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("emwabnet")))
                                .withOsDiskName("hszhedplvwiwu")
                                .withDataDiskNames(mapOf("ogaok", Arrays.asList("besldnkwwtppjflc"), "bdagxt",
                                    Arrays.asList("z", "nsikvmkqzeqqkdl", "fzxmhhvhgureodkw"), "iplbpodxunkbebxm",
                                    Arrays.asList("qdxbxwa", "bogqxndlkzgxhu")))))
                .withAvailabilitySetName("yyntwl")
                .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("tkoievseotgq")
                    .withFrontendIpConfigurationNames(Arrays.asList("tmuwlauwzi", "xbmp", "cjefuzmu", "pbttdum"))
                    .withBackendPoolNames(Arrays.asList("pxebmnzbt"))
                    .withHealthProbeNames(Arrays.asList("pglkf", "ohdneuel", "phsdyhto")));
        model = BinaryData.fromObject(model).toObject(CentralServerFullResourceNames.class);
        Assertions.assertEquals("fxoblytkb", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("pe", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("bkrvrnsvshqj",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("ubcgjbirxb", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("rfbjf", model.virtualMachines().get(0).dataDiskNames().get("tpvjzbexilzznfqq").get(0));
        Assertions.assertEquals("yyntwl", model.availabilitySetName());
        Assertions.assertEquals("tkoievseotgq", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("tmuwlauwzi", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("pxebmnzbt", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("pglkf", model.loadBalancer().healthProbeNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
