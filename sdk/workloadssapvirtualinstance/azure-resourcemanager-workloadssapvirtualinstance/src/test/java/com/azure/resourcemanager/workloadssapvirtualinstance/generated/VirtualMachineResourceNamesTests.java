// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineResourceNames model = BinaryData.fromString(
            "{\"vmName\":\"xyawj\",\"hostName\":\"aq\",\"networkInterfaces\":[{\"networkInterfaceName\":\"jpkiidzyexznelix\"},{\"networkInterfaceName\":\"rzt\"}],\"osDiskName\":\"lhbnxkna\",\"dataDiskNames\":{\"dtpnapnyiropuhp\":[\"ppg\"],\"slynqwwnc\":[\"vpgylgqgitxmed\",\"v\"],\"pfqbuaceopzf\":[\"zhxgktrmgucn\",\"pkteo\",\"llwptfdy\"],\"mgrcfbu\":[\"hhuao\",\"ppcqeqxolz\",\"ahzxctobgbk\",\"moizpos\"]}}")
            .toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("xyawj", model.vmName());
        Assertions.assertEquals("aq", model.hostname());
        Assertions.assertEquals("jpkiidzyexznelix", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("lhbnxkna", model.osDiskName());
        Assertions.assertEquals("ppg", model.dataDiskNames().get("dtpnapnyiropuhp").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineResourceNames model = new VirtualMachineResourceNames().withVmName("xyawj")
            .withHostname("aq")
            .withNetworkInterfaces(
                Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("jpkiidzyexznelix"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("rzt")))
            .withOsDiskName("lhbnxkna")
            .withDataDiskNames(
                mapOf("dtpnapnyiropuhp", Arrays.asList("ppg"), "slynqwwnc", Arrays.asList("vpgylgqgitxmed", "v"),
                    "pfqbuaceopzf", Arrays.asList("zhxgktrmgucn", "pkteo", "llwptfdy"), "mgrcfbu",
                    Arrays.asList("hhuao", "ppcqeqxolz", "ahzxctobgbk", "moizpos")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("xyawj", model.vmName());
        Assertions.assertEquals("aq", model.hostname());
        Assertions.assertEquals("jpkiidzyexznelix", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("lhbnxkna", model.osDiskName());
        Assertions.assertEquals("ppg", model.dataDiskNames().get("dtpnapnyiropuhp").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
