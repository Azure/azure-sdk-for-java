// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineResourceNames model = BinaryData.fromString(
            "{\"vmName\":\"wryoqpsoacc\",\"hostName\":\"zakljlahbc\",\"networkInterfaces\":[{\"networkInterfaceName\":\"dfdosygexp\"},{\"networkInterfaceName\":\"jakhmsbzjh\"},{\"networkInterfaceName\":\"zevdphlx\"},{\"networkInterfaceName\":\"lthqtrgqjbp\"}],\"osDiskName\":\"fsinzgvfcjrwzoxx\",\"dataDiskNames\":{\"ininmay\":[\"lluwfzitonpeq\",\"pjkjlxofpdv\",\"pfxxy\"],\"rxzxtheo\":[\"ybb\",\"podepoo\",\"inuvamiheogn\"],\"iqihn\":[\"si\",\"yevc\"],\"nfygxgispemvtz\":[\"ngbwjz\"]}}")
            .toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("wryoqpsoacc", model.vmName());
        Assertions.assertEquals("zakljlahbc", model.hostName());
        Assertions.assertEquals("dfdosygexp", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("fsinzgvfcjrwzoxx", model.osDiskName());
        Assertions.assertEquals("lluwfzitonpeq", model.dataDiskNames().get("ininmay").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineResourceNames model = new VirtualMachineResourceNames().withVmName("wryoqpsoacc")
            .withHostName("zakljlahbc")
            .withNetworkInterfaces(
                Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("dfdosygexp"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("jakhmsbzjh"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("zevdphlx"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("lthqtrgqjbp")))
            .withOsDiskName("fsinzgvfcjrwzoxx")
            .withDataDiskNames(mapOf("ininmay", Arrays.asList("lluwfzitonpeq", "pjkjlxofpdv", "pfxxy"), "rxzxtheo",
                Arrays.asList("ybb", "podepoo", "inuvamiheogn"), "iqihn", Arrays.asList("si", "yevc"), "nfygxgispemvtz",
                Arrays.asList("ngbwjz")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("wryoqpsoacc", model.vmName());
        Assertions.assertEquals("zakljlahbc", model.hostName());
        Assertions.assertEquals("dfdosygexp", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("fsinzgvfcjrwzoxx", model.osDiskName());
        Assertions.assertEquals("lluwfzitonpeq", model.dataDiskNames().get("ininmay").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
