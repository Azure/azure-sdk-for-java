// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineResourceNames model = BinaryData.fromString(
            "{\"vmName\":\"s\",\"hostName\":\"yb\",\"networkInterfaces\":[{\"networkInterfaceName\":\"dqytbciqfouflmm\"},{\"networkInterfaceName\":\"zsm\"},{\"networkInterfaceName\":\"mglougpbkw\"},{\"networkInterfaceName\":\"utduqktapspwgcu\"}],\"osDiskName\":\"tumkdosvqwhbm\",\"dataDiskNames\":{\"ppbhtqqrolfp\":[\"jfddgmbmbe\"],\"rkujy\":[\"s\",\"lgbquxig\",\"yjgzjaoyfhrtxiln\"],\"jkcpr\":[\"l\",\"juvf\",\"awrlyx\"],\"guhmuouqfpr\":[\"wbxgjvt\",\"vpys\",\"zdn\",\"uj\"]}}")
            .toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("s", model.vmName());
        Assertions.assertEquals("yb", model.hostName());
        Assertions.assertEquals("dqytbciqfouflmm", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("tumkdosvqwhbm", model.osDiskName());
        Assertions.assertEquals("jfddgmbmbe", model.dataDiskNames().get("ppbhtqqrolfp").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineResourceNames model = new VirtualMachineResourceNames().withVmName("s")
            .withHostName("yb")
            .withNetworkInterfaces(
                Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("dqytbciqfouflmm"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("zsm"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("mglougpbkw"),
                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("utduqktapspwgcu")))
            .withOsDiskName("tumkdosvqwhbm")
            .withDataDiskNames(mapOf("ppbhtqqrolfp", Arrays.asList("jfddgmbmbe"), "rkujy",
                Arrays.asList("s", "lgbquxig", "yjgzjaoyfhrtxiln"), "jkcpr", Arrays.asList("l", "juvf", "awrlyx"),
                "guhmuouqfpr", Arrays.asList("wbxgjvt", "vpys", "zdn", "uj")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("s", model.vmName());
        Assertions.assertEquals("yb", model.hostName());
        Assertions.assertEquals("dqytbciqfouflmm", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("tumkdosvqwhbm", model.osDiskName());
        Assertions.assertEquals("jfddgmbmbe", model.dataDiskNames().get("ppbhtqqrolfp").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
