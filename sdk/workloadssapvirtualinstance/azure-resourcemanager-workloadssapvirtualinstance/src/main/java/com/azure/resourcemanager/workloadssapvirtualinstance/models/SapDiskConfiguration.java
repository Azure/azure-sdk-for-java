// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
 */
@Immutable
public final class SapDiskConfiguration implements JsonSerializable<SapDiskConfiguration> {
    /*
     * The recommended disk details for a given VM Sku.
     */
    private DiskVolumeConfiguration recommendedConfiguration;

    /*
     * The list of supported disks for a given VM Sku.
     */
    private List<DiskDetails> supportedConfigurations;

    /**
     * Creates an instance of SapDiskConfiguration class.
     */
    private SapDiskConfiguration() {
    }

    /**
     * Get the recommendedConfiguration property: The recommended disk details for a given VM Sku.
     * 
     * @return the recommendedConfiguration value.
     */
    public DiskVolumeConfiguration recommendedConfiguration() {
        return this.recommendedConfiguration;
    }

    /**
     * Get the supportedConfigurations property: The list of supported disks for a given VM Sku.
     * 
     * @return the supportedConfigurations value.
     */
    public List<DiskDetails> supportedConfigurations() {
        return this.supportedConfigurations;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recommendedConfiguration() != null) {
            recommendedConfiguration().validate();
        }
        if (supportedConfigurations() != null) {
            supportedConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recommendedConfiguration", this.recommendedConfiguration);
        jsonWriter.writeArrayField("supportedConfigurations", this.supportedConfigurations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapDiskConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapDiskConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapDiskConfiguration.
     */
    public static SapDiskConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapDiskConfiguration deserializedSapDiskConfiguration = new SapDiskConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recommendedConfiguration".equals(fieldName)) {
                    deserializedSapDiskConfiguration.recommendedConfiguration
                        = DiskVolumeConfiguration.fromJson(reader);
                } else if ("supportedConfigurations".equals(fieldName)) {
                    List<DiskDetails> supportedConfigurations
                        = reader.readArray(reader1 -> DiskDetails.fromJson(reader1));
                    deserializedSapDiskConfiguration.supportedConfigurations = supportedConfigurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapDiskConfiguration;
        });
    }
}
