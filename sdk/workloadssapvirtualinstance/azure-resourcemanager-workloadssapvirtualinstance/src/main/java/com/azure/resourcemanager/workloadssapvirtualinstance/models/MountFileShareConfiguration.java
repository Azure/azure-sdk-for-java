// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to
 * mount the fileshare as a part of the create infra flow.
 */
@Fluent
public final class MountFileShareConfiguration extends FileShareConfiguration {
    /*
     * The type of file share config, eg: Mount/CreateAndMount/Skip.
     */
    private FileShareConfigurationType configurationType = FileShareConfigurationType.MOUNT;

    /*
     * The fileshare resource ID
     */
    private String id;

    /*
     * The private endpoint resource ID
     */
    private String privateEndpointId;

    /**
     * Creates an instance of MountFileShareConfiguration class.
     */
    public MountFileShareConfiguration() {
    }

    /**
     * Get the configurationType property: The type of file share config, eg: Mount/CreateAndMount/Skip.
     * 
     * @return the configurationType value.
     */
    @Override
    public FileShareConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Get the id property: The fileshare resource ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The fileshare resource ID.
     * 
     * @param id the id value to set.
     * @return the MountFileShareConfiguration object itself.
     */
    public MountFileShareConfiguration withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the privateEndpointId property: The private endpoint resource ID.
     * 
     * @return the privateEndpointId value.
     */
    public String privateEndpointId() {
        return this.privateEndpointId;
    }

    /**
     * Set the privateEndpointId property: The private endpoint resource ID.
     * 
     * @param privateEndpointId the privateEndpointId value to set.
     * @return the MountFileShareConfiguration object itself.
     */
    public MountFileShareConfiguration withPrivateEndpointId(String privateEndpointId) {
        this.privateEndpointId = privateEndpointId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model MountFileShareConfiguration"));
        }
        if (privateEndpointId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateEndpointId in model MountFileShareConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MountFileShareConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("privateEndpointId", this.privateEndpointId);
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MountFileShareConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MountFileShareConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MountFileShareConfiguration.
     */
    public static MountFileShareConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MountFileShareConfiguration deserializedMountFileShareConfiguration = new MountFileShareConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMountFileShareConfiguration.id = reader.getString();
                } else if ("privateEndpointId".equals(fieldName)) {
                    deserializedMountFileShareConfiguration.privateEndpointId = reader.getString();
                } else if ("configurationType".equals(fieldName)) {
                    deserializedMountFileShareConfiguration.configurationType
                        = FileShareConfigurationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMountFileShareConfiguration;
        });
    }
}
