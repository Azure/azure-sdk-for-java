// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the SAP Application Server instance properties.
 */
@Immutable
public final class SapApplicationServerProperties implements JsonSerializable<SapApplicationServerProperties> {
    /*
     * Application server Instance Number.
     */
    @Generated
    private String instanceNo;

    /*
     * Application server Subnet.
     */
    @Generated
    private String subnet;

    /*
     * Application server instance SAP hostname.
     */
    @Generated
    private String hostname;

    /*
     * Application server instance SAP Kernel Version.
     */
    @Generated
    private String kernelVersion;

    /*
     * Application server instance SAP Kernel Patch level.
     */
    @Generated
    private String kernelPatch;

    /*
     * Application server instance SAP IP Address.
     */
    @Generated
    private String ipAddress;

    /*
     * Application server instance gateway Port.
     */
    @Generated
    private Long gatewayPort;

    /*
     * Application server instance ICM HTTP Port.
     */
    @Generated
    private Long icmHttpPort;

    /*
     * Application server instance ICM HTTPS Port.
     */
    @Generated
    private Long icmHttpsPort;

    /*
     * Application server instance dispatcher status.
     */
    @Generated
    private String dispatcherStatus;

    /*
     * The Load Balancer details such as LoadBalancer ID attached to Application Server Virtual Machines
     */
    @Generated
    private LoadBalancerDetails loadBalancerDetails;

    /*
     * The list of virtual machines.
     */
    @Generated
    private List<ApplicationServerVmDetails> vmDetails;

    /*
     * Defines the SAP Instance status.
     */
    @Generated
    private SapVirtualInstanceStatus status;

    /*
     * Defines the health of SAP Instances.
     */
    @Generated
    private SapHealthState health;

    /*
     * Defines the provisioning states.
     */
    @Generated
    private SapVirtualInstanceProvisioningState provisioningState;

    /*
     * Defines the Application Instance errors.
     */
    @Generated
    private SapVirtualInstanceError errors;

    /**
     * Creates an instance of SapApplicationServerProperties class.
     */
    @Generated
    public SapApplicationServerProperties() {
    }

    /**
     * Get the instanceNo property: Application server Instance Number.
     * 
     * @return the instanceNo value.
     */
    @Generated
    public String instanceNo() {
        return this.instanceNo;
    }

    /**
     * Get the subnet property: Application server Subnet.
     * 
     * @return the subnet value.
     */
    @Generated
    public String subnet() {
        return this.subnet;
    }

    /**
     * Get the hostname property: Application server instance SAP hostname.
     * 
     * @return the hostname value.
     */
    @Generated
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the kernelVersion property: Application server instance SAP Kernel Version.
     * 
     * @return the kernelVersion value.
     */
    @Generated
    public String kernelVersion() {
        return this.kernelVersion;
    }

    /**
     * Get the kernelPatch property: Application server instance SAP Kernel Patch level.
     * 
     * @return the kernelPatch value.
     */
    @Generated
    public String kernelPatch() {
        return this.kernelPatch;
    }

    /**
     * Get the ipAddress property: Application server instance SAP IP Address.
     * 
     * @return the ipAddress value.
     */
    @Generated
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the gatewayPort property: Application server instance gateway Port.
     * 
     * @return the gatewayPort value.
     */
    @Generated
    public Long gatewayPort() {
        return this.gatewayPort;
    }

    /**
     * Get the icmHttpPort property: Application server instance ICM HTTP Port.
     * 
     * @return the icmHttpPort value.
     */
    @Generated
    public Long icmHttpPort() {
        return this.icmHttpPort;
    }

    /**
     * Get the icmHttpsPort property: Application server instance ICM HTTPS Port.
     * 
     * @return the icmHttpsPort value.
     */
    @Generated
    public Long icmHttpsPort() {
        return this.icmHttpsPort;
    }

    /**
     * Get the dispatcherStatus property: Application server instance dispatcher status.
     * 
     * @return the dispatcherStatus value.
     */
    @Generated
    public String dispatcherStatus() {
        return this.dispatcherStatus;
    }

    /**
     * Get the loadBalancerDetails property: The Load Balancer details such as LoadBalancer ID attached to Application
     * Server Virtual Machines.
     * 
     * @return the loadBalancerDetails value.
     */
    @Generated
    public LoadBalancerDetails loadBalancerDetails() {
        return this.loadBalancerDetails;
    }

    /**
     * Get the vmDetails property: The list of virtual machines.
     * 
     * @return the vmDetails value.
     */
    @Generated
    public List<ApplicationServerVmDetails> vmDetails() {
        return this.vmDetails;
    }

    /**
     * Get the status property: Defines the SAP Instance status.
     * 
     * @return the status value.
     */
    @Generated
    public SapVirtualInstanceStatus status() {
        return this.status;
    }

    /**
     * Get the health property: Defines the health of SAP Instances.
     * 
     * @return the health value.
     */
    @Generated
    public SapHealthState health() {
        return this.health;
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public SapVirtualInstanceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errors property: Defines the Application Instance errors.
     * 
     * @return the errors value.
     */
    @Generated
    public SapVirtualInstanceError errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (loadBalancerDetails() != null) {
            loadBalancerDetails().validate();
        }
        if (vmDetails() != null) {
            vmDetails().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapApplicationServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapApplicationServerProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapApplicationServerProperties.
     */
    public static SapApplicationServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapApplicationServerProperties deserializedSapApplicationServerProperties
                = new SapApplicationServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceNo".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.instanceNo = reader.getString();
                } else if ("subnet".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.subnet = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.hostname = reader.getString();
                } else if ("kernelVersion".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.kernelVersion = reader.getString();
                } else if ("kernelPatch".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.kernelPatch = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.ipAddress = reader.getString();
                } else if ("gatewayPort".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.gatewayPort = reader.getNullable(JsonReader::getLong);
                } else if ("icmHttpPort".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.icmHttpPort = reader.getNullable(JsonReader::getLong);
                } else if ("icmHttpsPort".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.icmHttpsPort = reader.getNullable(JsonReader::getLong);
                } else if ("dispatcherStatus".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.dispatcherStatus = reader.getString();
                } else if ("loadBalancerDetails".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.loadBalancerDetails
                        = LoadBalancerDetails.fromJson(reader);
                } else if ("vmDetails".equals(fieldName)) {
                    List<ApplicationServerVmDetails> vmDetails
                        = reader.readArray(reader1 -> ApplicationServerVmDetails.fromJson(reader1));
                    deserializedSapApplicationServerProperties.vmDetails = vmDetails;
                } else if ("status".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.status
                        = SapVirtualInstanceStatus.fromString(reader.getString());
                } else if ("health".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.health = SapHealthState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.provisioningState
                        = SapVirtualInstanceProvisioningState.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    deserializedSapApplicationServerProperties.errors = SapVirtualInstanceError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapApplicationServerProperties;
        });
    }
}
