// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Discovery Details.
 */
@Fluent
public final class DiscoveryConfiguration extends SapConfiguration {
    /*
     * The configuration type. Eg: Deployment/Discovery
     */
    private SapConfigurationType configurationType = SapConfigurationType.DISCOVERY;

    /*
     * The virtual machine ID of the Central Server.
     */
    private String centralServerVmId;

    /*
     * The custom storage account name for the storage account created by the service in the managed resource group
     * created as part of VIS deployment.<br><br>Refer to the storage account naming rules
     * [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).
     * <br><br>If not provided, the service will create the storage account with a random name.
     */
    private String managedRgStorageAccountName;

    /*
     * The geo-location where the SAP system exists.
     */
    private String appLocation;

    /**
     * Creates an instance of DiscoveryConfiguration class.
     */
    public DiscoveryConfiguration() {
    }

    /**
     * Get the configurationType property: The configuration type. Eg: Deployment/Discovery.
     * 
     * @return the configurationType value.
     */
    @Override
    public SapConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Get the centralServerVmId property: The virtual machine ID of the Central Server.
     * 
     * @return the centralServerVmId value.
     */
    public String centralServerVmId() {
        return this.centralServerVmId;
    }

    /**
     * Set the centralServerVmId property: The virtual machine ID of the Central Server.
     * 
     * @param centralServerVmId the centralServerVmId value to set.
     * @return the DiscoveryConfiguration object itself.
     */
    public DiscoveryConfiguration withCentralServerVmId(String centralServerVmId) {
        this.centralServerVmId = centralServerVmId;
        return this;
    }

    /**
     * Get the managedRgStorageAccountName property: The custom storage account name for the storage account created by
     * the service in the managed resource group created as part of VIS deployment.&lt;br&gt;&lt;br&gt;Refer to the
     * storage account naming rules
     * [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).&lt;br&gt;&lt;br&gt;If
     * not provided, the service will create the storage account with a random name.
     * 
     * @return the managedRgStorageAccountName value.
     */
    public String managedRgStorageAccountName() {
        return this.managedRgStorageAccountName;
    }

    /**
     * Set the managedRgStorageAccountName property: The custom storage account name for the storage account created by
     * the service in the managed resource group created as part of VIS deployment.&lt;br&gt;&lt;br&gt;Refer to the
     * storage account naming rules
     * [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).&lt;br&gt;&lt;br&gt;If
     * not provided, the service will create the storage account with a random name.
     * 
     * @param managedRgStorageAccountName the managedRgStorageAccountName value to set.
     * @return the DiscoveryConfiguration object itself.
     */
    public DiscoveryConfiguration withManagedRgStorageAccountName(String managedRgStorageAccountName) {
        this.managedRgStorageAccountName = managedRgStorageAccountName;
        return this;
    }

    /**
     * Get the appLocation property: The geo-location where the SAP system exists.
     * 
     * @return the appLocation value.
     */
    public String appLocation() {
        return this.appLocation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        jsonWriter.writeStringField("centralServerVmId", this.centralServerVmId);
        jsonWriter.writeStringField("managedRgStorageAccountName", this.managedRgStorageAccountName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveryConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveryConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiscoveryConfiguration.
     */
    public static DiscoveryConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveryConfiguration deserializedDiscoveryConfiguration = new DiscoveryConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationType".equals(fieldName)) {
                    deserializedDiscoveryConfiguration.configurationType
                        = SapConfigurationType.fromString(reader.getString());
                } else if ("centralServerVmId".equals(fieldName)) {
                    deserializedDiscoveryConfiguration.centralServerVmId = reader.getString();
                } else if ("managedRgStorageAccountName".equals(fieldName)) {
                    deserializedDiscoveryConfiguration.managedRgStorageAccountName = reader.getString();
                } else if ("appLocation".equals(fieldName)) {
                    deserializedDiscoveryConfiguration.appLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveryConfiguration;
        });
    }
}
