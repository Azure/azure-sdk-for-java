// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapSizingRecommendationResultInner;
import java.io.IOException;

/**
 * The recommended configuration for a single server SAP system.
 */
@Immutable
public final class SingleServerRecommendationResult extends SapSizingRecommendationResultInner {
    /*
     * The deployment type. Eg: SingleServer/ThreeTier
     */
    private SapDeploymentType deploymentType = SapDeploymentType.SINGLE_SERVER;

    /*
     * The recommended VM SKU for single server.
     */
    private String vmSku;

    /**
     * Creates an instance of SingleServerRecommendationResult class.
     */
    private SingleServerRecommendationResult() {
    }

    /**
     * Get the deploymentType property: The deployment type. Eg: SingleServer/ThreeTier.
     * 
     * @return the deploymentType value.
     */
    @Override
    public SapDeploymentType deploymentType() {
        return this.deploymentType;
    }

    /**
     * Get the vmSku property: The recommended VM SKU for single server.
     * 
     * @return the vmSku value.
     */
    public String vmSku() {
        return this.vmSku;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentType",
            this.deploymentType == null ? null : this.deploymentType.toString());
        jsonWriter.writeStringField("vmSku", this.vmSku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SingleServerRecommendationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SingleServerRecommendationResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SingleServerRecommendationResult.
     */
    public static SingleServerRecommendationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SingleServerRecommendationResult deserializedSingleServerRecommendationResult
                = new SingleServerRecommendationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentType".equals(fieldName)) {
                    deserializedSingleServerRecommendationResult.deploymentType
                        = SapDeploymentType.fromString(reader.getString());
                } else if ("vmSku".equals(fieldName)) {
                    deserializedSingleServerRecommendationResult.vmSku = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSingleServerRecommendationResult;
        });
    }
}
