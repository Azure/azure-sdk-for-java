// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.SapDatabaseInstancesClient;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapDatabaseInstanceInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.OperationStatusResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDatabaseInstance;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDatabaseInstances;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StartRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StopRequest;

public final class SapDatabaseInstancesImpl implements SapDatabaseInstances {
    private static final ClientLogger LOGGER = new ClientLogger(SapDatabaseInstancesImpl.class);

    private final SapDatabaseInstancesClient innerClient;

    private final com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager serviceManager;

    public SapDatabaseInstancesImpl(SapDatabaseInstancesClient innerClient,
        com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SapDatabaseInstance> getWithResponse(String resourceGroupName, String sapVirtualInstanceName,
        String databaseInstanceName, Context context) {
        Response<SapDatabaseInstanceInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            sapVirtualInstanceName, databaseInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapDatabaseInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapDatabaseInstance get(String resourceGroupName, String sapVirtualInstanceName,
        String databaseInstanceName) {
        SapDatabaseInstanceInner inner
            = this.serviceClient().get(resourceGroupName, sapVirtualInstanceName, databaseInstanceName);
        if (inner != null) {
            return new SapDatabaseInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String sapVirtualInstanceName, String databaseInstanceName) {
        this.serviceClient().delete(resourceGroupName, sapVirtualInstanceName, databaseInstanceName);
    }

    public void delete(String resourceGroupName, String sapVirtualInstanceName, String databaseInstanceName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, sapVirtualInstanceName, databaseInstanceName, context);
    }

    public PagedIterable<SapDatabaseInstance> list(String resourceGroupName, String sapVirtualInstanceName) {
        PagedIterable<SapDatabaseInstanceInner> inner
            = this.serviceClient().list(resourceGroupName, sapVirtualInstanceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SapDatabaseInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SapDatabaseInstance> list(String resourceGroupName, String sapVirtualInstanceName,
        Context context) {
        PagedIterable<SapDatabaseInstanceInner> inner
            = this.serviceClient().list(resourceGroupName, sapVirtualInstanceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SapDatabaseInstanceImpl(inner1, this.manager()));
    }

    public OperationStatusResult startInstance(String resourceGroupName, String sapVirtualInstanceName,
        String databaseInstanceName) {
        OperationStatusResultInner inner
            = this.serviceClient().startInstance(resourceGroupName, sapVirtualInstanceName, databaseInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult startInstance(String resourceGroupName, String sapVirtualInstanceName,
        String databaseInstanceName, StartRequest body, Context context) {
        OperationStatusResultInner inner = this.serviceClient().startInstance(resourceGroupName, sapVirtualInstanceName,
            databaseInstanceName, body, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stopInstance(String resourceGroupName, String sapVirtualInstanceName,
        String databaseInstanceName) {
        OperationStatusResultInner inner
            = this.serviceClient().stopInstance(resourceGroupName, sapVirtualInstanceName, databaseInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stopInstance(String resourceGroupName, String sapVirtualInstanceName,
        String databaseInstanceName, StopRequest body, Context context) {
        OperationStatusResultInner inner = this.serviceClient().stopInstance(resourceGroupName, sapVirtualInstanceName,
            databaseInstanceName, body, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SapDatabaseInstance getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String databaseInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "databaseInstances");
        if (databaseInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseInstances'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sapVirtualInstanceName, databaseInstanceName, Context.NONE)
            .getValue();
    }

    public Response<SapDatabaseInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String databaseInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "databaseInstances");
        if (databaseInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseInstances'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sapVirtualInstanceName, databaseInstanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String databaseInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "databaseInstances");
        if (databaseInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseInstances'.", id)));
        }
        this.delete(resourceGroupName, sapVirtualInstanceName, databaseInstanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String databaseInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "databaseInstances");
        if (databaseInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseInstances'.", id)));
        }
        this.delete(resourceGroupName, sapVirtualInstanceName, databaseInstanceName, context);
    }

    private SapDatabaseInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager manager() {
        return this.serviceManager;
    }

    public SapDatabaseInstanceImpl define(String name) {
        return new SapDatabaseInstanceImpl(name, this.manager());
    }
}
