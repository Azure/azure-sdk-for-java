// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the Linux operating system settings on the virtual machine. &lt;br&gt;&lt;br&gt;For a list of supported
 * Linux distributions, see [Linux on Azure-Endorsed
 * Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
 */
@Fluent
public final class LinuxConfiguration extends OSConfiguration {
    /*
     * The OS Type
     */
    private OSType osType = OSType.LINUX;

    /*
     * Specifies whether password authentication should be disabled.
     */
    private Boolean disablePasswordAuthentication;

    /*
     * Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair'
     * instead)
     */
    private SshConfiguration ssh;

    /*
     * The SSH Key-pair used to authenticate with the VM's.
     */
    private SshKeyPair sshKeyPair;

    /**
     * Creates an instance of LinuxConfiguration class.
     */
    public LinuxConfiguration() {
    }

    /**
     * Get the osType property: The OS Type.
     * 
     * @return the osType value.
     */
    @Override
    public OSType osType() {
        return this.osType;
    }

    /**
     * Get the disablePasswordAuthentication property: Specifies whether password authentication should be disabled.
     * 
     * @return the disablePasswordAuthentication value.
     */
    public Boolean disablePasswordAuthentication() {
        return this.disablePasswordAuthentication;
    }

    /**
     * Set the disablePasswordAuthentication property: Specifies whether password authentication should be disabled.
     * 
     * @param disablePasswordAuthentication the disablePasswordAuthentication value to set.
     * @return the LinuxConfiguration object itself.
     */
    public LinuxConfiguration withDisablePasswordAuthentication(Boolean disablePasswordAuthentication) {
        this.disablePasswordAuthentication = disablePasswordAuthentication;
        return this;
    }

    /**
     * Get the ssh property: Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please
     * use 'sshKeyPair' instead).
     * 
     * @return the ssh value.
     */
    public SshConfiguration ssh() {
        return this.ssh;
    }

    /**
     * Set the ssh property: Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please
     * use 'sshKeyPair' instead).
     * 
     * @param ssh the ssh value to set.
     * @return the LinuxConfiguration object itself.
     */
    public LinuxConfiguration withSsh(SshConfiguration ssh) {
        this.ssh = ssh;
        return this;
    }

    /**
     * Get the sshKeyPair property: The SSH Key-pair used to authenticate with the VM's.
     * 
     * @return the sshKeyPair value.
     */
    public SshKeyPair sshKeyPair() {
        return this.sshKeyPair;
    }

    /**
     * Set the sshKeyPair property: The SSH Key-pair used to authenticate with the VM's.
     * 
     * @param sshKeyPair the sshKeyPair value to set.
     * @return the LinuxConfiguration object itself.
     */
    public LinuxConfiguration withSshKeyPair(SshKeyPair sshKeyPair) {
        this.sshKeyPair = sshKeyPair;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (ssh() != null) {
            ssh().validate();
        }
        if (sshKeyPair() != null) {
            sshKeyPair().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeBooleanField("disablePasswordAuthentication", this.disablePasswordAuthentication);
        jsonWriter.writeJsonField("ssh", this.ssh);
        jsonWriter.writeJsonField("sshKeyPair", this.sshKeyPair);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinuxConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinuxConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinuxConfiguration.
     */
    public static LinuxConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinuxConfiguration deserializedLinuxConfiguration = new LinuxConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedLinuxConfiguration.osType = OSType.fromString(reader.getString());
                } else if ("disablePasswordAuthentication".equals(fieldName)) {
                    deserializedLinuxConfiguration.disablePasswordAuthentication
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("ssh".equals(fieldName)) {
                    deserializedLinuxConfiguration.ssh = SshConfiguration.fromJson(reader);
                } else if ("sshKeyPair".equals(fieldName)) {
                    deserializedLinuxConfiguration.sshKeyPair = SshKeyPair.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinuxConfiguration;
        });
    }
}
