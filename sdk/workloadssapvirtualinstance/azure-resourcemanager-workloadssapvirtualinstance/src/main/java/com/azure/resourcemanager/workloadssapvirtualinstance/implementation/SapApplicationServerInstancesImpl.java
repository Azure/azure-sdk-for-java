// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.SapApplicationServerInstancesClient;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapApplicationServerInstanceInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.OperationStatusResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapApplicationServerInstance;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapApplicationServerInstances;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StartRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StopRequest;

public final class SapApplicationServerInstancesImpl implements SapApplicationServerInstances {
    private static final ClientLogger LOGGER = new ClientLogger(SapApplicationServerInstancesImpl.class);

    private final SapApplicationServerInstancesClient innerClient;

    private final com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager serviceManager;

    public SapApplicationServerInstancesImpl(SapApplicationServerInstancesClient innerClient,
        com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SapApplicationServerInstance> getWithResponse(String resourceGroupName,
        String sapVirtualInstanceName, String applicationInstanceName, Context context) {
        Response<SapApplicationServerInstanceInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            sapVirtualInstanceName, applicationInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapApplicationServerInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapApplicationServerInstance get(String resourceGroupName, String sapVirtualInstanceName,
        String applicationInstanceName) {
        SapApplicationServerInstanceInner inner
            = this.serviceClient().get(resourceGroupName, sapVirtualInstanceName, applicationInstanceName);
        if (inner != null) {
            return new SapApplicationServerInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String sapVirtualInstanceName, String applicationInstanceName) {
        this.serviceClient().delete(resourceGroupName, sapVirtualInstanceName, applicationInstanceName);
    }

    public void delete(String resourceGroupName, String sapVirtualInstanceName, String applicationInstanceName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, sapVirtualInstanceName, applicationInstanceName, context);
    }

    public PagedIterable<SapApplicationServerInstance> list(String resourceGroupName, String sapVirtualInstanceName) {
        PagedIterable<SapApplicationServerInstanceInner> inner
            = this.serviceClient().list(resourceGroupName, sapVirtualInstanceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SapApplicationServerInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SapApplicationServerInstance> list(String resourceGroupName, String sapVirtualInstanceName,
        Context context) {
        PagedIterable<SapApplicationServerInstanceInner> inner
            = this.serviceClient().list(resourceGroupName, sapVirtualInstanceName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SapApplicationServerInstanceImpl(inner1, this.manager()));
    }

    public OperationStatusResult startInstance(String resourceGroupName, String sapVirtualInstanceName,
        String applicationInstanceName) {
        OperationStatusResultInner inner
            = this.serviceClient().startInstance(resourceGroupName, sapVirtualInstanceName, applicationInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult startInstance(String resourceGroupName, String sapVirtualInstanceName,
        String applicationInstanceName, StartRequest body, Context context) {
        OperationStatusResultInner inner = this.serviceClient().startInstance(resourceGroupName, sapVirtualInstanceName,
            applicationInstanceName, body, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stopInstance(String resourceGroupName, String sapVirtualInstanceName,
        String applicationInstanceName) {
        OperationStatusResultInner inner
            = this.serviceClient().stopInstance(resourceGroupName, sapVirtualInstanceName, applicationInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stopInstance(String resourceGroupName, String sapVirtualInstanceName,
        String applicationInstanceName, StopRequest body, Context context) {
        OperationStatusResultInner inner = this.serviceClient().stopInstance(resourceGroupName, sapVirtualInstanceName,
            applicationInstanceName, body, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SapApplicationServerInstance getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String applicationInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "applicationInstances");
        if (applicationInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'applicationInstances'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sapVirtualInstanceName, applicationInstanceName, Context.NONE)
            .getValue();
    }

    public Response<SapApplicationServerInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String applicationInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "applicationInstances");
        if (applicationInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'applicationInstances'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sapVirtualInstanceName, applicationInstanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String applicationInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "applicationInstances");
        if (applicationInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'applicationInstances'.", id)));
        }
        this.delete(resourceGroupName, sapVirtualInstanceName, applicationInstanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        String applicationInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "applicationInstances");
        if (applicationInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'applicationInstances'.", id)));
        }
        this.delete(resourceGroupName, sapVirtualInstanceName, applicationInstanceName, context);
    }

    private SapApplicationServerInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager manager() {
        return this.serviceManager;
    }

    public SapApplicationServerInstanceImpl define(String name) {
        return new SapApplicationServerInstanceImpl(name, this.manager());
    }
}
