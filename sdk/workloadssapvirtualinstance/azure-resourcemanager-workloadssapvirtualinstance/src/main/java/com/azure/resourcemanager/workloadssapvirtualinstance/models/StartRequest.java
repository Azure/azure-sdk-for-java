// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Start SAP instance(s) request body.
 */
@Fluent
public final class StartRequest implements JsonSerializable<StartRequest> {
    /*
     * The boolean value indicates whether to start the virtual machines before starting the SAP instances.
     */
    private Boolean startVm;

    /**
     * Creates an instance of StartRequest class.
     */
    public StartRequest() {
    }

    /**
     * Get the startVm property: The boolean value indicates whether to start the virtual machines before starting the
     * SAP instances.
     * 
     * @return the startVm value.
     */
    public Boolean startVm() {
        return this.startVm;
    }

    /**
     * Set the startVm property: The boolean value indicates whether to start the virtual machines before starting the
     * SAP instances.
     * 
     * @param startVm the startVm value to set.
     * @return the StartRequest object itself.
     */
    public StartRequest withStartVm(Boolean startVm) {
        this.startVm = startVm;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("startVm", this.startVm);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StartRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StartRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StartRequest.
     */
    public static StartRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StartRequest deserializedStartRequest = new StartRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startVm".equals(fieldName)) {
                    deserializedStartRequest.startVm = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStartRequest;
        });
    }
}
