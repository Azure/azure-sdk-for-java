// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.SapCentralServerInstancesClient;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapCentralServerInstanceInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.implementation.models.SAPCentralServerInstanceListResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StartRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StopRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.UpdateSapCentralInstanceRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SapCentralServerInstancesClient.
 */
public final class SapCentralServerInstancesClientImpl implements SapCentralServerInstancesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SapCentralServerInstancesService service;

    /**
     * The service client containing this operation class.
     */
    private final WorkloadsSapVirtualInstanceMgmtClientImpl client;

    /**
     * Initializes an instance of SapCentralServerInstancesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SapCentralServerInstancesClientImpl(WorkloadsSapVirtualInstanceMgmtClientImpl client) {
        this.service = RestProxy.create(SapCentralServerInstancesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadsSapVirtualInstanceMgmtClientSapCentralServerInstances to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "WorkloadsSapVirtualI")
    public interface SapCentralServerInstancesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SapCentralServerInstanceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sapVirtualInstanceName") String sapVirtualInstanceName,
            @PathParam("centralInstanceName") String centralInstanceName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sapVirtualInstanceName") String sapVirtualInstanceName,
            @PathParam("centralInstanceName") String centralInstanceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SapCentralServerInstanceInner resource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SapCentralServerInstanceInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sapVirtualInstanceName") String sapVirtualInstanceName,
            @PathParam("centralInstanceName") String centralInstanceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") UpdateSapCentralInstanceRequest properties, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sapVirtualInstanceName") String sapVirtualInstanceName,
            @PathParam("centralInstanceName") String centralInstanceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SAPCentralServerInstanceListResult>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sapVirtualInstanceName") String sapVirtualInstanceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}/start")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> start(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sapVirtualInstanceName") String sapVirtualInstanceName,
            @PathParam("centralInstanceName") String centralInstanceName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") StartRequest body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}/stop")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> stop(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sapVirtualInstanceName") String sapVirtualInstanceName,
            @PathParam("centralInstanceName") String centralInstanceName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") StopRequest body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SAPCentralServerInstanceListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the SAP Central Services Instance resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SAP Central Services Instance resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SapCentralServerInstanceInner>> getWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the SAP Central Services Instance resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SAP Central Services Instance resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SapCentralServerInstanceInner>> getWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept, context);
    }

    /**
     * Gets the SAP Central Services Instance resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SAP Central Services Instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SapCentralServerInstanceInner> getAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        return getWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the SAP Central Services Instance resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SAP Central Services Instance resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SapCentralServerInstanceInner> getWithResponse(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, Context context) {
        return getWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, context).block();
    }

    /**
     * Gets the SAP Central Services Instance resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SapCentralServerInstanceInner get(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        return getWithResponse(resourceGroupName, sapVirtualInstanceName, centralInstanceName, Context.NONE).getValue();
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, SapCentralServerInstanceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sapVirtualInstanceName, centralInstanceName,
                contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, SapCentralServerInstanceInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, sapVirtualInstanceName, centralInstanceName, contentType, accept, resource, context);
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SapCentralServerInstanceInner>, SapCentralServerInstanceInner> beginCreateAsync(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName,
        SapCentralServerInstanceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, resource);
        return this.client.<SapCentralServerInstanceInner, SapCentralServerInstanceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SapCentralServerInstanceInner.class, SapCentralServerInstanceInner.class,
            this.client.getContext());
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SapCentralServerInstanceInner>, SapCentralServerInstanceInner> beginCreateAsync(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName,
        SapCentralServerInstanceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, sapVirtualInstanceName,
            centralInstanceName, resource, context);
        return this.client.<SapCentralServerInstanceInner, SapCentralServerInstanceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SapCentralServerInstanceInner.class, SapCentralServerInstanceInner.class,
            context);
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SapCentralServerInstanceInner>, SapCentralServerInstanceInner> beginCreate(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName,
        SapCentralServerInstanceInner resource) {
        return this.beginCreateAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, resource)
            .getSyncPoller();
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SapCentralServerInstanceInner>, SapCentralServerInstanceInner> beginCreate(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName,
        SapCentralServerInstanceInner resource, Context context) {
        return this.beginCreateAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, resource, context)
            .getSyncPoller();
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SapCentralServerInstanceInner> createAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, SapCentralServerInstanceInner resource) {
        return beginCreateAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SapCentralServerInstanceInner> createAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, SapCentralServerInstanceInner resource, Context context) {
        return beginCreateAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, resource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SapCentralServerInstanceInner create(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, SapCentralServerInstanceInner resource) {
        return createAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, resource).block();
    }

    /**
     * Creates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. PUT operation on this resource by end user will return a Bad Request error.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param resource The SAP Central Services Instance request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SapCentralServerInstanceInner create(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, SapCentralServerInstanceInner resource, Context context) {
        return createAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, resource, context).block();
    }

    /**
     * Updates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This can be used to
     * update tags on the resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param properties The SAP Central Services Instance resource request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SapCentralServerInstanceInner>> updateWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, UpdateSapCentralInstanceRequest properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sapVirtualInstanceName, centralInstanceName,
                contentType, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This can be used to
     * update tags on the resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param properties The SAP Central Services Instance resource request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SapCentralServerInstanceInner>> updateWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, UpdateSapCentralInstanceRequest properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, sapVirtualInstanceName, centralInstanceName, contentType, accept, properties, context);
    }

    /**
     * Updates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This can be used to
     * update tags on the resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param properties The SAP Central Services Instance resource request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SapCentralServerInstanceInner> updateAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, UpdateSapCentralInstanceRequest properties) {
        return updateWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This can be used to
     * update tags on the resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param properties The SAP Central Services Instance resource request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SapCentralServerInstanceInner> updateWithResponse(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, UpdateSapCentralInstanceRequest properties,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, properties,
            context).block();
    }

    /**
     * Updates the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This can be used to
     * update tags on the resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param properties The SAP Central Services Instance resource request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the SAP Central Services Instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SapCentralServerInstanceInner update(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, UpdateSapCentralInstanceRequest properties) {
        return updateWithResponse(resourceGroupName, sapVirtualInstanceName, centralInstanceName, properties,
            Context.NONE).getValue();
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept, context);
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        return this.beginDeleteAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName).getSyncPoller();
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, context)
            .getSyncPoller();
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        return beginDeleteAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName) {
        deleteAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName).block();
    }

    /**
     * Deletes the SAP Central Services Instance resource. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;This will be used by
     * service only. Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete operation on it.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName,
        Context context) {
        deleteAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, context).block();
    }

    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SapCentralServerInstanceInner>> listSinglePageAsync(String resourceGroupName,
        String sapVirtualInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sapVirtualInstanceName, accept, context))
            .<PagedResponse<SapCentralServerInstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SapCentralServerInstanceInner>> listSinglePageAsync(String resourceGroupName,
        String sapVirtualInstanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, sapVirtualInstanceName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SapCentralServerInstanceInner> listAsync(String resourceGroupName,
        String sapVirtualInstanceName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, sapVirtualInstanceName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SapCentralServerInstanceInner> listAsync(String resourceGroupName, String sapVirtualInstanceName,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, sapVirtualInstanceName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SapCentralServerInstanceInner> list(String resourceGroupName, String sapVirtualInstanceName) {
        return new PagedIterable<>(listAsync(resourceGroupName, sapVirtualInstanceName));
    }

    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SapCentralServerInstanceInner> list(String resourceGroupName, String sapVirtualInstanceName,
        Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, sapVirtualInstanceName, context));
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, StartRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.start(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept,
                body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, StartRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.start(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept, body, context);
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStartAsync(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName, StartRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = startWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginStartAsync(String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName) {
        final StartRequest body = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = startWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStartAsync(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName, StartRequest body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = startWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginStart(String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName) {
        final StartRequest body = null;
        return this.beginStartAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body)
            .getSyncPoller();
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStart(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName, StartRequest body,
        Context context) {
        return this.beginStartAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context)
            .getSyncPoller();
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> startAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, StartRequest body) {
        return beginStartAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> startAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        final StartRequest body = null;
        return beginStartAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> startAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, StartRequest body, Context context) {
        return beginStartAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner start(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        final StartRequest body = null;
        return startAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body).block();
    }

    /**
     * Starts the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance start request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner start(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, StartRequest body, Context context) {
        return startAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context).block();
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stopWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, StopRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.stop(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept,
                body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stopWithResponseAsync(String resourceGroupName,
        String sapVirtualInstanceName, String centralInstanceName, StopRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sapVirtualInstanceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sapVirtualInstanceName is required and cannot be null."));
        }
        if (centralInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter centralInstanceName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.stop(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, sapVirtualInstanceName, centralInstanceName, accept, body, context);
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStopAsync(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName, StopRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = stopWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginStopAsync(String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName) {
        final StopRequest body = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = stopWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStopAsync(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName, StopRequest body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = stopWithResponseAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginStop(String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName) {
        final StopRequest body = null;
        return this.beginStopAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body)
            .getSyncPoller();
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStop(
        String resourceGroupName, String sapVirtualInstanceName, String centralInstanceName, StopRequest body,
        Context context) {
        return this.beginStopAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context)
            .getSyncPoller();
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> stopAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, StopRequest body) {
        return beginStopAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> stopAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        final StopRequest body = null;
        return beginStopAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> stopAsync(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, StopRequest body, Context context) {
        return beginStopAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner stop(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName) {
        final StopRequest body = null;
        return stopAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body).block();
    }

    /**
     * Stops the SAP Central Services Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource.
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for auto
     * generation to work correctly.
     * @param body SAP Central Services instance stop request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner stop(String resourceGroupName, String sapVirtualInstanceName,
        String centralInstanceName, StopRequest body, Context context) {
        return stopAsync(resourceGroupName, sapVirtualInstanceName, centralInstanceName, body, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SapCentralServerInstanceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SapCentralServerInstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SAPCentralServerInstance list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SapCentralServerInstanceInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
