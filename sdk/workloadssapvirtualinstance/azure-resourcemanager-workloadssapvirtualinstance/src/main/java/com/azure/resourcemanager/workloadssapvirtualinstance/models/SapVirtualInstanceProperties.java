// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the Virtual Instance for SAP solutions resource properties.
 */
@Fluent
public final class SapVirtualInstanceProperties implements JsonSerializable<SapVirtualInstanceProperties> {
    /*
     * Defines the environment type - Production/Non Production.
     */
    private SapEnvironmentType environment;

    /*
     * Defines the SAP Product type.
     */
    private SapProductType sapProduct;

    /*
     * Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group.
     * The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should
     * be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM
     * extensions and the managed resource group storage account. This setting is currently applicable only to Storage
     * Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
     */
    private ManagedResourcesNetworkAccessType managedResourcesNetworkAccessType;

    /*
     * Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP
     * system is being registered with ACSS
     */
    private SapConfiguration configuration;

    /*
     * Managed resource group configuration
     */
    private ManagedRGConfiguration managedResourceGroupConfiguration;

    /*
     * Defines the SAP Instance status.
     */
    private SapVirtualInstanceStatus status;

    /*
     * Defines the health of SAP Instances.
     */
    private SapHealthState health;

    /*
     * Defines the Virtual Instance for SAP state.
     */
    private SapVirtualInstanceState state;

    /*
     * Defines the provisioning states.
     */
    private SapVirtualInstanceProvisioningState provisioningState;

    /*
     * Indicates any errors on the Virtual Instance for SAP solutions resource.
     */
    private SapVirtualInstanceError errors;

    /**
     * Creates an instance of SapVirtualInstanceProperties class.
     */
    public SapVirtualInstanceProperties() {
    }

    /**
     * Get the environment property: Defines the environment type - Production/Non Production.
     * 
     * @return the environment value.
     */
    public SapEnvironmentType environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Defines the environment type - Production/Non Production.
     * 
     * @param environment the environment value to set.
     * @return the SapVirtualInstanceProperties object itself.
     */
    public SapVirtualInstanceProperties withEnvironment(SapEnvironmentType environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the sapProduct property: Defines the SAP Product type.
     * 
     * @return the sapProduct value.
     */
    public SapProductType sapProduct() {
        return this.sapProduct;
    }

    /**
     * Set the sapProduct property: Defines the SAP Product type.
     * 
     * @param sapProduct the sapProduct value to set.
     * @return the SapVirtualInstanceProperties object itself.
     */
    public SapVirtualInstanceProperties withSapProduct(SapProductType sapProduct) {
        this.sapProduct = sapProduct;
        return this;
    }

    /**
     * Get the managedResourcesNetworkAccessType property: Specifies the network access configuration for the resources
     * that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If
     * 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist.
     * This is required for establishing connectivity between VM extensions and the managed resource group storage
     * account. This setting is currently applicable only to Storage Account. Learn more here
     * https://go.microsoft.com/fwlink/?linkid=2247228.
     * 
     * @return the managedResourcesNetworkAccessType value.
     */
    public ManagedResourcesNetworkAccessType managedResourcesNetworkAccessType() {
        return this.managedResourcesNetworkAccessType;
    }

    /**
     * Set the managedResourcesNetworkAccessType property: Specifies the network access configuration for the resources
     * that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If
     * 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist.
     * This is required for establishing connectivity between VM extensions and the managed resource group storage
     * account. This setting is currently applicable only to Storage Account. Learn more here
     * https://go.microsoft.com/fwlink/?linkid=2247228.
     * 
     * @param managedResourcesNetworkAccessType the managedResourcesNetworkAccessType value to set.
     * @return the SapVirtualInstanceProperties object itself.
     */
    public SapVirtualInstanceProperties
        withManagedResourcesNetworkAccessType(ManagedResourcesNetworkAccessType managedResourcesNetworkAccessType) {
        this.managedResourcesNetworkAccessType = managedResourcesNetworkAccessType;
        return this;
    }

    /**
     * Get the configuration property: Defines if the SAP system is being created using Azure Center for SAP solutions
     * (ACSS) or if an existing SAP system is being registered with ACSS.
     * 
     * @return the configuration value.
     */
    public SapConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Defines if the SAP system is being created using Azure Center for SAP solutions
     * (ACSS) or if an existing SAP system is being registered with ACSS.
     * 
     * @param configuration the configuration value to set.
     * @return the SapVirtualInstanceProperties object itself.
     */
    public SapVirtualInstanceProperties withConfiguration(SapConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedRGConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the SapVirtualInstanceProperties object itself.
     */
    public SapVirtualInstanceProperties
        withManagedResourceGroupConfiguration(ManagedRGConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the status property: Defines the SAP Instance status.
     * 
     * @return the status value.
     */
    public SapVirtualInstanceStatus status() {
        return this.status;
    }

    /**
     * Get the health property: Defines the health of SAP Instances.
     * 
     * @return the health value.
     */
    public SapHealthState health() {
        return this.health;
    }

    /**
     * Get the state property: Defines the Virtual Instance for SAP state.
     * 
     * @return the state value.
     */
    public SapVirtualInstanceState state() {
        return this.state;
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     * 
     * @return the provisioningState value.
     */
    public SapVirtualInstanceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errors property: Indicates any errors on the Virtual Instance for SAP solutions resource.
     * 
     * @return the errors value.
     */
    public SapVirtualInstanceError errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (environment() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property environment in model SapVirtualInstanceProperties"));
        }
        if (sapProduct() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sapProduct in model SapVirtualInstanceProperties"));
        }
        if (configuration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property configuration in model SapVirtualInstanceProperties"));
        } else {
            configuration().validate();
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (errors() != null) {
            errors().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SapVirtualInstanceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("environment", this.environment == null ? null : this.environment.toString());
        jsonWriter.writeStringField("sapProduct", this.sapProduct == null ? null : this.sapProduct.toString());
        jsonWriter.writeJsonField("configuration", this.configuration);
        jsonWriter.writeStringField("managedResourcesNetworkAccessType",
            this.managedResourcesNetworkAccessType == null ? null : this.managedResourcesNetworkAccessType.toString());
        jsonWriter.writeJsonField("managedResourceGroupConfiguration", this.managedResourceGroupConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapVirtualInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapVirtualInstanceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SapVirtualInstanceProperties.
     */
    public static SapVirtualInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapVirtualInstanceProperties deserializedSapVirtualInstanceProperties = new SapVirtualInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("environment".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.environment
                        = SapEnvironmentType.fromString(reader.getString());
                } else if ("sapProduct".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.sapProduct = SapProductType.fromString(reader.getString());
                } else if ("configuration".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.configuration = SapConfiguration.fromJson(reader);
                } else if ("managedResourcesNetworkAccessType".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.managedResourcesNetworkAccessType
                        = ManagedResourcesNetworkAccessType.fromString(reader.getString());
                } else if ("managedResourceGroupConfiguration".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.managedResourceGroupConfiguration
                        = ManagedRGConfiguration.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.status
                        = SapVirtualInstanceStatus.fromString(reader.getString());
                } else if ("health".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.health = SapHealthState.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.state
                        = SapVirtualInstanceState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.provisioningState
                        = SapVirtualInstanceProvisioningState.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    deserializedSapVirtualInstanceProperties.errors = SapVirtualInstanceError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapVirtualInstanceProperties;
        });
    }
}
