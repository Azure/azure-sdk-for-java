// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The full resource names object for central server layer resources.
 */
@Fluent
public final class CentralServerFullResourceNames implements JsonSerializable<CentralServerFullResourceNames> {
    /*
     * The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be
     * equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this
     * layer: ASCS and ERS.
     */
    private List<VirtualMachineResourceNames> virtualMachines;

    /*
     * The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
     */
    private String availabilitySetName;

    /*
     * The resource names object for load balancer and related resources.
     */
    private LoadBalancerResourceNames loadBalancer;

    /**
     * Creates an instance of CentralServerFullResourceNames class.
     */
    public CentralServerFullResourceNames() {
    }

    /**
     * Get the virtualMachines property: The list of names for all ASCS virtual machines to be deployed. The number of
     * entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two
     * virtual machines at this layer: ASCS and ERS.
     * 
     * @return the virtualMachines value.
     */
    public List<VirtualMachineResourceNames> virtualMachines() {
        return this.virtualMachines;
    }

    /**
     * Set the virtualMachines property: The list of names for all ASCS virtual machines to be deployed. The number of
     * entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two
     * virtual machines at this layer: ASCS and ERS.
     * 
     * @param virtualMachines the virtualMachines value to set.
     * @return the CentralServerFullResourceNames object itself.
     */
    public CentralServerFullResourceNames withVirtualMachines(List<VirtualMachineResourceNames> virtualMachines) {
        this.virtualMachines = virtualMachines;
        return this;
    }

    /**
     * Get the availabilitySetName property: The full name for availability set. In case name is not provided, it will
     * be defaulted to {SID}-ASCS-AvSet.
     * 
     * @return the availabilitySetName value.
     */
    public String availabilitySetName() {
        return this.availabilitySetName;
    }

    /**
     * Set the availabilitySetName property: The full name for availability set. In case name is not provided, it will
     * be defaulted to {SID}-ASCS-AvSet.
     * 
     * @param availabilitySetName the availabilitySetName value to set.
     * @return the CentralServerFullResourceNames object itself.
     */
    public CentralServerFullResourceNames withAvailabilitySetName(String availabilitySetName) {
        this.availabilitySetName = availabilitySetName;
        return this;
    }

    /**
     * Get the loadBalancer property: The resource names object for load balancer and related resources.
     * 
     * @return the loadBalancer value.
     */
    public LoadBalancerResourceNames loadBalancer() {
        return this.loadBalancer;
    }

    /**
     * Set the loadBalancer property: The resource names object for load balancer and related resources.
     * 
     * @param loadBalancer the loadBalancer value to set.
     * @return the CentralServerFullResourceNames object itself.
     */
    public CentralServerFullResourceNames withLoadBalancer(LoadBalancerResourceNames loadBalancer) {
        this.loadBalancer = loadBalancer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualMachines() != null) {
            virtualMachines().forEach(e -> e.validate());
        }
        if (loadBalancer() != null) {
            loadBalancer().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("virtualMachines", this.virtualMachines,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("availabilitySetName", this.availabilitySetName);
        jsonWriter.writeJsonField("loadBalancer", this.loadBalancer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CentralServerFullResourceNames from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CentralServerFullResourceNames if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CentralServerFullResourceNames.
     */
    public static CentralServerFullResourceNames fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CentralServerFullResourceNames deserializedCentralServerFullResourceNames
                = new CentralServerFullResourceNames();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualMachines".equals(fieldName)) {
                    List<VirtualMachineResourceNames> virtualMachines
                        = reader.readArray(reader1 -> VirtualMachineResourceNames.fromJson(reader1));
                    deserializedCentralServerFullResourceNames.virtualMachines = virtualMachines;
                } else if ("availabilitySetName".equals(fieldName)) {
                    deserializedCentralServerFullResourceNames.availabilitySetName = reader.getString();
                } else if ("loadBalancer".equals(fieldName)) {
                    deserializedCentralServerFullResourceNames.loadBalancer
                        = LoadBalancerResourceNames.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCentralServerFullResourceNames;
        });
    }
}
