// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the SAP Enqueue Server properties.
 */
@Immutable
public final class EnqueueServerProperties implements JsonSerializable<EnqueueServerProperties> {
    /*
     * Enqueue Server SAP Hostname.
     */
    private String hostname;

    /*
     * Enqueue Server SAP IP Address.
     */
    private String ipAddress;

    /*
     * Enqueue Server Port.
     */
    private Long port;

    /*
     * Defines the health of SAP Instances.
     */
    private SapHealthState health;

    /**
     * Creates an instance of EnqueueServerProperties class.
     */
    public EnqueueServerProperties() {
    }

    /**
     * Get the hostname property: Enqueue Server SAP Hostname.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the ipAddress property: Enqueue Server SAP IP Address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the port property: Enqueue Server Port.
     * 
     * @return the port value.
     */
    public Long port() {
        return this.port;
    }

    /**
     * Get the health property: Defines the health of SAP Instances.
     * 
     * @return the health value.
     */
    public SapHealthState health() {
        return this.health;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnqueueServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnqueueServerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnqueueServerProperties.
     */
    public static EnqueueServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnqueueServerProperties deserializedEnqueueServerProperties = new EnqueueServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostname".equals(fieldName)) {
                    deserializedEnqueueServerProperties.hostname = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedEnqueueServerProperties.ipAddress = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedEnqueueServerProperties.port = reader.getNullable(JsonReader::getLong);
                } else if ("health".equals(fieldName)) {
                    deserializedEnqueueServerProperties.health = SapHealthState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnqueueServerProperties;
        });
    }
}
