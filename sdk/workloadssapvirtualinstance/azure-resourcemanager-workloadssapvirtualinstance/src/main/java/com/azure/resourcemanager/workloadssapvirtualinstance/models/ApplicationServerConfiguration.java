// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the application server configuration.
 */
@Fluent
public final class ApplicationServerConfiguration implements JsonSerializable<ApplicationServerConfiguration> {
    /*
     * The subnet id.
     */
    private String subnetId;

    /*
     * Gets or sets the virtual machine configuration.
     */
    private VirtualMachineConfiguration virtualMachineConfiguration;

    /*
     * The number of app server instances.
     */
    private long instanceCount;

    /**
     * Creates an instance of ApplicationServerConfiguration class.
     */
    public ApplicationServerConfiguration() {
    }

    /**
     * Get the subnetId property: The subnet id.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The subnet id.
     * 
     * @param subnetId the subnetId value to set.
     * @return the ApplicationServerConfiguration object itself.
     */
    public ApplicationServerConfiguration withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the virtualMachineConfiguration property: Gets or sets the virtual machine configuration.
     * 
     * @return the virtualMachineConfiguration value.
     */
    public VirtualMachineConfiguration virtualMachineConfiguration() {
        return this.virtualMachineConfiguration;
    }

    /**
     * Set the virtualMachineConfiguration property: Gets or sets the virtual machine configuration.
     * 
     * @param virtualMachineConfiguration the virtualMachineConfiguration value to set.
     * @return the ApplicationServerConfiguration object itself.
     */
    public ApplicationServerConfiguration
        withVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
        this.virtualMachineConfiguration = virtualMachineConfiguration;
        return this;
    }

    /**
     * Get the instanceCount property: The number of app server instances.
     * 
     * @return the instanceCount value.
     */
    public long instanceCount() {
        return this.instanceCount;
    }

    /**
     * Set the instanceCount property: The number of app server instances.
     * 
     * @param instanceCount the instanceCount value to set.
     * @return the ApplicationServerConfiguration object itself.
     */
    public ApplicationServerConfiguration withInstanceCount(long instanceCount) {
        this.instanceCount = instanceCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model ApplicationServerConfiguration"));
        }
        if (virtualMachineConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property virtualMachineConfiguration in model ApplicationServerConfiguration"));
        } else {
            virtualMachineConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationServerConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeJsonField("virtualMachineConfiguration", this.virtualMachineConfiguration);
        jsonWriter.writeLongField("instanceCount", this.instanceCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationServerConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationServerConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationServerConfiguration.
     */
    public static ApplicationServerConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationServerConfiguration deserializedApplicationServerConfiguration
                = new ApplicationServerConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedApplicationServerConfiguration.subnetId = reader.getString();
                } else if ("virtualMachineConfiguration".equals(fieldName)) {
                    deserializedApplicationServerConfiguration.virtualMachineConfiguration
                        = VirtualMachineConfiguration.fromJson(reader);
                } else if ("instanceCount".equals(fieldName)) {
                    deserializedApplicationServerConfiguration.instanceCount = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationServerConfiguration;
        });
    }
}
