// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.SapVirtualInstancesClient;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapAvailabilityZoneDetailsResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapDiskConfigurationsResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapSizingRecommendationResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapSupportedResourceSkusResultInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapVirtualInstanceInner;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.OperationStatusResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapAvailabilityZoneDetailsRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapAvailabilityZoneDetailsResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfigurationsRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfigurationsResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapSizingRecommendationRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapSizingRecommendationResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapSupportedResourceSkusResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapSupportedSkusRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapVirtualInstance;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapVirtualInstances;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StartRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.StopRequest;

public final class SapVirtualInstancesImpl implements SapVirtualInstances {
    private static final ClientLogger LOGGER = new ClientLogger(SapVirtualInstancesImpl.class);

    private final SapVirtualInstancesClient innerClient;

    private final com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager serviceManager;

    public SapVirtualInstancesImpl(SapVirtualInstancesClient innerClient,
        com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SapAvailabilityZoneDetailsResult> invokeAvailabilityZoneDetailsWithResponse(String location,
        SapAvailabilityZoneDetailsRequest body, Context context) {
        Response<SapAvailabilityZoneDetailsResultInner> inner
            = this.serviceClient().invokeAvailabilityZoneDetailsWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapAvailabilityZoneDetailsResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapAvailabilityZoneDetailsResult invokeAvailabilityZoneDetails(String location,
        SapAvailabilityZoneDetailsRequest body) {
        SapAvailabilityZoneDetailsResultInner inner
            = this.serviceClient().invokeAvailabilityZoneDetails(location, body);
        if (inner != null) {
            return new SapAvailabilityZoneDetailsResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SapDiskConfigurationsResult> invokeDiskConfigurationsWithResponse(String location,
        SapDiskConfigurationsRequest body, Context context) {
        Response<SapDiskConfigurationsResultInner> inner
            = this.serviceClient().invokeDiskConfigurationsWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapDiskConfigurationsResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapDiskConfigurationsResult invokeDiskConfigurations(String location, SapDiskConfigurationsRequest body) {
        SapDiskConfigurationsResultInner inner = this.serviceClient().invokeDiskConfigurations(location, body);
        if (inner != null) {
            return new SapDiskConfigurationsResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SapSupportedResourceSkusResult> invokeSapSupportedSkuWithResponse(String location,
        SapSupportedSkusRequest body, Context context) {
        Response<SapSupportedResourceSkusResultInner> inner
            = this.serviceClient().invokeSapSupportedSkuWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapSupportedResourceSkusResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapSupportedResourceSkusResult invokeSapSupportedSku(String location, SapSupportedSkusRequest body) {
        SapSupportedResourceSkusResultInner inner = this.serviceClient().invokeSapSupportedSku(location, body);
        if (inner != null) {
            return new SapSupportedResourceSkusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SapSizingRecommendationResult> invokeSizingRecommendationsWithResponse(String location,
        SapSizingRecommendationRequest body, Context context) {
        Response<SapSizingRecommendationResultInner> inner
            = this.serviceClient().invokeSizingRecommendationsWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapSizingRecommendationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapSizingRecommendationResult invokeSizingRecommendations(String location,
        SapSizingRecommendationRequest body) {
        SapSizingRecommendationResultInner inner = this.serviceClient().invokeSizingRecommendations(location, body);
        if (inner != null) {
            return new SapSizingRecommendationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SapVirtualInstance> list() {
        PagedIterable<SapVirtualInstanceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SapVirtualInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SapVirtualInstance> list(Context context) {
        PagedIterable<SapVirtualInstanceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SapVirtualInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SapVirtualInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SapVirtualInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SapVirtualInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SapVirtualInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SapVirtualInstanceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SapVirtualInstanceImpl(inner1, this.manager()));
    }

    public Response<SapVirtualInstance> getByResourceGroupWithResponse(String resourceGroupName,
        String sapVirtualInstanceName, Context context) {
        Response<SapVirtualInstanceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, sapVirtualInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapVirtualInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapVirtualInstance getByResourceGroup(String resourceGroupName, String sapVirtualInstanceName) {
        SapVirtualInstanceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, sapVirtualInstanceName);
        if (inner != null) {
            return new SapVirtualInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String sapVirtualInstanceName) {
        this.serviceClient().delete(resourceGroupName, sapVirtualInstanceName);
    }

    public void delete(String resourceGroupName, String sapVirtualInstanceName, Context context) {
        this.serviceClient().delete(resourceGroupName, sapVirtualInstanceName, context);
    }

    public OperationStatusResult start(String resourceGroupName, String sapVirtualInstanceName) {
        OperationStatusResultInner inner = this.serviceClient().start(resourceGroupName, sapVirtualInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult start(String resourceGroupName, String sapVirtualInstanceName, StartRequest body,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().start(resourceGroupName, sapVirtualInstanceName, body, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stop(String resourceGroupName, String sapVirtualInstanceName) {
        OperationStatusResultInner inner = this.serviceClient().stop(resourceGroupName, sapVirtualInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stop(String resourceGroupName, String sapVirtualInstanceName, StopRequest body,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().stop(resourceGroupName, sapVirtualInstanceName, body, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SapVirtualInstance getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, sapVirtualInstanceName, Context.NONE).getValue();
    }

    public Response<SapVirtualInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, sapVirtualInstanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        this.delete(resourceGroupName, sapVirtualInstanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapVirtualInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sapVirtualInstances");
        if (sapVirtualInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sapVirtualInstances'.", id)));
        }
        this.delete(resourceGroupName, sapVirtualInstanceName, context);
    }

    private SapVirtualInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager manager() {
        return this.serviceManager;
    }

    public SapVirtualInstanceImpl define(String name) {
        return new SapVirtualInstanceImpl(name, this.manager());
    }
}
