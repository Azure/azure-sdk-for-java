// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the Database properties.
 */
@Immutable
public final class SapDatabaseProperties implements JsonSerializable<SapDatabaseProperties> {
    /*
     * Database subnet.
     */
    @Generated
    private String subnet;

    /*
     * Database SID name.
     */
    @Generated
    private String databaseSid;

    /*
     * Database type, that is if the DB is HANA, DB2, Oracle, SAP ASE, Max DB or MS SQL Server.
     */
    @Generated
    private String databaseType;

    /*
     * Database IP Address.
     */
    @Generated
    private String ipAddress;

    /*
     * The Load Balancer details such as LoadBalancer ID attached to Database Virtual Machines
     */
    @Generated
    private LoadBalancerDetails loadBalancerDetails;

    /*
     * The list of virtual machines corresponding to the Database resource.
     */
    @Generated
    private List<DatabaseVmDetails> vmDetails;

    /*
     * Defines the SAP Instance status.
     */
    @Generated
    private SapVirtualInstanceStatus status;

    /*
     * Defines the provisioning states.
     */
    @Generated
    private SapVirtualInstanceProvisioningState provisioningState;

    /*
     * Defines the errors related to Database resource.
     */
    @Generated
    private SapVirtualInstanceError errors;

    /**
     * Creates an instance of SapDatabaseProperties class.
     */
    @Generated
    public SapDatabaseProperties() {
    }

    /**
     * Get the subnet property: Database subnet.
     * 
     * @return the subnet value.
     */
    @Generated
    public String subnet() {
        return this.subnet;
    }

    /**
     * Get the databaseSid property: Database SID name.
     * 
     * @return the databaseSid value.
     */
    @Generated
    public String databaseSid() {
        return this.databaseSid;
    }

    /**
     * Get the databaseType property: Database type, that is if the DB is HANA, DB2, Oracle, SAP ASE, Max DB or MS SQL
     * Server.
     * 
     * @return the databaseType value.
     */
    @Generated
    public String databaseType() {
        return this.databaseType;
    }

    /**
     * Get the ipAddress property: Database IP Address.
     * 
     * @return the ipAddress value.
     */
    @Generated
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the loadBalancerDetails property: The Load Balancer details such as LoadBalancer ID attached to Database
     * Virtual Machines.
     * 
     * @return the loadBalancerDetails value.
     */
    @Generated
    public LoadBalancerDetails loadBalancerDetails() {
        return this.loadBalancerDetails;
    }

    /**
     * Get the vmDetails property: The list of virtual machines corresponding to the Database resource.
     * 
     * @return the vmDetails value.
     */
    @Generated
    public List<DatabaseVmDetails> vmDetails() {
        return this.vmDetails;
    }

    /**
     * Get the status property: Defines the SAP Instance status.
     * 
     * @return the status value.
     */
    @Generated
    public SapVirtualInstanceStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public SapVirtualInstanceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errors property: Defines the errors related to Database resource.
     * 
     * @return the errors value.
     */
    @Generated
    public SapVirtualInstanceError errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (loadBalancerDetails() != null) {
            loadBalancerDetails().validate();
        }
        if (vmDetails() != null) {
            vmDetails().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapDatabaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapDatabaseProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapDatabaseProperties.
     */
    public static SapDatabaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapDatabaseProperties deserializedSapDatabaseProperties = new SapDatabaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnet".equals(fieldName)) {
                    deserializedSapDatabaseProperties.subnet = reader.getString();
                } else if ("databaseSid".equals(fieldName)) {
                    deserializedSapDatabaseProperties.databaseSid = reader.getString();
                } else if ("databaseType".equals(fieldName)) {
                    deserializedSapDatabaseProperties.databaseType = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedSapDatabaseProperties.ipAddress = reader.getString();
                } else if ("loadBalancerDetails".equals(fieldName)) {
                    deserializedSapDatabaseProperties.loadBalancerDetails = LoadBalancerDetails.fromJson(reader);
                } else if ("vmDetails".equals(fieldName)) {
                    List<DatabaseVmDetails> vmDetails
                        = reader.readArray(reader1 -> DatabaseVmDetails.fromJson(reader1));
                    deserializedSapDatabaseProperties.vmDetails = vmDetails;
                } else if ("status".equals(fieldName)) {
                    deserializedSapDatabaseProperties.status = SapVirtualInstanceStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSapDatabaseProperties.provisioningState
                        = SapVirtualInstanceProvisioningState.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    deserializedSapDatabaseProperties.errors = SapVirtualInstanceError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapDatabaseProperties;
        });
    }
}
