// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see
 * [here](https://go.microsoft.com/fwlink/?linkid=2212611&amp;clcid=0x409).
 */
@Fluent
public final class ThreeTierConfiguration extends InfrastructureConfiguration {
    /*
     * The SAP deployment type. Eg: SingleServer/ThreeTier.
     */
    private SapDeploymentType deploymentType = SapDeploymentType.THREE_TIER;

    /*
     * Network configuration common to all servers
     */
    private NetworkConfiguration networkConfiguration;

    /*
     * The central server configuration.
     */
    private CentralServerConfiguration centralServer;

    /*
     * The application server configuration.
     */
    private ApplicationServerConfiguration applicationServer;

    /*
     * The database configuration.
     */
    private DatabaseConfiguration databaseServer;

    /*
     * The high availability configuration.
     */
    private HighAvailabilityConfiguration highAvailabilityConfig;

    /*
     * The storage configuration.
     */
    private StorageConfiguration storageConfiguration;

    /*
     * The set of custom names to be used for underlying azure resources that are part of the SAP system.
     */
    private ThreeTierCustomResourceNames customResourceNames;

    /**
     * Creates an instance of ThreeTierConfiguration class.
     */
    public ThreeTierConfiguration() {
    }

    /**
     * Get the deploymentType property: The SAP deployment type. Eg: SingleServer/ThreeTier.
     * 
     * @return the deploymentType value.
     */
    @Override
    public SapDeploymentType deploymentType() {
        return this.deploymentType;
    }

    /**
     * Get the networkConfiguration property: Network configuration common to all servers.
     * 
     * @return the networkConfiguration value.
     */
    public NetworkConfiguration networkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Set the networkConfiguration property: Network configuration common to all servers.
     * 
     * @param networkConfiguration the networkConfiguration value to set.
     * @return the ThreeTierConfiguration object itself.
     */
    public ThreeTierConfiguration withNetworkConfiguration(NetworkConfiguration networkConfiguration) {
        this.networkConfiguration = networkConfiguration;
        return this;
    }

    /**
     * Get the centralServer property: The central server configuration.
     * 
     * @return the centralServer value.
     */
    public CentralServerConfiguration centralServer() {
        return this.centralServer;
    }

    /**
     * Set the centralServer property: The central server configuration.
     * 
     * @param centralServer the centralServer value to set.
     * @return the ThreeTierConfiguration object itself.
     */
    public ThreeTierConfiguration withCentralServer(CentralServerConfiguration centralServer) {
        this.centralServer = centralServer;
        return this;
    }

    /**
     * Get the applicationServer property: The application server configuration.
     * 
     * @return the applicationServer value.
     */
    public ApplicationServerConfiguration applicationServer() {
        return this.applicationServer;
    }

    /**
     * Set the applicationServer property: The application server configuration.
     * 
     * @param applicationServer the applicationServer value to set.
     * @return the ThreeTierConfiguration object itself.
     */
    public ThreeTierConfiguration withApplicationServer(ApplicationServerConfiguration applicationServer) {
        this.applicationServer = applicationServer;
        return this;
    }

    /**
     * Get the databaseServer property: The database configuration.
     * 
     * @return the databaseServer value.
     */
    public DatabaseConfiguration databaseServer() {
        return this.databaseServer;
    }

    /**
     * Set the databaseServer property: The database configuration.
     * 
     * @param databaseServer the databaseServer value to set.
     * @return the ThreeTierConfiguration object itself.
     */
    public ThreeTierConfiguration withDatabaseServer(DatabaseConfiguration databaseServer) {
        this.databaseServer = databaseServer;
        return this;
    }

    /**
     * Get the highAvailabilityConfig property: The high availability configuration.
     * 
     * @return the highAvailabilityConfig value.
     */
    public HighAvailabilityConfiguration highAvailabilityConfig() {
        return this.highAvailabilityConfig;
    }

    /**
     * Set the highAvailabilityConfig property: The high availability configuration.
     * 
     * @param highAvailabilityConfig the highAvailabilityConfig value to set.
     * @return the ThreeTierConfiguration object itself.
     */
    public ThreeTierConfiguration withHighAvailabilityConfig(HighAvailabilityConfiguration highAvailabilityConfig) {
        this.highAvailabilityConfig = highAvailabilityConfig;
        return this;
    }

    /**
     * Get the storageConfiguration property: The storage configuration.
     * 
     * @return the storageConfiguration value.
     */
    public StorageConfiguration storageConfiguration() {
        return this.storageConfiguration;
    }

    /**
     * Set the storageConfiguration property: The storage configuration.
     * 
     * @param storageConfiguration the storageConfiguration value to set.
     * @return the ThreeTierConfiguration object itself.
     */
    public ThreeTierConfiguration withStorageConfiguration(StorageConfiguration storageConfiguration) {
        this.storageConfiguration = storageConfiguration;
        return this;
    }

    /**
     * Get the customResourceNames property: The set of custom names to be used for underlying azure resources that are
     * part of the SAP system.
     * 
     * @return the customResourceNames value.
     */
    public ThreeTierCustomResourceNames customResourceNames() {
        return this.customResourceNames;
    }

    /**
     * Set the customResourceNames property: The set of custom names to be used for underlying azure resources that are
     * part of the SAP system.
     * 
     * @param customResourceNames the customResourceNames value to set.
     * @return the ThreeTierConfiguration object itself.
     */
    public ThreeTierConfiguration withCustomResourceNames(ThreeTierCustomResourceNames customResourceNames) {
        this.customResourceNames = customResourceNames;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ThreeTierConfiguration withAppResourceGroup(String appResourceGroup) {
        super.withAppResourceGroup(appResourceGroup);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (networkConfiguration() != null) {
            networkConfiguration().validate();
        }
        if (centralServer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property centralServer in model ThreeTierConfiguration"));
        } else {
            centralServer().validate();
        }
        if (applicationServer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property applicationServer in model ThreeTierConfiguration"));
        } else {
            applicationServer().validate();
        }
        if (databaseServer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property databaseServer in model ThreeTierConfiguration"));
        } else {
            databaseServer().validate();
        }
        if (highAvailabilityConfig() != null) {
            highAvailabilityConfig().validate();
        }
        if (storageConfiguration() != null) {
            storageConfiguration().validate();
        }
        if (customResourceNames() != null) {
            customResourceNames().validate();
        }
        if (appResourceGroup() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property appResourceGroup in model ThreeTierConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ThreeTierConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("appResourceGroup", appResourceGroup());
        jsonWriter.writeJsonField("centralServer", this.centralServer);
        jsonWriter.writeJsonField("applicationServer", this.applicationServer);
        jsonWriter.writeJsonField("databaseServer", this.databaseServer);
        jsonWriter.writeStringField("deploymentType",
            this.deploymentType == null ? null : this.deploymentType.toString());
        jsonWriter.writeJsonField("networkConfiguration", this.networkConfiguration);
        jsonWriter.writeJsonField("highAvailabilityConfig", this.highAvailabilityConfig);
        jsonWriter.writeJsonField("storageConfiguration", this.storageConfiguration);
        jsonWriter.writeJsonField("customResourceNames", this.customResourceNames);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThreeTierConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThreeTierConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ThreeTierConfiguration.
     */
    public static ThreeTierConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThreeTierConfiguration deserializedThreeTierConfiguration = new ThreeTierConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appResourceGroup".equals(fieldName)) {
                    deserializedThreeTierConfiguration.withAppResourceGroup(reader.getString());
                } else if ("centralServer".equals(fieldName)) {
                    deserializedThreeTierConfiguration.centralServer = CentralServerConfiguration.fromJson(reader);
                } else if ("applicationServer".equals(fieldName)) {
                    deserializedThreeTierConfiguration.applicationServer
                        = ApplicationServerConfiguration.fromJson(reader);
                } else if ("databaseServer".equals(fieldName)) {
                    deserializedThreeTierConfiguration.databaseServer = DatabaseConfiguration.fromJson(reader);
                } else if ("deploymentType".equals(fieldName)) {
                    deserializedThreeTierConfiguration.deploymentType
                        = SapDeploymentType.fromString(reader.getString());
                } else if ("networkConfiguration".equals(fieldName)) {
                    deserializedThreeTierConfiguration.networkConfiguration = NetworkConfiguration.fromJson(reader);
                } else if ("highAvailabilityConfig".equals(fieldName)) {
                    deserializedThreeTierConfiguration.highAvailabilityConfig
                        = HighAvailabilityConfiguration.fromJson(reader);
                } else if ("storageConfiguration".equals(fieldName)) {
                    deserializedThreeTierConfiguration.storageConfiguration = StorageConfiguration.fromJson(reader);
                } else if ("customResourceNames".equals(fieldName)) {
                    deserializedThreeTierConfiguration.customResourceNames
                        = ThreeTierCustomResourceNames.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThreeTierConfiguration;
        });
    }
}
