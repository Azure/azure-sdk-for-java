// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SAP request to get list of disk configurations.
 */
@Fluent
public final class SapDiskConfigurationsRequest implements JsonSerializable<SapDiskConfigurationsRequest> {
    /*
     * The geo-location where the SAP resources will be created.
     */
    private String appLocation;

    /*
     * Defines the environment type - Production/Non Production.
     */
    private SapEnvironmentType environment;

    /*
     * Defines the SAP Product type.
     */
    private SapProductType sapProduct;

    /*
     * The database type. Eg: HANA, DB2, etc
     */
    private SapDatabaseType databaseType;

    /*
     * The deployment type. Eg: SingleServer/ThreeTier
     */
    private SapDeploymentType deploymentType;

    /*
     * The VM SKU for database instance.
     */
    private String dbVmSku;

    /**
     * Creates an instance of SapDiskConfigurationsRequest class.
     */
    public SapDiskConfigurationsRequest() {
    }

    /**
     * Get the appLocation property: The geo-location where the SAP resources will be created.
     * 
     * @return the appLocation value.
     */
    public String appLocation() {
        return this.appLocation;
    }

    /**
     * Set the appLocation property: The geo-location where the SAP resources will be created.
     * 
     * @param appLocation the appLocation value to set.
     * @return the SapDiskConfigurationsRequest object itself.
     */
    public SapDiskConfigurationsRequest withAppLocation(String appLocation) {
        this.appLocation = appLocation;
        return this;
    }

    /**
     * Get the environment property: Defines the environment type - Production/Non Production.
     * 
     * @return the environment value.
     */
    public SapEnvironmentType environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Defines the environment type - Production/Non Production.
     * 
     * @param environment the environment value to set.
     * @return the SapDiskConfigurationsRequest object itself.
     */
    public SapDiskConfigurationsRequest withEnvironment(SapEnvironmentType environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the sapProduct property: Defines the SAP Product type.
     * 
     * @return the sapProduct value.
     */
    public SapProductType sapProduct() {
        return this.sapProduct;
    }

    /**
     * Set the sapProduct property: Defines the SAP Product type.
     * 
     * @param sapProduct the sapProduct value to set.
     * @return the SapDiskConfigurationsRequest object itself.
     */
    public SapDiskConfigurationsRequest withSapProduct(SapProductType sapProduct) {
        this.sapProduct = sapProduct;
        return this;
    }

    /**
     * Get the databaseType property: The database type. Eg: HANA, DB2, etc.
     * 
     * @return the databaseType value.
     */
    public SapDatabaseType databaseType() {
        return this.databaseType;
    }

    /**
     * Set the databaseType property: The database type. Eg: HANA, DB2, etc.
     * 
     * @param databaseType the databaseType value to set.
     * @return the SapDiskConfigurationsRequest object itself.
     */
    public SapDiskConfigurationsRequest withDatabaseType(SapDatabaseType databaseType) {
        this.databaseType = databaseType;
        return this;
    }

    /**
     * Get the deploymentType property: The deployment type. Eg: SingleServer/ThreeTier.
     * 
     * @return the deploymentType value.
     */
    public SapDeploymentType deploymentType() {
        return this.deploymentType;
    }

    /**
     * Set the deploymentType property: The deployment type. Eg: SingleServer/ThreeTier.
     * 
     * @param deploymentType the deploymentType value to set.
     * @return the SapDiskConfigurationsRequest object itself.
     */
    public SapDiskConfigurationsRequest withDeploymentType(SapDeploymentType deploymentType) {
        this.deploymentType = deploymentType;
        return this;
    }

    /**
     * Get the dbVmSku property: The VM SKU for database instance.
     * 
     * @return the dbVmSku value.
     */
    public String dbVmSku() {
        return this.dbVmSku;
    }

    /**
     * Set the dbVmSku property: The VM SKU for database instance.
     * 
     * @param dbVmSku the dbVmSku value to set.
     * @return the SapDiskConfigurationsRequest object itself.
     */
    public SapDiskConfigurationsRequest withDbVmSku(String dbVmSku) {
        this.dbVmSku = dbVmSku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property appLocation in model SapDiskConfigurationsRequest"));
        }
        if (environment() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property environment in model SapDiskConfigurationsRequest"));
        }
        if (sapProduct() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sapProduct in model SapDiskConfigurationsRequest"));
        }
        if (databaseType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property databaseType in model SapDiskConfigurationsRequest"));
        }
        if (deploymentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property deploymentType in model SapDiskConfigurationsRequest"));
        }
        if (dbVmSku() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dbVmSku in model SapDiskConfigurationsRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SapDiskConfigurationsRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("appLocation", this.appLocation);
        jsonWriter.writeStringField("environment", this.environment == null ? null : this.environment.toString());
        jsonWriter.writeStringField("sapProduct", this.sapProduct == null ? null : this.sapProduct.toString());
        jsonWriter.writeStringField("databaseType", this.databaseType == null ? null : this.databaseType.toString());
        jsonWriter.writeStringField("deploymentType",
            this.deploymentType == null ? null : this.deploymentType.toString());
        jsonWriter.writeStringField("dbVmSku", this.dbVmSku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapDiskConfigurationsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapDiskConfigurationsRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SapDiskConfigurationsRequest.
     */
    public static SapDiskConfigurationsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapDiskConfigurationsRequest deserializedSapDiskConfigurationsRequest = new SapDiskConfigurationsRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appLocation".equals(fieldName)) {
                    deserializedSapDiskConfigurationsRequest.appLocation = reader.getString();
                } else if ("environment".equals(fieldName)) {
                    deserializedSapDiskConfigurationsRequest.environment
                        = SapEnvironmentType.fromString(reader.getString());
                } else if ("sapProduct".equals(fieldName)) {
                    deserializedSapDiskConfigurationsRequest.sapProduct = SapProductType.fromString(reader.getString());
                } else if ("databaseType".equals(fieldName)) {
                    deserializedSapDiskConfigurationsRequest.databaseType
                        = SapDatabaseType.fromString(reader.getString());
                } else if ("deploymentType".equals(fieldName)) {
                    deserializedSapDiskConfigurationsRequest.deploymentType
                        = SapDeploymentType.fromString(reader.getString());
                } else if ("dbVmSku".equals(fieldName)) {
                    deserializedSapDiskConfigurationsRequest.dbVmSku = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapDiskConfigurationsRequest;
        });
    }
}
