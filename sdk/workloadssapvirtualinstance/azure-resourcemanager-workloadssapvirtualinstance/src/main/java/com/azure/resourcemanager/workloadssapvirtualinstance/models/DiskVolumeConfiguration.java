// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The disk configuration required for the selected volume.
 */
@Fluent
public final class DiskVolumeConfiguration implements JsonSerializable<DiskVolumeConfiguration> {
    /*
     * The total number of disks required for the concerned volume.
     */
    private Long count;

    /*
     * The disk size in GB.
     */
    private Long sizeGB;

    /*
     * The disk SKU details.
     */
    private DiskSku sku;

    /**
     * Creates an instance of DiskVolumeConfiguration class.
     */
    public DiskVolumeConfiguration() {
    }

    /**
     * Get the count property: The total number of disks required for the concerned volume.
     * 
     * @return the count value.
     */
    public Long count() {
        return this.count;
    }

    /**
     * Set the count property: The total number of disks required for the concerned volume.
     * 
     * @param count the count value to set.
     * @return the DiskVolumeConfiguration object itself.
     */
    public DiskVolumeConfiguration withCount(Long count) {
        this.count = count;
        return this;
    }

    /**
     * Get the sizeGB property: The disk size in GB.
     * 
     * @return the sizeGB value.
     */
    public Long sizeGB() {
        return this.sizeGB;
    }

    /**
     * Set the sizeGB property: The disk size in GB.
     * 
     * @param sizeGB the sizeGB value to set.
     * @return the DiskVolumeConfiguration object itself.
     */
    public DiskVolumeConfiguration withSizeGB(Long sizeGB) {
        this.sizeGB = sizeGB;
        return this;
    }

    /**
     * Get the sku property: The disk SKU details.
     * 
     * @return the sku value.
     */
    public DiskSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The disk SKU details.
     * 
     * @param sku the sku value to set.
     * @return the DiskVolumeConfiguration object itself.
     */
    public DiskVolumeConfiguration withSku(DiskSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeNumberField("sizeGB", this.sizeGB);
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskVolumeConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskVolumeConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskVolumeConfiguration.
     */
    public static DiskVolumeConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskVolumeConfiguration deserializedDiskVolumeConfiguration = new DiskVolumeConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedDiskVolumeConfiguration.count = reader.getNullable(JsonReader::getLong);
                } else if ("sizeGB".equals(fieldName)) {
                    deserializedDiskVolumeConfiguration.sizeGB = reader.getNullable(JsonReader::getLong);
                } else if ("sku".equals(fieldName)) {
                    deserializedDiskVolumeConfiguration.sku = DiskSku.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskVolumeConfiguration;
        });
    }
}
