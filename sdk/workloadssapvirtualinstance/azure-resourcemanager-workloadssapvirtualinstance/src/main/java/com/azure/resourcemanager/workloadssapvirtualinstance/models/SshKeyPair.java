// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format.
 * &lt;br&gt;&lt;br&gt; For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in
 * Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
 */
@Fluent
public final class SshKeyPair implements JsonSerializable<SshKeyPair> {
    /*
     * SSH public key
     */
    private String publicKey;

    /*
     * SSH private key.
     */
    private String privateKey;

    /**
     * Creates an instance of SshKeyPair class.
     */
    public SshKeyPair() {
    }

    /**
     * Get the publicKey property: SSH public key.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Set the publicKey property: SSH public key.
     * 
     * @param publicKey the publicKey value to set.
     * @return the SshKeyPair object itself.
     */
    public SshKeyPair withPublicKey(String publicKey) {
        this.publicKey = publicKey;
        return this;
    }

    /**
     * Get the privateKey property: SSH private key.
     * 
     * @return the privateKey value.
     */
    public String privateKey() {
        return this.privateKey;
    }

    /**
     * Set the privateKey property: SSH private key.
     * 
     * @param privateKey the privateKey value to set.
     * @return the SshKeyPair object itself.
     */
    public SshKeyPair withPrivateKey(String privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publicKey", this.publicKey);
        jsonWriter.writeStringField("privateKey", this.privateKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SshKeyPair from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SshKeyPair if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SshKeyPair.
     */
    public static SshKeyPair fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SshKeyPair deserializedSshKeyPair = new SshKeyPair();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publicKey".equals(fieldName)) {
                    deserializedSshKeyPair.publicKey = reader.getString();
                } else if ("privateKey".equals(fieldName)) {
                    deserializedSshKeyPair.privateKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSshKeyPair;
        });
    }
}
