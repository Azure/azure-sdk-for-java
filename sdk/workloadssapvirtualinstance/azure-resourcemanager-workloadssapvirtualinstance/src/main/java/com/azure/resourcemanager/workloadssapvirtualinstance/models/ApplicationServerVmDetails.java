// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Application Server VM Details.
 */
@Immutable
public final class ApplicationServerVmDetails implements JsonSerializable<ApplicationServerVmDetails> {
    /*
     * Defines the type of application server VM.
     */
    private ApplicationServerVirtualMachineType type;

    /*
     * The virtual machine id.
     */
    private String virtualMachineId;

    /*
     * Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared
     * Storage.
     */
    private List<StorageInformation> storageDetails;

    /**
     * Creates an instance of ApplicationServerVmDetails class.
     */
    private ApplicationServerVmDetails() {
    }

    /**
     * Get the type property: Defines the type of application server VM.
     * 
     * @return the type value.
     */
    public ApplicationServerVirtualMachineType type() {
        return this.type;
    }

    /**
     * Get the virtualMachineId property: The virtual machine id.
     * 
     * @return the virtualMachineId value.
     */
    public String virtualMachineId() {
        return this.virtualMachineId;
    }

    /**
     * Get the storageDetails property: Storage details of all the Storage Accounts attached to the App Virtual Machine.
     * For e.g. NFS on AFS Shared Storage.
     * 
     * @return the storageDetails value.
     */
    public List<StorageInformation> storageDetails() {
        return this.storageDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageDetails() != null) {
            storageDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationServerVmDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationServerVmDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationServerVmDetails.
     */
    public static ApplicationServerVmDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationServerVmDetails deserializedApplicationServerVmDetails = new ApplicationServerVmDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedApplicationServerVmDetails.type
                        = ApplicationServerVirtualMachineType.fromString(reader.getString());
                } else if ("virtualMachineId".equals(fieldName)) {
                    deserializedApplicationServerVmDetails.virtualMachineId = reader.getString();
                } else if ("storageDetails".equals(fieldName)) {
                    List<StorageInformation> storageDetails
                        = reader.readArray(reader1 -> StorageInformation.fromJson(reader1));
                    deserializedApplicationServerVmDetails.storageDetails = storageDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationServerVmDetails;
        });
    }
}
