// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the SAP Enqueue Replication Server (ERS) properties.
 */
@Immutable
public final class EnqueueReplicationServerProperties implements JsonSerializable<EnqueueReplicationServerProperties> {
    /*
     * Defines the type of Enqueue Replication Server.
     */
    private EnqueueReplicationServerType ersVersion;

    /*
     * ERS Instance Number.
     */
    private String instanceNo;

    /*
     * ERS SAP Hostname.
     */
    private String hostname;

    /*
     * ERS SAP Kernel Version.
     */
    private String kernelVersion;

    /*
     * ERS SAP Kernel Patch level.
     */
    private String kernelPatch;

    /*
     * ERS SAP IP Address.
     */
    private String ipAddress;

    /*
     * Defines the health of SAP Instances.
     */
    private SapHealthState health;

    /**
     * Creates an instance of EnqueueReplicationServerProperties class.
     */
    public EnqueueReplicationServerProperties() {
    }

    /**
     * Get the ersVersion property: Defines the type of Enqueue Replication Server.
     * 
     * @return the ersVersion value.
     */
    public EnqueueReplicationServerType ersVersion() {
        return this.ersVersion;
    }

    /**
     * Get the instanceNo property: ERS Instance Number.
     * 
     * @return the instanceNo value.
     */
    public String instanceNo() {
        return this.instanceNo;
    }

    /**
     * Get the hostname property: ERS SAP Hostname.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the kernelVersion property: ERS SAP Kernel Version.
     * 
     * @return the kernelVersion value.
     */
    public String kernelVersion() {
        return this.kernelVersion;
    }

    /**
     * Get the kernelPatch property: ERS SAP Kernel Patch level.
     * 
     * @return the kernelPatch value.
     */
    public String kernelPatch() {
        return this.kernelPatch;
    }

    /**
     * Get the ipAddress property: ERS SAP IP Address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the health property: Defines the health of SAP Instances.
     * 
     * @return the health value.
     */
    public SapHealthState health() {
        return this.health;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnqueueReplicationServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnqueueReplicationServerProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnqueueReplicationServerProperties.
     */
    public static EnqueueReplicationServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnqueueReplicationServerProperties deserializedEnqueueReplicationServerProperties
                = new EnqueueReplicationServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ersVersion".equals(fieldName)) {
                    deserializedEnqueueReplicationServerProperties.ersVersion
                        = EnqueueReplicationServerType.fromString(reader.getString());
                } else if ("instanceNo".equals(fieldName)) {
                    deserializedEnqueueReplicationServerProperties.instanceNo = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedEnqueueReplicationServerProperties.hostname = reader.getString();
                } else if ("kernelVersion".equals(fieldName)) {
                    deserializedEnqueueReplicationServerProperties.kernelVersion = reader.getString();
                } else if ("kernelPatch".equals(fieldName)) {
                    deserializedEnqueueReplicationServerProperties.kernelPatch = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedEnqueueReplicationServerProperties.ipAddress = reader.getString();
                } else if ("health".equals(fieldName)) {
                    deserializedEnqueueReplicationServerProperties.health
                        = SapHealthState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnqueueReplicationServerProperties;
        });
    }
}
