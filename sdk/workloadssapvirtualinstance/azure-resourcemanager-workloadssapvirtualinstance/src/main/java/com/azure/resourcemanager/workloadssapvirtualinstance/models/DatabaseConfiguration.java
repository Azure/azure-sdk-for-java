// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the database configuration.
 */
@Fluent
public final class DatabaseConfiguration implements JsonSerializable<DatabaseConfiguration> {
    /*
     * The database type.
     */
    private SapDatabaseType databaseType;

    /*
     * The subnet id.
     */
    private String subnetId;

    /*
     * Gets or sets the virtual machine configuration.
     */
    private VirtualMachineConfiguration virtualMachineConfiguration;

    /*
     * The number of database VMs.
     */
    private long instanceCount;

    /*
     * Gets or sets the disk configuration.
     */
    private DiskConfiguration diskConfiguration;

    /**
     * Creates an instance of DatabaseConfiguration class.
     */
    public DatabaseConfiguration() {
    }

    /**
     * Get the databaseType property: The database type.
     * 
     * @return the databaseType value.
     */
    public SapDatabaseType databaseType() {
        return this.databaseType;
    }

    /**
     * Set the databaseType property: The database type.
     * 
     * @param databaseType the databaseType value to set.
     * @return the DatabaseConfiguration object itself.
     */
    public DatabaseConfiguration withDatabaseType(SapDatabaseType databaseType) {
        this.databaseType = databaseType;
        return this;
    }

    /**
     * Get the subnetId property: The subnet id.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The subnet id.
     * 
     * @param subnetId the subnetId value to set.
     * @return the DatabaseConfiguration object itself.
     */
    public DatabaseConfiguration withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the virtualMachineConfiguration property: Gets or sets the virtual machine configuration.
     * 
     * @return the virtualMachineConfiguration value.
     */
    public VirtualMachineConfiguration virtualMachineConfiguration() {
        return this.virtualMachineConfiguration;
    }

    /**
     * Set the virtualMachineConfiguration property: Gets or sets the virtual machine configuration.
     * 
     * @param virtualMachineConfiguration the virtualMachineConfiguration value to set.
     * @return the DatabaseConfiguration object itself.
     */
    public DatabaseConfiguration
        withVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
        this.virtualMachineConfiguration = virtualMachineConfiguration;
        return this;
    }

    /**
     * Get the instanceCount property: The number of database VMs.
     * 
     * @return the instanceCount value.
     */
    public long instanceCount() {
        return this.instanceCount;
    }

    /**
     * Set the instanceCount property: The number of database VMs.
     * 
     * @param instanceCount the instanceCount value to set.
     * @return the DatabaseConfiguration object itself.
     */
    public DatabaseConfiguration withInstanceCount(long instanceCount) {
        this.instanceCount = instanceCount;
        return this;
    }

    /**
     * Get the diskConfiguration property: Gets or sets the disk configuration.
     * 
     * @return the diskConfiguration value.
     */
    public DiskConfiguration diskConfiguration() {
        return this.diskConfiguration;
    }

    /**
     * Set the diskConfiguration property: Gets or sets the disk configuration.
     * 
     * @param diskConfiguration the diskConfiguration value to set.
     * @return the DatabaseConfiguration object itself.
     */
    public DatabaseConfiguration withDiskConfiguration(DiskConfiguration diskConfiguration) {
        this.diskConfiguration = diskConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property subnetId in model DatabaseConfiguration"));
        }
        if (virtualMachineConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property virtualMachineConfiguration in model DatabaseConfiguration"));
        } else {
            virtualMachineConfiguration().validate();
        }
        if (diskConfiguration() != null) {
            diskConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabaseConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeJsonField("virtualMachineConfiguration", this.virtualMachineConfiguration);
        jsonWriter.writeLongField("instanceCount", this.instanceCount);
        jsonWriter.writeStringField("databaseType", this.databaseType == null ? null : this.databaseType.toString());
        jsonWriter.writeJsonField("diskConfiguration", this.diskConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabaseConfiguration.
     */
    public static DatabaseConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseConfiguration deserializedDatabaseConfiguration = new DatabaseConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedDatabaseConfiguration.subnetId = reader.getString();
                } else if ("virtualMachineConfiguration".equals(fieldName)) {
                    deserializedDatabaseConfiguration.virtualMachineConfiguration
                        = VirtualMachineConfiguration.fromJson(reader);
                } else if ("instanceCount".equals(fieldName)) {
                    deserializedDatabaseConfiguration.instanceCount = reader.getLong();
                } else if ("databaseType".equals(fieldName)) {
                    deserializedDatabaseConfiguration.databaseType = SapDatabaseType.fromString(reader.getString());
                } else if ("diskConfiguration".equals(fieldName)) {
                    deserializedDatabaseConfiguration.diskConfiguration = DiskConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseConfiguration;
        });
    }
}
