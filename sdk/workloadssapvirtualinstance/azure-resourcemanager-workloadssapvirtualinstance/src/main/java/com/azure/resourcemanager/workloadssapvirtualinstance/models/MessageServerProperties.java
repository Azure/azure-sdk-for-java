// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the SAP message server properties.
 */
@Immutable
public final class MessageServerProperties implements JsonSerializable<MessageServerProperties> {
    /*
     * message server port.
     */
    private Long msPort;

    /*
     * message server internal MS port.
     */
    private Long internalMsPort;

    /*
     * message server HTTP Port.
     */
    private Long httpPort;

    /*
     * message server HTTPS Port.
     */
    private Long httpsPort;

    /*
     * message server SAP Hostname.
     */
    private String hostname;

    /*
     * message server IP Address.
     */
    private String ipAddress;

    /*
     * Defines the health of SAP Instances.
     */
    private SapHealthState health;

    /**
     * Creates an instance of MessageServerProperties class.
     */
    public MessageServerProperties() {
    }

    /**
     * Get the msPort property: message server port.
     * 
     * @return the msPort value.
     */
    public Long msPort() {
        return this.msPort;
    }

    /**
     * Get the internalMsPort property: message server internal MS port.
     * 
     * @return the internalMsPort value.
     */
    public Long internalMsPort() {
        return this.internalMsPort;
    }

    /**
     * Get the httpPort property: message server HTTP Port.
     * 
     * @return the httpPort value.
     */
    public Long httpPort() {
        return this.httpPort;
    }

    /**
     * Get the httpsPort property: message server HTTPS Port.
     * 
     * @return the httpsPort value.
     */
    public Long httpsPort() {
        return this.httpsPort;
    }

    /**
     * Get the hostname property: message server SAP Hostname.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the ipAddress property: message server IP Address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the health property: Defines the health of SAP Instances.
     * 
     * @return the health value.
     */
    public SapHealthState health() {
        return this.health;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageServerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MessageServerProperties.
     */
    public static MessageServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageServerProperties deserializedMessageServerProperties = new MessageServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("msPort".equals(fieldName)) {
                    deserializedMessageServerProperties.msPort = reader.getNullable(JsonReader::getLong);
                } else if ("internalMsPort".equals(fieldName)) {
                    deserializedMessageServerProperties.internalMsPort = reader.getNullable(JsonReader::getLong);
                } else if ("httpPort".equals(fieldName)) {
                    deserializedMessageServerProperties.httpPort = reader.getNullable(JsonReader::getLong);
                } else if ("httpsPort".equals(fieldName)) {
                    deserializedMessageServerProperties.httpsPort = reader.getNullable(JsonReader::getLong);
                } else if ("hostname".equals(fieldName)) {
                    deserializedMessageServerProperties.hostname = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedMessageServerProperties.ipAddress = reader.getString();
                } else if ("health".equals(fieldName)) {
                    deserializedMessageServerProperties.health = SapHealthState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessageServerProperties;
        });
    }
}
