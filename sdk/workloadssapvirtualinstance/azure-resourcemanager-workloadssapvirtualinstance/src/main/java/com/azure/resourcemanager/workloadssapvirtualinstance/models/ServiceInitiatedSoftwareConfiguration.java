// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SAP Software configuration Input when the software is to be installed by service.
 */
@Fluent
public final class ServiceInitiatedSoftwareConfiguration extends SoftwareConfiguration {
    /*
     * The SAP software installation type.
     */
    private SapSoftwareInstallationType softwareInstallationType = SapSoftwareInstallationType.SERVICE_INITIATED;

    /*
     * The URL to the SAP Build of Materials(BOM) file.
     */
    private String bomUrl;

    /*
     * The software version to install.
     */
    private String softwareVersion;

    /*
     * The SAP bits storage account id.
     */
    private String sapBitsStorageAccountId;

    /*
     * The FQDN to set for the SAP system during install.
     */
    private String sapFqdn;

    /*
     * The SSH private key.
     */
    private String sshPrivateKey;

    /*
     * Gets or sets the HA software configuration.
     */
    private HighAvailabilitySoftwareConfiguration highAvailabilitySoftwareConfiguration;

    /**
     * Creates an instance of ServiceInitiatedSoftwareConfiguration class.
     */
    public ServiceInitiatedSoftwareConfiguration() {
    }

    /**
     * Get the softwareInstallationType property: The SAP software installation type.
     * 
     * @return the softwareInstallationType value.
     */
    @Override
    public SapSoftwareInstallationType softwareInstallationType() {
        return this.softwareInstallationType;
    }

    /**
     * Get the bomUrl property: The URL to the SAP Build of Materials(BOM) file.
     * 
     * @return the bomUrl value.
     */
    public String bomUrl() {
        return this.bomUrl;
    }

    /**
     * Set the bomUrl property: The URL to the SAP Build of Materials(BOM) file.
     * 
     * @param bomUrl the bomUrl value to set.
     * @return the ServiceInitiatedSoftwareConfiguration object itself.
     */
    public ServiceInitiatedSoftwareConfiguration withBomUrl(String bomUrl) {
        this.bomUrl = bomUrl;
        return this;
    }

    /**
     * Get the softwareVersion property: The software version to install.
     * 
     * @return the softwareVersion value.
     */
    public String softwareVersion() {
        return this.softwareVersion;
    }

    /**
     * Set the softwareVersion property: The software version to install.
     * 
     * @param softwareVersion the softwareVersion value to set.
     * @return the ServiceInitiatedSoftwareConfiguration object itself.
     */
    public ServiceInitiatedSoftwareConfiguration withSoftwareVersion(String softwareVersion) {
        this.softwareVersion = softwareVersion;
        return this;
    }

    /**
     * Get the sapBitsStorageAccountId property: The SAP bits storage account id.
     * 
     * @return the sapBitsStorageAccountId value.
     */
    public String sapBitsStorageAccountId() {
        return this.sapBitsStorageAccountId;
    }

    /**
     * Set the sapBitsStorageAccountId property: The SAP bits storage account id.
     * 
     * @param sapBitsStorageAccountId the sapBitsStorageAccountId value to set.
     * @return the ServiceInitiatedSoftwareConfiguration object itself.
     */
    public ServiceInitiatedSoftwareConfiguration withSapBitsStorageAccountId(String sapBitsStorageAccountId) {
        this.sapBitsStorageAccountId = sapBitsStorageAccountId;
        return this;
    }

    /**
     * Get the sapFqdn property: The FQDN to set for the SAP system during install.
     * 
     * @return the sapFqdn value.
     */
    public String sapFqdn() {
        return this.sapFqdn;
    }

    /**
     * Set the sapFqdn property: The FQDN to set for the SAP system during install.
     * 
     * @param sapFqdn the sapFqdn value to set.
     * @return the ServiceInitiatedSoftwareConfiguration object itself.
     */
    public ServiceInitiatedSoftwareConfiguration withSapFqdn(String sapFqdn) {
        this.sapFqdn = sapFqdn;
        return this;
    }

    /**
     * Get the sshPrivateKey property: The SSH private key.
     * 
     * @return the sshPrivateKey value.
     */
    public String sshPrivateKey() {
        return this.sshPrivateKey;
    }

    /**
     * Set the sshPrivateKey property: The SSH private key.
     * 
     * @param sshPrivateKey the sshPrivateKey value to set.
     * @return the ServiceInitiatedSoftwareConfiguration object itself.
     */
    public ServiceInitiatedSoftwareConfiguration withSshPrivateKey(String sshPrivateKey) {
        this.sshPrivateKey = sshPrivateKey;
        return this;
    }

    /**
     * Get the highAvailabilitySoftwareConfiguration property: Gets or sets the HA software configuration.
     * 
     * @return the highAvailabilitySoftwareConfiguration value.
     */
    public HighAvailabilitySoftwareConfiguration highAvailabilitySoftwareConfiguration() {
        return this.highAvailabilitySoftwareConfiguration;
    }

    /**
     * Set the highAvailabilitySoftwareConfiguration property: Gets or sets the HA software configuration.
     * 
     * @param highAvailabilitySoftwareConfiguration the highAvailabilitySoftwareConfiguration value to set.
     * @return the ServiceInitiatedSoftwareConfiguration object itself.
     */
    public ServiceInitiatedSoftwareConfiguration withHighAvailabilitySoftwareConfiguration(
        HighAvailabilitySoftwareConfiguration highAvailabilitySoftwareConfiguration) {
        this.highAvailabilitySoftwareConfiguration = highAvailabilitySoftwareConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (bomUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bomUrl in model ServiceInitiatedSoftwareConfiguration"));
        }
        if (softwareVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property softwareVersion in model ServiceInitiatedSoftwareConfiguration"));
        }
        if (sapBitsStorageAccountId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sapBitsStorageAccountId in model ServiceInitiatedSoftwareConfiguration"));
        }
        if (sapFqdn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sapFqdn in model ServiceInitiatedSoftwareConfiguration"));
        }
        if (sshPrivateKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sshPrivateKey in model ServiceInitiatedSoftwareConfiguration"));
        }
        if (highAvailabilitySoftwareConfiguration() != null) {
            highAvailabilitySoftwareConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServiceInitiatedSoftwareConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bomUrl", this.bomUrl);
        jsonWriter.writeStringField("softwareVersion", this.softwareVersion);
        jsonWriter.writeStringField("sapBitsStorageAccountId", this.sapBitsStorageAccountId);
        jsonWriter.writeStringField("sapFqdn", this.sapFqdn);
        jsonWriter.writeStringField("sshPrivateKey", this.sshPrivateKey);
        jsonWriter.writeStringField("softwareInstallationType",
            this.softwareInstallationType == null ? null : this.softwareInstallationType.toString());
        jsonWriter.writeJsonField("highAvailabilitySoftwareConfiguration", this.highAvailabilitySoftwareConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceInitiatedSoftwareConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceInitiatedSoftwareConfiguration if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceInitiatedSoftwareConfiguration.
     */
    public static ServiceInitiatedSoftwareConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceInitiatedSoftwareConfiguration deserializedServiceInitiatedSoftwareConfiguration
                = new ServiceInitiatedSoftwareConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bomUrl".equals(fieldName)) {
                    deserializedServiceInitiatedSoftwareConfiguration.bomUrl = reader.getString();
                } else if ("softwareVersion".equals(fieldName)) {
                    deserializedServiceInitiatedSoftwareConfiguration.softwareVersion = reader.getString();
                } else if ("sapBitsStorageAccountId".equals(fieldName)) {
                    deserializedServiceInitiatedSoftwareConfiguration.sapBitsStorageAccountId = reader.getString();
                } else if ("sapFqdn".equals(fieldName)) {
                    deserializedServiceInitiatedSoftwareConfiguration.sapFqdn = reader.getString();
                } else if ("sshPrivateKey".equals(fieldName)) {
                    deserializedServiceInitiatedSoftwareConfiguration.sshPrivateKey = reader.getString();
                } else if ("softwareInstallationType".equals(fieldName)) {
                    deserializedServiceInitiatedSoftwareConfiguration.softwareInstallationType
                        = SapSoftwareInstallationType.fromString(reader.getString());
                } else if ("highAvailabilitySoftwareConfiguration".equals(fieldName)) {
                    deserializedServiceInitiatedSoftwareConfiguration.highAvailabilitySoftwareConfiguration
                        = HighAvailabilitySoftwareConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceInitiatedSoftwareConfiguration;
        });
    }
}
