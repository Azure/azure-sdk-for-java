// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SAP Availability Zone Pair.
 */
@Immutable
public final class SapAvailabilityZonePair implements JsonSerializable<SapAvailabilityZonePair> {
    /*
     * The zone A.
     */
    private Long zoneA;

    /*
     * The zone B.
     */
    private Long zoneB;

    /**
     * Creates an instance of SapAvailabilityZonePair class.
     */
    private SapAvailabilityZonePair() {
    }

    /**
     * Get the zoneA property: The zone A.
     * 
     * @return the zoneA value.
     */
    public Long zoneA() {
        return this.zoneA;
    }

    /**
     * Get the zoneB property: The zone B.
     * 
     * @return the zoneB value.
     */
    public Long zoneB() {
        return this.zoneB;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("zoneA", this.zoneA);
        jsonWriter.writeNumberField("zoneB", this.zoneB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapAvailabilityZonePair from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapAvailabilityZonePair if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapAvailabilityZonePair.
     */
    public static SapAvailabilityZonePair fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapAvailabilityZonePair deserializedSapAvailabilityZonePair = new SapAvailabilityZonePair();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("zoneA".equals(fieldName)) {
                    deserializedSapAvailabilityZonePair.zoneA = reader.getNullable(JsonReader::getLong);
                } else if ("zoneB".equals(fieldName)) {
                    deserializedSapAvailabilityZonePair.zoneB = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapAvailabilityZonePair;
        });
    }
}
