// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Stop SAP instance(s) request body.
 */
@Fluent
public final class StopRequest {
    /*
     * This parameter defines how long (in seconds) the soft shutdown waits until the RFC/HTTP clients no longer
     * consider the server for calls with load balancing. Value 0 means that the kernel does not wait, but goes
     * directly into the next shutdown state, i.e. hard stop.
     */
    @JsonProperty(value = "softStopTimeoutSeconds")
    private Long softStopTimeoutSeconds;

    /*
     * The boolean value indicates whether to Stop and deallocate the virtual machines along with the SAP instances.
     */
    @JsonProperty(value = "deallocateVm")
    private Boolean deallocateVm;

    /**
     * Creates an instance of StopRequest class.
     */
    public StopRequest() {
    }

    /**
     * Get the softStopTimeoutSeconds property: This parameter defines how long (in seconds) the soft shutdown waits
     * until the RFC/HTTP clients no longer consider the server for calls with load balancing. Value 0 means that the
     * kernel does not wait, but goes directly into the next shutdown state, i.e. hard stop.
     * 
     * @return the softStopTimeoutSeconds value.
     */
    public Long softStopTimeoutSeconds() {
        return this.softStopTimeoutSeconds;
    }

    /**
     * Set the softStopTimeoutSeconds property: This parameter defines how long (in seconds) the soft shutdown waits
     * until the RFC/HTTP clients no longer consider the server for calls with load balancing. Value 0 means that the
     * kernel does not wait, but goes directly into the next shutdown state, i.e. hard stop.
     * 
     * @param softStopTimeoutSeconds the softStopTimeoutSeconds value to set.
     * @return the StopRequest object itself.
     */
    public StopRequest withSoftStopTimeoutSeconds(Long softStopTimeoutSeconds) {
        this.softStopTimeoutSeconds = softStopTimeoutSeconds;
        return this;
    }

    /**
     * Get the deallocateVm property: The boolean value indicates whether to Stop and deallocate the virtual machines
     * along with the SAP instances.
     * 
     * @return the deallocateVm value.
     */
    public Boolean deallocateVm() {
        return this.deallocateVm;
    }

    /**
     * Set the deallocateVm property: The boolean value indicates whether to Stop and deallocate the virtual machines
     * along with the SAP instances.
     * 
     * @param deallocateVm the deallocateVm value to set.
     * @return the StopRequest object itself.
     */
    public StopRequest withDeallocateVm(Boolean deallocateVm) {
        this.deallocateVm = deallocateVm;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
