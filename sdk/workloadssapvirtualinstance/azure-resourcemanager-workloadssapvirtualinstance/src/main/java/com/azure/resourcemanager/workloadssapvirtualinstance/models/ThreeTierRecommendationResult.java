// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadssapvirtualinstance.fluent.models.SapSizingRecommendationResultInner;
import java.io.IOException;

/**
 * The recommended configuration for a three tier SAP system.
 */
@Immutable
public final class ThreeTierRecommendationResult extends SapSizingRecommendationResultInner {
    /*
     * The deployment type. Eg: SingleServer/ThreeTier
     */
    private SapDeploymentType deploymentType = SapDeploymentType.THREE_TIER;

    /*
     * The database VM SKU.
     */
    private String dbVmSku;

    /*
     * The database server instance count.
     */
    private Long databaseInstanceCount;

    /*
     * The central server VM SKU.
     */
    private String centralServerVmSku;

    /*
     * The central server instance count.
     */
    private Long centralServerInstanceCount;

    /*
     * The application server VM SKU.
     */
    private String applicationServerVmSku;

    /*
     * The application server instance count.
     */
    private Long applicationServerInstanceCount;

    /**
     * Creates an instance of ThreeTierRecommendationResult class.
     */
    private ThreeTierRecommendationResult() {
    }

    /**
     * Get the deploymentType property: The deployment type. Eg: SingleServer/ThreeTier.
     * 
     * @return the deploymentType value.
     */
    @Override
    public SapDeploymentType deploymentType() {
        return this.deploymentType;
    }

    /**
     * Get the dbVmSku property: The database VM SKU.
     * 
     * @return the dbVmSku value.
     */
    public String dbVmSku() {
        return this.dbVmSku;
    }

    /**
     * Get the databaseInstanceCount property: The database server instance count.
     * 
     * @return the databaseInstanceCount value.
     */
    public Long databaseInstanceCount() {
        return this.databaseInstanceCount;
    }

    /**
     * Get the centralServerVmSku property: The central server VM SKU.
     * 
     * @return the centralServerVmSku value.
     */
    public String centralServerVmSku() {
        return this.centralServerVmSku;
    }

    /**
     * Get the centralServerInstanceCount property: The central server instance count.
     * 
     * @return the centralServerInstanceCount value.
     */
    public Long centralServerInstanceCount() {
        return this.centralServerInstanceCount;
    }

    /**
     * Get the applicationServerVmSku property: The application server VM SKU.
     * 
     * @return the applicationServerVmSku value.
     */
    public String applicationServerVmSku() {
        return this.applicationServerVmSku;
    }

    /**
     * Get the applicationServerInstanceCount property: The application server instance count.
     * 
     * @return the applicationServerInstanceCount value.
     */
    public Long applicationServerInstanceCount() {
        return this.applicationServerInstanceCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentType",
            this.deploymentType == null ? null : this.deploymentType.toString());
        jsonWriter.writeStringField("dbVmSku", this.dbVmSku);
        jsonWriter.writeNumberField("databaseInstanceCount", this.databaseInstanceCount);
        jsonWriter.writeStringField("centralServerVmSku", this.centralServerVmSku);
        jsonWriter.writeNumberField("centralServerInstanceCount", this.centralServerInstanceCount);
        jsonWriter.writeStringField("applicationServerVmSku", this.applicationServerVmSku);
        jsonWriter.writeNumberField("applicationServerInstanceCount", this.applicationServerInstanceCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThreeTierRecommendationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThreeTierRecommendationResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ThreeTierRecommendationResult.
     */
    public static ThreeTierRecommendationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThreeTierRecommendationResult deserializedThreeTierRecommendationResult
                = new ThreeTierRecommendationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentType".equals(fieldName)) {
                    deserializedThreeTierRecommendationResult.deploymentType
                        = SapDeploymentType.fromString(reader.getString());
                } else if ("dbVmSku".equals(fieldName)) {
                    deserializedThreeTierRecommendationResult.dbVmSku = reader.getString();
                } else if ("databaseInstanceCount".equals(fieldName)) {
                    deserializedThreeTierRecommendationResult.databaseInstanceCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("centralServerVmSku".equals(fieldName)) {
                    deserializedThreeTierRecommendationResult.centralServerVmSku = reader.getString();
                } else if ("centralServerInstanceCount".equals(fieldName)) {
                    deserializedThreeTierRecommendationResult.centralServerInstanceCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("applicationServerVmSku".equals(fieldName)) {
                    deserializedThreeTierRecommendationResult.applicationServerVmSku = reader.getString();
                } else if ("applicationServerInstanceCount".equals(fieldName)) {
                    deserializedThreeTierRecommendationResult.applicationServerInstanceCount
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThreeTierRecommendationResult;
        });
    }
}
