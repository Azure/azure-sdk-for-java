// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Deployment along with OS Configuration.
 */
@Fluent
public final class DeploymentWithOSConfiguration extends SapConfiguration {
    /*
     * The configuration type. Eg: Deployment/Discovery
     */
    @Generated
    private SapConfigurationType configurationType = SapConfigurationType.DEPLOYMENT_WITH_OSCONFIG;

    /*
     * The geo-location where the SAP system is to be created.
     */
    @Generated
    private String appLocation;

    /*
     * The infrastructure configuration.
     */
    @Generated
    private InfrastructureConfiguration infrastructureConfiguration;

    /*
     * The software configuration.
     */
    @Generated
    private SoftwareConfiguration softwareConfiguration;

    /*
     * The OS and SAP configuration.
     */
    @Generated
    private OsSapConfiguration osSapConfiguration;

    /**
     * Creates an instance of DeploymentWithOSConfiguration class.
     */
    @Generated
    public DeploymentWithOSConfiguration() {
    }

    /**
     * Get the configurationType property: The configuration type. Eg: Deployment/Discovery.
     * 
     * @return the configurationType value.
     */
    @Generated
    @Override
    public SapConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Get the appLocation property: The geo-location where the SAP system is to be created.
     * 
     * @return the appLocation value.
     */
    @Generated
    public String appLocation() {
        return this.appLocation;
    }

    /**
     * Set the appLocation property: The geo-location where the SAP system is to be created.
     * 
     * @param appLocation the appLocation value to set.
     * @return the DeploymentWithOSConfiguration object itself.
     */
    @Generated
    public DeploymentWithOSConfiguration withAppLocation(String appLocation) {
        this.appLocation = appLocation;
        return this;
    }

    /**
     * Get the infrastructureConfiguration property: The infrastructure configuration.
     * 
     * @return the infrastructureConfiguration value.
     */
    @Generated
    public InfrastructureConfiguration infrastructureConfiguration() {
        return this.infrastructureConfiguration;
    }

    /**
     * Set the infrastructureConfiguration property: The infrastructure configuration.
     * 
     * @param infrastructureConfiguration the infrastructureConfiguration value to set.
     * @return the DeploymentWithOSConfiguration object itself.
     */
    @Generated
    public DeploymentWithOSConfiguration
        withInfrastructureConfiguration(InfrastructureConfiguration infrastructureConfiguration) {
        this.infrastructureConfiguration = infrastructureConfiguration;
        return this;
    }

    /**
     * Get the softwareConfiguration property: The software configuration.
     * 
     * @return the softwareConfiguration value.
     */
    @Generated
    public SoftwareConfiguration softwareConfiguration() {
        return this.softwareConfiguration;
    }

    /**
     * Set the softwareConfiguration property: The software configuration.
     * 
     * @param softwareConfiguration the softwareConfiguration value to set.
     * @return the DeploymentWithOSConfiguration object itself.
     */
    @Generated
    public DeploymentWithOSConfiguration withSoftwareConfiguration(SoftwareConfiguration softwareConfiguration) {
        this.softwareConfiguration = softwareConfiguration;
        return this;
    }

    /**
     * Get the osSapConfiguration property: The OS and SAP configuration.
     * 
     * @return the osSapConfiguration value.
     */
    @Generated
    public OsSapConfiguration osSapConfiguration() {
        return this.osSapConfiguration;
    }

    /**
     * Set the osSapConfiguration property: The OS and SAP configuration.
     * 
     * @param osSapConfiguration the osSapConfiguration value to set.
     * @return the DeploymentWithOSConfiguration object itself.
     */
    @Generated
    public DeploymentWithOSConfiguration withOsSapConfiguration(OsSapConfiguration osSapConfiguration) {
        this.osSapConfiguration = osSapConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (infrastructureConfiguration() != null) {
            infrastructureConfiguration().validate();
        }
        if (softwareConfiguration() != null) {
            softwareConfiguration().validate();
        }
        if (osSapConfiguration() != null) {
            osSapConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        jsonWriter.writeStringField("appLocation", this.appLocation);
        jsonWriter.writeJsonField("infrastructureConfiguration", this.infrastructureConfiguration);
        jsonWriter.writeJsonField("softwareConfiguration", this.softwareConfiguration);
        jsonWriter.writeJsonField("osSapConfiguration", this.osSapConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentWithOSConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentWithOSConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentWithOSConfiguration.
     */
    public static DeploymentWithOSConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentWithOSConfiguration deserializedDeploymentWithOSConfiguration
                = new DeploymentWithOSConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationType".equals(fieldName)) {
                    deserializedDeploymentWithOSConfiguration.configurationType
                        = SapConfigurationType.fromString(reader.getString());
                } else if ("appLocation".equals(fieldName)) {
                    deserializedDeploymentWithOSConfiguration.appLocation = reader.getString();
                } else if ("infrastructureConfiguration".equals(fieldName)) {
                    deserializedDeploymentWithOSConfiguration.infrastructureConfiguration
                        = InfrastructureConfiguration.fromJson(reader);
                } else if ("softwareConfiguration".equals(fieldName)) {
                    deserializedDeploymentWithOSConfiguration.softwareConfiguration
                        = SoftwareConfiguration.fromJson(reader);
                } else if ("osSapConfiguration".equals(fieldName)) {
                    deserializedDeploymentWithOSConfiguration.osSapConfiguration = OsSapConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentWithOSConfiguration;
        });
    }
}
