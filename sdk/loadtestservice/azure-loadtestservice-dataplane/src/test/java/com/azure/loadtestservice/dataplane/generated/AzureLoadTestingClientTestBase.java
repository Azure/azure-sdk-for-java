// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.loadtestservice.dataplane.generated;

import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.azure.core.util.Configuration;
import com.azure.loadtestservice.dataplane.AppComponentClient;
import com.azure.loadtestservice.dataplane.AppComponentClientBuilder;
import com.azure.loadtestservice.dataplane.ServerMetricsClient;
import com.azure.loadtestservice.dataplane.ServerMetricsClientBuilder;
import com.azure.loadtestservice.dataplane.TestClient;
import com.azure.loadtestservice.dataplane.TestClientBuilder;
import com.azure.loadtestservice.dataplane.TestRunClient;
import com.azure.loadtestservice.dataplane.TestRunClientBuilder;

class AzureLoadTestingClientTestBase extends TestBase {
    protected AppComponentClient appComponentClient;

    protected ServerMetricsClient serverMetricsClient;

    protected TestClient testClient;

    protected TestRunClient testRunClient;

    @Override
    protected void beforeTest() {
        AppComponentClientBuilder appComponentClientbuilder =
                new AppComponentClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", "https://<dataPlaneURL>"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            appComponentClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            appComponentClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        appComponentClient = appComponentClientbuilder.buildClient();

        ServerMetricsClientBuilder serverMetricsClientbuilder =
                new ServerMetricsClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", "https://<dataPlaneURL>"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            serverMetricsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            serverMetricsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        serverMetricsClient = serverMetricsClientbuilder.buildClient();

        TestClientBuilder testClientbuilder =
                new TestClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", "https://<dataPlaneURL>"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            testClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            testClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        testClient = testClientbuilder.buildClient();

        TestRunClientBuilder testRunClientbuilder =
                new TestRunClientBuilder()
                        .host(Configuration.getGlobalConfiguration().get("HOST", "https://<dataPlaneURL>"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            testRunClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            testRunClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        testRunClient = testRunClientbuilder.buildClient();
    }
}
