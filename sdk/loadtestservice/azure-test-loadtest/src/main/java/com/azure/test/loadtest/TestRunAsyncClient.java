// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.test.loadtest;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.test.loadtest.implementation.TestRunsImpl;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous LoadTestClient type. */
@ServiceClient(builder = LoadTestClientBuilder.class, isAsync = true)
public final class TestRunAsyncClient {
    @Generated private final TestRunsImpl serviceClient;

    /**
     * Initializes an instance of TestRuns client.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    TestRunAsyncClient(TestRunsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Delete a test run with given name. Test run name must be a valid URL character ^[a-z0-9_-]*$.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param testRunId Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the completion.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions) {
        return this.serviceClient.deleteTestRunWithResponseAsync(testRunId, requestOptions);
    }

    /**
     * Create and start new test run of the given name, test run name must be a valid URL character ^[a-z0-9_-]*$.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>oldTestRunId</td><td>String</td><td>No</td><td>Existing testRunId to re run new test</td></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: String
     *     endDateTime: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 expireTime: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: String
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: String
     *     endDateTime: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 expireTime: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: String
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     * }
     * }</pre>
     *
     * @param testRunId Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return load test run model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAndUpdateTestWithResponse(
            String testRunId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createAndUpdateTestWithResponseAsync(testRunId, body, requestOptions);
    }

    /**
     * Get test run of given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: String
     *     endDateTime: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 expireTime: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: String
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     * }
     * }</pre>
     *
     * @param testRunId Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return test run of given name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunWithResponse(String testRunId, RequestOptions requestOptions) {
        return this.serviceClient.getTestRunWithResponseAsync(testRunId, requestOptions);
    }

    /**
     * Get testrun file with given file name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     url: String
     *     expireTime: String
     * }
     * }</pre>
     *
     * @param testRunId Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return testrun file with given file name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunFileWithResponse(
            String testRunId, String fileId, RequestOptions requestOptions) {
        return this.serviceClient.getTestRunFileWithResponseAsync(testRunId, fileId, requestOptions);
    }

    /**
     * Get all test runs with given filters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc</td></tr>
     *     <tr><td>nextLink</td><td>String</td><td>No</td><td>NextLink Token to get next page of response</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - description, executedUser.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$</td></tr>
     *     <tr><td>executionFrom</td><td>String</td><td>No</td><td>The end DateTime(Iso8601Literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>executionTo</td><td>String</td><td>No</td><td>The start DateTime(Iso8601Literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>Comma separated list of test run status, value can be -  "ACCEPTED", "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     * "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED"</td></tr>
     *     <tr><td>maxPageSize</td><td>String</td><td>No</td><td>No of results in response</td></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             testRunId: String
     *             displayName: String
     *             testId: String
     *             resourceId: String
     *             description: String
     *             status: String
     *             startDateTime: String
     *             endDateTime: String
     *             loadTestConfig: {
     *                 engineInstances: Integer
     *             }
     *             testResult: String
     *             passFailCriteria: {
     *                 passFailMetrics: {
     *                     String: {
     *                         clientmetric: String
     *                         aggregate: String
     *                         condition: String
     *                         value: Double
     *                         action: String
     *                         actualValue: Double
     *                         result: String
     *                     }
     *                 }
     *             }
     *             testArtifacts: {
     *                 inputArtifacts: {
     *                     configUrl: {
     *                         url: String
     *                         fileId: String
     *                         filename: String
     *                         expireTime: String
     *                     }
     *                     testScriptUrl: (recursive schema, see testScriptUrl above)
     *                     inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *                     additionalUrls: [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 outputArtifacts: {
     *                     resultUrl: (recursive schema, see resultUrl above)
     *                     logsUrl: (recursive schema, see logsUrl above)
     *                 }
     *             }
     *             executedDateTime: String
     *             vusers: Integer
     *             testRunStatistics: {
     *                 String: {
     *                     transaction: String
     *                     sampleCount: Double
     *                     errorCount: Double
     *                     errorPct: Double
     *                     meanResTime: Double
     *                     medianResTime: Double
     *                     maxResTime: Double
     *                     minResTime: Double
     *                     pct1ResTime: Double
     *                     pct2ResTime: Double
     *                     pct3ResTime: Double
     *                     throughput: Double
     *                     receivedKBytesPerSec: Double
     *                     sentKBytesPerSec: Double
     *                 }
     *             }
     *             createdDateTime: String
     *             createdBy: String
     *             lastModifiedDateTime: String
     *             lastModifiedBy: String
     *             portalUrl: String
     *             secrets: {
     *                 String: {
     *                     value: String
     *                     type: String
     *                 }
     *             }
     *             environmentVariables: {
     *                 String: String
     *             }
     *             duration: Long
     *         }
     *     ]
     *     continuationToken: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return all test runs with given filters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppTestRunsSearchWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAppTestRunsSearchWithResponseAsync(requestOptions);
    }

    /**
     * Stop test run of given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: String
     *     endDateTime: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 expireTime: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: String
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     * }
     * }</pre>
     *
     * @param testRunId Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return load test run model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopTestRunWithResponse(String testRunId, RequestOptions requestOptions) {
        return this.serviceClient.stopTestRunWithResponseAsync(testRunId, requestOptions);
    }

    /**
     * Get all client metrics for a given load test run.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter to be used in metrics queries, filters can be applied on following fields : request, error, percentile( possible values : 90, 99, 95) or time (can be between start and end time). Request and error filter values can be get from /clientMetricsFilter API. Example of filter : (request eq 'HTTP Request1' or request eq 'total-4bec6d5b-c3c3-4f5f-be09-5c4abb28aedd') and (error eq 'Non HTTP response code: org.apache.http.conn.ConnectTimeoutException' or error eq 'total-4bec6d5b-c3c3-4f5f-be09-5c4abb28aedd') and (percentile eq 90) and (time ge 1626346535054 and time le 1626346924744)</td></tr>
     *     <tr><td>groupByInterval</td><td>String</td><td>No</td><td>Group by time interval, in which interval metrics needs to be retrieved, values can be 10s,20s,30s,1m,2m,5m,1h</td></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     timeSeries: {
     *         activeUsers: {
     *             String: [
     *                 {
     *                     timestamp: String
     *                     value: Double
     *                 }
     *             ]
     *         }
     *         responseTime: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         throughput: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         errors: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return all client metrics for a given load test run.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunClientMetricsWithResponse(
            String testRunId, RequestOptions requestOptions) {
        return this.serviceClient.getTestRunClientMetricsWithResponseAsync(testRunId, requestOptions);
    }

    /**
     * Get all client metrics supported filters list for a given load test run.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     filters: {
     *         requestSamplerValues: [
     *             String
     *         ]
     *         errorFiltersValues: [
     *             String
     *         ]
     *     }
     *     timeRange: {
     *         startTime: String
     *         endTime: String
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return all client metrics supported filters list for a given load test run.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunClientMetricsFiltersWithResponse(
            String testRunId, RequestOptions requestOptions) {
        return this.serviceClient.getTestRunClientMetricsFiltersWithResponseAsync(testRunId, requestOptions);
    }
}
