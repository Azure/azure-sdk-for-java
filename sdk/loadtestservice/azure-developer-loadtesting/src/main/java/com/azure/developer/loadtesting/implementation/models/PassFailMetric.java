// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The PassFailMetric model. */
@Fluent
public final class PassFailMetric {
    /*
     * The client metric on which the criteria should be applied. Allowed values - ‘response_time_ms’ , ‘latency’,
     * ‘error’, ‘requests’, ‘requests_per_sec’.
     */
    @JsonProperty(value = "clientmetric")
    private String clientmetric;

    /*
     * The aggregation function to be applied on the client metric. Allowed functions - ‘percentage’ - for error metric
     * ,‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’, ‘max’ - for response_time_ms and latency metric, ‘avg’ - for
     * requests_per_sec, ‘count’ - for requests.
     */
    @JsonProperty(value = "aggregate")
    private String aggregate;

    /*
     * The comparison operator. Supported types ‘>’
     */
    @JsonProperty(value = "condition")
    private String condition;

    /*
     * Request name for which the Pass fail criteria has to be applied.
     */
    @JsonProperty(value = "requestName")
    private String requestName;

    /*
     * The value to compare with the client metric. Allowed values - ‘error : [0.0 , 100.0] unit- % ’, response_time_ms
     * and latency : any integer value unit- ms.
     */
    @JsonProperty(value = "value")
    private Double value;

    /*
     * Either ‘stop’ or ‘continue’ after the threshold is met. Default is ‘continue’.
     */
    @JsonProperty(value = "action")
    private String action;

    /*
     * The actual value of the client metric for the test run.
     */
    @JsonProperty(value = "actualValue", access = JsonProperty.Access.WRITE_ONLY)
    private Double actualValue;

    /*
     * Outcome of the test run. possible outcome - ‘passed’ , ‘failed’ , ‘undetermined’.
     */
    @JsonProperty(value = "result", access = JsonProperty.Access.WRITE_ONLY)
    private String result;

    /**
     * Get the clientmetric property: The client metric on which the criteria should be applied. Allowed values -
     * ‘response_time_ms’ , ‘latency’, ‘error’, ‘requests’, ‘requests_per_sec’.
     *
     * @return the clientmetric value.
     */
    public String getClientmetric() {
        return this.clientmetric;
    }

    /**
     * Set the clientmetric property: The client metric on which the criteria should be applied. Allowed values -
     * ‘response_time_ms’ , ‘latency’, ‘error’, ‘requests’, ‘requests_per_sec’.
     *
     * @param clientmetric the clientmetric value to set.
     * @return the PassFailMetric object itself.
     */
    public PassFailMetric setClientmetric(String clientmetric) {
        this.clientmetric = clientmetric;
        return this;
    }

    /**
     * Get the aggregate property: The aggregation function to be applied on the client metric. Allowed functions -
     * ‘percentage’ - for error metric ,‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’, ‘max’ - for response_time_ms and
     * latency metric, ‘avg’ - for requests_per_sec, ‘count’ - for requests.
     *
     * @return the aggregate value.
     */
    public String getAggregate() {
        return this.aggregate;
    }

    /**
     * Set the aggregate property: The aggregation function to be applied on the client metric. Allowed functions -
     * ‘percentage’ - for error metric ,‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’, ‘max’ - for response_time_ms and
     * latency metric, ‘avg’ - for requests_per_sec, ‘count’ - for requests.
     *
     * @param aggregate the aggregate value to set.
     * @return the PassFailMetric object itself.
     */
    public PassFailMetric setAggregate(String aggregate) {
        this.aggregate = aggregate;
        return this;
    }

    /**
     * Get the condition property: The comparison operator. Supported types ‘&gt;’.
     *
     * @return the condition value.
     */
    public String getCondition() {
        return this.condition;
    }

    /**
     * Set the condition property: The comparison operator. Supported types ‘&gt;’.
     *
     * @param condition the condition value to set.
     * @return the PassFailMetric object itself.
     */
    public PassFailMetric setCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the requestName property: Request name for which the Pass fail criteria has to be applied.
     *
     * @return the requestName value.
     */
    public String getRequestName() {
        return this.requestName;
    }

    /**
     * Set the requestName property: Request name for which the Pass fail criteria has to be applied.
     *
     * @param requestName the requestName value to set.
     * @return the PassFailMetric object itself.
     */
    public PassFailMetric setRequestName(String requestName) {
        this.requestName = requestName;
        return this;
    }

    /**
     * Get the value property: The value to compare with the client metric. Allowed values - ‘error : [0.0 , 100.0]
     * unit- % ’, response_time_ms and latency : any integer value unit- ms.
     *
     * @return the value value.
     */
    public Double getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value to compare with the client metric. Allowed values - ‘error : [0.0 , 100.0]
     * unit- % ’, response_time_ms and latency : any integer value unit- ms.
     *
     * @param value the value value to set.
     * @return the PassFailMetric object itself.
     */
    public PassFailMetric setValue(Double value) {
        this.value = value;
        return this;
    }

    /**
     * Get the action property: Either ‘stop’ or ‘continue’ after the threshold is met. Default is ‘continue’.
     *
     * @return the action value.
     */
    public String getAction() {
        return this.action;
    }

    /**
     * Set the action property: Either ‘stop’ or ‘continue’ after the threshold is met. Default is ‘continue’.
     *
     * @param action the action value to set.
     * @return the PassFailMetric object itself.
     */
    public PassFailMetric setAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Get the actualValue property: The actual value of the client metric for the test run.
     *
     * @return the actualValue value.
     */
    public Double getActualValue() {
        return this.actualValue;
    }

    /**
     * Get the result property: Outcome of the test run. possible outcome - ‘passed’ , ‘failed’ , ‘undetermined’.
     *
     * @return the result value.
     */
    public String getResult() {
        return this.result;
    }
}
