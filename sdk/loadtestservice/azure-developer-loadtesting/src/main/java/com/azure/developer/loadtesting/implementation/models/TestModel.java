// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** Load test model. */
@Fluent
public final class TestModel {
    /*
     * Unique test name as identifier.
     */
    @JsonProperty(value = "testId", access = JsonProperty.Access.WRITE_ONLY)
    private String testId;

    /*
     * The test description.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Display name of a test.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Fully qualified resource Id e.g
     * /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     */
    @JsonProperty(value = "resourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String resourceId;

    /*
     * The load test configuration.
     */
    @JsonProperty(value = "loadTestConfig")
    private LoadTestConfig loadTestConfig;

    /*
     * Pass fail criteria for a test.
     */
    @JsonProperty(value = "passFailCriteria")
    private PassFailCriteria passFailCriteria;

    /*
     * The created DateTime(ISO 8601 literal format) of the test model.
     */
    @JsonProperty(value = "createdDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDateTime;

    /*
     * The user that created the test model.
     */
    @JsonProperty(value = "createdBy", access = JsonProperty.Access.WRITE_ONLY)
    private String createdBy;

    /*
     * The last Modified DateTime(ISO 8601 literal format) of the test model.
     */
    @JsonProperty(value = "lastModifiedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The user that last modified the test model.
     */
    @JsonProperty(value = "lastModifiedBy", access = JsonProperty.Access.WRITE_ONLY)
    private String lastModifiedBy;

    /*
     * The input artifacts for the test.
     */
    @JsonProperty(value = "inputArtifacts", access = JsonProperty.Access.WRITE_ONLY)
    private InputTestArtifacts inputArtifacts;

    /*
     * Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key
     * Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored
     * elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
     */
    @JsonProperty(value = "secrets")
    private Map<String, SecretMetadata> secrets;

    /*
     * Environment variables which are defined as a set of <name,value> pairs.
     */
    @JsonProperty(value = "environmentVariables")
    private Map<String, String> environmentVariables;

    /*
     * Subnet ID on which the load test instances should run.
     */
    @JsonProperty(value = "subnetId")
    private String subnetId;

    /*
     * Type of the managed identity referencing the Key vault.
     */
    @JsonProperty(value = "keyvaultReferenceIdentityType")
    private String keyvaultReferenceIdentityType;

    /*
     * Resource Id of the managed identity referencing the Key vault.
     */
    @JsonProperty(value = "keyvaultReferenceIdentityId")
    private String keyvaultReferenceIdentityId;

    /**
     * Get the testId property: Unique test name as identifier.
     *
     * @return the testId value.
     */
    public String getTestId() {
        return this.testId;
    }

    /**
     * Get the description property: The test description.
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The test description.
     *
     * @param description the description value to set.
     * @return the TestModel object itself.
     */
    public TestModel setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: Display name of a test.
     *
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of a test.
     *
     * @param displayName the displayName value to set.
     * @return the TestModel object itself.
     */
    public TestModel setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the resourceId property: Fully qualified resource Id e.g
     * /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @return the resourceId value.
     */
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the loadTestConfig property: The load test configuration.
     *
     * @return the loadTestConfig value.
     */
    public LoadTestConfig getLoadTestConfig() {
        return this.loadTestConfig;
    }

    /**
     * Set the loadTestConfig property: The load test configuration.
     *
     * @param loadTestConfig the loadTestConfig value to set.
     * @return the TestModel object itself.
     */
    public TestModel setLoadTestConfig(LoadTestConfig loadTestConfig) {
        this.loadTestConfig = loadTestConfig;
        return this;
    }

    /**
     * Get the passFailCriteria property: Pass fail criteria for a test.
     *
     * @return the passFailCriteria value.
     */
    public PassFailCriteria getPassFailCriteria() {
        return this.passFailCriteria;
    }

    /**
     * Set the passFailCriteria property: Pass fail criteria for a test.
     *
     * @param passFailCriteria the passFailCriteria value to set.
     * @return the TestModel object itself.
     */
    public TestModel setPassFailCriteria(PassFailCriteria passFailCriteria) {
        this.passFailCriteria = passFailCriteria;
        return this;
    }

    /**
     * Get the createdDateTime property: The created DateTime(ISO 8601 literal format) of the test model.
     *
     * @return the createdDateTime value.
     */
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the createdBy property: The user that created the test model.
     *
     * @return the createdBy value.
     */
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last Modified DateTime(ISO 8601 literal format) of the test model.
     *
     * @return the lastModifiedDateTime value.
     */
    public OffsetDateTime getLastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastModifiedBy property: The user that last modified the test model.
     *
     * @return the lastModifiedBy value.
     */
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Get the inputArtifacts property: The input artifacts for the test.
     *
     * @return the inputArtifacts value.
     */
    public InputTestArtifacts getInputArtifacts() {
        return this.inputArtifacts;
    }

    /**
     * Get the secrets property: Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is
     * stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If
     * the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
     *
     * @return the secrets value.
     */
    public Map<String, SecretMetadata> getSecrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is
     * stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If
     * the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
     *
     * @param secrets the secrets value to set.
     * @return the TestModel object itself.
     */
    public TestModel setSecrets(Map<String, SecretMetadata> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables which are defined as a set of &lt;name,value&gt;
     * pairs.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> getEnvironmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables which are defined as a set of &lt;name,value&gt;
     * pairs.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the TestModel object itself.
     */
    public TestModel setEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the subnetId property: Subnet ID on which the load test instances should run.
     *
     * @return the subnetId value.
     */
    public String getSubnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Subnet ID on which the load test instances should run.
     *
     * @param subnetId the subnetId value to set.
     * @return the TestModel object itself.
     */
    public TestModel setSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the keyvaultReferenceIdentityType property: Type of the managed identity referencing the Key vault.
     *
     * @return the keyvaultReferenceIdentityType value.
     */
    public String getKeyvaultReferenceIdentityType() {
        return this.keyvaultReferenceIdentityType;
    }

    /**
     * Set the keyvaultReferenceIdentityType property: Type of the managed identity referencing the Key vault.
     *
     * @param keyvaultReferenceIdentityType the keyvaultReferenceIdentityType value to set.
     * @return the TestModel object itself.
     */
    public TestModel setKeyvaultReferenceIdentityType(String keyvaultReferenceIdentityType) {
        this.keyvaultReferenceIdentityType = keyvaultReferenceIdentityType;
        return this;
    }

    /**
     * Get the keyvaultReferenceIdentityId property: Resource Id of the managed identity referencing the Key vault.
     *
     * @return the keyvaultReferenceIdentityId value.
     */
    public String getKeyvaultReferenceIdentityId() {
        return this.keyvaultReferenceIdentityId;
    }

    /**
     * Set the keyvaultReferenceIdentityId property: Resource Id of the managed identity referencing the Key vault.
     *
     * @param keyvaultReferenceIdentityId the keyvaultReferenceIdentityId value to set.
     * @return the TestModel object itself.
     */
    public TestModel setKeyvaultReferenceIdentityId(String keyvaultReferenceIdentityId) {
        this.keyvaultReferenceIdentityId = keyvaultReferenceIdentityId;
        return this;
    }
}
