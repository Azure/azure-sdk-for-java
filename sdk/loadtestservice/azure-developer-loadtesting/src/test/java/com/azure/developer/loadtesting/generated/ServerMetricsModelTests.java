// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.ResourceMetricModel;
import com.azure.developer.loadtesting.implementation.models.ServerMetricName;
import com.azure.developer.loadtesting.implementation.models.ServerMetricsModel;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ServerMetricsModelTests {
    @Test
    public void testDeserialize() {
        ServerMetricsModel model =
                BinaryData.fromString(
                                "{\"name\":\"vukxgau\",\"testId\":\"cs\",\"testRunId\":\"s\",\"metrics\":{\"vmkjozkrwfndiodj\":{\"id\":\"ejhkry\",\"resourceId\":\"tnapczwlokjyemkk\",\"metricnamespace\":\"ni\",\"displayDescription\":\"oxzjnchgejspod\",\"name\":{\"value\":\"ailzydehojwyahu\",\"localizedValue\":\"inpm\"},\"aggregation\":\"njaqwixjspro\",\"unit\":\"cputegjvwmfdats\",\"resourceType\":\"mdvpjhulsu\"},\"zfsinzgvf\":{\"id\":\"lwejdpv\",\"resourceId\":\"ryo\",\"metricnamespace\":\"psoacctazakljl\",\"displayDescription\":\"bcryffdfd\",\"name\":{\"value\":\"sy\",\"localizedValue\":\"expa\"},\"aggregation\":\"jakhmsbzjh\",\"unit\":\"zevdphlx\",\"resourceType\":\"olthqtrgqjbp\"},\"usivye\":{\"id\":\"rwzoxxjtfelluwf\",\"resourceId\":\"it\",\"metricnamespace\":\"np\",\"displayDescription\":\"fpjkjlxofp\",\"name\":{\"value\":\"vhpfxxypininmay\",\"localizedValue\":\"uybbkpodep\"},\"aggregation\":\"oginuvamiheognar\",\"unit\":\"xth\",\"resourceType\":\"o\"},\"cjdkwtnhxbnjbi\":{\"id\":\"ciqihnhung\",\"resourceId\":\"wjzrnfygxgisp\",\"metricnamespace\":\"mvtzfkufub\",\"displayDescription\":\"ofx\",\"name\":{\"value\":\"eofjaeqjh\",\"localizedValue\":\"jbasvmsmjqulngs\"},\"aggregation\":\"tnb\",\"unit\":\"kzgcwrwcl\",\"resourceType\":\"xwrljdouskcqvkoc\"}}}")
                        .toObject(ServerMetricsModel.class);
        Assertions.assertEquals("cs", model.getTestId());
        Assertions.assertEquals("s", model.getTestRunId());
        Assertions.assertEquals("tnapczwlokjyemkk", model.getMetrics().get("vmkjozkrwfndiodj").getResourceId());
        Assertions.assertEquals("ni", model.getMetrics().get("vmkjozkrwfndiodj").getMetricnamespace());
        Assertions.assertEquals("oxzjnchgejspod", model.getMetrics().get("vmkjozkrwfndiodj").getDisplayDescription());
        Assertions.assertEquals("ailzydehojwyahu", model.getMetrics().get("vmkjozkrwfndiodj").getName().getValue());
        Assertions.assertEquals("inpm", model.getMetrics().get("vmkjozkrwfndiodj").getName().getLocalizedValue());
        Assertions.assertEquals("njaqwixjspro", model.getMetrics().get("vmkjozkrwfndiodj").getAggregation());
        Assertions.assertEquals("cputegjvwmfdats", model.getMetrics().get("vmkjozkrwfndiodj").getUnit());
        Assertions.assertEquals("mdvpjhulsu", model.getMetrics().get("vmkjozkrwfndiodj").getResourceType());
    }

    @Test
    public void testSerialize() {
        ServerMetricsModel model =
                new ServerMetricsModel()
                        .setTestId("cs")
                        .setTestRunId("s")
                        .setMetrics(
                                mapOf(
                                        "vmkjozkrwfndiodj",
                                        new ResourceMetricModel(
                                                        "tnapczwlokjyemkk",
                                                        "ni",
                                                        new ServerMetricName("ailzydehojwyahu", "inpm"),
                                                        "njaqwixjspro",
                                                        "mdvpjhulsu")
                                                .setDisplayDescription("oxzjnchgejspod")
                                                .setUnit("cputegjvwmfdats"),
                                        "zfsinzgvf",
                                        new ResourceMetricModel(
                                                        "ryo",
                                                        "psoacctazakljl",
                                                        new ServerMetricName("sy", "expa"),
                                                        "jakhmsbzjh",
                                                        "olthqtrgqjbp")
                                                .setDisplayDescription("bcryffdfd")
                                                .setUnit("zevdphlx"),
                                        "usivye",
                                        new ResourceMetricModel(
                                                        "it",
                                                        "np",
                                                        new ServerMetricName("vhpfxxypininmay", "uybbkpodep"),
                                                        "oginuvamiheognar",
                                                        "o")
                                                .setDisplayDescription("fpjkjlxofp")
                                                .setUnit("xth"),
                                        "cjdkwtnhxbnjbi",
                                        new ResourceMetricModel(
                                                        "wjzrnfygxgisp",
                                                        "mvtzfkufub",
                                                        new ServerMetricName("eofjaeqjh", "jbasvmsmjqulngs"),
                                                        "tnb",
                                                        "xwrljdouskcqvkoc")
                                                .setDisplayDescription("ofx")
                                                .setUnit("kzgcwrwcl")));
        model = BinaryData.fromObject(model).toObject(ServerMetricsModel.class);
        Assertions.assertEquals("cs", model.getTestId());
        Assertions.assertEquals("s", model.getTestRunId());
        Assertions.assertEquals("tnapczwlokjyemkk", model.getMetrics().get("vmkjozkrwfndiodj").getResourceId());
        Assertions.assertEquals("ni", model.getMetrics().get("vmkjozkrwfndiodj").getMetricnamespace());
        Assertions.assertEquals("oxzjnchgejspod", model.getMetrics().get("vmkjozkrwfndiodj").getDisplayDescription());
        Assertions.assertEquals("ailzydehojwyahu", model.getMetrics().get("vmkjozkrwfndiodj").getName().getValue());
        Assertions.assertEquals("inpm", model.getMetrics().get("vmkjozkrwfndiodj").getName().getLocalizedValue());
        Assertions.assertEquals("njaqwixjspro", model.getMetrics().get("vmkjozkrwfndiodj").getAggregation());
        Assertions.assertEquals("cputegjvwmfdats", model.getMetrics().get("vmkjozkrwfndiodj").getUnit());
        Assertions.assertEquals("mdvpjhulsu", model.getMetrics().get("vmkjozkrwfndiodj").getResourceType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
