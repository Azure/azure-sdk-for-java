// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.LoadTestConfig;
import com.azure.developer.loadtesting.implementation.models.PassFailCriteria;
import com.azure.developer.loadtesting.implementation.models.PassFailMetric;
import com.azure.developer.loadtesting.implementation.models.SecretMetadata;
import com.azure.developer.loadtesting.implementation.models.TestModel;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TestModelTests {
    @Test
    public void testDeserialize() {
        TestModel model =
                BinaryData.fromString(
                                "{\"testId\":\"rjb\",\"description\":\"orcjxvsnby\",\"displayName\":\"abnmocpcyshu\",\"resourceId\":\"afbljjgpbtoqcjmk\",\"loadTestConfig\":{\"engineInstances\":1217713745,\"splitAllCSVs\":true},\"passFailCriteria\":{\"passFailMetrics\":{\"a\":{\"clientmetric\":\"ajzyul\",\"aggregate\":\"u\",\"condition\":\"krlkhbzhfepg\",\"requestName\":\"qex\",\"value\":89.07795853703163,\"action\":\"scpai\",\"actualValue\":96.80537182363567,\"result\":\"csglum\"},\"jctbza\":{\"clientmetric\":\"j\",\"aggregate\":\"dxob\",\"condition\":\"dxkqpx\",\"requestName\":\"ajionpimexgstxg\",\"value\":84.68225914560935,\"action\":\"maajrmvdjwzrlo\",\"actualValue\":82.8178687573143,\"result\":\"hijco\"},\"twnpzaoqvuhrhcf\":{\"clientmetric\":\"qsycbkbfkgu\",\"aggregate\":\"kexxppof\",\"condition\":\"axcfjpgddtocjjx\",\"requestName\":\"pmouexhdz\",\"value\":17.190158222585094,\"action\":\"ojnxqbzvdd\",\"actualValue\":65.08808611819813,\"result\":\"eic\"},\"u\":{\"clientmetric\":\"yd\",\"aggregate\":\"lmjthjq\",\"condition\":\"pyeicxm\",\"requestName\":\"iwqvhkh\",\"value\":80.65130941539171,\"action\":\"dtopbob\",\"actualValue\":47.51092361661414,\"result\":\"e\"}}},\"createdDateTime\":\"2021-01-02T08:53:50Z\",\"createdBy\":\"hrzayvvtpgvdf\",\"lastModifiedDateTime\":\"2021-06-28T04:08:22Z\",\"lastModifiedBy\":\"kftutqxlngxlefg\",\"inputArtifacts\":{\"configUrl\":{\"url\":\"krxd\",\"fileId\":\"i\",\"filename\":\"thz\",\"fileType\":1,\"expireTime\":\"2021-06-26T08:11:35Z\",\"validationStatus\":\"bhj\"},\"testScriptUrl\":{\"url\":\"gehoqfbowskany\",\"fileId\":\"zlcuiywgqywgndrv\",\"filename\":\"hzgpphrcgyncocpe\",\"fileType\":2,\"expireTime\":\"2021-01-02T02:31:32Z\",\"validationStatus\":\"oo\"},\"userPropUrl\":{\"url\":\"lzevgbmqjqab\",\"fileId\":\"pmivkwlzu\",\"filename\":\"c\",\"fileType\":0,\"expireTime\":\"2021-12-03T01:38:31Z\",\"validationStatus\":\"acfi\"},\"inputArtifactsZipFileurl\":{\"url\":\"ebxetqgtzxdp\",\"fileId\":\"bqqwxrj\",\"filename\":\"al\",\"fileType\":1,\"expireTime\":\"2021-10-10T11:55:48Z\",\"validationStatus\":\"isnjampmngnz\"},\"additionalUrls\":[{\"url\":\"qwoochcbon\",\"fileId\":\"pkvlrxn\",\"filename\":\"ase\",\"fileType\":1,\"expireTime\":\"2021-04-09T12:47:30Z\",\"validationStatus\":\"lokeyy\"},{\"url\":\"nj\",\"fileId\":\"lwtgrhpdj\",\"filename\":\"umasxazjpq\",\"fileType\":0,\"expireTime\":\"2021-07-21T23:14:20Z\",\"validationStatus\":\"hb\"},{\"url\":\"hejjz\",\"fileId\":\"dudgwdslfhot\",\"filename\":\"cynpwlbjnp\",\"fileType\":1,\"expireTime\":\"2021-04-17T12:51:37Z\",\"validationStatus\":\"dehxnltyfsoppu\"},{\"url\":\"esnzwde\",\"fileId\":\"avo\",\"filename\":\"zdmohctbqvu\",\"fileType\":0,\"expireTime\":\"2021-10-27T15:38:07Z\",\"validationStatus\":\"nvowgujju\"}]},\"secrets\":{\"e\":{\"value\":\"cglhslazjdyggdt\",\"type\":\"xhbkuofq\"},\"tynnaamdectehfi\":{\"value\":\"hmenevfyexfwhybc\",\"type\":\"vyvdcs\"}},\"environmentVariables\":{\"hezrkgq\":\"jeyp\"},\"subnetId\":\"jrefovgmkqsle\",\"keyvaultReferenceIdentityType\":\"vxyqjpkcattpngjc\",\"keyvaultReferenceIdentityId\":\"czsqpjhvm\"}")
                        .toObject(TestModel.class);
        Assertions.assertEquals("orcjxvsnby", model.getDescription());
        Assertions.assertEquals("abnmocpcyshu", model.getDisplayName());
        Assertions.assertEquals(1217713745, model.getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals("ajzyul", model.getPassFailCriteria().getPassFailMetrics().get("a").getClientmetric());
        Assertions.assertEquals("u", model.getPassFailCriteria().getPassFailMetrics().get("a").getAggregate());
        Assertions.assertEquals(
                "krlkhbzhfepg", model.getPassFailCriteria().getPassFailMetrics().get("a").getCondition());
        Assertions.assertEquals("qex", model.getPassFailCriteria().getPassFailMetrics().get("a").getRequestName());
        Assertions.assertEquals(
                89.07795853703163D, model.getPassFailCriteria().getPassFailMetrics().get("a").getValue());
        Assertions.assertEquals("scpai", model.getPassFailCriteria().getPassFailMetrics().get("a").getAction());
        Assertions.assertEquals("cglhslazjdyggdt", model.getSecrets().get("e").getValue());
        Assertions.assertEquals("xhbkuofq", model.getSecrets().get("e").getType());
        Assertions.assertEquals("jeyp", model.getEnvironmentVariables().get("hezrkgq"));
        Assertions.assertEquals("jrefovgmkqsle", model.getSubnetId());
        Assertions.assertEquals("vxyqjpkcattpngjc", model.getKeyvaultReferenceIdentityType());
        Assertions.assertEquals("czsqpjhvm", model.getKeyvaultReferenceIdentityId());
    }

    @Test
    public void testSerialize() {
        TestModel model =
                new TestModel()
                        .setDescription("orcjxvsnby")
                        .setDisplayName("abnmocpcyshu")
                        .setLoadTestConfig(new LoadTestConfig().setEngineInstances(1217713745).setSplitAllCSVs(true))
                        .setPassFailCriteria(
                                new PassFailCriteria()
                                        .setPassFailMetrics(
                                                mapOf(
                                                        "a",
                                                        new PassFailMetric()
                                                                .setClientmetric("ajzyul")
                                                                .setAggregate("u")
                                                                .setCondition("krlkhbzhfepg")
                                                                .setRequestName("qex")
                                                                .setValue(89.07795853703163D)
                                                                .setAction("scpai"),
                                                        "jctbza",
                                                        new PassFailMetric()
                                                                .setClientmetric("j")
                                                                .setAggregate("dxob")
                                                                .setCondition("dxkqpx")
                                                                .setRequestName("ajionpimexgstxg")
                                                                .setValue(84.68225914560935D)
                                                                .setAction("maajrmvdjwzrlo"),
                                                        "twnpzaoqvuhrhcf",
                                                        new PassFailMetric()
                                                                .setClientmetric("qsycbkbfkgu")
                                                                .setAggregate("kexxppof")
                                                                .setCondition("axcfjpgddtocjjx")
                                                                .setRequestName("pmouexhdz")
                                                                .setValue(17.190158222585094D)
                                                                .setAction("ojnxqbzvdd"),
                                                        "u",
                                                        new PassFailMetric()
                                                                .setClientmetric("yd")
                                                                .setAggregate("lmjthjq")
                                                                .setCondition("pyeicxm")
                                                                .setRequestName("iwqvhkh")
                                                                .setValue(80.65130941539171D)
                                                                .setAction("dtopbob"))))
                        .setSecrets(
                                mapOf(
                                        "e",
                                        new SecretMetadata().setValue("cglhslazjdyggdt").setType("xhbkuofq"),
                                        "tynnaamdectehfi",
                                        new SecretMetadata().setValue("hmenevfyexfwhybc").setType("vyvdcs")))
                        .setEnvironmentVariables(mapOf("hezrkgq", "jeyp"))
                        .setSubnetId("jrefovgmkqsle")
                        .setKeyvaultReferenceIdentityType("vxyqjpkcattpngjc")
                        .setKeyvaultReferenceIdentityId("czsqpjhvm");
        model = BinaryData.fromObject(model).toObject(TestModel.class);
        Assertions.assertEquals("orcjxvsnby", model.getDescription());
        Assertions.assertEquals("abnmocpcyshu", model.getDisplayName());
        Assertions.assertEquals(1217713745, model.getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals("ajzyul", model.getPassFailCriteria().getPassFailMetrics().get("a").getClientmetric());
        Assertions.assertEquals("u", model.getPassFailCriteria().getPassFailMetrics().get("a").getAggregate());
        Assertions.assertEquals(
                "krlkhbzhfepg", model.getPassFailCriteria().getPassFailMetrics().get("a").getCondition());
        Assertions.assertEquals("qex", model.getPassFailCriteria().getPassFailMetrics().get("a").getRequestName());
        Assertions.assertEquals(
                89.07795853703163D, model.getPassFailCriteria().getPassFailMetrics().get("a").getValue());
        Assertions.assertEquals("scpai", model.getPassFailCriteria().getPassFailMetrics().get("a").getAction());
        Assertions.assertEquals("cglhslazjdyggdt", model.getSecrets().get("e").getValue());
        Assertions.assertEquals("xhbkuofq", model.getSecrets().get("e").getType());
        Assertions.assertEquals("jeyp", model.getEnvironmentVariables().get("hezrkgq"));
        Assertions.assertEquals("jrefovgmkqsle", model.getSubnetId());
        Assertions.assertEquals("vxyqjpkcattpngjc", model.getKeyvaultReferenceIdentityType());
        Assertions.assertEquals("czsqpjhvm", model.getKeyvaultReferenceIdentityId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
