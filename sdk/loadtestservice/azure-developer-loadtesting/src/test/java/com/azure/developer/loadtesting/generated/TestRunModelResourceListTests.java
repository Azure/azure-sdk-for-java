// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.LoadTestConfig;
import com.azure.developer.loadtesting.implementation.models.PassFailCriteria;
import com.azure.developer.loadtesting.implementation.models.TestRunModel;
import com.azure.developer.loadtesting.implementation.models.TestRunModelResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TestRunModelResourceListTests {
    @Test
    public void testDeserialize() {
        TestRunModelResourceList model =
                BinaryData.fromString(
                                "{\"value\":[{\"testRunId\":\"t\",\"displayName\":\"ellwptfdy\",\"testId\":\"fqbuaceopzf\",\"resourceId\":\"hhuao\",\"description\":\"pcqeqx\",\"status\":\"z\",\"startDateTime\":\"2021-01-30T20:29:46Z\",\"endDateTime\":\"2021-04-25T14:15:21Z\",\"loadTestConfig\":{\"engineInstances\":792773086,\"splitAllCSVs\":true},\"testResult\":\"kdmoi\",\"passFailCriteria\":{\"passFailMetrics\":{}},\"testArtifacts\":{\"inputArtifacts\":{}},\"executedDateTime\":\"2021-02-03T18:27:02Z\",\"vusers\":919813735,\"testRunStatistics\":{},\"createdDateTime\":\"2021-06-18T12:29:32Z\",\"createdBy\":\"mfqjhhkxbp\",\"lastModifiedDateTime\":\"2021-06-05T07:23:31Z\",\"lastModifiedBy\":\"jhxxjyn\",\"portalUrl\":\"divkrt\",\"secrets\":{},\"environmentVariables\":{\"auvjfdxxivet\":\"zvszj\",\"qaqtdoqmcbxvwvxy\":\"t\"},\"duration\":196734015305662676,\"subnetId\":\"sfxobl\"},{\"testRunId\":\"k\",\"displayName\":\"mpew\",\"testId\":\"fbkrvrnsvs\",\"resourceId\":\"johxcrsb\",\"description\":\"vasrruvwb\",\"status\":\"qfsubcgjbirx\",\"startDateTime\":\"2021-09-14T01:07:05Z\",\"endDateTime\":\"2021-06-28T04:15:27Z\",\"loadTestConfig\":{\"engineInstances\":716024879,\"splitAllCSVs\":true},\"testResult\":\"twss\",\"passFailCriteria\":{\"passFailMetrics\":{}},\"executedDateTime\":\"2021-01-31T07:10:37Z\",\"vusers\":1235013026,\"testRunStatistics\":{},\"createdDateTime\":\"2021-06-04T04:06:28Z\",\"createdBy\":\"znfqqnvwpmqtar\",\"lastModifiedDateTime\":\"2021-08-18T10:48:38Z\",\"lastModifiedBy\":\"mkcjhwqytjrybn\",\"portalUrl\":\"ewgdrjervn\",\"secrets\":{},\"environmentVariables\":{\"ndoygmifthnzdnd\":\"eh\",\"nayqi\":\"l\",\"hqlkthumaqo\":\"ynduha\"},\"duration\":5649591766559477880,\"subnetId\":\"duiertgcc\"}],\"nextLink\":\"vaolpsslqlf\"}")
                        .toObject(TestRunModelResourceList.class);
        Assertions.assertEquals("ellwptfdy", model.getValue().get(0).getDisplayName());
        Assertions.assertEquals("fqbuaceopzf", model.getValue().get(0).getTestId());
        Assertions.assertEquals("pcqeqx", model.getValue().get(0).getDescription());
        Assertions.assertEquals(792773086, model.getValue().get(0).getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getValue().get(0).getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals("zvszj", model.getValue().get(0).getEnvironmentVariables().get("auvjfdxxivet"));
        Assertions.assertEquals("vaolpsslqlf", model.getNextLink());
    }

    @Test
    public void testSerialize() {
        TestRunModelResourceList model =
                new TestRunModelResourceList(
                                Arrays.asList(
                                        new TestRunModel()
                                                .setDisplayName("ellwptfdy")
                                                .setTestId("fqbuaceopzf")
                                                .setDescription("pcqeqx")
                                                .setLoadTestConfig(
                                                        new LoadTestConfig()
                                                                .setEngineInstances(792773086)
                                                                .setSplitAllCSVs(true))
                                                .setPassFailCriteria(new PassFailCriteria().setPassFailMetrics(mapOf()))
                                                .setSecrets(mapOf())
                                                .setEnvironmentVariables(
                                                        mapOf("auvjfdxxivet", "zvszj", "qaqtdoqmcbxvwvxy", "t")),
                                        new TestRunModel()
                                                .setDisplayName("mpew")
                                                .setTestId("fbkrvrnsvs")
                                                .setDescription("vasrruvwb")
                                                .setLoadTestConfig(
                                                        new LoadTestConfig()
                                                                .setEngineInstances(716024879)
                                                                .setSplitAllCSVs(true))
                                                .setPassFailCriteria(new PassFailCriteria().setPassFailMetrics(mapOf()))
                                                .setSecrets(mapOf())
                                                .setEnvironmentVariables(
                                                        mapOf(
                                                                "ndoygmifthnzdnd",
                                                                "eh",
                                                                "nayqi",
                                                                "l",
                                                                "hqlkthumaqo",
                                                                "ynduha"))))
                        .setNextLink("vaolpsslqlf");
        model = BinaryData.fromObject(model).toObject(TestRunModelResourceList.class);
        Assertions.assertEquals("ellwptfdy", model.getValue().get(0).getDisplayName());
        Assertions.assertEquals("fqbuaceopzf", model.getValue().get(0).getTestId());
        Assertions.assertEquals("pcqeqx", model.getValue().get(0).getDescription());
        Assertions.assertEquals(792773086, model.getValue().get(0).getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getValue().get(0).getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals("zvszj", model.getValue().get(0).getEnvironmentVariables().get("auvjfdxxivet"));
        Assertions.assertEquals("vaolpsslqlf", model.getNextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
