// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.AppComponent;
import com.azure.developer.loadtesting.implementation.models.AppComponentsMap;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AppComponentsMapTests {
    @Test
    public void testDeserialize() {
        AppComponentsMap model =
                BinaryData.fromString(
                                "{\"resourceId\":\"mhquvgjxp\",\"testId\":\"czmehmtzopbsp\",\"testRunId\":\"upi\",\"name\":\"sybbejhph\",\"value\":{\"fp\":{\"resourceId\":\"cmsxaobhdxbm\",\"resourceName\":\"qioqjzehtbmu\",\"resourceType\":\"p\",\"displayName\":\"noi\",\"resourceGroup\":\"wlrxyb\",\"subscriptionId\":\"oqijgkdmbpaz\",\"kind\":\"bc\"}}}")
                        .toObject(AppComponentsMap.class);
        Assertions.assertEquals("czmehmtzopbsp", model.getTestId());
        Assertions.assertEquals("upi", model.getTestRunId());
        Assertions.assertEquals("cmsxaobhdxbm", model.getValue().get("fp").getResourceId());
        Assertions.assertEquals("qioqjzehtbmu", model.getValue().get("fp").getResourceName());
        Assertions.assertEquals("p", model.getValue().get("fp").getResourceType());
        Assertions.assertEquals("noi", model.getValue().get("fp").getDisplayName());
        Assertions.assertEquals("bc", model.getValue().get("fp").getKind());
    }

    @Test
    public void testSerialize() {
        AppComponentsMap model =
                new AppComponentsMap(
                                mapOf(
                                        "fp",
                                        new AppComponent("cmsxaobhdxbm", "qioqjzehtbmu", "p")
                                                .setDisplayName("noi")
                                                .setKind("bc")))
                        .setTestId("czmehmtzopbsp")
                        .setTestRunId("upi");
        model = BinaryData.fromObject(model).toObject(AppComponentsMap.class);
        Assertions.assertEquals("czmehmtzopbsp", model.getTestId());
        Assertions.assertEquals("upi", model.getTestRunId());
        Assertions.assertEquals("cmsxaobhdxbm", model.getValue().get("fp").getResourceId());
        Assertions.assertEquals("qioqjzehtbmu", model.getValue().get("fp").getResourceName());
        Assertions.assertEquals("p", model.getValue().get("fp").getResourceType());
        Assertions.assertEquals("noi", model.getValue().get("fp").getDisplayName());
        Assertions.assertEquals("bc", model.getValue().get("fp").getKind());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
