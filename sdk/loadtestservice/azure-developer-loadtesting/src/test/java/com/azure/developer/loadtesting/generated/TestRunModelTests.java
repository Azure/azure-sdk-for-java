// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.LoadTestConfig;
import com.azure.developer.loadtesting.implementation.models.PassFailCriteria;
import com.azure.developer.loadtesting.implementation.models.PassFailMetric;
import com.azure.developer.loadtesting.implementation.models.SecretMetadata;
import com.azure.developer.loadtesting.implementation.models.TestRunModel;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TestRunModelTests {
    @Test
    public void testDeserialize() {
        TestRunModel model =
                BinaryData.fromString(
                                "{\"testRunId\":\"vlopwiyighx\",\"displayName\":\"dwzbaiue\",\"testId\":\"a\",\"resourceId\":\"nyqupedeojnabck\",\"description\":\"mtxpsiebtfh\",\"status\":\"esap\",\"startDateTime\":\"2021-05-25T03:50:38Z\",\"endDateTime\":\"2021-03-26T13:00:09Z\",\"loadTestConfig\":{\"engineInstances\":1631031599,\"splitAllCSVs\":true},\"testResult\":\"tldwkyzxuutk\",\"passFailCriteria\":{\"passFailMetrics\":{\"rmclfplphoxu\":{\"clientmetric\":\"wsvlxotogtwrupqs\",\"aggregate\":\"nmic\",\"condition\":\"vce\",\"requestName\":\"eil\",\"value\":81.31352089914428,\"action\":\"yfjfcnjbkcn\",\"actualValue\":52.227107002027154,\"result\":\"tkphywpnvjtoqn\"},\"xv\":{\"clientmetric\":\"rpabg\",\"aggregate\":\"psbjta\",\"condition\":\"ugxywpmueef\",\"requestName\":\"wfqkquj\",\"value\":76.74346068047178,\"action\":\"onobglaocqx\",\"actualValue\":36.81238428159163,\"result\":\"yudxytlmoy\"}}},\"testArtifacts\":{\"inputArtifacts\":{\"additionalUrls\":[]},\"outputArtifacts\":{}},\"executedDateTime\":\"2021-09-30T16:20:35Z\",\"vusers\":530279974,\"testRunStatistics\":{\"eyvjusrtslhspkde\":{\"transaction\":\"bh\",\"sampleCount\":24.63655374283943,\"errorCount\":35.474444145006714,\"errorPct\":84.46088624890977,\"meanResTime\":75.27719677489182,\"medianResTime\":86.14609996604706,\"maxResTime\":5.129382907574698,\"minResTime\":63.799086243272086,\"pct1ResTime\":79.1315828701544,\"pct2ResTime\":54.01100397264773,\"pct3ResTime\":3.1162134970906474,\"throughput\":35.262769789138474,\"receivedKBytesPerSec\":88.79184990376532,\"sentKBytesPerSec\":39.313377855702626}},\"createdDateTime\":\"2021-01-28T17:00:30Z\",\"createdBy\":\"fm\",\"lastModifiedDateTime\":\"2021-03-28T14:27:10Z\",\"lastModifiedBy\":\"vt\",\"portalUrl\":\"lmqkrhahvlj\",\"secrets\":{\"adm\":{\"value\":\"quhcdhmduala\",\"type\":\"qpv\"},\"fmisg\":{\"value\":\"rcrgvx\",\"type\":\"gomz\"}},\"environmentVariables\":{\"e\":\"b\",\"urqhaka\":\"dawkzbali\"},\"duration\":142732787655569529,\"subnetId\":\"sfwxosowzxc\"}")
                        .toObject(TestRunModel.class);
        Assertions.assertEquals("dwzbaiue", model.getDisplayName());
        Assertions.assertEquals("a", model.getTestId());
        Assertions.assertEquals("mtxpsiebtfh", model.getDescription());
        Assertions.assertEquals(1631031599, model.getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals(
                "wsvlxotogtwrupqs",
                model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getClientmetric());
        Assertions.assertEquals(
                "nmic", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getAggregate());
        Assertions.assertEquals(
                "vce", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getCondition());
        Assertions.assertEquals(
                "eil", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getRequestName());
        Assertions.assertEquals(
                81.31352089914428D, model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getValue());
        Assertions.assertEquals(
                "yfjfcnjbkcn", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getAction());
        Assertions.assertEquals("quhcdhmduala", model.getSecrets().get("adm").getValue());
        Assertions.assertEquals("qpv", model.getSecrets().get("adm").getType());
        Assertions.assertEquals("b", model.getEnvironmentVariables().get("e"));
    }

    @Test
    public void testSerialize() {
        TestRunModel model =
                new TestRunModel()
                        .setDisplayName("dwzbaiue")
                        .setTestId("a")
                        .setDescription("mtxpsiebtfh")
                        .setLoadTestConfig(new LoadTestConfig().setEngineInstances(1631031599).setSplitAllCSVs(true))
                        .setPassFailCriteria(
                                new PassFailCriteria()
                                        .setPassFailMetrics(
                                                mapOf(
                                                        "rmclfplphoxu",
                                                        new PassFailMetric()
                                                                .setClientmetric("wsvlxotogtwrupqs")
                                                                .setAggregate("nmic")
                                                                .setCondition("vce")
                                                                .setRequestName("eil")
                                                                .setValue(81.31352089914428D)
                                                                .setAction("yfjfcnjbkcn"),
                                                        "xv",
                                                        new PassFailMetric()
                                                                .setClientmetric("rpabg")
                                                                .setAggregate("psbjta")
                                                                .setCondition("ugxywpmueef")
                                                                .setRequestName("wfqkquj")
                                                                .setValue(76.74346068047178D)
                                                                .setAction("onobglaocqx"))))
                        .setSecrets(
                                mapOf(
                                        "adm",
                                        new SecretMetadata().setValue("quhcdhmduala").setType("qpv"),
                                        "fmisg",
                                        new SecretMetadata().setValue("rcrgvx").setType("gomz")))
                        .setEnvironmentVariables(mapOf("e", "b", "urqhaka", "dawkzbali"));
        model = BinaryData.fromObject(model).toObject(TestRunModel.class);
        Assertions.assertEquals("dwzbaiue", model.getDisplayName());
        Assertions.assertEquals("a", model.getTestId());
        Assertions.assertEquals("mtxpsiebtfh", model.getDescription());
        Assertions.assertEquals(1631031599, model.getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals(
                "wsvlxotogtwrupqs",
                model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getClientmetric());
        Assertions.assertEquals(
                "nmic", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getAggregate());
        Assertions.assertEquals(
                "vce", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getCondition());
        Assertions.assertEquals(
                "eil", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getRequestName());
        Assertions.assertEquals(
                81.31352089914428D, model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getValue());
        Assertions.assertEquals(
                "yfjfcnjbkcn", model.getPassFailCriteria().getPassFailMetrics().get("rmclfplphoxu").getAction());
        Assertions.assertEquals("quhcdhmduala", model.getSecrets().get("adm").getValue());
        Assertions.assertEquals("qpv", model.getSecrets().get("adm").getType());
        Assertions.assertEquals("b", model.getEnvironmentVariables().get("e"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
