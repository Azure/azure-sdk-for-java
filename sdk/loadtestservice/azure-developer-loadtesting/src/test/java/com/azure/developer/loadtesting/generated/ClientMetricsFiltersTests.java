// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.ClientMetricsFilters;
import com.azure.developer.loadtesting.implementation.models.Filters;
import com.azure.developer.loadtesting.implementation.models.TimeRange;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ClientMetricsFiltersTests {
    @Test
    public void testDeserialize() {
        ClientMetricsFilters model =
                BinaryData.fromString(
                                "{\"testRunId\":\"keqdcvdrhvoods\",\"filters\":{\"requestSamplerValues\":[\"bzdopcj\",\"vnhdldwmgxcxr\",\"lpmutwuoegrpkhj\",\"niyqslui\"],\"errorFiltersValues\":[\"ggkzzlvmbmpa\",\"modfvuefywsbpfvm\",\"yhrfouyftaakcpw\",\"yzvqt\"]},\"timeRange\":{\"startTime\":\"2021-09-22T09:26:58Z\",\"endTime\":\"2021-09-15T15:14:36Z\"}}")
                        .toObject(ClientMetricsFilters.class);
        Assertions.assertEquals("keqdcvdrhvoods", model.getTestRunId());
        Assertions.assertEquals("bzdopcj", model.getFilters().getRequestSamplerValues().get(0));
        Assertions.assertEquals("ggkzzlvmbmpa", model.getFilters().getErrorFiltersValues().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-22T09:26:58Z"), model.getTimeRange().getStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T15:14:36Z"), model.getTimeRange().getEndTime());
    }

    @Test
    public void testSerialize() {
        ClientMetricsFilters model =
                new ClientMetricsFilters()
                        .setTestRunId("keqdcvdrhvoods")
                        .setFilters(
                                new Filters()
                                        .setRequestSamplerValues(
                                                Arrays.asList(
                                                        "bzdopcj", "vnhdldwmgxcxr", "lpmutwuoegrpkhj", "niyqslui"))
                                        .setErrorFiltersValues(
                                                Arrays.asList(
                                                        "ggkzzlvmbmpa",
                                                        "modfvuefywsbpfvm",
                                                        "yhrfouyftaakcpw",
                                                        "yzvqt")))
                        .setTimeRange(
                                new TimeRange()
                                        .setStartTime(OffsetDateTime.parse("2021-09-22T09:26:58Z"))
                                        .setEndTime(OffsetDateTime.parse("2021-09-15T15:14:36Z")));
        model = BinaryData.fromObject(model).toObject(ClientMetricsFilters.class);
        Assertions.assertEquals("keqdcvdrhvoods", model.getTestRunId());
        Assertions.assertEquals("bzdopcj", model.getFilters().getRequestSamplerValues().get(0));
        Assertions.assertEquals("ggkzzlvmbmpa", model.getFilters().getErrorFiltersValues().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-22T09:26:58Z"), model.getTimeRange().getStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T15:14:36Z"), model.getTimeRange().getEndTime());
    }
}
