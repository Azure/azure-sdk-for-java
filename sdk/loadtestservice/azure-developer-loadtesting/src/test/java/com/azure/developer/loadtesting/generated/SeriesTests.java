// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.Series;
import com.azure.developer.loadtesting.implementation.models.TimeSeries;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SeriesTests {
    @Test
    public void testDeserialize() {
        Series model =
                BinaryData.fromString(
                                "{\"activeUsers\":{\"izxbmpgcjef\":[{\"timestamp\":\"2021-10-04T07:28:11Z\",\"value\":92.22079373726689},{\"timestamp\":\"2021-06-26T20:58:29Z\",\"value\":2.299894041657846},{\"timestamp\":\"2021-03-25T05:26:25Z\",\"value\":94.56387544596132}]},\"responseTime\":{\"d\":[{\"timestamp\":\"2021-05-22T02:28:39Z\",\"value\":98.18414033464762}]},\"throughput\":{\"mnzb\":[{\"timestamp\":\"2021-02-09T00:05:07Z\",\"value\":86.09688986688754}],\"dyhtozfikdowwquu\":[{\"timestamp\":\"2021-09-06T03:21:41Z\",\"value\":25.369948465939373},{\"timestamp\":\"2021-07-30T09:20:18Z\",\"value\":49.83795369512855},{\"timestamp\":\"2021-08-25T15:11:39Z\",\"value\":17.40379051397306},{\"timestamp\":\"2021-03-26T18:18:01Z\",\"value\":13.315355649235116}],\"zonosgg\":[{\"timestamp\":\"2021-05-15T23:08:57Z\",\"value\":83.69136348663503},{\"timestamp\":\"2021-10-23T21:40:50Z\",\"value\":87.05152697933156}],\"iiswacffgdkzze\":[{\"timestamp\":\"2021-04-17T15:34:56Z\",\"value\":26.79557146459449},{\"timestamp\":\"2021-01-27T23:27:37Z\",\"value\":4.689437310526101},{\"timestamp\":\"2021-06-19T07:56:54Z\",\"value\":55.007020519994455}]},\"errors\":{\"ppfufl\":[{\"timestamp\":\"2021-08-19T00:26:37Z\",\"value\":70.37932285828938},{\"timestamp\":\"2021-01-14T03:31:38Z\",\"value\":40.827588761382884}],\"cnihgwqapnedgfbc\":[{\"timestamp\":\"2021-05-23T16:48:47Z\",\"value\":46.16105003491787},{\"timestamp\":\"2021-07-11T09:21:13Z\",\"value\":92.56029614054873},{\"timestamp\":\"2021-07-13T08:45:58Z\",\"value\":37.0611510862625}]}}")
                        .toObject(Series.class);
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-10-04T07:28:11Z"),
                model.getActiveUsers().get("izxbmpgcjef").get(0).getTimestamp());
        Assertions.assertEquals(92.22079373726689D, model.getActiveUsers().get("izxbmpgcjef").get(0).getValue());
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-05-22T02:28:39Z"), model.getResponseTime().get("d").get(0).getTimestamp());
        Assertions.assertEquals(98.18414033464762D, model.getResponseTime().get("d").get(0).getValue());
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-02-09T00:05:07Z"), model.getThroughput().get("mnzb").get(0).getTimestamp());
        Assertions.assertEquals(86.09688986688754D, model.getThroughput().get("mnzb").get(0).getValue());
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-08-19T00:26:37Z"), model.getErrors().get("ppfufl").get(0).getTimestamp());
        Assertions.assertEquals(70.37932285828938D, model.getErrors().get("ppfufl").get(0).getValue());
    }

    @Test
    public void testSerialize() {
        Series model =
                new Series()
                        .setActiveUsers(
                                mapOf(
                                        "izxbmpgcjef",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-10-04T07:28:11Z"))
                                                        .setValue(92.22079373726689D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-06-26T20:58:29Z"))
                                                        .setValue(2.299894041657846D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-03-25T05:26:25Z"))
                                                        .setValue(94.56387544596132D))))
                        .setResponseTime(
                                mapOf(
                                        "d",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-05-22T02:28:39Z"))
                                                        .setValue(98.18414033464762D))))
                        .setThroughput(
                                mapOf(
                                        "mnzb",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-02-09T00:05:07Z"))
                                                        .setValue(86.09688986688754D)),
                                        "dyhtozfikdowwquu",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-09-06T03:21:41Z"))
                                                        .setValue(25.369948465939373D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-07-30T09:20:18Z"))
                                                        .setValue(49.83795369512855D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-08-25T15:11:39Z"))
                                                        .setValue(17.40379051397306D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-03-26T18:18:01Z"))
                                                        .setValue(13.315355649235116D)),
                                        "zonosgg",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-05-15T23:08:57Z"))
                                                        .setValue(83.69136348663503D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-10-23T21:40:50Z"))
                                                        .setValue(87.05152697933156D)),
                                        "iiswacffgdkzze",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-04-17T15:34:56Z"))
                                                        .setValue(26.79557146459449D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-01-27T23:27:37Z"))
                                                        .setValue(4.689437310526101D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-06-19T07:56:54Z"))
                                                        .setValue(55.007020519994455D))))
                        .setErrors(
                                mapOf(
                                        "ppfufl",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-08-19T00:26:37Z"))
                                                        .setValue(70.37932285828938D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-01-14T03:31:38Z"))
                                                        .setValue(40.827588761382884D)),
                                        "cnihgwqapnedgfbc",
                                        Arrays.asList(
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-05-23T16:48:47Z"))
                                                        .setValue(46.16105003491787D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-07-11T09:21:13Z"))
                                                        .setValue(92.56029614054873D),
                                                new TimeSeries()
                                                        .setTimestamp(OffsetDateTime.parse("2021-07-13T08:45:58Z"))
                                                        .setValue(37.0611510862625D))));
        model = BinaryData.fromObject(model).toObject(Series.class);
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-10-04T07:28:11Z"),
                model.getActiveUsers().get("izxbmpgcjef").get(0).getTimestamp());
        Assertions.assertEquals(92.22079373726689D, model.getActiveUsers().get("izxbmpgcjef").get(0).getValue());
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-05-22T02:28:39Z"), model.getResponseTime().get("d").get(0).getTimestamp());
        Assertions.assertEquals(98.18414033464762D, model.getResponseTime().get("d").get(0).getValue());
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-02-09T00:05:07Z"), model.getThroughput().get("mnzb").get(0).getTimestamp());
        Assertions.assertEquals(86.09688986688754D, model.getThroughput().get("mnzb").get(0).getValue());
        Assertions.assertEquals(
                OffsetDateTime.parse("2021-08-19T00:26:37Z"), model.getErrors().get("ppfufl").get(0).getTimestamp());
        Assertions.assertEquals(70.37932285828938D, model.getErrors().get("ppfufl").get(0).getValue());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
