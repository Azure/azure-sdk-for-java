// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.LoadTestConfig;
import com.azure.developer.loadtesting.implementation.models.PassFailCriteria;
import com.azure.developer.loadtesting.implementation.models.TestModel;
import com.azure.developer.loadtesting.implementation.models.TestModelResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TestModelResourceListTests {
    @Test
    public void testDeserialize() {
        TestModelResourceList model =
                BinaryData.fromString(
                                "{\"value\":[{\"testId\":\"jky\",\"description\":\"j\",\"displayName\":\"ujqgidok\",\"resourceId\":\"ljyoxgvcltb\",\"loadTestConfig\":{\"engineInstances\":142984166,\"splitAllCSVs\":true},\"passFailCriteria\":{\"passFailMetrics\":{}},\"createdDateTime\":\"2021-05-08T06:07:04Z\",\"createdBy\":\"hbijhtxfvgxb\",\"lastModifiedDateTime\":\"2021-01-10T16:47:02Z\",\"lastModifiedBy\":\"nehmpvecx\",\"inputArtifacts\":{\"additionalUrls\":[]},\"secrets\":{},\"environmentVariables\":{\"lzlfbxzpuz\":\"mpukgriw\",\"yydhibnuqqk\":\"cispnqzahmgkbr\",\"drgvtqagn\":\"ik\"},\"subnetId\":\"ynhijggme\",\"keyvaultReferenceIdentityType\":\"siarbutrcvpn\",\"keyvaultReferenceIdentityId\":\"zmhjrunmp\"},{\"testId\":\"tdbhrbnla\",\"description\":\"xmyskp\",\"displayName\":\"enbtkcxywny\",\"resourceId\":\"rsyn\",\"loadTestConfig\":{\"engineInstances\":1149857481,\"splitAllCSVs\":false},\"passFailCriteria\":{\"passFailMetrics\":{}},\"createdDateTime\":\"2021-05-31T03:16:56Z\",\"createdBy\":\"clha\",\"lastModifiedDateTime\":\"2021-03-19T01:34:05Z\",\"lastModifiedBy\":\"abphlw\",\"inputArtifacts\":{\"additionalUrls\":[]},\"secrets\":{},\"environmentVariables\":{\"twwrqp\":\"cocmnyyaztt\"},\"subnetId\":\"dckzywbiexz\",\"keyvaultReferenceIdentityType\":\"yueaxibxujwb\",\"keyvaultReferenceIdentityId\":\"walm\"}],\"nextLink\":\"yoxa\"}")
                        .toObject(TestModelResourceList.class);
        Assertions.assertEquals("j", model.getValue().get(0).getDescription());
        Assertions.assertEquals("ujqgidok", model.getValue().get(0).getDisplayName());
        Assertions.assertEquals(142984166, model.getValue().get(0).getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getValue().get(0).getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals("mpukgriw", model.getValue().get(0).getEnvironmentVariables().get("lzlfbxzpuz"));
        Assertions.assertEquals("ynhijggme", model.getValue().get(0).getSubnetId());
        Assertions.assertEquals("siarbutrcvpn", model.getValue().get(0).getKeyvaultReferenceIdentityType());
        Assertions.assertEquals("zmhjrunmp", model.getValue().get(0).getKeyvaultReferenceIdentityId());
        Assertions.assertEquals("yoxa", model.getNextLink());
    }

    @Test
    public void testSerialize() {
        TestModelResourceList model =
                new TestModelResourceList(
                                Arrays.asList(
                                        new TestModel()
                                                .setDescription("j")
                                                .setDisplayName("ujqgidok")
                                                .setLoadTestConfig(
                                                        new LoadTestConfig()
                                                                .setEngineInstances(142984166)
                                                                .setSplitAllCSVs(true))
                                                .setPassFailCriteria(new PassFailCriteria().setPassFailMetrics(mapOf()))
                                                .setSecrets(mapOf())
                                                .setEnvironmentVariables(
                                                        mapOf(
                                                                "lzlfbxzpuz",
                                                                "mpukgriw",
                                                                "yydhibnuqqk",
                                                                "cispnqzahmgkbr",
                                                                "drgvtqagn",
                                                                "ik"))
                                                .setSubnetId("ynhijggme")
                                                .setKeyvaultReferenceIdentityType("siarbutrcvpn")
                                                .setKeyvaultReferenceIdentityId("zmhjrunmp"),
                                        new TestModel()
                                                .setDescription("xmyskp")
                                                .setDisplayName("enbtkcxywny")
                                                .setLoadTestConfig(
                                                        new LoadTestConfig()
                                                                .setEngineInstances(1149857481)
                                                                .setSplitAllCSVs(false))
                                                .setPassFailCriteria(new PassFailCriteria().setPassFailMetrics(mapOf()))
                                                .setSecrets(mapOf())
                                                .setEnvironmentVariables(mapOf("twwrqp", "cocmnyyaztt"))
                                                .setSubnetId("dckzywbiexz")
                                                .setKeyvaultReferenceIdentityType("yueaxibxujwb")
                                                .setKeyvaultReferenceIdentityId("walm")))
                        .setNextLink("yoxa");
        model = BinaryData.fromObject(model).toObject(TestModelResourceList.class);
        Assertions.assertEquals("j", model.getValue().get(0).getDescription());
        Assertions.assertEquals("ujqgidok", model.getValue().get(0).getDisplayName());
        Assertions.assertEquals(142984166, model.getValue().get(0).getLoadTestConfig().getEngineInstances());
        Assertions.assertEquals(true, model.getValue().get(0).getLoadTestConfig().isSplitAllCSVs());
        Assertions.assertEquals("mpukgriw", model.getValue().get(0).getEnvironmentVariables().get("lzlfbxzpuz"));
        Assertions.assertEquals("ynhijggme", model.getValue().get(0).getSubnetId());
        Assertions.assertEquals("siarbutrcvpn", model.getValue().get(0).getKeyvaultReferenceIdentityType());
        Assertions.assertEquals("zmhjrunmp", model.getValue().get(0).getKeyvaultReferenceIdentityId());
        Assertions.assertEquals("yoxa", model.getNextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
