// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.PassFailCriteria;
import com.azure.developer.loadtesting.implementation.models.PassFailMetric;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PassFailCriteriaTests {
    @Test
    public void testDeserialize() {
        PassFailCriteria model =
                BinaryData.fromString(
                                "{\"passFailMetrics\":{\"yiuokktwh\":{\"clientmetric\":\"unqecanoae\",\"aggregate\":\"fhyhltrpmopjmcma\",\"condition\":\"okth\",\"requestName\":\"iuaod\",\"value\":49.02669503174233,\"action\":\"vxodpu\",\"actualValue\":83.70553981890328,\"result\":\"ydagfuaxbe\"},\"d\":{\"clientmetric\":\"xw\",\"aggregate\":\"wqsmbsur\",\"condition\":\"imoryocfsfksym\",\"requestName\":\"ys\",\"value\":0.7116403106567359,\"action\":\"xhqyudxorrqnb\",\"actualValue\":40.67764391393379,\"result\":\"yifqrvkdvjsllrmv\"},\"rsa\":{\"clientmetric\":\"atkpnp\",\"aggregate\":\"exxbczwtr\",\"condition\":\"iqzbq\",\"requestName\":\"sovmyokacspkwl\",\"value\":77.86307144365512,\"action\":\"pxjmflbvvnchr\",\"actualValue\":65.8967024807498,\"result\":\"wzjuqk\"},\"eggzfb\":{\"clientmetric\":\"wkuofoskghsauu\",\"aggregate\":\"jmvxie\",\"condition\":\"ugidyjrr\",\"requestName\":\"y\",\"value\":93.63707158222255,\"action\":\"xc\",\"actualValue\":14.791695296295293,\"result\":\"lhocohslkev\"}}}")
                        .toObject(PassFailCriteria.class);
        Assertions.assertEquals("unqecanoae", model.getPassFailMetrics().get("yiuokktwh").getClientmetric());
        Assertions.assertEquals("fhyhltrpmopjmcma", model.getPassFailMetrics().get("yiuokktwh").getAggregate());
        Assertions.assertEquals("okth", model.getPassFailMetrics().get("yiuokktwh").getCondition());
        Assertions.assertEquals("iuaod", model.getPassFailMetrics().get("yiuokktwh").getRequestName());
        Assertions.assertEquals(49.02669503174233D, model.getPassFailMetrics().get("yiuokktwh").getValue());
        Assertions.assertEquals("vxodpu", model.getPassFailMetrics().get("yiuokktwh").getAction());
    }

    @Test
    public void testSerialize() {
        PassFailCriteria model =
                new PassFailCriteria()
                        .setPassFailMetrics(
                                mapOf(
                                        "yiuokktwh",
                                        new PassFailMetric()
                                                .setClientmetric("unqecanoae")
                                                .setAggregate("fhyhltrpmopjmcma")
                                                .setCondition("okth")
                                                .setRequestName("iuaod")
                                                .setValue(49.02669503174233D)
                                                .setAction("vxodpu"),
                                        "d",
                                        new PassFailMetric()
                                                .setClientmetric("xw")
                                                .setAggregate("wqsmbsur")
                                                .setCondition("imoryocfsfksym")
                                                .setRequestName("ys")
                                                .setValue(0.7116403106567359D)
                                                .setAction("xhqyudxorrqnb"),
                                        "rsa",
                                        new PassFailMetric()
                                                .setClientmetric("atkpnp")
                                                .setAggregate("exxbczwtr")
                                                .setCondition("iqzbq")
                                                .setRequestName("sovmyokacspkwl")
                                                .setValue(77.86307144365512D)
                                                .setAction("pxjmflbvvnchr"),
                                        "eggzfb",
                                        new PassFailMetric()
                                                .setClientmetric("wkuofoskghsauu")
                                                .setAggregate("jmvxie")
                                                .setCondition("ugidyjrr")
                                                .setRequestName("y")
                                                .setValue(93.63707158222255D)
                                                .setAction("xc")));
        model = BinaryData.fromObject(model).toObject(PassFailCriteria.class);
        Assertions.assertEquals("unqecanoae", model.getPassFailMetrics().get("yiuokktwh").getClientmetric());
        Assertions.assertEquals("fhyhltrpmopjmcma", model.getPassFailMetrics().get("yiuokktwh").getAggregate());
        Assertions.assertEquals("okth", model.getPassFailMetrics().get("yiuokktwh").getCondition());
        Assertions.assertEquals("iuaod", model.getPassFailMetrics().get("yiuokktwh").getRequestName());
        Assertions.assertEquals(49.02669503174233D, model.getPassFailMetrics().get("yiuokktwh").getValue());
        Assertions.assertEquals("vxodpu", model.getPassFailMetrics().get("yiuokktwh").getAction());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
