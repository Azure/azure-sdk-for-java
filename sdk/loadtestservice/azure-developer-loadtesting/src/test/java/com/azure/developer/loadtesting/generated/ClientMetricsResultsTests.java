// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.models.ClientMetricsResults;
import com.azure.developer.loadtesting.implementation.models.Series;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ClientMetricsResultsTests {
    @Test
    public void testDeserialize() {
        ClientMetricsResults model =
                BinaryData.fromString(
                                "{\"testRunId\":\"cdntnevfiwjmy\",\"timeSeries\":{\"activeUsers\":{\"lswtmweriofzpyqs\":[],\"wab\":[],\"tshhszhedp\":[],\"wiwubm\":[]},\"responseTime\":{\"sldnkwwtppjflcxo\":[],\"okonzmnsikvmkqz\":[],\"qkdltfz\":[],\"hhvh\":[]},\"throughput\":{\"odkwobd\":[]},\"errors\":{\"ibqdxbxwakbogqx\":[],\"lkzgxhuriplbp\":[],\"xunkbebxmubyynt\":[],\"rbqtkoie\":[]}}}")
                        .toObject(ClientMetricsResults.class);
        Assertions.assertEquals("cdntnevfiwjmy", model.getTestRunId());
    }

    @Test
    public void testSerialize() {
        ClientMetricsResults model =
                new ClientMetricsResults()
                        .setTestRunId("cdntnevfiwjmy")
                        .setTimeSeries(
                                new Series()
                                        .setActiveUsers(
                                                mapOf(
                                                        "lswtmweriofzpyqs",
                                                        Arrays.asList(),
                                                        "wab",
                                                        Arrays.asList(),
                                                        "tshhszhedp",
                                                        Arrays.asList(),
                                                        "wiwubm",
                                                        Arrays.asList()))
                                        .setResponseTime(
                                                mapOf(
                                                        "sldnkwwtppjflcxo",
                                                        Arrays.asList(),
                                                        "okonzmnsikvmkqz",
                                                        Arrays.asList(),
                                                        "qkdltfz",
                                                        Arrays.asList(),
                                                        "hhvh",
                                                        Arrays.asList()))
                                        .setThroughput(mapOf("odkwobd", Arrays.asList()))
                                        .setErrors(
                                                mapOf(
                                                        "ibqdxbxwakbogqx",
                                                        Arrays.asList(),
                                                        "lkzgxhuriplbp",
                                                        Arrays.asList(),
                                                        "xunkbebxmubyynt",
                                                        Arrays.asList(),
                                                        "rbqtkoie",
                                                        Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(ClientMetricsResults.class);
        Assertions.assertEquals("cdntnevfiwjmy", model.getTestRunId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
