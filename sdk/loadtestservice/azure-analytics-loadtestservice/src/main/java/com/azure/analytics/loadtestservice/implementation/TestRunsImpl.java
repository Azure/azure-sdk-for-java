// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.loadtestservice.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TestRuns. */
public final class TestRunsImpl {
    /** The proxy service used to perform REST calls. */
    private final TestRunsService service;

    /** The service client containing this operation class. */
    private final AzureLoadTestingClientImpl client;

    /**
     * Initializes an instance of TestRunsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TestRunsImpl(AzureLoadTestingClientImpl client) {
        this.service = RestProxy.create(TestRunsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureLoadTestingTestRuns to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{Endpoint}")
    @ServiceInterface(name = "AzureLoadTestingTest")
    private interface TestRunsService {
        @Delete("/testruns/{testRunId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTestRun(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Patch("/testruns/{testRunId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAndUpdateTest(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData body,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/testruns/{testRunId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTestRun(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/testruns/{testRunId}/files/{fileId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTestRunFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @PathParam("fileId") String fileId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/testruns/sortAndFilter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTestRunsSearch(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/testruns/{testRunId}:stop")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> stopTestRun(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/testruns/{testRunId}/clientMetrics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTestRunClientMetrics(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData body,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/testruns/{testRunId}/clientMetricsFilters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTestRunClientMetricsFilters(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestRunWithResponseAsync(String testRunId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteTestRun(
                                this.client.getEndpoint(),
                                testRunId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestRunWithResponseAsync(
            String testRunId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteTestRun(
                this.client.getEndpoint(),
                testRunId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions) {
        return deleteTestRunWithResponseAsync(testRunId, requestOptions).block();
    }

    /**
     * Create and start a new test run with the given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>oldTestRunId</td><td>String</td><td>No</td><td>Existing test run Id that should be rerun.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAndUpdateTestWithResponseAsync(
            String testRunId, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createAndUpdateTest(
                                this.client.getEndpoint(),
                                testRunId,
                                this.client.getServiceVersion().getVersion(),
                                body,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Create and start a new test run with the given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>oldTestRunId</td><td>String</td><td>No</td><td>Existing test run Id that should be rerun.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAndUpdateTestWithResponseAsync(
            String testRunId, BinaryData body, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.createAndUpdateTest(
                this.client.getEndpoint(),
                testRunId,
                this.client.getServiceVersion().getVersion(),
                body,
                accept,
                requestOptions,
                context);
    }

    /**
     * Create and start a new test run with the given name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>oldTestRunId</td><td>String</td><td>No</td><td>Existing test run Id that should be rerun.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test run model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAndUpdateTestWithResponse(
            String testRunId, BinaryData body, RequestOptions requestOptions) {
        return createAndUpdateTestWithResponseAsync(testRunId, body, requestOptions).block();
    }

    /**
     * Get test run details by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test run details by name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunWithResponseAsync(String testRunId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRun(
                                this.client.getEndpoint(),
                                testRunId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get test run details by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test run details by name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunWithResponseAsync(
            String testRunId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getTestRun(
                this.client.getEndpoint(),
                testRunId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get test run details by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test run details by name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestRunWithResponse(String testRunId, RequestOptions requestOptions) {
        return getTestRunWithResponseAsync(testRunId, requestOptions).block();
    }

    /**
     * Get test run file by file name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     *     fileId: String
     *     filename: String
     *     fileType: String(0/1/2)
     *     expireTime: OffsetDateTime
     *     validationStatus: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test run file by file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunFileWithResponseAsync(
            String testRunId, String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRunFile(
                                this.client.getEndpoint(),
                                testRunId,
                                fileId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get test run file by file name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     *     fileId: String
     *     filename: String
     *     fileType: String(0/1/2)
     *     expireTime: OffsetDateTime
     *     validationStatus: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test run file by file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunFileWithResponseAsync(
            String testRunId, String fileId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getTestRunFile(
                this.client.getEndpoint(),
                testRunId,
                fileId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get test run file by file name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     *     fileId: String
     *     filename: String
     *     fileType: String(0/1/2)
     *     expireTime: OffsetDateTime
     *     validationStatus: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test run file by file name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestRunFileWithResponse(
            String testRunId, String fileId, RequestOptions requestOptions) {
        return getTestRunFileWithResponseAsync(testRunId, fileId, requestOptions).block();
    }

    /**
     * Get all test runs with given filters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - description, executedUser.</td></tr>
     *     <tr><td>executionFrom</td><td>OffsetDateTime</td><td>No</td><td>The end DateTime(ISO 8601 literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>executionTo</td><td>OffsetDateTime</td><td>No</td><td>The start DateTime(ISO 8601 literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>Comma separated list of test run status, value can be -  "ACCEPTED", "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     * "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             testRunId: String
     *             displayName: String
     *             testId: String
     *             resourceId: String
     *             description: String
     *             status: String
     *             startDateTime: OffsetDateTime
     *             endDateTime: OffsetDateTime
     *             loadTestConfig: {
     *                 engineInstances: Integer
     *                 splitAllCSVs: Boolean
     *             }
     *             testResult: String
     *             passFailCriteria: {
     *                 passFailMetrics: {
     *                     String: {
     *                         clientmetric: String
     *                         aggregate: String
     *                         condition: String
     *                         value: Double
     *                         action: String
     *                         actualValue: Double
     *                         result: String
     *                     }
     *                 }
     *             }
     *             testArtifacts: {
     *                 inputArtifacts: {
     *                     configUrl: {
     *                         url: String
     *                         fileId: String
     *                         filename: String
     *                         fileType: String(0/1/2)
     *                         expireTime: OffsetDateTime
     *                         validationStatus: String
     *                     }
     *                     testScriptUrl: (recursive schema, see testScriptUrl above)
     *                     userPropUrl: (recursive schema, see userPropUrl above)
     *                     inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *                     additionalUrls: [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 outputArtifacts: {
     *                     resultUrl: (recursive schema, see resultUrl above)
     *                     logsUrl: (recursive schema, see logsUrl above)
     *                 }
     *             }
     *             executedDateTime: OffsetDateTime
     *             vusers: Integer
     *             testRunStatistics: {
     *                 String: {
     *                     transaction: String
     *                     sampleCount: Double
     *                     errorCount: Double
     *                     errorPct: Double
     *                     meanResTime: Double
     *                     medianResTime: Double
     *                     maxResTime: Double
     *                     minResTime: Double
     *                     pct1ResTime: Double
     *                     pct2ResTime: Double
     *                     pct3ResTime: Double
     *                     throughput: Double
     *                     receivedKBytesPerSec: Double
     *                     sentKBytesPerSec: Double
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime
     *             createdBy: String
     *             lastModifiedDateTime: OffsetDateTime
     *             lastModifiedBy: String
     *             portalUrl: String
     *             secrets: {
     *                 String: {
     *                     value: String
     *                     type: String
     *                 }
     *             }
     *             environmentVariables: {
     *                 String: String
     *             }
     *             duration: Long
     *             subnetId: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test runs with given filters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listTestRunsSearchWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.listTestRunsSearch(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get all test runs with given filters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - description, executedUser.</td></tr>
     *     <tr><td>executionFrom</td><td>OffsetDateTime</td><td>No</td><td>The end DateTime(ISO 8601 literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>executionTo</td><td>OffsetDateTime</td><td>No</td><td>The start DateTime(ISO 8601 literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>Comma separated list of test run status, value can be -  "ACCEPTED", "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     * "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             testRunId: String
     *             displayName: String
     *             testId: String
     *             resourceId: String
     *             description: String
     *             status: String
     *             startDateTime: OffsetDateTime
     *             endDateTime: OffsetDateTime
     *             loadTestConfig: {
     *                 engineInstances: Integer
     *                 splitAllCSVs: Boolean
     *             }
     *             testResult: String
     *             passFailCriteria: {
     *                 passFailMetrics: {
     *                     String: {
     *                         clientmetric: String
     *                         aggregate: String
     *                         condition: String
     *                         value: Double
     *                         action: String
     *                         actualValue: Double
     *                         result: String
     *                     }
     *                 }
     *             }
     *             testArtifacts: {
     *                 inputArtifacts: {
     *                     configUrl: {
     *                         url: String
     *                         fileId: String
     *                         filename: String
     *                         fileType: String(0/1/2)
     *                         expireTime: OffsetDateTime
     *                         validationStatus: String
     *                     }
     *                     testScriptUrl: (recursive schema, see testScriptUrl above)
     *                     userPropUrl: (recursive schema, see userPropUrl above)
     *                     inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *                     additionalUrls: [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 outputArtifacts: {
     *                     resultUrl: (recursive schema, see resultUrl above)
     *                     logsUrl: (recursive schema, see logsUrl above)
     *                 }
     *             }
     *             executedDateTime: OffsetDateTime
     *             vusers: Integer
     *             testRunStatistics: {
     *                 String: {
     *                     transaction: String
     *                     sampleCount: Double
     *                     errorCount: Double
     *                     errorPct: Double
     *                     meanResTime: Double
     *                     medianResTime: Double
     *                     maxResTime: Double
     *                     minResTime: Double
     *                     pct1ResTime: Double
     *                     pct2ResTime: Double
     *                     pct3ResTime: Double
     *                     throughput: Double
     *                     receivedKBytesPerSec: Double
     *                     sentKBytesPerSec: Double
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime
     *             createdBy: String
     *             lastModifiedDateTime: OffsetDateTime
     *             lastModifiedBy: String
     *             portalUrl: String
     *             secrets: {
     *                 String: {
     *                     value: String
     *                     type: String
     *                 }
     *             }
     *             environmentVariables: {
     *                 String: String
     *             }
     *             duration: Long
     *             subnetId: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test runs with given filters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listTestRunsSearchWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listTestRunsSearch(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get all test runs with given filters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc.</td></tr>
     *     <tr><td>continuationToken</td><td>String</td><td>No</td><td>Continuation token to get the next page of response.</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields - description, executedUser.</td></tr>
     *     <tr><td>executionFrom</td><td>OffsetDateTime</td><td>No</td><td>The end DateTime(ISO 8601 literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>executionTo</td><td>OffsetDateTime</td><td>No</td><td>The start DateTime(ISO 8601 literal format) of test-run execution time filter range.</td></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>Comma separated list of test run status, value can be -  "ACCEPTED", "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     * "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             testRunId: String
     *             displayName: String
     *             testId: String
     *             resourceId: String
     *             description: String
     *             status: String
     *             startDateTime: OffsetDateTime
     *             endDateTime: OffsetDateTime
     *             loadTestConfig: {
     *                 engineInstances: Integer
     *                 splitAllCSVs: Boolean
     *             }
     *             testResult: String
     *             passFailCriteria: {
     *                 passFailMetrics: {
     *                     String: {
     *                         clientmetric: String
     *                         aggregate: String
     *                         condition: String
     *                         value: Double
     *                         action: String
     *                         actualValue: Double
     *                         result: String
     *                     }
     *                 }
     *             }
     *             testArtifacts: {
     *                 inputArtifacts: {
     *                     configUrl: {
     *                         url: String
     *                         fileId: String
     *                         filename: String
     *                         fileType: String(0/1/2)
     *                         expireTime: OffsetDateTime
     *                         validationStatus: String
     *                     }
     *                     testScriptUrl: (recursive schema, see testScriptUrl above)
     *                     userPropUrl: (recursive schema, see userPropUrl above)
     *                     inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *                     additionalUrls: [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 outputArtifacts: {
     *                     resultUrl: (recursive schema, see resultUrl above)
     *                     logsUrl: (recursive schema, see logsUrl above)
     *                 }
     *             }
     *             executedDateTime: OffsetDateTime
     *             vusers: Integer
     *             testRunStatistics: {
     *                 String: {
     *                     transaction: String
     *                     sampleCount: Double
     *                     errorCount: Double
     *                     errorPct: Double
     *                     meanResTime: Double
     *                     medianResTime: Double
     *                     maxResTime: Double
     *                     minResTime: Double
     *                     pct1ResTime: Double
     *                     pct2ResTime: Double
     *                     pct3ResTime: Double
     *                     throughput: Double
     *                     receivedKBytesPerSec: Double
     *                     sentKBytesPerSec: Double
     *                 }
     *             }
     *             createdDateTime: OffsetDateTime
     *             createdBy: String
     *             lastModifiedDateTime: OffsetDateTime
     *             lastModifiedBy: String
     *             portalUrl: String
     *             secrets: {
     *                 String: {
     *                     value: String
     *                     type: String
     *                 }
     *             }
     *             environmentVariables: {
     *                 String: String
     *             }
     *             duration: Long
     *             subnetId: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test runs with given filters along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listTestRunsSearchWithResponse(RequestOptions requestOptions) {
        return listTestRunsSearchWithResponseAsync(requestOptions).block();
    }

    /**
     * Stop test run by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopTestRunWithResponseAsync(String testRunId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.stopTestRun(
                                this.client.getEndpoint(),
                                testRunId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Stop test run by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopTestRunWithResponseAsync(
            String testRunId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.stopTestRun(
                this.client.getEndpoint(),
                testRunId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Stop test run by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     displayName: String
     *     testId: String
     *     resourceId: String
     *     description: String
     *     status: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     loadTestConfig: {
     *         engineInstances: Integer
     *         splitAllCSVs: Boolean
     *     }
     *     testResult: String
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     testArtifacts: {
     *         inputArtifacts: {
     *             configUrl: {
     *                 url: String
     *                 fileId: String
     *                 filename: String
     *                 fileType: String(0/1/2)
     *                 expireTime: OffsetDateTime
     *                 validationStatus: String
     *             }
     *             testScriptUrl: (recursive schema, see testScriptUrl above)
     *             userPropUrl: (recursive schema, see userPropUrl above)
     *             inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *             additionalUrls: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         outputArtifacts: {
     *             resultUrl: (recursive schema, see resultUrl above)
     *             logsUrl: (recursive schema, see logsUrl above)
     *         }
     *     }
     *     executedDateTime: OffsetDateTime
     *     vusers: Integer
     *     testRunStatistics: {
     *         String: {
     *             transaction: String
     *             sampleCount: Double
     *             errorCount: Double
     *             errorPct: Double
     *             meanResTime: Double
     *             medianResTime: Double
     *             maxResTime: Double
     *             minResTime: Double
     *             pct1ResTime: Double
     *             pct2ResTime: Double
     *             pct3ResTime: Double
     *             throughput: Double
     *             receivedKBytesPerSec: Double
     *             sentKBytesPerSec: Double
     *         }
     *     }
     *     createdDateTime: OffsetDateTime
     *     createdBy: String
     *     lastModifiedDateTime: OffsetDateTime
     *     lastModifiedBy: String
     *     portalUrl: String
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     *     duration: Long
     *     subnetId: String
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test run model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> stopTestRunWithResponse(String testRunId, RequestOptions requestOptions) {
        return stopTestRunWithResponseAsync(testRunId, requestOptions).block();
    }

    /**
     * Get all client metrics for a load test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     requestSamplers: [
     *         String
     *     ]
     *     errors: [
     *         String
     *     ]
     *     percentiles: [
     *         String
     *     ]
     *     groupByInterval: String
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     timeSeries: {
     *         activeUsers: {
     *             String: [
     *                 {
     *                     timestamp: OffsetDateTime
     *                     value: Double
     *                 }
     *             ]
     *         }
     *         responseTime: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         throughput: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         errors: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all client metrics for a load test run along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunClientMetricsWithResponseAsync(
            String testRunId, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRunClientMetrics(
                                this.client.getEndpoint(),
                                testRunId,
                                this.client.getServiceVersion().getVersion(),
                                body,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get all client metrics for a load test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     requestSamplers: [
     *         String
     *     ]
     *     errors: [
     *         String
     *     ]
     *     percentiles: [
     *         String
     *     ]
     *     groupByInterval: String
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     timeSeries: {
     *         activeUsers: {
     *             String: [
     *                 {
     *                     timestamp: OffsetDateTime
     *                     value: Double
     *                 }
     *             ]
     *         }
     *         responseTime: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         throughput: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         errors: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all client metrics for a load test run along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunClientMetricsWithResponseAsync(
            String testRunId, BinaryData body, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getTestRunClientMetrics(
                this.client.getEndpoint(),
                testRunId,
                this.client.getServiceVersion().getVersion(),
                body,
                accept,
                requestOptions,
                context);
    }

    /**
     * Get all client metrics for a load test run.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     requestSamplers: [
     *         String
     *     ]
     *     errors: [
     *         String
     *     ]
     *     percentiles: [
     *         String
     *     ]
     *     groupByInterval: String
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     timeSeries: {
     *         activeUsers: {
     *             String: [
     *                 {
     *                     timestamp: OffsetDateTime
     *                     value: Double
     *                 }
     *             ]
     *         }
     *         responseTime: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         throughput: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         errors: {
     *             String: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all client metrics for a load test run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestRunClientMetricsWithResponse(
            String testRunId, BinaryData body, RequestOptions requestOptions) {
        return getTestRunClientMetricsWithResponseAsync(testRunId, body, requestOptions).block();
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     filters: {
     *         requestSamplerValues: [
     *             String
     *         ]
     *         errorFiltersValues: [
     *             String
     *         ]
     *     }
     *     timeRange: {
     *         startTime: OffsetDateTime
     *         endTime: OffsetDateTime
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all filters that are supported for client metrics for a given load test run along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunClientMetricsFiltersWithResponseAsync(
            String testRunId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRunClientMetricsFilters(
                                this.client.getEndpoint(),
                                testRunId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     filters: {
     *         requestSamplerValues: [
     *             String
     *         ]
     *         errorFiltersValues: [
     *             String
     *         ]
     *     }
     *     timeRange: {
     *         startTime: OffsetDateTime
     *         endTime: OffsetDateTime
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all filters that are supported for client metrics for a given load test run along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestRunClientMetricsFiltersWithResponseAsync(
            String testRunId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getTestRunClientMetricsFilters(
                this.client.getEndpoint(),
                testRunId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testRunId: String
     *     filters: {
     *         requestSamplerValues: [
     *             String
     *         ]
     *         errorFiltersValues: [
     *             String
     *         ]
     *     }
     *     timeRange: {
     *         startTime: OffsetDateTime
     *         endTime: OffsetDateTime
     *     }
     * }
     * }</pre>
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all filters that are supported for client metrics for a given load test run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestRunClientMetricsFiltersWithResponse(
            String testRunId, RequestOptions requestOptions) {
        return getTestRunClientMetricsFiltersWithResponseAsync(testRunId, requestOptions).block();
    }
}
