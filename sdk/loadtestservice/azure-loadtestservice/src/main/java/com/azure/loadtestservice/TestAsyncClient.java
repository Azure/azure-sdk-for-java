// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.loadtestservice;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.loadtestservice.implementation.TestsImpl;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous CloudNativeTestClient type. */
@ServiceClient(builder = CloudNativeTestClientBuilder.class, isAsync = true)
public final class TestAsyncClient {
    @Generated private final TestsImpl serviceClient;

    /**
     * Initializes an instance of Tests client.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    TestAsyncClient(TestsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates/Updates a new load test. Test name must be a valid URL character ^[a-z0-9_-]*$.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String
     *     description: String
     *     displayName: String
     *     resourceId: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     inputArtifacts: {
     *         configUrl: {
     *             url: String
     *             fileId: String
     *             filename: String
     *             expireTime: String
     *         }
     *         testScriptUrl: (recursive schema, see testScriptUrl above)
     *         inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String
     *     description: String
     *     displayName: String
     *     resourceId: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     inputArtifacts: {
     *         configUrl: {
     *             url: String
     *             fileId: String
     *             filename: String
     *             expireTime: String
     *         }
     *         testScriptUrl: (recursive schema, see testScriptUrl above)
     *         inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     * }
     * }</pre>
     *
     * @param testId Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return load test model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateTestWithResponse(
            String testId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateTestWithResponseAsync(testId, body, requestOptions);
    }

    /**
     * Delete a test with given name. Test name must be a valid URL character ^[a-z0-9_-]*$.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param testId Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the completion.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLoadTestWithResponse(String testId, RequestOptions requestOptions) {
        return this.serviceClient.deleteLoadTestWithResponseAsync(testId, requestOptions);
    }

    /**
     * Get load test model of given test name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String
     *     description: String
     *     displayName: String
     *     resourceId: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     inputArtifacts: {
     *         configUrl: {
     *             url: String
     *             fileId: String
     *             filename: String
     *             expireTime: String
     *         }
     *         testScriptUrl: (recursive schema, see testScriptUrl above)
     *         inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     * }
     * }</pre>
     *
     * @param testId Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return load test model of given test name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLoadTestWithResponse(String testId, RequestOptions requestOptions) {
        return this.serviceClient.getLoadTestWithResponseAsync(testId, requestOptions);
    }

    /**
     * Get all load tests for a given Fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderBy</td><td>String</td><td>No</td><td>Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc</td></tr>
     *     <tr><td>search</td><td>String</td><td>No</td><td>Filter search based on searchable fields- testId, createdBy.</td></tr>
     *     <tr><td>lastUpdatedStartTime</td><td>String</td><td>No</td><td>Start DateTime(Iso8601Literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>lastUpdatedEndTime</td><td>String</td><td>No</td><td>End DateTime(Iso8601Literal format) of the last updated time range to filter tests.</td></tr>
     *     <tr><td>nextLink</td><td>String</td><td>No</td><td>NextLink Token to get next page of response</td></tr>
     *     <tr><td>maxPageSize</td><td>String</td><td>No</td><td>No of results in response</td></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             testId: String
     *             description: String
     *             displayName: String
     *             resourceId: String
     *             loadTestConfig: {
     *                 engineInstances: Integer
     *             }
     *             passFailCriteria: {
     *                 passFailMetrics: {
     *                     String: {
     *                         clientmetric: String
     *                         aggregate: String
     *                         condition: String
     *                         value: Double
     *                         action: String
     *                         actualValue: Double
     *                         result: String
     *                     }
     *                 }
     *             }
     *             createdDateTime: String
     *             createdBy: String
     *             lastModifiedDateTime: String
     *             lastModifiedBy: String
     *             inputArtifacts: {
     *                 configUrl: {
     *                     url: String
     *                     fileId: String
     *                     filename: String
     *                     expireTime: String
     *                 }
     *                 testScriptUrl: (recursive schema, see testScriptUrl above)
     *                 inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *                 additionalUrls: [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             secrets: {
     *                 String: {
     *                     value: String
     *                     type: String
     *                 }
     *             }
     *             environmentVariables: {
     *                 String: String
     *             }
     *         }
     *     ]
     *     continuationToken: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return all load tests for a given Fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listLoadTestSearchWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listLoadTestSearchWithResponseAsync(requestOptions);
    }

    /**
     * Upload input file for a given test name. File name must be a valid URL character ^[a-z0-9_-]*$. File size can't
     * be more than 50 MB. Existing file with same name for the given test will be overwritten.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>contentLength</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     testId: String
     *     description: String
     *     displayName: String
     *     resourceId: String
     *     loadTestConfig: {
     *         engineInstances: Integer
     *     }
     *     passFailCriteria: {
     *         passFailMetrics: {
     *             String: {
     *                 clientmetric: String
     *                 aggregate: String
     *                 condition: String
     *                 value: Double
     *                 action: String
     *                 actualValue: Double
     *                 result: String
     *             }
     *         }
     *     }
     *     createdDateTime: String
     *     createdBy: String
     *     lastModifiedDateTime: String
     *     lastModifiedBy: String
     *     inputArtifacts: {
     *         configUrl: {
     *             url: String
     *             fileId: String
     *             filename: String
     *             expireTime: String
     *         }
     *         testScriptUrl: (recursive schema, see testScriptUrl above)
     *         inputArtifactsZipFileurl: (recursive schema, see inputArtifactsZipFileurl above)
     *         additionalUrls: [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     secrets: {
     *         String: {
     *             value: String
     *             type: String
     *         }
     *     }
     *     environmentVariables: {
     *         String: String
     *     }
     * }
     * }</pre>
     *
     * @param testId Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return load test model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> uploadTestFileWithResponse(
            String testId, String fileId, BinaryData file, RequestOptions requestOptions) {
        return this.serviceClient.uploadTestFileWithResponseAsync(testId, fileId, file, requestOptions);
    }

    /**
     * Get test file with given file name.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     url: String
     *     expireTime: String
     * }
     * }</pre>
     *
     * @param testId Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return test file with given file name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestFileWithResponse(
            String testId, String fileId, RequestOptions requestOptions) {
        return this.serviceClient.getTestFileWithResponseAsync(testId, fileId, requestOptions);
    }

    /**
     * Delete file of given file name for a test. File name must be a valid URL character ^[a-z0-9_-]*$.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param testId Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the completion.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestFileWithResponse(
            String testId, String fileId, RequestOptions requestOptions) {
        return this.serviceClient.deleteTestFileWithResponseAsync(testId, fileId, requestOptions);
    }

    /**
     * Get all test files.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             url: String
     *             fileId: String
     *             filename: String
     *             expireTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param testId Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return all test files.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllTestFilesWithResponse(String testId, RequestOptions requestOptions) {
        return this.serviceClient.getAllTestFilesWithResponseAsync(testId, requestOptions);
    }
}
