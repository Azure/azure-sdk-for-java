// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.loadtestservice;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.loadtestservice.implementation.AppComponentsImpl;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous CloudNativeTestClient type. */
@ServiceClient(builder = CloudNativeTestClientBuilder.class, isAsync = true)
public final class AppComponentAsyncClient {
    @Generated private final AppComponentsImpl serviceClient;

    /**
     * Initializes an instance of AppComponents client.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AppComponentAsyncClient(AppComponentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Associate app component (a azure resource model) to a test model or test run.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String
     *     testId: String
     *     testRunId: String
     *     name: String
     *     value: {
     *         String: {
     *             resourceId: String
     *             resourceName: String
     *             resourceType: String
     *             displayName: String
     *             resourceGroup: String
     *             subscriptionId: String
     *             kind: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String
     *     testId: String
     *     testRunId: String
     *     name: String
     *     value: {
     *         String: {
     *             resourceId: String
     *             resourceName: String
     *             resourceType: String
     *             displayName: String
     *             resourceGroup: String
     *             subscriptionId: String
     *             kind: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique identifier for app component name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body App component model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return app components model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateAppComponentsWithResponse(
            String name, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateAppComponentsWithResponseAsync(name, body, requestOptions);
    }

    /**
     * Delete app component.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param name Unique identifier for app component name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the completion.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAppComponentWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.deleteAppComponentWithResponseAsync(name, requestOptions);
    }

    /**
     * Get App components for a given appComponentName in query param.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String
     *     testId: String
     *     testRunId: String
     *     name: String
     *     value: {
     *         String: {
     *             resourceId: String
     *             resourceName: String
     *             resourceType: String
     *             displayName: String
     *             resourceGroup: String
     *             subscriptionId: String
     *             kind: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param name Unique identifier for app component name, must be a valid URL character ^[a-z0-9_-]*$.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return app components for a given appComponentName in query param.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppComponentByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getAppComponentByNameWithResponseAsync(name, requestOptions);
    }

    /**
     * Get App components for a test model or a test run of given name in query param.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>testId</td><td>String</td><td>No</td><td>Required testId, if testRunId name is not provided</td></tr>
     *     <tr><td>testRunId</td><td>String</td><td>No</td><td>Required testRunId, if testId is not provided</td></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resourceId: String
     *     testId: String
     *     testRunId: String
     *     name: String
     *     value: {
     *         String: {
     *             resourceId: String
     *             resourceName: String
     *             resourceType: String
     *             displayName: String
     *             resourceGroup: String
     *             subscriptionId: String
     *             kind: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return app components for a test model or a test run of given name in query param.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppComponentWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAppComponentWithResponseAsync(requestOptions);
    }
}
