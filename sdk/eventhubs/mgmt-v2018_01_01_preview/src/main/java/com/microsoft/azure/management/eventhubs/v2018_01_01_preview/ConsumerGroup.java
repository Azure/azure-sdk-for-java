/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventhubs.v2018_01_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.implementation.ConsumerGroupInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.implementation.EventHubsManager;
import org.joda.time.DateTime;

/**
 * Type representing ConsumerGroup.
 */
public interface ConsumerGroup extends HasInner<ConsumerGroupInner>, Indexable, Refreshable<ConsumerGroup>, Updatable<ConsumerGroup.Update>, HasManager<EventHubsManager> {
    /**
     * @return the createdAt value.
     */
    DateTime createdAt();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the updatedAt value.
     */
    DateTime updatedAt();

    /**
     * @return the userMetadata value.
     */
    String userMetadata();

    /**
     * The entirety of the ConsumerGroup definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithEventhub, DefinitionStages.WithUserMetadata, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ConsumerGroup definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ConsumerGroup definition.
         */
        interface Blank extends WithEventhub {
        }

        /**
         * The stage of the consumergroup definition allowing to specify Eventhub.
         */
        interface WithEventhub {
           /**
            * Specifies resourceGroupName, namespaceName, eventHubName.
            * @param resourceGroupName Name of the resource group within the azure subscription
            * @param namespaceName The Namespace name
            * @param eventHubName The Event Hub name
            * @return the next definition stage
            */
            WithUserMetadata withExistingEventhub(String resourceGroupName, String namespaceName, String eventHubName);
        }

        /**
         * The stage of the consumergroup definition allowing to specify UserMetadata.
         */
        interface WithUserMetadata {
           /**
            * Specifies userMetadata.
            * @param userMetadata User Metadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored
            * @return the next definition stage
            */
            WithCreate withUserMetadata(String userMetadata);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ConsumerGroup> {
        }
    }
    /**
     * The template for a ConsumerGroup update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ConsumerGroup>, UpdateStages.WithUserMetadata {
    }

    /**
     * Grouping of ConsumerGroup update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the consumergroup update allowing to specify UserMetadata.
         */
        interface WithUserMetadata {
            /**
             * Specifies userMetadata.
             * @param userMetadata User Metadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored
             * @return the next update stage
             */
            Update withUserMetadata(String userMetadata);
        }

    }
}
