/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventhubs.v2018_01_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.EHNamespace;
import rx.Observable;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.Sku;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.Identity;
import org.joda.time.DateTime;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.Encryption;

class EHNamespaceImpl extends GroupableResourceCoreImpl<EHNamespace, EHNamespaceInner, EHNamespaceImpl, EventHubsManager> implements EHNamespace, EHNamespace.Definition, EHNamespace.Update {
    EHNamespaceImpl(String name, EHNamespaceInner inner, EventHubsManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<EHNamespace> createResourceAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<EHNamespace> updateResourceAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EHNamespaceInner> getInnerAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String clusterArmId() {
        return this.inner().clusterArmId();
    }

    @Override
    public DateTime createdAt() {
        return this.inner().createdAt();
    }

    @Override
    public Encryption encryption() {
        return this.inner().encryption();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public Boolean isAutoInflateEnabled() {
        return this.inner().isAutoInflateEnabled();
    }

    @Override
    public Boolean kafkaEnabled() {
        return this.inner().kafkaEnabled();
    }

    @Override
    public Integer maximumThroughputUnits() {
        return this.inner().maximumThroughputUnits();
    }

    @Override
    public String metricId() {
        return this.inner().metricId();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String serviceBusEndpoint() {
        return this.inner().serviceBusEndpoint();
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public DateTime updatedAt() {
        return this.inner().updatedAt();
    }

    @Override
    public Boolean zoneRedundant() {
        return this.inner().zoneRedundant();
    }

    @Override
    public EHNamespaceImpl withClusterArmId(String clusterArmId) {
        this.inner().withClusterArmId(clusterArmId);
        return this;
    }

    @Override
    public EHNamespaceImpl withEncryption(Encryption encryption) {
        this.inner().withEncryption(encryption);
        return this;
    }

    @Override
    public EHNamespaceImpl withIdentity(Identity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public EHNamespaceImpl withIsAutoInflateEnabled(Boolean isAutoInflateEnabled) {
        this.inner().withIsAutoInflateEnabled(isAutoInflateEnabled);
        return this;
    }

    @Override
    public EHNamespaceImpl withKafkaEnabled(Boolean kafkaEnabled) {
        this.inner().withKafkaEnabled(kafkaEnabled);
        return this;
    }

    @Override
    public EHNamespaceImpl withMaximumThroughputUnits(Integer maximumThroughputUnits) {
        this.inner().withMaximumThroughputUnits(maximumThroughputUnits);
        return this;
    }

    @Override
    public EHNamespaceImpl withSku(Sku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public EHNamespaceImpl withZoneRedundant(Boolean zoneRedundant) {
        this.inner().withZoneRedundant(zoneRedundant);
        return this;
    }

}
