/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventhubs.v2018_01_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Configurations.
 */
public class ConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private ConfigurationsService service;
    /** The service client containing this operation class. */
    private EventHubManagementClientImpl client;

    /**
     * Initializes an instance of ConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConfigurationsInner(Retrofit retrofit, EventHubManagementClientImpl client) {
        this.service = retrofit.create(ConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Configurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventhubs.v2018_01_01_preview.Configurations patch" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default")
        Observable<Response<ResponseBody>> patch(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ClusterQuotaConfigurationPropertiesInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventhubs.v2018_01_01_preview.Configurations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterQuotaConfigurationPropertiesInner object if successful.
     */
    public ClusterQuotaConfigurationPropertiesInner patch(String resourceGroupName, String clusterName) {
        return patchWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterQuotaConfigurationPropertiesInner> patchAsync(String resourceGroupName, String clusterName, final ServiceCallback<ClusterQuotaConfigurationPropertiesInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterQuotaConfigurationPropertiesInner object
     */
    public Observable<ClusterQuotaConfigurationPropertiesInner> patchAsync(String resourceGroupName, String clusterName) {
        return patchWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>, ClusterQuotaConfigurationPropertiesInner>() {
            @Override
            public ClusterQuotaConfigurationPropertiesInner call(ServiceResponse<ClusterQuotaConfigurationPropertiesInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterQuotaConfigurationPropertiesInner object
     */
    public Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>> patchWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        final Map<String, String> settings = null;
        ClusterQuotaConfigurationPropertiesInner parameters = new ClusterQuotaConfigurationPropertiesInner();
        parameters.withSettings(null);
        return service.patch(this.client.subscriptionId(), resourceGroupName, clusterName, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>>>() {
                @Override
                public Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClusterQuotaConfigurationPropertiesInner> clientResponse = patchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param settings All possible Cluster settings - a collection of key/value paired settings which apply to quotas and configurations imposed on the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterQuotaConfigurationPropertiesInner object if successful.
     */
    public ClusterQuotaConfigurationPropertiesInner patch(String resourceGroupName, String clusterName, Map<String, String> settings) {
        return patchWithServiceResponseAsync(resourceGroupName, clusterName, settings).toBlocking().single().body();
    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param settings All possible Cluster settings - a collection of key/value paired settings which apply to quotas and configurations imposed on the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterQuotaConfigurationPropertiesInner> patchAsync(String resourceGroupName, String clusterName, Map<String, String> settings, final ServiceCallback<ClusterQuotaConfigurationPropertiesInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchWithServiceResponseAsync(resourceGroupName, clusterName, settings), serviceCallback);
    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param settings All possible Cluster settings - a collection of key/value paired settings which apply to quotas and configurations imposed on the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterQuotaConfigurationPropertiesInner object
     */
    public Observable<ClusterQuotaConfigurationPropertiesInner> patchAsync(String resourceGroupName, String clusterName, Map<String, String> settings) {
        return patchWithServiceResponseAsync(resourceGroupName, clusterName, settings).map(new Func1<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>, ClusterQuotaConfigurationPropertiesInner>() {
            @Override
            public ClusterQuotaConfigurationPropertiesInner call(ServiceResponse<ClusterQuotaConfigurationPropertiesInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param settings All possible Cluster settings - a collection of key/value paired settings which apply to quotas and configurations imposed on the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterQuotaConfigurationPropertiesInner object
     */
    public Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>> patchWithServiceResponseAsync(String resourceGroupName, String clusterName, Map<String, String> settings) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        Validator.validate(settings);
        final String apiVersion = "2018-01-01-preview";
        ClusterQuotaConfigurationPropertiesInner parameters = new ClusterQuotaConfigurationPropertiesInner();
        parameters.withSettings(settings);
        return service.patch(this.client.subscriptionId(), resourceGroupName, clusterName, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>>>() {
                @Override
                public Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClusterQuotaConfigurationPropertiesInner> clientResponse = patchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClusterQuotaConfigurationPropertiesInner> patchDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClusterQuotaConfigurationPropertiesInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClusterQuotaConfigurationPropertiesInner>() { }.getType())
                .register(201, new TypeToken<ClusterQuotaConfigurationPropertiesInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all Event Hubs Cluster settings - a collection of key/value pairs which represent the quotas and settings imposed on the cluster.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClusterQuotaConfigurationPropertiesInner object if successful.
     */
    public ClusterQuotaConfigurationPropertiesInner get(String resourceGroupName, String clusterName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Get all Event Hubs Cluster settings - a collection of key/value pairs which represent the quotas and settings imposed on the cluster.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClusterQuotaConfigurationPropertiesInner> getAsync(String resourceGroupName, String clusterName, final ServiceCallback<ClusterQuotaConfigurationPropertiesInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Get all Event Hubs Cluster settings - a collection of key/value pairs which represent the quotas and settings imposed on the cluster.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterQuotaConfigurationPropertiesInner object
     */
    public Observable<ClusterQuotaConfigurationPropertiesInner> getAsync(String resourceGroupName, String clusterName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>, ClusterQuotaConfigurationPropertiesInner>() {
            @Override
            public ClusterQuotaConfigurationPropertiesInner call(ServiceResponse<ClusterQuotaConfigurationPropertiesInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get all Event Hubs Cluster settings - a collection of key/value pairs which represent the quotas and settings imposed on the cluster.
     *
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClusterQuotaConfigurationPropertiesInner object
     */
    public Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>> getWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.get(this.client.subscriptionId(), resourceGroupName, clusterName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>>>() {
                @Override
                public Observable<ServiceResponse<ClusterQuotaConfigurationPropertiesInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClusterQuotaConfigurationPropertiesInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClusterQuotaConfigurationPropertiesInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClusterQuotaConfigurationPropertiesInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClusterQuotaConfigurationPropertiesInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
