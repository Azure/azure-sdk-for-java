/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventhubs.v2018_01_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.implementation.IpFilterRuleInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.implementation.EventHubsManager;

/**
 * Type representing IpFilterRule.
 */
public interface IpFilterRule extends HasInner<IpFilterRuleInner>, Indexable, Refreshable<IpFilterRule>, Updatable<IpFilterRule.Update>, HasManager<EventHubsManager> {
    /**
     * @return the action value.
     */
    IPAction action();

    /**
     * @return the filterName value.
     */
    String filterName();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the ipMask value.
     */
    String ipMask();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the IpFilterRule definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithNamespace, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of IpFilterRule definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a IpFilterRule definition.
         */
        interface Blank extends WithNamespace {
        }

        /**
         * The stage of the ipfilterrule definition allowing to specify Namespace.
         */
        interface WithNamespace {
           /**
            * Specifies resourceGroupName, namespaceName.
            * @param resourceGroupName Name of the resource group within the azure subscription
            * @param namespaceName The Namespace name
            * @return the next definition stage
            */
            WithCreate withExistingNamespace(String resourceGroupName, String namespaceName);
        }

        /**
         * The stage of the ipfilterrule definition allowing to specify Action.
         */
        interface WithAction {
            /**
             * Specifies action.
             * @param action The IP Filter Action. Possible values include: 'Accept', 'Reject'
             * @return the next definition stage
             */
            WithCreate withAction(IPAction action);
        }

        /**
         * The stage of the ipfilterrule definition allowing to specify FilterName.
         */
        interface WithFilterName {
            /**
             * Specifies filterName.
             * @param filterName IP Filter name
             * @return the next definition stage
             */
            WithCreate withFilterName(String filterName);
        }

        /**
         * The stage of the ipfilterrule definition allowing to specify IpMask.
         */
        interface WithIpMask {
            /**
             * Specifies ipMask.
             * @param ipMask IP Mask
             * @return the next definition stage
             */
            WithCreate withIpMask(String ipMask);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<IpFilterRule>, DefinitionStages.WithAction, DefinitionStages.WithFilterName, DefinitionStages.WithIpMask {
        }
    }
    /**
     * The template for a IpFilterRule update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<IpFilterRule>, UpdateStages.WithAction, UpdateStages.WithFilterName, UpdateStages.WithIpMask {
    }

    /**
     * Grouping of IpFilterRule update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the ipfilterrule update allowing to specify Action.
         */
        interface WithAction {
            /**
             * Specifies action.
             * @param action The IP Filter Action. Possible values include: 'Accept', 'Reject'
             * @return the next update stage
             */
            Update withAction(IPAction action);
        }

        /**
         * The stage of the ipfilterrule update allowing to specify FilterName.
         */
        interface WithFilterName {
            /**
             * Specifies filterName.
             * @param filterName IP Filter name
             * @return the next update stage
             */
            Update withFilterName(String filterName);
        }

        /**
         * The stage of the ipfilterrule update allowing to specify IpMask.
         */
        interface WithIpMask {
            /**
             * Specifies ipMask.
             * @param ipMask IP Mask
             * @return the next update stage
             */
            Update withIpMask(String ipMask);
        }

    }
}
