// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.eventhubs.generated.fluent.SchemaRegistriesClient;
import com.azure.resourcemanager.eventhubs.generated.fluent.models.SchemaGroupInner;
import com.azure.resourcemanager.eventhubs.generated.models.SchemaGroup;
import com.azure.resourcemanager.eventhubs.generated.models.SchemaRegistries;

public final class SchemaRegistriesImpl implements SchemaRegistries {
    private static final ClientLogger LOGGER = new ClientLogger(SchemaRegistriesImpl.class);

    private final SchemaRegistriesClient innerClient;

    private final com.azure.resourcemanager.eventhubs.generated.EventHubsManager serviceManager;

    public SchemaRegistriesImpl(
        SchemaRegistriesClient innerClient,
        com.azure.resourcemanager.eventhubs.generated.EventHubsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SchemaGroup> listByNamespace(String resourceGroupName, String namespaceName) {
        PagedIterable<SchemaGroupInner> inner = this.serviceClient().listByNamespace(resourceGroupName, namespaceName);
        return Utils.mapPage(inner, inner1 -> new SchemaGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<SchemaGroup> listByNamespace(
        String resourceGroupName, String namespaceName, Integer skip, Integer top, Context context) {
        PagedIterable<SchemaGroupInner> inner =
            this.serviceClient().listByNamespace(resourceGroupName, namespaceName, skip, top, context);
        return Utils.mapPage(inner, inner1 -> new SchemaGroupImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String namespaceName, String schemaGroupName) {
        this.serviceClient().delete(resourceGroupName, namespaceName, schemaGroupName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String namespaceName, String schemaGroupName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, namespaceName, schemaGroupName, context);
    }

    public SchemaGroup get(String resourceGroupName, String namespaceName, String schemaGroupName) {
        SchemaGroupInner inner = this.serviceClient().get(resourceGroupName, namespaceName, schemaGroupName);
        if (inner != null) {
            return new SchemaGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SchemaGroup> getWithResponse(
        String resourceGroupName, String namespaceName, String schemaGroupName, Context context) {
        Response<SchemaGroupInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, namespaceName, schemaGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SchemaGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SchemaGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String schemaGroupName = Utils.getValueFromIdByName(id, "schemagroups");
        if (schemaGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'schemagroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, schemaGroupName, Context.NONE).getValue();
    }

    public Response<SchemaGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String schemaGroupName = Utils.getValueFromIdByName(id, "schemagroups");
        if (schemaGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'schemagroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, schemaGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String schemaGroupName = Utils.getValueFromIdByName(id, "schemagroups");
        if (schemaGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'schemagroups'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, namespaceName, schemaGroupName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String schemaGroupName = Utils.getValueFromIdByName(id, "schemagroups");
        if (schemaGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'schemagroups'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, namespaceName, schemaGroupName, context);
    }

    private SchemaRegistriesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.eventhubs.generated.EventHubsManager manager() {
        return this.serviceManager;
    }

    public SchemaGroupImpl define(String name) {
        return new SchemaGroupImpl(name, this.manager());
    }
}
