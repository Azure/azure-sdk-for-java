// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.eventhubs.generated.EventHubsManager;
import com.azure.resourcemanager.eventhubs.generated.fluent.models.EHNamespaceInner;
import com.azure.resourcemanager.eventhubs.generated.models.EHNamespace;
import com.azure.resourcemanager.eventhubs.generated.models.Encryption;
import com.azure.resourcemanager.eventhubs.generated.models.Identity;
import com.azure.resourcemanager.eventhubs.generated.models.Sku;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class EHNamespaceImpl implements EHNamespace, EHNamespace.Definition, EHNamespace.Update {
    private EHNamespaceInner innerObject;

    private final EventHubsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public OffsetDateTime createdAt() {
        return this.innerModel().createdAt();
    }

    public OffsetDateTime updatedAt() {
        return this.innerModel().updatedAt();
    }

    public String serviceBusEndpoint() {
        return this.innerModel().serviceBusEndpoint();
    }

    public String clusterArmId() {
        return this.innerModel().clusterArmId();
    }

    public String metricId() {
        return this.innerModel().metricId();
    }

    public Boolean isAutoInflateEnabled() {
        return this.innerModel().isAutoInflateEnabled();
    }

    public Integer maximumThroughputUnits() {
        return this.innerModel().maximumThroughputUnits();
    }

    public Boolean kafkaEnabled() {
        return this.innerModel().kafkaEnabled();
    }

    public Boolean zoneRedundant() {
        return this.innerModel().zoneRedundant();
    }

    public Encryption encryption() {
        return this.innerModel().encryption();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public EHNamespaceInner innerModel() {
        return this.innerObject;
    }

    private EventHubsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String namespaceName;

    public EHNamespaceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public EHNamespace create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .createOrUpdate(resourceGroupName, namespaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public EHNamespace create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .createOrUpdate(resourceGroupName, namespaceName, this.innerModel(), context);
        return this;
    }

    public EHNamespaceImpl(String name, EventHubsManager serviceManager) {
        this.innerObject = new EHNamespaceInner();
        this.serviceManager = serviceManager;
        this.namespaceName = name;
    }

    public EHNamespaceImpl update() {
        return this;
    }

    public EHNamespace apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .updateWithResponse(resourceGroupName, namespaceName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public EHNamespace apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .updateWithResponse(resourceGroupName, namespaceName, this.innerModel(), context)
                .getValue();
        return this;
    }

    public EHNamespaceImpl(EHNamespaceInner innerObject, EventHubsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.namespaceName = Utils.getValueFromIdByName(innerObject.id(), "namespaces");
    }

    public EHNamespace refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .getByResourceGroupWithResponse(resourceGroupName, namespaceName, Context.NONE)
                .getValue();
        return this;
    }

    public EHNamespace refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .getByResourceGroupWithResponse(resourceGroupName, namespaceName, context)
                .getValue();
        return this;
    }

    public EHNamespaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EHNamespaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EHNamespaceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public EHNamespaceImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public EHNamespaceImpl withIdentity(Identity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public EHNamespaceImpl withClusterArmId(String clusterArmId) {
        this.innerModel().withClusterArmId(clusterArmId);
        return this;
    }

    public EHNamespaceImpl withIsAutoInflateEnabled(Boolean isAutoInflateEnabled) {
        this.innerModel().withIsAutoInflateEnabled(isAutoInflateEnabled);
        return this;
    }

    public EHNamespaceImpl withMaximumThroughputUnits(Integer maximumThroughputUnits) {
        this.innerModel().withMaximumThroughputUnits(maximumThroughputUnits);
        return this;
    }

    public EHNamespaceImpl withKafkaEnabled(Boolean kafkaEnabled) {
        this.innerModel().withKafkaEnabled(kafkaEnabled);
        return this;
    }

    public EHNamespaceImpl withZoneRedundant(Boolean zoneRedundant) {
        this.innerModel().withZoneRedundant(zoneRedundant);
        return this;
    }

    public EHNamespaceImpl withEncryption(Encryption encryption) {
        this.innerModel().withEncryption(encryption);
        return this;
    }
}
