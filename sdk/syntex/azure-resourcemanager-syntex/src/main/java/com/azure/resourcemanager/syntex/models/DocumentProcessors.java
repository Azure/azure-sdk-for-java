// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.syntex.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of DocumentProcessors. */
public interface DocumentProcessors {
    /**
     * Returns document processors in the subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DocumentProcessorResource> list();

    /**
     * Returns document processors in the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DocumentProcessorResource> list(Context context);

    /**
     * Returns document processors in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DocumentProcessorResource> listByResourceGroup(String resourceGroupName);

    /**
     * Returns document processors in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DocumentProcessorResource> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Returns a document processor for a given name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param processorName The name of document processor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor details along with {@link Response}.
     */
    Response<DocumentProcessorResource> getByResourceGroupWithResponse(
        String resourceGroupName, String processorName, Context context);

    /**
     * Returns a document processor for a given name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param processorName The name of document processor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor details.
     */
    DocumentProcessorResource getByResourceGroup(String resourceGroupName, String processorName);

    /**
     * Deletes document processor resource for a given name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param processorName The name of document processor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String processorName, Context context);

    /**
     * Deletes document processor resource for a given name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param processorName The name of document processor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String processorName);

    /**
     * Returns a document processor for a given name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor details along with {@link Response}.
     */
    DocumentProcessorResource getById(String id);

    /**
     * Returns a document processor for a given name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return document processor details along with {@link Response}.
     */
    Response<DocumentProcessorResource> getByIdWithResponse(String id, Context context);

    /**
     * Deletes document processor resource for a given name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes document processor resource for a given name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new DocumentProcessorResource resource.
     *
     * @param name resource name.
     * @return the first stage of the new DocumentProcessorResource definition.
     */
    DocumentProcessorResource.DefinitionStages.Blank define(String name);
}
