// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Server configurations of a Grafana instance.
 */
@Fluent
public final class GrafanaConfigurations implements JsonSerializable<GrafanaConfigurations> {
    /*
     * Email server settings.
     * https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
     */
    private Smtp smtp;

    /*
     * Grafana Snapshots settings
     */
    private Snapshots snapshots;

    /*
     * Grafana users settings
     */
    private Users users;

    /*
     * Grafana security settings
     */
    private Security security;

    /*
     * Grafana Unified Alerting Screenshots settings
     */
    private UnifiedAlertingScreenshots unifiedAlertingScreenshots;

    /**
     * Creates an instance of GrafanaConfigurations class.
     */
    public GrafanaConfigurations() {
    }

    /**
     * Get the smtp property: Email server settings.
     * https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp.
     * 
     * @return the smtp value.
     */
    public Smtp smtp() {
        return this.smtp;
    }

    /**
     * Set the smtp property: Email server settings.
     * https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp.
     * 
     * @param smtp the smtp value to set.
     * @return the GrafanaConfigurations object itself.
     */
    public GrafanaConfigurations withSmtp(Smtp smtp) {
        this.smtp = smtp;
        return this;
    }

    /**
     * Get the snapshots property: Grafana Snapshots settings.
     * 
     * @return the snapshots value.
     */
    public Snapshots snapshots() {
        return this.snapshots;
    }

    /**
     * Set the snapshots property: Grafana Snapshots settings.
     * 
     * @param snapshots the snapshots value to set.
     * @return the GrafanaConfigurations object itself.
     */
    public GrafanaConfigurations withSnapshots(Snapshots snapshots) {
        this.snapshots = snapshots;
        return this;
    }

    /**
     * Get the users property: Grafana users settings.
     * 
     * @return the users value.
     */
    public Users users() {
        return this.users;
    }

    /**
     * Set the users property: Grafana users settings.
     * 
     * @param users the users value to set.
     * @return the GrafanaConfigurations object itself.
     */
    public GrafanaConfigurations withUsers(Users users) {
        this.users = users;
        return this;
    }

    /**
     * Get the security property: Grafana security settings.
     * 
     * @return the security value.
     */
    public Security security() {
        return this.security;
    }

    /**
     * Set the security property: Grafana security settings.
     * 
     * @param security the security value to set.
     * @return the GrafanaConfigurations object itself.
     */
    public GrafanaConfigurations withSecurity(Security security) {
        this.security = security;
        return this;
    }

    /**
     * Get the unifiedAlertingScreenshots property: Grafana Unified Alerting Screenshots settings.
     * 
     * @return the unifiedAlertingScreenshots value.
     */
    public UnifiedAlertingScreenshots unifiedAlertingScreenshots() {
        return this.unifiedAlertingScreenshots;
    }

    /**
     * Set the unifiedAlertingScreenshots property: Grafana Unified Alerting Screenshots settings.
     * 
     * @param unifiedAlertingScreenshots the unifiedAlertingScreenshots value to set.
     * @return the GrafanaConfigurations object itself.
     */
    public GrafanaConfigurations withUnifiedAlertingScreenshots(UnifiedAlertingScreenshots unifiedAlertingScreenshots) {
        this.unifiedAlertingScreenshots = unifiedAlertingScreenshots;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (smtp() != null) {
            smtp().validate();
        }
        if (snapshots() != null) {
            snapshots().validate();
        }
        if (users() != null) {
            users().validate();
        }
        if (security() != null) {
            security().validate();
        }
        if (unifiedAlertingScreenshots() != null) {
            unifiedAlertingScreenshots().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("smtp", this.smtp);
        jsonWriter.writeJsonField("snapshots", this.snapshots);
        jsonWriter.writeJsonField("users", this.users);
        jsonWriter.writeJsonField("security", this.security);
        jsonWriter.writeJsonField("unifiedAlertingScreenshots", this.unifiedAlertingScreenshots);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GrafanaConfigurations from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GrafanaConfigurations if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GrafanaConfigurations.
     */
    public static GrafanaConfigurations fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GrafanaConfigurations deserializedGrafanaConfigurations = new GrafanaConfigurations();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("smtp".equals(fieldName)) {
                    deserializedGrafanaConfigurations.smtp = Smtp.fromJson(reader);
                } else if ("snapshots".equals(fieldName)) {
                    deserializedGrafanaConfigurations.snapshots = Snapshots.fromJson(reader);
                } else if ("users".equals(fieldName)) {
                    deserializedGrafanaConfigurations.users = Users.fromJson(reader);
                } else if ("security".equals(fieldName)) {
                    deserializedGrafanaConfigurations.security = Security.fromJson(reader);
                } else if ("unifiedAlertingScreenshots".equals(fieldName)) {
                    deserializedGrafanaConfigurations.unifiedAlertingScreenshots
                        = UnifiedAlertingScreenshots.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGrafanaConfigurations;
        });
    }
}
