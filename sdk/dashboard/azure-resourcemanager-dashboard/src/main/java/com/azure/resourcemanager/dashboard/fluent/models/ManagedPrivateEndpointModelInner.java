// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dashboard.models.ManagedPrivateEndpointConnectionState;
import com.azure.resourcemanager.dashboard.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The managed private endpoint resource type.
 */
@Fluent
public final class ManagedPrivateEndpointModelInner extends Resource {
    /*
     * Resource properties.
     */
    private ManagedPrivateEndpointModelProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ManagedPrivateEndpointModelInner class.
     */
    public ManagedPrivateEndpointModelInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private ManagedPrivateEndpointModelProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedPrivateEndpointModelInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedPrivateEndpointModelInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the privateLinkResourceId property: The ARM resource ID of the resource for which the managed private
     * endpoint is pointing to.
     * 
     * @return the privateLinkResourceId value.
     */
    public String privateLinkResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().privateLinkResourceId();
    }

    /**
     * Set the privateLinkResourceId property: The ARM resource ID of the resource for which the managed private
     * endpoint is pointing to.
     * 
     * @param privateLinkResourceId the privateLinkResourceId value to set.
     * @return the ManagedPrivateEndpointModelInner object itself.
     */
    public ManagedPrivateEndpointModelInner withPrivateLinkResourceId(String privateLinkResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedPrivateEndpointModelProperties();
        }
        this.innerProperties().withPrivateLinkResourceId(privateLinkResourceId);
        return this;
    }

    /**
     * Get the privateLinkResourceRegion property: The region of the resource to which the managed private endpoint is
     * pointing to.
     * 
     * @return the privateLinkResourceRegion value.
     */
    public String privateLinkResourceRegion() {
        return this.innerProperties() == null ? null : this.innerProperties().privateLinkResourceRegion();
    }

    /**
     * Set the privateLinkResourceRegion property: The region of the resource to which the managed private endpoint is
     * pointing to.
     * 
     * @param privateLinkResourceRegion the privateLinkResourceRegion value to set.
     * @return the ManagedPrivateEndpointModelInner object itself.
     */
    public ManagedPrivateEndpointModelInner withPrivateLinkResourceRegion(String privateLinkResourceRegion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedPrivateEndpointModelProperties();
        }
        this.innerProperties().withPrivateLinkResourceRegion(privateLinkResourceRegion);
        return this;
    }

    /**
     * Get the groupIds property: The group Ids of the managed private endpoint.
     * 
     * @return the groupIds value.
     */
    public List<String> groupIds() {
        return this.innerProperties() == null ? null : this.innerProperties().groupIds();
    }

    /**
     * Set the groupIds property: The group Ids of the managed private endpoint.
     * 
     * @param groupIds the groupIds value to set.
     * @return the ManagedPrivateEndpointModelInner object itself.
     */
    public ManagedPrivateEndpointModelInner withGroupIds(List<String> groupIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedPrivateEndpointModelProperties();
        }
        this.innerProperties().withGroupIds(groupIds);
        return this;
    }

    /**
     * Get the requestMessage property: User input request message of the managed private endpoint.
     * 
     * @return the requestMessage value.
     */
    public String requestMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().requestMessage();
    }

    /**
     * Set the requestMessage property: User input request message of the managed private endpoint.
     * 
     * @param requestMessage the requestMessage value to set.
     * @return the ManagedPrivateEndpointModelInner object itself.
     */
    public ManagedPrivateEndpointModelInner withRequestMessage(String requestMessage) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedPrivateEndpointModelProperties();
        }
        this.innerProperties().withRequestMessage(requestMessage);
        return this;
    }

    /**
     * Get the connectionState property: The state of managed private endpoint connection.
     * 
     * @return the connectionState value.
     */
    public ManagedPrivateEndpointConnectionState connectionState() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionState();
    }

    /**
     * Get the privateLinkServiceUrl property: The URL of the data store behind the private link service. It would be
     * the URL in the Grafana data source configuration page without the protocol and port.
     * 
     * @return the privateLinkServiceUrl value.
     */
    public String privateLinkServiceUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().privateLinkServiceUrl();
    }

    /**
     * Set the privateLinkServiceUrl property: The URL of the data store behind the private link service. It would be
     * the URL in the Grafana data source configuration page without the protocol and port.
     * 
     * @param privateLinkServiceUrl the privateLinkServiceUrl value to set.
     * @return the ManagedPrivateEndpointModelInner object itself.
     */
    public ManagedPrivateEndpointModelInner withPrivateLinkServiceUrl(String privateLinkServiceUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedPrivateEndpointModelProperties();
        }
        this.innerProperties().withPrivateLinkServiceUrl(privateLinkServiceUrl);
        return this;
    }

    /**
     * Get the privateLinkServicePrivateIp property: The private IP of private endpoint after approval. This property is
     * empty before connection is approved.
     * 
     * @return the privateLinkServicePrivateIp value.
     */
    public String privateLinkServicePrivateIp() {
        return this.innerProperties() == null ? null : this.innerProperties().privateLinkServicePrivateIp();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedPrivateEndpointModelInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedPrivateEndpointModelInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedPrivateEndpointModelInner.
     */
    public static ManagedPrivateEndpointModelInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedPrivateEndpointModelInner deserializedManagedPrivateEndpointModelInner
                = new ManagedPrivateEndpointModelInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedManagedPrivateEndpointModelInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelInner.innerProperties
                        = ManagedPrivateEndpointModelProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedPrivateEndpointModelInner;
        });
    }
}
