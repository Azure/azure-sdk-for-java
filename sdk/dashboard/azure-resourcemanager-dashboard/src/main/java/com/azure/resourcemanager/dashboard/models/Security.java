// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Grafana security settings.
 */
@Fluent
public final class Security implements JsonSerializable<Security> {
    /*
     * Set to true to execute the CSRF check even if the login cookie is not in a request (default false).
     */
    private Boolean csrfAlwaysCheck;

    /**
     * Creates an instance of Security class.
     */
    public Security() {
    }

    /**
     * Get the csrfAlwaysCheck property: Set to true to execute the CSRF check even if the login cookie is not in a
     * request (default false).
     * 
     * @return the csrfAlwaysCheck value.
     */
    public Boolean csrfAlwaysCheck() {
        return this.csrfAlwaysCheck;
    }

    /**
     * Set the csrfAlwaysCheck property: Set to true to execute the CSRF check even if the login cookie is not in a
     * request (default false).
     * 
     * @param csrfAlwaysCheck the csrfAlwaysCheck value to set.
     * @return the Security object itself.
     */
    public Security withCsrfAlwaysCheck(Boolean csrfAlwaysCheck) {
        this.csrfAlwaysCheck = csrfAlwaysCheck;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("csrfAlwaysCheck", this.csrfAlwaysCheck);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Security from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Security if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Security.
     */
    public static Security fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Security deserializedSecurity = new Security();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("csrfAlwaysCheck".equals(fieldName)) {
                    deserializedSecurity.csrfAlwaysCheck = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurity;
        });
    }
}
