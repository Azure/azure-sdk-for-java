// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dashboard.fluent.models.IntegrationFabricInner;
import com.azure.resourcemanager.dashboard.models.IntegrationFabric;
import com.azure.resourcemanager.dashboard.models.IntegrationFabricProperties;
import com.azure.resourcemanager.dashboard.models.IntegrationFabricPropertiesUpdateParameters;
import com.azure.resourcemanager.dashboard.models.IntegrationFabricUpdateParameters;
import java.util.Collections;
import java.util.Map;

public final class IntegrationFabricImpl
    implements IntegrationFabric, IntegrationFabric.Definition, IntegrationFabric.Update {
    private IntegrationFabricInner innerObject;

    private final com.azure.resourcemanager.dashboard.DashboardManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public IntegrationFabricProperties properties() {
        return this.innerModel().properties();
    }

    public String name() {
        return this.innerModel().name();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public IntegrationFabricInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.dashboard.DashboardManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String integrationFabricName;

    private IntegrationFabricUpdateParameters updateRequestBodyParameters;

    public IntegrationFabricImpl withExistingGrafana(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    public IntegrationFabric create() {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationFabrics()
            .create(resourceGroupName, workspaceName, integrationFabricName, this.innerModel(), Context.NONE);
        return this;
    }

    public IntegrationFabric create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationFabrics()
            .create(resourceGroupName, workspaceName, integrationFabricName, this.innerModel(), context);
        return this;
    }

    IntegrationFabricImpl(String name, com.azure.resourcemanager.dashboard.DashboardManager serviceManager) {
        this.innerObject = new IntegrationFabricInner();
        this.serviceManager = serviceManager;
        this.integrationFabricName = name;
    }

    public IntegrationFabricImpl update() {
        this.updateRequestBodyParameters = new IntegrationFabricUpdateParameters();
        return this;
    }

    public IntegrationFabric apply() {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationFabrics()
            .update(resourceGroupName, workspaceName, integrationFabricName, updateRequestBodyParameters, Context.NONE);
        return this;
    }

    public IntegrationFabric apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationFabrics()
            .update(resourceGroupName, workspaceName, integrationFabricName, updateRequestBodyParameters, context);
        return this;
    }

    IntegrationFabricImpl(IntegrationFabricInner innerObject,
        com.azure.resourcemanager.dashboard.DashboardManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "grafana");
        this.integrationFabricName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "integrationFabrics");
    }

    public IntegrationFabric refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationFabrics()
            .getWithResponse(resourceGroupName, workspaceName, integrationFabricName, Context.NONE)
            .getValue();
        return this;
    }

    public IntegrationFabric refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationFabrics()
            .getWithResponse(resourceGroupName, workspaceName, integrationFabricName, context)
            .getValue();
        return this;
    }

    public IntegrationFabricImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public IntegrationFabricImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public IntegrationFabricImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateRequestBodyParameters.withTags(tags);
            return this;
        }
    }

    public IntegrationFabricImpl withProperties(IntegrationFabricProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public IntegrationFabricImpl withProperties(IntegrationFabricPropertiesUpdateParameters properties) {
        this.updateRequestBodyParameters.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
