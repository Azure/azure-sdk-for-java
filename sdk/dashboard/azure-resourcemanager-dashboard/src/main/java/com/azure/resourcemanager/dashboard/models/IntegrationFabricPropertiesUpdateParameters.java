// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The IntegrationFabricPropertiesUpdateParameters model.
 */
@Fluent
public final class IntegrationFabricPropertiesUpdateParameters
    implements JsonSerializable<IntegrationFabricPropertiesUpdateParameters> {
    /*
     * The new integration scenarios covered by this integration fabric.
     */
    private List<String> scenarios;

    /**
     * Creates an instance of IntegrationFabricPropertiesUpdateParameters class.
     */
    public IntegrationFabricPropertiesUpdateParameters() {
    }

    /**
     * Get the scenarios property: The new integration scenarios covered by this integration fabric.
     * 
     * @return the scenarios value.
     */
    public List<String> scenarios() {
        return this.scenarios;
    }

    /**
     * Set the scenarios property: The new integration scenarios covered by this integration fabric.
     * 
     * @param scenarios the scenarios value to set.
     * @return the IntegrationFabricPropertiesUpdateParameters object itself.
     */
    public IntegrationFabricPropertiesUpdateParameters withScenarios(List<String> scenarios) {
        this.scenarios = scenarios;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("scenarios", this.scenarios, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationFabricPropertiesUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationFabricPropertiesUpdateParameters if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationFabricPropertiesUpdateParameters.
     */
    public static IntegrationFabricPropertiesUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationFabricPropertiesUpdateParameters deserializedIntegrationFabricPropertiesUpdateParameters
                = new IntegrationFabricPropertiesUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scenarios".equals(fieldName)) {
                    List<String> scenarios = reader.readArray(reader1 -> reader1.getString());
                    deserializedIntegrationFabricPropertiesUpdateParameters.scenarios = scenarios;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationFabricPropertiesUpdateParameters;
        });
    }
}
