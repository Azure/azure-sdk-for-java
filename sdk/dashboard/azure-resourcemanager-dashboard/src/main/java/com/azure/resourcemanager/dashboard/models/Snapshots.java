// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Grafana Snapshots settings.
 */
@Fluent
public final class Snapshots implements JsonSerializable<Snapshots> {
    /*
     * Set to false to disable external snapshot publish endpoint
     */
    private Boolean externalEnabled;

    /**
     * Creates an instance of Snapshots class.
     */
    public Snapshots() {
    }

    /**
     * Get the externalEnabled property: Set to false to disable external snapshot publish endpoint.
     * 
     * @return the externalEnabled value.
     */
    public Boolean externalEnabled() {
        return this.externalEnabled;
    }

    /**
     * Set the externalEnabled property: Set to false to disable external snapshot publish endpoint.
     * 
     * @param externalEnabled the externalEnabled value to set.
     * @return the Snapshots object itself.
     */
    public Snapshots withExternalEnabled(Boolean externalEnabled) {
        this.externalEnabled = externalEnabled;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("externalEnabled", this.externalEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Snapshots from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Snapshots if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Snapshots.
     */
    public static Snapshots fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Snapshots deserializedSnapshots = new Snapshots();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("externalEnabled".equals(fieldName)) {
                    deserializedSnapshots.externalEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSnapshots;
        });
    }
}
