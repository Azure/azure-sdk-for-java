// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dashboard.fluent.IntegrationFabricsClient;
import com.azure.resourcemanager.dashboard.fluent.models.IntegrationFabricInner;
import com.azure.resourcemanager.dashboard.models.IntegrationFabric;
import com.azure.resourcemanager.dashboard.models.IntegrationFabrics;

public final class IntegrationFabricsImpl implements IntegrationFabrics {
    private static final ClientLogger LOGGER = new ClientLogger(IntegrationFabricsImpl.class);

    private final IntegrationFabricsClient innerClient;

    private final com.azure.resourcemanager.dashboard.DashboardManager serviceManager;

    public IntegrationFabricsImpl(IntegrationFabricsClient innerClient,
        com.azure.resourcemanager.dashboard.DashboardManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<IntegrationFabric> getWithResponse(String resourceGroupName, String workspaceName,
        String integrationFabricName, Context context) {
        Response<IntegrationFabricInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, integrationFabricName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IntegrationFabricImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IntegrationFabric get(String resourceGroupName, String workspaceName, String integrationFabricName) {
        IntegrationFabricInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, integrationFabricName);
        if (inner != null) {
            return new IntegrationFabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String workspaceName, String integrationFabricName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, integrationFabricName);
    }

    public void delete(String resourceGroupName, String workspaceName, String integrationFabricName, Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, integrationFabricName, context);
    }

    public PagedIterable<IntegrationFabric> list(String resourceGroupName, String workspaceName) {
        PagedIterable<IntegrationFabricInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IntegrationFabricImpl(inner1, this.manager()));
    }

    public PagedIterable<IntegrationFabric> list(String resourceGroupName, String workspaceName, Context context) {
        PagedIterable<IntegrationFabricInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IntegrationFabricImpl(inner1, this.manager()));
    }

    public IntegrationFabric getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "grafana");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'grafana'.", id)));
        }
        String integrationFabricName = ResourceManagerUtils.getValueFromIdByName(id, "integrationFabrics");
        if (integrationFabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'integrationFabrics'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, integrationFabricName, Context.NONE).getValue();
    }

    public Response<IntegrationFabric> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "grafana");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'grafana'.", id)));
        }
        String integrationFabricName = ResourceManagerUtils.getValueFromIdByName(id, "integrationFabrics");
        if (integrationFabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'integrationFabrics'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, integrationFabricName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "grafana");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'grafana'.", id)));
        }
        String integrationFabricName = ResourceManagerUtils.getValueFromIdByName(id, "integrationFabrics");
        if (integrationFabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'integrationFabrics'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, integrationFabricName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "grafana");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'grafana'.", id)));
        }
        String integrationFabricName = ResourceManagerUtils.getValueFromIdByName(id, "integrationFabrics");
        if (integrationFabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'integrationFabrics'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, integrationFabricName, context);
    }

    private IntegrationFabricsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dashboard.DashboardManager manager() {
        return this.serviceManager;
    }

    public IntegrationFabricImpl define(String name) {
        return new IntegrationFabricImpl(name, this.manager());
    }
}
