// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dashboard.fluent.models.GrafanaResourceInner;
import com.azure.resourcemanager.dashboard.models.GrafanaResource;
import com.azure.resourcemanager.dashboard.models.GrafanaResourceProperties;
import com.azure.resourcemanager.dashboard.models.GrafanaResourceUpdateParameters;
import com.azure.resourcemanager.dashboard.models.ManagedIdentity;
import com.azure.resourcemanager.dashboard.models.ResourceSku;
import java.util.Collections;
import java.util.Map;

public final class GrafanaResourceImpl implements GrafanaResource, GrafanaResource.Definition, GrafanaResource.Update {
    private GrafanaResourceInner innerObject;

    private final com.azure.resourcemanager.dashboard.DashboardManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ResourceSku sku() {
        return this.innerModel().sku();
    }

    public GrafanaResourceProperties properties() {
        return this.innerModel().properties();
    }

    public ManagedIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public GrafanaResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.dashboard.DashboardManager manager() {
        return this.serviceManager;
    }

    private String subscriptionId;

    private String resourceGroupName;

    private String workspaceName;

    private GrafanaResourceUpdateParameters updateBody;

    public GrafanaResourceImpl withExistingResourceGroup(String subscriptionId, String resourceGroupName) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public GrafanaResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGrafanas()
                .create(subscriptionId, resourceGroupName, workspaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public GrafanaResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGrafanas()
                .create(subscriptionId, resourceGroupName, workspaceName, this.innerModel(), context);
        return this;
    }

    GrafanaResourceImpl(String name, com.azure.resourcemanager.dashboard.DashboardManager serviceManager) {
        this.innerObject = new GrafanaResourceInner();
        this.serviceManager = serviceManager;
        this.workspaceName = name;
    }

    public GrafanaResourceImpl update() {
        this.updateBody = new GrafanaResourceUpdateParameters();
        return this;
    }

    public GrafanaResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGrafanas()
                .updateWithResponse(subscriptionId, resourceGroupName, workspaceName, updateBody, Context.NONE)
                .getValue();
        return this;
    }

    public GrafanaResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGrafanas()
                .updateWithResponse(subscriptionId, resourceGroupName, workspaceName, updateBody, context)
                .getValue();
        return this;
    }

    GrafanaResourceImpl(
        GrafanaResourceInner innerObject, com.azure.resourcemanager.dashboard.DashboardManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.subscriptionId = Utils.getValueFromIdByName(innerObject.id(), "subscriptions");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = Utils.getValueFromIdByName(innerObject.id(), "grafana");
    }

    public GrafanaResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGrafanas()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, workspaceName, Context.NONE)
                .getValue();
        return this;
    }

    public GrafanaResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGrafanas()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, workspaceName, context)
                .getValue();
        return this;
    }

    public GrafanaResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public GrafanaResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public GrafanaResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public GrafanaResourceImpl withSku(ResourceSku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public GrafanaResourceImpl withProperties(GrafanaResourceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public GrafanaResourceImpl withIdentity(ManagedIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateBody.withIdentity(identity);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
