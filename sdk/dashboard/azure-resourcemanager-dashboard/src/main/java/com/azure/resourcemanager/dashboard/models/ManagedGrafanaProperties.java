// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dashboard.fluent.models.PrivateEndpointConnectionInner;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Properties specific to the grafana resource.
 */
@Fluent
public final class ManagedGrafanaProperties implements JsonSerializable<ManagedGrafanaProperties> {
    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The Grafana software version.
     */
    private String grafanaVersion;

    /*
     * The endpoint of the Grafana instance.
     */
    private String endpoint;

    /*
     * Indicate the state for enable or disable traffic over the public interface.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * The zone redundancy setting of the Grafana instance.
     */
    private ZoneRedundancy zoneRedundancy;

    /*
     * The api key setting of the Grafana instance.
     */
    private ApiKey apiKey;

    /*
     * Whether a Grafana instance uses deterministic outbound IPs.
     */
    private DeterministicOutboundIp deterministicOutboundIp;

    /*
     * List of outbound IPs if deterministicOutboundIP is enabled.
     */
    private List<String> outboundIPs;

    /*
     * The private endpoint connections of the Grafana instance.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * Scope for dns deterministic name hash calculation.
     */
    private AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope;

    /*
     * GrafanaIntegrations is a bundled observability experience (e.g. pre-configured data source, tailored Grafana
     * dashboards, alerting defaults) for common monitoring scenarios.
     */
    private GrafanaIntegrations grafanaIntegrations;

    /*
     * Enterprise settings of a Grafana instance
     */
    private EnterpriseConfigurations enterpriseConfigurations;

    /*
     * Server configurations of a Grafana instance
     */
    private GrafanaConfigurations grafanaConfigurations;

    /*
     * Installed plugin list of the Grafana instance. Key is plugin id, value is plugin definition.
     */
    private Map<String, GrafanaPlugin> grafanaPlugins;

    /*
     * The major Grafana software version to target.
     */
    private String grafanaMajorVersion;

    /**
     * Creates an instance of ManagedGrafanaProperties class.
     */
    public ManagedGrafanaProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the grafanaVersion property: The Grafana software version.
     * 
     * @return the grafanaVersion value.
     */
    public String grafanaVersion() {
        return this.grafanaVersion;
    }

    /**
     * Get the endpoint property: The endpoint of the Grafana instance.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the publicNetworkAccess property: Indicate the state for enable or disable traffic over the public interface.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Indicate the state for enable or disable traffic over the public interface.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the zoneRedundancy property: The zone redundancy setting of the Grafana instance.
     * 
     * @return the zoneRedundancy value.
     */
    public ZoneRedundancy zoneRedundancy() {
        return this.zoneRedundancy;
    }

    /**
     * Set the zoneRedundancy property: The zone redundancy setting of the Grafana instance.
     * 
     * @param zoneRedundancy the zoneRedundancy value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withZoneRedundancy(ZoneRedundancy zoneRedundancy) {
        this.zoneRedundancy = zoneRedundancy;
        return this;
    }

    /**
     * Get the apiKey property: The api key setting of the Grafana instance.
     * 
     * @return the apiKey value.
     */
    public ApiKey apiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: The api key setting of the Grafana instance.
     * 
     * @param apiKey the apiKey value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withApiKey(ApiKey apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get the deterministicOutboundIp property: Whether a Grafana instance uses deterministic outbound IPs.
     * 
     * @return the deterministicOutboundIp value.
     */
    public DeterministicOutboundIp deterministicOutboundIp() {
        return this.deterministicOutboundIp;
    }

    /**
     * Set the deterministicOutboundIp property: Whether a Grafana instance uses deterministic outbound IPs.
     * 
     * @param deterministicOutboundIp the deterministicOutboundIp value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withDeterministicOutboundIp(DeterministicOutboundIp deterministicOutboundIp) {
        this.deterministicOutboundIp = deterministicOutboundIp;
        return this;
    }

    /**
     * Get the outboundIPs property: List of outbound IPs if deterministicOutboundIP is enabled.
     * 
     * @return the outboundIPs value.
     */
    public List<String> outboundIPs() {
        return this.outboundIPs;
    }

    /**
     * Get the privateEndpointConnections property: The private endpoint connections of the Grafana instance.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the autoGeneratedDomainNameLabelScope property: Scope for dns deterministic name hash calculation.
     * 
     * @return the autoGeneratedDomainNameLabelScope value.
     */
    public AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope() {
        return this.autoGeneratedDomainNameLabelScope;
    }

    /**
     * Set the autoGeneratedDomainNameLabelScope property: Scope for dns deterministic name hash calculation.
     * 
     * @param autoGeneratedDomainNameLabelScope the autoGeneratedDomainNameLabelScope value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties
        withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope) {
        this.autoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
        return this;
    }

    /**
     * Get the grafanaIntegrations property: GrafanaIntegrations is a bundled observability experience (e.g.
     * pre-configured data source, tailored Grafana dashboards, alerting defaults) for common monitoring scenarios.
     * 
     * @return the grafanaIntegrations value.
     */
    public GrafanaIntegrations grafanaIntegrations() {
        return this.grafanaIntegrations;
    }

    /**
     * Set the grafanaIntegrations property: GrafanaIntegrations is a bundled observability experience (e.g.
     * pre-configured data source, tailored Grafana dashboards, alerting defaults) for common monitoring scenarios.
     * 
     * @param grafanaIntegrations the grafanaIntegrations value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withGrafanaIntegrations(GrafanaIntegrations grafanaIntegrations) {
        this.grafanaIntegrations = grafanaIntegrations;
        return this;
    }

    /**
     * Get the enterpriseConfigurations property: Enterprise settings of a Grafana instance.
     * 
     * @return the enterpriseConfigurations value.
     */
    public EnterpriseConfigurations enterpriseConfigurations() {
        return this.enterpriseConfigurations;
    }

    /**
     * Set the enterpriseConfigurations property: Enterprise settings of a Grafana instance.
     * 
     * @param enterpriseConfigurations the enterpriseConfigurations value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withEnterpriseConfigurations(EnterpriseConfigurations enterpriseConfigurations) {
        this.enterpriseConfigurations = enterpriseConfigurations;
        return this;
    }

    /**
     * Get the grafanaConfigurations property: Server configurations of a Grafana instance.
     * 
     * @return the grafanaConfigurations value.
     */
    public GrafanaConfigurations grafanaConfigurations() {
        return this.grafanaConfigurations;
    }

    /**
     * Set the grafanaConfigurations property: Server configurations of a Grafana instance.
     * 
     * @param grafanaConfigurations the grafanaConfigurations value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withGrafanaConfigurations(GrafanaConfigurations grafanaConfigurations) {
        this.grafanaConfigurations = grafanaConfigurations;
        return this;
    }

    /**
     * Get the grafanaPlugins property: Installed plugin list of the Grafana instance. Key is plugin id, value is plugin
     * definition.
     * 
     * @return the grafanaPlugins value.
     */
    public Map<String, GrafanaPlugin> grafanaPlugins() {
        return this.grafanaPlugins;
    }

    /**
     * Set the grafanaPlugins property: Installed plugin list of the Grafana instance. Key is plugin id, value is plugin
     * definition.
     * 
     * @param grafanaPlugins the grafanaPlugins value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withGrafanaPlugins(Map<String, GrafanaPlugin> grafanaPlugins) {
        this.grafanaPlugins = grafanaPlugins;
        return this;
    }

    /**
     * Get the grafanaMajorVersion property: The major Grafana software version to target.
     * 
     * @return the grafanaMajorVersion value.
     */
    public String grafanaMajorVersion() {
        return this.grafanaMajorVersion;
    }

    /**
     * Set the grafanaMajorVersion property: The major Grafana software version to target.
     * 
     * @param grafanaMajorVersion the grafanaMajorVersion value to set.
     * @return the ManagedGrafanaProperties object itself.
     */
    public ManagedGrafanaProperties withGrafanaMajorVersion(String grafanaMajorVersion) {
        this.grafanaMajorVersion = grafanaMajorVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
        if (grafanaIntegrations() != null) {
            grafanaIntegrations().validate();
        }
        if (enterpriseConfigurations() != null) {
            enterpriseConfigurations().validate();
        }
        if (grafanaConfigurations() != null) {
            grafanaConfigurations().validate();
        }
        if (grafanaPlugins() != null) {
            grafanaPlugins().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeStringField("zoneRedundancy",
            this.zoneRedundancy == null ? null : this.zoneRedundancy.toString());
        jsonWriter.writeStringField("apiKey", this.apiKey == null ? null : this.apiKey.toString());
        jsonWriter.writeStringField("deterministicOutboundIP",
            this.deterministicOutboundIp == null ? null : this.deterministicOutboundIp.toString());
        jsonWriter.writeStringField("autoGeneratedDomainNameLabelScope",
            this.autoGeneratedDomainNameLabelScope == null ? null : this.autoGeneratedDomainNameLabelScope.toString());
        jsonWriter.writeJsonField("grafanaIntegrations", this.grafanaIntegrations);
        jsonWriter.writeJsonField("enterpriseConfigurations", this.enterpriseConfigurations);
        jsonWriter.writeJsonField("grafanaConfigurations", this.grafanaConfigurations);
        jsonWriter.writeMapField("grafanaPlugins", this.grafanaPlugins, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("grafanaMajorVersion", this.grafanaMajorVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedGrafanaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedGrafanaProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedGrafanaProperties.
     */
    public static ManagedGrafanaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedGrafanaProperties deserializedManagedGrafanaProperties = new ManagedGrafanaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("grafanaVersion".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.grafanaVersion = reader.getString();
                } else if ("endpoint".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.endpoint = reader.getString();
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("zoneRedundancy".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.zoneRedundancy = ZoneRedundancy.fromString(reader.getString());
                } else if ("apiKey".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.apiKey = ApiKey.fromString(reader.getString());
                } else if ("deterministicOutboundIP".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.deterministicOutboundIp
                        = DeterministicOutboundIp.fromString(reader.getString());
                } else if ("outboundIPs".equals(fieldName)) {
                    List<String> outboundIPs = reader.readArray(reader1 -> reader1.getString());
                    deserializedManagedGrafanaProperties.outboundIPs = outboundIPs;
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedManagedGrafanaProperties.privateEndpointConnections = privateEndpointConnections;
                } else if ("autoGeneratedDomainNameLabelScope".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.autoGeneratedDomainNameLabelScope
                        = AutoGeneratedDomainNameLabelScope.fromString(reader.getString());
                } else if ("grafanaIntegrations".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.grafanaIntegrations = GrafanaIntegrations.fromJson(reader);
                } else if ("enterpriseConfigurations".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.enterpriseConfigurations
                        = EnterpriseConfigurations.fromJson(reader);
                } else if ("grafanaConfigurations".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.grafanaConfigurations = GrafanaConfigurations.fromJson(reader);
                } else if ("grafanaPlugins".equals(fieldName)) {
                    Map<String, GrafanaPlugin> grafanaPlugins
                        = reader.readMap(reader1 -> GrafanaPlugin.fromJson(reader1));
                    deserializedManagedGrafanaProperties.grafanaPlugins = grafanaPlugins;
                } else if ("grafanaMajorVersion".equals(fieldName)) {
                    deserializedManagedGrafanaProperties.grafanaMajorVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedGrafanaProperties;
        });
    }
}
