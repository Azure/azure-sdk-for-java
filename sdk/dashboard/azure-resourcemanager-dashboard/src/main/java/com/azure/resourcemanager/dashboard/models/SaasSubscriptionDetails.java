// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SaaS subscription details of a Grafana instance.
 */
@Fluent
public final class SaasSubscriptionDetails implements JsonSerializable<SaasSubscriptionDetails> {
    /*
     * The plan Id of the SaaS subscription.
     */
    private String planId;

    /*
     * The offer Id of the SaaS subscription.
     */
    private String offerId;

    /*
     * The publisher Id of the SaaS subscription.
     */
    private String publisherId;

    /*
     * The billing term of the SaaS Subscription.
     */
    private SubscriptionTerm term;

    /**
     * Creates an instance of SaasSubscriptionDetails class.
     */
    public SaasSubscriptionDetails() {
    }

    /**
     * Get the planId property: The plan Id of the SaaS subscription.
     * 
     * @return the planId value.
     */
    public String planId() {
        return this.planId;
    }

    /**
     * Set the planId property: The plan Id of the SaaS subscription.
     * 
     * @param planId the planId value to set.
     * @return the SaasSubscriptionDetails object itself.
     */
    public SaasSubscriptionDetails withPlanId(String planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get the offerId property: The offer Id of the SaaS subscription.
     * 
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Set the offerId property: The offer Id of the SaaS subscription.
     * 
     * @param offerId the offerId value to set.
     * @return the SaasSubscriptionDetails object itself.
     */
    public SaasSubscriptionDetails withOfferId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Get the publisherId property: The publisher Id of the SaaS subscription.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: The publisher Id of the SaaS subscription.
     * 
     * @param publisherId the publisherId value to set.
     * @return the SaasSubscriptionDetails object itself.
     */
    public SaasSubscriptionDetails withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the term property: The billing term of the SaaS Subscription.
     * 
     * @return the term value.
     */
    public SubscriptionTerm term() {
        return this.term;
    }

    /**
     * Set the term property: The billing term of the SaaS Subscription.
     * 
     * @param term the term value to set.
     * @return the SaasSubscriptionDetails object itself.
     */
    public SaasSubscriptionDetails withTerm(SubscriptionTerm term) {
        this.term = term;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (term() != null) {
            term().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("planId", this.planId);
        jsonWriter.writeStringField("offerId", this.offerId);
        jsonWriter.writeStringField("publisherId", this.publisherId);
        jsonWriter.writeJsonField("term", this.term);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SaasSubscriptionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SaasSubscriptionDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SaasSubscriptionDetails.
     */
    public static SaasSubscriptionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SaasSubscriptionDetails deserializedSaasSubscriptionDetails = new SaasSubscriptionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("planId".equals(fieldName)) {
                    deserializedSaasSubscriptionDetails.planId = reader.getString();
                } else if ("offerId".equals(fieldName)) {
                    deserializedSaasSubscriptionDetails.offerId = reader.getString();
                } else if ("publisherId".equals(fieldName)) {
                    deserializedSaasSubscriptionDetails.publisherId = reader.getString();
                } else if ("term".equals(fieldName)) {
                    deserializedSaasSubscriptionDetails.term = SubscriptionTerm.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSaasSubscriptionDetails;
        });
    }
}
