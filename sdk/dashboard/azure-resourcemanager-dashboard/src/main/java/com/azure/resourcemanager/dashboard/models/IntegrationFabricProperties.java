// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The IntegrationFabricProperties model.
 */
@Fluent
public final class IntegrationFabricProperties implements JsonSerializable<IntegrationFabricProperties> {
    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The resource Id of the Azure resource being integrated with Azure Managed Grafana. E.g., an Azure Kubernetes
     * Service cluster.
     */
    private String targetResourceId;

    /*
     * The resource Id of the Azure resource which is used to configure Grafana data source. E.g., an Azure Monitor
     * Workspace, an Azure Data Explorer cluster, etc.
     */
    private String dataSourceResourceId;

    /*
     * A list of integration scenarios covered by this integration fabric
     */
    private List<String> scenarios;

    /**
     * Creates an instance of IntegrationFabricProperties class.
     */
    public IntegrationFabricProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the targetResourceId property: The resource Id of the Azure resource being integrated with Azure Managed
     * Grafana. E.g., an Azure Kubernetes Service cluster.
     * 
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: The resource Id of the Azure resource being integrated with Azure Managed
     * Grafana. E.g., an Azure Kubernetes Service cluster.
     * 
     * @param targetResourceId the targetResourceId value to set.
     * @return the IntegrationFabricProperties object itself.
     */
    public IntegrationFabricProperties withTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        return this;
    }

    /**
     * Get the dataSourceResourceId property: The resource Id of the Azure resource which is used to configure Grafana
     * data source. E.g., an Azure Monitor Workspace, an Azure Data Explorer cluster, etc.
     * 
     * @return the dataSourceResourceId value.
     */
    public String dataSourceResourceId() {
        return this.dataSourceResourceId;
    }

    /**
     * Set the dataSourceResourceId property: The resource Id of the Azure resource which is used to configure Grafana
     * data source. E.g., an Azure Monitor Workspace, an Azure Data Explorer cluster, etc.
     * 
     * @param dataSourceResourceId the dataSourceResourceId value to set.
     * @return the IntegrationFabricProperties object itself.
     */
    public IntegrationFabricProperties withDataSourceResourceId(String dataSourceResourceId) {
        this.dataSourceResourceId = dataSourceResourceId;
        return this;
    }

    /**
     * Get the scenarios property: A list of integration scenarios covered by this integration fabric.
     * 
     * @return the scenarios value.
     */
    public List<String> scenarios() {
        return this.scenarios;
    }

    /**
     * Set the scenarios property: A list of integration scenarios covered by this integration fabric.
     * 
     * @param scenarios the scenarios value to set.
     * @return the IntegrationFabricProperties object itself.
     */
    public IntegrationFabricProperties withScenarios(List<String> scenarios) {
        this.scenarios = scenarios;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceId", this.targetResourceId);
        jsonWriter.writeStringField("dataSourceResourceId", this.dataSourceResourceId);
        jsonWriter.writeArrayField("scenarios", this.scenarios, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationFabricProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationFabricProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationFabricProperties.
     */
    public static IntegrationFabricProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationFabricProperties deserializedIntegrationFabricProperties = new IntegrationFabricProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedIntegrationFabricProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("targetResourceId".equals(fieldName)) {
                    deserializedIntegrationFabricProperties.targetResourceId = reader.getString();
                } else if ("dataSourceResourceId".equals(fieldName)) {
                    deserializedIntegrationFabricProperties.dataSourceResourceId = reader.getString();
                } else if ("scenarios".equals(fieldName)) {
                    List<String> scenarios = reader.readArray(reader1 -> reader1.getString());
                    deserializedIntegrationFabricProperties.scenarios = scenarios;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationFabricProperties;
        });
    }
}
