// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dashboard.fluent.models.GrafanaResourceInner;
import com.azure.resourcemanager.dashboard.models.GrafanaResourceUpdateParameters;

/** An instance of this class provides access to all the operations defined in GrafanasClient. */
public interface GrafanasClient {
    /**
     * List all resources of workspaces for Grafana under the specified subscription.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GrafanaResourceInner> list(String subscriptionId);

    /**
     * List all resources of workspaces for Grafana under the specified subscription.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GrafanaResourceInner> list(String subscriptionId, Context context);

    /**
     * List all resources of workspaces for Grafana under the specified resource group.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GrafanaResourceInner> listByResourceGroup(String subscriptionId, String resourceGroupName);

    /**
     * List all resources of workspaces for Grafana under the specified resource group.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GrafanaResourceInner> listByResourceGroup(
        String subscriptionId, String resourceGroupName, Context context);

    /**
     * Get the properties of a specific workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a specific workspace for Grafana resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GrafanaResourceInner getByResourceGroup(String subscriptionId, String resourceGroupName, String workspaceName);

    /**
     * Get the properties of a specific workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a specific workspace for Grafana resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GrafanaResourceInner> getByResourceGroupWithResponse(
        String subscriptionId, String resourceGroupName, String workspaceName, Context context);

    /**
     * Create or update a workspace for Grafana resource. This API is idempotent, so user can either create a new
     * grafana or update an existing grafana.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param body The grafana resource type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the grafana resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GrafanaResourceInner>, GrafanaResourceInner> beginCreate(
        String subscriptionId, String resourceGroupName, String workspaceName, GrafanaResourceInner body);

    /**
     * Create or update a workspace for Grafana resource. This API is idempotent, so user can either create a new
     * grafana or update an existing grafana.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param body The grafana resource type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the grafana resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GrafanaResourceInner>, GrafanaResourceInner> beginCreate(
        String subscriptionId,
        String resourceGroupName,
        String workspaceName,
        GrafanaResourceInner body,
        Context context);

    /**
     * Create or update a workspace for Grafana resource. This API is idempotent, so user can either create a new
     * grafana or update an existing grafana.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param body The grafana resource type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the grafana resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GrafanaResourceInner create(
        String subscriptionId, String resourceGroupName, String workspaceName, GrafanaResourceInner body);

    /**
     * Create or update a workspace for Grafana resource. This API is idempotent, so user can either create a new
     * grafana or update an existing grafana.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the grafana resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GrafanaResourceInner create(String subscriptionId, String resourceGroupName, String workspaceName);

    /**
     * Create or update a workspace for Grafana resource. This API is idempotent, so user can either create a new
     * grafana or update an existing grafana.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param body The grafana resource type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the grafana resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GrafanaResourceInner create(
        String subscriptionId,
        String resourceGroupName,
        String workspaceName,
        GrafanaResourceInner body,
        Context context);

    /**
     * Update a workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the grafana resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GrafanaResourceInner update(String subscriptionId, String resourceGroupName, String workspaceName);

    /**
     * Update a workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param body The parameters for a PATCH request to a grafana resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the grafana resource type along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GrafanaResourceInner> updateWithResponse(
        String subscriptionId,
        String resourceGroupName,
        String workspaceName,
        GrafanaResourceUpdateParameters body,
        Context context);

    /**
     * Delete a workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId, String resourceGroupName, String workspaceName);

    /**
     * Delete a workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId, String resourceGroupName, String workspaceName, Context context);

    /**
     * Delete a workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String subscriptionId, String resourceGroupName, String workspaceName);

    /**
     * Delete a workspace for Grafana resource.
     *
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of Azure Managed Workspace for Grafana.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String subscriptionId, String resourceGroupName, String workspaceName, Context context);
}
