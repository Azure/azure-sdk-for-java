// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dashboard.models.ManagedPrivateEndpointConnectionState;
import com.azure.resourcemanager.dashboard.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to the managed private endpoint.
 */
@Fluent
public final class ManagedPrivateEndpointModelProperties
    implements JsonSerializable<ManagedPrivateEndpointModelProperties> {
    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The ARM resource ID of the resource for which the managed private endpoint is pointing to.
     */
    private String privateLinkResourceId;

    /*
     * The region of the resource to which the managed private endpoint is pointing to.
     */
    private String privateLinkResourceRegion;

    /*
     * The group Ids of the managed private endpoint.
     */
    private List<String> groupIds;

    /*
     * User input request message of the managed private endpoint.
     */
    private String requestMessage;

    /*
     * The state of managed private endpoint connection.
     */
    private ManagedPrivateEndpointConnectionState connectionState;

    /*
     * The URL of the data store behind the private link service. It would be the URL in the Grafana data source
     * configuration page without the protocol and port.
     */
    private String privateLinkServiceUrl;

    /*
     * The private IP of private endpoint after approval. This property is empty before connection is approved.
     */
    private String privateLinkServicePrivateIp;

    /**
     * Creates an instance of ManagedPrivateEndpointModelProperties class.
     */
    public ManagedPrivateEndpointModelProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the privateLinkResourceId property: The ARM resource ID of the resource for which the managed private
     * endpoint is pointing to.
     * 
     * @return the privateLinkResourceId value.
     */
    public String privateLinkResourceId() {
        return this.privateLinkResourceId;
    }

    /**
     * Set the privateLinkResourceId property: The ARM resource ID of the resource for which the managed private
     * endpoint is pointing to.
     * 
     * @param privateLinkResourceId the privateLinkResourceId value to set.
     * @return the ManagedPrivateEndpointModelProperties object itself.
     */
    public ManagedPrivateEndpointModelProperties withPrivateLinkResourceId(String privateLinkResourceId) {
        this.privateLinkResourceId = privateLinkResourceId;
        return this;
    }

    /**
     * Get the privateLinkResourceRegion property: The region of the resource to which the managed private endpoint is
     * pointing to.
     * 
     * @return the privateLinkResourceRegion value.
     */
    public String privateLinkResourceRegion() {
        return this.privateLinkResourceRegion;
    }

    /**
     * Set the privateLinkResourceRegion property: The region of the resource to which the managed private endpoint is
     * pointing to.
     * 
     * @param privateLinkResourceRegion the privateLinkResourceRegion value to set.
     * @return the ManagedPrivateEndpointModelProperties object itself.
     */
    public ManagedPrivateEndpointModelProperties withPrivateLinkResourceRegion(String privateLinkResourceRegion) {
        this.privateLinkResourceRegion = privateLinkResourceRegion;
        return this;
    }

    /**
     * Get the groupIds property: The group Ids of the managed private endpoint.
     * 
     * @return the groupIds value.
     */
    public List<String> groupIds() {
        return this.groupIds;
    }

    /**
     * Set the groupIds property: The group Ids of the managed private endpoint.
     * 
     * @param groupIds the groupIds value to set.
     * @return the ManagedPrivateEndpointModelProperties object itself.
     */
    public ManagedPrivateEndpointModelProperties withGroupIds(List<String> groupIds) {
        this.groupIds = groupIds;
        return this;
    }

    /**
     * Get the requestMessage property: User input request message of the managed private endpoint.
     * 
     * @return the requestMessage value.
     */
    public String requestMessage() {
        return this.requestMessage;
    }

    /**
     * Set the requestMessage property: User input request message of the managed private endpoint.
     * 
     * @param requestMessage the requestMessage value to set.
     * @return the ManagedPrivateEndpointModelProperties object itself.
     */
    public ManagedPrivateEndpointModelProperties withRequestMessage(String requestMessage) {
        this.requestMessage = requestMessage;
        return this;
    }

    /**
     * Get the connectionState property: The state of managed private endpoint connection.
     * 
     * @return the connectionState value.
     */
    public ManagedPrivateEndpointConnectionState connectionState() {
        return this.connectionState;
    }

    /**
     * Get the privateLinkServiceUrl property: The URL of the data store behind the private link service. It would be
     * the URL in the Grafana data source configuration page without the protocol and port.
     * 
     * @return the privateLinkServiceUrl value.
     */
    public String privateLinkServiceUrl() {
        return this.privateLinkServiceUrl;
    }

    /**
     * Set the privateLinkServiceUrl property: The URL of the data store behind the private link service. It would be
     * the URL in the Grafana data source configuration page without the protocol and port.
     * 
     * @param privateLinkServiceUrl the privateLinkServiceUrl value to set.
     * @return the ManagedPrivateEndpointModelProperties object itself.
     */
    public ManagedPrivateEndpointModelProperties withPrivateLinkServiceUrl(String privateLinkServiceUrl) {
        this.privateLinkServiceUrl = privateLinkServiceUrl;
        return this;
    }

    /**
     * Get the privateLinkServicePrivateIp property: The private IP of private endpoint after approval. This property is
     * empty before connection is approved.
     * 
     * @return the privateLinkServicePrivateIp value.
     */
    public String privateLinkServicePrivateIp() {
        return this.privateLinkServicePrivateIp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionState() != null) {
            connectionState().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("privateLinkResourceId", this.privateLinkResourceId);
        jsonWriter.writeStringField("privateLinkResourceRegion", this.privateLinkResourceRegion);
        jsonWriter.writeArrayField("groupIds", this.groupIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("requestMessage", this.requestMessage);
        jsonWriter.writeStringField("privateLinkServiceUrl", this.privateLinkServiceUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedPrivateEndpointModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedPrivateEndpointModelProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedPrivateEndpointModelProperties.
     */
    public static ManagedPrivateEndpointModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedPrivateEndpointModelProperties deserializedManagedPrivateEndpointModelProperties
                = new ManagedPrivateEndpointModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("privateLinkResourceId".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelProperties.privateLinkResourceId = reader.getString();
                } else if ("privateLinkResourceRegion".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelProperties.privateLinkResourceRegion = reader.getString();
                } else if ("groupIds".equals(fieldName)) {
                    List<String> groupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedManagedPrivateEndpointModelProperties.groupIds = groupIds;
                } else if ("requestMessage".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelProperties.requestMessage = reader.getString();
                } else if ("connectionState".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelProperties.connectionState
                        = ManagedPrivateEndpointConnectionState.fromJson(reader);
                } else if ("privateLinkServiceUrl".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelProperties.privateLinkServiceUrl = reader.getString();
                } else if ("privateLinkServicePrivateIP".equals(fieldName)) {
                    deserializedManagedPrivateEndpointModelProperties.privateLinkServicePrivateIp = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedPrivateEndpointModelProperties;
        });
    }
}
