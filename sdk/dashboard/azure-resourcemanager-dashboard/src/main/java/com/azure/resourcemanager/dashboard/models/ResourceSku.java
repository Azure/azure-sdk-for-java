// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the SKU of a resource.
 */
@Fluent
public final class ResourceSku implements JsonSerializable<ResourceSku> {
    /*
     * The name of the SKU.
     */
    private String name;

    /*
     * Specifies the capacity tier of the Grafana instance.
     */
    private Size size;

    /**
     * Creates an instance of ResourceSku class.
     */
    public ResourceSku() {
    }

    /**
     * Get the name property: The name of the SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the SKU.
     * 
     * @param name the name value to set.
     * @return the ResourceSku object itself.
     */
    public ResourceSku withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the size property: Specifies the capacity tier of the Grafana instance.
     * 
     * @return the size value.
     */
    public Size size() {
        return this.size;
    }

    /**
     * Set the size property: Specifies the capacity tier of the Grafana instance.
     * 
     * @param size the size value to set.
     * @return the ResourceSku object itself.
     */
    public ResourceSku withSize(Size size) {
        this.size = size;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("size", this.size == null ? null : this.size.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceSku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceSku if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceSku.
     */
    public static ResourceSku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceSku deserializedResourceSku = new ResourceSku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedResourceSku.name = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedResourceSku.size = Size.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceSku;
        });
    }
}
