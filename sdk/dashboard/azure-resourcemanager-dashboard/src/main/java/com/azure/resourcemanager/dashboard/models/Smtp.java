// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Email server settings.
 * https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp.
 */
@Fluent
public final class Smtp implements JsonSerializable<Smtp> {
    /*
     * Enable this to allow Grafana to send email. Default is false
     */
    private Boolean enabled;

    /*
     * SMTP server hostname with port, e.g. test.email.net:587
     */
    private String host;

    /*
     * User of SMTP auth
     */
    private String user;

    /*
     * Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes
     */
    private String password;

    /*
     * Address used when sending out emails
     * https://pkg.go.dev/net/mail#Address
     */
    private String fromAddress;

    /*
     * Name to be used when sending out emails. Default is "Azure Managed Grafana Notification"
     * https://pkg.go.dev/net/mail#Address
     */
    private String fromName;

    /*
     * The StartTLSPolicy setting of the SMTP configuration
     * https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
     */
    private StartTlsPolicy startTlsPolicy;

    /*
     * Verify SSL for SMTP server. Default is false
     * https://pkg.go.dev/crypto/tls#Config
     */
    private Boolean skipVerify;

    /**
     * Creates an instance of Smtp class.
     */
    public Smtp() {
    }

    /**
     * Get the enabled property: Enable this to allow Grafana to send email. Default is false.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Enable this to allow Grafana to send email. Default is false.
     * 
     * @param enabled the enabled value to set.
     * @return the Smtp object itself.
     */
    public Smtp withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the host property: SMTP server hostname with port, e.g. test.email.net:587.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: SMTP server hostname with port, e.g. test.email.net:587.
     * 
     * @param host the host value to set.
     * @return the Smtp object itself.
     */
    public Smtp withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the user property: User of SMTP auth.
     * 
     * @return the user value.
     */
    public String user() {
        return this.user;
    }

    /**
     * Set the user property: User of SMTP auth.
     * 
     * @param user the user value to set.
     * @return the Smtp object itself.
     */
    public Smtp withUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the password property: Password of SMTP auth. If the password contains # or ;, then you have to wrap it with
     * triple quotes.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password of SMTP auth. If the password contains # or ;, then you have to wrap it with
     * triple quotes.
     * 
     * @param password the password value to set.
     * @return the Smtp object itself.
     */
    public Smtp withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the fromAddress property: Address used when sending out emails
     * https://pkg.go.dev/net/mail#Address.
     * 
     * @return the fromAddress value.
     */
    public String fromAddress() {
        return this.fromAddress;
    }

    /**
     * Set the fromAddress property: Address used when sending out emails
     * https://pkg.go.dev/net/mail#Address.
     * 
     * @param fromAddress the fromAddress value to set.
     * @return the Smtp object itself.
     */
    public Smtp withFromAddress(String fromAddress) {
        this.fromAddress = fromAddress;
        return this;
    }

    /**
     * Get the fromName property: Name to be used when sending out emails. Default is "Azure Managed Grafana
     * Notification"
     * https://pkg.go.dev/net/mail#Address.
     * 
     * @return the fromName value.
     */
    public String fromName() {
        return this.fromName;
    }

    /**
     * Set the fromName property: Name to be used when sending out emails. Default is "Azure Managed Grafana
     * Notification"
     * https://pkg.go.dev/net/mail#Address.
     * 
     * @param fromName the fromName value to set.
     * @return the Smtp object itself.
     */
    public Smtp withFromName(String fromName) {
        this.fromName = fromName;
        return this;
    }

    /**
     * Get the startTlsPolicy property: The StartTLSPolicy setting of the SMTP configuration
     * https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy.
     * 
     * @return the startTlsPolicy value.
     */
    public StartTlsPolicy startTlsPolicy() {
        return this.startTlsPolicy;
    }

    /**
     * Set the startTlsPolicy property: The StartTLSPolicy setting of the SMTP configuration
     * https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy.
     * 
     * @param startTlsPolicy the startTlsPolicy value to set.
     * @return the Smtp object itself.
     */
    public Smtp withStartTlsPolicy(StartTlsPolicy startTlsPolicy) {
        this.startTlsPolicy = startTlsPolicy;
        return this;
    }

    /**
     * Get the skipVerify property: Verify SSL for SMTP server. Default is false
     * https://pkg.go.dev/crypto/tls#Config.
     * 
     * @return the skipVerify value.
     */
    public Boolean skipVerify() {
        return this.skipVerify;
    }

    /**
     * Set the skipVerify property: Verify SSL for SMTP server. Default is false
     * https://pkg.go.dev/crypto/tls#Config.
     * 
     * @param skipVerify the skipVerify value to set.
     * @return the Smtp object itself.
     */
    public Smtp withSkipVerify(Boolean skipVerify) {
        this.skipVerify = skipVerify;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("user", this.user);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("fromAddress", this.fromAddress);
        jsonWriter.writeStringField("fromName", this.fromName);
        jsonWriter.writeStringField("startTLSPolicy",
            this.startTlsPolicy == null ? null : this.startTlsPolicy.toString());
        jsonWriter.writeBooleanField("skipVerify", this.skipVerify);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Smtp from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Smtp if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Smtp.
     */
    public static Smtp fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Smtp deserializedSmtp = new Smtp();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedSmtp.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("host".equals(fieldName)) {
                    deserializedSmtp.host = reader.getString();
                } else if ("user".equals(fieldName)) {
                    deserializedSmtp.user = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedSmtp.password = reader.getString();
                } else if ("fromAddress".equals(fieldName)) {
                    deserializedSmtp.fromAddress = reader.getString();
                } else if ("fromName".equals(fieldName)) {
                    deserializedSmtp.fromName = reader.getString();
                } else if ("startTLSPolicy".equals(fieldName)) {
                    deserializedSmtp.startTlsPolicy = StartTlsPolicy.fromString(reader.getString());
                } else if ("skipVerify".equals(fieldName)) {
                    deserializedSmtp.skipVerify = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSmtp;
        });
    }
}
