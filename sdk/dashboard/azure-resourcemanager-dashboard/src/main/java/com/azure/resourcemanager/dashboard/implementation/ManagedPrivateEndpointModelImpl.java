// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dashboard.fluent.models.ManagedPrivateEndpointModelInner;
import com.azure.resourcemanager.dashboard.models.ManagedPrivateEndpointConnectionState;
import com.azure.resourcemanager.dashboard.models.ManagedPrivateEndpointModel;
import com.azure.resourcemanager.dashboard.models.ManagedPrivateEndpointUpdateParameters;
import com.azure.resourcemanager.dashboard.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ManagedPrivateEndpointModelImpl
    implements ManagedPrivateEndpointModel, ManagedPrivateEndpointModel.Definition, ManagedPrivateEndpointModel.Update {
    private ManagedPrivateEndpointModelInner innerObject;

    private final com.azure.resourcemanager.dashboard.DashboardManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String privateLinkResourceId() {
        return this.innerModel().privateLinkResourceId();
    }

    public String privateLinkResourceRegion() {
        return this.innerModel().privateLinkResourceRegion();
    }

    public List<String> groupIds() {
        List<String> inner = this.innerModel().groupIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String requestMessage() {
        return this.innerModel().requestMessage();
    }

    public ManagedPrivateEndpointConnectionState connectionState() {
        return this.innerModel().connectionState();
    }

    public String privateLinkServiceUrl() {
        return this.innerModel().privateLinkServiceUrl();
    }

    public String privateLinkServicePrivateIp() {
        return this.innerModel().privateLinkServicePrivateIp();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ManagedPrivateEndpointModelInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.dashboard.DashboardManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String managedPrivateEndpointName;

    private ManagedPrivateEndpointUpdateParameters updateRequestBodyParameters;

    public ManagedPrivateEndpointModelImpl withExistingGrafana(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    public ManagedPrivateEndpointModel create() {
        this.innerObject = serviceManager.serviceClient().getManagedPrivateEndpoints().create(resourceGroupName,
            workspaceName, managedPrivateEndpointName, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedPrivateEndpointModel create(Context context) {
        this.innerObject = serviceManager.serviceClient().getManagedPrivateEndpoints().create(resourceGroupName,
            workspaceName, managedPrivateEndpointName, this.innerModel(), context);
        return this;
    }

    ManagedPrivateEndpointModelImpl(String name, com.azure.resourcemanager.dashboard.DashboardManager serviceManager) {
        this.innerObject = new ManagedPrivateEndpointModelInner();
        this.serviceManager = serviceManager;
        this.managedPrivateEndpointName = name;
    }

    public ManagedPrivateEndpointModelImpl update() {
        this.updateRequestBodyParameters = new ManagedPrivateEndpointUpdateParameters();
        return this;
    }

    public ManagedPrivateEndpointModel apply() {
        this.innerObject = serviceManager.serviceClient().getManagedPrivateEndpoints().update(resourceGroupName,
            workspaceName, managedPrivateEndpointName, updateRequestBodyParameters, Context.NONE);
        return this;
    }

    public ManagedPrivateEndpointModel apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getManagedPrivateEndpoints().update(resourceGroupName,
            workspaceName, managedPrivateEndpointName, updateRequestBodyParameters, context);
        return this;
    }

    ManagedPrivateEndpointModelImpl(ManagedPrivateEndpointModelInner innerObject,
        com.azure.resourcemanager.dashboard.DashboardManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = Utils.getValueFromIdByName(innerObject.id(), "grafana");
        this.managedPrivateEndpointName = Utils.getValueFromIdByName(innerObject.id(), "managedPrivateEndpoints");
    }

    public ManagedPrivateEndpointModel refresh() {
        this.innerObject = serviceManager.serviceClient().getManagedPrivateEndpoints()
            .getWithResponse(resourceGroupName, workspaceName, managedPrivateEndpointName, Context.NONE).getValue();
        return this;
    }

    public ManagedPrivateEndpointModel refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getManagedPrivateEndpoints()
            .getWithResponse(resourceGroupName, workspaceName, managedPrivateEndpointName, context).getValue();
        return this;
    }

    public ManagedPrivateEndpointModelImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ManagedPrivateEndpointModelImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ManagedPrivateEndpointModelImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateRequestBodyParameters.withTags(tags);
            return this;
        }
    }

    public ManagedPrivateEndpointModelImpl withPrivateLinkResourceId(String privateLinkResourceId) {
        this.innerModel().withPrivateLinkResourceId(privateLinkResourceId);
        return this;
    }

    public ManagedPrivateEndpointModelImpl withPrivateLinkResourceRegion(String privateLinkResourceRegion) {
        this.innerModel().withPrivateLinkResourceRegion(privateLinkResourceRegion);
        return this;
    }

    public ManagedPrivateEndpointModelImpl withGroupIds(List<String> groupIds) {
        this.innerModel().withGroupIds(groupIds);
        return this;
    }

    public ManagedPrivateEndpointModelImpl withRequestMessage(String requestMessage) {
        this.innerModel().withRequestMessage(requestMessage);
        return this;
    }

    public ManagedPrivateEndpointModelImpl withPrivateLinkServiceUrl(String privateLinkServiceUrl) {
        this.innerModel().withPrivateLinkServiceUrl(privateLinkServiceUrl);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
