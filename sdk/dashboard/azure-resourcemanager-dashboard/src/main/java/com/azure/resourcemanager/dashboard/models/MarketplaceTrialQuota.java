// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The allocation details of the per subscription free trial slot of the subscription.
 */
@Fluent
public final class MarketplaceTrialQuota implements JsonSerializable<MarketplaceTrialQuota> {
    /*
     * Available enterprise promotion for the subscription
     */
    private AvailablePromotion availablePromotion;

    /*
     * Resource Id of the Grafana resource which is doing the trial.
     */
    private String grafanaResourceId;

    /*
     * The date and time in UTC of when the trial starts.
     */
    private OffsetDateTime trialStartAt;

    /*
     * The date and time in UTC of when the trial ends.
     */
    private OffsetDateTime trialEndAt;

    /**
     * Creates an instance of MarketplaceTrialQuota class.
     */
    public MarketplaceTrialQuota() {
    }

    /**
     * Get the availablePromotion property: Available enterprise promotion for the subscription.
     * 
     * @return the availablePromotion value.
     */
    public AvailablePromotion availablePromotion() {
        return this.availablePromotion;
    }

    /**
     * Set the availablePromotion property: Available enterprise promotion for the subscription.
     * 
     * @param availablePromotion the availablePromotion value to set.
     * @return the MarketplaceTrialQuota object itself.
     */
    public MarketplaceTrialQuota withAvailablePromotion(AvailablePromotion availablePromotion) {
        this.availablePromotion = availablePromotion;
        return this;
    }

    /**
     * Get the grafanaResourceId property: Resource Id of the Grafana resource which is doing the trial.
     * 
     * @return the grafanaResourceId value.
     */
    public String grafanaResourceId() {
        return this.grafanaResourceId;
    }

    /**
     * Set the grafanaResourceId property: Resource Id of the Grafana resource which is doing the trial.
     * 
     * @param grafanaResourceId the grafanaResourceId value to set.
     * @return the MarketplaceTrialQuota object itself.
     */
    public MarketplaceTrialQuota withGrafanaResourceId(String grafanaResourceId) {
        this.grafanaResourceId = grafanaResourceId;
        return this;
    }

    /**
     * Get the trialStartAt property: The date and time in UTC of when the trial starts.
     * 
     * @return the trialStartAt value.
     */
    public OffsetDateTime trialStartAt() {
        return this.trialStartAt;
    }

    /**
     * Set the trialStartAt property: The date and time in UTC of when the trial starts.
     * 
     * @param trialStartAt the trialStartAt value to set.
     * @return the MarketplaceTrialQuota object itself.
     */
    public MarketplaceTrialQuota withTrialStartAt(OffsetDateTime trialStartAt) {
        this.trialStartAt = trialStartAt;
        return this;
    }

    /**
     * Get the trialEndAt property: The date and time in UTC of when the trial ends.
     * 
     * @return the trialEndAt value.
     */
    public OffsetDateTime trialEndAt() {
        return this.trialEndAt;
    }

    /**
     * Set the trialEndAt property: The date and time in UTC of when the trial ends.
     * 
     * @param trialEndAt the trialEndAt value to set.
     * @return the MarketplaceTrialQuota object itself.
     */
    public MarketplaceTrialQuota withTrialEndAt(OffsetDateTime trialEndAt) {
        this.trialEndAt = trialEndAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availablePromotion",
            this.availablePromotion == null ? null : this.availablePromotion.toString());
        jsonWriter.writeStringField("grafanaResourceId", this.grafanaResourceId);
        jsonWriter.writeStringField("trialStartAt",
            this.trialStartAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.trialStartAt));
        jsonWriter.writeStringField("trialEndAt",
            this.trialEndAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.trialEndAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarketplaceTrialQuota from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarketplaceTrialQuota if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MarketplaceTrialQuota.
     */
    public static MarketplaceTrialQuota fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarketplaceTrialQuota deserializedMarketplaceTrialQuota = new MarketplaceTrialQuota();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availablePromotion".equals(fieldName)) {
                    deserializedMarketplaceTrialQuota.availablePromotion
                        = AvailablePromotion.fromString(reader.getString());
                } else if ("grafanaResourceId".equals(fieldName)) {
                    deserializedMarketplaceTrialQuota.grafanaResourceId = reader.getString();
                } else if ("trialStartAt".equals(fieldName)) {
                    deserializedMarketplaceTrialQuota.trialStartAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("trialEndAt".equals(fieldName)) {
                    deserializedMarketplaceTrialQuota.trialEndAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarketplaceTrialQuota;
        });
    }
}
