// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dashboard.DashboardManager;
import com.azure.resourcemanager.dashboard.models.ApiKey;
import com.azure.resourcemanager.dashboard.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.dashboard.models.DeterministicOutboundIp;
import com.azure.resourcemanager.dashboard.models.ManagedGrafana;
import com.azure.resourcemanager.dashboard.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.dashboard.models.PublicNetworkAccess;
import com.azure.resourcemanager.dashboard.models.ZoneRedundancy;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GrafanasListTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"sku\":{\"name\":\"rjfeallnwsubisnj\"},\"properties\":{\"provisioningState\":\"Accepted\",\"grafanaVersion\":\"gnzscxaqwo\",\"endpoint\":\"hcbonqvpkvlr\",\"publicNetworkAccess\":\"Enabled\",\"zoneRedundancy\":\"Disabled\",\"apiKey\":\"Enabled\",\"deterministicOutboundIP\":\"Enabled\",\"outboundIPs\":[\"oflokey\"],\"privateEndpointConnections\":[],\"autoGeneratedDomainNameLabelScope\":\"TenantReuse\",\"grafanaIntegrations\":{\"azureMonitorWorkspaceIntegrations\":[]}},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"djpjumasxazjpq\",\"tags\":{\"zvdudgwdslfhotwm\":\"ualhbxxhejj\"},\"id\":\"ynpwlbj\",\"name\":\"pgacftadehxnlty\",\"type\":\"sop\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DashboardManager manager =
            DashboardManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ManagedGrafana> response = manager.grafanas().list(Context.NONE);

        Assertions.assertEquals("djpjumasxazjpq", response.iterator().next().location());
        Assertions.assertEquals("ualhbxxhejj", response.iterator().next().tags().get("zvdudgwdslfhotwm"));
        Assertions.assertEquals("rjfeallnwsubisnj", response.iterator().next().sku().name());
        Assertions
            .assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().properties().publicNetworkAccess());
        Assertions.assertEquals(ZoneRedundancy.DISABLED, response.iterator().next().properties().zoneRedundancy());
        Assertions.assertEquals(ApiKey.ENABLED, response.iterator().next().properties().apiKey());
        Assertions
            .assertEquals(
                DeterministicOutboundIp.ENABLED, response.iterator().next().properties().deterministicOutboundIp());
        Assertions
            .assertEquals(
                AutoGeneratedDomainNameLabelScope.TENANT_REUSE,
                response.iterator().next().properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
