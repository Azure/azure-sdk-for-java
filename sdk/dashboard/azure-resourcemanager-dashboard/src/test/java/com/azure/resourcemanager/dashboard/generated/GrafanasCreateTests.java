// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dashboard.DashboardManager;
import com.azure.resourcemanager.dashboard.models.ApiKey;
import com.azure.resourcemanager.dashboard.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.dashboard.models.DeterministicOutboundIp;
import com.azure.resourcemanager.dashboard.models.GrafanaIntegrations;
import com.azure.resourcemanager.dashboard.models.ManagedGrafana;
import com.azure.resourcemanager.dashboard.models.ManagedGrafanaProperties;
import com.azure.resourcemanager.dashboard.models.ManagedServiceIdentity;
import com.azure.resourcemanager.dashboard.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.dashboard.models.PublicNetworkAccess;
import com.azure.resourcemanager.dashboard.models.ResourceSku;
import com.azure.resourcemanager.dashboard.models.ZoneRedundancy;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GrafanasCreateTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"name\":\"jiwkuofoskghsau\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"grafanaVersion\":\"vxieduugidyj\",\"endpoint\":\"f\",\"publicNetworkAccess\":\"Enabled\",\"zoneRedundancy\":\"Enabled\",\"apiKey\":\"Disabled\",\"deterministicOutboundIP\":\"Enabled\",\"outboundIPs\":[\"npc\"],\"privateEndpointConnections\":[],\"autoGeneratedDomainNameLabelScope\":\"TenantReuse\",\"grafanaIntegrations\":{\"azureMonitorWorkspaceIntegrations\":[]}},\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"gz\",\"tags\":{\"ithlvmezyvshxm\":\"hfmvfaxkffe\"},\"id\":\"sbbzo\",\"name\":\"gigr\",\"type\":\"wburvjxxjnspydpt\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DashboardManager manager =
            DashboardManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ManagedGrafana response =
            manager
                .grafanas()
                .define("xbezyiuokktwh")
                .withRegion("f")
                .withExistingResourceGroup("xodpuozmyzydagfu")
                .withTags(mapOf("wiqzbqjvsovmyo", "kpnpulexxbczwtr"))
                .withSku(new ResourceSku().withName("xw"))
                .withProperties(
                    new ManagedGrafanaProperties()
                        .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                        .withZoneRedundancy(ZoneRedundancy.ENABLED)
                        .withApiKey(ApiKey.ENABLED)
                        .withDeterministicOutboundIp(DeterministicOutboundIp.ENABLED)
                        .withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope.TENANT_REUSE)
                        .withGrafanaIntegrations(
                            new GrafanaIntegrations().withAzureMonitorWorkspaceIntegrations(Arrays.asList())))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf()))
                .create();

        Assertions.assertEquals("gz", response.location());
        Assertions.assertEquals("hfmvfaxkffe", response.tags().get("ithlvmezyvshxm"));
        Assertions.assertEquals("jiwkuofoskghsau", response.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals(ZoneRedundancy.ENABLED, response.properties().zoneRedundancy());
        Assertions.assertEquals(ApiKey.DISABLED, response.properties().apiKey());
        Assertions.assertEquals(DeterministicOutboundIp.ENABLED, response.properties().deterministicOutboundIp());
        Assertions
            .assertEquals(
                AutoGeneratedDomainNameLabelScope.TENANT_REUSE,
                response.properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
