// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dashboard.DashboardManager;
import com.azure.resourcemanager.dashboard.models.ManagedPrivateEndpointModel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ManagedPrivateEndpointsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateLinkResourceId\":\"rtuzqogs\",\"privateLinkResourceRegion\":\"nevfdnw\",\"groupIds\":[\"ewzsyyceuzsoib\",\"ud\"],\"requestMessage\":\"rx\",\"connectionState\":{\"status\":\"Pending\",\"description\":\"vaytdwkqbrq\"},\"privateLinkServiceUrl\":\"paxh\",\"privateLinkServicePrivateIP\":\"iilivpdtiirqtd\"},\"location\":\"axoruzfgsquy\",\"tags\":{\"tramxjez\":\"xxle\",\"tdooaoj\":\"lwnwxuqlcvydyp\"},\"id\":\"niodkooeb\",\"name\":\"nuj\",\"type\":\"emmsbvdkc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DashboardManager manager = DashboardManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ManagedPrivateEndpointModel response = manager.managedPrivateEndpoints()
            .define("sphyoulpjrvxa")
            .withRegion("wlycoduhpkxkg")
            .withExistingGrafana("abfatkl", "dxbjhwuaanozj")
            .withTags(mapOf("n", "re", "ubeddg", "jxqugjhky"))
            .withPrivateLinkResourceId("mjwosytx")
            .withPrivateLinkResourceRegion("cskfcktqumiekk")
            .withGroupIds(Arrays.asList("ikh", "yf"))
            .withRequestMessage("dgqggebdu")
            .withPrivateLinkServiceUrl("oadsuvar")
            .create();

        Assertions.assertEquals("axoruzfgsquy", response.location());
        Assertions.assertEquals("xxle", response.tags().get("tramxjez"));
        Assertions.assertEquals("rtuzqogs", response.privateLinkResourceId());
        Assertions.assertEquals("nevfdnw", response.privateLinkResourceRegion());
        Assertions.assertEquals("ewzsyyceuzsoib", response.groupIds().get(0));
        Assertions.assertEquals("rx", response.requestMessage());
        Assertions.assertEquals("paxh", response.privateLinkServiceUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
