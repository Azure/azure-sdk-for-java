// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dashboard.models.IntegrationFabricPropertiesUpdateParameters;
import com.azure.resourcemanager.dashboard.models.IntegrationFabricUpdateParameters;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationFabricUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationFabricUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"mzidnsezcxtb\":\"srp\",\"dwzjeiach\":\"sgfyccsnew\",\"sfqpteehz\":\"oosflnr\"},\"properties\":{\"scenarios\":[\"yqrimzin\"]}}")
            .toObject(IntegrationFabricUpdateParameters.class);
        Assertions.assertEquals("srp", model.tags().get("mzidnsezcxtb"));
        Assertions.assertEquals("yqrimzin", model.properties().scenarios().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationFabricUpdateParameters model = new IntegrationFabricUpdateParameters()
            .withTags(mapOf("mzidnsezcxtb", "srp", "dwzjeiach", "sgfyccsnew", "sfqpteehz", "oosflnr"))
            .withProperties(new IntegrationFabricPropertiesUpdateParameters().withScenarios(Arrays.asList("yqrimzin")));
        model = BinaryData.fromObject(model).toObject(IntegrationFabricUpdateParameters.class);
        Assertions.assertEquals("srp", model.tags().get("mzidnsezcxtb"));
        Assertions.assertEquals("yqrimzin", model.properties().scenarios().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
