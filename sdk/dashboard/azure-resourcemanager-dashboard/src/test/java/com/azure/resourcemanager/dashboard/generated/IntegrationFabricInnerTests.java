// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dashboard.fluent.models.IntegrationFabricInner;
import com.azure.resourcemanager.dashboard.models.IntegrationFabricProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationFabricInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationFabricInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"targetResourceId\":\"s\",\"dataSourceResourceId\":\"eju\",\"scenarios\":[\"awrlyx\",\"jkcpr\",\"nwbxgjvtbvpyssz\"]},\"location\":\"rujqg\",\"tags\":{\"prwzwbnguitnwui\":\"uouq\",\"zuckyfi\":\"gazxuf\"},\"id\":\"rfidfvzwdz\",\"name\":\"htymw\",\"type\":\"sdkf\"}")
            .toObject(IntegrationFabricInner.class);
        Assertions.assertEquals("rujqg", model.location());
        Assertions.assertEquals("uouq", model.tags().get("prwzwbnguitnwui"));
        Assertions.assertEquals("s", model.properties().targetResourceId());
        Assertions.assertEquals("eju", model.properties().dataSourceResourceId());
        Assertions.assertEquals("awrlyx", model.properties().scenarios().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationFabricInner model = new IntegrationFabricInner().withLocation("rujqg")
            .withTags(mapOf("prwzwbnguitnwui", "uouq", "zuckyfi", "gazxuf"))
            .withProperties(new IntegrationFabricProperties().withTargetResourceId("s")
                .withDataSourceResourceId("eju")
                .withScenarios(Arrays.asList("awrlyx", "jkcpr", "nwbxgjvtbvpyssz")));
        model = BinaryData.fromObject(model).toObject(IntegrationFabricInner.class);
        Assertions.assertEquals("rujqg", model.location());
        Assertions.assertEquals("uouq", model.tags().get("prwzwbnguitnwui"));
        Assertions.assertEquals("s", model.properties().targetResourceId());
        Assertions.assertEquals("eju", model.properties().dataSourceResourceId());
        Assertions.assertEquals("awrlyx", model.properties().scenarios().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
