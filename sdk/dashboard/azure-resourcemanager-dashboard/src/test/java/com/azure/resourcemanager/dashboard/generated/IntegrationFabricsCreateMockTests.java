// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dashboard.DashboardManager;
import com.azure.resourcemanager.dashboard.models.IntegrationFabric;
import com.azure.resourcemanager.dashboard.models.IntegrationFabricProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationFabricsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"targetResourceId\":\"bunrmfqjhhk\",\"dataSourceResourceId\":\"pvjymjhxxjyng\",\"scenarios\":[\"vkr\",\"swbxqz\"]},\"location\":\"zjf\",\"tags\":{\"dxxiv\":\"j\",\"aqtdoqmcbx\":\"tvtc\"},\"id\":\"wvxysl\",\"name\":\"bhsfxob\",\"type\":\"ytkblmpew\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DashboardManager manager = DashboardManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        IntegrationFabric response = manager.integrationFabrics()
            .define("nalaulppg")
            .withRegion("hxg")
            .withExistingGrafana("exznelixhnr", "tfolhbnx")
            .withTags(mapOf("kteo", "mgucna", "pfqbuaceopzf", "llwptfdy"))
            .withProperties(new IntegrationFabricProperties().withTargetResourceId("apnyiropuhpig")
                .withDataSourceResourceId("gylgqgitxmedjvcs")
                .withScenarios(Arrays.asList("qwwncw")))
            .create();

        Assertions.assertEquals("zjf", response.location());
        Assertions.assertEquals("j", response.tags().get("dxxiv"));
        Assertions.assertEquals("bunrmfqjhhk", response.properties().targetResourceId());
        Assertions.assertEquals("pvjymjhxxjyng", response.properties().dataSourceResourceId());
        Assertions.assertEquals("vkr", response.properties().scenarios().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
