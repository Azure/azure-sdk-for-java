// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dashboard.models.ManagedServiceIdentity;
import com.azure.resourcemanager.dashboard.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.dashboard.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"af285d4e-90ed-4cf2-8a4c-e574f1cc5f43\",\"tenantId\":\"11510da4-76ca-4c85-82d7-303f43c05ddd\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"cwrwclxxwrljdous\":{\"principalId\":\"27264860-2a30-4f3f-93f5-d44914029ad2\",\"clientId\":\"e8c079d9-fe65-44e5-98b3-034c5e7b8059\"},\"vkocrcjdkwtn\":{\"principalId\":\"330bfc3f-310b-4e8e-ad1b-5d9c996bbb98\",\"clientId\":\"ea37397f-6a8c-4639-8df7-50fcaecd0bb8\"},\"njbiksqrglssain\":{\"principalId\":\"4ee96bf3-282d-43f9-a0a7-8b07fb220754\",\"clientId\":\"138dabcc-8b5a-4bbc-b717-47ae76d5ada6\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
            .withUserAssignedIdentities(mapOf("cwrwclxxwrljdous", new UserAssignedIdentity(), "vkocrcjdkwtn",
                new UserAssignedIdentity(), "njbiksqrglssain", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
