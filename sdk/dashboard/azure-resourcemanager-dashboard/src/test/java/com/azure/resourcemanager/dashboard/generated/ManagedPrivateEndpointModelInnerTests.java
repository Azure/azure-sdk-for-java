// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dashboard.fluent.models.ManagedPrivateEndpointModelInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedPrivateEndpointModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedPrivateEndpointModelInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"privateLinkResourceId\":\"grhpdjpju\",\"privateLinkResourceRegion\":\"sxazjpq\",\"groupIds\":[\"ualhbxxhejj\"],\"requestMessage\":\"v\",\"connectionState\":{\"status\":\"Rejected\",\"description\":\"dslfhotwmcy\"},\"privateLinkServiceUrl\":\"wlbjnpgacftade\",\"privateLinkServicePrivateIP\":\"nltyfsoppusuesnz\"},\"location\":\"ej\",\"tags\":{\"xdn\":\"orxzdmohctbqvud\",\"wdkcglhsl\":\"nvowgujju\",\"yggdtjixh\":\"zj\"},\"id\":\"kuofqweykhme\",\"name\":\"evfyexfwhybcib\",\"type\":\"yvdcsitynnaa\"}")
            .toObject(ManagedPrivateEndpointModelInner.class);
        Assertions.assertEquals("ej", model.location());
        Assertions.assertEquals("orxzdmohctbqvud", model.tags().get("xdn"));
        Assertions.assertEquals("grhpdjpju", model.privateLinkResourceId());
        Assertions.assertEquals("sxazjpq", model.privateLinkResourceRegion());
        Assertions.assertEquals("ualhbxxhejj", model.groupIds().get(0));
        Assertions.assertEquals("v", model.requestMessage());
        Assertions.assertEquals("wlbjnpgacftade", model.privateLinkServiceUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedPrivateEndpointModelInner model = new ManagedPrivateEndpointModelInner().withLocation("ej")
            .withTags(mapOf("xdn", "orxzdmohctbqvud", "wdkcglhsl", "nvowgujju", "yggdtjixh", "zj"))
            .withPrivateLinkResourceId("grhpdjpju").withPrivateLinkResourceRegion("sxazjpq")
            .withGroupIds(Arrays.asList("ualhbxxhejj")).withRequestMessage("v")
            .withPrivateLinkServiceUrl("wlbjnpgacftade");
        model = BinaryData.fromObject(model).toObject(ManagedPrivateEndpointModelInner.class);
        Assertions.assertEquals("ej", model.location());
        Assertions.assertEquals("orxzdmohctbqvud", model.tags().get("xdn"));
        Assertions.assertEquals("grhpdjpju", model.privateLinkResourceId());
        Assertions.assertEquals("sxazjpq", model.privateLinkResourceRegion());
        Assertions.assertEquals("ualhbxxhejj", model.groupIds().get(0));
        Assertions.assertEquals("v", model.requestMessage());
        Assertions.assertEquals("wlbjnpgacftade", model.privateLinkServiceUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
