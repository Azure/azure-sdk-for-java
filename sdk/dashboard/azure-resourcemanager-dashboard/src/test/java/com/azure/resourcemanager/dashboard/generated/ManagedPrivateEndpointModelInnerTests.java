// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dashboard.fluent.models.ManagedPrivateEndpointModelInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedPrivateEndpointModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedPrivateEndpointModelInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"NotSpecified\",\"privateLinkResourceId\":\"ltrpmopj\",\"privateLinkResourceRegion\":\"matuok\",\"groupIds\":[\"uiuaodsfcpkvxodp\"],\"requestMessage\":\"zmyzydagf\",\"connectionState\":{\"status\":\"Pending\",\"description\":\"zyiuokk\"},\"privateLinkServiceUrl\":\"hrdxwzywqsmbs\",\"privateLinkServicePrivateIP\":\"exim\"},\"location\":\"yocf\",\"tags\":{\"mddystkiiux\":\"s\",\"o\":\"qyud\"},\"id\":\"rq\",\"name\":\"b\",\"type\":\"oczvy\"}")
            .toObject(ManagedPrivateEndpointModelInner.class);
        Assertions.assertEquals("yocf", model.location());
        Assertions.assertEquals("s", model.tags().get("mddystkiiux"));
        Assertions.assertEquals("ltrpmopj", model.privateLinkResourceId());
        Assertions.assertEquals("matuok", model.privateLinkResourceRegion());
        Assertions.assertEquals("uiuaodsfcpkvxodp", model.groupIds().get(0));
        Assertions.assertEquals("zmyzydagf", model.requestMessage());
        Assertions.assertEquals("hrdxwzywqsmbs", model.privateLinkServiceUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedPrivateEndpointModelInner model = new ManagedPrivateEndpointModelInner().withLocation("yocf")
            .withTags(mapOf("mddystkiiux", "s", "o", "qyud"))
            .withPrivateLinkResourceId("ltrpmopj")
            .withPrivateLinkResourceRegion("matuok")
            .withGroupIds(Arrays.asList("uiuaodsfcpkvxodp"))
            .withRequestMessage("zmyzydagf")
            .withPrivateLinkServiceUrl("hrdxwzywqsmbs");
        model = BinaryData.fromObject(model).toObject(ManagedPrivateEndpointModelInner.class);
        Assertions.assertEquals("yocf", model.location());
        Assertions.assertEquals("s", model.tags().get("mddystkiiux"));
        Assertions.assertEquals("ltrpmopj", model.privateLinkResourceId());
        Assertions.assertEquals("matuok", model.privateLinkResourceRegion());
        Assertions.assertEquals("uiuaodsfcpkvxodp", model.groupIds().get(0));
        Assertions.assertEquals("zmyzydagf", model.requestMessage());
        Assertions.assertEquals("hrdxwzywqsmbs", model.privateLinkServiceUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
