// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dashboard.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dashboard.fluent.models.ManagedPrivateEndpointModelInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedPrivateEndpointModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedPrivateEndpointModelInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"privateLinkResourceId\":\"iwkuofos\",\"privateLinkResourceRegion\":\"hsauuimjmvxied\",\"groupIds\":[\"idyjrrfbyaosvexc\",\"onpc\"],\"requestMessage\":\"ocohslkevleg\",\"connectionState\":{\"status\":\"Disconnected\",\"description\":\"hfmvfaxkffe\"},\"privateLinkServiceUrl\":\"th\",\"privateLinkServicePrivateIP\":\"m\"},\"location\":\"yvshxmz\",\"tags\":{\"nspydptkoenkoukn\":\"zoggigrxwburvjxx\",\"ngkpocipazy\":\"udwtiukbl\",\"gukgjnpiucgygevq\":\"o\"},\"id\":\"ntypmrbpizcdrqj\",\"name\":\"dpydn\",\"type\":\"yhxdeoejzicwi\"}")
            .toObject(ManagedPrivateEndpointModelInner.class);
        Assertions.assertEquals("yvshxmz", model.location());
        Assertions.assertEquals("zoggigrxwburvjxx", model.tags().get("nspydptkoenkoukn"));
        Assertions.assertEquals("iwkuofos", model.privateLinkResourceId());
        Assertions.assertEquals("hsauuimjmvxied", model.privateLinkResourceRegion());
        Assertions.assertEquals("idyjrrfbyaosvexc", model.groupIds().get(0));
        Assertions.assertEquals("ocohslkevleg", model.requestMessage());
        Assertions.assertEquals("th", model.privateLinkServiceUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedPrivateEndpointModelInner model = new ManagedPrivateEndpointModelInner().withLocation("yvshxmz")
            .withTags(
                mapOf("nspydptkoenkoukn", "zoggigrxwburvjxx", "ngkpocipazy", "udwtiukbl", "gukgjnpiucgygevq", "o"))
            .withPrivateLinkResourceId("iwkuofos")
            .withPrivateLinkResourceRegion("hsauuimjmvxied")
            .withGroupIds(Arrays.asList("idyjrrfbyaosvexc", "onpc"))
            .withRequestMessage("ocohslkevleg")
            .withPrivateLinkServiceUrl("th");
        model = BinaryData.fromObject(model).toObject(ManagedPrivateEndpointModelInner.class);
        Assertions.assertEquals("yvshxmz", model.location());
        Assertions.assertEquals("zoggigrxwburvjxx", model.tags().get("nspydptkoenkoukn"));
        Assertions.assertEquals("iwkuofos", model.privateLinkResourceId());
        Assertions.assertEquals("hsauuimjmvxied", model.privateLinkResourceRegion());
        Assertions.assertEquals("idyjrrfbyaosvexc", model.groupIds().get(0));
        Assertions.assertEquals("ocohslkevleg", model.requestMessage());
        Assertions.assertEquals("th", model.privateLinkServiceUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
