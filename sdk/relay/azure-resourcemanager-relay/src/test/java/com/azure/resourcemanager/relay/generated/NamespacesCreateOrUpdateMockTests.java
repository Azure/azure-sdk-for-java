// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relay.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.relay.RelayManager;
import com.azure.resourcemanager.relay.models.RelayNamespace;
import com.azure.resourcemanager.relay.models.Sku;
import com.azure.resourcemanager.relay.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"tier\":\"Standard\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"createdAt\":\"2021-03-05T06:09:09Z\",\"updatedAt\":\"2021-07-11T00:23:53Z\",\"serviceBusEndpoint\":\"zscxaqwo\",\"metricId\":\"hcbonqvpkvlr\"},\"location\":\"njeaseipheofloke\",\"tags\":{\"jp\":\"enjbdlwtgrhp\",\"e\":\"umasxazjpq\",\"zvdudgwdslfhotwm\":\"ualhbxxhejj\"},\"id\":\"ynpwlbj\",\"name\":\"pgacftadehxnlty\",\"type\":\"sop\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RelayManager manager = RelayManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RelayNamespace response = manager.namespaces()
            .define("ywgndrv")
            .withRegion("vmmcoofs")
            .withExistingResourceGroup("kanyktzlcuiywg")
            .withTags(mapOf("bcypmi", "evgbmqjq", "acfi", "kwlzuvccfwnfn"))
            .withSku(new Sku().withTier(SkuTier.STANDARD))
            .create();

        Assertions.assertEquals("njeaseipheofloke", response.location());
        Assertions.assertEquals("enjbdlwtgrhp", response.tags().get("jp"));
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
