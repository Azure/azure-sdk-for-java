// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relay.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.relay.fluent.models.RelayNamespaceInner;
import com.azure.resourcemanager.relay.models.Sku;
import com.azure.resourcemanager.relay.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RelayNamespaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RelayNamespaceInner model = BinaryData.fromString(
            "{\"sku\":{\"tier\":\"Standard\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"createdAt\":\"2021-11-13T01:40:46Z\",\"updatedAt\":\"2021-05-15T23:35:32Z\",\"serviceBusEndpoint\":\"jsprozvcpute\",\"metricId\":\"vwmf\"},\"location\":\"atscmd\",\"tags\":{\"dio\":\"hulsuuvmkjozkrwf\",\"vwryoqpso\":\"jpslwejd\",\"yffdfdos\":\"cctazakljlahbc\"},\"id\":\"gexpaojakhmsbz\",\"name\":\"hcrzevd\",\"type\":\"hlxaolthqtr\"}")
            .toObject(RelayNamespaceInner.class);
        Assertions.assertEquals("atscmd", model.location());
        Assertions.assertEquals("hulsuuvmkjozkrwf", model.tags().get("dio"));
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RelayNamespaceInner model = new RelayNamespaceInner().withLocation("atscmd")
            .withTags(mapOf("dio", "hulsuuvmkjozkrwf", "vwryoqpso", "jpslwejd", "yffdfdos", "cctazakljlahbc"))
            .withSku(new Sku().withTier(SkuTier.STANDARD));
        model = BinaryData.fromObject(model).toObject(RelayNamespaceInner.class);
        Assertions.assertEquals("atscmd", model.location());
        Assertions.assertEquals("hulsuuvmkjozkrwf", model.tags().get("dio"));
        Assertions.assertEquals(SkuTier.STANDARD, model.sku().tier());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
