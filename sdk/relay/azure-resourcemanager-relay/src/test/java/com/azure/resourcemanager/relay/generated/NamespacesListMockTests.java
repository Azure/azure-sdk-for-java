// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relay.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.relay.RelayManager;
import com.azure.resourcemanager.relay.models.RelayNamespace;
import com.azure.resourcemanager.relay.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"tier\":\"Standard\"},\"properties\":{\"provisioningState\":\"Deleted\",\"createdAt\":\"2021-05-28T17:15:13Z\",\"updatedAt\":\"2021-01-24T18:28:17Z\",\"serviceBusEndpoint\":\"ysszdnrujqguh\",\"metricId\":\"ouqfprwz\"},\"location\":\"bngui\",\"tags\":{\"x\":\"uizga\"},\"id\":\"fizuckyf\",\"name\":\"hr\",\"type\":\"idf\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RelayManager manager = RelayManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RelayNamespace> response = manager.namespaces().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bngui", response.iterator().next().location());
        Assertions.assertEquals("uizga", response.iterator().next().tags().get("x"));
        Assertions.assertEquals(SkuTier.STANDARD, response.iterator().next().sku().tier());
    }
}
