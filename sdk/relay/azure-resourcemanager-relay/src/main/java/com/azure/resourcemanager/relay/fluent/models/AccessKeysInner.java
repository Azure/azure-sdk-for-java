// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relay.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Namespace/Relay Connection String.
 */
@Fluent
public final class AccessKeysInner implements JsonSerializable<AccessKeysInner> {
    /*
     * Primary connection string of the created namespace authorization rule.
     */
    private String primaryConnectionString;

    /*
     * Secondary connection string of the created namespace authorization rule.
     */
    private String secondaryConnectionString;

    /*
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     */
    private String primaryKey;

    /*
     * A base64-encoded 256-bit secondary key for signing and validating the SAS token.
     */
    private String secondaryKey;

    /*
     * A string that describes the authorization rule.
     */
    private String keyName;

    /**
     * Creates an instance of AccessKeysInner class.
     */
    public AccessKeysInner() {
    }

    /**
     * Get the primaryConnectionString property: Primary connection string of the created namespace authorization rule.
     * 
     * @return the primaryConnectionString value.
     */
    public String primaryConnectionString() {
        return this.primaryConnectionString;
    }

    /**
     * Set the primaryConnectionString property: Primary connection string of the created namespace authorization rule.
     * 
     * @param primaryConnectionString the primaryConnectionString value to set.
     * @return the AccessKeysInner object itself.
     */
    public AccessKeysInner withPrimaryConnectionString(String primaryConnectionString) {
        this.primaryConnectionString = primaryConnectionString;
        return this;
    }

    /**
     * Get the secondaryConnectionString property: Secondary connection string of the created namespace authorization
     * rule.
     * 
     * @return the secondaryConnectionString value.
     */
    public String secondaryConnectionString() {
        return this.secondaryConnectionString;
    }

    /**
     * Set the secondaryConnectionString property: Secondary connection string of the created namespace authorization
     * rule.
     * 
     * @param secondaryConnectionString the secondaryConnectionString value to set.
     * @return the AccessKeysInner object itself.
     */
    public AccessKeysInner withSecondaryConnectionString(String secondaryConnectionString) {
        this.secondaryConnectionString = secondaryConnectionString;
        return this;
    }

    /**
     * Get the primaryKey property: A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     * @return the primaryKey value.
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * Set the primaryKey property: A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     * @param primaryKey the primaryKey value to set.
     * @return the AccessKeysInner object itself.
     */
    public AccessKeysInner withPrimaryKey(String primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    /**
     * Get the secondaryKey property: A base64-encoded 256-bit secondary key for signing and validating the SAS token.
     * 
     * @return the secondaryKey value.
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }

    /**
     * Set the secondaryKey property: A base64-encoded 256-bit secondary key for signing and validating the SAS token.
     * 
     * @param secondaryKey the secondaryKey value to set.
     * @return the AccessKeysInner object itself.
     */
    public AccessKeysInner withSecondaryKey(String secondaryKey) {
        this.secondaryKey = secondaryKey;
        return this;
    }

    /**
     * Get the keyName property: A string that describes the authorization rule.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: A string that describes the authorization rule.
     * 
     * @param keyName the keyName value to set.
     * @return the AccessKeysInner object itself.
     */
    public AccessKeysInner withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("primaryConnectionString", this.primaryConnectionString);
        jsonWriter.writeStringField("secondaryConnectionString", this.secondaryConnectionString);
        jsonWriter.writeStringField("primaryKey", this.primaryKey);
        jsonWriter.writeStringField("secondaryKey", this.secondaryKey);
        jsonWriter.writeStringField("keyName", this.keyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessKeysInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessKeysInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessKeysInner.
     */
    public static AccessKeysInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessKeysInner deserializedAccessKeysInner = new AccessKeysInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("primaryConnectionString".equals(fieldName)) {
                    deserializedAccessKeysInner.primaryConnectionString = reader.getString();
                } else if ("secondaryConnectionString".equals(fieldName)) {
                    deserializedAccessKeysInner.secondaryConnectionString = reader.getString();
                } else if ("primaryKey".equals(fieldName)) {
                    deserializedAccessKeysInner.primaryKey = reader.getString();
                } else if ("secondaryKey".equals(fieldName)) {
                    deserializedAccessKeysInner.secondaryKey = reader.getString();
                } else if ("keyName".equals(fieldName)) {
                    deserializedAccessKeysInner.keyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessKeysInner;
        });
    }
}
