/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.relay.v2017_04_01.implementation;

import com.microsoft.azure.management.relay.v2017_04_01.HybridConnection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;

class HybridConnectionImpl extends CreatableUpdatableImpl<HybridConnection, HybridConnectionInner, HybridConnectionImpl> implements HybridConnection, HybridConnection.Definition, HybridConnection.Update {
    private final RelayManager manager;
    private String resourceGroupName;
    private String namespaceName;
    private String hybridConnectionName;

    HybridConnectionImpl(String name, RelayManager manager) {
        super(name, new HybridConnectionInner());
        this.manager = manager;
        // Set resource name
        this.hybridConnectionName = name;
        //
    }

    HybridConnectionImpl(HybridConnectionInner inner, RelayManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.hybridConnectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.namespaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "namespaces");
        this.hybridConnectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "hybridConnections");
        //
    }

    @Override
    public RelayManager manager() {
        return this.manager;
    }

    @Override
    public Observable<HybridConnection> createResourceAsync() {
        HybridConnectionsInner client = this.manager().inner().hybridConnections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.namespaceName, this.hybridConnectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<HybridConnection> updateResourceAsync() {
        HybridConnectionsInner client = this.manager().inner().hybridConnections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.namespaceName, this.hybridConnectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<HybridConnectionInner> getInnerAsync() {
        HybridConnectionsInner client = this.manager().inner().hybridConnections();
        return client.getAsync(this.resourceGroupName, this.namespaceName, this.hybridConnectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime createdAt() {
        return this.inner().createdAt();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Integer listenerCount() {
        return this.inner().listenerCount();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Boolean requiresClientAuthorization() {
        return this.inner().requiresClientAuthorization();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DateTime updatedAt() {
        return this.inner().updatedAt();
    }

    @Override
    public String userMetadata() {
        return this.inner().userMetadata();
    }

    @Override
    public HybridConnectionImpl withExistingNamespace(String resourceGroupName, String namespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.namespaceName = namespaceName;
        return this;
    }

    @Override
    public HybridConnectionImpl withRequiresClientAuthorization(Boolean requiresClientAuthorization) {
        this.inner().withRequiresClientAuthorization(requiresClientAuthorization);
        return this;
    }

    @Override
    public HybridConnectionImpl withUserMetadata(String userMetadata) {
        this.inner().withUserMetadata(userMetadata);
        return this;
    }

}
