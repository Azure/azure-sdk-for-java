// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dns.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dns.models.ZoneType;
import java.io.IOException;
import java.util.List;

/**
 * Represents the properties of the zone.
 */
@Fluent
public final class ZoneProperties implements JsonSerializable<ZoneProperties> {
    /*
     * The maximum number of record sets that can be created in this DNS zone. This is a read-only property and any
     * attempt to set this value will be ignored.
     */
    private Long maxNumberOfRecordSets;

    /*
     * The maximum number of records per record set that can be created in this DNS zone. This is a read-only property
     * and any attempt to set this value will be ignored.
     */
    private Long maxNumberOfRecordsPerRecordSet;

    /*
     * The current number of record sets in this DNS zone. This is a read-only property and any attempt to set this
     * value will be ignored.
     */
    private Long numberOfRecordSets;

    /*
     * The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be
     * ignored.
     */
    private List<String> nameServers;

    /*
     * The type of this DNS zone (Public or Private).
     */
    private ZoneType zoneType;

    /*
     * A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType
     * is Private.
     */
    private List<SubResource> registrationVirtualNetworks;

    /*
     * A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is
     * Private.
     */
    private List<SubResource> resolutionVirtualNetworks;

    /**
     * Creates an instance of ZoneProperties class.
     */
    public ZoneProperties() {
    }

    /**
     * Get the maxNumberOfRecordSets property: The maximum number of record sets that can be created in this DNS zone.
     * This is a read-only property and any attempt to set this value will be ignored.
     * 
     * @return the maxNumberOfRecordSets value.
     */
    public Long maxNumberOfRecordSets() {
        return this.maxNumberOfRecordSets;
    }

    /**
     * Get the maxNumberOfRecordsPerRecordSet property: The maximum number of records per record set that can be created
     * in this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
     * 
     * @return the maxNumberOfRecordsPerRecordSet value.
     */
    public Long maxNumberOfRecordsPerRecordSet() {
        return this.maxNumberOfRecordsPerRecordSet;
    }

    /**
     * Get the numberOfRecordSets property: The current number of record sets in this DNS zone. This is a read-only
     * property and any attempt to set this value will be ignored.
     * 
     * @return the numberOfRecordSets value.
     */
    public Long numberOfRecordSets() {
        return this.numberOfRecordSets;
    }

    /**
     * Get the nameServers property: The name servers for this DNS zone. This is a read-only property and any attempt to
     * set this value will be ignored.
     * 
     * @return the nameServers value.
     */
    public List<String> nameServers() {
        return this.nameServers;
    }

    /**
     * Get the zoneType property: The type of this DNS zone (Public or Private).
     * 
     * @return the zoneType value.
     */
    public ZoneType zoneType() {
        return this.zoneType;
    }

    /**
     * Set the zoneType property: The type of this DNS zone (Public or Private).
     * 
     * @param zoneType the zoneType value to set.
     * @return the ZoneProperties object itself.
     */
    public ZoneProperties withZoneType(ZoneType zoneType) {
        this.zoneType = zoneType;
        return this;
    }

    /**
     * Get the registrationVirtualNetworks property: A list of references to virtual networks that register hostnames in
     * this DNS zone. This is a only when ZoneType is Private.
     * 
     * @return the registrationVirtualNetworks value.
     */
    public List<SubResource> registrationVirtualNetworks() {
        return this.registrationVirtualNetworks;
    }

    /**
     * Set the registrationVirtualNetworks property: A list of references to virtual networks that register hostnames in
     * this DNS zone. This is a only when ZoneType is Private.
     * 
     * @param registrationVirtualNetworks the registrationVirtualNetworks value to set.
     * @return the ZoneProperties object itself.
     */
    public ZoneProperties withRegistrationVirtualNetworks(List<SubResource> registrationVirtualNetworks) {
        this.registrationVirtualNetworks = registrationVirtualNetworks;
        return this;
    }

    /**
     * Get the resolutionVirtualNetworks property: A list of references to virtual networks that resolve records in this
     * DNS zone. This is a only when ZoneType is Private.
     * 
     * @return the resolutionVirtualNetworks value.
     */
    public List<SubResource> resolutionVirtualNetworks() {
        return this.resolutionVirtualNetworks;
    }

    /**
     * Set the resolutionVirtualNetworks property: A list of references to virtual networks that resolve records in this
     * DNS zone. This is a only when ZoneType is Private.
     * 
     * @param resolutionVirtualNetworks the resolutionVirtualNetworks value to set.
     * @return the ZoneProperties object itself.
     */
    public ZoneProperties withResolutionVirtualNetworks(List<SubResource> resolutionVirtualNetworks) {
        this.resolutionVirtualNetworks = resolutionVirtualNetworks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("zoneType", this.zoneType == null ? null : this.zoneType.toString());
        jsonWriter.writeArrayField("registrationVirtualNetworks", this.registrationVirtualNetworks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("resolutionVirtualNetworks", this.resolutionVirtualNetworks,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ZoneProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ZoneProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ZoneProperties.
     */
    public static ZoneProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ZoneProperties deserializedZoneProperties = new ZoneProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxNumberOfRecordSets".equals(fieldName)) {
                    deserializedZoneProperties.maxNumberOfRecordSets = reader.getNullable(JsonReader::getLong);
                } else if ("maxNumberOfRecordsPerRecordSet".equals(fieldName)) {
                    deserializedZoneProperties.maxNumberOfRecordsPerRecordSet = reader.getNullable(JsonReader::getLong);
                } else if ("numberOfRecordSets".equals(fieldName)) {
                    deserializedZoneProperties.numberOfRecordSets = reader.getNullable(JsonReader::getLong);
                } else if ("nameServers".equals(fieldName)) {
                    List<String> nameServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedZoneProperties.nameServers = nameServers;
                } else if ("zoneType".equals(fieldName)) {
                    deserializedZoneProperties.zoneType = ZoneType.fromString(reader.getString());
                } else if ("registrationVirtualNetworks".equals(fieldName)) {
                    List<SubResource> registrationVirtualNetworks
                        = reader.readArray(reader1 -> SubResource.fromJson(reader1));
                    deserializedZoneProperties.registrationVirtualNetworks = registrationVirtualNetworks;
                } else if ("resolutionVirtualNetworks".equals(fieldName)) {
                    List<SubResource> resolutionVirtualNetworks
                        = reader.readArray(reader1 -> SubResource.fromJson(reader1));
                    deserializedZoneProperties.resolutionVirtualNetworks = resolutionVirtualNetworks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedZoneProperties;
        });
    }
}
