// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.dns.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.CloudException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.management.dns.RecordType;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in RecordSets. */
public final class RecordSetsInner {
    /** The proxy service used to perform REST calls. */
    private final RecordSetsService service;

    /** The service client containing this operation class. */
    private final DnsManagementClientImpl client;

    /**
     * Initializes an instance of RecordSetsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    RecordSetsInner(DnsManagementClientImpl client) {
        this.service =
            RestProxy.create(RecordSetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DnsManagementClientRecordSets to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DnsManagementClientR")
    private interface RecordSetsService {
        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetInner>> update(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("zoneName") String zoneName,
            @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName,
            @PathParam("recordType") RecordType recordType,
            @HeaderParam("If-Match") String ifMatch,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") RecordSetInner parameters,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetInner>> createOrUpdate(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("zoneName") String zoneName,
            @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName,
            @PathParam("recordType") RecordType recordType,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") RecordSetInner parameters,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("zoneName") String zoneName,
            @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName,
            @PathParam("recordType") RecordType recordType,
            @HeaderParam("If-Match") String ifMatch,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetInner>> get(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("zoneName") String zoneName,
            @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName,
            @PathParam("recordType") RecordType recordType,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/dnsZones/{zoneName}/{recordType}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByType(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("zoneName") String zoneName,
            @PathParam("recordType") RecordType recordType,
            @QueryParam("$top") Integer top,
            @QueryParam("$recordsetnamesuffix") String recordsetnamesuffix,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/dnsZones/{zoneName}/recordsets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByDnsZone(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("zoneName") String zoneName,
            @QueryParam("$top") Integer top,
            @QueryParam("$recordsetnamesuffix") String recordsetnamesuffix,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/dnsZones/{zoneName}/all")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listAllByDnsZone(
            @HostParam("$host") String host,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("zoneName") String zoneName,
            @QueryParam("$top") Integer top,
            @QueryParam("$recordsetnamesuffix") String recordSetNameSuffix,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByTypeNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByDnsZoneNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listAllByDnsZoneNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch The etag of the record set. Omit this value to always overwrite the current record set. Specify
     *     the last-seen etag value to prevent accidentally overwriting concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecordSetInner>> updateWithResponseAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters,
        String ifMatch) {
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getHost(),
                            resourceGroupName,
                            zoneName,
                            relativeRecordSetName,
                            recordType,
                            ifMatch,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            parameters,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch The etag of the record set. Omit this value to always overwrite the current record set. Specify
     *     the last-seen etag value to prevent accidentally overwriting concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> updateAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters,
        String ifMatch) {
        return updateWithResponseAsync(
                resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch)
            .flatMap(
                (SimpleResponse<RecordSetInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> updateAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters) {
        final String ifMatch = null;
        final Context context = null;
        return updateWithResponseAsync(
                resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch)
            .flatMap(
                (SimpleResponse<RecordSetInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch The etag of the record set. Omit this value to always overwrite the current record set. Specify
     *     the last-seen etag value to prevent accidentally overwriting concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner update(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters,
        String ifMatch) {
        return updateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch).block();
    }

    /**
     * Updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner update(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters) {
        final String ifMatch = null;
        final Context context = null;
        return updateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch).block();
    }

    /**
     * Creates or updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated but not
     *     created (they are created when the DNS zone is created).
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch The etag of the record set. Omit this value to always overwrite the current record set. Specify
     *     the last-seen etag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing record
     *     set. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecordSetInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters,
        String ifMatch,
        String ifNoneMatch) {
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getHost(),
                            resourceGroupName,
                            zoneName,
                            relativeRecordSetName,
                            recordType,
                            ifMatch,
                            ifNoneMatch,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            parameters,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates or updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated but not
     *     created (they are created when the DNS zone is created).
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch The etag of the record set. Omit this value to always overwrite the current record set. Specify
     *     the last-seen etag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing record
     *     set. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> createOrUpdateAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters,
        String ifMatch,
        String ifNoneMatch) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch)
            .flatMap(
                (SimpleResponse<RecordSetInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates or updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated but not
     *     created (they are created when the DNS zone is created).
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> createOrUpdateAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final Context context = null;
        return createOrUpdateWithResponseAsync(
                resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch)
            .flatMap(
                (SimpleResponse<RecordSetInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates or updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated but not
     *     created (they are created when the DNS zone is created).
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch The etag of the record set. Omit this value to always overwrite the current record set. Specify
     *     the last-seen etag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing record
     *     set. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner createOrUpdate(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters,
        String ifMatch,
        String ifNoneMatch) {
        return createOrUpdateAsync(
                resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch)
            .block();
    }

    /**
     * Creates or updates a record set within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated but not
     *     created (they are created when the DNS zone is created).
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS record set (a collection of DNS records with the same name and type).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner createOrUpdate(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        RecordSetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final Context context = null;
        return createOrUpdateAsync(
                resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch)
            .block();
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are
     *     deleted when the DNS zone is deleted).
     * @param ifMatch The etag of the record set. Omit this value to always delete the current record set. Specify the
     *     last-seen etag value to prevent accidentally deleting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        String ifMatch) {
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getHost(),
                            resourceGroupName,
                            zoneName,
                            relativeRecordSetName,
                            recordType,
                            ifMatch,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are
     *     deleted when the DNS zone is deleted).
     * @param ifMatch The etag of the record set. Omit this value to always delete the current record set. Specify the
     *     last-seen etag value to prevent accidentally deleting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        String ifMatch) {
        return deleteWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are
     *     deleted when the DNS zone is deleted).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(
        String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        final String ifMatch = null;
        final Context context = null;
        return deleteWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are
     *     deleted when the DNS zone is deleted).
     * @param ifMatch The etag of the record set. Omit this value to always delete the current record set. Specify the
     *     last-seen etag value to prevent accidentally deleting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String zoneName,
        String relativeRecordSetName,
        RecordType recordType,
        String ifMatch) {
        deleteAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch).block();
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are
     *     deleted when the DNS zone is deleted).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        final String ifMatch = null;
        final Context context = null;
        deleteAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch).block();
    }

    /**
     * Gets a record set.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a record set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecordSetInner>> getWithResponseAsync(
        String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getHost(),
                            resourceGroupName,
                            zoneName,
                            relativeRecordSetName,
                            recordType,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets a record set.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a record set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> getAsync(
        String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return getWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType)
            .flatMap(
                (SimpleResponse<RecordSetInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a record set.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a record set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner get(
        String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return getAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType).block();
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordsetnamesuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByTypeSinglePageAsync(
        String resourceGroupName, String zoneName, RecordType recordType, Integer top, String recordsetnamesuffix) {
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByType(
                            this.client.getHost(),
                            resourceGroupName,
                            zoneName,
                            recordType,
                            top,
                            recordsetnamesuffix,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            context))
            .<PagedResponse<RecordSetInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordsetnamesuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByTypeAsync(
        String resourceGroupName, String zoneName, RecordType recordType, Integer top, String recordsetnamesuffix) {
        return new PagedFlux<>(
            () -> listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix),
            nextLink -> listByTypeNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByTypeAsync(String resourceGroupName, String zoneName, RecordType recordType) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        final Context context = null;
        return new PagedFlux<>(
            () -> listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix),
            nextLink -> listByTypeNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordsetnamesuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByType(
        String resourceGroupName, String zoneName, RecordType recordType, Integer top, String recordsetnamesuffix) {
        return new PagedIterable<>(listByTypeAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByType(String resourceGroupName, String zoneName, RecordType recordType) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        final Context context = null;
        return new PagedIterable<>(listByTypeAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordsetnamesuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByDnsZoneSinglePageAsync(
        String resourceGroupName, String zoneName, Integer top, String recordsetnamesuffix) {
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByDnsZone(
                            this.client.getHost(),
                            resourceGroupName,
                            zoneName,
                            top,
                            recordsetnamesuffix,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            context))
            .<PagedResponse<RecordSetInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordsetnamesuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByDnsZoneAsync(
        String resourceGroupName, String zoneName, Integer top, String recordsetnamesuffix) {
        return new PagedFlux<>(
            () -> listByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordsetnamesuffix),
            nextLink -> listByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByDnsZoneAsync(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        final Context context = null;
        return new PagedFlux<>(
            () -> listByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordsetnamesuffix),
            nextLink -> listByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordsetnamesuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByDnsZone(
        String resourceGroupName, String zoneName, Integer top, String recordsetnamesuffix) {
        return new PagedIterable<>(listByDnsZoneAsync(resourceGroupName, zoneName, top, recordsetnamesuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByDnsZone(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        final Context context = null;
        return new PagedIterable<>(listByDnsZoneAsync(resourceGroupName, zoneName, top, recordsetnamesuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordSetNameSuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listAllByDnsZoneSinglePageAsync(
        String resourceGroupName, String zoneName, Integer top, String recordSetNameSuffix) {
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listAllByDnsZone(
                            this.client.getHost(),
                            resourceGroupName,
                            zoneName,
                            top,
                            recordSetNameSuffix,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            context))
            .<PagedResponse<RecordSetInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordSetNameSuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listAllByDnsZoneAsync(
        String resourceGroupName, String zoneName, Integer top, String recordSetNameSuffix) {
        return new PagedFlux<>(
            () -> listAllByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordSetNameSuffix),
            nextLink -> listAllByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listAllByDnsZoneAsync(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordSetNameSuffix = null;
        final Context context = null;
        return new PagedFlux<>(
            () -> listAllByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordSetNameSuffix),
            nextLink -> listAllByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param top The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param recordSetNameSuffix The suffix label of the record set name that has to be used to filter the record set
     *     enumerations. If this parameter is specified, Enumeration will return only records that end with
     *     .&lt;recordSetNameSuffix&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listAllByDnsZone(
        String resourceGroupName, String zoneName, Integer top, String recordSetNameSuffix) {
        return new PagedIterable<>(listAllByDnsZoneAsync(resourceGroupName, zoneName, top, recordSetNameSuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listAllByDnsZone(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordSetNameSuffix = null;
        final Context context = null;
        return new PagedIterable<>(listAllByDnsZoneAsync(resourceGroupName, zoneName, top, recordSetNameSuffix));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByTypeNextSinglePageAsync(String nextLink) {
        return FluxUtil
            .withContext(context -> service.listByTypeNext(nextLink, context))
            .<PagedResponse<RecordSetInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByDnsZoneNextSinglePageAsync(String nextLink) {
        return FluxUtil
            .withContext(context -> service.listByDnsZoneNext(nextLink, context))
            .<PagedResponse<RecordSetInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to a record set List operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listAllByDnsZoneNextSinglePageAsync(String nextLink) {
        return FluxUtil
            .withContext(context -> service.listAllByDnsZoneNext(nextLink, context))
            .<PagedResponse<RecordSetInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }
}
