// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.dns.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.CloudException;
import com.azure.management.dns.RecordType;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * RecordSets.
 */
public final class RecordSetsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private RecordSetsService service;

    /**
     * The service client containing this operation class.
     */
    private DnsManagementClientImpl client;

    /**
     * Initializes an instance of RecordSetsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RecordSetsInner(DnsManagementClientImpl client) {
        this.service = RestProxy.create(RecordSetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * DnsManagementClientRecordSets to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DnsManagementClientRecordSets")
    private interface RecordSetsService {
        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetInner>> update(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("zoneName") String zoneName, @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @PathParam("recordType") RecordType recordType, @HeaderParam("If-Match") String ifMatch, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RecordSetInner parameters);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetInner>> createOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("zoneName") String zoneName, @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @PathParam("recordType") RecordType recordType, @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RecordSetInner parameters);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("zoneName") String zoneName, @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @PathParam("recordType") RecordType recordType, @HeaderParam("If-Match") String ifMatch, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetInner>> get(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("zoneName") String zoneName, @PathParam(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @PathParam("recordType") RecordType recordType, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByType(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("zoneName") String zoneName, @PathParam("recordType") RecordType recordType, @QueryParam("$top") Integer top, @QueryParam("$recordsetnamesuffix") String recordsetnamesuffix, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByDnsZone(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("zoneName") String zoneName, @QueryParam("$top") Integer top, @QueryParam("$recordsetnamesuffix") String recordsetnamesuffix, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listAllByDnsZone(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("zoneName") String zoneName, @QueryParam("$top") Integer top, @QueryParam("$recordsetnamesuffix") String recordSetNameSuffix, @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByTypeNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listByDnsZoneNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RecordSetListResultInner>> listAllByDnsZoneNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecordSetInner>> updateWithResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch) {
        return service.update(this.client.getHost(), resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters);
    }

    /**
     * Updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> updateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch) {
        return updateWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch)
            .flatMap((SimpleResponse<RecordSetInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> updateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        final String ifMatch = null;
        return updateWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch)
            .flatMap((SimpleResponse<RecordSetInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner update(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch) {
        return updateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch).block();
    }

    /**
     * Updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner update(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        final String ifMatch = null;
        return updateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch).block();
    }

    /**
     * Creates or updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch 
     * @param ifNoneMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecordSetInner>> createOrUpdateWithResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        return service.createOrUpdate(this.client.getHost(), resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch, ifNoneMatch, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters);
    }

    /**
     * Creates or updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch 
     * @param ifNoneMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> createOrUpdateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        return createOrUpdateWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch)
            .flatMap((SimpleResponse<RecordSetInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Creates or updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> createOrUpdateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return createOrUpdateWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch)
            .flatMap((SimpleResponse<RecordSetInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Creates or updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @param ifMatch 
     * @param ifNoneMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner createOrUpdate(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        return createOrUpdateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch).block();
    }

    /**
     * Creates or updates a record set within a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param parameters Describes a DNS record set (a collection of DNS records with the same name and type).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner createOrUpdate(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return createOrUpdateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch).block();
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param ifMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, String ifMatch) {
        return service.delete(this.client.getHost(), resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch, this.client.getApiVersion(), this.client.getSubscriptionId());
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param ifMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, String ifMatch) {
        return deleteWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        final String ifMatch = null;
        return deleteWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @param ifMatch 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, String ifMatch) {
        deleteAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch).block();
    }

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        final String ifMatch = null;
        deleteAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch).block();
    }

    /**
     * Gets a record set.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecordSetInner>> getWithResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return service.get(this.client.getHost(), resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.getApiVersion(), this.client.getSubscriptionId());
    }

    /**
     * Gets a record set.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecordSetInner> getAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return getWithResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType)
            .flatMap((SimpleResponse<RecordSetInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets a record set.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param relativeRecordSetName 
     * @param recordType 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecordSetInner get(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return getAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType).block();
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param recordType 
     * @param top 
     * @param recordsetnamesuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByTypeSinglePageAsync(String resourceGroupName, String zoneName, RecordType recordType, Integer top, String recordsetnamesuffix) {
        return service.listByType(this.client.getHost(), resourceGroupName, zoneName, recordType, top, recordsetnamesuffix, this.client.getApiVersion(), this.client.getSubscriptionId())
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param recordType 
     * @param top 
     * @param recordsetnamesuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByTypeAsync(String resourceGroupName, String zoneName, RecordType recordType, Integer top, String recordsetnamesuffix) {
        return new PagedFlux<>(
            () -> listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix),
            nextLink -> listByTypeNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param recordType 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByTypeAsync(String resourceGroupName, String zoneName, RecordType recordType) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        return new PagedFlux<>(
            () -> listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix),
            nextLink -> listByTypeNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param recordType 
     * @param top 
     * @param recordsetnamesuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByType(String resourceGroupName, String zoneName, RecordType recordType, Integer top, String recordsetnamesuffix) {
        return new PagedIterable<>(listByTypeAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix));
    }

    /**
     * Lists the record sets of a specified type in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param recordType 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByType(String resourceGroupName, String zoneName, RecordType recordType) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        return new PagedIterable<>(listByTypeAsync(resourceGroupName, zoneName, recordType, top, recordsetnamesuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param top 
     * @param recordsetnamesuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByDnsZoneSinglePageAsync(String resourceGroupName, String zoneName, Integer top, String recordsetnamesuffix) {
        return service.listByDnsZone(this.client.getHost(), resourceGroupName, zoneName, top, recordsetnamesuffix, this.client.getApiVersion(), this.client.getSubscriptionId())
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param top 
     * @param recordsetnamesuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByDnsZoneAsync(String resourceGroupName, String zoneName, Integer top, String recordsetnamesuffix) {
        return new PagedFlux<>(
            () -> listByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordsetnamesuffix),
            nextLink -> listByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listByDnsZoneAsync(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        return new PagedFlux<>(
            () -> listByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordsetnamesuffix),
            nextLink -> listByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param top 
     * @param recordsetnamesuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByDnsZone(String resourceGroupName, String zoneName, Integer top, String recordsetnamesuffix) {
        return new PagedIterable<>(listByDnsZoneAsync(resourceGroupName, zoneName, top, recordsetnamesuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listByDnsZone(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordsetnamesuffix = null;
        return new PagedIterable<>(listByDnsZoneAsync(resourceGroupName, zoneName, top, recordsetnamesuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param top 
     * @param recordSetNameSuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listAllByDnsZoneSinglePageAsync(String resourceGroupName, String zoneName, Integer top, String recordSetNameSuffix) {
        return service.listAllByDnsZone(this.client.getHost(), resourceGroupName, zoneName, top, recordSetNameSuffix, this.client.getApiVersion(), this.client.getSubscriptionId())
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param top 
     * @param recordSetNameSuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listAllByDnsZoneAsync(String resourceGroupName, String zoneName, Integer top, String recordSetNameSuffix) {
        return new PagedFlux<>(
            () -> listAllByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordSetNameSuffix),
            nextLink -> listAllByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecordSetInner> listAllByDnsZoneAsync(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordSetNameSuffix = null;
        return new PagedFlux<>(
            () -> listAllByDnsZoneSinglePageAsync(resourceGroupName, zoneName, top, recordSetNameSuffix),
            nextLink -> listAllByDnsZoneNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @param top 
     * @param recordSetNameSuffix 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listAllByDnsZone(String resourceGroupName, String zoneName, Integer top, String recordSetNameSuffix) {
        return new PagedIterable<>(listAllByDnsZoneAsync(resourceGroupName, zoneName, top, recordSetNameSuffix));
    }

    /**
     * Lists all record sets in a DNS zone.
     * 
     * @param resourceGroupName 
     * @param zoneName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecordSetInner> listAllByDnsZone(String resourceGroupName, String zoneName) {
        final Integer top = null;
        final String recordSetNameSuffix = null;
        return new PagedIterable<>(listAllByDnsZoneAsync(resourceGroupName, zoneName, top, recordSetNameSuffix));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByTypeNextSinglePageAsync(String nextLink) {
        return service.listByTypeNext(nextLink)
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listByDnsZoneNextSinglePageAsync(String nextLink) {
        return service.listByDnsZoneNext(nextLink)
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecordSetInner>> listAllByDnsZoneNextSinglePageAsync(String nextLink) {
        return service.listAllByDnsZoneNext(nextLink)
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }
}
