// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Hive Catalog Option.
 */
@Fluent
public final class HiveCatalogOption {
    /*
     * Name of trino catalog which should use specified hive metastore.
     */
    @JsonProperty(value = "catalogName", required = true)
    private String catalogName;

    /*
     * The authentication mode to connect to your Hive metastore database. More details:
     * https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-
     * authorization
     */
    @JsonProperty(value = "metastoreDbConnectionAuthenticationMode")
    private MetastoreDbConnectionAuthenticationMode metastoreDbConnectionAuthenticationMode;

    /*
     * Secret reference name from secretsProfile.secrets containing password for database connection.
     */
    @JsonProperty(value = "metastoreDbConnectionPasswordSecret")
    private String metastoreDbConnectionPasswordSecret;

    /*
     * Connection string for hive metastore database.
     */
    @JsonProperty(value = "metastoreDbConnectionURL", required = true)
    private String metastoreDbConnectionUrl;

    /*
     * User name for database connection.
     */
    @JsonProperty(value = "metastoreDbConnectionUserName")
    private String metastoreDbConnectionUsername;

    /*
     * Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More
     * details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
     */
    @JsonProperty(value = "metastoreWarehouseDir", required = true)
    private String metastoreWarehouseDir;

    /**
     * Creates an instance of HiveCatalogOption class.
     */
    public HiveCatalogOption() {
    }

    /**
     * Get the catalogName property: Name of trino catalog which should use specified hive metastore.
     * 
     * @return the catalogName value.
     */
    public String catalogName() {
        return this.catalogName;
    }

    /**
     * Set the catalogName property: Name of trino catalog which should use specified hive metastore.
     * 
     * @param catalogName the catalogName value to set.
     * @return the HiveCatalogOption object itself.
     */
    public HiveCatalogOption withCatalogName(String catalogName) {
        this.catalogName = catalogName;
        return this;
    }

    /**
     * Get the metastoreDbConnectionAuthenticationMode property: The authentication mode to connect to your Hive
     * metastore database. More details:
     * https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization.
     * 
     * @return the metastoreDbConnectionAuthenticationMode value.
     */
    public MetastoreDbConnectionAuthenticationMode metastoreDbConnectionAuthenticationMode() {
        return this.metastoreDbConnectionAuthenticationMode;
    }

    /**
     * Set the metastoreDbConnectionAuthenticationMode property: The authentication mode to connect to your Hive
     * metastore database. More details:
     * https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization.
     * 
     * @param metastoreDbConnectionAuthenticationMode the metastoreDbConnectionAuthenticationMode value to set.
     * @return the HiveCatalogOption object itself.
     */
    public HiveCatalogOption withMetastoreDbConnectionAuthenticationMode(
        MetastoreDbConnectionAuthenticationMode metastoreDbConnectionAuthenticationMode) {
        this.metastoreDbConnectionAuthenticationMode = metastoreDbConnectionAuthenticationMode;
        return this;
    }

    /**
     * Get the metastoreDbConnectionPasswordSecret property: Secret reference name from secretsProfile.secrets
     * containing password for database connection.
     * 
     * @return the metastoreDbConnectionPasswordSecret value.
     */
    public String metastoreDbConnectionPasswordSecret() {
        return this.metastoreDbConnectionPasswordSecret;
    }

    /**
     * Set the metastoreDbConnectionPasswordSecret property: Secret reference name from secretsProfile.secrets
     * containing password for database connection.
     * 
     * @param metastoreDbConnectionPasswordSecret the metastoreDbConnectionPasswordSecret value to set.
     * @return the HiveCatalogOption object itself.
     */
    public HiveCatalogOption withMetastoreDbConnectionPasswordSecret(String metastoreDbConnectionPasswordSecret) {
        this.metastoreDbConnectionPasswordSecret = metastoreDbConnectionPasswordSecret;
        return this;
    }

    /**
     * Get the metastoreDbConnectionUrl property: Connection string for hive metastore database.
     * 
     * @return the metastoreDbConnectionUrl value.
     */
    public String metastoreDbConnectionUrl() {
        return this.metastoreDbConnectionUrl;
    }

    /**
     * Set the metastoreDbConnectionUrl property: Connection string for hive metastore database.
     * 
     * @param metastoreDbConnectionUrl the metastoreDbConnectionUrl value to set.
     * @return the HiveCatalogOption object itself.
     */
    public HiveCatalogOption withMetastoreDbConnectionUrl(String metastoreDbConnectionUrl) {
        this.metastoreDbConnectionUrl = metastoreDbConnectionUrl;
        return this;
    }

    /**
     * Get the metastoreDbConnectionUsername property: User name for database connection.
     * 
     * @return the metastoreDbConnectionUsername value.
     */
    public String metastoreDbConnectionUsername() {
        return this.metastoreDbConnectionUsername;
    }

    /**
     * Set the metastoreDbConnectionUsername property: User name for database connection.
     * 
     * @param metastoreDbConnectionUsername the metastoreDbConnectionUsername value to set.
     * @return the HiveCatalogOption object itself.
     */
    public HiveCatalogOption withMetastoreDbConnectionUsername(String metastoreDbConnectionUsername) {
        this.metastoreDbConnectionUsername = metastoreDbConnectionUsername;
        return this;
    }

    /**
     * Get the metastoreWarehouseDir property: Metastore root directory URI, format:
     * abfs[s]://&lt;container&gt;@&lt;account_name&gt;.dfs.core.windows.net/&lt;path&gt;. More details:
     * https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri.
     * 
     * @return the metastoreWarehouseDir value.
     */
    public String metastoreWarehouseDir() {
        return this.metastoreWarehouseDir;
    }

    /**
     * Set the metastoreWarehouseDir property: Metastore root directory URI, format:
     * abfs[s]://&lt;container&gt;@&lt;account_name&gt;.dfs.core.windows.net/&lt;path&gt;. More details:
     * https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri.
     * 
     * @param metastoreWarehouseDir the metastoreWarehouseDir value to set.
     * @return the HiveCatalogOption object itself.
     */
    public HiveCatalogOption withMetastoreWarehouseDir(String metastoreWarehouseDir) {
        this.metastoreWarehouseDir = metastoreWarehouseDir;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (catalogName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property catalogName in model HiveCatalogOption"));
        }
        if (metastoreDbConnectionUrl() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property metastoreDbConnectionUrl in model HiveCatalogOption"));
        }
        if (metastoreWarehouseDir() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property metastoreWarehouseDir in model HiveCatalogOption"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HiveCatalogOption.class);
}
