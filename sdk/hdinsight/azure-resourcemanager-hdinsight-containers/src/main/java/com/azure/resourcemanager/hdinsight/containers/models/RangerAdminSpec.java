// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specification for the Ranger Admin service.
 */
@Fluent
public final class RangerAdminSpec implements JsonSerializable<RangerAdminSpec> {
    /*
     * List of usernames that should be marked as ranger admins. These usernames should match the user principal name
     * (UPN) of the respective AAD users.
     */
    private List<String> admins;

    /*
     * The database property.
     */
    private RangerAdminSpecDatabase database;

    /**
     * Creates an instance of RangerAdminSpec class.
     */
    public RangerAdminSpec() {
    }

    /**
     * Get the admins property: List of usernames that should be marked as ranger admins. These usernames should match
     * the user principal name (UPN) of the respective AAD users.
     * 
     * @return the admins value.
     */
    public List<String> admins() {
        return this.admins;
    }

    /**
     * Set the admins property: List of usernames that should be marked as ranger admins. These usernames should match
     * the user principal name (UPN) of the respective AAD users.
     * 
     * @param admins the admins value to set.
     * @return the RangerAdminSpec object itself.
     */
    public RangerAdminSpec withAdmins(List<String> admins) {
        this.admins = admins;
        return this;
    }

    /**
     * Get the database property: The database property.
     * 
     * @return the database value.
     */
    public RangerAdminSpecDatabase database() {
        return this.database;
    }

    /**
     * Set the database property: The database property.
     * 
     * @param database the database value to set.
     * @return the RangerAdminSpec object itself.
     */
    public RangerAdminSpec withDatabase(RangerAdminSpecDatabase database) {
        this.database = database;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (admins() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property admins in model RangerAdminSpec"));
        }
        if (database() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property database in model RangerAdminSpec"));
        } else {
            database().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RangerAdminSpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("admins", this.admins, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("database", this.database);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RangerAdminSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RangerAdminSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RangerAdminSpec.
     */
    public static RangerAdminSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RangerAdminSpec deserializedRangerAdminSpec = new RangerAdminSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("admins".equals(fieldName)) {
                    List<String> admins = reader.readArray(reader1 -> reader1.getString());
                    deserializedRangerAdminSpec.admins = admins;
                } else if ("database".equals(fieldName)) {
                    deserializedRangerAdminSpec.database = RangerAdminSpecDatabase.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRangerAdminSpec;
        });
    }
}
