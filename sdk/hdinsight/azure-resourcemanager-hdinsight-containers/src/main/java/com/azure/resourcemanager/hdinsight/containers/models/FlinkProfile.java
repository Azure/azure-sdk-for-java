// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Flink cluster profile.
 */
@Fluent
public final class FlinkProfile implements JsonSerializable<FlinkProfile> {
    /*
     * The storage profile
     */
    private FlinkStorageProfile storage;

    /*
     * The number of task managers.
     */
    private Integer numReplicas;

    /*
     * Job Manager container/ process CPU and memory requirements
     */
    private ComputeResourceDefinition jobManager;

    /*
     * History Server container/ process CPU and memory requirements
     */
    private ComputeResourceDefinition historyServer;

    /*
     * Task Manager container/ process CPU and memory requirements
     */
    private ComputeResourceDefinition taskManager;

    /*
     * Flink cluster catalog options.
     */
    private FlinkCatalogOptions catalogOptions;

    /*
     * A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum
     * values => Application, Session. Default value is Session
     */
    private DeploymentMode deploymentMode;

    /*
     * Job specifications for flink clusters in application deployment mode. The specification is immutable even if job
     * properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
     */
    private FlinkJobProfile jobSpec;

    /**
     * Creates an instance of FlinkProfile class.
     */
    public FlinkProfile() {
    }

    /**
     * Get the storage property: The storage profile.
     * 
     * @return the storage value.
     */
    public FlinkStorageProfile storage() {
        return this.storage;
    }

    /**
     * Set the storage property: The storage profile.
     * 
     * @param storage the storage value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withStorage(FlinkStorageProfile storage) {
        this.storage = storage;
        return this;
    }

    /**
     * Get the numReplicas property: The number of task managers.
     * 
     * @return the numReplicas value.
     */
    public Integer numReplicas() {
        return this.numReplicas;
    }

    /**
     * Set the numReplicas property: The number of task managers.
     * 
     * @param numReplicas the numReplicas value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withNumReplicas(Integer numReplicas) {
        this.numReplicas = numReplicas;
        return this;
    }

    /**
     * Get the jobManager property: Job Manager container/ process CPU and memory requirements.
     * 
     * @return the jobManager value.
     */
    public ComputeResourceDefinition jobManager() {
        return this.jobManager;
    }

    /**
     * Set the jobManager property: Job Manager container/ process CPU and memory requirements.
     * 
     * @param jobManager the jobManager value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withJobManager(ComputeResourceDefinition jobManager) {
        this.jobManager = jobManager;
        return this;
    }

    /**
     * Get the historyServer property: History Server container/ process CPU and memory requirements.
     * 
     * @return the historyServer value.
     */
    public ComputeResourceDefinition historyServer() {
        return this.historyServer;
    }

    /**
     * Set the historyServer property: History Server container/ process CPU and memory requirements.
     * 
     * @param historyServer the historyServer value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withHistoryServer(ComputeResourceDefinition historyServer) {
        this.historyServer = historyServer;
        return this;
    }

    /**
     * Get the taskManager property: Task Manager container/ process CPU and memory requirements.
     * 
     * @return the taskManager value.
     */
    public ComputeResourceDefinition taskManager() {
        return this.taskManager;
    }

    /**
     * Set the taskManager property: Task Manager container/ process CPU and memory requirements.
     * 
     * @param taskManager the taskManager value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withTaskManager(ComputeResourceDefinition taskManager) {
        this.taskManager = taskManager;
        return this;
    }

    /**
     * Get the catalogOptions property: Flink cluster catalog options.
     * 
     * @return the catalogOptions value.
     */
    public FlinkCatalogOptions catalogOptions() {
        return this.catalogOptions;
    }

    /**
     * Set the catalogOptions property: Flink cluster catalog options.
     * 
     * @param catalogOptions the catalogOptions value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withCatalogOptions(FlinkCatalogOptions catalogOptions) {
        this.catalogOptions = catalogOptions;
        return this;
    }

    /**
     * Get the deploymentMode property: A string property that indicates the deployment mode of Flink cluster. It can
     * have one of the following enum values =&gt; Application, Session. Default value is Session.
     * 
     * @return the deploymentMode value.
     */
    public DeploymentMode deploymentMode() {
        return this.deploymentMode;
    }

    /**
     * Set the deploymentMode property: A string property that indicates the deployment mode of Flink cluster. It can
     * have one of the following enum values =&gt; Application, Session. Default value is Session.
     * 
     * @param deploymentMode the deploymentMode value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withDeploymentMode(DeploymentMode deploymentMode) {
        this.deploymentMode = deploymentMode;
        return this;
    }

    /**
     * Get the jobSpec property: Job specifications for flink clusters in application deployment mode. The specification
     * is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the
     * latest job information.
     * 
     * @return the jobSpec value.
     */
    public FlinkJobProfile jobSpec() {
        return this.jobSpec;
    }

    /**
     * Set the jobSpec property: Job specifications for flink clusters in application deployment mode. The specification
     * is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the
     * latest job information.
     * 
     * @param jobSpec the jobSpec value to set.
     * @return the FlinkProfile object itself.
     */
    public FlinkProfile withJobSpec(FlinkJobProfile jobSpec) {
        this.jobSpec = jobSpec;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property storage in model FlinkProfile"));
        } else {
            storage().validate();
        }
        if (jobManager() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property jobManager in model FlinkProfile"));
        } else {
            jobManager().validate();
        }
        if (historyServer() != null) {
            historyServer().validate();
        }
        if (taskManager() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property taskManager in model FlinkProfile"));
        } else {
            taskManager().validate();
        }
        if (catalogOptions() != null) {
            catalogOptions().validate();
        }
        if (jobSpec() != null) {
            jobSpec().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FlinkProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("storage", this.storage);
        jsonWriter.writeJsonField("jobManager", this.jobManager);
        jsonWriter.writeJsonField("taskManager", this.taskManager);
        jsonWriter.writeNumberField("numReplicas", this.numReplicas);
        jsonWriter.writeJsonField("historyServer", this.historyServer);
        jsonWriter.writeJsonField("catalogOptions", this.catalogOptions);
        jsonWriter.writeStringField("deploymentMode",
            this.deploymentMode == null ? null : this.deploymentMode.toString());
        jsonWriter.writeJsonField("jobSpec", this.jobSpec);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlinkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlinkProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FlinkProfile.
     */
    public static FlinkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlinkProfile deserializedFlinkProfile = new FlinkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storage".equals(fieldName)) {
                    deserializedFlinkProfile.storage = FlinkStorageProfile.fromJson(reader);
                } else if ("jobManager".equals(fieldName)) {
                    deserializedFlinkProfile.jobManager = ComputeResourceDefinition.fromJson(reader);
                } else if ("taskManager".equals(fieldName)) {
                    deserializedFlinkProfile.taskManager = ComputeResourceDefinition.fromJson(reader);
                } else if ("numReplicas".equals(fieldName)) {
                    deserializedFlinkProfile.numReplicas = reader.getNullable(JsonReader::getInt);
                } else if ("historyServer".equals(fieldName)) {
                    deserializedFlinkProfile.historyServer = ComputeResourceDefinition.fromJson(reader);
                } else if ("catalogOptions".equals(fieldName)) {
                    deserializedFlinkProfile.catalogOptions = FlinkCatalogOptions.fromJson(reader);
                } else if ("deploymentMode".equals(fieldName)) {
                    deserializedFlinkProfile.deploymentMode = DeploymentMode.fromString(reader.getString());
                } else if ("jobSpec".equals(fieldName)) {
                    deserializedFlinkProfile.jobSpec = FlinkJobProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlinkProfile;
        });
    }
}
