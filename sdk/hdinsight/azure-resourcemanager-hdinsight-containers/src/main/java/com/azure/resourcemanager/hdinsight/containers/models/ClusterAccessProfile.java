// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster access profile.
 */
@Fluent
public final class ClusterAccessProfile implements JsonSerializable<ClusterAccessProfile> {
    /*
     * Whether to create cluster using private IP instead of public IP. This property must be set at create time.
     */
    private boolean enableInternalIngress;

    /*
     * Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
     */
    private String privateLinkServiceId;

    /**
     * Creates an instance of ClusterAccessProfile class.
     */
    public ClusterAccessProfile() {
    }

    /**
     * Get the enableInternalIngress property: Whether to create cluster using private IP instead of public IP. This
     * property must be set at create time.
     * 
     * @return the enableInternalIngress value.
     */
    public boolean enableInternalIngress() {
        return this.enableInternalIngress;
    }

    /**
     * Set the enableInternalIngress property: Whether to create cluster using private IP instead of public IP. This
     * property must be set at create time.
     * 
     * @param enableInternalIngress the enableInternalIngress value to set.
     * @return the ClusterAccessProfile object itself.
     */
    public ClusterAccessProfile withEnableInternalIngress(boolean enableInternalIngress) {
        this.enableInternalIngress = enableInternalIngress;
        return this;
    }

    /**
     * Get the privateLinkServiceId property: Private link service resource ID. Only when enableInternalIngress is true,
     * this property will be returned.
     * 
     * @return the privateLinkServiceId value.
     */
    public String privateLinkServiceId() {
        return this.privateLinkServiceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableInternalIngress", this.enableInternalIngress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterAccessProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterAccessProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterAccessProfile.
     */
    public static ClusterAccessProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterAccessProfile deserializedClusterAccessProfile = new ClusterAccessProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableInternalIngress".equals(fieldName)) {
                    deserializedClusterAccessProfile.enableInternalIngress = reader.getBoolean();
                } else if ("privateLinkServiceId".equals(fieldName)) {
                    deserializedClusterAccessProfile.privateLinkServiceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterAccessProfile;
        });
    }
}
