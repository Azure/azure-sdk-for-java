// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of cluster upgrade history.
 */
@Fluent
public class ClusterUpgradeHistoryProperties implements JsonSerializable<ClusterUpgradeHistoryProperties> {
    /*
     * Type of upgrade.
     */
    private ClusterUpgradeHistoryType upgradeType
        = ClusterUpgradeHistoryType.fromString("ClusterUpgradeHistoryProperties");

    /*
     * Time when created this upgrade history.
     */
    private String utcTime;

    /*
     * Result of this upgrade.
     */
    private ClusterUpgradeHistoryUpgradeResultType upgradeResult;

    /**
     * Creates an instance of ClusterUpgradeHistoryProperties class.
     */
    public ClusterUpgradeHistoryProperties() {
    }

    /**
     * Get the upgradeType property: Type of upgrade.
     * 
     * @return the upgradeType value.
     */
    public ClusterUpgradeHistoryType upgradeType() {
        return this.upgradeType;
    }

    /**
     * Get the utcTime property: Time when created this upgrade history.
     * 
     * @return the utcTime value.
     */
    public String utcTime() {
        return this.utcTime;
    }

    /**
     * Set the utcTime property: Time when created this upgrade history.
     * 
     * @param utcTime the utcTime value to set.
     * @return the ClusterUpgradeHistoryProperties object itself.
     */
    public ClusterUpgradeHistoryProperties withUtcTime(String utcTime) {
        this.utcTime = utcTime;
        return this;
    }

    /**
     * Get the upgradeResult property: Result of this upgrade.
     * 
     * @return the upgradeResult value.
     */
    public ClusterUpgradeHistoryUpgradeResultType upgradeResult() {
        return this.upgradeResult;
    }

    /**
     * Set the upgradeResult property: Result of this upgrade.
     * 
     * @param upgradeResult the upgradeResult value to set.
     * @return the ClusterUpgradeHistoryProperties object itself.
     */
    public ClusterUpgradeHistoryProperties withUpgradeResult(ClusterUpgradeHistoryUpgradeResultType upgradeResult) {
        this.upgradeResult = upgradeResult;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (utcTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property utcTime in model ClusterUpgradeHistoryProperties"));
        }
        if (upgradeResult() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property upgradeResult in model ClusterUpgradeHistoryProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterUpgradeHistoryProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("utcTime", this.utcTime);
        jsonWriter.writeStringField("upgradeResult", this.upgradeResult == null ? null : this.upgradeResult.toString());
        jsonWriter.writeStringField("upgradeType", this.upgradeType == null ? null : this.upgradeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterUpgradeHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterUpgradeHistoryProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterUpgradeHistoryProperties.
     */
    public static ClusterUpgradeHistoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("upgradeType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ClusterInPlaceUpgradeHistoryProperties".equals(discriminatorValue)) {
                    return ClusterInPlaceUpgradeHistoryProperties.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("HotfixUpgrade".equals(discriminatorValue)) {
                    return ClusterHotfixUpgradeHistoryProperties.fromJson(readerToUse.reset());
                } else if ("HotfixUpgradeRollback".equals(discriminatorValue)) {
                    return ClusterHotfixUpgradeRollbackHistoryProperties.fromJson(readerToUse.reset());
                } else if ("PatchVersionUpgrade".equals(discriminatorValue)) {
                    return ClusterPatchVersionUpgradeHistoryProperties.fromJson(readerToUse.reset());
                } else if ("PatchVersionUpgradeRollback".equals(discriminatorValue)) {
                    return ClusterPatchVersionUpgradeRollbackHistoryProperties.fromJson(readerToUse.reset());
                } else if ("AKSPatchUpgrade".equals(discriminatorValue)) {
                    return ClusterAksPatchUpgradeHistoryProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ClusterUpgradeHistoryProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterUpgradeHistoryProperties deserializedClusterUpgradeHistoryProperties
                = new ClusterUpgradeHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("utcTime".equals(fieldName)) {
                    deserializedClusterUpgradeHistoryProperties.utcTime = reader.getString();
                } else if ("upgradeResult".equals(fieldName)) {
                    deserializedClusterUpgradeHistoryProperties.upgradeResult
                        = ClusterUpgradeHistoryUpgradeResultType.fromString(reader.getString());
                } else if ("upgradeType".equals(fieldName)) {
                    deserializedClusterUpgradeHistoryProperties.upgradeType
                        = ClusterUpgradeHistoryType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterUpgradeHistoryProperties;
        });
    }
}
