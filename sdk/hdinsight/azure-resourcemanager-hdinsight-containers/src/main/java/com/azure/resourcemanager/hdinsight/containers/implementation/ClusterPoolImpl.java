// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterPoolInner;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesAksClusterProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesNetworkProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ProvisioningStatus;
import com.azure.resourcemanager.hdinsight.containers.models.TagsObject;
import java.util.Collections;
import java.util.Map;

public final class ClusterPoolImpl implements ClusterPool, ClusterPool.Definition, ClusterPool.Update {
    private ClusterPoolInner innerObject;

    private final com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningStatus provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String deploymentId() {
        return this.innerModel().deploymentId();
    }

    public String managedResourceGroupName() {
        return this.innerModel().managedResourceGroupName();
    }

    public String aksManagedResourceGroupName() {
        return this.innerModel().aksManagedResourceGroupName();
    }

    public ClusterPoolResourcePropertiesClusterPoolProfile clusterPoolProfile() {
        return this.innerModel().clusterPoolProfile();
    }

    public ClusterPoolResourcePropertiesComputeProfile computeProfile() {
        return this.innerModel().computeProfile();
    }

    public ClusterPoolResourcePropertiesAksClusterProfile aksClusterProfile() {
        return this.innerModel().aksClusterProfile();
    }

    public ClusterPoolResourcePropertiesNetworkProfile networkProfile() {
        return this.innerModel().networkProfile();
    }

    public ClusterPoolResourcePropertiesLogAnalyticsProfile logAnalyticsProfile() {
        return this.innerModel().logAnalyticsProfile();
    }

    public String status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ClusterPoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterPoolName;

    private TagsObject updateClusterPoolTags;

    public ClusterPoolImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ClusterPool create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusterPools()
                .createOrUpdate(resourceGroupName, clusterPoolName, this.innerModel(), Context.NONE);
        return this;
    }

    public ClusterPool create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusterPools()
                .createOrUpdate(resourceGroupName, clusterPoolName, this.innerModel(), context);
        return this;
    }

    ClusterPoolImpl(
        String name, com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager serviceManager) {
        this.innerObject = new ClusterPoolInner();
        this.serviceManager = serviceManager;
        this.clusterPoolName = name;
    }

    public ClusterPoolImpl update() {
        this.updateClusterPoolTags = new TagsObject();
        return this;
    }

    public ClusterPool apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusterPools()
                .updateTags(resourceGroupName, clusterPoolName, updateClusterPoolTags, Context.NONE);
        return this;
    }

    public ClusterPool apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusterPools()
                .updateTags(resourceGroupName, clusterPoolName, updateClusterPoolTags, context);
        return this;
    }

    ClusterPoolImpl(
        ClusterPoolInner innerObject,
        com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterPoolName = Utils.getValueFromIdByName(innerObject.id(), "clusterpools");
    }

    public ClusterPool refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusterPools()
                .getByResourceGroupWithResponse(resourceGroupName, clusterPoolName, Context.NONE)
                .getValue();
        return this;
    }

    public ClusterPool refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusterPools()
                .getByResourceGroupWithResponse(resourceGroupName, clusterPoolName, context)
                .getValue();
        return this;
    }

    public ClusterPoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ClusterPoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ClusterPoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateClusterPoolTags.withTags(tags);
            return this;
        }
    }

    public ClusterPoolImpl withManagedResourceGroupName(String managedResourceGroupName) {
        this.innerModel().withManagedResourceGroupName(managedResourceGroupName);
        return this;
    }

    public ClusterPoolImpl withClusterPoolProfile(ClusterPoolResourcePropertiesClusterPoolProfile clusterPoolProfile) {
        this.innerModel().withClusterPoolProfile(clusterPoolProfile);
        return this;
    }

    public ClusterPoolImpl withComputeProfile(ClusterPoolResourcePropertiesComputeProfile computeProfile) {
        this.innerModel().withComputeProfile(computeProfile);
        return this;
    }

    public ClusterPoolImpl withNetworkProfile(ClusterPoolResourcePropertiesNetworkProfile networkProfile) {
        this.innerModel().withNetworkProfile(networkProfile);
        return this;
    }

    public ClusterPoolImpl withLogAnalyticsProfile(
        ClusterPoolResourcePropertiesLogAnalyticsProfile logAnalyticsProfile) {
        this.innerModel().withLogAnalyticsProfile(logAnalyticsProfile);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
