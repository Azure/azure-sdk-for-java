// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Status of the instance view.
 */
@Fluent
public final class ClusterInstanceViewPropertiesStatus extends ClusterInstanceViewStatus {
    /**
     * Creates an instance of ClusterInstanceViewPropertiesStatus class.
     */
    public ClusterInstanceViewPropertiesStatus() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInstanceViewPropertiesStatus withReady(String ready) {
        super.withReady(ready);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInstanceViewPropertiesStatus withReason(String reason) {
        super.withReason(reason);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInstanceViewPropertiesStatus withMessage(String message) {
        super.withMessage(message);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ready", ready());
        jsonWriter.writeStringField("reason", reason());
        jsonWriter.writeStringField("message", message());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterInstanceViewPropertiesStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterInstanceViewPropertiesStatus if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterInstanceViewPropertiesStatus.
     */
    public static ClusterInstanceViewPropertiesStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterInstanceViewPropertiesStatus deserializedClusterInstanceViewPropertiesStatus
                = new ClusterInstanceViewPropertiesStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ready".equals(fieldName)) {
                    deserializedClusterInstanceViewPropertiesStatus.withReady(reader.getString());
                } else if ("reason".equals(fieldName)) {
                    deserializedClusterInstanceViewPropertiesStatus.withReason(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedClusterInstanceViewPropertiesStatus.withMessage(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterInstanceViewPropertiesStatus;
        });
    }
}
