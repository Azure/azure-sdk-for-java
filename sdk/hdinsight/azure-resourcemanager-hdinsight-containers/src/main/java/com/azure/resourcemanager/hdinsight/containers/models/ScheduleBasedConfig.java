// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Profile of schedule based Autoscale.
 */
@Fluent
public final class ScheduleBasedConfig {
    /*
     * User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
     */
    @JsonProperty(value = "timeZone", required = true)
    private String timeZone;

    /*
     * Setting default node count of current schedule configuration. Default node count specifies the number of nodes
     * which are default when an specified scaling operation is executed (scale up/scale down)
     */
    @JsonProperty(value = "defaultCount", required = true)
    private int defaultCount;

    /*
     * This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set
     * multiple rules within the schedule across days and times (start/end).
     */
    @JsonProperty(value = "schedules", required = true)
    private List<Schedule> schedules;

    /**
     * Creates an instance of ScheduleBasedConfig class.
     */
    public ScheduleBasedConfig() {
    }

    /**
     * Get the timeZone property: User has to specify the timezone on which the schedule has to be set for schedule
     * based autoscale configuration.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: User has to specify the timezone on which the schedule has to be set for schedule
     * based autoscale configuration.
     * 
     * @param timeZone the timeZone value to set.
     * @return the ScheduleBasedConfig object itself.
     */
    public ScheduleBasedConfig withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the defaultCount property: Setting default node count of current schedule configuration. Default node count
     * specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale
     * down).
     * 
     * @return the defaultCount value.
     */
    public int defaultCount() {
        return this.defaultCount;
    }

    /**
     * Set the defaultCount property: Setting default node count of current schedule configuration. Default node count
     * specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale
     * down).
     * 
     * @param defaultCount the defaultCount value to set.
     * @return the ScheduleBasedConfig object itself.
     */
    public ScheduleBasedConfig withDefaultCount(int defaultCount) {
        this.defaultCount = defaultCount;
        return this;
    }

    /**
     * Get the schedules property: This specifies the schedules where scheduled based Autoscale to be enabled, the user
     * has a choice to set multiple rules within the schedule across days and times (start/end).
     * 
     * @return the schedules value.
     */
    public List<Schedule> schedules() {
        return this.schedules;
    }

    /**
     * Set the schedules property: This specifies the schedules where scheduled based Autoscale to be enabled, the user
     * has a choice to set multiple rules within the schedule across days and times (start/end).
     * 
     * @param schedules the schedules value to set.
     * @return the ScheduleBasedConfig object itself.
     */
    public ScheduleBasedConfig withSchedules(List<Schedule> schedules) {
        this.schedules = schedules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (timeZone() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property timeZone in model ScheduleBasedConfig"));
        }
        if (schedules() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property schedules in model ScheduleBasedConfig"));
        } else {
            schedules().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduleBasedConfig.class);
}
