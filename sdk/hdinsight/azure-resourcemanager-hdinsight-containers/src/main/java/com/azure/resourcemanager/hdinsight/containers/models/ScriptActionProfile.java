// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The script action profile.
 */
@Fluent
public final class ScriptActionProfile {
    /*
     * Type of the script action. Supported type is bash scripts.
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /*
     * Script name.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Url of the script file.
     */
    @JsonProperty(value = "url", required = true)
    private String url;

    /*
     * Additional parameters for the script action. It should be space-separated list of arguments required for script
     * execution.
     */
    @JsonProperty(value = "parameters")
    private String parameters;

    /*
     * List of services to apply the script action.
     */
    @JsonProperty(value = "services", required = true)
    private List<String> services;

    /*
     * Timeout duration for the script action in minutes.
     */
    @JsonProperty(value = "timeoutInMinutes")
    private Integer timeoutInMinutes;

    /*
     * Specify if the script should persist on the cluster.
     */
    @JsonProperty(value = "shouldPersist")
    private Boolean shouldPersist;

    /**
     * Creates an instance of ScriptActionProfile class.
     */
    public ScriptActionProfile() {
    }

    /**
     * Get the type property: Type of the script action. Supported type is bash scripts.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the script action. Supported type is bash scripts.
     * 
     * @param type the type value to set.
     * @return the ScriptActionProfile object itself.
     */
    public ScriptActionProfile withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: Script name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Script name.
     * 
     * @param name the name value to set.
     * @return the ScriptActionProfile object itself.
     */
    public ScriptActionProfile withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the url property: Url of the script file.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: Url of the script file.
     * 
     * @param url the url value to set.
     * @return the ScriptActionProfile object itself.
     */
    public ScriptActionProfile withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the parameters property: Additional parameters for the script action. It should be space-separated list of
     * arguments required for script execution.
     * 
     * @return the parameters value.
     */
    public String parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Additional parameters for the script action. It should be space-separated list of
     * arguments required for script execution.
     * 
     * @param parameters the parameters value to set.
     * @return the ScriptActionProfile object itself.
     */
    public ScriptActionProfile withParameters(String parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the services property: List of services to apply the script action.
     * 
     * @return the services value.
     */
    public List<String> services() {
        return this.services;
    }

    /**
     * Set the services property: List of services to apply the script action.
     * 
     * @param services the services value to set.
     * @return the ScriptActionProfile object itself.
     */
    public ScriptActionProfile withServices(List<String> services) {
        this.services = services;
        return this;
    }

    /**
     * Get the timeoutInMinutes property: Timeout duration for the script action in minutes.
     * 
     * @return the timeoutInMinutes value.
     */
    public Integer timeoutInMinutes() {
        return this.timeoutInMinutes;
    }

    /**
     * Set the timeoutInMinutes property: Timeout duration for the script action in minutes.
     * 
     * @param timeoutInMinutes the timeoutInMinutes value to set.
     * @return the ScriptActionProfile object itself.
     */
    public ScriptActionProfile withTimeoutInMinutes(Integer timeoutInMinutes) {
        this.timeoutInMinutes = timeoutInMinutes;
        return this;
    }

    /**
     * Get the shouldPersist property: Specify if the script should persist on the cluster.
     * 
     * @return the shouldPersist value.
     */
    public Boolean shouldPersist() {
        return this.shouldPersist;
    }

    /**
     * Set the shouldPersist property: Specify if the script should persist on the cluster.
     * 
     * @param shouldPersist the shouldPersist value to set.
     * @return the ScriptActionProfile object itself.
     */
    public ScriptActionProfile withShouldPersist(Boolean shouldPersist) {
        this.shouldPersist = shouldPersist;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property type in model ScriptActionProfile"));
        }
        if (name() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property name in model ScriptActionProfile"));
        }
        if (url() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property url in model ScriptActionProfile"));
        }
        if (services() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property services in model ScriptActionProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScriptActionProfile.class);
}
