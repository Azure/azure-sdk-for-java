// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Cluster pool network profile.
 */
@Fluent
public final class ClusterPoolResourcePropertiesNetworkProfile extends ClusterPoolNetworkProfile {
    /**
     * Creates an instance of ClusterPoolResourcePropertiesNetworkProfile class.
     */
    public ClusterPoolResourcePropertiesNetworkProfile() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPoolResourcePropertiesNetworkProfile withSubnetId(String subnetId) {
        super.withSubnetId(subnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPoolResourcePropertiesNetworkProfile withOutboundType(OutboundType outboundType) {
        super.withOutboundType(outboundType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPoolResourcePropertiesNetworkProfile withEnablePrivateApiServer(Boolean enablePrivateApiServer) {
        super.withEnablePrivateApiServer(enablePrivateApiServer);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPoolResourcePropertiesNetworkProfile
        withApiServerAuthorizedIpRanges(List<String> apiServerAuthorizedIpRanges) {
        super.withApiServerAuthorizedIpRanges(apiServerAuthorizedIpRanges);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", subnetId());
        jsonWriter.writeStringField("outboundType", outboundType() == null ? null : outboundType().toString());
        jsonWriter.writeBooleanField("enablePrivateApiServer", enablePrivateApiServer());
        jsonWriter.writeArrayField("apiServerAuthorizedIpRanges", apiServerAuthorizedIpRanges(),
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterPoolResourcePropertiesNetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterPoolResourcePropertiesNetworkProfile if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterPoolResourcePropertiesNetworkProfile.
     */
    public static ClusterPoolResourcePropertiesNetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterPoolResourcePropertiesNetworkProfile deserializedClusterPoolResourcePropertiesNetworkProfile
                = new ClusterPoolResourcePropertiesNetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedClusterPoolResourcePropertiesNetworkProfile.withSubnetId(reader.getString());
                } else if ("outboundType".equals(fieldName)) {
                    deserializedClusterPoolResourcePropertiesNetworkProfile
                        .withOutboundType(OutboundType.fromString(reader.getString()));
                } else if ("enablePrivateApiServer".equals(fieldName)) {
                    deserializedClusterPoolResourcePropertiesNetworkProfile
                        .withEnablePrivateApiServer(reader.getNullable(JsonReader::getBoolean));
                } else if ("apiServerAuthorizedIpRanges".equals(fieldName)) {
                    List<String> apiServerAuthorizedIpRanges = reader.readArray(reader1 -> reader1.getString());
                    deserializedClusterPoolResourcePropertiesNetworkProfile
                        .withApiServerAuthorizedIpRanges(apiServerAuthorizedIpRanges);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterPoolResourcePropertiesNetworkProfile;
        });
    }
}
