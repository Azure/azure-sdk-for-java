// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Cluster service configs.
 */
@Fluent
public final class ClusterServiceConfigsProfile implements JsonSerializable<ClusterServiceConfigsProfile> {
    /*
     * Name of the service the configurations should apply to.
     */
    private String serviceName;

    /*
     * List of service configs.
     */
    private List<ClusterServiceConfig> configs;

    /**
     * Creates an instance of ClusterServiceConfigsProfile class.
     */
    public ClusterServiceConfigsProfile() {
    }

    /**
     * Get the serviceName property: Name of the service the configurations should apply to.
     * 
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: Name of the service the configurations should apply to.
     * 
     * @param serviceName the serviceName value to set.
     * @return the ClusterServiceConfigsProfile object itself.
     */
    public ClusterServiceConfigsProfile withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the configs property: List of service configs.
     * 
     * @return the configs value.
     */
    public List<ClusterServiceConfig> configs() {
        return this.configs;
    }

    /**
     * Set the configs property: List of service configs.
     * 
     * @param configs the configs value to set.
     * @return the ClusterServiceConfigsProfile object itself.
     */
    public ClusterServiceConfigsProfile withConfigs(List<ClusterServiceConfig> configs) {
        this.configs = configs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceName in model ClusterServiceConfigsProfile"));
        }
        if (configs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property configs in model ClusterServiceConfigsProfile"));
        } else {
            configs().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterServiceConfigsProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceName", this.serviceName);
        jsonWriter.writeArrayField("configs", this.configs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterServiceConfigsProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterServiceConfigsProfile if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterServiceConfigsProfile.
     */
    public static ClusterServiceConfigsProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterServiceConfigsProfile deserializedClusterServiceConfigsProfile = new ClusterServiceConfigsProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceName".equals(fieldName)) {
                    deserializedClusterServiceConfigsProfile.serviceName = reader.getString();
                } else if ("configs".equals(fieldName)) {
                    List<ClusterServiceConfig> configs
                        = reader.readArray(reader1 -> ClusterServiceConfig.fromJson(reader1));
                    deserializedClusterServiceConfigsProfile.configs = configs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterServiceConfigsProfile;
        });
    }
}
