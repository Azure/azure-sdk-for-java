// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specification for the Ranger Usersync service.
 */
@Fluent
public final class RangerUsersyncSpec implements JsonSerializable<RangerUsersyncSpec> {
    /*
     * Denotes whether usersync service should be enabled
     */
    private Boolean enabled;

    /*
     * List of groups that should be synced. These group names should match the object id of the respective AAD groups.
     */
    private List<String> groups;

    /*
     * User & groups can be synced automatically or via a static list that's refreshed.
     */
    private RangerUsersyncMode mode;

    /*
     * Azure storage location of a mapping file that lists user & group associations.
     */
    private String userMappingLocation;

    /*
     * List of user names that should be synced. These usernames should match the User principal name of the respective
     * AAD users.
     */
    private List<String> users;

    /**
     * Creates an instance of RangerUsersyncSpec class.
     */
    public RangerUsersyncSpec() {
    }

    /**
     * Get the enabled property: Denotes whether usersync service should be enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Denotes whether usersync service should be enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the RangerUsersyncSpec object itself.
     */
    public RangerUsersyncSpec withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the groups property: List of groups that should be synced. These group names should match the object id of
     * the respective AAD groups.
     * 
     * @return the groups value.
     */
    public List<String> groups() {
        return this.groups;
    }

    /**
     * Set the groups property: List of groups that should be synced. These group names should match the object id of
     * the respective AAD groups.
     * 
     * @param groups the groups value to set.
     * @return the RangerUsersyncSpec object itself.
     */
    public RangerUsersyncSpec withGroups(List<String> groups) {
        this.groups = groups;
        return this;
    }

    /**
     * Get the mode property: User &amp; groups can be synced automatically or via a static list that's refreshed.
     * 
     * @return the mode value.
     */
    public RangerUsersyncMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: User &amp; groups can be synced automatically or via a static list that's refreshed.
     * 
     * @param mode the mode value to set.
     * @return the RangerUsersyncSpec object itself.
     */
    public RangerUsersyncSpec withMode(RangerUsersyncMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the userMappingLocation property: Azure storage location of a mapping file that lists user &amp; group
     * associations.
     * 
     * @return the userMappingLocation value.
     */
    public String userMappingLocation() {
        return this.userMappingLocation;
    }

    /**
     * Set the userMappingLocation property: Azure storage location of a mapping file that lists user &amp; group
     * associations.
     * 
     * @param userMappingLocation the userMappingLocation value to set.
     * @return the RangerUsersyncSpec object itself.
     */
    public RangerUsersyncSpec withUserMappingLocation(String userMappingLocation) {
        this.userMappingLocation = userMappingLocation;
        return this;
    }

    /**
     * Get the users property: List of user names that should be synced. These usernames should match the User principal
     * name of the respective AAD users.
     * 
     * @return the users value.
     */
    public List<String> users() {
        return this.users;
    }

    /**
     * Set the users property: List of user names that should be synced. These usernames should match the User principal
     * name of the respective AAD users.
     * 
     * @param users the users value to set.
     * @return the RangerUsersyncSpec object itself.
     */
    public RangerUsersyncSpec withUsers(List<String> users) {
        this.users = users;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeArrayField("groups", this.groups, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeStringField("userMappingLocation", this.userMappingLocation);
        jsonWriter.writeArrayField("users", this.users, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RangerUsersyncSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RangerUsersyncSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RangerUsersyncSpec.
     */
    public static RangerUsersyncSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RangerUsersyncSpec deserializedRangerUsersyncSpec = new RangerUsersyncSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedRangerUsersyncSpec.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("groups".equals(fieldName)) {
                    List<String> groups = reader.readArray(reader1 -> reader1.getString());
                    deserializedRangerUsersyncSpec.groups = groups;
                } else if ("mode".equals(fieldName)) {
                    deserializedRangerUsersyncSpec.mode = RangerUsersyncMode.fromString(reader.getString());
                } else if ("userMappingLocation".equals(fieldName)) {
                    deserializedRangerUsersyncSpec.userMappingLocation = reader.getString();
                } else if ("users".equals(fieldName)) {
                    List<String> users = reader.readArray(reader1 -> reader1.getString());
                    deserializedRangerUsersyncSpec.users = users;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRangerUsersyncSpec;
        });
    }
}
