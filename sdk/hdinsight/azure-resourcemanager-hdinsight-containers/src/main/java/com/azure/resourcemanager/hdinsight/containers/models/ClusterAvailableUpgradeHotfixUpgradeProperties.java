// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Cluster available hotfix version upgrade.
 */
@Fluent
public final class ClusterAvailableUpgradeHotfixUpgradeProperties extends ClusterAvailableInPlaceUpgradeProperties {
    /*
     * Type of upgrade.
     */
    private ClusterAvailableUpgradeType upgradeType = ClusterAvailableUpgradeType.HOTFIX_UPGRADE;

    /**
     * Creates an instance of ClusterAvailableUpgradeHotfixUpgradeProperties class.
     */
    public ClusterAvailableUpgradeHotfixUpgradeProperties() {
    }

    /**
     * Get the upgradeType property: Type of upgrade.
     * 
     * @return the upgradeType value.
     */
    @Override
    public ClusterAvailableUpgradeType upgradeType() {
        return this.upgradeType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withSourceOssVersion(String sourceOssVersion) {
        super.withSourceOssVersion(sourceOssVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withSourceClusterVersion(String sourceClusterVersion) {
        super.withSourceClusterVersion(sourceClusterVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withSourceBuildNumber(String sourceBuildNumber) {
        super.withSourceBuildNumber(sourceBuildNumber);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withTargetOssVersion(String targetOssVersion) {
        super.withTargetOssVersion(targetOssVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withTargetClusterVersion(String targetClusterVersion) {
        super.withTargetClusterVersion(targetClusterVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withTargetBuildNumber(String targetBuildNumber) {
        super.withTargetBuildNumber(targetBuildNumber);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withComponentName(String componentName) {
        super.withComponentName(componentName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withSeverity(Severity severity) {
        super.withSeverity(severity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withExtendedProperties(String extendedProperties) {
        super.withExtendedProperties(extendedProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAvailableUpgradeHotfixUpgradeProperties withCreatedTime(OffsetDateTime createdTime) {
        super.withCreatedTime(createdTime);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("sourceOssVersion", sourceOssVersion());
        jsonWriter.writeStringField("sourceClusterVersion", sourceClusterVersion());
        jsonWriter.writeStringField("sourceBuildNumber", sourceBuildNumber());
        jsonWriter.writeStringField("targetOssVersion", targetOssVersion());
        jsonWriter.writeStringField("targetClusterVersion", targetClusterVersion());
        jsonWriter.writeStringField("targetBuildNumber", targetBuildNumber());
        jsonWriter.writeStringField("componentName", componentName());
        jsonWriter.writeStringField("severity", severity() == null ? null : severity().toString());
        jsonWriter.writeStringField("extendedProperties", extendedProperties());
        jsonWriter.writeStringField("createdTime",
            createdTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(createdTime()));
        jsonWriter.writeStringField("upgradeType", this.upgradeType == null ? null : this.upgradeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterAvailableUpgradeHotfixUpgradeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterAvailableUpgradeHotfixUpgradeProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterAvailableUpgradeHotfixUpgradeProperties.
     */
    public static ClusterAvailableUpgradeHotfixUpgradeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterAvailableUpgradeHotfixUpgradeProperties deserializedClusterAvailableUpgradeHotfixUpgradeProperties
                = new ClusterAvailableUpgradeHotfixUpgradeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties.withDescription(reader.getString());
                } else if ("sourceOssVersion".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties.withSourceOssVersion(reader.getString());
                } else if ("sourceClusterVersion".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties
                        .withSourceClusterVersion(reader.getString());
                } else if ("sourceBuildNumber".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties
                        .withSourceBuildNumber(reader.getString());
                } else if ("targetOssVersion".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties.withTargetOssVersion(reader.getString());
                } else if ("targetClusterVersion".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties
                        .withTargetClusterVersion(reader.getString());
                } else if ("targetBuildNumber".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties
                        .withTargetBuildNumber(reader.getString());
                } else if ("componentName".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties.withComponentName(reader.getString());
                } else if ("severity".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties
                        .withSeverity(Severity.fromString(reader.getString()));
                } else if ("extendedProperties".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties
                        .withExtendedProperties(reader.getString());
                } else if ("createdTime".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties.withCreatedTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("upgradeType".equals(fieldName)) {
                    deserializedClusterAvailableUpgradeHotfixUpgradeProperties.upgradeType
                        = ClusterAvailableUpgradeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterAvailableUpgradeHotfixUpgradeProperties;
        });
    }
}
