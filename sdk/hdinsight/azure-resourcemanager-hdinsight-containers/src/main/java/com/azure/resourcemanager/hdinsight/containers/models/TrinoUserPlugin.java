// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Trino user plugin.
 */
@Fluent
public final class TrinoUserPlugin implements JsonSerializable<TrinoUserPlugin> {
    /*
     * Denotes whether the plugin is active or not.
     */
    private Boolean enabled;

    /*
     * This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
     */
    private String name;

    /*
     * Fully qualified path to the folder containing the plugins.
     */
    private String path;

    /**
     * Creates an instance of TrinoUserPlugin class.
     */
    public TrinoUserPlugin() {
    }

    /**
     * Get the enabled property: Denotes whether the plugin is active or not.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Denotes whether the plugin is active or not.
     * 
     * @param enabled the enabled value to set.
     * @return the TrinoUserPlugin object itself.
     */
    public TrinoUserPlugin withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the name property: This field maps to the sub-directory in trino plugins location, that will contain all the
     * plugins under path.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: This field maps to the sub-directory in trino plugins location, that will contain all the
     * plugins under path.
     * 
     * @param name the name value to set.
     * @return the TrinoUserPlugin object itself.
     */
    public TrinoUserPlugin withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the path property: Fully qualified path to the folder containing the plugins.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Fully qualified path to the folder containing the plugins.
     * 
     * @param path the path value to set.
     * @return the TrinoUserPlugin object itself.
     */
    public TrinoUserPlugin withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("path", this.path);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrinoUserPlugin from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrinoUserPlugin if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrinoUserPlugin.
     */
    public static TrinoUserPlugin fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrinoUserPlugin deserializedTrinoUserPlugin = new TrinoUserPlugin();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedTrinoUserPlugin.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("name".equals(fieldName)) {
                    deserializedTrinoUserPlugin.name = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedTrinoUserPlugin.path = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrinoUserPlugin;
        });
    }
}
