// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the status of a service of a HDInsight on AKS cluster.
 */
@Fluent
public final class ServiceStatus implements JsonSerializable<ServiceStatus> {
    /*
     * Kind of the service. E.g. "Zookeeper".
     */
    private String kind;

    /*
     * Indicates if the service is ready / healthy. Values can be "true", "false", "unknown" or anything else.
     */
    private String ready;

    /*
     * A message describing the error if any.
     */
    private String message;

    /**
     * Creates an instance of ServiceStatus class.
     */
    public ServiceStatus() {
    }

    /**
     * Get the kind property: Kind of the service. E.g. "Zookeeper".
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of the service. E.g. "Zookeeper".
     * 
     * @param kind the kind value to set.
     * @return the ServiceStatus object itself.
     */
    public ServiceStatus withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the ready property: Indicates if the service is ready / healthy. Values can be "true", "false", "unknown" or
     * anything else.
     * 
     * @return the ready value.
     */
    public String ready() {
        return this.ready;
    }

    /**
     * Set the ready property: Indicates if the service is ready / healthy. Values can be "true", "false", "unknown" or
     * anything else.
     * 
     * @param ready the ready value to set.
     * @return the ServiceStatus object itself.
     */
    public ServiceStatus withReady(String ready) {
        this.ready = ready;
        return this;
    }

    /**
     * Get the message property: A message describing the error if any.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: A message describing the error if any.
     * 
     * @param message the message value to set.
     * @return the ServiceStatus object itself.
     */
    public ServiceStatus withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kind in model ServiceStatus"));
        }
        if (ready() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ready in model ServiceStatus"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServiceStatus.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("ready", this.ready);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceStatus.
     */
    public static ServiceStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceStatus deserializedServiceStatus = new ServiceStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedServiceStatus.kind = reader.getString();
                } else if ("ready".equals(fieldName)) {
                    deserializedServiceStatus.ready = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedServiceStatus.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceStatus;
        });
    }
}
