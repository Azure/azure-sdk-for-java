// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterPoolInner;
import java.util.Map;

/** An immutable client-side representation of ClusterPool. */
public interface ClusterPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningStatus provisioningState();

    /**
     * Gets the deploymentId property: A unique id generated by the RP to identify the resource.
     *
     * @return the deploymentId value.
     */
    String deploymentId();

    /**
     * Gets the managedResourceGroupName property: A resource group created by RP, to hold the resources created by RP
     * on-behalf of customers. It will also be used to generate aksManagedResourceGroupName by pattern:
     * MC_{managedResourceGroupName}_{clusterPoolName}_{region}. Please make sure it meets resource group name
     * restriction.
     *
     * @return the managedResourceGroupName value.
     */
    String managedResourceGroupName();

    /**
     * Gets the aksManagedResourceGroupName property: A resource group created by AKS, to hold the infrastructure
     * resources created by AKS on-behalf of customers. It is generated by cluster pool name and managed resource group
     * name by pattern: MC_{managedResourceGroupName}_{clusterPoolName}_{region}.
     *
     * @return the aksManagedResourceGroupName value.
     */
    String aksManagedResourceGroupName();

    /**
     * Gets the clusterPoolProfile property: CLuster pool profile.
     *
     * @return the clusterPoolProfile value.
     */
    ClusterPoolResourcePropertiesClusterPoolProfile clusterPoolProfile();

    /**
     * Gets the computeProfile property: CLuster pool compute profile.
     *
     * @return the computeProfile value.
     */
    ClusterPoolResourcePropertiesComputeProfile computeProfile();

    /**
     * Gets the aksClusterProfile property: Properties of underlying AKS cluster.
     *
     * @return the aksClusterProfile value.
     */
    ClusterPoolResourcePropertiesAksClusterProfile aksClusterProfile();

    /**
     * Gets the networkProfile property: Cluster pool network profile.
     *
     * @return the networkProfile value.
     */
    ClusterPoolResourcePropertiesNetworkProfile networkProfile();

    /**
     * Gets the logAnalyticsProfile property: Cluster pool log analytics profile to enable OMS agent for AKS cluster.
     *
     * @return the logAnalyticsProfile value.
     */
    ClusterPoolResourcePropertiesLogAnalyticsProfile logAnalyticsProfile();

    /**
     * Gets the status property: Business status of the resource.
     *
     * @return the status value.
     */
    String status();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterPoolInner object.
     *
     * @return the inner object.
     */
    ClusterPoolInner innerModel();

    /** The entirety of the ClusterPool definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }

    /** The ClusterPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the ClusterPool definition. */
        interface Blank extends WithLocation {
        }

        /** The stage of the ClusterPool definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /** The stage of the ClusterPool definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the ClusterPool definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithManagedResourceGroupName,
                DefinitionStages.WithClusterPoolProfile,
                DefinitionStages.WithComputeProfile,
                DefinitionStages.WithNetworkProfile,
                DefinitionStages.WithLogAnalyticsProfile {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ClusterPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ClusterPool create(Context context);
        }

        /** The stage of the ClusterPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /** The stage of the ClusterPool definition allowing to specify managedResourceGroupName. */
        interface WithManagedResourceGroupName {
            /**
             * Specifies the managedResourceGroupName property: A resource group created by RP, to hold the resources
             * created by RP on-behalf of customers. It will also be used to generate aksManagedResourceGroupName by
             * pattern: MC_{managedResourceGroupName}_{clusterPoolName}_{region}. Please make sure it meets resource
             * group name restriction..
             *
             * @param managedResourceGroupName A resource group created by RP, to hold the resources created by RP
             *     on-behalf of customers. It will also be used to generate aksManagedResourceGroupName by pattern:
             *     MC_{managedResourceGroupName}_{clusterPoolName}_{region}. Please make sure it meets resource group
             *     name restriction.
             * @return the next definition stage.
             */
            WithCreate withManagedResourceGroupName(String managedResourceGroupName);
        }

        /** The stage of the ClusterPool definition allowing to specify clusterPoolProfile. */
        interface WithClusterPoolProfile {
            /**
             * Specifies the clusterPoolProfile property: CLuster pool profile..
             *
             * @param clusterPoolProfile CLuster pool profile.
             * @return the next definition stage.
             */
            WithCreate withClusterPoolProfile(ClusterPoolResourcePropertiesClusterPoolProfile clusterPoolProfile);
        }

        /** The stage of the ClusterPool definition allowing to specify computeProfile. */
        interface WithComputeProfile {
            /**
             * Specifies the computeProfile property: CLuster pool compute profile..
             *
             * @param computeProfile CLuster pool compute profile.
             * @return the next definition stage.
             */
            WithCreate withComputeProfile(ClusterPoolResourcePropertiesComputeProfile computeProfile);
        }

        /** The stage of the ClusterPool definition allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: Cluster pool network profile..
             *
             * @param networkProfile Cluster pool network profile.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(ClusterPoolResourcePropertiesNetworkProfile networkProfile);
        }

        /** The stage of the ClusterPool definition allowing to specify logAnalyticsProfile. */
        interface WithLogAnalyticsProfile {
            /**
             * Specifies the logAnalyticsProfile property: Cluster pool log analytics profile to enable OMS agent for
             * AKS cluster..
             *
             * @param logAnalyticsProfile Cluster pool log analytics profile to enable OMS agent for AKS cluster.
             * @return the next definition stage.
             */
            WithCreate withLogAnalyticsProfile(ClusterPoolResourcePropertiesLogAnalyticsProfile logAnalyticsProfile);
        }
    }

    /**
     * Begins update for the ClusterPool resource.
     *
     * @return the stage of resource update.
     */
    ClusterPool.Update update();

    /** The template for ClusterPool update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ClusterPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ClusterPool apply(Context context);
    }

    /** The ClusterPool update stages. */
    interface UpdateStages {
        /** The stage of the ClusterPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ClusterPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ClusterPool refresh(Context context);
}
