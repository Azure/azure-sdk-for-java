// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster aks patch upgrade history properties.
 */
@Fluent
public final class ClusterAksPatchUpgradeHistoryProperties extends ClusterUpgradeHistoryProperties {
    /*
     * Type of upgrade.
     */
    private ClusterUpgradeHistoryType upgradeType = ClusterUpgradeHistoryType.AKSPATCH_UPGRADE;

    /*
     * Version before update.
     */
    private String originalVersion;

    /*
     * Version going to update.
     */
    private String newVersion;

    /**
     * Creates an instance of ClusterAksPatchUpgradeHistoryProperties class.
     */
    public ClusterAksPatchUpgradeHistoryProperties() {
    }

    /**
     * Get the upgradeType property: Type of upgrade.
     * 
     * @return the upgradeType value.
     */
    @Override
    public ClusterUpgradeHistoryType upgradeType() {
        return this.upgradeType;
    }

    /**
     * Get the originalVersion property: Version before update.
     * 
     * @return the originalVersion value.
     */
    public String originalVersion() {
        return this.originalVersion;
    }

    /**
     * Set the originalVersion property: Version before update.
     * 
     * @param originalVersion the originalVersion value to set.
     * @return the ClusterAksPatchUpgradeHistoryProperties object itself.
     */
    public ClusterAksPatchUpgradeHistoryProperties withOriginalVersion(String originalVersion) {
        this.originalVersion = originalVersion;
        return this;
    }

    /**
     * Get the newVersion property: Version going to update.
     * 
     * @return the newVersion value.
     */
    public String newVersion() {
        return this.newVersion;
    }

    /**
     * Set the newVersion property: Version going to update.
     * 
     * @param newVersion the newVersion value to set.
     * @return the ClusterAksPatchUpgradeHistoryProperties object itself.
     */
    public ClusterAksPatchUpgradeHistoryProperties withNewVersion(String newVersion) {
        this.newVersion = newVersion;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAksPatchUpgradeHistoryProperties withUtcTime(String utcTime) {
        super.withUtcTime(utcTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterAksPatchUpgradeHistoryProperties
        withUpgradeResult(ClusterUpgradeHistoryUpgradeResultType upgradeResult) {
        super.withUpgradeResult(upgradeResult);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("utcTime", utcTime());
        jsonWriter.writeStringField("upgradeResult", upgradeResult() == null ? null : upgradeResult().toString());
        jsonWriter.writeStringField("upgradeType", this.upgradeType == null ? null : this.upgradeType.toString());
        jsonWriter.writeStringField("originalVersion", this.originalVersion);
        jsonWriter.writeStringField("newVersion", this.newVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterAksPatchUpgradeHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterAksPatchUpgradeHistoryProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterAksPatchUpgradeHistoryProperties.
     */
    public static ClusterAksPatchUpgradeHistoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterAksPatchUpgradeHistoryProperties deserializedClusterAksPatchUpgradeHistoryProperties
                = new ClusterAksPatchUpgradeHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("utcTime".equals(fieldName)) {
                    deserializedClusterAksPatchUpgradeHistoryProperties.withUtcTime(reader.getString());
                } else if ("upgradeResult".equals(fieldName)) {
                    deserializedClusterAksPatchUpgradeHistoryProperties
                        .withUpgradeResult(ClusterUpgradeHistoryUpgradeResultType.fromString(reader.getString()));
                } else if ("upgradeType".equals(fieldName)) {
                    deserializedClusterAksPatchUpgradeHistoryProperties.upgradeType
                        = ClusterUpgradeHistoryType.fromString(reader.getString());
                } else if ("originalVersion".equals(fieldName)) {
                    deserializedClusterAksPatchUpgradeHistoryProperties.originalVersion = reader.getString();
                } else if ("newVersion".equals(fieldName)) {
                    deserializedClusterAksPatchUpgradeHistoryProperties.newVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterAksPatchUpgradeHistoryProperties;
        });
    }
}
