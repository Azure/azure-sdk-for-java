// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Kafka disk storage profile.
 */
@Fluent
public final class DiskStorageProfile implements JsonSerializable<DiskStorageProfile> {
    /*
     * Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for
     * Premium SSD v2, which supports up to 64TB.
     */
    private int dataDiskSize;

    /*
     * Managed Disk Type.
     */
    private DataDiskType dataDiskType;

    /**
     * Creates an instance of DiskStorageProfile class.
     */
    public DiskStorageProfile() {
    }

    /**
     * Get the dataDiskSize property: Managed Disk size in GB. The maximum supported disk size for Standard and Premium
     * HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
     * 
     * @return the dataDiskSize value.
     */
    public int dataDiskSize() {
        return this.dataDiskSize;
    }

    /**
     * Set the dataDiskSize property: Managed Disk size in GB. The maximum supported disk size for Standard and Premium
     * HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
     * 
     * @param dataDiskSize the dataDiskSize value to set.
     * @return the DiskStorageProfile object itself.
     */
    public DiskStorageProfile withDataDiskSize(int dataDiskSize) {
        this.dataDiskSize = dataDiskSize;
        return this;
    }

    /**
     * Get the dataDiskType property: Managed Disk Type.
     * 
     * @return the dataDiskType value.
     */
    public DataDiskType dataDiskType() {
        return this.dataDiskType;
    }

    /**
     * Set the dataDiskType property: Managed Disk Type.
     * 
     * @param dataDiskType the dataDiskType value to set.
     * @return the DiskStorageProfile object itself.
     */
    public DiskStorageProfile withDataDiskType(DataDiskType dataDiskType) {
        this.dataDiskType = dataDiskType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataDiskType() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property dataDiskType in model DiskStorageProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiskStorageProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("dataDiskSize", this.dataDiskSize);
        jsonWriter.writeStringField("dataDiskType", this.dataDiskType == null ? null : this.dataDiskType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskStorageProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskStorageProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiskStorageProfile.
     */
    public static DiskStorageProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskStorageProfile deserializedDiskStorageProfile = new DiskStorageProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataDiskSize".equals(fieldName)) {
                    deserializedDiskStorageProfile.dataDiskSize = reader.getInt();
                } else if ("dataDiskType".equals(fieldName)) {
                    deserializedDiskStorageProfile.dataDiskType = DataDiskType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskStorageProfile;
        });
    }
}
