// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterInner;
import java.util.Map;

/** An immutable client-side representation of Cluster. */
public interface Cluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningStatus provisioningState();

    /**
     * Gets the clusterType property: The type of cluster.
     *
     * @return the clusterType value.
     */
    String clusterType();

    /**
     * Gets the deploymentId property: A unique id generated by the RP to identify the resource.
     *
     * @return the deploymentId value.
     */
    String deploymentId();

    /**
     * Gets the computeProfile property: The compute profile.
     *
     * @return the computeProfile value.
     */
    ComputeProfile computeProfile();

    /**
     * Gets the clusterProfile property: Cluster profile.
     *
     * @return the clusterProfile value.
     */
    ClusterProfile clusterProfile();

    /**
     * Gets the status property: Business status of the resource.
     *
     * @return the status value.
     */
    String status();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterInner object.
     *
     * @return the inner object.
     */
    ClusterInner innerModel();

    /** The entirety of the Cluster definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }

    /** The Cluster definition stages. */
    interface DefinitionStages {
        /** The first stage of the Cluster definition. */
        interface Blank extends WithLocation {
        }

        /** The stage of the Cluster definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /** The stage of the Cluster definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, clusterPoolName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param clusterPoolName The name of the cluster pool.
             * @return the next definition stage.
             */
            WithCreate withExistingClusterpool(String resourceGroupName, String clusterPoolName);
        }

        /**
         * The stage of the Cluster definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithClusterType,
                DefinitionStages.WithComputeProfile,
                DefinitionStages.WithClusterProfile {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Cluster create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Cluster create(Context context);
        }

        /** The stage of the Cluster definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /** The stage of the Cluster definition allowing to specify clusterType. */
        interface WithClusterType {
            /**
             * Specifies the clusterType property: The type of cluster..
             *
             * @param clusterType The type of cluster.
             * @return the next definition stage.
             */
            WithCreate withClusterType(String clusterType);
        }

        /** The stage of the Cluster definition allowing to specify computeProfile. */
        interface WithComputeProfile {
            /**
             * Specifies the computeProfile property: The compute profile..
             *
             * @param computeProfile The compute profile.
             * @return the next definition stage.
             */
            WithCreate withComputeProfile(ComputeProfile computeProfile);
        }

        /** The stage of the Cluster definition allowing to specify clusterProfile. */
        interface WithClusterProfile {
            /**
             * Specifies the clusterProfile property: Cluster profile..
             *
             * @param clusterProfile Cluster profile.
             * @return the next definition stage.
             */
            WithCreate withClusterProfile(ClusterProfile clusterProfile);
        }
    }

    /**
     * Begins update for the Cluster resource.
     *
     * @return the stage of resource update.
     */
    Cluster.Update update();

    /** The template for Cluster update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithClusterProfile {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Cluster apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Cluster apply(Context context);
    }

    /** The Cluster update stages. */
    interface UpdateStages {
        /** The stage of the Cluster update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /** The stage of the Cluster update allowing to specify clusterProfile. */
        interface WithClusterProfile {
            /**
             * Specifies the clusterProfile property: Cluster resource patch properties..
             *
             * @param clusterProfile Cluster resource patch properties.
             * @return the next definition stage.
             */
            Update withClusterProfile(UpdatableClusterProfile clusterProfile);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Cluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Cluster refresh(Context context);

    /**
     * Resize an existing Cluster.
     *
     * @param clusterResizeRequest Resize a cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the cluster.
     */
    Cluster resize(ClusterResizeData clusterResizeRequest);

    /**
     * Resize an existing Cluster.
     *
     * @param clusterResizeRequest Resize a cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the cluster.
     */
    Cluster resize(ClusterResizeData clusterResizeRequest, Context context);
}
