// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Kafka cluster profile.
 */
@Fluent
public final class KafkaProfile implements JsonSerializable<KafkaProfile> {
    /*
     * Expose Kafka cluster in KRaft mode.
     */
    private Boolean enableKRaft;

    /*
     * Expose worker nodes as public endpoints.
     */
    private Boolean enablePublicEndpoints;

    /*
     * Fully qualified path of Azure Storage container used for Tiered Storage.
     */
    private String remoteStorageUri;

    /*
     * Kafka disk storage profile.
     */
    private DiskStorageProfile diskStorage;

    /*
     * Kafka bootstrap server and brokers related connectivity endpoints.
     */
    private KafkaConnectivityEndpoints connectivityEndpoints;

    /**
     * Creates an instance of KafkaProfile class.
     */
    public KafkaProfile() {
    }

    /**
     * Get the enableKRaft property: Expose Kafka cluster in KRaft mode.
     * 
     * @return the enableKRaft value.
     */
    public Boolean enableKRaft() {
        return this.enableKRaft;
    }

    /**
     * Set the enableKRaft property: Expose Kafka cluster in KRaft mode.
     * 
     * @param enableKRaft the enableKRaft value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withEnableKRaft(Boolean enableKRaft) {
        this.enableKRaft = enableKRaft;
        return this;
    }

    /**
     * Get the enablePublicEndpoints property: Expose worker nodes as public endpoints.
     * 
     * @return the enablePublicEndpoints value.
     */
    public Boolean enablePublicEndpoints() {
        return this.enablePublicEndpoints;
    }

    /**
     * Set the enablePublicEndpoints property: Expose worker nodes as public endpoints.
     * 
     * @param enablePublicEndpoints the enablePublicEndpoints value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withEnablePublicEndpoints(Boolean enablePublicEndpoints) {
        this.enablePublicEndpoints = enablePublicEndpoints;
        return this;
    }

    /**
     * Get the remoteStorageUri property: Fully qualified path of Azure Storage container used for Tiered Storage.
     * 
     * @return the remoteStorageUri value.
     */
    public String remoteStorageUri() {
        return this.remoteStorageUri;
    }

    /**
     * Set the remoteStorageUri property: Fully qualified path of Azure Storage container used for Tiered Storage.
     * 
     * @param remoteStorageUri the remoteStorageUri value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withRemoteStorageUri(String remoteStorageUri) {
        this.remoteStorageUri = remoteStorageUri;
        return this;
    }

    /**
     * Get the diskStorage property: Kafka disk storage profile.
     * 
     * @return the diskStorage value.
     */
    public DiskStorageProfile diskStorage() {
        return this.diskStorage;
    }

    /**
     * Set the diskStorage property: Kafka disk storage profile.
     * 
     * @param diskStorage the diskStorage value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withDiskStorage(DiskStorageProfile diskStorage) {
        this.diskStorage = diskStorage;
        return this;
    }

    /**
     * Get the connectivityEndpoints property: Kafka bootstrap server and brokers related connectivity endpoints.
     * 
     * @return the connectivityEndpoints value.
     */
    public KafkaConnectivityEndpoints connectivityEndpoints() {
        return this.connectivityEndpoints;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskStorage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property diskStorage in model KafkaProfile"));
        } else {
            diskStorage().validate();
        }
        if (connectivityEndpoints() != null) {
            connectivityEndpoints().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KafkaProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("diskStorage", this.diskStorage);
        jsonWriter.writeBooleanField("enableKRaft", this.enableKRaft);
        jsonWriter.writeBooleanField("enablePublicEndpoints", this.enablePublicEndpoints);
        jsonWriter.writeStringField("remoteStorageUri", this.remoteStorageUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KafkaProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KafkaProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KafkaProfile.
     */
    public static KafkaProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KafkaProfile deserializedKafkaProfile = new KafkaProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskStorage".equals(fieldName)) {
                    deserializedKafkaProfile.diskStorage = DiskStorageProfile.fromJson(reader);
                } else if ("enableKRaft".equals(fieldName)) {
                    deserializedKafkaProfile.enableKRaft = reader.getNullable(JsonReader::getBoolean);
                } else if ("enablePublicEndpoints".equals(fieldName)) {
                    deserializedKafkaProfile.enablePublicEndpoints = reader.getNullable(JsonReader::getBoolean);
                } else if ("remoteStorageUri".equals(fieldName)) {
                    deserializedKafkaProfile.remoteStorageUri = reader.getString();
                } else if ("connectivityEndpoints".equals(fieldName)) {
                    deserializedKafkaProfile.connectivityEndpoints = KafkaConnectivityEndpoints.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKafkaProfile;
        });
    }
}
