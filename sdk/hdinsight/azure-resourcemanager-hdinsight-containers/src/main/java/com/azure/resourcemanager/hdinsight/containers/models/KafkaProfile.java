// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The Kafka cluster profile.
 */
@Fluent
public final class KafkaProfile {
    /*
     * Expose Kafka cluster in KRaft mode.
     */
    @JsonProperty(value = "enableKRaft")
    private Boolean enableKRaft;

    /*
     * Expose worker nodes as public endpoints.
     */
    @JsonProperty(value = "enablePublicEndpoints")
    private Boolean enablePublicEndpoints;

    /*
     * Fully qualified path of Azure Storage container used for Tiered Storage.
     */
    @JsonProperty(value = "remoteStorageUri")
    private String remoteStorageUri;

    /*
     * Kafka disk storage profile.
     */
    @JsonProperty(value = "diskStorage", required = true)
    private DiskStorageProfile diskStorage;

    /*
     * Identity of the internal service components inside the Kafka cluster.
     */
    @JsonProperty(value = "clusterIdentity", access = JsonProperty.Access.WRITE_ONLY)
    private IdentityProfile clusterIdentity;

    /*
     * Kafka bootstrap server and brokers related connectivity endpoints.
     */
    @JsonProperty(value = "connectivityEndpoints", access = JsonProperty.Access.WRITE_ONLY)
    private KafkaConnectivityEndpoints connectivityEndpoints;

    /**
     * Creates an instance of KafkaProfile class.
     */
    public KafkaProfile() {
    }

    /**
     * Get the enableKRaft property: Expose Kafka cluster in KRaft mode.
     * 
     * @return the enableKRaft value.
     */
    public Boolean enableKRaft() {
        return this.enableKRaft;
    }

    /**
     * Set the enableKRaft property: Expose Kafka cluster in KRaft mode.
     * 
     * @param enableKRaft the enableKRaft value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withEnableKRaft(Boolean enableKRaft) {
        this.enableKRaft = enableKRaft;
        return this;
    }

    /**
     * Get the enablePublicEndpoints property: Expose worker nodes as public endpoints.
     * 
     * @return the enablePublicEndpoints value.
     */
    public Boolean enablePublicEndpoints() {
        return this.enablePublicEndpoints;
    }

    /**
     * Set the enablePublicEndpoints property: Expose worker nodes as public endpoints.
     * 
     * @param enablePublicEndpoints the enablePublicEndpoints value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withEnablePublicEndpoints(Boolean enablePublicEndpoints) {
        this.enablePublicEndpoints = enablePublicEndpoints;
        return this;
    }

    /**
     * Get the remoteStorageUri property: Fully qualified path of Azure Storage container used for Tiered Storage.
     * 
     * @return the remoteStorageUri value.
     */
    public String remoteStorageUri() {
        return this.remoteStorageUri;
    }

    /**
     * Set the remoteStorageUri property: Fully qualified path of Azure Storage container used for Tiered Storage.
     * 
     * @param remoteStorageUri the remoteStorageUri value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withRemoteStorageUri(String remoteStorageUri) {
        this.remoteStorageUri = remoteStorageUri;
        return this;
    }

    /**
     * Get the diskStorage property: Kafka disk storage profile.
     * 
     * @return the diskStorage value.
     */
    public DiskStorageProfile diskStorage() {
        return this.diskStorage;
    }

    /**
     * Set the diskStorage property: Kafka disk storage profile.
     * 
     * @param diskStorage the diskStorage value to set.
     * @return the KafkaProfile object itself.
     */
    public KafkaProfile withDiskStorage(DiskStorageProfile diskStorage) {
        this.diskStorage = diskStorage;
        return this;
    }

    /**
     * Get the clusterIdentity property: Identity of the internal service components inside the Kafka cluster.
     * 
     * @return the clusterIdentity value.
     */
    public IdentityProfile clusterIdentity() {
        return this.clusterIdentity;
    }

    /**
     * Get the connectivityEndpoints property: Kafka bootstrap server and brokers related connectivity endpoints.
     * 
     * @return the connectivityEndpoints value.
     */
    public KafkaConnectivityEndpoints connectivityEndpoints() {
        return this.connectivityEndpoints;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskStorage() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property diskStorage in model KafkaProfile"));
        } else {
            diskStorage().validate();
        }
        if (clusterIdentity() != null) {
            clusterIdentity().validate();
        }
        if (connectivityEndpoints() != null) {
            connectivityEndpoints().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KafkaProfile.class);
}
