// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterLibraryInner;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a library management operation.
 */
@Fluent
public final class ClusterLibraryManagementOperationProperties
    implements JsonSerializable<ClusterLibraryManagementOperationProperties> {
    /*
     * The library management action.
     */
    private LibraryManagementAction action;

    /*
     * The libraries to be installed/updated/uninstalled.
     */
    private List<ClusterLibraryInner> libraries;

    /**
     * Creates an instance of ClusterLibraryManagementOperationProperties class.
     */
    public ClusterLibraryManagementOperationProperties() {
    }

    /**
     * Get the action property: The library management action.
     * 
     * @return the action value.
     */
    public LibraryManagementAction action() {
        return this.action;
    }

    /**
     * Set the action property: The library management action.
     * 
     * @param action the action value to set.
     * @return the ClusterLibraryManagementOperationProperties object itself.
     */
    public ClusterLibraryManagementOperationProperties withAction(LibraryManagementAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the libraries property: The libraries to be installed/updated/uninstalled.
     * 
     * @return the libraries value.
     */
    public List<ClusterLibraryInner> libraries() {
        return this.libraries;
    }

    /**
     * Set the libraries property: The libraries to be installed/updated/uninstalled.
     * 
     * @param libraries the libraries value to set.
     * @return the ClusterLibraryManagementOperationProperties object itself.
     */
    public ClusterLibraryManagementOperationProperties withLibraries(List<ClusterLibraryInner> libraries) {
        this.libraries = libraries;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property action in model ClusterLibraryManagementOperationProperties"));
        }
        if (libraries() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property libraries in model ClusterLibraryManagementOperationProperties"));
        } else {
            libraries().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterLibraryManagementOperationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeArrayField("libraries", this.libraries, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterLibraryManagementOperationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterLibraryManagementOperationProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterLibraryManagementOperationProperties.
     */
    public static ClusterLibraryManagementOperationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterLibraryManagementOperationProperties deserializedClusterLibraryManagementOperationProperties
                = new ClusterLibraryManagementOperationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedClusterLibraryManagementOperationProperties.action
                        = LibraryManagementAction.fromString(reader.getString());
                } else if ("libraries".equals(fieldName)) {
                    List<ClusterLibraryInner> libraries
                        = reader.readArray(reader1 -> ClusterLibraryInner.fromJson(reader1));
                    deserializedClusterLibraryManagementOperationProperties.libraries = libraries;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterLibraryManagementOperationProperties;
        });
    }
}
