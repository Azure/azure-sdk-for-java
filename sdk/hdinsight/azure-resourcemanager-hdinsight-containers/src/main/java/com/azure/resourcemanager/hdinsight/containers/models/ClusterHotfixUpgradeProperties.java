// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Properties of upgrading cluster's hotfix.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "upgradeType")
@JsonTypeName("HotfixUpgrade")
@Fluent
public final class ClusterHotfixUpgradeProperties extends ClusterUpgradeProperties {
    /*
     * Target OSS version of component to be upgraded.
     */
    @JsonProperty(value = "targetOssVersion")
    private String targetOssVersion;

    /*
     * Target cluster version of component to be upgraded.
     */
    @JsonProperty(value = "targetClusterVersion")
    private String targetClusterVersion;

    /*
     * Target build number of component to be upgraded.
     */
    @JsonProperty(value = "targetBuildNumber")
    private String targetBuildNumber;

    /*
     * Name of component to be upgraded.
     */
    @JsonProperty(value = "componentName")
    private String componentName;

    /**
     * Creates an instance of ClusterHotfixUpgradeProperties class.
     */
    public ClusterHotfixUpgradeProperties() {
    }

    /**
     * Get the targetOssVersion property: Target OSS version of component to be upgraded.
     * 
     * @return the targetOssVersion value.
     */
    public String targetOssVersion() {
        return this.targetOssVersion;
    }

    /**
     * Set the targetOssVersion property: Target OSS version of component to be upgraded.
     * 
     * @param targetOssVersion the targetOssVersion value to set.
     * @return the ClusterHotfixUpgradeProperties object itself.
     */
    public ClusterHotfixUpgradeProperties withTargetOssVersion(String targetOssVersion) {
        this.targetOssVersion = targetOssVersion;
        return this;
    }

    /**
     * Get the targetClusterVersion property: Target cluster version of component to be upgraded.
     * 
     * @return the targetClusterVersion value.
     */
    public String targetClusterVersion() {
        return this.targetClusterVersion;
    }

    /**
     * Set the targetClusterVersion property: Target cluster version of component to be upgraded.
     * 
     * @param targetClusterVersion the targetClusterVersion value to set.
     * @return the ClusterHotfixUpgradeProperties object itself.
     */
    public ClusterHotfixUpgradeProperties withTargetClusterVersion(String targetClusterVersion) {
        this.targetClusterVersion = targetClusterVersion;
        return this;
    }

    /**
     * Get the targetBuildNumber property: Target build number of component to be upgraded.
     * 
     * @return the targetBuildNumber value.
     */
    public String targetBuildNumber() {
        return this.targetBuildNumber;
    }

    /**
     * Set the targetBuildNumber property: Target build number of component to be upgraded.
     * 
     * @param targetBuildNumber the targetBuildNumber value to set.
     * @return the ClusterHotfixUpgradeProperties object itself.
     */
    public ClusterHotfixUpgradeProperties withTargetBuildNumber(String targetBuildNumber) {
        this.targetBuildNumber = targetBuildNumber;
        return this;
    }

    /**
     * Get the componentName property: Name of component to be upgraded.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Set the componentName property: Name of component to be upgraded.
     * 
     * @param componentName the componentName value to set.
     * @return the ClusterHotfixUpgradeProperties object itself.
     */
    public ClusterHotfixUpgradeProperties withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
