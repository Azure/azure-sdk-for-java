// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the instance view.
 */
@Fluent
public final class ClusterInstanceViewResultProperties extends ClusterInstanceViewProperties {
    /**
     * Creates an instance of ClusterInstanceViewResultProperties class.
     */
    public ClusterInstanceViewResultProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInstanceViewResultProperties withStatus(ClusterInstanceViewPropertiesStatus status) {
        super.withStatus(status);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInstanceViewResultProperties withServiceStatuses(List<ServiceStatus> serviceStatuses) {
        super.withServiceStatuses(serviceStatuses);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("status", status());
        jsonWriter.writeArrayField("serviceStatuses", serviceStatuses(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterInstanceViewResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterInstanceViewResultProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterInstanceViewResultProperties.
     */
    public static ClusterInstanceViewResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterInstanceViewResultProperties deserializedClusterInstanceViewResultProperties
                = new ClusterInstanceViewResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedClusterInstanceViewResultProperties
                        .withStatus(ClusterInstanceViewPropertiesStatus.fromJson(reader));
                } else if ("serviceStatuses".equals(fieldName)) {
                    List<ServiceStatus> serviceStatuses = reader.readArray(reader1 -> ServiceStatus.fromJson(reader1));
                    deserializedClusterInstanceViewResultProperties.withServiceStatuses(serviceStatuses);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterInstanceViewResultProperties;
        });
    }
}
