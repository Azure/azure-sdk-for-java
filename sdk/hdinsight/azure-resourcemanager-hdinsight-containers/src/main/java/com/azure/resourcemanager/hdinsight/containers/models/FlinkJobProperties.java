// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Properties of flink job.
 */
@Fluent
public final class FlinkJobProperties extends ClusterJobProperties {
    /*
     * Type of cluster job.
     */
    private JobType jobType = JobType.FLINK_JOB;

    /*
     * Run id of job
     */
    private String runId;

    /*
     * Name of job
     */
    private String jobName;

    /*
     * A string property that specifies the directory where the job JAR is located.
     */
    private String jobJarDirectory;

    /*
     * A string property that represents the name of the job JAR.
     */
    private String jarName;

    /*
     * A string property that specifies the entry class for the Flink job.
     */
    private String entryClass;

    /*
     * A string property representing additional JVM arguments for the Flink job. It should be space separated value.
     */
    private String args;

    /*
     * A string property that represents the name of the savepoint for the Flink job
     */
    private String savePointName;

    /*
     * A string property that indicates the action to be performed on the Flink job. It can have one of the following
     * enum values => NEW, UPDATE, STATELESS_UPDATE, STOP, START, CANCEL, SAVEPOINT, LIST_SAVEPOINT, or DELETE.
     */
    private Action action;

    /*
     * Additional properties used to configure Flink jobs. It allows users to set properties such as parallelism and
     * jobSavePointDirectory. It accepts additional key-value pairs as properties, where the keys are strings and the
     * values are strings as well.
     */
    private Map<String, String> flinkConfiguration;

    /*
     * Unique id for identifying a job
     */
    private String jobId;

    /*
     * Status of job.
     */
    private String status;

    /*
     * Output of job.
     */
    private String jobOutput;

    /*
     * Action result of job.
     */
    private String actionResult;

    /*
     * The last savepoint.
     */
    private String lastSavePoint;

    /**
     * Creates an instance of FlinkJobProperties class.
     */
    public FlinkJobProperties() {
    }

    /**
     * Get the jobType property: Type of cluster job.
     * 
     * @return the jobType value.
     */
    @Override
    public JobType jobType() {
        return this.jobType;
    }

    /**
     * Get the runId property: Run id of job.
     * 
     * @return the runId value.
     */
    public String runId() {
        return this.runId;
    }

    /**
     * Set the runId property: Run id of job.
     * 
     * @param runId the runId value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withRunId(String runId) {
        this.runId = runId;
        return this;
    }

    /**
     * Get the jobName property: Name of job.
     * 
     * @return the jobName value.
     */
    public String jobName() {
        return this.jobName;
    }

    /**
     * Set the jobName property: Name of job.
     * 
     * @param jobName the jobName value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }

    /**
     * Get the jobJarDirectory property: A string property that specifies the directory where the job JAR is located.
     * 
     * @return the jobJarDirectory value.
     */
    public String jobJarDirectory() {
        return this.jobJarDirectory;
    }

    /**
     * Set the jobJarDirectory property: A string property that specifies the directory where the job JAR is located.
     * 
     * @param jobJarDirectory the jobJarDirectory value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withJobJarDirectory(String jobJarDirectory) {
        this.jobJarDirectory = jobJarDirectory;
        return this;
    }

    /**
     * Get the jarName property: A string property that represents the name of the job JAR.
     * 
     * @return the jarName value.
     */
    public String jarName() {
        return this.jarName;
    }

    /**
     * Set the jarName property: A string property that represents the name of the job JAR.
     * 
     * @param jarName the jarName value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withJarName(String jarName) {
        this.jarName = jarName;
        return this;
    }

    /**
     * Get the entryClass property: A string property that specifies the entry class for the Flink job.
     * 
     * @return the entryClass value.
     */
    public String entryClass() {
        return this.entryClass;
    }

    /**
     * Set the entryClass property: A string property that specifies the entry class for the Flink job.
     * 
     * @param entryClass the entryClass value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withEntryClass(String entryClass) {
        this.entryClass = entryClass;
        return this;
    }

    /**
     * Get the args property: A string property representing additional JVM arguments for the Flink job. It should be
     * space separated value.
     * 
     * @return the args value.
     */
    public String args() {
        return this.args;
    }

    /**
     * Set the args property: A string property representing additional JVM arguments for the Flink job. It should be
     * space separated value.
     * 
     * @param args the args value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withArgs(String args) {
        this.args = args;
        return this;
    }

    /**
     * Get the savePointName property: A string property that represents the name of the savepoint for the Flink job.
     * 
     * @return the savePointName value.
     */
    public String savePointName() {
        return this.savePointName;
    }

    /**
     * Set the savePointName property: A string property that represents the name of the savepoint for the Flink job.
     * 
     * @param savePointName the savePointName value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withSavePointName(String savePointName) {
        this.savePointName = savePointName;
        return this;
    }

    /**
     * Get the action property: A string property that indicates the action to be performed on the Flink job. It can
     * have one of the following enum values =&gt; NEW, UPDATE, STATELESS_UPDATE, STOP, START, CANCEL, SAVEPOINT,
     * LIST_SAVEPOINT, or DELETE.
     * 
     * @return the action value.
     */
    public Action action() {
        return this.action;
    }

    /**
     * Set the action property: A string property that indicates the action to be performed on the Flink job. It can
     * have one of the following enum values =&gt; NEW, UPDATE, STATELESS_UPDATE, STOP, START, CANCEL, SAVEPOINT,
     * LIST_SAVEPOINT, or DELETE.
     * 
     * @param action the action value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withAction(Action action) {
        this.action = action;
        return this;
    }

    /**
     * Get the flinkConfiguration property: Additional properties used to configure Flink jobs. It allows users to set
     * properties such as parallelism and jobSavePointDirectory. It accepts additional key-value pairs as properties,
     * where the keys are strings and the values are strings as well.
     * 
     * @return the flinkConfiguration value.
     */
    public Map<String, String> flinkConfiguration() {
        return this.flinkConfiguration;
    }

    /**
     * Set the flinkConfiguration property: Additional properties used to configure Flink jobs. It allows users to set
     * properties such as parallelism and jobSavePointDirectory. It accepts additional key-value pairs as properties,
     * where the keys are strings and the values are strings as well.
     * 
     * @param flinkConfiguration the flinkConfiguration value to set.
     * @return the FlinkJobProperties object itself.
     */
    public FlinkJobProperties withFlinkConfiguration(Map<String, String> flinkConfiguration) {
        this.flinkConfiguration = flinkConfiguration;
        return this;
    }

    /**
     * Get the jobId property: Unique id for identifying a job.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Get the status property: Status of job.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the jobOutput property: Output of job.
     * 
     * @return the jobOutput value.
     */
    public String jobOutput() {
        return this.jobOutput;
    }

    /**
     * Get the actionResult property: Action result of job.
     * 
     * @return the actionResult value.
     */
    public String actionResult() {
        return this.actionResult;
    }

    /**
     * Get the lastSavePoint property: The last savepoint.
     * 
     * @return the lastSavePoint value.
     */
    public String lastSavePoint() {
        return this.lastSavePoint;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeStringField("runId", this.runId);
        jsonWriter.writeStringField("jobName", this.jobName);
        jsonWriter.writeStringField("jobJarDirectory", this.jobJarDirectory);
        jsonWriter.writeStringField("jarName", this.jarName);
        jsonWriter.writeStringField("entryClass", this.entryClass);
        jsonWriter.writeStringField("args", this.args);
        jsonWriter.writeStringField("savePointName", this.savePointName);
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeMapField("flinkConfiguration", this.flinkConfiguration,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlinkJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlinkJobProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FlinkJobProperties.
     */
    public static FlinkJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlinkJobProperties deserializedFlinkJobProperties = new FlinkJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobType".equals(fieldName)) {
                    deserializedFlinkJobProperties.jobType = JobType.fromString(reader.getString());
                } else if ("runId".equals(fieldName)) {
                    deserializedFlinkJobProperties.runId = reader.getString();
                } else if ("jobName".equals(fieldName)) {
                    deserializedFlinkJobProperties.jobName = reader.getString();
                } else if ("jobJarDirectory".equals(fieldName)) {
                    deserializedFlinkJobProperties.jobJarDirectory = reader.getString();
                } else if ("jarName".equals(fieldName)) {
                    deserializedFlinkJobProperties.jarName = reader.getString();
                } else if ("entryClass".equals(fieldName)) {
                    deserializedFlinkJobProperties.entryClass = reader.getString();
                } else if ("args".equals(fieldName)) {
                    deserializedFlinkJobProperties.args = reader.getString();
                } else if ("savePointName".equals(fieldName)) {
                    deserializedFlinkJobProperties.savePointName = reader.getString();
                } else if ("action".equals(fieldName)) {
                    deserializedFlinkJobProperties.action = Action.fromString(reader.getString());
                } else if ("flinkConfiguration".equals(fieldName)) {
                    Map<String, String> flinkConfiguration = reader.readMap(reader1 -> reader1.getString());
                    deserializedFlinkJobProperties.flinkConfiguration = flinkConfiguration;
                } else if ("jobId".equals(fieldName)) {
                    deserializedFlinkJobProperties.jobId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedFlinkJobProperties.status = reader.getString();
                } else if ("jobOutput".equals(fieldName)) {
                    deserializedFlinkJobProperties.jobOutput = reader.getString();
                } else if ("actionResult".equals(fieldName)) {
                    deserializedFlinkJobProperties.actionResult = reader.getString();
                } else if ("lastSavePoint".equals(fieldName)) {
                    deserializedFlinkJobProperties.lastSavePoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlinkJobProperties;
        });
    }
}
