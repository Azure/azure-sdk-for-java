// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Cluster pool networking configuration.
 */
@Fluent
public class ClusterPoolNetworkProfile implements JsonSerializable<ClusterPoolNetworkProfile> {
    /*
     * Cluster pool subnet resource id.
     */
    private String subnetId;

    /*
     * This can only be set at cluster pool creation time and cannot be changed later.
     */
    private OutboundType outboundType;

    /*
     * ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set
     * this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not
     * exposed to public internet.
     */
    private Boolean enablePrivateApiServer;

    /*
     * IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS
     * clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time.
     * Currently, this property is not supported and please don't use it.
     */
    private List<String> apiServerAuthorizedIpRanges;

    /**
     * Creates an instance of ClusterPoolNetworkProfile class.
     */
    public ClusterPoolNetworkProfile() {
    }

    /**
     * Get the subnetId property: Cluster pool subnet resource id.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Cluster pool subnet resource id.
     * 
     * @param subnetId the subnetId value to set.
     * @return the ClusterPoolNetworkProfile object itself.
     */
    public ClusterPoolNetworkProfile withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the outboundType property: This can only be set at cluster pool creation time and cannot be changed later.
     * 
     * @return the outboundType value.
     */
    public OutboundType outboundType() {
        return this.outboundType;
    }

    /**
     * Set the outboundType property: This can only be set at cluster pool creation time and cannot be changed later.
     * 
     * @param outboundType the outboundType value to set.
     * @return the ClusterPoolNetworkProfile object itself.
     */
    public ClusterPoolNetworkProfile withOutboundType(OutboundType outboundType) {
        this.outboundType = outboundType;
        return this;
    }

    /**
     * Get the enablePrivateApiServer property: ClusterPool is based on AKS cluster. AKS cluster exposes the API server
     * to public internet by default. If you set this property to true, a private AKS cluster will be created, and it
     * will use private apiserver, which is not exposed to public internet.
     * 
     * @return the enablePrivateApiServer value.
     */
    public Boolean enablePrivateApiServer() {
        return this.enablePrivateApiServer;
    }

    /**
     * Set the enablePrivateApiServer property: ClusterPool is based on AKS cluster. AKS cluster exposes the API server
     * to public internet by default. If you set this property to true, a private AKS cluster will be created, and it
     * will use private apiserver, which is not exposed to public internet.
     * 
     * @param enablePrivateApiServer the enablePrivateApiServer value to set.
     * @return the ClusterPoolNetworkProfile object itself.
     */
    public ClusterPoolNetworkProfile withEnablePrivateApiServer(Boolean enablePrivateApiServer) {
        this.enablePrivateApiServer = enablePrivateApiServer;
        return this;
    }

    /**
     * Get the apiServerAuthorizedIpRanges property: IP ranges are specified in CIDR format, e.g. 137.117.106.88/29.
     * This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and
     * apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
     * 
     * @return the apiServerAuthorizedIpRanges value.
     */
    public List<String> apiServerAuthorizedIpRanges() {
        return this.apiServerAuthorizedIpRanges;
    }

    /**
     * Set the apiServerAuthorizedIpRanges property: IP ranges are specified in CIDR format, e.g. 137.117.106.88/29.
     * This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and
     * apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
     * 
     * @param apiServerAuthorizedIpRanges the apiServerAuthorizedIpRanges value to set.
     * @return the ClusterPoolNetworkProfile object itself.
     */
    public ClusterPoolNetworkProfile withApiServerAuthorizedIpRanges(List<String> apiServerAuthorizedIpRanges) {
        this.apiServerAuthorizedIpRanges = apiServerAuthorizedIpRanges;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model ClusterPoolNetworkProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterPoolNetworkProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("outboundType", this.outboundType == null ? null : this.outboundType.toString());
        jsonWriter.writeBooleanField("enablePrivateApiServer", this.enablePrivateApiServer);
        jsonWriter.writeArrayField("apiServerAuthorizedIpRanges", this.apiServerAuthorizedIpRanges,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterPoolNetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterPoolNetworkProfile if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterPoolNetworkProfile.
     */
    public static ClusterPoolNetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterPoolNetworkProfile deserializedClusterPoolNetworkProfile = new ClusterPoolNetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedClusterPoolNetworkProfile.subnetId = reader.getString();
                } else if ("outboundType".equals(fieldName)) {
                    deserializedClusterPoolNetworkProfile.outboundType = OutboundType.fromString(reader.getString());
                } else if ("enablePrivateApiServer".equals(fieldName)) {
                    deserializedClusterPoolNetworkProfile.enablePrivateApiServer
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("apiServerAuthorizedIpRanges".equals(fieldName)) {
                    List<String> apiServerAuthorizedIpRanges = reader.readArray(reader1 -> reader1.getString());
                    deserializedClusterPoolNetworkProfile.apiServerAuthorizedIpRanges = apiServerAuthorizedIpRanges;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterPoolNetworkProfile;
        });
    }
}
