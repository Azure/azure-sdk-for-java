// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The spark cluster profile.
 */
@Fluent
public final class SparkProfile {
    /*
     * The default storage URL.
     */
    @JsonProperty(value = "defaultStorageUrl")
    private String defaultStorageUrl;

    /*
     * The metastore specification for Spark cluster.
     */
    @JsonProperty(value = "metastoreSpec")
    private SparkMetastoreSpec metastoreSpec;

    /*
     * Spark user plugins spec
     */
    @JsonProperty(value = "userPluginsSpec")
    private SparkUserPlugins userPluginsSpec;

    /**
     * Creates an instance of SparkProfile class.
     */
    public SparkProfile() {
    }

    /**
     * Get the defaultStorageUrl property: The default storage URL.
     * 
     * @return the defaultStorageUrl value.
     */
    public String defaultStorageUrl() {
        return this.defaultStorageUrl;
    }

    /**
     * Set the defaultStorageUrl property: The default storage URL.
     * 
     * @param defaultStorageUrl the defaultStorageUrl value to set.
     * @return the SparkProfile object itself.
     */
    public SparkProfile withDefaultStorageUrl(String defaultStorageUrl) {
        this.defaultStorageUrl = defaultStorageUrl;
        return this;
    }

    /**
     * Get the metastoreSpec property: The metastore specification for Spark cluster.
     * 
     * @return the metastoreSpec value.
     */
    public SparkMetastoreSpec metastoreSpec() {
        return this.metastoreSpec;
    }

    /**
     * Set the metastoreSpec property: The metastore specification for Spark cluster.
     * 
     * @param metastoreSpec the metastoreSpec value to set.
     * @return the SparkProfile object itself.
     */
    public SparkProfile withMetastoreSpec(SparkMetastoreSpec metastoreSpec) {
        this.metastoreSpec = metastoreSpec;
        return this;
    }

    /**
     * Get the userPluginsSpec property: Spark user plugins spec.
     * 
     * @return the userPluginsSpec value.
     */
    public SparkUserPlugins userPluginsSpec() {
        return this.userPluginsSpec;
    }

    /**
     * Set the userPluginsSpec property: Spark user plugins spec.
     * 
     * @param userPluginsSpec the userPluginsSpec value to set.
     * @return the SparkProfile object itself.
     */
    public SparkProfile withUserPluginsSpec(SparkUserPlugins userPluginsSpec) {
        this.userPluginsSpec = userPluginsSpec;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metastoreSpec() != null) {
            metastoreSpec().validate();
        }
        if (userPluginsSpec() != null) {
            userPluginsSpec().validate();
        }
    }
}
