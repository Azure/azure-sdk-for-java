// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The spark cluster profile.
 */
@Fluent
public final class SparkProfile implements JsonSerializable<SparkProfile> {
    /*
     * The default storage URL.
     */
    private String defaultStorageUrl;

    /*
     * The metastore specification for Spark cluster.
     */
    private SparkMetastoreSpec metastoreSpec;

    /*
     * Spark user plugins spec
     */
    private SparkUserPlugins userPluginsSpec;

    /**
     * Creates an instance of SparkProfile class.
     */
    public SparkProfile() {
    }

    /**
     * Get the defaultStorageUrl property: The default storage URL.
     * 
     * @return the defaultStorageUrl value.
     */
    public String defaultStorageUrl() {
        return this.defaultStorageUrl;
    }

    /**
     * Set the defaultStorageUrl property: The default storage URL.
     * 
     * @param defaultStorageUrl the defaultStorageUrl value to set.
     * @return the SparkProfile object itself.
     */
    public SparkProfile withDefaultStorageUrl(String defaultStorageUrl) {
        this.defaultStorageUrl = defaultStorageUrl;
        return this;
    }

    /**
     * Get the metastoreSpec property: The metastore specification for Spark cluster.
     * 
     * @return the metastoreSpec value.
     */
    public SparkMetastoreSpec metastoreSpec() {
        return this.metastoreSpec;
    }

    /**
     * Set the metastoreSpec property: The metastore specification for Spark cluster.
     * 
     * @param metastoreSpec the metastoreSpec value to set.
     * @return the SparkProfile object itself.
     */
    public SparkProfile withMetastoreSpec(SparkMetastoreSpec metastoreSpec) {
        this.metastoreSpec = metastoreSpec;
        return this;
    }

    /**
     * Get the userPluginsSpec property: Spark user plugins spec.
     * 
     * @return the userPluginsSpec value.
     */
    public SparkUserPlugins userPluginsSpec() {
        return this.userPluginsSpec;
    }

    /**
     * Set the userPluginsSpec property: Spark user plugins spec.
     * 
     * @param userPluginsSpec the userPluginsSpec value to set.
     * @return the SparkProfile object itself.
     */
    public SparkProfile withUserPluginsSpec(SparkUserPlugins userPluginsSpec) {
        this.userPluginsSpec = userPluginsSpec;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metastoreSpec() != null) {
            metastoreSpec().validate();
        }
        if (userPluginsSpec() != null) {
            userPluginsSpec().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultStorageUrl", this.defaultStorageUrl);
        jsonWriter.writeJsonField("metastoreSpec", this.metastoreSpec);
        jsonWriter.writeJsonField("userPluginsSpec", this.userPluginsSpec);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SparkProfile.
     */
    public static SparkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkProfile deserializedSparkProfile = new SparkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultStorageUrl".equals(fieldName)) {
                    deserializedSparkProfile.defaultStorageUrl = reader.getString();
                } else if ("metastoreSpec".equals(fieldName)) {
                    deserializedSparkProfile.metastoreSpec = SparkMetastoreSpec.fromJson(reader);
                } else if ("userPluginsSpec".equals(fieldName)) {
                    deserializedSparkProfile.userPluginsSpec = SparkUserPlugins.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkProfile;
        });
    }
}
