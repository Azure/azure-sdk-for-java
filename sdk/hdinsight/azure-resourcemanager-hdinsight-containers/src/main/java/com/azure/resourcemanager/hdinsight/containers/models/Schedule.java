// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Schedule definition.
 */
@Fluent
public final class Schedule {
    /*
     * User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
     */
    @JsonProperty(value = "startTime", required = true)
    private String startTime;

    /*
     * User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
     */
    @JsonProperty(value = "endTime", required = true)
    private String endTime;

    /*
     * User has to set the node count anticipated at end of the scaling operation of the set current schedule
     * configuration, format is integer.
     */
    @JsonProperty(value = "count", required = true)
    private int count;

    /*
     * User has to set the days where schedule has to be set for autoscale operation.
     */
    @JsonProperty(value = "days", required = true)
    private List<ScheduleDay> days;

    /**
     * Creates an instance of Schedule class.
     */
    public Schedule() {
    }

    /**
     * Get the startTime property: User has to set the start time of current schedule configuration, format like 10:30
     * (HH:MM).
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: User has to set the start time of current schedule configuration, format like 10:30
     * (HH:MM).
     * 
     * @param startTime the startTime value to set.
     * @return the Schedule object itself.
     */
    public Schedule withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: User has to set the end time of current schedule configuration, format like 10:30
     * (HH:MM).
     * 
     * @return the endTime value.
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: User has to set the end time of current schedule configuration, format like 10:30
     * (HH:MM).
     * 
     * @param endTime the endTime value to set.
     * @return the Schedule object itself.
     */
    public Schedule withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the count property: User has to set the node count anticipated at end of the scaling operation of the set
     * current schedule configuration, format is integer.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Set the count property: User has to set the node count anticipated at end of the scaling operation of the set
     * current schedule configuration, format is integer.
     * 
     * @param count the count value to set.
     * @return the Schedule object itself.
     */
    public Schedule withCount(int count) {
        this.count = count;
        return this;
    }

    /**
     * Get the days property: User has to set the days where schedule has to be set for autoscale operation.
     * 
     * @return the days value.
     */
    public List<ScheduleDay> days() {
        return this.days;
    }

    /**
     * Set the days property: User has to set the days where schedule has to be set for autoscale operation.
     * 
     * @param days the days value to set.
     * @return the Schedule object itself.
     */
    public Schedule withDays(List<ScheduleDay> days) {
        this.days = days;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (startTime() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property startTime in model Schedule"));
        }
        if (endTime() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property endTime in model Schedule"));
        }
        if (days() == null) {
            throw LOGGER
                .logExceptionAsError(new IllegalArgumentException("Missing required property days in model Schedule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Schedule.class);
}
