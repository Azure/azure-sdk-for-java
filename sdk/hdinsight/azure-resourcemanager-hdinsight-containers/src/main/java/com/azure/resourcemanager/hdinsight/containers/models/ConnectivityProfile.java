// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Cluster connectivity profile.
 */
@Fluent
public final class ConnectivityProfile {
    /*
     * Web connectivity endpoint details.
     */
    @JsonProperty(value = "web", required = true)
    private ConnectivityProfileWeb web;

    /*
     * List of SSH connectivity endpoints.
     */
    @JsonProperty(value = "ssh")
    private List<SshConnectivityEndpoint> ssh;

    /**
     * Creates an instance of ConnectivityProfile class.
     */
    public ConnectivityProfile() {
    }

    /**
     * Get the web property: Web connectivity endpoint details.
     * 
     * @return the web value.
     */
    public ConnectivityProfileWeb web() {
        return this.web;
    }

    /**
     * Set the web property: Web connectivity endpoint details.
     * 
     * @param web the web value to set.
     * @return the ConnectivityProfile object itself.
     */
    public ConnectivityProfile withWeb(ConnectivityProfileWeb web) {
        this.web = web;
        return this;
    }

    /**
     * Get the ssh property: List of SSH connectivity endpoints.
     * 
     * @return the ssh value.
     */
    public List<SshConnectivityEndpoint> ssh() {
        return this.ssh;
    }

    /**
     * Set the ssh property: List of SSH connectivity endpoints.
     * 
     * @param ssh the ssh value to set.
     * @return the ConnectivityProfile object itself.
     */
    public ConnectivityProfile withSsh(List<SshConnectivityEndpoint> ssh) {
        this.ssh = ssh;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (web() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property web in model ConnectivityProfile"));
        } else {
            web().validate();
        }
        if (ssh() != null) {
            ssh().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectivityProfile.class);
}
