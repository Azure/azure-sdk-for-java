// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The details of managed identity.
 */
@Fluent
public final class ManagedIdentityProfile implements JsonSerializable<ManagedIdentityProfile> {
    /*
     * The list of managed identity.
     */
    private List<ManagedIdentitySpec> identityList;

    /**
     * Creates an instance of ManagedIdentityProfile class.
     */
    public ManagedIdentityProfile() {
    }

    /**
     * Get the identityList property: The list of managed identity.
     * 
     * @return the identityList value.
     */
    public List<ManagedIdentitySpec> identityList() {
        return this.identityList;
    }

    /**
     * Set the identityList property: The list of managed identity.
     * 
     * @param identityList the identityList value to set.
     * @return the ManagedIdentityProfile object itself.
     */
    public ManagedIdentityProfile withIdentityList(List<ManagedIdentitySpec> identityList) {
        this.identityList = identityList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identityList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property identityList in model ManagedIdentityProfile"));
        } else {
            identityList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedIdentityProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("identityList", this.identityList, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIdentityProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIdentityProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedIdentityProfile.
     */
    public static ManagedIdentityProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIdentityProfile deserializedManagedIdentityProfile = new ManagedIdentityProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identityList".equals(fieldName)) {
                    List<ManagedIdentitySpec> identityList
                        = reader.readArray(reader1 -> ManagedIdentitySpec.fromJson(reader1));
                    deserializedManagedIdentityProfile.identityList = identityList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedIdentityProfile;
        });
    }
}
