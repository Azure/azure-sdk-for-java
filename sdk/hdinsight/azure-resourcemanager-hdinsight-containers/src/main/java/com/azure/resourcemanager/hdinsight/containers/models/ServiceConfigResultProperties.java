// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import java.util.Map;

/**
 * Cluster instance service config properties.
 */
@Fluent
public final class ServiceConfigResultProperties extends ServiceConfigListResultProperties {
    /**
     * Creates an instance of ServiceConfigResultProperties class.
     */
    public ServiceConfigResultProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withServiceName(String serviceName) {
        super.withServiceName(serviceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withFileName(String fileName) {
        super.withFileName(fileName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withContent(String content) {
        super.withContent(content);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withComponentName(String componentName) {
        super.withComponentName(componentName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withType(String type) {
        super.withType(type);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withPath(String path) {
        super.withPath(path);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withCustomKeys(Map<String, String> customKeys) {
        super.withCustomKeys(customKeys);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceConfigResultProperties withDefaultKeys(Map<String, ServiceConfigListResultValueEntity> defaultKeys) {
        super.withDefaultKeys(defaultKeys);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
