// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Secret reference and corresponding properties of a key vault secret.
 */
@Fluent
public final class SecretReference {
    /*
     * Reference name of the secret to be used in service configs.
     */
    @JsonProperty(value = "referenceName", required = true)
    private String referenceName;

    /*
     * Type of key vault object: secret, key or certificate.
     */
    @JsonProperty(value = "type", required = true)
    private KeyVaultObjectType type;

    /*
     * Version of the secret in key vault.
     */
    @JsonProperty(value = "version")
    private String version;

    /*
     * Object identifier name of the secret in key vault.
     */
    @JsonProperty(value = "keyVaultObjectName", required = true)
    private String keyVaultObjectName;

    /**
     * Creates an instance of SecretReference class.
     */
    public SecretReference() {
    }

    /**
     * Get the referenceName property: Reference name of the secret to be used in service configs.
     * 
     * @return the referenceName value.
     */
    public String referenceName() {
        return this.referenceName;
    }

    /**
     * Set the referenceName property: Reference name of the secret to be used in service configs.
     * 
     * @param referenceName the referenceName value to set.
     * @return the SecretReference object itself.
     */
    public SecretReference withReferenceName(String referenceName) {
        this.referenceName = referenceName;
        return this;
    }

    /**
     * Get the type property: Type of key vault object: secret, key or certificate.
     * 
     * @return the type value.
     */
    public KeyVaultObjectType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of key vault object: secret, key or certificate.
     * 
     * @param type the type value to set.
     * @return the SecretReference object itself.
     */
    public SecretReference withType(KeyVaultObjectType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the version property: Version of the secret in key vault.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of the secret in key vault.
     * 
     * @param version the version value to set.
     * @return the SecretReference object itself.
     */
    public SecretReference withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the keyVaultObjectName property: Object identifier name of the secret in key vault.
     * 
     * @return the keyVaultObjectName value.
     */
    public String keyVaultObjectName() {
        return this.keyVaultObjectName;
    }

    /**
     * Set the keyVaultObjectName property: Object identifier name of the secret in key vault.
     * 
     * @param keyVaultObjectName the keyVaultObjectName value to set.
     * @return the SecretReference object itself.
     */
    public SecretReference withKeyVaultObjectName(String keyVaultObjectName) {
        this.keyVaultObjectName = keyVaultObjectName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (referenceName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property referenceName in model SecretReference"));
        }
        if (type() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property type in model SecretReference"));
        }
        if (keyVaultObjectName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property keyVaultObjectName in model SecretReference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretReference.class);
}
