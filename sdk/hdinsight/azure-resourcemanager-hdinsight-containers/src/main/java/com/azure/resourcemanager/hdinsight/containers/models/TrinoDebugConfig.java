// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Trino debug configuration.
 */
@Fluent
public final class TrinoDebugConfig {
    /*
     * The flag that if enable debug or not.
     */
    @JsonProperty(value = "enable")
    private Boolean enable;

    /*
     * The debug port.
     */
    @JsonProperty(value = "port")
    private Integer port;

    /*
     * The flag that if suspend debug or not.
     */
    @JsonProperty(value = "suspend")
    private Boolean suspend;

    /**
     * Creates an instance of TrinoDebugConfig class.
     */
    public TrinoDebugConfig() {
    }

    /**
     * Get the enable property: The flag that if enable debug or not.
     * 
     * @return the enable value.
     */
    public Boolean enable() {
        return this.enable;
    }

    /**
     * Set the enable property: The flag that if enable debug or not.
     * 
     * @param enable the enable value to set.
     * @return the TrinoDebugConfig object itself.
     */
    public TrinoDebugConfig withEnable(Boolean enable) {
        this.enable = enable;
        return this;
    }

    /**
     * Get the port property: The debug port.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The debug port.
     * 
     * @param port the port value to set.
     * @return the TrinoDebugConfig object itself.
     */
    public TrinoDebugConfig withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the suspend property: The flag that if suspend debug or not.
     * 
     * @return the suspend value.
     */
    public Boolean suspend() {
        return this.suspend;
    }

    /**
     * Set the suspend property: The flag that if suspend debug or not.
     * 
     * @param suspend the suspend value to set.
     * @return the TrinoDebugConfig object itself.
     */
    public TrinoDebugConfig withSuspend(Boolean suspend) {
        this.suspend = suspend;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
