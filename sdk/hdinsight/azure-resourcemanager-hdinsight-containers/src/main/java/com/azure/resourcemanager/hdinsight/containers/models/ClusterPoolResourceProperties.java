// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster pool resource properties.
 */
@Fluent
public final class ClusterPoolResourceProperties implements JsonSerializable<ClusterPoolResourceProperties> {
    /*
     * Provisioning state of the resource.
     */
    private ProvisioningStatus provisioningState;

    /*
     * A unique id generated by the RP to identify the resource.
     */
    private String deploymentId;

    /*
     * A resource group created by RP, to hold the resources created by RP on-behalf of customers. It will also be used
     * to generate aksManagedResourceGroupName by pattern: MC_{managedResourceGroupName}_{clusterPoolName}_{region}.
     * Please make sure it meets resource group name restriction.
     */
    private String managedResourceGroupName;

    /*
     * A resource group created by AKS, to hold the infrastructure resources created by AKS on-behalf of customers. It
     * is generated by cluster pool name and managed resource group name by pattern:
     * MC_{managedResourceGroupName}_{clusterPoolName}_{region}
     */
    private String aksManagedResourceGroupName;

    /*
     * CLuster pool profile.
     */
    private ClusterPoolResourcePropertiesClusterPoolProfile clusterPoolProfile;

    /*
     * CLuster pool compute profile.
     */
    private ClusterPoolResourcePropertiesComputeProfile computeProfile;

    /*
     * Properties of underlying AKS cluster.
     */
    private ClusterPoolResourcePropertiesAksClusterProfile aksClusterProfile;

    /*
     * Cluster pool network profile.
     */
    private ClusterPoolResourcePropertiesNetworkProfile networkProfile;

    /*
     * Cluster pool log analytics profile to enable OMS agent for AKS cluster.
     */
    private ClusterPoolResourcePropertiesLogAnalyticsProfile logAnalyticsProfile;

    /*
     * Business status of the resource.
     */
    private String status;

    /**
     * Creates an instance of ClusterPoolResourceProperties class.
     */
    public ClusterPoolResourceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the deploymentId property: A unique id generated by the RP to identify the resource.
     * 
     * @return the deploymentId value.
     */
    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Get the managedResourceGroupName property: A resource group created by RP, to hold the resources created by RP
     * on-behalf of customers. It will also be used to generate aksManagedResourceGroupName by pattern:
     * MC_{managedResourceGroupName}_{clusterPoolName}_{region}. Please make sure it meets resource group name
     * restriction.
     * 
     * @return the managedResourceGroupName value.
     */
    public String managedResourceGroupName() {
        return this.managedResourceGroupName;
    }

    /**
     * Set the managedResourceGroupName property: A resource group created by RP, to hold the resources created by RP
     * on-behalf of customers. It will also be used to generate aksManagedResourceGroupName by pattern:
     * MC_{managedResourceGroupName}_{clusterPoolName}_{region}. Please make sure it meets resource group name
     * restriction.
     * 
     * @param managedResourceGroupName the managedResourceGroupName value to set.
     * @return the ClusterPoolResourceProperties object itself.
     */
    public ClusterPoolResourceProperties withManagedResourceGroupName(String managedResourceGroupName) {
        this.managedResourceGroupName = managedResourceGroupName;
        return this;
    }

    /**
     * Get the aksManagedResourceGroupName property: A resource group created by AKS, to hold the infrastructure
     * resources created by AKS on-behalf of customers. It is generated by cluster pool name and managed resource group
     * name by pattern: MC_{managedResourceGroupName}_{clusterPoolName}_{region}.
     * 
     * @return the aksManagedResourceGroupName value.
     */
    public String aksManagedResourceGroupName() {
        return this.aksManagedResourceGroupName;
    }

    /**
     * Get the clusterPoolProfile property: CLuster pool profile.
     * 
     * @return the clusterPoolProfile value.
     */
    public ClusterPoolResourcePropertiesClusterPoolProfile clusterPoolProfile() {
        return this.clusterPoolProfile;
    }

    /**
     * Set the clusterPoolProfile property: CLuster pool profile.
     * 
     * @param clusterPoolProfile the clusterPoolProfile value to set.
     * @return the ClusterPoolResourceProperties object itself.
     */
    public ClusterPoolResourceProperties
        withClusterPoolProfile(ClusterPoolResourcePropertiesClusterPoolProfile clusterPoolProfile) {
        this.clusterPoolProfile = clusterPoolProfile;
        return this;
    }

    /**
     * Get the computeProfile property: CLuster pool compute profile.
     * 
     * @return the computeProfile value.
     */
    public ClusterPoolResourcePropertiesComputeProfile computeProfile() {
        return this.computeProfile;
    }

    /**
     * Set the computeProfile property: CLuster pool compute profile.
     * 
     * @param computeProfile the computeProfile value to set.
     * @return the ClusterPoolResourceProperties object itself.
     */
    public ClusterPoolResourceProperties
        withComputeProfile(ClusterPoolResourcePropertiesComputeProfile computeProfile) {
        this.computeProfile = computeProfile;
        return this;
    }

    /**
     * Get the aksClusterProfile property: Properties of underlying AKS cluster.
     * 
     * @return the aksClusterProfile value.
     */
    public ClusterPoolResourcePropertiesAksClusterProfile aksClusterProfile() {
        return this.aksClusterProfile;
    }

    /**
     * Get the networkProfile property: Cluster pool network profile.
     * 
     * @return the networkProfile value.
     */
    public ClusterPoolResourcePropertiesNetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: Cluster pool network profile.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the ClusterPoolResourceProperties object itself.
     */
    public ClusterPoolResourceProperties
        withNetworkProfile(ClusterPoolResourcePropertiesNetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the logAnalyticsProfile property: Cluster pool log analytics profile to enable OMS agent for AKS cluster.
     * 
     * @return the logAnalyticsProfile value.
     */
    public ClusterPoolResourcePropertiesLogAnalyticsProfile logAnalyticsProfile() {
        return this.logAnalyticsProfile;
    }

    /**
     * Set the logAnalyticsProfile property: Cluster pool log analytics profile to enable OMS agent for AKS cluster.
     * 
     * @param logAnalyticsProfile the logAnalyticsProfile value to set.
     * @return the ClusterPoolResourceProperties object itself.
     */
    public ClusterPoolResourceProperties
        withLogAnalyticsProfile(ClusterPoolResourcePropertiesLogAnalyticsProfile logAnalyticsProfile) {
        this.logAnalyticsProfile = logAnalyticsProfile;
        return this;
    }

    /**
     * Get the status property: Business status of the resource.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterPoolProfile() != null) {
            clusterPoolProfile().validate();
        }
        if (computeProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property computeProfile in model ClusterPoolResourceProperties"));
        } else {
            computeProfile().validate();
        }
        if (aksClusterProfile() != null) {
            aksClusterProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (logAnalyticsProfile() != null) {
            logAnalyticsProfile().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterPoolResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("computeProfile", this.computeProfile);
        jsonWriter.writeStringField("managedResourceGroupName", this.managedResourceGroupName);
        jsonWriter.writeJsonField("clusterPoolProfile", this.clusterPoolProfile);
        jsonWriter.writeJsonField("networkProfile", this.networkProfile);
        jsonWriter.writeJsonField("logAnalyticsProfile", this.logAnalyticsProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterPoolResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterPoolResourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterPoolResourceProperties.
     */
    public static ClusterPoolResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterPoolResourceProperties deserializedClusterPoolResourceProperties
                = new ClusterPoolResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeProfile".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.computeProfile
                        = ClusterPoolResourcePropertiesComputeProfile.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.provisioningState
                        = ProvisioningStatus.fromString(reader.getString());
                } else if ("deploymentId".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.deploymentId = reader.getString();
                } else if ("managedResourceGroupName".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.managedResourceGroupName = reader.getString();
                } else if ("aksManagedResourceGroupName".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.aksManagedResourceGroupName = reader.getString();
                } else if ("clusterPoolProfile".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.clusterPoolProfile
                        = ClusterPoolResourcePropertiesClusterPoolProfile.fromJson(reader);
                } else if ("aksClusterProfile".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.aksClusterProfile
                        = ClusterPoolResourcePropertiesAksClusterProfile.fromJson(reader);
                } else if ("networkProfile".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.networkProfile
                        = ClusterPoolResourcePropertiesNetworkProfile.fromJson(reader);
                } else if ("logAnalyticsProfile".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.logAnalyticsProfile
                        = ClusterPoolResourcePropertiesLogAnalyticsProfile.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedClusterPoolResourceProperties.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterPoolResourceProperties;
        });
    }
}
