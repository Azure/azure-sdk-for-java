// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ranger cluster profile.
 */
@Fluent
public final class RangerProfile implements JsonSerializable<RangerProfile> {
    /*
     * Specification for the Ranger Admin service.
     */
    private RangerAdminSpec rangerAdmin;

    /*
     * Properties required to describe audit log storage.
     */
    private RangerAuditSpec rangerAudit;

    /*
     * Specification for the Ranger Usersync service
     */
    private RangerUsersyncSpec rangerUsersync;

    /**
     * Creates an instance of RangerProfile class.
     */
    public RangerProfile() {
    }

    /**
     * Get the rangerAdmin property: Specification for the Ranger Admin service.
     * 
     * @return the rangerAdmin value.
     */
    public RangerAdminSpec rangerAdmin() {
        return this.rangerAdmin;
    }

    /**
     * Set the rangerAdmin property: Specification for the Ranger Admin service.
     * 
     * @param rangerAdmin the rangerAdmin value to set.
     * @return the RangerProfile object itself.
     */
    public RangerProfile withRangerAdmin(RangerAdminSpec rangerAdmin) {
        this.rangerAdmin = rangerAdmin;
        return this;
    }

    /**
     * Get the rangerAudit property: Properties required to describe audit log storage.
     * 
     * @return the rangerAudit value.
     */
    public RangerAuditSpec rangerAudit() {
        return this.rangerAudit;
    }

    /**
     * Set the rangerAudit property: Properties required to describe audit log storage.
     * 
     * @param rangerAudit the rangerAudit value to set.
     * @return the RangerProfile object itself.
     */
    public RangerProfile withRangerAudit(RangerAuditSpec rangerAudit) {
        this.rangerAudit = rangerAudit;
        return this;
    }

    /**
     * Get the rangerUsersync property: Specification for the Ranger Usersync service.
     * 
     * @return the rangerUsersync value.
     */
    public RangerUsersyncSpec rangerUsersync() {
        return this.rangerUsersync;
    }

    /**
     * Set the rangerUsersync property: Specification for the Ranger Usersync service.
     * 
     * @param rangerUsersync the rangerUsersync value to set.
     * @return the RangerProfile object itself.
     */
    public RangerProfile withRangerUsersync(RangerUsersyncSpec rangerUsersync) {
        this.rangerUsersync = rangerUsersync;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rangerAdmin() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property rangerAdmin in model RangerProfile"));
        } else {
            rangerAdmin().validate();
        }
        if (rangerAudit() != null) {
            rangerAudit().validate();
        }
        if (rangerUsersync() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property rangerUsersync in model RangerProfile"));
        } else {
            rangerUsersync().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RangerProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("rangerAdmin", this.rangerAdmin);
        jsonWriter.writeJsonField("rangerUsersync", this.rangerUsersync);
        jsonWriter.writeJsonField("rangerAudit", this.rangerAudit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RangerProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RangerProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RangerProfile.
     */
    public static RangerProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RangerProfile deserializedRangerProfile = new RangerProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rangerAdmin".equals(fieldName)) {
                    deserializedRangerProfile.rangerAdmin = RangerAdminSpec.fromJson(reader);
                } else if ("rangerUsersync".equals(fieldName)) {
                    deserializedRangerProfile.rangerUsersync = RangerUsersyncSpec.fromJson(reader);
                } else if ("rangerAudit".equals(fieldName)) {
                    deserializedRangerProfile.rangerAudit = RangerAuditSpec.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRangerProfile;
        });
    }
}
