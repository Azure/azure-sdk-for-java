// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The ranger cluster profile.
 */
@Fluent
public final class RangerProfile {
    /*
     * Specification for the Ranger Admin service.
     */
    @JsonProperty(value = "rangerAdmin", required = true)
    private RangerAdminSpec rangerAdmin;

    /*
     * Properties required to describe audit log storage.
     */
    @JsonProperty(value = "rangerAudit")
    private RangerAuditSpec rangerAudit;

    /*
     * Specification for the Ranger Usersync service
     */
    @JsonProperty(value = "rangerUsersync", required = true)
    private RangerUsersyncSpec rangerUsersync;

    /**
     * Creates an instance of RangerProfile class.
     */
    public RangerProfile() {
    }

    /**
     * Get the rangerAdmin property: Specification for the Ranger Admin service.
     * 
     * @return the rangerAdmin value.
     */
    public RangerAdminSpec rangerAdmin() {
        return this.rangerAdmin;
    }

    /**
     * Set the rangerAdmin property: Specification for the Ranger Admin service.
     * 
     * @param rangerAdmin the rangerAdmin value to set.
     * @return the RangerProfile object itself.
     */
    public RangerProfile withRangerAdmin(RangerAdminSpec rangerAdmin) {
        this.rangerAdmin = rangerAdmin;
        return this;
    }

    /**
     * Get the rangerAudit property: Properties required to describe audit log storage.
     * 
     * @return the rangerAudit value.
     */
    public RangerAuditSpec rangerAudit() {
        return this.rangerAudit;
    }

    /**
     * Set the rangerAudit property: Properties required to describe audit log storage.
     * 
     * @param rangerAudit the rangerAudit value to set.
     * @return the RangerProfile object itself.
     */
    public RangerProfile withRangerAudit(RangerAuditSpec rangerAudit) {
        this.rangerAudit = rangerAudit;
        return this;
    }

    /**
     * Get the rangerUsersync property: Specification for the Ranger Usersync service.
     * 
     * @return the rangerUsersync value.
     */
    public RangerUsersyncSpec rangerUsersync() {
        return this.rangerUsersync;
    }

    /**
     * Set the rangerUsersync property: Specification for the Ranger Usersync service.
     * 
     * @param rangerUsersync the rangerUsersync value to set.
     * @return the RangerProfile object itself.
     */
    public RangerProfile withRangerUsersync(RangerUsersyncSpec rangerUsersync) {
        this.rangerUsersync = rangerUsersync;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rangerAdmin() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property rangerAdmin in model RangerProfile"));
        } else {
            rangerAdmin().validate();
        }
        if (rangerAudit() != null) {
            rangerAudit().validate();
        }
        if (rangerUsersync() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property rangerUsersync in model RangerProfile"));
        } else {
            rangerUsersync().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RangerProfile.class);
}
