// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster patch version upgrade rollback history properties.
 */
@Fluent
public final class ClusterPatchVersionUpgradeRollbackHistoryProperties extends ClusterInPlaceUpgradeHistoryProperties {
    /*
     * Type of upgrade.
     */
    private ClusterUpgradeHistoryType upgradeType = ClusterUpgradeHistoryType.PATCH_VERSION_UPGRADE_ROLLBACK;

    /**
     * Creates an instance of ClusterPatchVersionUpgradeRollbackHistoryProperties class.
     */
    public ClusterPatchVersionUpgradeRollbackHistoryProperties() {
    }

    /**
     * Get the upgradeType property: Type of upgrade.
     * 
     * @return the upgradeType value.
     */
    @Override
    public ClusterUpgradeHistoryType upgradeType() {
        return this.upgradeType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withSourceClusterVersion(String sourceClusterVersion) {
        super.withSourceClusterVersion(sourceClusterVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withSourceOssVersion(String sourceOssVersion) {
        super.withSourceOssVersion(sourceOssVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withSourceBuildNumber(String sourceBuildNumber) {
        super.withSourceBuildNumber(sourceBuildNumber);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withTargetClusterVersion(String targetClusterVersion) {
        super.withTargetClusterVersion(targetClusterVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withTargetOssVersion(String targetOssVersion) {
        super.withTargetOssVersion(targetOssVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withTargetBuildNumber(String targetBuildNumber) {
        super.withTargetBuildNumber(targetBuildNumber);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withComponentName(String componentName) {
        super.withComponentName(componentName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties
        withSeverity(ClusterUpgradeHistorySeverityType severity) {
        super.withSeverity(severity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties withUtcTime(String utcTime) {
        super.withUtcTime(utcTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPatchVersionUpgradeRollbackHistoryProperties
        withUpgradeResult(ClusterUpgradeHistoryUpgradeResultType upgradeResult) {
        super.withUpgradeResult(upgradeResult);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("utcTime", utcTime());
        jsonWriter.writeStringField("upgradeResult", upgradeResult() == null ? null : upgradeResult().toString());
        jsonWriter.writeStringField("sourceClusterVersion", sourceClusterVersion());
        jsonWriter.writeStringField("sourceOssVersion", sourceOssVersion());
        jsonWriter.writeStringField("sourceBuildNumber", sourceBuildNumber());
        jsonWriter.writeStringField("targetClusterVersion", targetClusterVersion());
        jsonWriter.writeStringField("targetOssVersion", targetOssVersion());
        jsonWriter.writeStringField("targetBuildNumber", targetBuildNumber());
        jsonWriter.writeStringField("componentName", componentName());
        jsonWriter.writeStringField("severity", severity() == null ? null : severity().toString());
        jsonWriter.writeStringField("upgradeType", this.upgradeType == null ? null : this.upgradeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterPatchVersionUpgradeRollbackHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterPatchVersionUpgradeRollbackHistoryProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterPatchVersionUpgradeRollbackHistoryProperties.
     */
    public static ClusterPatchVersionUpgradeRollbackHistoryProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterPatchVersionUpgradeRollbackHistoryProperties deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                = new ClusterPatchVersionUpgradeRollbackHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("utcTime".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties.withUtcTime(reader.getString());
                } else if ("upgradeResult".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withUpgradeResult(ClusterUpgradeHistoryUpgradeResultType.fromString(reader.getString()));
                } else if ("sourceClusterVersion".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withSourceClusterVersion(reader.getString());
                } else if ("sourceOssVersion".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withSourceOssVersion(reader.getString());
                } else if ("sourceBuildNumber".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withSourceBuildNumber(reader.getString());
                } else if ("targetClusterVersion".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withTargetClusterVersion(reader.getString());
                } else if ("targetOssVersion".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withTargetOssVersion(reader.getString());
                } else if ("targetBuildNumber".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withTargetBuildNumber(reader.getString());
                } else if ("componentName".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withComponentName(reader.getString());
                } else if ("severity".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties
                        .withSeverity(ClusterUpgradeHistorySeverityType.fromString(reader.getString()));
                } else if ("upgradeType".equals(fieldName)) {
                    deserializedClusterPatchVersionUpgradeRollbackHistoryProperties.upgradeType
                        = ClusterUpgradeHistoryType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterPatchVersionUpgradeRollbackHistoryProperties;
        });
    }
}
