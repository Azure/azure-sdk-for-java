// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of a library in the cluster.
 */
@Fluent
public class ClusterLibraryProperties implements JsonSerializable<ClusterLibraryProperties> {
    /*
     * Type of the library.
     */
    private Type type = Type.fromString("ClusterLibraryProperties");

    /*
     * Remark of the latest library management operation.
     */
    private String remarks;

    /*
     * Timestamp of the latest library management operation.
     */
    private OffsetDateTime timestamp;

    /*
     * Status of the library.
     */
    private Status status;

    /*
     * Error message of the library operation when a failure occurs.
     */
    private String message;

    /**
     * Creates an instance of ClusterLibraryProperties class.
     */
    public ClusterLibraryProperties() {
    }

    /**
     * Get the type property: Type of the library.
     * 
     * @return the type value.
     */
    public Type type() {
        return this.type;
    }

    /**
     * Get the remarks property: Remark of the latest library management operation.
     * 
     * @return the remarks value.
     */
    public String remarks() {
        return this.remarks;
    }

    /**
     * Set the remarks property: Remark of the latest library management operation.
     * 
     * @param remarks the remarks value to set.
     * @return the ClusterLibraryProperties object itself.
     */
    public ClusterLibraryProperties withRemarks(String remarks) {
        this.remarks = remarks;
        return this;
    }

    /**
     * Get the timestamp property: Timestamp of the latest library management operation.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Timestamp of the latest library management operation.
     * 
     * @param timestamp the timestamp value to set.
     * @return the ClusterLibraryProperties object itself.
     */
    ClusterLibraryProperties withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the status property: Status of the library.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the library.
     * 
     * @param status the status value to set.
     * @return the ClusterLibraryProperties object itself.
     */
    ClusterLibraryProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the message property: Error message of the library operation when a failure occurs.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Error message of the library operation when a failure occurs.
     * 
     * @param message the message value to set.
     * @return the ClusterLibraryProperties object itself.
     */
    ClusterLibraryProperties withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("remarks", this.remarks);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterLibraryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterLibraryProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterLibraryProperties.
     */
    public static ClusterLibraryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("pypi".equals(discriminatorValue)) {
                    return PyPiLibraryProperties.fromJson(readerToUse.reset());
                } else if ("maven".equals(discriminatorValue)) {
                    return MavenLibraryProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ClusterLibraryProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterLibraryProperties deserializedClusterLibraryProperties = new ClusterLibraryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedClusterLibraryProperties.type = Type.fromString(reader.getString());
                } else if ("remarks".equals(fieldName)) {
                    deserializedClusterLibraryProperties.remarks = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedClusterLibraryProperties.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedClusterLibraryProperties.status = Status.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedClusterLibraryProperties.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterLibraryProperties;
        });
    }
}
