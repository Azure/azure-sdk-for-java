// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.NameAvailabilityResultInner;
import com.azure.resourcemanager.hdinsight.containers.models.NameAvailabilityParameters;

/**
 * An instance of this class provides access to all the operations defined in LocationsClient.
 */
public interface LocationsClient {
    /**
     * Check the availability of the resource name.
     * 
     * @param location The name of the Azure region.
     * @param nameAvailabilityParameters The name and type of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of check name availability along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NameAvailabilityResultInner> checkNameAvailabilityWithResponse(String location,
        NameAvailabilityParameters nameAvailabilityParameters, Context context);

    /**
     * Check the availability of the resource name.
     * 
     * @param location The name of the Azure region.
     * @param nameAvailabilityParameters The name and type of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of check name availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NameAvailabilityResultInner checkNameAvailability(String location,
        NameAvailabilityParameters nameAvailabilityParameters);
}
