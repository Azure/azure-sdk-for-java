// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The storage profile.
 */
@Fluent
public final class FlinkStorageProfile implements JsonSerializable<FlinkStorageProfile> {
    /*
     * Storage account uri which is used for savepoint and checkpoint state.
     */
    private String storageUri;

    /*
     * Storage key is only required for wasb(s) storage.
     */
    private String storagekey;

    /**
     * Creates an instance of FlinkStorageProfile class.
     */
    public FlinkStorageProfile() {
    }

    /**
     * Get the storageUri property: Storage account uri which is used for savepoint and checkpoint state.
     * 
     * @return the storageUri value.
     */
    public String storageUri() {
        return this.storageUri;
    }

    /**
     * Set the storageUri property: Storage account uri which is used for savepoint and checkpoint state.
     * 
     * @param storageUri the storageUri value to set.
     * @return the FlinkStorageProfile object itself.
     */
    public FlinkStorageProfile withStorageUri(String storageUri) {
        this.storageUri = storageUri;
        return this;
    }

    /**
     * Get the storagekey property: Storage key is only required for wasb(s) storage.
     * 
     * @return the storagekey value.
     */
    public String storagekey() {
        return this.storagekey;
    }

    /**
     * Set the storagekey property: Storage key is only required for wasb(s) storage.
     * 
     * @param storagekey the storagekey value to set.
     * @return the FlinkStorageProfile object itself.
     */
    public FlinkStorageProfile withStoragekey(String storagekey) {
        this.storagekey = storagekey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property storageUri in model FlinkStorageProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FlinkStorageProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageUri", this.storageUri);
        jsonWriter.writeStringField("storagekey", this.storagekey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlinkStorageProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlinkStorageProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FlinkStorageProfile.
     */
    public static FlinkStorageProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlinkStorageProfile deserializedFlinkStorageProfile = new FlinkStorageProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageUri".equals(fieldName)) {
                    deserializedFlinkStorageProfile.storageUri = reader.getString();
                } else if ("storagekey".equals(fieldName)) {
                    deserializedFlinkStorageProfile.storagekey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlinkStorageProfile;
        });
    }
}
