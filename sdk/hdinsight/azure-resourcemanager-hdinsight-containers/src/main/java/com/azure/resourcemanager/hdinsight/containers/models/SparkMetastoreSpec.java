// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The metastore specification for Spark cluster.
 */
@Fluent
public final class SparkMetastoreSpec implements JsonSerializable<SparkMetastoreSpec> {
    /*
     * The database server host.
     */
    private String dbServerHost;

    /*
     * The database name.
     */
    private String dbName;

    /*
     * The authentication mode to connect to your Hive metastore database. More details:
     * https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-
     * authorization
     */
    private DbConnectionAuthenticationMode dbConnectionAuthenticationMode;

    /*
     * The database user name.
     */
    private String dbUsername;

    /*
     * The secret name which contains the database user password.
     */
    private String dbPasswordSecretName;

    /*
     * The key vault resource id.
     */
    private String keyVaultId;

    /*
     * The thrift url.
     */
    private String thriftUrl;

    /**
     * Creates an instance of SparkMetastoreSpec class.
     */
    public SparkMetastoreSpec() {
    }

    /**
     * Get the dbServerHost property: The database server host.
     * 
     * @return the dbServerHost value.
     */
    public String dbServerHost() {
        return this.dbServerHost;
    }

    /**
     * Set the dbServerHost property: The database server host.
     * 
     * @param dbServerHost the dbServerHost value to set.
     * @return the SparkMetastoreSpec object itself.
     */
    public SparkMetastoreSpec withDbServerHost(String dbServerHost) {
        this.dbServerHost = dbServerHost;
        return this;
    }

    /**
     * Get the dbName property: The database name.
     * 
     * @return the dbName value.
     */
    public String dbName() {
        return this.dbName;
    }

    /**
     * Set the dbName property: The database name.
     * 
     * @param dbName the dbName value to set.
     * @return the SparkMetastoreSpec object itself.
     */
    public SparkMetastoreSpec withDbName(String dbName) {
        this.dbName = dbName;
        return this;
    }

    /**
     * Get the dbConnectionAuthenticationMode property: The authentication mode to connect to your Hive metastore
     * database. More details:
     * https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization.
     * 
     * @return the dbConnectionAuthenticationMode value.
     */
    public DbConnectionAuthenticationMode dbConnectionAuthenticationMode() {
        return this.dbConnectionAuthenticationMode;
    }

    /**
     * Set the dbConnectionAuthenticationMode property: The authentication mode to connect to your Hive metastore
     * database. More details:
     * https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization.
     * 
     * @param dbConnectionAuthenticationMode the dbConnectionAuthenticationMode value to set.
     * @return the SparkMetastoreSpec object itself.
     */
    public SparkMetastoreSpec
        withDbConnectionAuthenticationMode(DbConnectionAuthenticationMode dbConnectionAuthenticationMode) {
        this.dbConnectionAuthenticationMode = dbConnectionAuthenticationMode;
        return this;
    }

    /**
     * Get the dbUsername property: The database user name.
     * 
     * @return the dbUsername value.
     */
    public String dbUsername() {
        return this.dbUsername;
    }

    /**
     * Set the dbUsername property: The database user name.
     * 
     * @param dbUsername the dbUsername value to set.
     * @return the SparkMetastoreSpec object itself.
     */
    public SparkMetastoreSpec withDbUsername(String dbUsername) {
        this.dbUsername = dbUsername;
        return this;
    }

    /**
     * Get the dbPasswordSecretName property: The secret name which contains the database user password.
     * 
     * @return the dbPasswordSecretName value.
     */
    public String dbPasswordSecretName() {
        return this.dbPasswordSecretName;
    }

    /**
     * Set the dbPasswordSecretName property: The secret name which contains the database user password.
     * 
     * @param dbPasswordSecretName the dbPasswordSecretName value to set.
     * @return the SparkMetastoreSpec object itself.
     */
    public SparkMetastoreSpec withDbPasswordSecretName(String dbPasswordSecretName) {
        this.dbPasswordSecretName = dbPasswordSecretName;
        return this;
    }

    /**
     * Get the keyVaultId property: The key vault resource id.
     * 
     * @return the keyVaultId value.
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Set the keyVaultId property: The key vault resource id.
     * 
     * @param keyVaultId the keyVaultId value to set.
     * @return the SparkMetastoreSpec object itself.
     */
    public SparkMetastoreSpec withKeyVaultId(String keyVaultId) {
        this.keyVaultId = keyVaultId;
        return this;
    }

    /**
     * Get the thriftUrl property: The thrift url.
     * 
     * @return the thriftUrl value.
     */
    public String thriftUrl() {
        return this.thriftUrl;
    }

    /**
     * Set the thriftUrl property: The thrift url.
     * 
     * @param thriftUrl the thriftUrl value to set.
     * @return the SparkMetastoreSpec object itself.
     */
    public SparkMetastoreSpec withThriftUrl(String thriftUrl) {
        this.thriftUrl = thriftUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dbServerHost() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property dbServerHost in model SparkMetastoreSpec"));
        }
        if (dbName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dbName in model SparkMetastoreSpec"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SparkMetastoreSpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dbServerHost", this.dbServerHost);
        jsonWriter.writeStringField("dbName", this.dbName);
        jsonWriter.writeStringField("dbConnectionAuthenticationMode",
            this.dbConnectionAuthenticationMode == null ? null : this.dbConnectionAuthenticationMode.toString());
        jsonWriter.writeStringField("dbUserName", this.dbUsername);
        jsonWriter.writeStringField("dbPasswordSecretName", this.dbPasswordSecretName);
        jsonWriter.writeStringField("keyVaultId", this.keyVaultId);
        jsonWriter.writeStringField("thriftUrl", this.thriftUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkMetastoreSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkMetastoreSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SparkMetastoreSpec.
     */
    public static SparkMetastoreSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkMetastoreSpec deserializedSparkMetastoreSpec = new SparkMetastoreSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dbServerHost".equals(fieldName)) {
                    deserializedSparkMetastoreSpec.dbServerHost = reader.getString();
                } else if ("dbName".equals(fieldName)) {
                    deserializedSparkMetastoreSpec.dbName = reader.getString();
                } else if ("dbConnectionAuthenticationMode".equals(fieldName)) {
                    deserializedSparkMetastoreSpec.dbConnectionAuthenticationMode
                        = DbConnectionAuthenticationMode.fromString(reader.getString());
                } else if ("dbUserName".equals(fieldName)) {
                    deserializedSparkMetastoreSpec.dbUsername = reader.getString();
                } else if ("dbPasswordSecretName".equals(fieldName)) {
                    deserializedSparkMetastoreSpec.dbPasswordSecretName = reader.getString();
                } else if ("keyVaultId".equals(fieldName)) {
                    deserializedSparkMetastoreSpec.keyVaultId = reader.getString();
                } else if ("thriftUrl".equals(fieldName)) {
                    deserializedSparkMetastoreSpec.thriftUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkMetastoreSpec;
        });
    }
}
