// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster in-place upgrade history properties.
 */
@Fluent
public class ClusterInPlaceUpgradeHistoryProperties extends ClusterUpgradeHistoryProperties {
    /*
     * Type of upgrade.
     */
    private ClusterUpgradeHistoryType upgradeType
        = ClusterUpgradeHistoryType.fromString("ClusterInPlaceUpgradeHistoryProperties");

    /*
     * Version with three part.
     */
    private String sourceClusterVersion;

    /*
     * Version with three part.
     */
    private String sourceOssVersion;

    /*
     * Source build number.
     */
    private String sourceBuildNumber;

    /*
     * Version with three part.
     */
    private String targetClusterVersion;

    /*
     * Version with three part.
     */
    private String targetOssVersion;

    /*
     * Target build number.
     */
    private String targetBuildNumber;

    /*
     * Component name to upgrade.
     */
    private String componentName;

    /*
     * Severity of this upgrade.
     */
    private ClusterUpgradeHistorySeverityType severity;

    /**
     * Creates an instance of ClusterInPlaceUpgradeHistoryProperties class.
     */
    public ClusterInPlaceUpgradeHistoryProperties() {
    }

    /**
     * Get the upgradeType property: Type of upgrade.
     * 
     * @return the upgradeType value.
     */
    @Override
    public ClusterUpgradeHistoryType upgradeType() {
        return this.upgradeType;
    }

    /**
     * Get the sourceClusterVersion property: Version with three part.
     * 
     * @return the sourceClusterVersion value.
     */
    public String sourceClusterVersion() {
        return this.sourceClusterVersion;
    }

    /**
     * Set the sourceClusterVersion property: Version with three part.
     * 
     * @param sourceClusterVersion the sourceClusterVersion value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withSourceClusterVersion(String sourceClusterVersion) {
        this.sourceClusterVersion = sourceClusterVersion;
        return this;
    }

    /**
     * Get the sourceOssVersion property: Version with three part.
     * 
     * @return the sourceOssVersion value.
     */
    public String sourceOssVersion() {
        return this.sourceOssVersion;
    }

    /**
     * Set the sourceOssVersion property: Version with three part.
     * 
     * @param sourceOssVersion the sourceOssVersion value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withSourceOssVersion(String sourceOssVersion) {
        this.sourceOssVersion = sourceOssVersion;
        return this;
    }

    /**
     * Get the sourceBuildNumber property: Source build number.
     * 
     * @return the sourceBuildNumber value.
     */
    public String sourceBuildNumber() {
        return this.sourceBuildNumber;
    }

    /**
     * Set the sourceBuildNumber property: Source build number.
     * 
     * @param sourceBuildNumber the sourceBuildNumber value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withSourceBuildNumber(String sourceBuildNumber) {
        this.sourceBuildNumber = sourceBuildNumber;
        return this;
    }

    /**
     * Get the targetClusterVersion property: Version with three part.
     * 
     * @return the targetClusterVersion value.
     */
    public String targetClusterVersion() {
        return this.targetClusterVersion;
    }

    /**
     * Set the targetClusterVersion property: Version with three part.
     * 
     * @param targetClusterVersion the targetClusterVersion value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withTargetClusterVersion(String targetClusterVersion) {
        this.targetClusterVersion = targetClusterVersion;
        return this;
    }

    /**
     * Get the targetOssVersion property: Version with three part.
     * 
     * @return the targetOssVersion value.
     */
    public String targetOssVersion() {
        return this.targetOssVersion;
    }

    /**
     * Set the targetOssVersion property: Version with three part.
     * 
     * @param targetOssVersion the targetOssVersion value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withTargetOssVersion(String targetOssVersion) {
        this.targetOssVersion = targetOssVersion;
        return this;
    }

    /**
     * Get the targetBuildNumber property: Target build number.
     * 
     * @return the targetBuildNumber value.
     */
    public String targetBuildNumber() {
        return this.targetBuildNumber;
    }

    /**
     * Set the targetBuildNumber property: Target build number.
     * 
     * @param targetBuildNumber the targetBuildNumber value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withTargetBuildNumber(String targetBuildNumber) {
        this.targetBuildNumber = targetBuildNumber;
        return this;
    }

    /**
     * Get the componentName property: Component name to upgrade.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Set the componentName property: Component name to upgrade.
     * 
     * @param componentName the componentName value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }

    /**
     * Get the severity property: Severity of this upgrade.
     * 
     * @return the severity value.
     */
    public ClusterUpgradeHistorySeverityType severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of this upgrade.
     * 
     * @param severity the severity value to set.
     * @return the ClusterInPlaceUpgradeHistoryProperties object itself.
     */
    public ClusterInPlaceUpgradeHistoryProperties withSeverity(ClusterUpgradeHistorySeverityType severity) {
        this.severity = severity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInPlaceUpgradeHistoryProperties withUtcTime(String utcTime) {
        super.withUtcTime(utcTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInPlaceUpgradeHistoryProperties
        withUpgradeResult(ClusterUpgradeHistoryUpgradeResultType upgradeResult) {
        super.withUpgradeResult(upgradeResult);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("utcTime", utcTime());
        jsonWriter.writeStringField("upgradeResult", upgradeResult() == null ? null : upgradeResult().toString());
        jsonWriter.writeStringField("upgradeType", this.upgradeType == null ? null : this.upgradeType.toString());
        jsonWriter.writeStringField("sourceClusterVersion", this.sourceClusterVersion);
        jsonWriter.writeStringField("sourceOssVersion", this.sourceOssVersion);
        jsonWriter.writeStringField("sourceBuildNumber", this.sourceBuildNumber);
        jsonWriter.writeStringField("targetClusterVersion", this.targetClusterVersion);
        jsonWriter.writeStringField("targetOssVersion", this.targetOssVersion);
        jsonWriter.writeStringField("targetBuildNumber", this.targetBuildNumber);
        jsonWriter.writeStringField("componentName", this.componentName);
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterInPlaceUpgradeHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterInPlaceUpgradeHistoryProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterInPlaceUpgradeHistoryProperties.
     */
    public static ClusterInPlaceUpgradeHistoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("upgradeType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("HotfixUpgrade".equals(discriminatorValue)) {
                    return ClusterHotfixUpgradeHistoryProperties.fromJson(readerToUse.reset());
                } else if ("HotfixUpgradeRollback".equals(discriminatorValue)) {
                    return ClusterHotfixUpgradeRollbackHistoryProperties.fromJson(readerToUse.reset());
                } else if ("PatchVersionUpgrade".equals(discriminatorValue)) {
                    return ClusterPatchVersionUpgradeHistoryProperties.fromJson(readerToUse.reset());
                } else if ("PatchVersionUpgradeRollback".equals(discriminatorValue)) {
                    return ClusterPatchVersionUpgradeRollbackHistoryProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ClusterInPlaceUpgradeHistoryProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterInPlaceUpgradeHistoryProperties deserializedClusterInPlaceUpgradeHistoryProperties
                = new ClusterInPlaceUpgradeHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("utcTime".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.withUtcTime(reader.getString());
                } else if ("upgradeResult".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties
                        .withUpgradeResult(ClusterUpgradeHistoryUpgradeResultType.fromString(reader.getString()));
                } else if ("upgradeType".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.upgradeType
                        = ClusterUpgradeHistoryType.fromString(reader.getString());
                } else if ("sourceClusterVersion".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.sourceClusterVersion = reader.getString();
                } else if ("sourceOssVersion".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.sourceOssVersion = reader.getString();
                } else if ("sourceBuildNumber".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.sourceBuildNumber = reader.getString();
                } else if ("targetClusterVersion".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.targetClusterVersion = reader.getString();
                } else if ("targetOssVersion".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.targetOssVersion = reader.getString();
                } else if ("targetBuildNumber".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.targetBuildNumber = reader.getString();
                } else if ("componentName".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.componentName = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedClusterInPlaceUpgradeHistoryProperties.severity
                        = ClusterUpgradeHistorySeverityType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterInPlaceUpgradeHistoryProperties;
        });
    }
}
