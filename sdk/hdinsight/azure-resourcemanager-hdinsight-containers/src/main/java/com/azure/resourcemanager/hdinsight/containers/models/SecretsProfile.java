// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The cluster secret profile.
 */
@Fluent
public final class SecretsProfile {
    /*
     * Name of the user Key Vault where all the cluster specific user secrets are stored.
     */
    @JsonProperty(value = "keyVaultResourceId", required = true)
    private String keyVaultResourceId;

    /*
     * Properties of Key Vault secret.
     */
    @JsonProperty(value = "secrets")
    private List<SecretReference> secrets;

    /**
     * Creates an instance of SecretsProfile class.
     */
    public SecretsProfile() {
    }

    /**
     * Get the keyVaultResourceId property: Name of the user Key Vault where all the cluster specific user secrets are
     * stored.
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.keyVaultResourceId;
    }

    /**
     * Set the keyVaultResourceId property: Name of the user Key Vault where all the cluster specific user secrets are
     * stored.
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the SecretsProfile object itself.
     */
    public SecretsProfile withKeyVaultResourceId(String keyVaultResourceId) {
        this.keyVaultResourceId = keyVaultResourceId;
        return this;
    }

    /**
     * Get the secrets property: Properties of Key Vault secret.
     * 
     * @return the secrets value.
     */
    public List<SecretReference> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Properties of Key Vault secret.
     * 
     * @param secrets the secrets value to set.
     * @return the SecretsProfile object itself.
     */
    public SecretsProfile withSecrets(List<SecretReference> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultResourceId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property keyVaultResourceId in model SecretsProfile"));
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretsProfile.class);
}
