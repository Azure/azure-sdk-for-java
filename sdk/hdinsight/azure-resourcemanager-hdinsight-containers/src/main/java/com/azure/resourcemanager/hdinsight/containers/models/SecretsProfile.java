// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The cluster secret profile.
 */
@Fluent
public final class SecretsProfile implements JsonSerializable<SecretsProfile> {
    /*
     * Name of the user Key Vault where all the cluster specific user secrets are stored.
     */
    private String keyVaultResourceId;

    /*
     * Properties of Key Vault secret.
     */
    private List<SecretReference> secrets;

    /**
     * Creates an instance of SecretsProfile class.
     */
    public SecretsProfile() {
    }

    /**
     * Get the keyVaultResourceId property: Name of the user Key Vault where all the cluster specific user secrets are
     * stored.
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.keyVaultResourceId;
    }

    /**
     * Set the keyVaultResourceId property: Name of the user Key Vault where all the cluster specific user secrets are
     * stored.
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the SecretsProfile object itself.
     */
    public SecretsProfile withKeyVaultResourceId(String keyVaultResourceId) {
        this.keyVaultResourceId = keyVaultResourceId;
        return this;
    }

    /**
     * Get the secrets property: Properties of Key Vault secret.
     * 
     * @return the secrets value.
     */
    public List<SecretReference> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Properties of Key Vault secret.
     * 
     * @param secrets the secrets value to set.
     * @return the SecretsProfile object itself.
     */
    public SecretsProfile withSecrets(List<SecretReference> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyVaultResourceId in model SecretsProfile"));
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretsProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultResourceId", this.keyVaultResourceId);
        jsonWriter.writeArrayField("secrets", this.secrets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretsProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretsProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecretsProfile.
     */
    public static SecretsProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretsProfile deserializedSecretsProfile = new SecretsProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultResourceId".equals(fieldName)) {
                    deserializedSecretsProfile.keyVaultResourceId = reader.getString();
                } else if ("secrets".equals(fieldName)) {
                    List<SecretReference> secrets = reader.readArray(reader1 -> SecretReference.fromJson(reader1));
                    deserializedSecretsProfile.secrets = secrets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretsProfile;
        });
    }
}
