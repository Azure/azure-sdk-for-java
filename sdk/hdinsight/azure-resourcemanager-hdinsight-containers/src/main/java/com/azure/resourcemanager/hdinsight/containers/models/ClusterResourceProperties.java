// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster resource properties.
 */
@Fluent
public final class ClusterResourceProperties implements JsonSerializable<ClusterResourceProperties> {
    /*
     * Provisioning state of the resource.
     */
    private ProvisioningStatus provisioningState;

    /*
     * The type of cluster.
     */
    private String clusterType;

    /*
     * A unique id generated by the RP to identify the resource.
     */
    private String deploymentId;

    /*
     * The compute profile.
     */
    private ComputeProfile computeProfile;

    /*
     * Cluster profile.
     */
    private ClusterProfile clusterProfile;

    /*
     * Business status of the resource.
     */
    private String status;

    /**
     * Creates an instance of ClusterResourceProperties class.
     */
    public ClusterResourceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the clusterType property: The type of cluster.
     * 
     * @return the clusterType value.
     */
    public String clusterType() {
        return this.clusterType;
    }

    /**
     * Set the clusterType property: The type of cluster.
     * 
     * @param clusterType the clusterType value to set.
     * @return the ClusterResourceProperties object itself.
     */
    public ClusterResourceProperties withClusterType(String clusterType) {
        this.clusterType = clusterType;
        return this;
    }

    /**
     * Get the deploymentId property: A unique id generated by the RP to identify the resource.
     * 
     * @return the deploymentId value.
     */
    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Get the computeProfile property: The compute profile.
     * 
     * @return the computeProfile value.
     */
    public ComputeProfile computeProfile() {
        return this.computeProfile;
    }

    /**
     * Set the computeProfile property: The compute profile.
     * 
     * @param computeProfile the computeProfile value to set.
     * @return the ClusterResourceProperties object itself.
     */
    public ClusterResourceProperties withComputeProfile(ComputeProfile computeProfile) {
        this.computeProfile = computeProfile;
        return this;
    }

    /**
     * Get the clusterProfile property: Cluster profile.
     * 
     * @return the clusterProfile value.
     */
    public ClusterProfile clusterProfile() {
        return this.clusterProfile;
    }

    /**
     * Set the clusterProfile property: Cluster profile.
     * 
     * @param clusterProfile the clusterProfile value to set.
     * @return the ClusterResourceProperties object itself.
     */
    public ClusterResourceProperties withClusterProfile(ClusterProfile clusterProfile) {
        this.clusterProfile = clusterProfile;
        return this;
    }

    /**
     * Get the status property: Business status of the resource.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterType in model ClusterResourceProperties"));
        }
        if (computeProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property computeProfile in model ClusterResourceProperties"));
        } else {
            computeProfile().validate();
        }
        if (clusterProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterProfile in model ClusterResourceProperties"));
        } else {
            clusterProfile().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterType", this.clusterType);
        jsonWriter.writeJsonField("computeProfile", this.computeProfile);
        jsonWriter.writeJsonField("clusterProfile", this.clusterProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterResourceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterResourceProperties.
     */
    public static ClusterResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterResourceProperties deserializedClusterResourceProperties = new ClusterResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterType".equals(fieldName)) {
                    deserializedClusterResourceProperties.clusterType = reader.getString();
                } else if ("computeProfile".equals(fieldName)) {
                    deserializedClusterResourceProperties.computeProfile = ComputeProfile.fromJson(reader);
                } else if ("clusterProfile".equals(fieldName)) {
                    deserializedClusterResourceProperties.clusterProfile = ClusterProfile.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedClusterResourceProperties.provisioningState
                        = ProvisioningStatus.fromString(reader.getString());
                } else if ("deploymentId".equals(fieldName)) {
                    deserializedClusterResourceProperties.deploymentId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedClusterResourceProperties.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterResourceProperties;
        });
    }
}
