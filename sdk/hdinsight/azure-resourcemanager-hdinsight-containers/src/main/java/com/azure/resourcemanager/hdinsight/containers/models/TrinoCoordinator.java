// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Trino Coordinator.
 */
@Fluent
public final class TrinoCoordinator implements JsonSerializable<TrinoCoordinator> {
    /*
     * Trino debug configuration.
     */
    private TrinoDebugConfig debug;

    /*
     * The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head
     * node. Default: true.
     */
    private Boolean highAvailabilityEnabled;

    /**
     * Creates an instance of TrinoCoordinator class.
     */
    public TrinoCoordinator() {
    }

    /**
     * Get the debug property: Trino debug configuration.
     * 
     * @return the debug value.
     */
    public TrinoDebugConfig debug() {
        return this.debug;
    }

    /**
     * Set the debug property: Trino debug configuration.
     * 
     * @param debug the debug value to set.
     * @return the TrinoCoordinator object itself.
     */
    public TrinoCoordinator withDebug(TrinoDebugConfig debug) {
        this.debug = debug;
        return this;
    }

    /**
     * Get the highAvailabilityEnabled property: The flag that if enable coordinator HA, uses multiple coordinator
     * replicas with auto failover, one per each head node. Default: true.
     * 
     * @return the highAvailabilityEnabled value.
     */
    public Boolean highAvailabilityEnabled() {
        return this.highAvailabilityEnabled;
    }

    /**
     * Set the highAvailabilityEnabled property: The flag that if enable coordinator HA, uses multiple coordinator
     * replicas with auto failover, one per each head node. Default: true.
     * 
     * @param highAvailabilityEnabled the highAvailabilityEnabled value to set.
     * @return the TrinoCoordinator object itself.
     */
    public TrinoCoordinator withHighAvailabilityEnabled(Boolean highAvailabilityEnabled) {
        this.highAvailabilityEnabled = highAvailabilityEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (debug() != null) {
            debug().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("debug", this.debug);
        jsonWriter.writeBooleanField("highAvailabilityEnabled", this.highAvailabilityEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrinoCoordinator from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrinoCoordinator if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrinoCoordinator.
     */
    public static TrinoCoordinator fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrinoCoordinator deserializedTrinoCoordinator = new TrinoCoordinator();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("debug".equals(fieldName)) {
                    deserializedTrinoCoordinator.debug = TrinoDebugConfig.fromJson(reader);
                } else if ("highAvailabilityEnabled".equals(fieldName)) {
                    deserializedTrinoCoordinator.highAvailabilityEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrinoCoordinator;
        });
    }
}
