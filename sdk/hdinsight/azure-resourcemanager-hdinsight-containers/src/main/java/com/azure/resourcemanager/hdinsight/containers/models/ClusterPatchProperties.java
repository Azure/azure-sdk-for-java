// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster resource patch data.
 */
@Fluent
public final class ClusterPatchProperties implements JsonSerializable<ClusterPatchProperties> {
    /*
     * Cluster resource patch properties.
     */
    private UpdatableClusterProfile clusterProfile;

    /**
     * Creates an instance of ClusterPatchProperties class.
     */
    public ClusterPatchProperties() {
    }

    /**
     * Get the clusterProfile property: Cluster resource patch properties.
     * 
     * @return the clusterProfile value.
     */
    public UpdatableClusterProfile clusterProfile() {
        return this.clusterProfile;
    }

    /**
     * Set the clusterProfile property: Cluster resource patch properties.
     * 
     * @param clusterProfile the clusterProfile value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withClusterProfile(UpdatableClusterProfile clusterProfile) {
        this.clusterProfile = clusterProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterProfile() != null) {
            clusterProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("clusterProfile", this.clusterProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterPatchProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterPatchProperties.
     */
    public static ClusterPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterPatchProperties deserializedClusterPatchProperties = new ClusterPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterProfile".equals(fieldName)) {
                    deserializedClusterPatchProperties.clusterProfile = UpdatableClusterProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterPatchProperties;
        });
    }
}
