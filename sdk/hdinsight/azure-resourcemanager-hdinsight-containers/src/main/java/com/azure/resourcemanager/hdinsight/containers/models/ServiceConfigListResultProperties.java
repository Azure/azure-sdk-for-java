// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Service config response.
 */
@Fluent
public class ServiceConfigListResultProperties implements JsonSerializable<ServiceConfigListResultProperties> {
    /*
     * Service Config Name.
     */
    private String serviceName;

    /*
     * File Name.
     */
    private String fileName;

    /*
     * Content in the service config file.
     */
    private String content;

    /*
     * Component Name.
     */
    private String componentName;

    /*
     * Config type.
     */
    private String type;

    /*
     * Config file path.
     */
    private String path;

    /*
     * The custom keys.
     */
    private Map<String, String> customKeys;

    /*
     * The default keys.
     */
    private Map<String, ServiceConfigListResultValueEntity> defaultKeys;

    /**
     * Creates an instance of ServiceConfigListResultProperties class.
     */
    public ServiceConfigListResultProperties() {
    }

    /**
     * Get the serviceName property: Service Config Name.
     * 
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: Service Config Name.
     * 
     * @param serviceName the serviceName value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the fileName property: File Name.
     * 
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: File Name.
     * 
     * @param fileName the fileName value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get the content property: Content in the service config file.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: Content in the service config file.
     * 
     * @param content the content value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the componentName property: Component Name.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Set the componentName property: Component Name.
     * 
     * @param componentName the componentName value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }

    /**
     * Get the type property: Config type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Config type.
     * 
     * @param type the type value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the path property: Config file path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Config file path.
     * 
     * @param path the path value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the customKeys property: The custom keys.
     * 
     * @return the customKeys value.
     */
    public Map<String, String> customKeys() {
        return this.customKeys;
    }

    /**
     * Set the customKeys property: The custom keys.
     * 
     * @param customKeys the customKeys value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties withCustomKeys(Map<String, String> customKeys) {
        this.customKeys = customKeys;
        return this;
    }

    /**
     * Get the defaultKeys property: The default keys.
     * 
     * @return the defaultKeys value.
     */
    public Map<String, ServiceConfigListResultValueEntity> defaultKeys() {
        return this.defaultKeys;
    }

    /**
     * Set the defaultKeys property: The default keys.
     * 
     * @param defaultKeys the defaultKeys value to set.
     * @return the ServiceConfigListResultProperties object itself.
     */
    public ServiceConfigListResultProperties
        withDefaultKeys(Map<String, ServiceConfigListResultValueEntity> defaultKeys) {
        this.defaultKeys = defaultKeys;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceName in model ServiceConfigListResultProperties"));
        }
        if (fileName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property fileName in model ServiceConfigListResultProperties"));
        }
        if (componentName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property componentName in model ServiceConfigListResultProperties"));
        }
        if (defaultKeys() != null) {
            defaultKeys().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServiceConfigListResultProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceName", this.serviceName);
        jsonWriter.writeStringField("fileName", this.fileName);
        jsonWriter.writeStringField("componentName", this.componentName);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeMapField("customKeys", this.customKeys, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("defaultKeys", this.defaultKeys, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceConfigListResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceConfigListResultProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceConfigListResultProperties.
     */
    public static ServiceConfigListResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceConfigListResultProperties deserializedServiceConfigListResultProperties
                = new ServiceConfigListResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceName".equals(fieldName)) {
                    deserializedServiceConfigListResultProperties.serviceName = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    deserializedServiceConfigListResultProperties.fileName = reader.getString();
                } else if ("componentName".equals(fieldName)) {
                    deserializedServiceConfigListResultProperties.componentName = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedServiceConfigListResultProperties.content = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedServiceConfigListResultProperties.type = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedServiceConfigListResultProperties.path = reader.getString();
                } else if ("customKeys".equals(fieldName)) {
                    Map<String, String> customKeys = reader.readMap(reader1 -> reader1.getString());
                    deserializedServiceConfigListResultProperties.customKeys = customKeys;
                } else if ("defaultKeys".equals(fieldName)) {
                    Map<String, ServiceConfigListResultValueEntity> defaultKeys
                        = reader.readMap(reader1 -> ServiceConfigListResultValueEntity.fromJson(reader1));
                    deserializedServiceConfigListResultProperties.defaultKeys = defaultKeys;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceConfigListResultProperties;
        });
    }
}
