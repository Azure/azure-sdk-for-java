// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster pool node os upgrade history properties.
 */
@Fluent
public final class ClusterPoolNodeOsUpgradeHistoryProperties extends ClusterPoolUpgradeHistoryProperties {
    /*
     * Type of upgrade.
     */
    private ClusterPoolUpgradeHistoryType upgradeType = ClusterPoolUpgradeHistoryType.NODE_OS_UPGRADE;

    /*
     * New Node Os version.
     */
    private String newNodeOs;

    /**
     * Creates an instance of ClusterPoolNodeOsUpgradeHistoryProperties class.
     */
    public ClusterPoolNodeOsUpgradeHistoryProperties() {
    }

    /**
     * Get the upgradeType property: Type of upgrade.
     * 
     * @return the upgradeType value.
     */
    @Override
    public ClusterPoolUpgradeHistoryType upgradeType() {
        return this.upgradeType;
    }

    /**
     * Get the newNodeOs property: New Node Os version.
     * 
     * @return the newNodeOs value.
     */
    public String newNodeOs() {
        return this.newNodeOs;
    }

    /**
     * Set the newNodeOs property: New Node Os version.
     * 
     * @param newNodeOs the newNodeOs value to set.
     * @return the ClusterPoolNodeOsUpgradeHistoryProperties object itself.
     */
    public ClusterPoolNodeOsUpgradeHistoryProperties withNewNodeOs(String newNodeOs) {
        this.newNodeOs = newNodeOs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPoolNodeOsUpgradeHistoryProperties withUtcTime(String utcTime) {
        super.withUtcTime(utcTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterPoolNodeOsUpgradeHistoryProperties
        withUpgradeResult(ClusterPoolUpgradeHistoryUpgradeResultType upgradeResult) {
        super.withUpgradeResult(upgradeResult);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("utcTime", utcTime());
        jsonWriter.writeStringField("upgradeResult", upgradeResult() == null ? null : upgradeResult().toString());
        jsonWriter.writeStringField("upgradeType", this.upgradeType == null ? null : this.upgradeType.toString());
        jsonWriter.writeStringField("newNodeOs", this.newNodeOs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterPoolNodeOsUpgradeHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterPoolNodeOsUpgradeHistoryProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterPoolNodeOsUpgradeHistoryProperties.
     */
    public static ClusterPoolNodeOsUpgradeHistoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterPoolNodeOsUpgradeHistoryProperties deserializedClusterPoolNodeOsUpgradeHistoryProperties
                = new ClusterPoolNodeOsUpgradeHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("utcTime".equals(fieldName)) {
                    deserializedClusterPoolNodeOsUpgradeHistoryProperties.withUtcTime(reader.getString());
                } else if ("upgradeResult".equals(fieldName)) {
                    deserializedClusterPoolNodeOsUpgradeHistoryProperties
                        .withUpgradeResult(ClusterPoolUpgradeHistoryUpgradeResultType.fromString(reader.getString()));
                } else if ("upgradeType".equals(fieldName)) {
                    deserializedClusterPoolNodeOsUpgradeHistoryProperties.upgradeType
                        = ClusterPoolUpgradeHistoryType.fromString(reader.getString());
                } else if ("newNodeOs".equals(fieldName)) {
                    deserializedClusterPoolNodeOsUpgradeHistoryProperties.newNodeOs = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterPoolNodeOsUpgradeHistoryProperties;
        });
    }
}
