// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The node profile.
 */
@Fluent
public final class NodeProfile implements JsonSerializable<NodeProfile> {
    /*
     * The node type.
     */
    private String type;

    /*
     * The virtual machine SKU.
     */
    private String vmSize;

    /*
     * The number of virtual machines.
     */
    private int count;

    /**
     * Creates an instance of NodeProfile class.
     */
    public NodeProfile() {
    }

    /**
     * Get the type property: The node type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The node type.
     * 
     * @param type the type value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the vmSize property: The virtual machine SKU.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The virtual machine SKU.
     * 
     * @param vmSize the vmSize value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the count property: The number of virtual machines.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Set the count property: The number of virtual machines.
     * 
     * @param count the count value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withCount(int count) {
        this.count = count;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model NodeProfile"));
        }
        if (vmSize() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property vmSize in model NodeProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NodeProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeIntField("count", this.count);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NodeProfile.
     */
    public static NodeProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeProfile deserializedNodeProfile = new NodeProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedNodeProfile.type = reader.getString();
                } else if ("vmSize".equals(fieldName)) {
                    deserializedNodeProfile.vmSize = reader.getString();
                } else if ("count".equals(fieldName)) {
                    deserializedNodeProfile.count = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeProfile;
        });
    }
}
