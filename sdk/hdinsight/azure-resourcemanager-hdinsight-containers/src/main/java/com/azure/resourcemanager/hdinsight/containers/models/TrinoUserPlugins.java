// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Trino user plugins spec.
 */
@Fluent
public final class TrinoUserPlugins implements JsonSerializable<TrinoUserPlugins> {
    /*
     * Trino user plugins.
     */
    private List<TrinoUserPlugin> plugins;

    /**
     * Creates an instance of TrinoUserPlugins class.
     */
    public TrinoUserPlugins() {
    }

    /**
     * Get the plugins property: Trino user plugins.
     * 
     * @return the plugins value.
     */
    public List<TrinoUserPlugin> plugins() {
        return this.plugins;
    }

    /**
     * Set the plugins property: Trino user plugins.
     * 
     * @param plugins the plugins value to set.
     * @return the TrinoUserPlugins object itself.
     */
    public TrinoUserPlugins withPlugins(List<TrinoUserPlugin> plugins) {
        this.plugins = plugins;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (plugins() != null) {
            plugins().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("plugins", this.plugins, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrinoUserPlugins from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrinoUserPlugins if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrinoUserPlugins.
     */
    public static TrinoUserPlugins fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrinoUserPlugins deserializedTrinoUserPlugins = new TrinoUserPlugins();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("plugins".equals(fieldName)) {
                    List<TrinoUserPlugin> plugins = reader.readArray(reader1 -> TrinoUserPlugin.fromJson(reader1));
                    deserializedTrinoUserPlugins.plugins = plugins;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrinoUserPlugins;
        });
    }
}
