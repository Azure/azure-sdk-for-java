// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
 */
@Fluent
public final class AuthorizationProfile implements JsonSerializable<AuthorizationProfile> {
    /*
     * AAD user Ids authorized for data plane access.
     */
    private List<String> userIds;

    /*
     * AAD group Ids authorized for data plane access.
     */
    private List<String> groupIds;

    /**
     * Creates an instance of AuthorizationProfile class.
     */
    public AuthorizationProfile() {
    }

    /**
     * Get the userIds property: AAD user Ids authorized for data plane access.
     * 
     * @return the userIds value.
     */
    public List<String> userIds() {
        return this.userIds;
    }

    /**
     * Set the userIds property: AAD user Ids authorized for data plane access.
     * 
     * @param userIds the userIds value to set.
     * @return the AuthorizationProfile object itself.
     */
    public AuthorizationProfile withUserIds(List<String> userIds) {
        this.userIds = userIds;
        return this;
    }

    /**
     * Get the groupIds property: AAD group Ids authorized for data plane access.
     * 
     * @return the groupIds value.
     */
    public List<String> groupIds() {
        return this.groupIds;
    }

    /**
     * Set the groupIds property: AAD group Ids authorized for data plane access.
     * 
     * @param groupIds the groupIds value to set.
     * @return the AuthorizationProfile object itself.
     */
    public AuthorizationProfile withGroupIds(List<String> groupIds) {
        this.groupIds = groupIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("userIds", this.userIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("groupIds", this.groupIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthorizationProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthorizationProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthorizationProfile.
     */
    public static AuthorizationProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthorizationProfile deserializedAuthorizationProfile = new AuthorizationProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userIds".equals(fieldName)) {
                    List<String> userIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAuthorizationProfile.userIds = userIds;
                } else if ("groupIds".equals(fieldName)) {
                    List<String> groupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAuthorizationProfile.groupIds = groupIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorizationProfile;
        });
    }
}
