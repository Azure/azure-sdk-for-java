// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The details of a managed identity.
 */
@Fluent
public final class ManagedIdentitySpec implements JsonSerializable<ManagedIdentitySpec> {
    /*
     * The type of managed identity.
     */
    private ManagedIdentityType type;

    /*
     * ResourceId of the managed identity.
     */
    private String resourceId;

    /*
     * ClientId of the managed identity.
     */
    private String clientId;

    /*
     * ObjectId of the managed identity.
     */
    private String objectId;

    /**
     * Creates an instance of ManagedIdentitySpec class.
     */
    public ManagedIdentitySpec() {
    }

    /**
     * Get the type property: The type of managed identity.
     * 
     * @return the type value.
     */
    public ManagedIdentityType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of managed identity.
     * 
     * @param type the type value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withType(ManagedIdentityType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the resourceId property: ResourceId of the managed identity.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ResourceId of the managed identity.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the clientId property: ClientId of the managed identity.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: ClientId of the managed identity.
     * 
     * @param clientId the clientId value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the objectId property: ObjectId of the managed identity.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: ObjectId of the managed identity.
     * 
     * @param objectId the objectId value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model ManagedIdentitySpec"));
        }
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceId in model ManagedIdentitySpec"));
        }
        if (clientId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property clientId in model ManagedIdentitySpec"));
        }
        if (objectId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property objectId in model ManagedIdentitySpec"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedIdentitySpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("objectId", this.objectId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIdentitySpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIdentitySpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedIdentitySpec.
     */
    public static ManagedIdentitySpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIdentitySpec deserializedManagedIdentitySpec = new ManagedIdentitySpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedManagedIdentitySpec.type = ManagedIdentityType.fromString(reader.getString());
                } else if ("resourceId".equals(fieldName)) {
                    deserializedManagedIdentitySpec.resourceId = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedManagedIdentitySpec.clientId = reader.getString();
                } else if ("objectId".equals(fieldName)) {
                    deserializedManagedIdentitySpec.objectId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedIdentitySpec;
        });
    }
}
