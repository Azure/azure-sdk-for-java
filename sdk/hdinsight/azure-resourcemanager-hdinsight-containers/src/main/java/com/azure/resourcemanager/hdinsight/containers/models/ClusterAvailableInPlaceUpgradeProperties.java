// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Cluster available in-place upgrade.
 */
@Fluent
public class ClusterAvailableInPlaceUpgradeProperties extends ClusterAvailableUpgradeProperties {
    /*
     * Type of upgrade.
     */
    private ClusterAvailableUpgradeType upgradeType
        = ClusterAvailableUpgradeType.fromString("ClusterAvailableInPlaceUpgradeProperties");

    /*
     * Hotfix version upgrade description.
     */
    private String description;

    /*
     * Source OSS version of current cluster component.
     */
    private String sourceOssVersion;

    /*
     * Source cluster version of current cluster component.
     */
    private String sourceClusterVersion;

    /*
     * Source build number of current cluster component.
     */
    private String sourceBuildNumber;

    /*
     * Target OSS version of component to be upgraded.
     */
    private String targetOssVersion;

    /*
     * Target cluster version of component to be upgraded.
     */
    private String targetClusterVersion;

    /*
     * Target build number of component to be upgraded.
     */
    private String targetBuildNumber;

    /*
     * Name of component to be upgraded.
     */
    private String componentName;

    /*
     * Severity of this upgrade.
     */
    private Severity severity;

    /*
     * Extended properties of current available upgrade version
     */
    private String extendedProperties;

    /*
     * Created time of current available upgrade version
     */
    private OffsetDateTime createdTime;

    /**
     * Creates an instance of ClusterAvailableInPlaceUpgradeProperties class.
     */
    public ClusterAvailableInPlaceUpgradeProperties() {
    }

    /**
     * Get the upgradeType property: Type of upgrade.
     * 
     * @return the upgradeType value.
     */
    @Override
    public ClusterAvailableUpgradeType upgradeType() {
        return this.upgradeType;
    }

    /**
     * Get the description property: Hotfix version upgrade description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Hotfix version upgrade description.
     * 
     * @param description the description value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the sourceOssVersion property: Source OSS version of current cluster component.
     * 
     * @return the sourceOssVersion value.
     */
    public String sourceOssVersion() {
        return this.sourceOssVersion;
    }

    /**
     * Set the sourceOssVersion property: Source OSS version of current cluster component.
     * 
     * @param sourceOssVersion the sourceOssVersion value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withSourceOssVersion(String sourceOssVersion) {
        this.sourceOssVersion = sourceOssVersion;
        return this;
    }

    /**
     * Get the sourceClusterVersion property: Source cluster version of current cluster component.
     * 
     * @return the sourceClusterVersion value.
     */
    public String sourceClusterVersion() {
        return this.sourceClusterVersion;
    }

    /**
     * Set the sourceClusterVersion property: Source cluster version of current cluster component.
     * 
     * @param sourceClusterVersion the sourceClusterVersion value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withSourceClusterVersion(String sourceClusterVersion) {
        this.sourceClusterVersion = sourceClusterVersion;
        return this;
    }

    /**
     * Get the sourceBuildNumber property: Source build number of current cluster component.
     * 
     * @return the sourceBuildNumber value.
     */
    public String sourceBuildNumber() {
        return this.sourceBuildNumber;
    }

    /**
     * Set the sourceBuildNumber property: Source build number of current cluster component.
     * 
     * @param sourceBuildNumber the sourceBuildNumber value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withSourceBuildNumber(String sourceBuildNumber) {
        this.sourceBuildNumber = sourceBuildNumber;
        return this;
    }

    /**
     * Get the targetOssVersion property: Target OSS version of component to be upgraded.
     * 
     * @return the targetOssVersion value.
     */
    public String targetOssVersion() {
        return this.targetOssVersion;
    }

    /**
     * Set the targetOssVersion property: Target OSS version of component to be upgraded.
     * 
     * @param targetOssVersion the targetOssVersion value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withTargetOssVersion(String targetOssVersion) {
        this.targetOssVersion = targetOssVersion;
        return this;
    }

    /**
     * Get the targetClusterVersion property: Target cluster version of component to be upgraded.
     * 
     * @return the targetClusterVersion value.
     */
    public String targetClusterVersion() {
        return this.targetClusterVersion;
    }

    /**
     * Set the targetClusterVersion property: Target cluster version of component to be upgraded.
     * 
     * @param targetClusterVersion the targetClusterVersion value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withTargetClusterVersion(String targetClusterVersion) {
        this.targetClusterVersion = targetClusterVersion;
        return this;
    }

    /**
     * Get the targetBuildNumber property: Target build number of component to be upgraded.
     * 
     * @return the targetBuildNumber value.
     */
    public String targetBuildNumber() {
        return this.targetBuildNumber;
    }

    /**
     * Set the targetBuildNumber property: Target build number of component to be upgraded.
     * 
     * @param targetBuildNumber the targetBuildNumber value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withTargetBuildNumber(String targetBuildNumber) {
        this.targetBuildNumber = targetBuildNumber;
        return this;
    }

    /**
     * Get the componentName property: Name of component to be upgraded.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Set the componentName property: Name of component to be upgraded.
     * 
     * @param componentName the componentName value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }

    /**
     * Get the severity property: Severity of this upgrade.
     * 
     * @return the severity value.
     */
    public Severity severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of this upgrade.
     * 
     * @param severity the severity value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withSeverity(Severity severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the extendedProperties property: Extended properties of current available upgrade version.
     * 
     * @return the extendedProperties value.
     */
    public String extendedProperties() {
        return this.extendedProperties;
    }

    /**
     * Set the extendedProperties property: Extended properties of current available upgrade version.
     * 
     * @param extendedProperties the extendedProperties value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withExtendedProperties(String extendedProperties) {
        this.extendedProperties = extendedProperties;
        return this;
    }

    /**
     * Get the createdTime property: Created time of current available upgrade version.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Set the createdTime property: Created time of current available upgrade version.
     * 
     * @param createdTime the createdTime value to set.
     * @return the ClusterAvailableInPlaceUpgradeProperties object itself.
     */
    public ClusterAvailableInPlaceUpgradeProperties withCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("upgradeType", this.upgradeType == null ? null : this.upgradeType.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("sourceOssVersion", this.sourceOssVersion);
        jsonWriter.writeStringField("sourceClusterVersion", this.sourceClusterVersion);
        jsonWriter.writeStringField("sourceBuildNumber", this.sourceBuildNumber);
        jsonWriter.writeStringField("targetOssVersion", this.targetOssVersion);
        jsonWriter.writeStringField("targetClusterVersion", this.targetClusterVersion);
        jsonWriter.writeStringField("targetBuildNumber", this.targetBuildNumber);
        jsonWriter.writeStringField("componentName", this.componentName);
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeStringField("extendedProperties", this.extendedProperties);
        jsonWriter.writeStringField("createdTime",
            this.createdTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterAvailableInPlaceUpgradeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterAvailableInPlaceUpgradeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterAvailableInPlaceUpgradeProperties.
     */
    public static ClusterAvailableInPlaceUpgradeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("upgradeType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("HotfixUpgrade".equals(discriminatorValue)) {
                    return ClusterAvailableUpgradeHotfixUpgradeProperties.fromJson(readerToUse.reset());
                } else if ("PatchVersionUpgrade".equals(discriminatorValue)) {
                    return ClusterAvailableUpgradePatchVersionUpgradeProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ClusterAvailableInPlaceUpgradeProperties fromJsonKnownDiscriminator(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterAvailableInPlaceUpgradeProperties deserializedClusterAvailableInPlaceUpgradeProperties
                = new ClusterAvailableInPlaceUpgradeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("upgradeType".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.upgradeType
                        = ClusterAvailableUpgradeType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.description = reader.getString();
                } else if ("sourceOssVersion".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.sourceOssVersion = reader.getString();
                } else if ("sourceClusterVersion".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.sourceClusterVersion = reader.getString();
                } else if ("sourceBuildNumber".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.sourceBuildNumber = reader.getString();
                } else if ("targetOssVersion".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.targetOssVersion = reader.getString();
                } else if ("targetClusterVersion".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.targetClusterVersion = reader.getString();
                } else if ("targetBuildNumber".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.targetBuildNumber = reader.getString();
                } else if ("componentName".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.componentName = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.severity
                        = Severity.fromString(reader.getString());
                } else if ("extendedProperties".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.extendedProperties = reader.getString();
                } else if ("createdTime".equals(fieldName)) {
                    deserializedClusterAvailableInPlaceUpgradeProperties.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterAvailableInPlaceUpgradeProperties;
        });
    }
}
