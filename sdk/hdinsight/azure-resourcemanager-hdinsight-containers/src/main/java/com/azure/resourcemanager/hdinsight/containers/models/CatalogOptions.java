// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Trino cluster catalog options.
 */
@Fluent
public final class CatalogOptions implements JsonSerializable<CatalogOptions> {
    /*
     * hive catalog options.
     */
    private List<HiveCatalogOption> hive;

    /**
     * Creates an instance of CatalogOptions class.
     */
    public CatalogOptions() {
    }

    /**
     * Get the hive property: hive catalog options.
     * 
     * @return the hive value.
     */
    public List<HiveCatalogOption> hive() {
        return this.hive;
    }

    /**
     * Set the hive property: hive catalog options.
     * 
     * @param hive the hive value to set.
     * @return the CatalogOptions object itself.
     */
    public CatalogOptions withHive(List<HiveCatalogOption> hive) {
        this.hive = hive;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hive() != null) {
            hive().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("hive", this.hive, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CatalogOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CatalogOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CatalogOptions.
     */
    public static CatalogOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CatalogOptions deserializedCatalogOptions = new CatalogOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hive".equals(fieldName)) {
                    List<HiveCatalogOption> hive = reader.readArray(reader1 -> HiveCatalogOption.fromJson(reader1));
                    deserializedCatalogOptions.hive = hive;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCatalogOptions;
        });
    }
}
