// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Cluster configs per component.
 */
@Fluent
public final class ClusterServiceConfig implements JsonSerializable<ClusterServiceConfig> {
    /*
     * Name of the component the config files should apply to.
     */
    private String component;

    /*
     * List of Config Files.
     */
    private List<ClusterConfigFile> files;

    /**
     * Creates an instance of ClusterServiceConfig class.
     */
    public ClusterServiceConfig() {
    }

    /**
     * Get the component property: Name of the component the config files should apply to.
     * 
     * @return the component value.
     */
    public String component() {
        return this.component;
    }

    /**
     * Set the component property: Name of the component the config files should apply to.
     * 
     * @param component the component value to set.
     * @return the ClusterServiceConfig object itself.
     */
    public ClusterServiceConfig withComponent(String component) {
        this.component = component;
        return this;
    }

    /**
     * Get the files property: List of Config Files.
     * 
     * @return the files value.
     */
    public List<ClusterConfigFile> files() {
        return this.files;
    }

    /**
     * Set the files property: List of Config Files.
     * 
     * @param files the files value to set.
     * @return the ClusterServiceConfig object itself.
     */
    public ClusterServiceConfig withFiles(List<ClusterConfigFile> files) {
        this.files = files;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (component() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property component in model ClusterServiceConfig"));
        }
        if (files() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property files in model ClusterServiceConfig"));
        } else {
            files().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterServiceConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("component", this.component);
        jsonWriter.writeArrayField("files", this.files, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterServiceConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterServiceConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterServiceConfig.
     */
    public static ClusterServiceConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterServiceConfig deserializedClusterServiceConfig = new ClusterServiceConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("component".equals(fieldName)) {
                    deserializedClusterServiceConfig.component = reader.getString();
                } else if ("files".equals(fieldName)) {
                    List<ClusterConfigFile> files = reader.readArray(reader1 -> ClusterConfigFile.fromJson(reader1));
                    deserializedClusterServiceConfig.files = files;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterServiceConfig;
        });
    }
}
