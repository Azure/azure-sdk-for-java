// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Identity Profile with details of an MSI.
 */
@Fluent
public class IdentityProfile implements JsonSerializable<IdentityProfile> {
    /*
     * ResourceId of the MSI.
     */
    private String msiResourceId;

    /*
     * ClientId of the MSI.
     */
    private String msiClientId;

    /*
     * ObjectId of the MSI.
     */
    private String msiObjectId;

    /**
     * Creates an instance of IdentityProfile class.
     */
    public IdentityProfile() {
    }

    /**
     * Get the msiResourceId property: ResourceId of the MSI.
     * 
     * @return the msiResourceId value.
     */
    public String msiResourceId() {
        return this.msiResourceId;
    }

    /**
     * Set the msiResourceId property: ResourceId of the MSI.
     * 
     * @param msiResourceId the msiResourceId value to set.
     * @return the IdentityProfile object itself.
     */
    public IdentityProfile withMsiResourceId(String msiResourceId) {
        this.msiResourceId = msiResourceId;
        return this;
    }

    /**
     * Get the msiClientId property: ClientId of the MSI.
     * 
     * @return the msiClientId value.
     */
    public String msiClientId() {
        return this.msiClientId;
    }

    /**
     * Set the msiClientId property: ClientId of the MSI.
     * 
     * @param msiClientId the msiClientId value to set.
     * @return the IdentityProfile object itself.
     */
    public IdentityProfile withMsiClientId(String msiClientId) {
        this.msiClientId = msiClientId;
        return this;
    }

    /**
     * Get the msiObjectId property: ObjectId of the MSI.
     * 
     * @return the msiObjectId value.
     */
    public String msiObjectId() {
        return this.msiObjectId;
    }

    /**
     * Set the msiObjectId property: ObjectId of the MSI.
     * 
     * @param msiObjectId the msiObjectId value to set.
     * @return the IdentityProfile object itself.
     */
    public IdentityProfile withMsiObjectId(String msiObjectId) {
        this.msiObjectId = msiObjectId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (msiResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property msiResourceId in model IdentityProfile"));
        }
        if (msiClientId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property msiClientId in model IdentityProfile"));
        }
        if (msiObjectId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property msiObjectId in model IdentityProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IdentityProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("msiResourceId", this.msiResourceId);
        jsonWriter.writeStringField("msiClientId", this.msiClientId);
        jsonWriter.writeStringField("msiObjectId", this.msiObjectId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdentityProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdentityProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IdentityProfile.
     */
    public static IdentityProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IdentityProfile deserializedIdentityProfile = new IdentityProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("msiResourceId".equals(fieldName)) {
                    deserializedIdentityProfile.msiResourceId = reader.getString();
                } else if ("msiClientId".equals(fieldName)) {
                    deserializedIdentityProfile.msiClientId = reader.getString();
                } else if ("msiObjectId".equals(fieldName)) {
                    deserializedIdentityProfile.msiObjectId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdentityProfile;
        });
    }
}
