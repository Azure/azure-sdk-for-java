// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The comparison rule.
 */
@Fluent
public final class ComparisonRule implements JsonSerializable<ComparisonRule> {
    /*
     * The comparison operator.
     */
    private ComparisonOperator operator;

    /*
     * Threshold setting.
     */
    private float threshold;

    /**
     * Creates an instance of ComparisonRule class.
     */
    public ComparisonRule() {
    }

    /**
     * Get the operator property: The comparison operator.
     * 
     * @return the operator value.
     */
    public ComparisonOperator operator() {
        return this.operator;
    }

    /**
     * Set the operator property: The comparison operator.
     * 
     * @param operator the operator value to set.
     * @return the ComparisonRule object itself.
     */
    public ComparisonRule withOperator(ComparisonOperator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the threshold property: Threshold setting.
     * 
     * @return the threshold value.
     */
    public float threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: Threshold setting.
     * 
     * @param threshold the threshold value to set.
     * @return the ComparisonRule object itself.
     */
    public ComparisonRule withThreshold(float threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property operator in model ComparisonRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ComparisonRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operator", this.operator == null ? null : this.operator.toString());
        jsonWriter.writeFloatField("threshold", this.threshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComparisonRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComparisonRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComparisonRule.
     */
    public static ComparisonRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComparisonRule deserializedComparisonRule = new ComparisonRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operator".equals(fieldName)) {
                    deserializedComparisonRule.operator = ComparisonOperator.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedComparisonRule.threshold = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComparisonRule;
        });
    }
}
