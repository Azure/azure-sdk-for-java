// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.Action;
import com.azure.resourcemanager.hdinsight.containers.models.FlinkJobProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlinkJobPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlinkJobProperties model = BinaryData.fromString(
            "{\"jobType\":\"FlinkJob\",\"runId\":\"tronzmyhgfi\",\"jobName\":\"sxkm\",\"jobJarDirectory\":\"a\",\"jarName\":\"rrjreafxtsgu\",\"entryClass\":\"jglikkxwslolb\",\"args\":\"vuzlm\",\"savePointName\":\"elfk\",\"action\":\"SAVEPOINT\",\"flinkConfiguration\":{\"xeznoi\":\"rpw\"},\"jobId\":\"rnjwmw\",\"status\":\"nbsazejjoqkag\",\"jobOutput\":\"sxtta\",\"actionResult\":\"zxnfaaz\",\"lastSavePoint\":\"dtnkdmkq\"}")
            .toObject(FlinkJobProperties.class);
        Assertions.assertEquals("tronzmyhgfi", model.runId());
        Assertions.assertEquals("sxkm", model.jobName());
        Assertions.assertEquals("a", model.jobJarDirectory());
        Assertions.assertEquals("rrjreafxtsgu", model.jarName());
        Assertions.assertEquals("jglikkxwslolb", model.entryClass());
        Assertions.assertEquals("vuzlm", model.args());
        Assertions.assertEquals("elfk", model.savePointName());
        Assertions.assertEquals(Action.SAVEPOINT, model.action());
        Assertions.assertEquals("rpw", model.flinkConfiguration().get("xeznoi"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlinkJobProperties model = new FlinkJobProperties().withRunId("tronzmyhgfi").withJobName("sxkm")
            .withJobJarDirectory("a").withJarName("rrjreafxtsgu").withEntryClass("jglikkxwslolb").withArgs("vuzlm")
            .withSavePointName("elfk").withAction(Action.SAVEPOINT).withFlinkConfiguration(mapOf("xeznoi", "rpw"));
        model = BinaryData.fromObject(model).toObject(FlinkJobProperties.class);
        Assertions.assertEquals("tronzmyhgfi", model.runId());
        Assertions.assertEquals("sxkm", model.jobName());
        Assertions.assertEquals("a", model.jobJarDirectory());
        Assertions.assertEquals("rrjreafxtsgu", model.jarName());
        Assertions.assertEquals("jglikkxwslolb", model.entryClass());
        Assertions.assertEquals("vuzlm", model.args());
        Assertions.assertEquals("elfk", model.savePointName());
        Assertions.assertEquals(Action.SAVEPOINT, model.action());
        Assertions.assertEquals("rpw", model.flinkConfiguration().get("xeznoi"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
