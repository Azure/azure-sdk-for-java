// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.FlinkJobProfile;
import com.azure.resourcemanager.hdinsight.containers.models.UpgradeMode;
import org.junit.jupiter.api.Assertions;

public final class FlinkJobProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlinkJobProfile model = BinaryData.fromString(
            "{\"jobJarDirectory\":\"aofmxagkvtme\",\"jarName\":\"mqkrhahvljuahaqu\",\"entryClass\":\"dhmdua\",\"args\":\"exq\",\"savePointName\":\"fadmws\",\"upgradeMode\":\"UPDATE\"}")
            .toObject(FlinkJobProfile.class);
        Assertions.assertEquals("aofmxagkvtme", model.jobJarDirectory());
        Assertions.assertEquals("mqkrhahvljuahaqu", model.jarName());
        Assertions.assertEquals("dhmdua", model.entryClass());
        Assertions.assertEquals("exq", model.args());
        Assertions.assertEquals("fadmws", model.savePointName());
        Assertions.assertEquals(UpgradeMode.UPDATE, model.upgradeMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlinkJobProfile model = new FlinkJobProfile().withJobJarDirectory("aofmxagkvtme")
            .withJarName("mqkrhahvljuahaqu").withEntryClass("dhmdua").withArgs("exq").withSavePointName("fadmws")
            .withUpgradeMode(UpgradeMode.UPDATE);
        model = BinaryData.fromObject(model).toObject(FlinkJobProfile.class);
        Assertions.assertEquals("aofmxagkvtme", model.jobJarDirectory());
        Assertions.assertEquals("mqkrhahvljuahaqu", model.jarName());
        Assertions.assertEquals("dhmdua", model.entryClass());
        Assertions.assertEquals("exq", model.args());
        Assertions.assertEquals("fadmws", model.savePointName());
        Assertions.assertEquals(UpgradeMode.UPDATE, model.upgradeMode());
    }
}
