// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterConfigFile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterServiceConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterServiceConfigsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ContentEncoding;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterServiceConfigsProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterServiceConfigsProfile model = BinaryData.fromString(
            "{\"serviceName\":\"nvowgujju\",\"configs\":[{\"component\":\"dkcglhsl\",\"files\":[{\"fileName\":\"jdyggdtji\",\"content\":\"b\",\"encoding\":\"None\",\"path\":\"qweykhmenev\",\"values\":{\"ybcibvyvdcsit\":\"xfw\",\"eypvhezrkg\":\"nnaamdectehfiqsc\"}}]},{\"component\":\"hcjrefovgmk\",\"files\":[{\"fileName\":\"leyyvx\",\"content\":\"jpkcattpng\",\"encoding\":\"None\",\"path\":\"czsqpjhvm\",\"values\":{\"ysou\":\"v\",\"canoaeupf\":\"q\",\"tuo\":\"yhltrpmopjmcm\"}}]},{\"component\":\"thfuiuaodsfcpkvx\",\"files\":[{\"fileName\":\"puozmyzydag\",\"content\":\"axbezyiuo\",\"encoding\":\"None\",\"path\":\"hrdxwzywqsmbs\",\"values\":{\"ryocfsfksymdd\":\"xim\"}},{\"fileName\":\"stkiiuxhqyud\",\"content\":\"rrqnbpoczvyifqrv\",\"encoding\":\"None\",\"path\":\"sllr\",\"values\":{\"watkpnpulexxb\":\"d\",\"yokacspkw\":\"zwtruwiqzbqjvsov\",\"rkcciwwzjuqk\":\"hzdobpxjmflbvvnc\"}}]}]}")
            .toObject(ClusterServiceConfigsProfile.class);
        Assertions.assertEquals("nvowgujju", model.serviceName());
        Assertions.assertEquals("dkcglhsl", model.configs().get(0).component());
        Assertions.assertEquals("jdyggdtji", model.configs().get(0).files().get(0).fileName());
        Assertions.assertEquals("b", model.configs().get(0).files().get(0).content());
        Assertions.assertEquals(ContentEncoding.NONE, model.configs().get(0).files().get(0).encoding());
        Assertions.assertEquals("qweykhmenev", model.configs().get(0).files().get(0).path());
        Assertions.assertEquals("xfw", model.configs().get(0).files().get(0).values().get("ybcibvyvdcsit"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterServiceConfigsProfile model = new ClusterServiceConfigsProfile().withServiceName("nvowgujju")
            .withConfigs(Arrays.asList(
                new ClusterServiceConfig().withComponent("dkcglhsl")
                    .withFiles(Arrays.asList(new ClusterConfigFile().withFileName("jdyggdtji").withContent("b")
                        .withEncoding(ContentEncoding.NONE).withPath("qweykhmenev")
                        .withValues(mapOf("ybcibvyvdcsit", "xfw", "eypvhezrkg", "nnaamdectehfiqsc")))),
                new ClusterServiceConfig().withComponent("hcjrefovgmk")
                    .withFiles(Arrays.asList(new ClusterConfigFile().withFileName("leyyvx").withContent("jpkcattpng")
                        .withEncoding(ContentEncoding.NONE).withPath("czsqpjhvm")
                        .withValues(mapOf("ysou", "v", "canoaeupf", "q", "tuo", "yhltrpmopjmcm")))),
                new ClusterServiceConfig().withComponent("thfuiuaodsfcpkvx")
                    .withFiles(Arrays.asList(
                        new ClusterConfigFile().withFileName("puozmyzydag").withContent("axbezyiuo")
                            .withEncoding(ContentEncoding.NONE).withPath("hrdxwzywqsmbs")
                            .withValues(mapOf("ryocfsfksymdd", "xim")),
                        new ClusterConfigFile().withFileName("stkiiuxhqyud").withContent("rrqnbpoczvyifqrv")
                            .withEncoding(ContentEncoding.NONE).withPath("sllr").withValues(mapOf("watkpnpulexxb", "d",
                                "yokacspkw", "zwtruwiqzbqjvsov", "rkcciwwzjuqk", "hzdobpxjmflbvvnc"))))));
        model = BinaryData.fromObject(model).toObject(ClusterServiceConfigsProfile.class);
        Assertions.assertEquals("nvowgujju", model.serviceName());
        Assertions.assertEquals("dkcglhsl", model.configs().get(0).component());
        Assertions.assertEquals("jdyggdtji", model.configs().get(0).files().get(0).fileName());
        Assertions.assertEquals("b", model.configs().get(0).files().get(0).content());
        Assertions.assertEquals(ContentEncoding.NONE, model.configs().get(0).files().get(0).encoding());
        Assertions.assertEquals("qweykhmenev", model.configs().get(0).files().get(0).path());
        Assertions.assertEquals("xfw", model.configs().get(0).files().get(0).values().get("ybcibvyvdcsit"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
