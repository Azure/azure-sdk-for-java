// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterPoolInner;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesNetworkProfile;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterPoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterPoolInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Accepted\",\"deploymentId\":\"uv\",\"managedResourceGroupName\":\"xpyb\",\"aksManagedResourceGroupName\":\"m\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"mtz\"},\"computeProfile\":{\"vmSize\":\"pbsphrupidgs\",\"count\":1332019186},\"aksClusterProfile\":{\"aksClusterResourceId\":\"hphoycm\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"ao\",\"msiClientId\":\"hdxbmtqio\",\"msiObjectId\":\"jzehtb\"},\"aksVersion\":\"fpownoizhwlr\"},\"networkProfile\":{\"subnetId\":\"bqsoqijg\"},\"logAnalyticsProfile\":{\"enabled\":true,\"workspaceId\":\"pazlobcufpdz\"},\"status\":\"btcqq\"},\"location\":\"qglhq\",\"tags\":{\"wifsq\":\"foooj\"},\"id\":\"saagdf\",\"name\":\"glzlhjxrifkwmrv\",\"type\":\"tsizntocipaoua\"}")
                .toObject(ClusterPoolInner.class);
        Assertions.assertEquals("qglhq", model.location());
        Assertions.assertEquals("foooj", model.tags().get("wifsq"));
        Assertions.assertEquals("xpyb", model.managedResourceGroupName());
        Assertions.assertEquals("mtz", model.clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("pbsphrupidgs", model.computeProfile().vmSize());
        Assertions.assertEquals("bqsoqijg", model.networkProfile().subnetId());
        Assertions.assertEquals(true, model.logAnalyticsProfile().enabled());
        Assertions.assertEquals("pazlobcufpdz", model.logAnalyticsProfile().workspaceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterPoolInner model =
            new ClusterPoolInner()
                .withLocation("qglhq")
                .withTags(mapOf("wifsq", "foooj"))
                .withManagedResourceGroupName("xpyb")
                .withClusterPoolProfile(
                    new ClusterPoolResourcePropertiesClusterPoolProfile().withClusterPoolVersion("mtz"))
                .withComputeProfile(new ClusterPoolResourcePropertiesComputeProfile().withVmSize("pbsphrupidgs"))
                .withNetworkProfile(new ClusterPoolResourcePropertiesNetworkProfile().withSubnetId("bqsoqijg"))
                .withLogAnalyticsProfile(
                    new ClusterPoolResourcePropertiesLogAnalyticsProfile()
                        .withEnabled(true)
                        .withWorkspaceId("pazlobcufpdz"));
        model = BinaryData.fromObject(model).toObject(ClusterPoolInner.class);
        Assertions.assertEquals("qglhq", model.location());
        Assertions.assertEquals("foooj", model.tags().get("wifsq"));
        Assertions.assertEquals("xpyb", model.managedResourceGroupName());
        Assertions.assertEquals("mtz", model.clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("pbsphrupidgs", model.computeProfile().vmSize());
        Assertions.assertEquals("bqsoqijg", model.networkProfile().subnetId());
        Assertions.assertEquals(true, model.logAnalyticsProfile().enabled());
        Assertions.assertEquals("pazlobcufpdz", model.logAnalyticsProfile().workspaceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
