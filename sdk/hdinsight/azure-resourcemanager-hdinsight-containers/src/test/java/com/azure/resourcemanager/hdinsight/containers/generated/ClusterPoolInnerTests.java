// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterPoolInner;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourceProperties;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesNetworkProfile;
import com.azure.resourcemanager.hdinsight.containers.models.IpTag;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterPoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterPoolInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Accepted\",\"deploymentId\":\"uv\",\"managedResourceGroupName\":\"xpyb\",\"aksManagedResourceGroupName\":\"m\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"mtz\",\"publicIpTag\":{\"ipTagType\":\"bsphrupidgsybbe\",\"tag\":\"hphoycm\"}},\"computeProfile\":{\"vmSize\":\"xaobhdxbmtqioqjz\",\"count\":1801213143,\"availabilityZones\":[\"ufpo\"]},\"aksClusterProfile\":{\"aksClusterResourceId\":\"izhwlrxy\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"soqijg\",\"msiClientId\":\"dmbpazlobcufpdz\",\"msiObjectId\":\"rbt\"},\"aksVersion\":\"qjnqglhqgnufoooj\"},\"networkProfile\":{\"subnetId\":\"ifsqesaagdfmg\",\"outboundType\":\"loadBalancer\",\"enablePrivateApiServer\":false,\"apiServerAuthorizedIpRanges\":[\"ifkwmrvktsizntoc\",\"pa\"]},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"psqucmpoyf\"},\"status\":\"fogknygjofjdde\"},\"location\":\"rd\",\"tags\":{\"sarhmofc\":\"ewnwreitjzyfl\",\"yurkdtmlxhekuksj\":\"hs\"},\"id\":\"xukcdmpar\",\"name\":\"ryuanzwuxzdxtay\",\"type\":\"lhmwhfpmrqobm\"}")
            .toObject(ClusterPoolInner.class);
        Assertions.assertEquals("rd", model.location());
        Assertions.assertEquals("ewnwreitjzyfl", model.tags().get("sarhmofc"));
        Assertions.assertEquals("xpyb", model.properties().managedResourceGroupName());
        Assertions.assertEquals("mtz", model.properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("bsphrupidgsybbe", model.properties().clusterPoolProfile().publicIpTag().ipTagType());
        Assertions.assertEquals("hphoycm", model.properties().clusterPoolProfile().publicIpTag().tag());
        Assertions.assertEquals("xaobhdxbmtqioqjz", model.properties().computeProfile().vmSize());
        Assertions.assertEquals("ufpo", model.properties().computeProfile().availabilityZones().get(0));
        Assertions.assertEquals("ifsqesaagdfmg", model.properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER, model.properties().networkProfile().outboundType());
        Assertions.assertEquals(false, model.properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("ifkwmrvktsizntoc",
            model.properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(false, model.properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("psqucmpoyf", model.properties().logAnalyticsProfile().workspaceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterPoolInner model = new ClusterPoolInner().withLocation("rd")
            .withTags(mapOf("sarhmofc", "ewnwreitjzyfl", "yurkdtmlxhekuksj", "hs"))
            .withProperties(new ClusterPoolResourceProperties().withManagedResourceGroupName("xpyb")
                .withClusterPoolProfile(
                    new ClusterPoolResourcePropertiesClusterPoolProfile().withClusterPoolVersion("mtz")
                        .withPublicIpTag(new IpTag().withIpTagType("bsphrupidgsybbe").withTag("hphoycm")))
                .withComputeProfile(new ClusterPoolResourcePropertiesComputeProfile().withVmSize("xaobhdxbmtqioqjz")
                    .withAvailabilityZones(Arrays.asList("ufpo")))
                .withNetworkProfile(new ClusterPoolResourcePropertiesNetworkProfile().withSubnetId("ifsqesaagdfmg")
                    .withOutboundType(OutboundType.LOAD_BALANCER)
                    .withEnablePrivateApiServer(false)
                    .withApiServerAuthorizedIpRanges(Arrays.asList("ifkwmrvktsizntoc", "pa")))
                .withLogAnalyticsProfile(new ClusterPoolResourcePropertiesLogAnalyticsProfile().withEnabled(false)
                    .withWorkspaceId("psqucmpoyf")));
        model = BinaryData.fromObject(model).toObject(ClusterPoolInner.class);
        Assertions.assertEquals("rd", model.location());
        Assertions.assertEquals("ewnwreitjzyfl", model.tags().get("sarhmofc"));
        Assertions.assertEquals("xpyb", model.properties().managedResourceGroupName());
        Assertions.assertEquals("mtz", model.properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("bsphrupidgsybbe", model.properties().clusterPoolProfile().publicIpTag().ipTagType());
        Assertions.assertEquals("hphoycm", model.properties().clusterPoolProfile().publicIpTag().tag());
        Assertions.assertEquals("xaobhdxbmtqioqjz", model.properties().computeProfile().vmSize());
        Assertions.assertEquals("ufpo", model.properties().computeProfile().availabilityZones().get(0));
        Assertions.assertEquals("ifsqesaagdfmg", model.properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER, model.properties().networkProfile().outboundType());
        Assertions.assertEquals(false, model.properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("ifkwmrvktsizntoc",
            model.properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(false, model.properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("psqucmpoyf", model.properties().logAnalyticsProfile().workspaceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
