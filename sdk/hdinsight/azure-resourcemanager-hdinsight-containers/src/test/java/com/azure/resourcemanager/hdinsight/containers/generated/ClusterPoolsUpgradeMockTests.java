// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolUpgrade;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolUpgradeProperties;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsUpgradeMockTests {
    @Test
    public void testUpgrade() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"deploymentId\":\"rnntiewdjcv\",\"managedResourceGroupName\":\"uwrbehwagoh\",\"aksManagedResourceGroupName\":\"f\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"mrqemvvhmx\"},\"computeProfile\":{\"vmSize\":\"drjf\",\"count\":1547497678},\"aksClusterProfile\":{\"aksClusterResourceId\":\"ebjvewzcjzn\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"cpmguaadraufact\",\"msiClientId\":\"ahzovajjziuxxp\",\"msiObjectId\":\"hneekul\"},\"aksVersion\":\"slqubkwdl\"},\"networkProfile\":{\"subnetId\":\"rds\",\"outboundType\":\"userDefinedRouting\",\"enablePrivateApiServer\":true,\"apiServerAuthorizedIpRanges\":[\"pjuohminyfl\",\"orwmduvwpklv\",\"w\"]},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"xpgpq\"},\"status\":\"isze\"},\"location\":\"nb\",\"tags\":{\"confozauors\":\"xgibbda\",\"epzl\":\"kokwbqplhlvnu\"},\"id\":\"phwzsoldweyuqdu\",\"name\":\"vmnnrw\",\"type\":\"biorktal\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HDInsightContainersManager manager = HDInsightContainersManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response = manager.clusterPools().upgrade("jkqa", "qgzsles",
            new ClusterPoolUpgrade().withProperties(new ClusterPoolUpgradeProperties()),
            com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nb", response.location());
        Assertions.assertEquals("xgibbda", response.tags().get("confozauors"));
        Assertions.assertEquals("uwrbehwagoh", response.properties().managedResourceGroupName());
        Assertions.assertEquals("mrqemvvhmx", response.properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("drjf", response.properties().computeProfile().vmSize());
        Assertions.assertEquals("rds", response.properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.USER_DEFINED_ROUTING,
            response.properties().networkProfile().outboundType());
        Assertions.assertEquals(true, response.properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("pjuohminyfl",
            response.properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(false, response.properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("xpgpq", response.properties().logAnalyticsProfile().workspaceId());
    }
}
