// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolUpgrade;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolUpgradeProperties;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClusterPoolsUpgradeMockTests {
    @Test
    public void testUpgrade() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"deploymentId\":\"mqt\",\"managedResourceGroupName\":\"xyi\",\"aksManagedResourceGroupName\":\"dt\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"cttadi\",\"publicIpTag\":{\"ipTagType\":\"eukmr\",\"tag\":\"ieekpndzaa\"}},\"computeProfile\":{\"vmSize\":\"mudqmeq\",\"count\":334028568,\"availabilityZones\":[\"bu\",\"qwyxebeybpm\"]},\"aksClusterProfile\":{\"aksClusterResourceId\":\"rtffyaqitmh\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"ioqaqhvs\",\"msiClientId\":\"ufuqyrx\",\"msiObjectId\":\"dlcgqlsismjqfr\"},\"aksVersion\":\"gamquhiosrsjui\"},\"networkProfile\":{\"subnetId\":\"cdisyir\",\"outboundType\":\"userDefinedRouting\",\"enablePrivateApiServer\":true,\"apiServerAuthorizedIpRanges\":[\"xrxzbujrtr\",\"qvwre\",\"khgn\",\"nzonzl\"]},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"yw\"},\"status\":\"vjtszcofize\"},\"location\":\"dhgbjkvre\",\"tags\":{\"shcxlpmjerbdk\":\"amurvzmlovuan\",\"bccxjmonfdgn\":\"lvidizozs\",\"ypuuwwltvuqjctze\":\"n\"},\"id\":\"keifzzhmkdasv\",\"name\":\"lyhb\",\"type\":\"cu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightContainersManager manager = HDInsightContainersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response = manager.clusterPools()
            .upgrade("jpahlxvea", "f", new ClusterPoolUpgrade().withProperties(new ClusterPoolUpgradeProperties()),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dhgbjkvre", response.location());
        Assertions.assertEquals("amurvzmlovuan", response.tags().get("shcxlpmjerbdk"));
        Assertions.assertEquals("xyi", response.properties().managedResourceGroupName());
        Assertions.assertEquals("cttadi", response.properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("eukmr", response.properties().clusterPoolProfile().publicIpTag().ipTagType());
        Assertions.assertEquals("ieekpndzaa", response.properties().clusterPoolProfile().publicIpTag().tag());
        Assertions.assertEquals("mudqmeq", response.properties().computeProfile().vmSize());
        Assertions.assertEquals("bu", response.properties().computeProfile().availabilityZones().get(0));
        Assertions.assertEquals("cdisyir", response.properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.USER_DEFINED_ROUTING,
            response.properties().networkProfile().outboundType());
        Assertions.assertEquals(true, response.properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("xrxzbujrtr",
            response.properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(false, response.properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("yw", response.properties().logAnalyticsProfile().workspaceId());
    }
}
