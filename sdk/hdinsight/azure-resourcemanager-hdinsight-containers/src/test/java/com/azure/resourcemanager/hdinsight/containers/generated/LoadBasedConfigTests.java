// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonOperator;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonRule;
import com.azure.resourcemanager.hdinsight.containers.models.LoadBasedConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ScaleActionType;
import com.azure.resourcemanager.hdinsight.containers.models.ScalingRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class LoadBasedConfigTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBasedConfig model = BinaryData.fromString(
            "{\"minNodes\":1358628547,\"maxNodes\":113016072,\"pollInterval\":393084907,\"cooldownPeriod\":1346758763,\"scalingRules\":[{\"actionType\":\"scaledown\",\"evaluationCount\":2142840160,\"scalingMetric\":\"fkts\",\"comparisonRule\":{\"operator\":\"greaterThanOrEqual\",\"threshold\":94.88104}},{\"actionType\":\"scaleup\",\"evaluationCount\":801364840,\"scalingMetric\":\"ocmnyyazttbtwwrq\",\"comparisonRule\":{\"operator\":\"greaterThanOrEqual\",\"threshold\":92.70088}},{\"actionType\":\"scaledown\",\"evaluationCount\":1640743814,\"scalingMetric\":\"kzywbiex\",\"comparisonRule\":{\"operator\":\"greaterThan\",\"threshold\":78.08101}},{\"actionType\":\"scaledown\",\"evaluationCount\":315634017,\"scalingMetric\":\"eaxib\",\"comparisonRule\":{\"operator\":\"greaterThan\",\"threshold\":67.12364}}]}")
            .toObject(LoadBasedConfig.class);
        Assertions.assertEquals(1358628547, model.minNodes());
        Assertions.assertEquals(113016072, model.maxNodes());
        Assertions.assertEquals(393084907, model.pollInterval());
        Assertions.assertEquals(1346758763, model.cooldownPeriod());
        Assertions.assertEquals(ScaleActionType.SCALEDOWN, model.scalingRules().get(0).actionType());
        Assertions.assertEquals(2142840160, model.scalingRules().get(0).evaluationCount());
        Assertions.assertEquals("fkts", model.scalingRules().get(0).scalingMetric());
        Assertions.assertEquals(ComparisonOperator.GREATER_THAN_OR_EQUAL,
            model.scalingRules().get(0).comparisonRule().operator());
        Assertions.assertEquals(94.88104f, model.scalingRules().get(0).comparisonRule().threshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBasedConfig model
            = new LoadBasedConfig().withMinNodes(1358628547).withMaxNodes(113016072).withPollInterval(393084907)
                .withCooldownPeriod(1346758763).withScalingRules(
                    Arrays.asList(
                        new ScalingRule().withActionType(ScaleActionType.SCALEDOWN).withEvaluationCount(2142840160)
                            .withScalingMetric("fkts")
                            .withComparisonRule(new ComparisonRule()
                                .withOperator(ComparisonOperator.GREATER_THAN_OR_EQUAL).withThreshold(94.88104f)),
                        new ScalingRule().withActionType(ScaleActionType.SCALEUP).withEvaluationCount(801364840)
                            .withScalingMetric("ocmnyyazttbtwwrq").withComparisonRule(new ComparisonRule()
                                .withOperator(ComparisonOperator.GREATER_THAN_OR_EQUAL).withThreshold(92.70088f)),
                        new ScalingRule().withActionType(ScaleActionType.SCALEDOWN).withEvaluationCount(1640743814)
                            .withScalingMetric("kzywbiex")
                            .withComparisonRule(new ComparisonRule().withOperator(ComparisonOperator.GREATER_THAN)
                                .withThreshold(78.08101f)),
                        new ScalingRule().withActionType(ScaleActionType.SCALEDOWN).withEvaluationCount(315634017)
                            .withScalingMetric("eaxib").withComparisonRule(new ComparisonRule()
                                .withOperator(ComparisonOperator.GREATER_THAN).withThreshold(67.12364f))));
        model = BinaryData.fromObject(model).toObject(LoadBasedConfig.class);
        Assertions.assertEquals(1358628547, model.minNodes());
        Assertions.assertEquals(113016072, model.maxNodes());
        Assertions.assertEquals(393084907, model.pollInterval());
        Assertions.assertEquals(1346758763, model.cooldownPeriod());
        Assertions.assertEquals(ScaleActionType.SCALEDOWN, model.scalingRules().get(0).actionType());
        Assertions.assertEquals(2142840160, model.scalingRules().get(0).evaluationCount());
        Assertions.assertEquals("fkts", model.scalingRules().get(0).scalingMetric());
        Assertions.assertEquals(ComparisonOperator.GREATER_THAN_OR_EQUAL,
            model.scalingRules().get(0).comparisonRule().operator());
        Assertions.assertEquals(94.88104f, model.scalingRules().get(0).comparisonRule().threshold());
    }
}
