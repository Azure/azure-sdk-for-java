// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClusterPoolsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"deploymentId\":\"fgzdjtxvz\",\"managedResourceGroupName\":\"bqvgaqv\",\"aksManagedResourceGroupName\":\"a\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"qusrdvetnws\",\"publicIpTag\":{\"ipTagType\":\"utnw\",\"tag\":\"duy\"}},\"computeProfile\":{\"vmSize\":\"vuzhyr\",\"count\":680405996,\"availabilityZones\":[\"mvekdxukuqgsjj\",\"undxgketw\",\"hhzjhfj\"]},\"aksClusterProfile\":{\"aksClusterResourceId\":\"vmuvgpmu\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"qsxvmhf\",\"msiClientId\":\"uzjyihsasbhudypo\",\"msiObjectId\":\"yue\"},\"aksVersion\":\"lynsqyrpf\"},\"networkProfile\":{\"subnetId\":\"brlttymsjnygq\",\"outboundType\":\"loadBalancer\",\"enablePrivateApiServer\":false,\"apiServerAuthorizedIpRanges\":[\"zgtila\",\"hnfhqlyvijouwi\"]},\"logAnalyticsProfile\":{\"enabled\":true,\"workspaceId\":\"yzunbixxrtikv\"},\"status\":\"wpgclrcivt\"},\"location\":\"xfrk\",\"tags\":{\"ka\":\"pmyyefrpmpdnqq\",\"vmm\":\"ao\",\"itgvkx\":\"npqfrtqlkzmeg\",\"hcans\":\"zyqdrfegcealzx\"},\"id\":\"moy\",\"name\":\"hlwigdivbkbxg\",\"type\":\"mf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightContainersManager manager = HDInsightContainersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response = manager.clusterPools()
            .getByResourceGroupWithResponse("vyi", "zqodfvpgshox", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xfrk", response.location());
        Assertions.assertEquals("pmyyefrpmpdnqq", response.tags().get("ka"));
        Assertions.assertEquals("bqvgaqv", response.properties().managedResourceGroupName());
        Assertions.assertEquals("qusrdvetnws", response.properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("utnw", response.properties().clusterPoolProfile().publicIpTag().ipTagType());
        Assertions.assertEquals("duy", response.properties().clusterPoolProfile().publicIpTag().tag());
        Assertions.assertEquals("vuzhyr", response.properties().computeProfile().vmSize());
        Assertions.assertEquals("mvekdxukuqgsjj", response.properties().computeProfile().availabilityZones().get(0));
        Assertions.assertEquals("brlttymsjnygq", response.properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER, response.properties().networkProfile().outboundType());
        Assertions.assertEquals(false, response.properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("zgtila", response.properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(true, response.properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("yzunbixxrtikv", response.properties().logAnalyticsProfile().workspaceId());
    }
}
