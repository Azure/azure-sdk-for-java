// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"deploymentId\":\"jioolvrwxk\",\"managedResourceGroupName\":\"kkgll\",\"aksManagedResourceGroupName\":\"jygvjayvbl\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"vkzuhbxvvyhgso\"},\"computeProfile\":{\"vmSize\":\"byrqufeg\",\"count\":659096869},\"aksClusterProfile\":{\"aksClusterResourceId\":\"fbn\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"mctlpdngitv\",\"msiClientId\":\"bmhrixkwmyijejv\",\"msiObjectId\":\"grhbpn\"},\"aksVersion\":\"xexccbdreaxhcexd\"},\"networkProfile\":{\"subnetId\":\"vqahqkghtpwi\"},\"logAnalyticsProfile\":{\"enabled\":true,\"workspaceId\":\"jsvfycxzbfvoowv\"},\"status\":\"mtg\"},\"location\":\"ppyostronzmyhgf\",\"tags\":{\"waekrrjreafxtsgu\":\"sxkm\",\"wslolbqp\":\"hjglikk\",\"felfktg\":\"uzlm\",\"xeznoi\":\"lcrpw\"},\"id\":\"brnjwmw\",\"name\":\"pn\",\"type\":\"saz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HDInsightContainersManager manager =
            HDInsightContainersManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response =
            manager
                .clusterPools()
                .getByResourceGroupWithResponse("yuzhlhkjoqrvq", "aatjinrvgoupmfi", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ppyostronzmyhgf", response.location());
        Assertions.assertEquals("sxkm", response.tags().get("waekrrjreafxtsgu"));
        Assertions.assertEquals("kkgll", response.managedResourceGroupName());
        Assertions.assertEquals("vkzuhbxvvyhgso", response.clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("byrqufeg", response.computeProfile().vmSize());
        Assertions.assertEquals("vqahqkghtpwi", response.networkProfile().subnetId());
        Assertions.assertEquals(true, response.logAnalyticsProfile().enabled());
        Assertions.assertEquals("jsvfycxzbfvoowv", response.logAnalyticsProfile().workspaceId());
    }
}
