// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.Schedule;
import com.azure.resourcemanager.hdinsight.containers.models.ScheduleBasedConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ScheduleDay;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduleBasedConfigTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleBasedConfig model = BinaryData.fromString(
            "{\"timeZone\":\"bsrfbj\",\"defaultCount\":891212878,\"schedules\":[{\"startTime\":\"w\",\"endTime\":\"sotftpvj\",\"count\":1235013026,\"days\":[\"Tuesday\",\"Wednesday\",\"Monday\",\"Thursday\"]}]}")
            .toObject(ScheduleBasedConfig.class);
        Assertions.assertEquals("bsrfbj", model.timeZone());
        Assertions.assertEquals(891212878, model.defaultCount());
        Assertions.assertEquals("w", model.schedules().get(0).startTime());
        Assertions.assertEquals("sotftpvj", model.schedules().get(0).endTime());
        Assertions.assertEquals(1235013026, model.schedules().get(0).count());
        Assertions.assertEquals(ScheduleDay.TUESDAY, model.schedules().get(0).days().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleBasedConfig model = new ScheduleBasedConfig().withTimeZone("bsrfbj")
            .withDefaultCount(891212878)
            .withSchedules(Arrays.asList(new Schedule().withStartTime("w")
                .withEndTime("sotftpvj")
                .withCount(1235013026)
                .withDays(Arrays.asList(ScheduleDay.TUESDAY, ScheduleDay.WEDNESDAY, ScheduleDay.MONDAY,
                    ScheduleDay.THURSDAY))));
        model = BinaryData.fromObject(model).toObject(ScheduleBasedConfig.class);
        Assertions.assertEquals("bsrfbj", model.timeZone());
        Assertions.assertEquals(891212878, model.defaultCount());
        Assertions.assertEquals("w", model.schedules().get(0).startTime());
        Assertions.assertEquals("sotftpvj", model.schedules().get(0).endTime());
        Assertions.assertEquals(1235013026, model.schedules().get(0).count());
        Assertions.assertEquals(ScheduleDay.TUESDAY, model.schedules().get(0).days().get(0));
    }
}
