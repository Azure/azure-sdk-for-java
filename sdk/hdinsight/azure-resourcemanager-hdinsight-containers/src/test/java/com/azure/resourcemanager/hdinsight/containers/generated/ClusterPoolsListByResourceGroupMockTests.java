// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"deploymentId\":\"qgaifmviklbydv\",\"managedResourceGroupName\":\"bejdznxcv\",\"aksManagedResourceGroupName\":\"rhnj\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"olvtnovqfzge\"},\"computeProfile\":{\"vmSize\":\"jdftuljltd\",\"count\":1745294880},\"aksClusterProfile\":{\"aksClusterResourceId\":\"tmczuomejwcwwqi\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"nssxmojmsvpk\",\"msiClientId\":\"prvkwcfzqljyxgtc\",\"msiObjectId\":\"heyd\"},\"aksVersion\":\"dshmkxmaehvbbx\"},\"networkProfile\":{\"subnetId\":\"iplt\",\"outboundType\":\"loadBalancer\",\"enablePrivateApiServer\":false,\"apiServerAuthorizedIpRanges\":[\"kgxywr\"]},\"logAnalyticsProfile\":{\"enabled\":true,\"workspaceId\":\"kl\"},\"status\":\"pluodpv\"},\"location\":\"udlgzibthostgkts\",\"tags\":{\"odqkdlwwqfb\":\"xeclzedqbcvhzlhp\",\"lmbtxhwgfwsrt\":\"mlkxtrqjfs\",\"kh\":\"wcoezbrhub\",\"ookk\":\"dyg\"},\"id\":\"fqjbvleo\",\"name\":\"fmluiqtqzfavyvn\",\"type\":\"qybaryeua\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HDInsightContainersManager manager = HDInsightContainersManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ClusterPool> response
            = manager.clusterPools().listByResourceGroup("rpxeh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("udlgzibthostgkts", response.iterator().next().location());
        Assertions.assertEquals("xeclzedqbcvhzlhp", response.iterator().next().tags().get("odqkdlwwqfb"));
        Assertions.assertEquals("bejdznxcv", response.iterator().next().properties().managedResourceGroupName());
        Assertions.assertEquals("olvtnovqfzge",
            response.iterator().next().properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("jdftuljltd", response.iterator().next().properties().computeProfile().vmSize());
        Assertions.assertEquals("iplt", response.iterator().next().properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER,
            response.iterator().next().properties().networkProfile().outboundType());
        Assertions.assertEquals(false,
            response.iterator().next().properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("kgxywr",
            response.iterator().next().properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(true, response.iterator().next().properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("kl", response.iterator().next().properties().logAnalyticsProfile().workspaceId());
    }
}
