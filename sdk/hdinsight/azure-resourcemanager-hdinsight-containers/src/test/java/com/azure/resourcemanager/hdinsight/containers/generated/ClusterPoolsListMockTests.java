// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"deploymentId\":\"faazpxdtnkdmkqjj\",\"managedResourceGroupName\":\"uenvrkp\",\"aksManagedResourceGroupName\":\"uaibrebqaaysj\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"xqtnq\"},\"computeProfile\":{\"vmSize\":\"tezlwff\",\"count\":1105838597},\"aksClusterProfile\":{\"aksClusterResourceId\":\"jpqqmted\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"mmji\",\"msiClientId\":\"yeozphvwauyqncy\",\"msiObjectId\":\"upkvipmdsc\"},\"aksVersion\":\"qupevzh\"},\"networkProfile\":{\"subnetId\":\"totxhojujb\"},\"logAnalyticsProfile\":{\"enabled\":true,\"workspaceId\":\"mc\"},\"status\":\"hixbjxyfwnyl\"},\"location\":\"ool\",\"tags\":{\"iwkkbn\":\"p\",\"rd\":\"jrywvtylbfpnc\",\"htywubxcbihwq\":\"iwii\",\"wjchrdg\":\"nfdn\"},\"id\":\"ihxumwctondzj\",\"name\":\"uu\",\"type\":\"fdlwg\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HDInsightContainersManager manager =
            HDInsightContainersManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ClusterPool> response = manager.clusterPools().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ool", response.iterator().next().location());
        Assertions.assertEquals("p", response.iterator().next().tags().get("iwkkbn"));
        Assertions.assertEquals("uenvrkp", response.iterator().next().managedResourceGroupName());
        Assertions.assertEquals("xqtnq", response.iterator().next().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("tezlwff", response.iterator().next().computeProfile().vmSize());
        Assertions.assertEquals("totxhojujb", response.iterator().next().networkProfile().subnetId());
        Assertions.assertEquals(true, response.iterator().next().logAnalyticsProfile().enabled());
        Assertions.assertEquals("mc", response.iterator().next().logAnalyticsProfile().workspaceId());
    }
}
