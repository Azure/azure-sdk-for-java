// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClusterPoolsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"deploymentId\":\"dxasicddyvv\",\"managedResourceGroupName\":\"kgfmocwahpq\",\"aksManagedResourceGroupName\":\"tjeaahhvjhh\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"kzyb\",\"publicIpTag\":{\"ipTagType\":\"jid\",\"tag\":\"ksyxkyxvxevblbje\"}},\"computeProfile\":{\"vmSize\":\"nljlageuaulx\",\"count\":783935050,\"availabilityZones\":[\"bn\",\"ppxynenls\"]},\"aksClusterProfile\":{\"aksClusterResourceId\":\"izzgwkln\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"mffeycxcktpi\",\"msiClientId\":\"merteeammxqiek\",\"msiObjectId\":\"kzddrtkgdojbmxva\"},\"aksVersion\":\"efdeesve\"},\"networkProfile\":{\"subnetId\":\"ijpxtx\",\"outboundType\":\"loadBalancer\",\"enablePrivateApiServer\":true,\"apiServerAuthorizedIpRanges\":[\"jwsawddjibab\",\"vit\",\"tvtzeexavoxtfg\",\"ecdmdqbwpy\"]},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"sfj\"},\"status\":\"b\"},\"location\":\"hhxud\",\"tags\":{\"es\":\"odhtnsirudhzm\",\"zrcxfailcfxwmdbo\":\"kdlpa\"},\"id\":\"dfgsftufqobrj\",\"name\":\"nac\",\"type\":\"cc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightContainersManager manager = HDInsightContainersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ClusterPool> response = manager.clusterPools().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hhxud", response.iterator().next().location());
        Assertions.assertEquals("odhtnsirudhzm", response.iterator().next().tags().get("es"));
        Assertions.assertEquals("kgfmocwahpq", response.iterator().next().properties().managedResourceGroupName());
        Assertions.assertEquals("kzyb",
            response.iterator().next().properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("jid",
            response.iterator().next().properties().clusterPoolProfile().publicIpTag().ipTagType());
        Assertions.assertEquals("ksyxkyxvxevblbje",
            response.iterator().next().properties().clusterPoolProfile().publicIpTag().tag());
        Assertions.assertEquals("nljlageuaulx", response.iterator().next().properties().computeProfile().vmSize());
        Assertions.assertEquals("bn",
            response.iterator().next().properties().computeProfile().availabilityZones().get(0));
        Assertions.assertEquals("ijpxtx", response.iterator().next().properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER,
            response.iterator().next().properties().networkProfile().outboundType());
        Assertions.assertEquals(true,
            response.iterator().next().properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("jwsawddjibab",
            response.iterator().next().properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(false, response.iterator().next().properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("sfj", response.iterator().next().properties().logAnalyticsProfile().workspaceId());
    }
}
