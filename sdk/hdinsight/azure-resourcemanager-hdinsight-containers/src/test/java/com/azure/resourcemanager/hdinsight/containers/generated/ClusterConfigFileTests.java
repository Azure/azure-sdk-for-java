// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterConfigFile;
import com.azure.resourcemanager.hdinsight.containers.models.ContentEncoding;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterConfigFileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterConfigFile model = BinaryData.fromString(
            "{\"fileName\":\"ttouwaboekqvkel\",\"content\":\"mvb\",\"encoding\":\"None\",\"path\":\"sflhhca\",\"values\":{\"yjpkiidzyexz\":\"jixisxyawjoyaqcs\"}}")
            .toObject(ClusterConfigFile.class);
        Assertions.assertEquals("ttouwaboekqvkel", model.fileName());
        Assertions.assertEquals("mvb", model.content());
        Assertions.assertEquals(ContentEncoding.NONE, model.encoding());
        Assertions.assertEquals("sflhhca", model.path());
        Assertions.assertEquals("jixisxyawjoyaqcs", model.values().get("yjpkiidzyexz"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterConfigFile model = new ClusterConfigFile().withFileName("ttouwaboekqvkel")
            .withContent("mvb")
            .withEncoding(ContentEncoding.NONE)
            .withPath("sflhhca")
            .withValues(mapOf("yjpkiidzyexz", "jixisxyawjoyaqcs"));
        model = BinaryData.fromObject(model).toObject(ClusterConfigFile.class);
        Assertions.assertEquals("ttouwaboekqvkel", model.fileName());
        Assertions.assertEquals("mvb", model.content());
        Assertions.assertEquals(ContentEncoding.NONE, model.encoding());
        Assertions.assertEquals("sflhhca", model.path());
        Assertions.assertEquals("jixisxyawjoyaqcs", model.values().get("yjpkiidzyexz"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
