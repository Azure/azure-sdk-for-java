// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.fluent.models.ClusterPoolInner;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolListResult;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourceProperties;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesNetworkProfile;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterPoolListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterPoolListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"deploymentId\":\"jdous\",\"managedResourceGroupName\":\"qvkoc\",\"aksManagedResourceGroupName\":\"jdkwtnhxbnjb\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"sqrglssainq\"},\"computeProfile\":{\"vmSize\":\"jwnzlljfmp\",\"count\":1098993569},\"aksClusterProfile\":{\"aksClusterResourceId\":\"mgxsab\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"qduujitcjczdz\",\"msiClientId\":\"vndhkrwpdapp\",\"msiObjectId\":\"sbdkvwr\"},\"aksVersion\":\"feusnhut\"},\"networkProfile\":{\"subnetId\":\"ltmrldh\",\"outboundType\":\"loadBalancer\",\"enablePrivateApiServer\":true,\"apiServerAuthorizedIpRanges\":[\"tqxhocdgeab\",\"gphuticndvka\"]},\"logAnalyticsProfile\":{\"enabled\":true,\"workspaceId\":\"i\"},\"status\":\"yhxhu\"},\"location\":\"k\",\"tags\":{\"iawxklry\":\"xolniwpwcukjfk\",\"cbacphejkotynqg\":\"lwckbasyypnddhs\"},\"id\":\"ulzndlikwyqk\",\"name\":\"fgibmadgakeq\",\"type\":\"rxybz\"}],\"nextLink\":\"e\"}")
            .toObject(ClusterPoolListResult.class);
        Assertions.assertEquals("k", model.value().get(0).location());
        Assertions.assertEquals("xolniwpwcukjfk", model.value().get(0).tags().get("iawxklry"));
        Assertions.assertEquals("qvkoc", model.value().get(0).properties().managedResourceGroupName());
        Assertions.assertEquals("sqrglssainq",
            model.value().get(0).properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("jwnzlljfmp", model.value().get(0).properties().computeProfile().vmSize());
        Assertions.assertEquals("ltmrldh", model.value().get(0).properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER,
            model.value().get(0).properties().networkProfile().outboundType());
        Assertions.assertEquals(true, model.value().get(0).properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("tqxhocdgeab",
            model.value().get(0).properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(true, model.value().get(0).properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("i", model.value().get(0).properties().logAnalyticsProfile().workspaceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterPoolListResult model = new ClusterPoolListResult().withValue(Arrays.asList(new ClusterPoolInner()
            .withLocation("k").withTags(mapOf("iawxklry", "xolniwpwcukjfk", "cbacphejkotynqg", "lwckbasyypnddhs"))
            .withProperties(new ClusterPoolResourceProperties().withManagedResourceGroupName("qvkoc")
                .withClusterPoolProfile(
                    new ClusterPoolResourcePropertiesClusterPoolProfile().withClusterPoolVersion("sqrglssainq"))
                .withComputeProfile(new ClusterPoolResourcePropertiesComputeProfile().withVmSize("jwnzlljfmp"))
                .withNetworkProfile(new ClusterPoolResourcePropertiesNetworkProfile().withSubnetId("ltmrldh")
                    .withOutboundType(OutboundType.LOAD_BALANCER).withEnablePrivateApiServer(true)
                    .withApiServerAuthorizedIpRanges(Arrays.asList("tqxhocdgeab", "gphuticndvka")))
                .withLogAnalyticsProfile(
                    new ClusterPoolResourcePropertiesLogAnalyticsProfile().withEnabled(true).withWorkspaceId("i")))));
        model = BinaryData.fromObject(model).toObject(ClusterPoolListResult.class);
        Assertions.assertEquals("k", model.value().get(0).location());
        Assertions.assertEquals("xolniwpwcukjfk", model.value().get(0).tags().get("iawxklry"));
        Assertions.assertEquals("qvkoc", model.value().get(0).properties().managedResourceGroupName());
        Assertions.assertEquals("sqrglssainq",
            model.value().get(0).properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("jwnzlljfmp", model.value().get(0).properties().computeProfile().vmSize());
        Assertions.assertEquals("ltmrldh", model.value().get(0).properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER,
            model.value().get(0).properties().networkProfile().outboundType());
        Assertions.assertEquals(true, model.value().get(0).properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("tqxhocdgeab",
            model.value().get(0).properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(true, model.value().get(0).properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("i", model.value().get(0).properties().logAnalyticsProfile().workspaceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
