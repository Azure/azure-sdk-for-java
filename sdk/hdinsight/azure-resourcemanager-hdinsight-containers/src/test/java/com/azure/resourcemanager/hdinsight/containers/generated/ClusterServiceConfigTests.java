// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterConfigFile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterServiceConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ContentEncoding;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterServiceConfigTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterServiceConfig model = BinaryData.fromString(
            "{\"component\":\"xobbcswsrt\",\"files\":[{\"fileName\":\"iplrbpbewtghfgb\",\"content\":\"gw\",\"encoding\":\"None\",\"path\":\"v\",\"values\":{\"mxiebw\":\"kbegibt\",\"gwyzm\":\"aloayqcgwrtzju\",\"mtsavjcbpwxqp\":\"txon\",\"yvxqtayriwwroy\":\"rknftguvriuhprwm\"}},{\"fileName\":\"bexrmcq\",\"content\":\"ycnojvknmefqsg\",\"encoding\":\"Base64\",\"path\":\"apj\",\"values\":{\"lxkvu\":\"pvgqzcjrvxdjzlm\",\"n\":\"fhzovawjvzunluth\"}},{\"fileName\":\"rnxipei\",\"content\":\"jzuaejxdultskzbb\",\"encoding\":\"None\",\"path\":\"mv\",\"values\":{\"zuhkfpbsjyof\":\"gpw\",\"us\":\"xl\"}}]}")
            .toObject(ClusterServiceConfig.class);
        Assertions.assertEquals("xobbcswsrt", model.component());
        Assertions.assertEquals("iplrbpbewtghfgb", model.files().get(0).fileName());
        Assertions.assertEquals("gw", model.files().get(0).content());
        Assertions.assertEquals(ContentEncoding.NONE, model.files().get(0).encoding());
        Assertions.assertEquals("v", model.files().get(0).path());
        Assertions.assertEquals("kbegibt", model.files().get(0).values().get("mxiebw"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterServiceConfig model = new ClusterServiceConfig().withComponent("xobbcswsrt")
            .withFiles(Arrays.asList(
                new ClusterConfigFile().withFileName("iplrbpbewtghfgb")
                    .withContent("gw")
                    .withEncoding(ContentEncoding.NONE)
                    .withPath("v")
                    .withValues(mapOf("mxiebw", "kbegibt", "gwyzm", "aloayqcgwrtzju", "mtsavjcbpwxqp", "txon",
                        "yvxqtayriwwroy", "rknftguvriuhprwm")),
                new ClusterConfigFile().withFileName("bexrmcq")
                    .withContent("ycnojvknmefqsg")
                    .withEncoding(ContentEncoding.BASE64)
                    .withPath("apj")
                    .withValues(mapOf("lxkvu", "pvgqzcjrvxdjzlm", "n", "fhzovawjvzunluth")),
                new ClusterConfigFile().withFileName("rnxipei")
                    .withContent("jzuaejxdultskzbb")
                    .withEncoding(ContentEncoding.NONE)
                    .withPath("mv")
                    .withValues(mapOf("zuhkfpbsjyof", "gpw", "us", "xl"))));
        model = BinaryData.fromObject(model).toObject(ClusterServiceConfig.class);
        Assertions.assertEquals("xobbcswsrt", model.component());
        Assertions.assertEquals("iplrbpbewtghfgb", model.files().get(0).fileName());
        Assertions.assertEquals("gw", model.files().get(0).content());
        Assertions.assertEquals(ContentEncoding.NONE, model.files().get(0).encoding());
        Assertions.assertEquals("v", model.files().get(0).path());
        Assertions.assertEquals("kbegibt", model.files().get(0).values().get("mxiebw"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
