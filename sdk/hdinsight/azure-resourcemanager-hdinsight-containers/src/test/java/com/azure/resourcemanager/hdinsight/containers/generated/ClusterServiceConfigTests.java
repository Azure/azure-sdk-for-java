// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterConfigFile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterServiceConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ContentEncoding;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterServiceConfigTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterServiceConfig model =
            BinaryData
                .fromString(
                    "{\"component\":\"nkxmyskpbhenbtk\",\"files\":[{\"fileName\":\"ywn\",\"content\":\"nrs\",\"encoding\":\"Base64\",\"path\":\"idybyxczf\",\"values\":{\"fkts\":\"aaxdbabphlwrq\",\"nyyazttbtwwrqpue\":\"hsucoc\",\"xibxujwbhqwalm\":\"ckzywbiexzfeyue\"}},{\"fileName\":\"zyoxaepdkzjan\",\"content\":\"xrhdwbavxbniwdjs\",\"encoding\":\"Base64\",\"path\":\"dbpgnxytxhp\",\"values\":{\"hxw\":\"zpfzabglc\",\"bbovplwzbhvgyugu\":\"ctyqik\"}},{\"fileName\":\"svmkfssxquk\",\"content\":\"plgmgsxnk\",\"encoding\":\"Base64\",\"path\":\"es\",\"values\":{\"xpkd\":\"lopwiyig\",\"iuebbaumny\":\"zb\",\"txp\":\"upedeojnabckhs\"}},{\"fileName\":\"ie\",\"content\":\"fhvpesaps\",\"encoding\":\"Base64\",\"path\":\"mhjjdhtldwkyzx\",\"values\":{\"ws\":\"kn\",\"vnm\":\"wsvlxotogtwrupqs\"}}]}")
                .toObject(ClusterServiceConfig.class);
        Assertions.assertEquals("nkxmyskpbhenbtk", model.component());
        Assertions.assertEquals("ywn", model.files().get(0).fileName());
        Assertions.assertEquals("nrs", model.files().get(0).content());
        Assertions.assertEquals(ContentEncoding.BASE64, model.files().get(0).encoding());
        Assertions.assertEquals("idybyxczf", model.files().get(0).path());
        Assertions.assertEquals("aaxdbabphlwrq", model.files().get(0).values().get("fkts"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterServiceConfig model =
            new ClusterServiceConfig()
                .withComponent("nkxmyskpbhenbtk")
                .withFiles(
                    Arrays
                        .asList(
                            new ClusterConfigFile()
                                .withFileName("ywn")
                                .withContent("nrs")
                                .withEncoding(ContentEncoding.BASE64)
                                .withPath("idybyxczf")
                                .withValues(
                                    mapOf(
                                        "fkts",
                                        "aaxdbabphlwrq",
                                        "nyyazttbtwwrqpue",
                                        "hsucoc",
                                        "xibxujwbhqwalm",
                                        "ckzywbiexzfeyue")),
                            new ClusterConfigFile()
                                .withFileName("zyoxaepdkzjan")
                                .withContent("xrhdwbavxbniwdjs")
                                .withEncoding(ContentEncoding.BASE64)
                                .withPath("dbpgnxytxhp")
                                .withValues(mapOf("hxw", "zpfzabglc", "bbovplwzbhvgyugu", "ctyqik")),
                            new ClusterConfigFile()
                                .withFileName("svmkfssxquk")
                                .withContent("plgmgsxnk")
                                .withEncoding(ContentEncoding.BASE64)
                                .withPath("es")
                                .withValues(mapOf("xpkd", "lopwiyig", "iuebbaumny", "zb", "txp", "upedeojnabckhs")),
                            new ClusterConfigFile()
                                .withFileName("ie")
                                .withContent("fhvpesaps")
                                .withEncoding(ContentEncoding.BASE64)
                                .withPath("mhjjdhtldwkyzx")
                                .withValues(mapOf("ws", "kn", "vnm", "wsvlxotogtwrupqs"))));
        model = BinaryData.fromObject(model).toObject(ClusterServiceConfig.class);
        Assertions.assertEquals("nkxmyskpbhenbtk", model.component());
        Assertions.assertEquals("ywn", model.files().get(0).fileName());
        Assertions.assertEquals("nrs", model.files().get(0).content());
        Assertions.assertEquals(ContentEncoding.BASE64, model.files().get(0).encoding());
        Assertions.assertEquals("idybyxczf", model.files().get(0).path());
        Assertions.assertEquals("aaxdbabphlwrq", model.files().get(0).values().get("fkts"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
