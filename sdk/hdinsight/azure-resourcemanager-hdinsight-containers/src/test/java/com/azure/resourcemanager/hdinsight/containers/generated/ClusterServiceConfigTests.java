// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterConfigFile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterServiceConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ContentEncoding;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterServiceConfigTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterServiceConfig model = BinaryData.fromString(
            "{\"component\":\"rsa\",\"files\":[{\"fileName\":\"wkuofoskghsauu\",\"content\":\"jmvxie\",\"encoding\":\"Base64\",\"path\":\"idyjrrfbyaosvexc\",\"values\":{\"vleggzfbuhfmvfax\":\"pclhocohslk\"}},{\"fileName\":\"ffeii\",\"content\":\"lvmezyvshxmzsbbz\",\"encoding\":\"Base64\",\"path\":\"grxwbu\",\"values\":{\"enkouknvudw\":\"xxjnspydptk\"}}]}")
            .toObject(ClusterServiceConfig.class);
        Assertions.assertEquals("rsa", model.component());
        Assertions.assertEquals("wkuofoskghsauu", model.files().get(0).fileName());
        Assertions.assertEquals("jmvxie", model.files().get(0).content());
        Assertions.assertEquals(ContentEncoding.BASE64, model.files().get(0).encoding());
        Assertions.assertEquals("idyjrrfbyaosvexc", model.files().get(0).path());
        Assertions.assertEquals("pclhocohslk", model.files().get(0).values().get("vleggzfbuhfmvfax"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterServiceConfig model = new ClusterServiceConfig().withComponent("rsa")
            .withFiles(Arrays.asList(
                new ClusterConfigFile().withFileName("wkuofoskghsauu").withContent("jmvxie")
                    .withEncoding(ContentEncoding.BASE64).withPath("idyjrrfbyaosvexc")
                    .withValues(mapOf("vleggzfbuhfmvfax", "pclhocohslk")),
                new ClusterConfigFile().withFileName("ffeii").withContent("lvmezyvshxmzsbbz")
                    .withEncoding(ContentEncoding.BASE64).withPath("grxwbu")
                    .withValues(mapOf("enkouknvudw", "xxjnspydptk"))));
        model = BinaryData.fromObject(model).toObject(ClusterServiceConfig.class);
        Assertions.assertEquals("rsa", model.component());
        Assertions.assertEquals("wkuofoskghsauu", model.files().get(0).fileName());
        Assertions.assertEquals("jmvxie", model.files().get(0).content());
        Assertions.assertEquals(ContentEncoding.BASE64, model.files().get(0).encoding());
        Assertions.assertEquals("idyjrrfbyaosvexc", model.files().get(0).path());
        Assertions.assertEquals("pclhocohslk", model.files().get(0).values().get("vleggzfbuhfmvfax"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
