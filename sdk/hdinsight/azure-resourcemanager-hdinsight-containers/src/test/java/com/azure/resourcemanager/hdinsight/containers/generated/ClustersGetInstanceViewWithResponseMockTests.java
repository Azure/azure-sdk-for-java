// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterInstanceViewResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersGetInstanceViewWithResponseMockTests {
    @Test
    public void testGetInstanceViewWithResponse() throws Exception {
        String responseStr
            = "{\"name\":\"tu\",\"properties\":{\"status\":{\"ready\":\"o\",\"reason\":\"e\",\"message\":\"ncnwfepbnwgf\"},\"serviceStatuses\":[{\"kind\":\"jgcgbjbgdlfgtdys\",\"ready\":\"aquflqbctqha\",\"message\":\"jrwdkqz\"}]}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightContainersManager manager = HDInsightContainersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterInstanceViewResult response = manager.clusters()
            .getInstanceViewWithResponse("hwpusxj", "aqehg", "dohzjq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("tu", response.name());
        Assertions.assertEquals("o", response.properties().status().ready());
        Assertions.assertEquals("e", response.properties().status().reason());
        Assertions.assertEquals("ncnwfepbnwgf", response.properties().status().message());
        Assertions.assertEquals("jgcgbjbgdlfgtdys", response.properties().serviceStatuses().get(0).kind());
        Assertions.assertEquals("aquflqbctqha", response.properties().serviceStatuses().get(0).ready());
        Assertions.assertEquals("jrwdkqz", response.properties().serviceStatuses().get(0).message());
    }
}
