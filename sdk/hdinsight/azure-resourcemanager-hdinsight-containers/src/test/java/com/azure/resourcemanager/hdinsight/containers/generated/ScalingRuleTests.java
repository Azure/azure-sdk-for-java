// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonOperator;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonRule;
import com.azure.resourcemanager.hdinsight.containers.models.ScaleActionType;
import com.azure.resourcemanager.hdinsight.containers.models.ScalingRule;
import org.junit.jupiter.api.Assertions;

public final class ScalingRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingRule model = BinaryData.fromString(
            "{\"actionType\":\"scaleup\",\"evaluationCount\":1281560612,\"scalingMetric\":\"hqwa\",\"comparisonRule\":{\"operator\":\"lessThan\",\"threshold\":44.0332}}")
            .toObject(ScalingRule.class);
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.actionType());
        Assertions.assertEquals(1281560612, model.evaluationCount());
        Assertions.assertEquals("hqwa", model.scalingMetric());
        Assertions.assertEquals(ComparisonOperator.LESS_THAN, model.comparisonRule().operator());
        Assertions.assertEquals(44.0332f, model.comparisonRule().threshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingRule model = new ScalingRule().withActionType(ScaleActionType.SCALEUP).withEvaluationCount(1281560612)
            .withScalingMetric("hqwa").withComparisonRule(
                new ComparisonRule().withOperator(ComparisonOperator.LESS_THAN).withThreshold(44.0332f));
        model = BinaryData.fromObject(model).toObject(ScalingRule.class);
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.actionType());
        Assertions.assertEquals(1281560612, model.evaluationCount());
        Assertions.assertEquals("hqwa", model.scalingMetric());
        Assertions.assertEquals(ComparisonOperator.LESS_THAN, model.comparisonRule().operator());
        Assertions.assertEquals(44.0332f, model.comparisonRule().threshold());
    }
}
