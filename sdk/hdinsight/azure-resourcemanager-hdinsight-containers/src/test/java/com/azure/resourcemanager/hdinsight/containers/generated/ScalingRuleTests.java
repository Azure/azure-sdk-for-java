// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonOperator;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonRule;
import com.azure.resourcemanager.hdinsight.containers.models.ScaleActionType;
import com.azure.resourcemanager.hdinsight.containers.models.ScalingRule;
import org.junit.jupiter.api.Assertions;

public final class ScalingRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingRule model =
            BinaryData
                .fromString(
                    "{\"actionType\":\"scaleup\",\"evaluationCount\":1628145340,\"scalingMetric\":\"jgjrwjueiotwm\",\"comparisonRule\":{\"operator\":\"lessThan\",\"threshold\":43.039276}}")
                .toObject(ScalingRule.class);
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.actionType());
        Assertions.assertEquals(1628145340, model.evaluationCount());
        Assertions.assertEquals("jgjrwjueiotwm", model.scalingMetric());
        Assertions.assertEquals(ComparisonOperator.LESS_THAN, model.comparisonRule().operator());
        Assertions.assertEquals(43.039276f, model.comparisonRule().threshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingRule model =
            new ScalingRule()
                .withActionType(ScaleActionType.SCALEUP)
                .withEvaluationCount(1628145340)
                .withScalingMetric("jgjrwjueiotwm")
                .withComparisonRule(
                    new ComparisonRule().withOperator(ComparisonOperator.LESS_THAN).withThreshold(43.039276f));
        model = BinaryData.fromObject(model).toObject(ScalingRule.class);
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.actionType());
        Assertions.assertEquals(1628145340, model.evaluationCount());
        Assertions.assertEquals("jgjrwjueiotwm", model.scalingMetric());
        Assertions.assertEquals(ComparisonOperator.LESS_THAN, model.comparisonRule().operator());
        Assertions.assertEquals(43.039276f, model.comparisonRule().threshold());
    }
}
