// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonOperator;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonRule;
import com.azure.resourcemanager.hdinsight.containers.models.ScaleActionType;
import com.azure.resourcemanager.hdinsight.containers.models.ScalingRule;
import org.junit.jupiter.api.Assertions;

public final class ScalingRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingRule model = BinaryData.fromString(
            "{\"actionType\":\"scaleup\",\"evaluationCount\":962281735,\"scalingMetric\":\"nayqi\",\"comparisonRule\":{\"operator\":\"greaterThanOrEqual\",\"threshold\":83.24161}}")
            .toObject(ScalingRule.class);
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.actionType());
        Assertions.assertEquals(962281735, model.evaluationCount());
        Assertions.assertEquals("nayqi", model.scalingMetric());
        Assertions.assertEquals(ComparisonOperator.GREATER_THAN_OR_EQUAL, model.comparisonRule().operator());
        Assertions.assertEquals(83.24161f, model.comparisonRule().threshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingRule model = new ScalingRule().withActionType(ScaleActionType.SCALEUP)
            .withEvaluationCount(962281735)
            .withScalingMetric("nayqi")
            .withComparisonRule(
                new ComparisonRule().withOperator(ComparisonOperator.GREATER_THAN_OR_EQUAL).withThreshold(83.24161f));
        model = BinaryData.fromObject(model).toObject(ScalingRule.class);
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.actionType());
        Assertions.assertEquals(962281735, model.evaluationCount());
        Assertions.assertEquals("nayqi", model.scalingMetric());
        Assertions.assertEquals(ComparisonOperator.GREATER_THAN_OR_EQUAL, model.comparisonRule().operator());
        Assertions.assertEquals(83.24161f, model.comparisonRule().threshold());
    }
}
