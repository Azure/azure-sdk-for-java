// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterResizeData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterResizeProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterResizeDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterResizeData model = BinaryData.fromString(
            "{\"properties\":{\"targetWorkerNodeCount\":1929078891},\"location\":\"gvvcnayrhyr\",\"tags\":{\"qqtch\":\"mueedndrdvstk\",\"mtdaa\":\"alm\"},\"id\":\"gdv\",\"name\":\"vgpiohgwxrt\",\"type\":\"udxepxgyqagv\"}")
            .toObject(ClusterResizeData.class);
        Assertions.assertEquals("gvvcnayrhyr", model.location());
        Assertions.assertEquals("mueedndrdvstk", model.tags().get("qqtch"));
        Assertions.assertEquals(1929078891, model.properties().targetWorkerNodeCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterResizeData model = new ClusterResizeData().withLocation("gvvcnayrhyr")
            .withTags(mapOf("qqtch", "mueedndrdvstk", "mtdaa", "alm"))
            .withProperties(new ClusterResizeProperties().withTargetWorkerNodeCount(1929078891));
        model = BinaryData.fromObject(model).toObject(ClusterResizeData.class);
        Assertions.assertEquals("gvvcnayrhyr", model.location());
        Assertions.assertEquals("mueedndrdvstk", model.tags().get("qqtch"));
        Assertions.assertEquals(1929078891, model.properties().targetWorkerNodeCount());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
