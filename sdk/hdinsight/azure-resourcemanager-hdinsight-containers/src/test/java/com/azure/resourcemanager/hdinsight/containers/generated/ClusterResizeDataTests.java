// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterResizeData;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterResizeDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterResizeData model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"targetWorkerNodeCount\":1761160515},\"location\":\"pt\",\"tags\":{\"pzfqrhhuaoppp\":\"gpfqbuace\",\"z\":\"qeqxo\"},\"id\":\"ahzxctobgbk\",\"name\":\"moizpos\",\"type\":\"mgrcfbu\"}")
                .toObject(ClusterResizeData.class);
        Assertions.assertEquals("pt", model.location());
        Assertions.assertEquals("gpfqbuace", model.tags().get("pzfqrhhuaoppp"));
        Assertions.assertEquals(1761160515, model.targetWorkerNodeCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterResizeData model =
            new ClusterResizeData()
                .withLocation("pt")
                .withTags(mapOf("pzfqrhhuaoppp", "gpfqbuace", "z", "qeqxo"))
                .withTargetWorkerNodeCount(1761160515);
        model = BinaryData.fromObject(model).toObject(ClusterResizeData.class);
        Assertions.assertEquals("pt", model.location());
        Assertions.assertEquals("gpfqbuace", model.tags().get("pzfqrhhuaoppp"));
        Assertions.assertEquals(1761160515, model.targetWorkerNodeCount());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
