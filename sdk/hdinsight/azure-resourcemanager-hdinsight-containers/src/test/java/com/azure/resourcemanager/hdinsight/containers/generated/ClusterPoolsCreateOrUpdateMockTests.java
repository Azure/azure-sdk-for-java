// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourceProperties;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesNetworkProfile;
import com.azure.resourcemanager.hdinsight.containers.models.IpTag;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClusterPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"deploymentId\":\"geyzihgrkyuiz\",\"managedResourceGroupName\":\"snmfpphojeevy\",\"aksManagedResourceGroupName\":\"hsgz\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"zbgomfgbeg\",\"publicIpTag\":{\"ipTagType\":\"gleohi\",\"tag\":\"etnluankrrfx\"}},\"computeProfile\":{\"vmSize\":\"eebtijvacvb\",\"count\":192666481,\"availabilityZones\":[\"q\",\"lajrnwxacevehj\"]},\"aksClusterProfile\":{\"aksClusterResourceId\":\"xoafgaoqltfae\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"inmfgvxirp\",\"msiClientId\":\"hriypoqeyhlqhy\",\"msiObjectId\":\"prlpy\"},\"aksVersion\":\"uciqdsme\"},\"networkProfile\":{\"subnetId\":\"itdfuxtyasiib\",\"outboundType\":\"loadBalancer\",\"enablePrivateApiServer\":false,\"apiServerAuthorizedIpRanges\":[\"stgnl\",\"hnmgixhcm\",\"vmqfoud\",\"rhc\"]},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"rotwypundmbxhugc\"},\"status\":\"k\"},\"location\":\"lgorb\",\"tags\":{\"jltfvnzcyjtotpv\":\"pmdtz\"},\"id\":\"pvpbdbzqgqqiheds\",\"name\":\"qwthmky\",\"type\":\"bcysih\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightContainersManager manager = HDInsightContainersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response
            = manager.clusterPools()
                .define("boldforobwj")
                .withRegion("qoli")
                .withExistingResourceGroup("chxgs")
                .withTags(mapOf("oq", "aiouaubrjt", "rzpasccbiuimzdly", "fuojrngif", "fdvruz", "dfqwmkyoq"))
                .withProperties(
                    new ClusterPoolResourceProperties().withManagedResourceGroupName("qpbtuodxes")
                        .withClusterPoolProfile(new ClusterPoolResourcePropertiesClusterPoolProfile()
                            .withClusterPoolVersion("rwoycqucwyh")
                            .withPublicIpTag(new IpTag().withIpTagType("nomdrkywuhpsv").withTag("uurutlwexxwlalni")))
                        .withComputeProfile(new ClusterPoolResourcePropertiesComputeProfile().withVmSize("xzsrzpge")
                            .withAvailabilityZones(Arrays.asList("bwwpgdakchzy")))
                        .withNetworkProfile(new ClusterPoolResourcePropertiesNetworkProfile().withSubnetId("ufmhrunc")
                            .withOutboundType(OutboundType.USER_DEFINED_ROUTING)
                            .withEnablePrivateApiServer(false)
                            .withApiServerAuthorizedIpRanges(Arrays.asList("cdqzhlctddu", "qn", "yfp")))
                        .withLogAnalyticsProfile(
                            new ClusterPoolResourcePropertiesLogAnalyticsProfile().withEnabled(false)
                                .withWorkspaceId("bnjj")))
                .create();

        Assertions.assertEquals("lgorb", response.location());
        Assertions.assertEquals("pmdtz", response.tags().get("jltfvnzcyjtotpv"));
        Assertions.assertEquals("snmfpphojeevy", response.properties().managedResourceGroupName());
        Assertions.assertEquals("zbgomfgbeg", response.properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("gleohi", response.properties().clusterPoolProfile().publicIpTag().ipTagType());
        Assertions.assertEquals("etnluankrrfx", response.properties().clusterPoolProfile().publicIpTag().tag());
        Assertions.assertEquals("eebtijvacvb", response.properties().computeProfile().vmSize());
        Assertions.assertEquals("q", response.properties().computeProfile().availabilityZones().get(0));
        Assertions.assertEquals("itdfuxtyasiib", response.properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER, response.properties().networkProfile().outboundType());
        Assertions.assertEquals(false, response.properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("stgnl", response.properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(false, response.properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("rotwypundmbxhugc", response.properties().logAnalyticsProfile().workspaceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
