// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourceProperties;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesNetworkProfile;
import com.azure.resourcemanager.hdinsight.containers.models.OutboundType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"deploymentId\":\"jlfrq\",\"managedResourceGroupName\":\"bajlka\",\"aksManagedResourceGroupName\":\"wxyiopidkqq\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"uvscxkdmligov\"},\"computeProfile\":{\"vmSize\":\"brxk\",\"count\":1244288604},\"aksClusterProfile\":{\"aksClusterResourceId\":\"zuruocbgo\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"bteoybf\",\"msiClientId\":\"jxakv\",\"msiObjectId\":\"jgslordilmyww\"},\"aksVersion\":\"gkxnyedabg\"},\"networkProfile\":{\"subnetId\":\"udtjuewbc\",\"outboundType\":\"loadBalancer\",\"enablePrivateApiServer\":true,\"apiServerAuthorizedIpRanges\":[\"c\",\"yxccyb\"]},\"logAnalyticsProfile\":{\"enabled\":true,\"workspaceId\":\"akkud\"},\"status\":\"xgwjplmagstcyoh\"},\"location\":\"kyrk\",\"tags\":{\"aiy\":\"giogsjkmnwqjno\"},\"id\":\"ddviacegfnmntfpm\",\"name\":\"memfnczdwvvbalxl\",\"type\":\"lchpodbzevwrdn\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HDInsightContainersManager manager = HDInsightContainersManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response = manager.clusterPools().define("miloxggdufiqndie").withRegion("hbq")
            .withExistingResourceGroup("wjhhgdnhxmsivf").withTags(mapOf("x", "xtgzukxitmmqtgqq"))
            .withProperties(new ClusterPoolResourceProperties().withManagedResourceGroupName("fgdo")
                .withClusterPoolProfile(
                    new ClusterPoolResourcePropertiesClusterPoolProfile().withClusterPoolVersion("ekni"))
                .withComputeProfile(new ClusterPoolResourcePropertiesComputeProfile().withVmSize("shqvcimpev"))
                .withNetworkProfile(new ClusterPoolResourcePropertiesNetworkProfile().withSubnetId("sbpimlq")
                    .withOutboundType(OutboundType.USER_DEFINED_ROUTING).withEnablePrivateApiServer(true)
                    .withApiServerAuthorizedIpRanges(Arrays.asList("xxlxsffgcvizq", "dwl", "w", "youpfgfbkj")))
                .withLogAnalyticsProfile(new ClusterPoolResourcePropertiesLogAnalyticsProfile().withEnabled(true)
                    .withWorkspaceId("hgkfmin")))
            .create();

        Assertions.assertEquals("kyrk", response.location());
        Assertions.assertEquals("giogsjkmnwqjno", response.tags().get("aiy"));
        Assertions.assertEquals("bajlka", response.properties().managedResourceGroupName());
        Assertions.assertEquals("uvscxkdmligov", response.properties().clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("brxk", response.properties().computeProfile().vmSize());
        Assertions.assertEquals("udtjuewbc", response.properties().networkProfile().subnetId());
        Assertions.assertEquals(OutboundType.LOAD_BALANCER, response.properties().networkProfile().outboundType());
        Assertions.assertEquals(true, response.properties().networkProfile().enablePrivateApiServer());
        Assertions.assertEquals("c", response.properties().networkProfile().apiServerAuthorizedIpRanges().get(0));
        Assertions.assertEquals(true, response.properties().logAnalyticsProfile().enabled());
        Assertions.assertEquals("akkud", response.properties().logAnalyticsProfile().workspaceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
