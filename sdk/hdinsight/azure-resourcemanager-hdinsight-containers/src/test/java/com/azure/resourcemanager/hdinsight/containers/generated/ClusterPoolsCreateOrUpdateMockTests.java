// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsight.containers.HDInsightContainersManager;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPool;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsight.containers.models.ClusterPoolResourcePropertiesNetworkProfile;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"deploymentId\":\"twnawjslbiwkojgc\",\"managedResourceGroupName\":\"tsf\",\"aksManagedResourceGroupName\":\"nbaeqphchqn\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"rpxeh\"},\"computeProfile\":{\"vmSize\":\"wrykqgai\",\"count\":1319062444},\"aksClusterProfile\":{\"aksClusterResourceId\":\"lb\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"vkhbejdznx\",\"msiClientId\":\"vdsrhnjiv\",\"msiObjectId\":\"lvtno\"},\"aksVersion\":\"fzg\"},\"networkProfile\":{\"subnetId\":\"jdftuljltd\"},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"mtmczuome\"},\"status\":\"cwwqiokn\"},\"location\":\"xmojmsvpkjp\",\"tags\":{\"zheydbsdshmk\":\"wcfzqljyxgt\"},\"id\":\"maehvbbxurip\",\"name\":\"tfnhtbaxkgxywr\",\"type\":\"kpyklyhp\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HDInsightContainersManager manager =
            HDInsightContainersManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response =
            manager
                .clusterPools()
                .define("zzxscyhwzdgiruj")
                .withRegion("utr")
                .withExistingResourceGroup("cluyovwxnbkf")
                .withTags(mapOf("qhih", "pauutpw", "fqntcyp", "jqgwzp"))
                .withManagedResourceGroupName("niyujv")
                .withClusterPoolProfile(
                    new ClusterPoolResourcePropertiesClusterPoolProfile().withClusterPoolVersion("shfssnrbgyef"))
                .withComputeProfile(new ClusterPoolResourcePropertiesComputeProfile().withVmSize("ymsgaojfmwnc"))
                .withNetworkProfile(new ClusterPoolResourcePropertiesNetworkProfile().withSubnetId("mrsreuzvxurisjnh"))
                .withLogAnalyticsProfile(
                    new ClusterPoolResourcePropertiesLogAnalyticsProfile().withEnabled(false).withWorkspaceId("ifqjz"))
                .create();

        Assertions.assertEquals("xmojmsvpkjp", response.location());
        Assertions.assertEquals("wcfzqljyxgt", response.tags().get("zheydbsdshmk"));
        Assertions.assertEquals("tsf", response.managedResourceGroupName());
        Assertions.assertEquals("rpxeh", response.clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("wrykqgai", response.computeProfile().vmSize());
        Assertions.assertEquals("jdftuljltd", response.networkProfile().subnetId());
        Assertions.assertEquals(false, response.logAnalyticsProfile().enabled());
        Assertions.assertEquals("mtmczuome", response.logAnalyticsProfile().workspaceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
