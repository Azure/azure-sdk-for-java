// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.AutoscaleProfile;
import com.azure.resourcemanager.hdinsight.containers.models.AutoscaleType;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonOperator;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonRule;
import com.azure.resourcemanager.hdinsight.containers.models.LoadBasedConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ScaleActionType;
import com.azure.resourcemanager.hdinsight.containers.models.ScalingRule;
import com.azure.resourcemanager.hdinsight.containers.models.Schedule;
import com.azure.resourcemanager.hdinsight.containers.models.ScheduleBasedConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ScheduleDay;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AutoscaleProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutoscaleProfile model = BinaryData.fromString(
            "{\"enabled\":false,\"gracefulDecommissionTimeout\":855265021,\"autoscaleType\":\"LoadBased\",\"scheduleBasedConfig\":{\"timeZone\":\"zvszj\",\"defaultCount\":928593835,\"schedules\":[{\"startTime\":\"vjfdx\",\"endTime\":\"ivetvtcq\",\"count\":928990245,\"days\":[\"Friday\"]},{\"startTime\":\"oqmcbxvwvxyslq\",\"endTime\":\"hsfxoblytkb\",\"count\":857226054,\"days\":[\"Monday\"]},{\"startTime\":\"wwwfbkr\",\"endTime\":\"rn\",\"count\":309197108,\"days\":[\"Saturday\",\"Wednesday\",\"Tuesday\"]}]},\"loadBasedConfig\":{\"minNodes\":925506689,\"maxNodes\":475216783,\"pollInterval\":1216343785,\"cooldownPeriod\":1861824237,\"scalingRules\":[{\"actionType\":\"scaledown\",\"evaluationCount\":249445305,\"scalingMetric\":\"asrru\",\"comparisonRule\":{\"operator\":\"lessThan\",\"threshold\":94.09205}},{\"actionType\":\"scaledown\",\"evaluationCount\":1393923794,\"scalingMetric\":\"qfsubcgjbirx\",\"comparisonRule\":{\"operator\":\"lessThan\",\"threshold\":79.85491}}]}}")
            .toObject(AutoscaleProfile.class);
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(855265021, model.gracefulDecommissionTimeout());
        Assertions.assertEquals(AutoscaleType.LOAD_BASED, model.autoscaleType());
        Assertions.assertEquals("zvszj", model.scheduleBasedConfig().timeZone());
        Assertions.assertEquals(928593835, model.scheduleBasedConfig().defaultCount());
        Assertions.assertEquals("vjfdx", model.scheduleBasedConfig().schedules().get(0).startTime());
        Assertions.assertEquals("ivetvtcq", model.scheduleBasedConfig().schedules().get(0).endTime());
        Assertions.assertEquals(928990245, model.scheduleBasedConfig().schedules().get(0).count());
        Assertions.assertEquals(ScheduleDay.FRIDAY, model.scheduleBasedConfig().schedules().get(0).days().get(0));
        Assertions.assertEquals(925506689, model.loadBasedConfig().minNodes());
        Assertions.assertEquals(475216783, model.loadBasedConfig().maxNodes());
        Assertions.assertEquals(1216343785, model.loadBasedConfig().pollInterval());
        Assertions.assertEquals(1861824237, model.loadBasedConfig().cooldownPeriod());
        Assertions.assertEquals(ScaleActionType.SCALEDOWN, model.loadBasedConfig().scalingRules().get(0).actionType());
        Assertions.assertEquals(249445305, model.loadBasedConfig().scalingRules().get(0).evaluationCount());
        Assertions.assertEquals("asrru", model.loadBasedConfig().scalingRules().get(0).scalingMetric());
        Assertions.assertEquals(ComparisonOperator.LESS_THAN,
            model.loadBasedConfig().scalingRules().get(0).comparisonRule().operator());
        Assertions.assertEquals(94.09205f, model.loadBasedConfig().scalingRules().get(0).comparisonRule().threshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutoscaleProfile model = new AutoscaleProfile().withEnabled(false)
            .withGracefulDecommissionTimeout(855265021)
            .withAutoscaleType(AutoscaleType.LOAD_BASED)
            .withScheduleBasedConfig(new ScheduleBasedConfig().withTimeZone("zvszj")
                .withDefaultCount(928593835)
                .withSchedules(Arrays.asList(
                    new Schedule().withStartTime("vjfdx")
                        .withEndTime("ivetvtcq")
                        .withCount(928990245)
                        .withDays(Arrays.asList(ScheduleDay.FRIDAY)),
                    new Schedule().withStartTime("oqmcbxvwvxyslq")
                        .withEndTime("hsfxoblytkb")
                        .withCount(857226054)
                        .withDays(Arrays.asList(ScheduleDay.MONDAY)),
                    new Schedule().withStartTime("wwwfbkr")
                        .withEndTime("rn")
                        .withCount(309197108)
                        .withDays(Arrays.asList(ScheduleDay.SATURDAY, ScheduleDay.WEDNESDAY, ScheduleDay.TUESDAY)))))
            .withLoadBasedConfig(
                new LoadBasedConfig().withMinNodes(925506689)
                    .withMaxNodes(475216783)
                    .withPollInterval(1216343785)
                    .withCooldownPeriod(1861824237)
                    .withScalingRules(Arrays.asList(
                        new ScalingRule().withActionType(ScaleActionType.SCALEDOWN)
                            .withEvaluationCount(249445305)
                            .withScalingMetric("asrru")
                            .withComparisonRule(new ComparisonRule().withOperator(ComparisonOperator.LESS_THAN)
                                .withThreshold(94.09205f)),
                        new ScalingRule().withActionType(ScaleActionType.SCALEDOWN)
                            .withEvaluationCount(1393923794)
                            .withScalingMetric("qfsubcgjbirx")
                            .withComparisonRule(new ComparisonRule().withOperator(ComparisonOperator.LESS_THAN)
                                .withThreshold(79.85491f)))));
        model = BinaryData.fromObject(model).toObject(AutoscaleProfile.class);
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(855265021, model.gracefulDecommissionTimeout());
        Assertions.assertEquals(AutoscaleType.LOAD_BASED, model.autoscaleType());
        Assertions.assertEquals("zvszj", model.scheduleBasedConfig().timeZone());
        Assertions.assertEquals(928593835, model.scheduleBasedConfig().defaultCount());
        Assertions.assertEquals("vjfdx", model.scheduleBasedConfig().schedules().get(0).startTime());
        Assertions.assertEquals("ivetvtcq", model.scheduleBasedConfig().schedules().get(0).endTime());
        Assertions.assertEquals(928990245, model.scheduleBasedConfig().schedules().get(0).count());
        Assertions.assertEquals(ScheduleDay.FRIDAY, model.scheduleBasedConfig().schedules().get(0).days().get(0));
        Assertions.assertEquals(925506689, model.loadBasedConfig().minNodes());
        Assertions.assertEquals(475216783, model.loadBasedConfig().maxNodes());
        Assertions.assertEquals(1216343785, model.loadBasedConfig().pollInterval());
        Assertions.assertEquals(1861824237, model.loadBasedConfig().cooldownPeriod());
        Assertions.assertEquals(ScaleActionType.SCALEDOWN, model.loadBasedConfig().scalingRules().get(0).actionType());
        Assertions.assertEquals(249445305, model.loadBasedConfig().scalingRules().get(0).evaluationCount());
        Assertions.assertEquals("asrru", model.loadBasedConfig().scalingRules().get(0).scalingMetric());
        Assertions.assertEquals(ComparisonOperator.LESS_THAN,
            model.loadBasedConfig().scalingRules().get(0).comparisonRule().operator());
        Assertions.assertEquals(94.09205f, model.loadBasedConfig().scalingRules().get(0).comparisonRule().threshold());
    }
}
