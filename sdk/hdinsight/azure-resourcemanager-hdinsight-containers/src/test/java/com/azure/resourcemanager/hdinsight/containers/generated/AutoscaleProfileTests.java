// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.containers.models.AutoscaleProfile;
import com.azure.resourcemanager.hdinsight.containers.models.AutoscaleType;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonOperator;
import com.azure.resourcemanager.hdinsight.containers.models.ComparisonRule;
import com.azure.resourcemanager.hdinsight.containers.models.LoadBasedConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ScaleActionType;
import com.azure.resourcemanager.hdinsight.containers.models.ScalingRule;
import com.azure.resourcemanager.hdinsight.containers.models.Schedule;
import com.azure.resourcemanager.hdinsight.containers.models.ScheduleBasedConfig;
import com.azure.resourcemanager.hdinsight.containers.models.ScheduleDay;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AutoscaleProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutoscaleProfile model =
            BinaryData
                .fromString(
                    "{\"enabled\":true,\"gracefulDecommissionTimeout\":1640882234,\"autoscaleType\":\"ScheduleBased\",\"scheduleBasedConfig\":{\"timeZone\":\"hdzhlrqj\",\"defaultCount\":203364386,\"schedules\":[{\"startTime\":\"kfrlhrxsbky\",\"endTime\":\"pycanuzbpz\",\"count\":1414672968,\"days\":[\"Wednesday\",\"Friday\",\"Sunday\",\"Saturday\"]}]},\"loadBasedConfig\":{\"minNodes\":870696272,\"maxNodes\":1514524475,\"pollInterval\":1300207213,\"cooldownPeriod\":1267023941,\"scalingRules\":[{\"actionType\":\"scaleup\",\"evaluationCount\":1198251199,\"scalingMetric\":\"eyvjusrtslhspkde\",\"comparisonRule\":{\"operator\":\"lessThan\",\"threshold\":68.91014}},{\"actionType\":\"scaledown\",\"evaluationCount\":441408788,\"scalingMetric\":\"mx\",\"comparisonRule\":{\"operator\":\"lessThanOrEqual\",\"threshold\":7.4486313}}]}}")
                .toObject(AutoscaleProfile.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(1640882234, model.gracefulDecommissionTimeout());
        Assertions.assertEquals(AutoscaleType.SCHEDULE_BASED, model.autoscaleType());
        Assertions.assertEquals("hdzhlrqj", model.scheduleBasedConfig().timeZone());
        Assertions.assertEquals(203364386, model.scheduleBasedConfig().defaultCount());
        Assertions.assertEquals("kfrlhrxsbky", model.scheduleBasedConfig().schedules().get(0).startTime());
        Assertions.assertEquals("pycanuzbpz", model.scheduleBasedConfig().schedules().get(0).endTime());
        Assertions.assertEquals(1414672968, model.scheduleBasedConfig().schedules().get(0).count());
        Assertions.assertEquals(ScheduleDay.WEDNESDAY, model.scheduleBasedConfig().schedules().get(0).days().get(0));
        Assertions.assertEquals(870696272, model.loadBasedConfig().minNodes());
        Assertions.assertEquals(1514524475, model.loadBasedConfig().maxNodes());
        Assertions.assertEquals(1300207213, model.loadBasedConfig().pollInterval());
        Assertions.assertEquals(1267023941, model.loadBasedConfig().cooldownPeriod());
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.loadBasedConfig().scalingRules().get(0).actionType());
        Assertions.assertEquals(1198251199, model.loadBasedConfig().scalingRules().get(0).evaluationCount());
        Assertions.assertEquals("eyvjusrtslhspkde", model.loadBasedConfig().scalingRules().get(0).scalingMetric());
        Assertions
            .assertEquals(
                ComparisonOperator.LESS_THAN,
                model.loadBasedConfig().scalingRules().get(0).comparisonRule().operator());
        Assertions.assertEquals(68.91014f, model.loadBasedConfig().scalingRules().get(0).comparisonRule().threshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutoscaleProfile model =
            new AutoscaleProfile()
                .withEnabled(true)
                .withGracefulDecommissionTimeout(1640882234)
                .withAutoscaleType(AutoscaleType.SCHEDULE_BASED)
                .withScheduleBasedConfig(
                    new ScheduleBasedConfig()
                        .withTimeZone("hdzhlrqj")
                        .withDefaultCount(203364386)
                        .withSchedules(
                            Arrays
                                .asList(
                                    new Schedule()
                                        .withStartTime("kfrlhrxsbky")
                                        .withEndTime("pycanuzbpz")
                                        .withCount(1414672968)
                                        .withDays(
                                            Arrays
                                                .asList(
                                                    ScheduleDay.WEDNESDAY,
                                                    ScheduleDay.FRIDAY,
                                                    ScheduleDay.SUNDAY,
                                                    ScheduleDay.SATURDAY)))))
                .withLoadBasedConfig(
                    new LoadBasedConfig()
                        .withMinNodes(870696272)
                        .withMaxNodes(1514524475)
                        .withPollInterval(1300207213)
                        .withCooldownPeriod(1267023941)
                        .withScalingRules(
                            Arrays
                                .asList(
                                    new ScalingRule()
                                        .withActionType(ScaleActionType.SCALEUP)
                                        .withEvaluationCount(1198251199)
                                        .withScalingMetric("eyvjusrtslhspkde")
                                        .withComparisonRule(
                                            new ComparisonRule()
                                                .withOperator(ComparisonOperator.LESS_THAN)
                                                .withThreshold(68.91014f)),
                                    new ScalingRule()
                                        .withActionType(ScaleActionType.SCALEDOWN)
                                        .withEvaluationCount(441408788)
                                        .withScalingMetric("mx")
                                        .withComparisonRule(
                                            new ComparisonRule()
                                                .withOperator(ComparisonOperator.LESS_THAN_OR_EQUAL)
                                                .withThreshold(7.4486313f)))));
        model = BinaryData.fromObject(model).toObject(AutoscaleProfile.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(1640882234, model.gracefulDecommissionTimeout());
        Assertions.assertEquals(AutoscaleType.SCHEDULE_BASED, model.autoscaleType());
        Assertions.assertEquals("hdzhlrqj", model.scheduleBasedConfig().timeZone());
        Assertions.assertEquals(203364386, model.scheduleBasedConfig().defaultCount());
        Assertions.assertEquals("kfrlhrxsbky", model.scheduleBasedConfig().schedules().get(0).startTime());
        Assertions.assertEquals("pycanuzbpz", model.scheduleBasedConfig().schedules().get(0).endTime());
        Assertions.assertEquals(1414672968, model.scheduleBasedConfig().schedules().get(0).count());
        Assertions.assertEquals(ScheduleDay.WEDNESDAY, model.scheduleBasedConfig().schedules().get(0).days().get(0));
        Assertions.assertEquals(870696272, model.loadBasedConfig().minNodes());
        Assertions.assertEquals(1514524475, model.loadBasedConfig().maxNodes());
        Assertions.assertEquals(1300207213, model.loadBasedConfig().pollInterval());
        Assertions.assertEquals(1267023941, model.loadBasedConfig().cooldownPeriod());
        Assertions.assertEquals(ScaleActionType.SCALEUP, model.loadBasedConfig().scalingRules().get(0).actionType());
        Assertions.assertEquals(1198251199, model.loadBasedConfig().scalingRules().get(0).evaluationCount());
        Assertions.assertEquals("eyvjusrtslhspkde", model.loadBasedConfig().scalingRules().get(0).scalingMetric());
        Assertions
            .assertEquals(
                ComparisonOperator.LESS_THAN,
                model.loadBasedConfig().scalingRules().get(0).comparisonRule().operator());
        Assertions.assertEquals(68.91014f, model.loadBasedConfig().scalingRules().get(0).comparisonRule().threshold());
    }
}
