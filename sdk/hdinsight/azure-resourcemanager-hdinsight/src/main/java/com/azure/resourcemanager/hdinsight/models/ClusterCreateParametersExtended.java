// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CreateCluster request parameters.
 */
@Fluent
public class ClusterCreateParametersExtended implements JsonSerializable<ClusterCreateParametersExtended> {
    /*
     * The location of the cluster.
     */
    private String location;

    /*
     * The resource tags.
     */
    private Map<String, String> tags;

    /*
     * The availability zones.
     */
    private List<String> zones;

    /*
     * The cluster create parameters.
     */
    private ClusterCreateProperties properties;

    /*
     * The identity of the cluster, if configured.
     */
    private ClusterIdentity identity;

    /**
     * Creates an instance of ClusterCreateParametersExtended class.
     */
    public ClusterCreateParametersExtended() {
    }

    /**
     * Get the location property: The location of the cluster.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the cluster.
     * 
     * @param location the location value to set.
     * @return the ClusterCreateParametersExtended object itself.
     */
    public ClusterCreateParametersExtended withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: The resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The resource tags.
     * 
     * @param tags the tags value to set.
     * @return the ClusterCreateParametersExtended object itself.
     */
    public ClusterCreateParametersExtended withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the zones property: The availability zones.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: The availability zones.
     * 
     * @param zones the zones value to set.
     * @return the ClusterCreateParametersExtended object itself.
     */
    public ClusterCreateParametersExtended withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the properties property: The cluster create parameters.
     * 
     * @return the properties value.
     */
    public ClusterCreateProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The cluster create parameters.
     * 
     * @param properties the properties value to set.
     * @return the ClusterCreateParametersExtended object itself.
     */
    public ClusterCreateParametersExtended withProperties(ClusterCreateProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the identity property: The identity of the cluster, if configured.
     * 
     * @return the identity value.
     */
    public ClusterIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the cluster, if configured.
     * 
     * @param identity the identity value to set.
     * @return the ClusterCreateParametersExtended object itself.
     */
    public ClusterCreateParametersExtended withIdentity(ClusterIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterCreateParametersExtended from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterCreateParametersExtended if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterCreateParametersExtended.
     */
    public static ClusterCreateParametersExtended fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterCreateParametersExtended deserializedClusterCreateParametersExtended
                = new ClusterCreateParametersExtended();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedClusterCreateParametersExtended.location = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedClusterCreateParametersExtended.tags = tags;
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedClusterCreateParametersExtended.zones = zones;
                } else if ("properties".equals(fieldName)) {
                    deserializedClusterCreateParametersExtended.properties = ClusterCreateProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedClusterCreateParametersExtended.identity = ClusterIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterCreateParametersExtended;
        });
    }
}
