// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hdinsight.models.EntraUserInfo;
import java.io.IOException;
import java.util.List;

/**
 * Gateway settings.
 */
@Fluent
public final class GatewaySettingsInner implements JsonSerializable<GatewaySettingsInner> {
    /*
     * Indicates whether or not the gateway settings based authorization is enabled.
     */
    private String isCredentialEnabled;

    /*
     * The gateway settings user name.
     */
    private String username;

    /*
     * The gateway settings user password.
     */
    private String password;

    /*
     * List of Entra users for gateway access.
     */
    private List<EntraUserInfo> restAuthEntraUsers;

    /**
     * Creates an instance of GatewaySettingsInner class.
     */
    public GatewaySettingsInner() {
    }

    /**
     * Get the isCredentialEnabled property: Indicates whether or not the gateway settings based authorization is
     * enabled.
     * 
     * @return the isCredentialEnabled value.
     */
    public String isCredentialEnabled() {
        return this.isCredentialEnabled;
    }

    /**
     * Get the username property: The gateway settings user name.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Get the password property: The gateway settings user password.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Get the restAuthEntraUsers property: List of Entra users for gateway access.
     * 
     * @return the restAuthEntraUsers value.
     */
    public List<EntraUserInfo> restAuthEntraUsers() {
        return this.restAuthEntraUsers;
    }

    /**
     * Set the restAuthEntraUsers property: List of Entra users for gateway access.
     * 
     * @param restAuthEntraUsers the restAuthEntraUsers value to set.
     * @return the GatewaySettingsInner object itself.
     */
    public GatewaySettingsInner withRestAuthEntraUsers(List<EntraUserInfo> restAuthEntraUsers) {
        this.restAuthEntraUsers = restAuthEntraUsers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (restAuthEntraUsers() != null) {
            restAuthEntraUsers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("restAuthEntraUsers", this.restAuthEntraUsers,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GatewaySettingsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GatewaySettingsInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GatewaySettingsInner.
     */
    public static GatewaySettingsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GatewaySettingsInner deserializedGatewaySettingsInner = new GatewaySettingsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("restAuthCredential.isEnabled".equals(fieldName)) {
                    deserializedGatewaySettingsInner.isCredentialEnabled = reader.getString();
                } else if ("restAuthCredential.username".equals(fieldName)) {
                    deserializedGatewaySettingsInner.username = reader.getString();
                } else if ("restAuthCredential.password".equals(fieldName)) {
                    deserializedGatewaySettingsInner.password = reader.getString();
                } else if ("restAuthEntraUsers".equals(fieldName)) {
                    List<EntraUserInfo> restAuthEntraUsers
                        = reader.readArray(reader1 -> EntraUserInfo.fromJson(reader1));
                    deserializedGatewaySettingsInner.restAuthEntraUsers = restAuthEntraUsers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGatewaySettingsInner;
        });
    }
}
