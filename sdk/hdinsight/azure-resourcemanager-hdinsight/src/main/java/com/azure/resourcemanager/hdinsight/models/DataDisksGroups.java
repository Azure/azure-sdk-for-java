// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The data disks groups for the role.
 */
@Fluent
public final class DataDisksGroups implements JsonSerializable<DataDisksGroups> {
    /*
     * The number of disks per node.
     */
    private Integer disksPerNode;

    /*
     * ReadOnly. The storage account type. Do not set this value.
     */
    private String storageAccountType;

    /*
     * ReadOnly. The DiskSize in GB. Do not set this value.
     */
    private Integer diskSizeGB;

    /**
     * Creates an instance of DataDisksGroups class.
     */
    public DataDisksGroups() {
    }

    /**
     * Get the disksPerNode property: The number of disks per node.
     * 
     * @return the disksPerNode value.
     */
    public Integer disksPerNode() {
        return this.disksPerNode;
    }

    /**
     * Set the disksPerNode property: The number of disks per node.
     * 
     * @param disksPerNode the disksPerNode value to set.
     * @return the DataDisksGroups object itself.
     */
    public DataDisksGroups withDisksPerNode(Integer disksPerNode) {
        this.disksPerNode = disksPerNode;
        return this;
    }

    /**
     * Get the storageAccountType property: ReadOnly. The storage account type. Do not set this value.
     * 
     * @return the storageAccountType value.
     */
    public String storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Get the diskSizeGB property: ReadOnly. The DiskSize in GB. Do not set this value.
     * 
     * @return the diskSizeGB value.
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("disksPerNode", this.disksPerNode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataDisksGroups from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataDisksGroups if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataDisksGroups.
     */
    public static DataDisksGroups fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataDisksGroups deserializedDataDisksGroups = new DataDisksGroups();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("disksPerNode".equals(fieldName)) {
                    deserializedDataDisksGroups.disksPerNode = reader.getNullable(JsonReader::getInt);
                } else if ("storageAccountType".equals(fieldName)) {
                    deserializedDataDisksGroups.storageAccountType = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedDataDisksGroups.diskSizeGB = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataDisksGroups;
        });
    }
}
