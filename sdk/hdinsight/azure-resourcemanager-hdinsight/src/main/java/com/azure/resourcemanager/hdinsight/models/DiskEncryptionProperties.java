// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The disk encryption properties. */
@Fluent
public final class DiskEncryptionProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DiskEncryptionProperties.class);

    /*
     * Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net
     */
    @JsonProperty(value = "vaultUri")
    private String vaultUri;

    /*
     * Key name that is used for enabling disk encryption.
     */
    @JsonProperty(value = "keyName")
    private String keyName;

    /*
     * Specific key version that is used for enabling disk encryption.
     */
    @JsonProperty(value = "keyVersion")
    private String keyVersion;

    /*
     * Algorithm identifier for encryption, default RSA-OAEP.
     */
    @JsonProperty(value = "encryptionAlgorithm")
    private JsonWebKeyEncryptionAlgorithm encryptionAlgorithm;

    /*
     * Resource ID of Managed Identity that is used to access the key vault.
     */
    @JsonProperty(value = "msiResourceId")
    private String msiResourceId;

    /*
     * Indicates whether or not resource disk encryption is enabled.
     */
    @JsonProperty(value = "encryptionAtHost")
    private Boolean encryptionAtHost;

    /**
     * Get the vaultUri property: Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net.
     *
     * @return the vaultUri value.
     */
    public String vaultUri() {
        return this.vaultUri;
    }

    /**
     * Set the vaultUri property: Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net.
     *
     * @param vaultUri the vaultUri value to set.
     * @return the DiskEncryptionProperties object itself.
     */
    public DiskEncryptionProperties withVaultUri(String vaultUri) {
        this.vaultUri = vaultUri;
        return this;
    }

    /**
     * Get the keyName property: Key name that is used for enabling disk encryption.
     *
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: Key name that is used for enabling disk encryption.
     *
     * @param keyName the keyName value to set.
     * @return the DiskEncryptionProperties object itself.
     */
    public DiskEncryptionProperties withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVersion property: Specific key version that is used for enabling disk encryption.
     *
     * @return the keyVersion value.
     */
    public String keyVersion() {
        return this.keyVersion;
    }

    /**
     * Set the keyVersion property: Specific key version that is used for enabling disk encryption.
     *
     * @param keyVersion the keyVersion value to set.
     * @return the DiskEncryptionProperties object itself.
     */
    public DiskEncryptionProperties withKeyVersion(String keyVersion) {
        this.keyVersion = keyVersion;
        return this;
    }

    /**
     * Get the encryptionAlgorithm property: Algorithm identifier for encryption, default RSA-OAEP.
     *
     * @return the encryptionAlgorithm value.
     */
    public JsonWebKeyEncryptionAlgorithm encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    /**
     * Set the encryptionAlgorithm property: Algorithm identifier for encryption, default RSA-OAEP.
     *
     * @param encryptionAlgorithm the encryptionAlgorithm value to set.
     * @return the DiskEncryptionProperties object itself.
     */
    public DiskEncryptionProperties withEncryptionAlgorithm(JsonWebKeyEncryptionAlgorithm encryptionAlgorithm) {
        this.encryptionAlgorithm = encryptionAlgorithm;
        return this;
    }

    /**
     * Get the msiResourceId property: Resource ID of Managed Identity that is used to access the key vault.
     *
     * @return the msiResourceId value.
     */
    public String msiResourceId() {
        return this.msiResourceId;
    }

    /**
     * Set the msiResourceId property: Resource ID of Managed Identity that is used to access the key vault.
     *
     * @param msiResourceId the msiResourceId value to set.
     * @return the DiskEncryptionProperties object itself.
     */
    public DiskEncryptionProperties withMsiResourceId(String msiResourceId) {
        this.msiResourceId = msiResourceId;
        return this;
    }

    /**
     * Get the encryptionAtHost property: Indicates whether or not resource disk encryption is enabled.
     *
     * @return the encryptionAtHost value.
     */
    public Boolean encryptionAtHost() {
        return this.encryptionAtHost;
    }

    /**
     * Set the encryptionAtHost property: Indicates whether or not resource disk encryption is enabled.
     *
     * @param encryptionAtHost the encryptionAtHost value to set.
     * @return the DiskEncryptionProperties object itself.
     */
    public DiskEncryptionProperties withEncryptionAtHost(Boolean encryptionAtHost) {
        this.encryptionAtHost = encryptionAtHost;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
