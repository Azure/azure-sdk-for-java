// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The version properties.
 */
@Fluent
public final class VersionSpec implements JsonSerializable<VersionSpec> {
    /*
     * The friendly name
     */
    private String friendlyName;

    /*
     * The display name
     */
    private String displayName;

    /*
     * Whether or not the version is the default version.
     */
    private Boolean isDefault;

    /*
     * The component version property.
     */
    private Map<String, String> componentVersions;

    /**
     * Creates an instance of VersionSpec class.
     */
    public VersionSpec() {
    }

    /**
     * Get the friendlyName property: The friendly name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The friendly name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the VersionSpec object itself.
     */
    public VersionSpec withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the displayName property: The display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name.
     * 
     * @param displayName the displayName value to set.
     * @return the VersionSpec object itself.
     */
    public VersionSpec withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the isDefault property: Whether or not the version is the default version.
     * 
     * @return the isDefault value.
     */
    public Boolean isDefault() {
        return this.isDefault;
    }

    /**
     * Set the isDefault property: Whether or not the version is the default version.
     * 
     * @param isDefault the isDefault value to set.
     * @return the VersionSpec object itself.
     */
    public VersionSpec withIsDefault(Boolean isDefault) {
        this.isDefault = isDefault;
        return this;
    }

    /**
     * Get the componentVersions property: The component version property.
     * 
     * @return the componentVersions value.
     */
    public Map<String, String> componentVersions() {
        return this.componentVersions;
    }

    /**
     * Set the componentVersions property: The component version property.
     * 
     * @param componentVersions the componentVersions value to set.
     * @return the VersionSpec object itself.
     */
    public VersionSpec withComponentVersions(Map<String, String> componentVersions) {
        this.componentVersions = componentVersions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeBooleanField("isDefault", this.isDefault);
        jsonWriter.writeMapField("componentVersions", this.componentVersions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VersionSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VersionSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VersionSpec.
     */
    public static VersionSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VersionSpec deserializedVersionSpec = new VersionSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedVersionSpec.friendlyName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedVersionSpec.displayName = reader.getString();
                } else if ("isDefault".equals(fieldName)) {
                    deserializedVersionSpec.isDefault = reader.getNullable(JsonReader::getBoolean);
                } else if ("componentVersions".equals(fieldName)) {
                    Map<String, String> componentVersions = reader.readMap(reader1 -> reader1.getString());
                    deserializedVersionSpec.componentVersions = componentVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVersionSpec;
        });
    }
}
