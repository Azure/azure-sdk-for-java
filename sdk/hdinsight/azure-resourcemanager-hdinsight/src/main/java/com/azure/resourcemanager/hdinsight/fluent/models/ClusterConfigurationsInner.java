// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The configuration object for the specified cluster.
 */
@Fluent
public final class ClusterConfigurationsInner implements JsonSerializable<ClusterConfigurationsInner> {
    /*
     * The configuration object for the specified configuration for the specified cluster.
     */
    private Map<String, Map<String, String>> configurations;

    /**
     * Creates an instance of ClusterConfigurationsInner class.
     */
    public ClusterConfigurationsInner() {
    }

    /**
     * Get the configurations property: The configuration object for the specified configuration for the specified
     * cluster.
     * 
     * @return the configurations value.
     */
    public Map<String, Map<String, String>> configurations() {
        return this.configurations;
    }

    /**
     * Set the configurations property: The configuration object for the specified configuration for the specified
     * cluster.
     * 
     * @param configurations the configurations value to set.
     * @return the ClusterConfigurationsInner object itself.
     */
    public ClusterConfigurationsInner withConfigurations(Map<String, Map<String, String>> configurations) {
        this.configurations = configurations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("configurations", this.configurations,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeString(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterConfigurationsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterConfigurationsInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterConfigurationsInner.
     */
    public static ClusterConfigurationsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterConfigurationsInner deserializedClusterConfigurationsInner = new ClusterConfigurationsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurations".equals(fieldName)) {
                    Map<String, Map<String, String>> configurations
                        = reader.readMap(reader1 -> reader1.readMap(reader2 -> reader2.getString()));
                    deserializedClusterConfigurationsInner.configurations = configurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterConfigurationsInner;
        });
    }
}
