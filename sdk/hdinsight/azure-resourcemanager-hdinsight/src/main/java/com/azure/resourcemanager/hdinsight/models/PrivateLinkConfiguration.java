// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hdinsight.fluent.models.PrivateLinkConfigurationProperties;
import java.io.IOException;
import java.util.List;

/**
 * The private link configuration.
 */
@Fluent
public final class PrivateLinkConfiguration implements JsonSerializable<PrivateLinkConfiguration> {
    /*
     * The private link configuration id.
     */
    private String id;

    /*
     * The name of private link configuration.
     */
    private String name;

    /*
     * The type of the private link configuration.
     */
    private String type;

    /*
     * The private link configuration properties.
     */
    private PrivateLinkConfigurationProperties innerProperties = new PrivateLinkConfigurationProperties();

    /**
     * Creates an instance of PrivateLinkConfiguration class.
     */
    public PrivateLinkConfiguration() {
    }

    /**
     * Get the id property: The private link configuration id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of private link configuration.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of private link configuration.
     * 
     * @param name the name value to set.
     * @return the PrivateLinkConfiguration object itself.
     */
    public PrivateLinkConfiguration withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: The type of the private link configuration.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The private link configuration properties.
     * 
     * @return the innerProperties value.
     */
    private PrivateLinkConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the groupId property: The HDInsight private linkable sub-resource name to apply the private link
     * configuration to. For example, 'headnode', 'gateway', 'edgenode'.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.innerProperties() == null ? null : this.innerProperties().groupId();
    }

    /**
     * Set the groupId property: The HDInsight private linkable sub-resource name to apply the private link
     * configuration to. For example, 'headnode', 'gateway', 'edgenode'.
     * 
     * @param groupId the groupId value to set.
     * @return the PrivateLinkConfiguration object itself.
     */
    public PrivateLinkConfiguration withGroupId(String groupId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateLinkConfigurationProperties();
        }
        this.innerProperties().withGroupId(groupId);
        return this;
    }

    /**
     * Get the provisioningState property: The private link configuration provisioning state, which only appears in the
     * response.
     * 
     * @return the provisioningState value.
     */
    public PrivateLinkConfigurationProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the ipConfigurations property: The IP configurations for the private link service.
     * 
     * @return the ipConfigurations value.
     */
    public List<IpConfiguration> ipConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().ipConfigurations();
    }

    /**
     * Set the ipConfigurations property: The IP configurations for the private link service.
     * 
     * @param ipConfigurations the ipConfigurations value to set.
     * @return the PrivateLinkConfiguration object itself.
     */
    public PrivateLinkConfiguration withIpConfigurations(List<IpConfiguration> ipConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateLinkConfigurationProperties();
        }
        this.innerProperties().withIpConfigurations(ipConfigurations);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model PrivateLinkConfiguration"));
        }
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model PrivateLinkConfiguration"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrivateLinkConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateLinkConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateLinkConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PrivateLinkConfiguration.
     */
    public static PrivateLinkConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateLinkConfiguration deserializedPrivateLinkConfiguration = new PrivateLinkConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPrivateLinkConfiguration.name = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPrivateLinkConfiguration.innerProperties
                        = PrivateLinkConfigurationProperties.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedPrivateLinkConfiguration.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPrivateLinkConfiguration.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateLinkConfiguration;
        });
    }
}
