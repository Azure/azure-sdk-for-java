// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The encryption-in-transit properties.
 */
@Fluent
public final class EncryptionInTransitProperties implements JsonSerializable<EncryptionInTransitProperties> {
    /*
     * Indicates whether or not inter cluster node communication is encrypted in transit.
     */
    private Boolean isEncryptionInTransitEnabled;

    /**
     * Creates an instance of EncryptionInTransitProperties class.
     */
    public EncryptionInTransitProperties() {
    }

    /**
     * Get the isEncryptionInTransitEnabled property: Indicates whether or not inter cluster node communication is
     * encrypted in transit.
     * 
     * @return the isEncryptionInTransitEnabled value.
     */
    public Boolean isEncryptionInTransitEnabled() {
        return this.isEncryptionInTransitEnabled;
    }

    /**
     * Set the isEncryptionInTransitEnabled property: Indicates whether or not inter cluster node communication is
     * encrypted in transit.
     * 
     * @param isEncryptionInTransitEnabled the isEncryptionInTransitEnabled value to set.
     * @return the EncryptionInTransitProperties object itself.
     */
    public EncryptionInTransitProperties withIsEncryptionInTransitEnabled(Boolean isEncryptionInTransitEnabled) {
        this.isEncryptionInTransitEnabled = isEncryptionInTransitEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isEncryptionInTransitEnabled", this.isEncryptionInTransitEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionInTransitProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionInTransitProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionInTransitProperties.
     */
    public static EncryptionInTransitProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionInTransitProperties deserializedEncryptionInTransitProperties
                = new EncryptionInTransitProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isEncryptionInTransitEnabled".equals(fieldName)) {
                    deserializedEncryptionInTransitProperties.isEncryptionInTransitEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionInTransitProperties;
        });
    }
}
