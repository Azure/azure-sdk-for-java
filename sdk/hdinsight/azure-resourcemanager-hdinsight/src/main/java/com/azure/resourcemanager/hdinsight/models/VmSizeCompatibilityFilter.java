// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The virtual machine type compatibility filter. */
@Fluent
public final class VmSizeCompatibilityFilter {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VmSizeCompatibilityFilter.class);

    /*
     * The mode for the filter.
     */
    @JsonProperty(value = "FilterMode")
    private String filterMode;

    /*
     * The list of regions.
     */
    @JsonProperty(value = "Regions")
    private List<String> regions;

    /*
     * The list of cluster types available.
     */
    @JsonProperty(value = "ClusterFlavors")
    private List<String> clusterFlavors;

    /*
     * The list of node types.
     */
    @JsonProperty(value = "NodeTypes")
    private List<String> nodeTypes;

    /*
     * The list of cluster versions.
     */
    @JsonProperty(value = "ClusterVersions")
    private List<String> clusterVersions;

    /*
     * The list of OS types.
     */
    @JsonProperty(value = "OsType")
    private List<String> osType;

    /*
     * The list of virtual machine sizes.
     */
    @JsonProperty(value = "VMSizes")
    private List<String> vMSizes;

    /*
     * Whether apply for ESP cluster. 'true' means only for ESP, 'false' means
     * only for non-ESP, null or empty string or others mean for both.
     */
    @JsonProperty(value = "ESPApplied")
    private String espApplied;

    /*
     * Whether support compute isolation. 'true' means only for
     * ComputeIsolationEnabled, 'false' means only for regular cluster.
     */
    @JsonProperty(value = "ComputeIsolationSupported")
    private String computeIsolationSupported;

    /**
     * Get the filterMode property: The mode for the filter.
     *
     * @return the filterMode value.
     */
    public String filterMode() {
        return this.filterMode;
    }

    /**
     * Set the filterMode property: The mode for the filter.
     *
     * @param filterMode the filterMode value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withFilterMode(String filterMode) {
        this.filterMode = filterMode;
        return this;
    }

    /**
     * Get the regions property: The list of regions.
     *
     * @return the regions value.
     */
    public List<String> regions() {
        return this.regions;
    }

    /**
     * Set the regions property: The list of regions.
     *
     * @param regions the regions value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withRegions(List<String> regions) {
        this.regions = regions;
        return this;
    }

    /**
     * Get the clusterFlavors property: The list of cluster types available.
     *
     * @return the clusterFlavors value.
     */
    public List<String> clusterFlavors() {
        return this.clusterFlavors;
    }

    /**
     * Set the clusterFlavors property: The list of cluster types available.
     *
     * @param clusterFlavors the clusterFlavors value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withClusterFlavors(List<String> clusterFlavors) {
        this.clusterFlavors = clusterFlavors;
        return this;
    }

    /**
     * Get the nodeTypes property: The list of node types.
     *
     * @return the nodeTypes value.
     */
    public List<String> nodeTypes() {
        return this.nodeTypes;
    }

    /**
     * Set the nodeTypes property: The list of node types.
     *
     * @param nodeTypes the nodeTypes value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withNodeTypes(List<String> nodeTypes) {
        this.nodeTypes = nodeTypes;
        return this;
    }

    /**
     * Get the clusterVersions property: The list of cluster versions.
     *
     * @return the clusterVersions value.
     */
    public List<String> clusterVersions() {
        return this.clusterVersions;
    }

    /**
     * Set the clusterVersions property: The list of cluster versions.
     *
     * @param clusterVersions the clusterVersions value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withClusterVersions(List<String> clusterVersions) {
        this.clusterVersions = clusterVersions;
        return this;
    }

    /**
     * Get the osType property: The list of OS types.
     *
     * @return the osType value.
     */
    public List<String> osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The list of OS types.
     *
     * @param osType the osType value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withOsType(List<String> osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the vMSizes property: The list of virtual machine sizes.
     *
     * @return the vMSizes value.
     */
    public List<String> vMSizes() {
        return this.vMSizes;
    }

    /**
     * Set the vMSizes property: The list of virtual machine sizes.
     *
     * @param vMSizes the vMSizes value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withVMSizes(List<String> vMSizes) {
        this.vMSizes = vMSizes;
        return this;
    }

    /**
     * Get the espApplied property: Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for
     * non-ESP, null or empty string or others mean for both.
     *
     * @return the espApplied value.
     */
    public String espApplied() {
        return this.espApplied;
    }

    /**
     * Set the espApplied property: Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for
     * non-ESP, null or empty string or others mean for both.
     *
     * @param espApplied the espApplied value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withEspApplied(String espApplied) {
        this.espApplied = espApplied;
        return this;
    }

    /**
     * Get the computeIsolationSupported property: Whether support compute isolation. 'true' means only for
     * ComputeIsolationEnabled, 'false' means only for regular cluster.
     *
     * @return the computeIsolationSupported value.
     */
    public String computeIsolationSupported() {
        return this.computeIsolationSupported;
    }

    /**
     * Set the computeIsolationSupported property: Whether support compute isolation. 'true' means only for
     * ComputeIsolationEnabled, 'false' means only for regular cluster.
     *
     * @param computeIsolationSupported the computeIsolationSupported value to set.
     * @return the VmSizeCompatibilityFilter object itself.
     */
    public VmSizeCompatibilityFilter withComputeIsolationSupported(String computeIsolationSupported) {
        this.computeIsolationSupported = computeIsolationSupported;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
