// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Locations. */
public interface Locations {
    /**
     * Gets the capabilities for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the capabilities for the specified location.
     */
    CapabilitiesResult getCapabilities(String location);

    /**
     * Gets the capabilities for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the capabilities for the specified location.
     */
    Response<CapabilitiesResult> getCapabilitiesWithResponse(String location, Context context);

    /**
     * Lists the usages for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response for the operation to get regional usages for a subscription.
     */
    UsagesListResult listUsages(String location);

    /**
     * Lists the usages for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response for the operation to get regional usages for a subscription.
     */
    Response<UsagesListResult> listUsagesWithResponse(String location, Context context);

    /**
     * Lists the billingSpecs for the specified subscription and location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response for the operation to get regional billingSpecs for a subscription.
     */
    BillingResponseListResult listBillingSpecs(String location);

    /**
     * Lists the billingSpecs for the specified subscription and location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response for the operation to get regional billingSpecs for a subscription.
     */
    Response<BillingResponseListResult> listBillingSpecsWithResponse(String location, Context context);

    /**
     * Get the async operation status.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param operationId The long running operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the async operation status.
     */
    AsyncOperationResult getAzureAsyncOperationStatus(String location, String operationId);

    /**
     * Get the async operation status.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param operationId The long running operation id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the async operation status.
     */
    Response<AsyncOperationResult> getAzureAsyncOperationStatusWithResponse(
        String location, String operationId, Context context);

    /**
     * Check the cluster name is available or not.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param parameters The request spec of checking name availability.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response spec of checking name availability.
     */
    NameAvailabilityCheckResult checkNameAvailability(
        String location, NameAvailabilityCheckRequestParameters parameters);

    /**
     * Check the cluster name is available or not.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param parameters The request spec of checking name availability.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response spec of checking name availability.
     */
    Response<NameAvailabilityCheckResult> checkNameAvailabilityWithResponse(
        String location, NameAvailabilityCheckRequestParameters parameters, Context context);

    /**
     * Validate the cluster create request spec is valid or not.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param parameters The cluster create request specification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of cluster create request validation.
     */
    ClusterCreateValidationResult validateClusterCreateRequest(
        String location, ClusterCreateRequestValidationParameters parameters);

    /**
     * Validate the cluster create request spec is valid or not.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param parameters The cluster create request specification.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of cluster create request validation.
     */
    Response<ClusterCreateValidationResult> validateClusterCreateRequestWithResponse(
        String location, ClusterCreateRequestValidationParameters parameters, Context context);
}
