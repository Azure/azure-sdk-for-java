// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hdinsight.models.BillingResources;
import com.azure.resourcemanager.hdinsight.models.VmSizeCompatibilityFilterV2;
import com.azure.resourcemanager.hdinsight.models.VmSizeProperty;
import java.io.IOException;
import java.util.List;

/**
 * The response for the operation to get regional billingSpecs for a subscription.
 */
@Fluent
public final class BillingResponseListResultInner implements JsonSerializable<BillingResponseListResultInner> {
    /*
     * The virtual machine sizes to include or exclude.
     */
    private List<String> vmSizes;

    /*
     * The vm sizes which enable encryption at host.
     */
    private List<String> vmSizesWithEncryptionAtHost;

    /*
     * The virtual machine filtering mode. Effectively this can enabling or disabling the virtual machine sizes in a
     * particular set.
     */
    private List<VmSizeCompatibilityFilterV2> vmSizeFilters;

    /*
     * The vm size properties.
     */
    private List<VmSizeProperty> vmSizeProperties;

    /*
     * The billing and managed disk billing resources for a region.
     */
    private List<BillingResources> billingResources;

    /**
     * Creates an instance of BillingResponseListResultInner class.
     */
    public BillingResponseListResultInner() {
    }

    /**
     * Get the vmSizes property: The virtual machine sizes to include or exclude.
     * 
     * @return the vmSizes value.
     */
    public List<String> vmSizes() {
        return this.vmSizes;
    }

    /**
     * Set the vmSizes property: The virtual machine sizes to include or exclude.
     * 
     * @param vmSizes the vmSizes value to set.
     * @return the BillingResponseListResultInner object itself.
     */
    public BillingResponseListResultInner withVmSizes(List<String> vmSizes) {
        this.vmSizes = vmSizes;
        return this;
    }

    /**
     * Get the vmSizesWithEncryptionAtHost property: The vm sizes which enable encryption at host.
     * 
     * @return the vmSizesWithEncryptionAtHost value.
     */
    public List<String> vmSizesWithEncryptionAtHost() {
        return this.vmSizesWithEncryptionAtHost;
    }

    /**
     * Set the vmSizesWithEncryptionAtHost property: The vm sizes which enable encryption at host.
     * 
     * @param vmSizesWithEncryptionAtHost the vmSizesWithEncryptionAtHost value to set.
     * @return the BillingResponseListResultInner object itself.
     */
    public BillingResponseListResultInner withVmSizesWithEncryptionAtHost(List<String> vmSizesWithEncryptionAtHost) {
        this.vmSizesWithEncryptionAtHost = vmSizesWithEncryptionAtHost;
        return this;
    }

    /**
     * Get the vmSizeFilters property: The virtual machine filtering mode. Effectively this can enabling or disabling
     * the virtual machine sizes in a particular set.
     * 
     * @return the vmSizeFilters value.
     */
    public List<VmSizeCompatibilityFilterV2> vmSizeFilters() {
        return this.vmSizeFilters;
    }

    /**
     * Set the vmSizeFilters property: The virtual machine filtering mode. Effectively this can enabling or disabling
     * the virtual machine sizes in a particular set.
     * 
     * @param vmSizeFilters the vmSizeFilters value to set.
     * @return the BillingResponseListResultInner object itself.
     */
    public BillingResponseListResultInner withVmSizeFilters(List<VmSizeCompatibilityFilterV2> vmSizeFilters) {
        this.vmSizeFilters = vmSizeFilters;
        return this;
    }

    /**
     * Get the vmSizeProperties property: The vm size properties.
     * 
     * @return the vmSizeProperties value.
     */
    public List<VmSizeProperty> vmSizeProperties() {
        return this.vmSizeProperties;
    }

    /**
     * Get the billingResources property: The billing and managed disk billing resources for a region.
     * 
     * @return the billingResources value.
     */
    public List<BillingResources> billingResources() {
        return this.billingResources;
    }

    /**
     * Set the billingResources property: The billing and managed disk billing resources for a region.
     * 
     * @param billingResources the billingResources value to set.
     * @return the BillingResponseListResultInner object itself.
     */
    public BillingResponseListResultInner withBillingResources(List<BillingResources> billingResources) {
        this.billingResources = billingResources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmSizeFilters() != null) {
            vmSizeFilters().forEach(e -> e.validate());
        }
        if (vmSizeProperties() != null) {
            vmSizeProperties().forEach(e -> e.validate());
        }
        if (billingResources() != null) {
            billingResources().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vmSizes", this.vmSizes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vmSizesWithEncryptionAtHost", this.vmSizesWithEncryptionAtHost,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vmSizeFilters", this.vmSizeFilters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("billingResources", this.billingResources,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingResponseListResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingResponseListResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingResponseListResultInner.
     */
    public static BillingResponseListResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingResponseListResultInner deserializedBillingResponseListResultInner
                = new BillingResponseListResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmSizes".equals(fieldName)) {
                    List<String> vmSizes = reader.readArray(reader1 -> reader1.getString());
                    deserializedBillingResponseListResultInner.vmSizes = vmSizes;
                } else if ("vmSizesWithEncryptionAtHost".equals(fieldName)) {
                    List<String> vmSizesWithEncryptionAtHost = reader.readArray(reader1 -> reader1.getString());
                    deserializedBillingResponseListResultInner.vmSizesWithEncryptionAtHost
                        = vmSizesWithEncryptionAtHost;
                } else if ("vmSizeFilters".equals(fieldName)) {
                    List<VmSizeCompatibilityFilterV2> vmSizeFilters
                        = reader.readArray(reader1 -> VmSizeCompatibilityFilterV2.fromJson(reader1));
                    deserializedBillingResponseListResultInner.vmSizeFilters = vmSizeFilters;
                } else if ("vmSizeProperties".equals(fieldName)) {
                    List<VmSizeProperty> vmSizeProperties
                        = reader.readArray(reader1 -> VmSizeProperty.fromJson(reader1));
                    deserializedBillingResponseListResultInner.vmSizeProperties = vmSizeProperties;
                } else if ("billingResources".equals(fieldName)) {
                    List<BillingResources> billingResources
                        = reader.readArray(reader1 -> BillingResources.fromJson(reader1));
                    deserializedBillingResponseListResultInner.billingResources = billingResources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingResponseListResultInner;
        });
    }
}
