// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The quota properties for the cluster.
 */
@Fluent
public final class QuotaInfo implements JsonSerializable<QuotaInfo> {
    /*
     * The cores used by the cluster.
     */
    private Integer coresUsed;

    /**
     * Creates an instance of QuotaInfo class.
     */
    public QuotaInfo() {
    }

    /**
     * Get the coresUsed property: The cores used by the cluster.
     * 
     * @return the coresUsed value.
     */
    public Integer coresUsed() {
        return this.coresUsed;
    }

    /**
     * Set the coresUsed property: The cores used by the cluster.
     * 
     * @param coresUsed the coresUsed value to set.
     * @return the QuotaInfo object itself.
     */
    public QuotaInfo withCoresUsed(Integer coresUsed) {
        this.coresUsed = coresUsed;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("coresUsed", this.coresUsed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the QuotaInfo.
     */
    public static QuotaInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaInfo deserializedQuotaInfo = new QuotaInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("coresUsed".equals(fieldName)) {
                    deserializedQuotaInfo.coresUsed = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaInfo;
        });
    }
}
