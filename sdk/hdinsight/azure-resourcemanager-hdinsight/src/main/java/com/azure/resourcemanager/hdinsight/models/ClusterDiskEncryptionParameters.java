// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Disk Encryption Cluster request parameters.
 */
@Fluent
public final class ClusterDiskEncryptionParameters implements JsonSerializable<ClusterDiskEncryptionParameters> {
    /*
     * Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
     */
    private String vaultUri;

    /*
     * Key name that is used for enabling disk encryption.
     */
    private String keyName;

    /*
     * Specific key version that is used for enabling disk encryption.
     */
    private String keyVersion;

    /**
     * Creates an instance of ClusterDiskEncryptionParameters class.
     */
    public ClusterDiskEncryptionParameters() {
    }

    /**
     * Get the vaultUri property: Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net.
     * 
     * @return the vaultUri value.
     */
    public String vaultUri() {
        return this.vaultUri;
    }

    /**
     * Set the vaultUri property: Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net.
     * 
     * @param vaultUri the vaultUri value to set.
     * @return the ClusterDiskEncryptionParameters object itself.
     */
    public ClusterDiskEncryptionParameters withVaultUri(String vaultUri) {
        this.vaultUri = vaultUri;
        return this;
    }

    /**
     * Get the keyName property: Key name that is used for enabling disk encryption.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: Key name that is used for enabling disk encryption.
     * 
     * @param keyName the keyName value to set.
     * @return the ClusterDiskEncryptionParameters object itself.
     */
    public ClusterDiskEncryptionParameters withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVersion property: Specific key version that is used for enabling disk encryption.
     * 
     * @return the keyVersion value.
     */
    public String keyVersion() {
        return this.keyVersion;
    }

    /**
     * Set the keyVersion property: Specific key version that is used for enabling disk encryption.
     * 
     * @param keyVersion the keyVersion value to set.
     * @return the ClusterDiskEncryptionParameters object itself.
     */
    public ClusterDiskEncryptionParameters withKeyVersion(String keyVersion) {
        this.keyVersion = keyVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vaultUri", this.vaultUri);
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("keyVersion", this.keyVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterDiskEncryptionParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterDiskEncryptionParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterDiskEncryptionParameters.
     */
    public static ClusterDiskEncryptionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterDiskEncryptionParameters deserializedClusterDiskEncryptionParameters
                = new ClusterDiskEncryptionParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vaultUri".equals(fieldName)) {
                    deserializedClusterDiskEncryptionParameters.vaultUri = reader.getString();
                } else if ("keyName".equals(fieldName)) {
                    deserializedClusterDiskEncryptionParameters.keyName = reader.getString();
                } else if ("keyVersion".equals(fieldName)) {
                    deserializedClusterDiskEncryptionParameters.keyVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterDiskEncryptionParameters;
        });
    }
}
