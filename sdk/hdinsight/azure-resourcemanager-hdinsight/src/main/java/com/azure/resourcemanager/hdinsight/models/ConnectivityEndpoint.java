// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The connectivity properties.
 */
@Fluent
public final class ConnectivityEndpoint implements JsonSerializable<ConnectivityEndpoint> {
    /*
     * The name of the endpoint.
     */
    private String name;

    /*
     * The protocol of the endpoint.
     */
    private String protocol;

    /*
     * The location of the endpoint.
     */
    private String location;

    /*
     * The port to connect to.
     */
    private Integer port;

    /*
     * The private ip address of the endpoint.
     */
    private String privateIpAddress;

    /**
     * Creates an instance of ConnectivityEndpoint class.
     */
    public ConnectivityEndpoint() {
    }

    /**
     * Get the name property: The name of the endpoint.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the endpoint.
     * 
     * @param name the name value to set.
     * @return the ConnectivityEndpoint object itself.
     */
    public ConnectivityEndpoint withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the protocol property: The protocol of the endpoint.
     * 
     * @return the protocol value.
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The protocol of the endpoint.
     * 
     * @param protocol the protocol value to set.
     * @return the ConnectivityEndpoint object itself.
     */
    public ConnectivityEndpoint withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the location property: The location of the endpoint.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the endpoint.
     * 
     * @param location the location value to set.
     * @return the ConnectivityEndpoint object itself.
     */
    public ConnectivityEndpoint withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the port property: The port to connect to.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The port to connect to.
     * 
     * @param port the port value to set.
     * @return the ConnectivityEndpoint object itself.
     */
    public ConnectivityEndpoint withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the privateIpAddress property: The private ip address of the endpoint.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: The private ip address of the endpoint.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the ConnectivityEndpoint object itself.
     */
    public ConnectivityEndpoint withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("protocol", this.protocol);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("privateIPAddress", this.privateIpAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectivityEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectivityEndpoint if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectivityEndpoint.
     */
    public static ConnectivityEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectivityEndpoint deserializedConnectivityEndpoint = new ConnectivityEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedConnectivityEndpoint.name = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedConnectivityEndpoint.protocol = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedConnectivityEndpoint.location = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedConnectivityEndpoint.port = reader.getNullable(JsonReader::getInt);
                } else if ("privateIPAddress".equals(fieldName)) {
                    deserializedConnectivityEndpoint.privateIpAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectivityEndpoint;
        });
    }
}
