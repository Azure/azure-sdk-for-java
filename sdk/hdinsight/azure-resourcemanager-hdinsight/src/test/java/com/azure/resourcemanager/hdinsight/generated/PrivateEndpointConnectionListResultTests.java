// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.hdinsight.models.PrivateEndpointConnectionListResult;
import com.azure.resourcemanager.hdinsight.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.hdinsight.models.PrivateLinkServiceConnectionStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"r\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"unzo\",\"actionsRequired\":\"dhcxgkmoy\"},\"linkIdentifier\":\"dyuib\",\"provisioningState\":\"Failed\"},\"id\":\"nbzydvfvfcj\",\"name\":\"aeoisrvh\",\"type\":\"gorf\"}],\"nextLink\":\"kiscvwmzhwpl\"}")
            .toObject(PrivateEndpointConnectionListResult.class);
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.REJECTED,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("unzo", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("dhcxgkmoy",
            model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionListResult model = new PrivateEndpointConnectionListResult()
            .withValue(Arrays.asList(new PrivateEndpointConnectionInner().withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(PrivateLinkServiceConnectionStatus.REJECTED)
                    .withDescription("unzo")
                    .withActionsRequired("dhcxgkmoy"))));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionListResult.class);
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.REJECTED,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("unzo", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("dhcxgkmoy",
            model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
    }
}
