// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.ClusterIdentity;
import com.azure.resourcemanager.hdinsight.models.ResourceIdentityType;
import com.azure.resourcemanager.hdinsight.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterIdentity model = BinaryData.fromString(
            "{\"principalId\":\"wpr\",\"tenantId\":\"lve\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"tjrip\":{\"principalId\":\"mkh\",\"clientId\":\"obbc\",\"tenantId\":\"s\"},\"t\":{\"principalId\":\"bpbewtghfgb\",\"clientId\":\"gw\",\"tenantId\":\"vlvqhjkbegi\"},\"rknftguvriuhprwm\":{\"principalId\":\"xiebwwaloayqcg\",\"clientId\":\"tzjuzgwyzmhtxo\",\"tenantId\":\"mtsavjcbpwxqp\"}}}")
            .toObject(ClusterIdentity.class);
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.type());
        Assertions.assertEquals("s", model.userAssignedIdentities().get("tjrip").tenantId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterIdentity model = new ClusterIdentity().withType(ResourceIdentityType.SYSTEM_ASSIGNED)
            .withUserAssignedIdentities(mapOf("tjrip", new UserAssignedIdentity().withTenantId("s"), "t",
                new UserAssignedIdentity().withTenantId("vlvqhjkbegi"), "rknftguvriuhprwm",
                new UserAssignedIdentity().withTenantId("mtsavjcbpwxqp")));
        model = BinaryData.fromObject(model).toObject(ClusterIdentity.class);
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.type());
        Assertions.assertEquals("s", model.userAssignedIdentities().get("tjrip").tenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
