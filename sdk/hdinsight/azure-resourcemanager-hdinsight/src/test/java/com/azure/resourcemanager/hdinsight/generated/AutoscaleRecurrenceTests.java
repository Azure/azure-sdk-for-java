// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.AutoscaleRecurrence;
import com.azure.resourcemanager.hdinsight.models.AutoscaleSchedule;
import com.azure.resourcemanager.hdinsight.models.AutoscaleTimeAndCapacity;
import com.azure.resourcemanager.hdinsight.models.DaysOfWeek;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AutoscaleRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutoscaleRecurrence model =
            BinaryData
                .fromString(
                    "{\"timeZone\":\"enevfyexfwhybci\",\"schedule\":[{\"days\":[\"Saturday\"],\"timeAndCapacity\":{\"time\":\"tynnaamdectehfi\",\"minInstanceCount\":494775669,\"maxInstanceCount\":478088047}},{\"days\":[\"Tuesday\",\"Thursday\"],\"timeAndCapacity\":{\"time\":\"rkgqhcjrefo\",\"minInstanceCount\":34828913,\"maxInstanceCount\":668805249}},{\"days\":[\"Friday\",\"Wednesday\"],\"timeAndCapacity\":{\"time\":\"xyqj\",\"minInstanceCount\":1744021341,\"maxInstanceCount\":203599917}}]}")
                .toObject(AutoscaleRecurrence.class);
        Assertions.assertEquals("enevfyexfwhybci", model.timeZone());
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.schedule().get(0).days().get(0));
        Assertions.assertEquals("tynnaamdectehfi", model.schedule().get(0).timeAndCapacity().time());
        Assertions.assertEquals(494775669, model.schedule().get(0).timeAndCapacity().minInstanceCount());
        Assertions.assertEquals(478088047, model.schedule().get(0).timeAndCapacity().maxInstanceCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutoscaleRecurrence model =
            new AutoscaleRecurrence()
                .withTimeZone("enevfyexfwhybci")
                .withSchedule(
                    Arrays
                        .asList(
                            new AutoscaleSchedule()
                                .withDays(Arrays.asList(DaysOfWeek.SATURDAY))
                                .withTimeAndCapacity(
                                    new AutoscaleTimeAndCapacity()
                                        .withTime("tynnaamdectehfi")
                                        .withMinInstanceCount(494775669)
                                        .withMaxInstanceCount(478088047)),
                            new AutoscaleSchedule()
                                .withDays(Arrays.asList(DaysOfWeek.TUESDAY, DaysOfWeek.THURSDAY))
                                .withTimeAndCapacity(
                                    new AutoscaleTimeAndCapacity()
                                        .withTime("rkgqhcjrefo")
                                        .withMinInstanceCount(34828913)
                                        .withMaxInstanceCount(668805249)),
                            new AutoscaleSchedule()
                                .withDays(Arrays.asList(DaysOfWeek.FRIDAY, DaysOfWeek.WEDNESDAY))
                                .withTimeAndCapacity(
                                    new AutoscaleTimeAndCapacity()
                                        .withTime("xyqj")
                                        .withMinInstanceCount(1744021341)
                                        .withMaxInstanceCount(203599917))));
        model = BinaryData.fromObject(model).toObject(AutoscaleRecurrence.class);
        Assertions.assertEquals("enevfyexfwhybci", model.timeZone());
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.schedule().get(0).days().get(0));
        Assertions.assertEquals("tynnaamdectehfi", model.schedule().get(0).timeAndCapacity().time());
        Assertions.assertEquals(494775669, model.schedule().get(0).timeAndCapacity().minInstanceCount());
        Assertions.assertEquals(478088047, model.schedule().get(0).timeAndCapacity().maxInstanceCount());
    }
}
