// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.fluent.models.ClusterConfigurationsInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterConfigurationsInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterConfigurationsInner model =
            BinaryData
                .fromString(
                    "{\"configurations\":{\"yhrfouyftaakcpw\":{\"xrslpm\":\"gx\",\"qsluicp\":\"twuoegrpkhjwni\",\"modfvuefywsbpfvm\":\"ggkzzlvmbmpa\"},\"smocmbq\":{\"ksmond\":\"zvqtmnubexkp\",\"gkopkwhojvpajqgx\":\"mquxvypo\"},\"uejrjxgc\":{\"zapvhelx\":\"vmkcx\",\"tddckcb\":\"rgly\"}}}")
                .toObject(ClusterConfigurationsInner.class);
        Assertions.assertEquals("gx", model.configurations().get("yhrfouyftaakcpw").get("xrslpm"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterConfigurationsInner model =
            new ClusterConfigurationsInner()
                .withConfigurations(
                    mapOf(
                        "yhrfouyftaakcpw",
                        mapOf("xrslpm", "gx", "qsluicp", "twuoegrpkhjwni", "modfvuefywsbpfvm", "ggkzzlvmbmpa"),
                        "smocmbq",
                        mapOf("ksmond", "zvqtmnubexkp", "gkopkwhojvpajqgx", "mquxvypo"),
                        "uejrjxgc",
                        mapOf("zapvhelx", "vmkcx", "tddckcb", "rgly")));
        model = BinaryData.fromObject(model).toObject(ClusterConfigurationsInner.class);
        Assertions.assertEquals("gx", model.configurations().get("yhrfouyftaakcpw").get("xrslpm"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
