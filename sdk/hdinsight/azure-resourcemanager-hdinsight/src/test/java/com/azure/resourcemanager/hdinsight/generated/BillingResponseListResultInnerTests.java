// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.fluent.models.BillingResponseListResultInner;
import com.azure.resourcemanager.hdinsight.models.BillingMeters;
import com.azure.resourcemanager.hdinsight.models.BillingResources;
import com.azure.resourcemanager.hdinsight.models.DiskBillingMeters;
import com.azure.resourcemanager.hdinsight.models.FilterMode;
import com.azure.resourcemanager.hdinsight.models.OSType;
import com.azure.resourcemanager.hdinsight.models.Tier;
import com.azure.resourcemanager.hdinsight.models.VmSizeCompatibilityFilterV2;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BillingResponseListResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingResponseListResultInner model = BinaryData.fromString(
            "{\"vmSizes\":[\"wabm\",\"oefki\"],\"vmSizesWithEncryptionAtHost\":[\"tpuqujmq\",\"gkfbtndoaong\",\"jcntuj\"],\"vmSizeFilters\":[{\"filterMode\":\"Exclude\",\"regions\":[\"twwaezkojvdcpzf\",\"qouicybxarzgsz\",\"foxciq\",\"p\"],\"clusterFlavors\":[\"amcio\",\"hkh\"],\"nodeTypes\":[\"khnzbonlw\",\"toego\",\"dwbwhkszzcmrvexz\",\"vbtqgsfraoyzk\"],\"clusterVersions\":[\"tlmngu\"],\"osType\":[\"Windows\",\"Windows\"],\"vmSizes\":[\"syuuximerq\",\"obwyznkb\",\"kutwpf\",\"pagmhrskdsnf\"],\"espApplied\":\"doakgtdlmkkzevdl\",\"computeIsolationSupported\":\"wpusdsttwvogv\"}],\"vmSizeProperties\":[{\"name\":\"dcngqqmoakufgmj\",\"cores\":349751254,\"dataDiskStorageTier\":\"dgrtwaenuuzkopbm\",\"label\":\"rfdwoyu\",\"maxDataDiskCount\":4568735292262817818,\"memoryInMb\":3459177326935122788,\"supportedByVirtualMachines\":true,\"supportedByWebWorkerRoles\":true,\"virtualMachineResourceDiskSizeInMb\":6074773218082221902,\"webWorkerResourceDiskSizeInMb\":4135226248111903185},{\"name\":\"zqhof\",\"cores\":1813126235,\"dataDiskStorageTier\":\"equi\",\"label\":\"xicslfao\",\"maxDataDiskCount\":8310123876106634171,\"memoryInMb\":2494227720059523553,\"supportedByVirtualMachines\":true,\"supportedByWebWorkerRoles\":false,\"virtualMachineResourceDiskSizeInMb\":4772469373607782969,\"webWorkerResourceDiskSizeInMb\":9111708836032441220},{\"name\":\"hka\",\"cores\":2029124466,\"dataDiskStorageTier\":\"tqscywug\",\"label\":\"oluhczbwemh\",\"maxDataDiskCount\":861506686210387635,\"memoryInMb\":2312516572905893398,\"supportedByVirtualMachines\":true,\"supportedByWebWorkerRoles\":true,\"virtualMachineResourceDiskSizeInMb\":3711551930232886433,\"webWorkerResourceDiskSizeInMb\":3553034048925104478},{\"name\":\"dxggicccnxqhuexm\",\"cores\":735026566,\"dataDiskStorageTier\":\"stvlzywemhzrnc\",\"label\":\"tclusiypbsfgy\",\"maxDataDiskCount\":7838664702645676425,\"memoryInMb\":9132015277397116650,\"supportedByVirtualMachines\":true,\"supportedByWebWorkerRoles\":true,\"virtualMachineResourceDiskSizeInMb\":1362554750636902661,\"webWorkerResourceDiskSizeInMb\":3695850185212160621}],\"billingResources\":[{\"region\":\"zis\",\"billingMeters\":[{\"meterParameter\":\"elolppvksrpqvuj\",\"meter\":\"aehtwd\",\"unit\":\"ftswibyrcdlbhsh\"}],\"diskBillingMeters\":[{\"diskRpMeter\":\"acstwityk\",\"sku\":\"vxccedcp\",\"tier\":\"Premium\"}]}]}")
            .toObject(BillingResponseListResultInner.class);
        Assertions.assertEquals("wabm", model.vmSizes().get(0));
        Assertions.assertEquals("tpuqujmq", model.vmSizesWithEncryptionAtHost().get(0));
        Assertions.assertEquals(FilterMode.EXCLUDE, model.vmSizeFilters().get(0).filterMode());
        Assertions.assertEquals("twwaezkojvdcpzf", model.vmSizeFilters().get(0).regions().get(0));
        Assertions.assertEquals("amcio", model.vmSizeFilters().get(0).clusterFlavors().get(0));
        Assertions.assertEquals("khnzbonlw", model.vmSizeFilters().get(0).nodeTypes().get(0));
        Assertions.assertEquals("tlmngu", model.vmSizeFilters().get(0).clusterVersions().get(0));
        Assertions.assertEquals(OSType.WINDOWS, model.vmSizeFilters().get(0).osType().get(0));
        Assertions.assertEquals("syuuximerq", model.vmSizeFilters().get(0).vmSizes().get(0));
        Assertions.assertEquals("doakgtdlmkkzevdl", model.vmSizeFilters().get(0).espApplied());
        Assertions.assertEquals("wpusdsttwvogv", model.vmSizeFilters().get(0).computeIsolationSupported());
        Assertions.assertEquals("zis", model.billingResources().get(0).region());
        Assertions.assertEquals("elolppvksrpqvuj",
            model.billingResources().get(0).billingMeters().get(0).meterParameter());
        Assertions.assertEquals("aehtwd", model.billingResources().get(0).billingMeters().get(0).meter());
        Assertions.assertEquals("ftswibyrcdlbhsh", model.billingResources().get(0).billingMeters().get(0).unit());
        Assertions.assertEquals("acstwityk", model.billingResources().get(0).diskBillingMeters().get(0).diskRpMeter());
        Assertions.assertEquals("vxccedcp", model.billingResources().get(0).diskBillingMeters().get(0).sku());
        Assertions.assertEquals(Tier.PREMIUM, model.billingResources().get(0).diskBillingMeters().get(0).tier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingResponseListResultInner model = new BillingResponseListResultInner()
            .withVmSizes(Arrays.asList("wabm", "oefki"))
            .withVmSizesWithEncryptionAtHost(Arrays.asList("tpuqujmq", "gkfbtndoaong", "jcntuj"))
            .withVmSizeFilters(Arrays.asList(new VmSizeCompatibilityFilterV2().withFilterMode(FilterMode.EXCLUDE)
                .withRegions(Arrays.asList("twwaezkojvdcpzf", "qouicybxarzgsz", "foxciq", "p"))
                .withClusterFlavors(Arrays.asList("amcio", "hkh"))
                .withNodeTypes(Arrays.asList("khnzbonlw", "toego", "dwbwhkszzcmrvexz", "vbtqgsfraoyzk"))
                .withClusterVersions(Arrays.asList("tlmngu"))
                .withOsType(Arrays.asList(OSType.WINDOWS, OSType.WINDOWS))
                .withVmSizes(Arrays.asList("syuuximerq", "obwyznkb", "kutwpf", "pagmhrskdsnf"))
                .withEspApplied("doakgtdlmkkzevdl")
                .withComputeIsolationSupported("wpusdsttwvogv")))
            .withBillingResources(Arrays.asList(new BillingResources().withRegion("zis")
                .withBillingMeters(Arrays.asList(new BillingMeters().withMeterParameter("elolppvksrpqvuj")
                    .withMeter("aehtwd")
                    .withUnit("ftswibyrcdlbhsh")))
                .withDiskBillingMeters(Arrays.asList(
                    new DiskBillingMeters().withDiskRpMeter("acstwityk").withSku("vxccedcp").withTier(Tier.PREMIUM)))));
        model = BinaryData.fromObject(model).toObject(BillingResponseListResultInner.class);
        Assertions.assertEquals("wabm", model.vmSizes().get(0));
        Assertions.assertEquals("tpuqujmq", model.vmSizesWithEncryptionAtHost().get(0));
        Assertions.assertEquals(FilterMode.EXCLUDE, model.vmSizeFilters().get(0).filterMode());
        Assertions.assertEquals("twwaezkojvdcpzf", model.vmSizeFilters().get(0).regions().get(0));
        Assertions.assertEquals("amcio", model.vmSizeFilters().get(0).clusterFlavors().get(0));
        Assertions.assertEquals("khnzbonlw", model.vmSizeFilters().get(0).nodeTypes().get(0));
        Assertions.assertEquals("tlmngu", model.vmSizeFilters().get(0).clusterVersions().get(0));
        Assertions.assertEquals(OSType.WINDOWS, model.vmSizeFilters().get(0).osType().get(0));
        Assertions.assertEquals("syuuximerq", model.vmSizeFilters().get(0).vmSizes().get(0));
        Assertions.assertEquals("doakgtdlmkkzevdl", model.vmSizeFilters().get(0).espApplied());
        Assertions.assertEquals("wpusdsttwvogv", model.vmSizeFilters().get(0).computeIsolationSupported());
        Assertions.assertEquals("zis", model.billingResources().get(0).region());
        Assertions.assertEquals("elolppvksrpqvuj",
            model.billingResources().get(0).billingMeters().get(0).meterParameter());
        Assertions.assertEquals("aehtwd", model.billingResources().get(0).billingMeters().get(0).meter());
        Assertions.assertEquals("ftswibyrcdlbhsh", model.billingResources().get(0).billingMeters().get(0).unit());
        Assertions.assertEquals("acstwityk", model.billingResources().get(0).diskBillingMeters().get(0).diskRpMeter());
        Assertions.assertEquals("vxccedcp", model.billingResources().get(0).diskBillingMeters().get(0).sku());
        Assertions.assertEquals(Tier.PREMIUM, model.billingResources().get(0).diskBillingMeters().get(0).tier());
    }
}
