// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.HDInsightManager;
import com.azure.resourcemanager.hdinsight.models.ExecuteScriptActionParameters;
import com.azure.resourcemanager.hdinsight.models.RuntimeScriptAction;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersExecuteScriptActionsMockTests {
    @Test
    public void testExecuteScriptActions() throws Exception {
        String responseStr = "{}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightManager manager = HDInsightManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        manager.clusters()
            .executeScriptActions("yrneizjcpeo", "khnmgbrou",
                new ExecuteScriptActionParameters().withScriptActions(Arrays.asList(
                    new RuntimeScriptAction().withName("bhfhpfpazjzoy")
                        .withUri("jxhpdulontacn")
                        .withParameters("w")
                        .withRoles(Arrays.asList("htuevrhrljy", "ogwxhnsduugwb", "reur")),
                    new RuntimeScriptAction().withName("htkln")
                        .withUri("nafvvkyfedev")
                        .withParameters("oslc")
                        .withRoles(Arrays.asList("y", "okkhminq", "ymc"))))
                    .withPersistOnSuccess(true),
                com.azure.core.util.Context.NONE);

    }
}
