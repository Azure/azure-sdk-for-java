// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.AzureMonitorSelectedConfigurations;
import com.azure.resourcemanager.hdinsight.models.AzureMonitorTableConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMonitorSelectedConfigurationsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMonitorSelectedConfigurations model = BinaryData.fromString(
            "{\"configurationVersion\":\"odlqiyntor\",\"globalConfigurations\":{\"yzrpzbchckqqzq\":\"leosjswsrms\",\"ysuiizynkedya\":\"ox\"},\"tableList\":[{\"name\":\"hqmibzyhwit\"},{\"name\":\"ypyynpcdpumnzg\"},{\"name\":\"z\"},{\"name\":\"abikns\"}]}")
            .toObject(AzureMonitorSelectedConfigurations.class);
        Assertions.assertEquals("odlqiyntor", model.configurationVersion());
        Assertions.assertEquals("leosjswsrms", model.globalConfigurations().get("yzrpzbchckqqzq"));
        Assertions.assertEquals("hqmibzyhwit", model.tableList().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMonitorSelectedConfigurations model
            = new AzureMonitorSelectedConfigurations().withConfigurationVersion("odlqiyntor")
                .withGlobalConfigurations(mapOf("yzrpzbchckqqzq", "leosjswsrms", "ysuiizynkedya", "ox"))
                .withTableList(Arrays.asList(new AzureMonitorTableConfiguration().withName("hqmibzyhwit"),
                    new AzureMonitorTableConfiguration().withName("ypyynpcdpumnzg"),
                    new AzureMonitorTableConfiguration().withName("z"),
                    new AzureMonitorTableConfiguration().withName("abikns")));
        model = BinaryData.fromObject(model).toObject(AzureMonitorSelectedConfigurations.class);
        Assertions.assertEquals("odlqiyntor", model.configurationVersion());
        Assertions.assertEquals("leosjswsrms", model.globalConfigurations().get("yzrpzbchckqqzq"));
        Assertions.assertEquals("hqmibzyhwit", model.tableList().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
