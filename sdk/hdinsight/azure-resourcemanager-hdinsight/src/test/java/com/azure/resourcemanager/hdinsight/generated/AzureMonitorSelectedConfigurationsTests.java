// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.AzureMonitorSelectedConfigurations;
import com.azure.resourcemanager.hdinsight.models.AzureMonitorTableConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMonitorSelectedConfigurationsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMonitorSelectedConfigurations model =
            BinaryData
                .fromString(
                    "{\"configurationVersion\":\"kwofyyvoq\",\"globalConfigurations\":{\"nwashrtd\":\"iexpbtgiwbwo\",\"ulpiuj\":\"kcnqxwbpo\",\"obyu\":\"aasipqi\"},\"tableList\":[{\"name\":\"qlpqwcciuq\"},{\"name\":\"dbutauvfbtkuwhh\"}]}")
                .toObject(AzureMonitorSelectedConfigurations.class);
        Assertions.assertEquals("kwofyyvoq", model.configurationVersion());
        Assertions.assertEquals("iexpbtgiwbwo", model.globalConfigurations().get("nwashrtd"));
        Assertions.assertEquals("qlpqwcciuq", model.tableList().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMonitorSelectedConfigurations model =
            new AzureMonitorSelectedConfigurations()
                .withConfigurationVersion("kwofyyvoq")
                .withGlobalConfigurations(mapOf("nwashrtd", "iexpbtgiwbwo", "ulpiuj", "kcnqxwbpo", "obyu", "aasipqi"))
                .withTableList(
                    Arrays
                        .asList(
                            new AzureMonitorTableConfiguration().withName("qlpqwcciuq"),
                            new AzureMonitorTableConfiguration().withName("dbutauvfbtkuwhh")));
        model = BinaryData.fromObject(model).toObject(AzureMonitorSelectedConfigurations.class);
        Assertions.assertEquals("kwofyyvoq", model.configurationVersion());
        Assertions.assertEquals("iexpbtgiwbwo", model.globalConfigurations().get("nwashrtd"));
        Assertions.assertEquals("qlpqwcciuq", model.tableList().get(0).name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
