// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.Dimension;
import com.azure.resourcemanager.hdinsight.models.MetricSpecifications;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MetricSpecificationsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MetricSpecifications model =
            BinaryData
                .fromString(
                    "{\"name\":\"g\",\"displayName\":\"joxslhvnhla\",\"displayDescription\":\"q\",\"unit\":\"kzjcjbtrgae\",\"aggregationType\":\"vibr\",\"supportedAggregationTypes\":[\"s\"],\"supportedTimeGrainTypes\":[\"beitpkx\",\"tmo\",\"bklftidgfcwqmpim\",\"qxzhem\"],\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"hujswtwkozzwcul\",\"sourceMdmNamespace\":\"awpfajnjwltlwtjj\",\"metricFilterPattern\":\"ktalhsnvkcdmxz\",\"fillGapWithZero\":false,\"category\":\"imlnwiaaomylw\",\"resourceIdDimensionNameOverride\":\"z\",\"isInternal\":false,\"delegateMetricNameOverride\":\"ethwwnpjhlfz\",\"dimensions\":[{\"name\":\"hwahfbousn\",\"displayName\":\"pgfewetwlyx\",\"internalName\":\"cxy\",\"toBeExportedForShoebox\":true},{\"name\":\"jhlimmbcxfhbcpo\",\"displayName\":\"vxcjzhqizxfpxtgq\",\"internalName\":\"javftjuhdqa\",\"toBeExportedForShoebox\":false}]}")
                .toObject(MetricSpecifications.class);
        Assertions.assertEquals("g", model.name());
        Assertions.assertEquals("joxslhvnhla", model.displayName());
        Assertions.assertEquals("q", model.displayDescription());
        Assertions.assertEquals("kzjcjbtrgae", model.unit());
        Assertions.assertEquals("vibr", model.aggregationType());
        Assertions.assertEquals("s", model.supportedAggregationTypes().get(0));
        Assertions.assertEquals("beitpkx", model.supportedTimeGrainTypes().get(0));
        Assertions.assertEquals(false, model.enableRegionalMdmAccount());
        Assertions.assertEquals("hujswtwkozzwcul", model.sourceMdmAccount());
        Assertions.assertEquals("awpfajnjwltlwtjj", model.sourceMdmNamespace());
        Assertions.assertEquals("ktalhsnvkcdmxz", model.metricFilterPattern());
        Assertions.assertEquals(false, model.fillGapWithZero());
        Assertions.assertEquals("imlnwiaaomylw", model.category());
        Assertions.assertEquals("z", model.resourceIdDimensionNameOverride());
        Assertions.assertEquals(false, model.isInternal());
        Assertions.assertEquals("ethwwnpjhlfz", model.delegateMetricNameOverride());
        Assertions.assertEquals("hwahfbousn", model.dimensions().get(0).name());
        Assertions.assertEquals("pgfewetwlyx", model.dimensions().get(0).displayName());
        Assertions.assertEquals("cxy", model.dimensions().get(0).internalName());
        Assertions.assertEquals(true, model.dimensions().get(0).toBeExportedForShoebox());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MetricSpecifications model =
            new MetricSpecifications()
                .withName("g")
                .withDisplayName("joxslhvnhla")
                .withDisplayDescription("q")
                .withUnit("kzjcjbtrgae")
                .withAggregationType("vibr")
                .withSupportedAggregationTypes(Arrays.asList("s"))
                .withSupportedTimeGrainTypes(Arrays.asList("beitpkx", "tmo", "bklftidgfcwqmpim", "qxzhem"))
                .withEnableRegionalMdmAccount(false)
                .withSourceMdmAccount("hujswtwkozzwcul")
                .withSourceMdmNamespace("awpfajnjwltlwtjj")
                .withMetricFilterPattern("ktalhsnvkcdmxz")
                .withFillGapWithZero(false)
                .withCategory("imlnwiaaomylw")
                .withResourceIdDimensionNameOverride("z")
                .withIsInternal(false)
                .withDelegateMetricNameOverride("ethwwnpjhlfz")
                .withDimensions(
                    Arrays
                        .asList(
                            new Dimension()
                                .withName("hwahfbousn")
                                .withDisplayName("pgfewetwlyx")
                                .withInternalName("cxy")
                                .withToBeExportedForShoebox(true),
                            new Dimension()
                                .withName("jhlimmbcxfhbcpo")
                                .withDisplayName("vxcjzhqizxfpxtgq")
                                .withInternalName("javftjuhdqa")
                                .withToBeExportedForShoebox(false)));
        model = BinaryData.fromObject(model).toObject(MetricSpecifications.class);
        Assertions.assertEquals("g", model.name());
        Assertions.assertEquals("joxslhvnhla", model.displayName());
        Assertions.assertEquals("q", model.displayDescription());
        Assertions.assertEquals("kzjcjbtrgae", model.unit());
        Assertions.assertEquals("vibr", model.aggregationType());
        Assertions.assertEquals("s", model.supportedAggregationTypes().get(0));
        Assertions.assertEquals("beitpkx", model.supportedTimeGrainTypes().get(0));
        Assertions.assertEquals(false, model.enableRegionalMdmAccount());
        Assertions.assertEquals("hujswtwkozzwcul", model.sourceMdmAccount());
        Assertions.assertEquals("awpfajnjwltlwtjj", model.sourceMdmNamespace());
        Assertions.assertEquals("ktalhsnvkcdmxz", model.metricFilterPattern());
        Assertions.assertEquals(false, model.fillGapWithZero());
        Assertions.assertEquals("imlnwiaaomylw", model.category());
        Assertions.assertEquals("z", model.resourceIdDimensionNameOverride());
        Assertions.assertEquals(false, model.isInternal());
        Assertions.assertEquals("ethwwnpjhlfz", model.delegateMetricNameOverride());
        Assertions.assertEquals("hwahfbousn", model.dimensions().get(0).name());
        Assertions.assertEquals("pgfewetwlyx", model.dimensions().get(0).displayName());
        Assertions.assertEquals("cxy", model.dimensions().get(0).internalName());
        Assertions.assertEquals(true, model.dimensions().get(0).toBeExportedForShoebox());
    }
}
