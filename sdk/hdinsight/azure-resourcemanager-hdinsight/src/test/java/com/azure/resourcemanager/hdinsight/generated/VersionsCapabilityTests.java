// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.VersionSpec;
import com.azure.resourcemanager.hdinsight.models.VersionsCapability;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VersionsCapabilityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VersionsCapability model =
            BinaryData
                .fromString(
                    "{\"available\":[{\"friendlyName\":\"oruzfgsquyfxrxx\",\"displayName\":\"ptramxj\",\"isDefault\":true,\"componentVersions\":{\"tdooaoj\":\"nwxuqlcvydyp\",\"nuj\":\"niodkooeb\",\"odtji\":\"emmsbvdkc\"}},{\"friendlyName\":\"wj\",\"displayName\":\"lt\",\"isDefault\":true,\"componentVersions\":{\"akggkfpag\":\"efkdlf\",\"lyls\":\"owpulpq\",\"agxsdszuemps\":\"xkqjnsjervt\",\"nqicvinvkjjxdxrb\":\"zkfzbeyv\"}},{\"friendlyName\":\"kzclewyh\",\"displayName\":\"wp\",\"isDefault\":true,\"componentVersions\":{\"yq\":\"ofncckwyfzqwhxxb\",\"ztppriolxorjalto\":\"xzfe\"}}]}")
                .toObject(VersionsCapability.class);
        Assertions.assertEquals("oruzfgsquyfxrxx", model.available().get(0).friendlyName());
        Assertions.assertEquals("ptramxj", model.available().get(0).displayName());
        Assertions.assertEquals(true, model.available().get(0).isDefault());
        Assertions.assertEquals("nwxuqlcvydyp", model.available().get(0).componentVersions().get("tdooaoj"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VersionsCapability model =
            new VersionsCapability()
                .withAvailable(
                    Arrays
                        .asList(
                            new VersionSpec()
                                .withFriendlyName("oruzfgsquyfxrxx")
                                .withDisplayName("ptramxj")
                                .withIsDefault(true)
                                .withComponentVersions(
                                    mapOf("tdooaoj", "nwxuqlcvydyp", "nuj", "niodkooeb", "odtji", "emmsbvdkc")),
                            new VersionSpec()
                                .withFriendlyName("wj")
                                .withDisplayName("lt")
                                .withIsDefault(true)
                                .withComponentVersions(
                                    mapOf(
                                        "akggkfpag",
                                        "efkdlf",
                                        "lyls",
                                        "owpulpq",
                                        "agxsdszuemps",
                                        "xkqjnsjervt",
                                        "nqicvinvkjjxdxrb",
                                        "zkfzbeyv")),
                            new VersionSpec()
                                .withFriendlyName("kzclewyh")
                                .withDisplayName("wp")
                                .withIsDefault(true)
                                .withComponentVersions(mapOf("yq", "ofncckwyfzqwhxxb", "ztppriolxorjalto", "xzfe"))));
        model = BinaryData.fromObject(model).toObject(VersionsCapability.class);
        Assertions.assertEquals("oruzfgsquyfxrxx", model.available().get(0).friendlyName());
        Assertions.assertEquals("ptramxj", model.available().get(0).displayName());
        Assertions.assertEquals(true, model.available().get(0).isDefault());
        Assertions.assertEquals("nwxuqlcvydyp", model.available().get(0).componentVersions().get("tdooaoj"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
