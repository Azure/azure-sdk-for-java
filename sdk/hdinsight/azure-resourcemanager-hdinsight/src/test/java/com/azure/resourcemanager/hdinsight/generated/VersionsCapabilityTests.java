// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.VersionSpec;
import com.azure.resourcemanager.hdinsight.models.VersionsCapability;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VersionsCapabilityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VersionsCapability model = BinaryData.fromString(
            "{\"available\":[{\"friendlyName\":\"zfgs\",\"displayName\":\"yfxrx\",\"isDefault\":false,\"componentVersions\":{\"uqlcvydy\":\"ramxjezwlwnw\",\"oo\":\"atdooaojkniod\"}}]}")
            .toObject(VersionsCapability.class);
        Assertions.assertEquals("zfgs", model.available().get(0).friendlyName());
        Assertions.assertEquals("yfxrx", model.available().get(0).displayName());
        Assertions.assertFalse(model.available().get(0).isDefault());
        Assertions.assertEquals("ramxjezwlwnw", model.available().get(0).componentVersions().get("uqlcvydy"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VersionsCapability model
            = new VersionsCapability().withAvailable(Arrays.asList(new VersionSpec().withFriendlyName("zfgs")
                .withDisplayName("yfxrx")
                .withIsDefault(false)
                .withComponentVersions(mapOf("uqlcvydy", "ramxjezwlwnw", "oo", "atdooaojkniod"))));
        model = BinaryData.fromObject(model).toObject(VersionsCapability.class);
        Assertions.assertEquals("zfgs", model.available().get(0).friendlyName());
        Assertions.assertEquals("yfxrx", model.available().get(0).displayName());
        Assertions.assertFalse(model.available().get(0).isDefault());
        Assertions.assertEquals("ramxjezwlwnw", model.available().get(0).componentVersions().get("uqlcvydy"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
