// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.HDInsightManager;
import com.azure.resourcemanager.hdinsight.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"birkfpksokdg\",\"display\":{\"provider\":\"wijymr\",\"resource\":\"guzozkyew\",\"operation\":\"nzhhhqos\",\"description\":\"fjkutycyarnroo\"},\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"oghktdpycz\",\"displayName\":\"oeocnhzqrott\",\"displayDescription\":\"cfyjzp\",\"unit\":\"rl\",\"aggregationType\":\"apqinf\",\"supportedAggregationTypes\":[\"yglqdhmrjzral\",\"xpjb\",\"ypsjoq\",\"jenkyh\"],\"supportedTimeGrainTypes\":[\"vsqxfxjelgcmpzqj\"],\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"xuwyvc\",\"sourceMdmNamespace\":\"oyvivbsiz\",\"metricFilterPattern\":\"jszlb\",\"fillGapWithZero\":true,\"category\":\"lzijiufehgmvflnw\",\"resourceIdDimensionNameOverride\":\"qkxrerl\",\"isInternal\":false,\"delegateMetricNameOverride\":\"yl\",\"dimensions\":[{},{}]}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightManager manager = HDInsightManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("birkfpksokdg", response.iterator().next().name());
        Assertions.assertEquals("wijymr", response.iterator().next().display().provider());
        Assertions.assertEquals("guzozkyew", response.iterator().next().display().resource());
        Assertions.assertEquals("nzhhhqos", response.iterator().next().display().operation());
        Assertions.assertEquals("fjkutycyarnroo", response.iterator().next().display().description());
        Assertions.assertEquals("oghktdpycz",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("oeocnhzqrott",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("cfyjzp",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("rl",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("apqinf",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals("yglqdhmrjzral",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("vsqxfxjelgcmpzqj",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertFalse(response.iterator()
            .next()
            .properties()
            .serviceSpecification()
            .metricSpecifications()
            .get(0)
            .enableRegionalMdmAccount());
        Assertions.assertEquals("xuwyvc",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmAccount());
        Assertions.assertEquals("oyvivbsiz",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmNamespace());
        Assertions.assertEquals("jszlb",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .metricFilterPattern());
        Assertions.assertTrue(response.iterator()
            .next()
            .properties()
            .serviceSpecification()
            .metricSpecifications()
            .get(0)
            .fillGapWithZero());
        Assertions.assertEquals("lzijiufehgmvflnw",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("qkxrerl",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions.assertFalse(
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("yl",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .delegateMetricNameOverride());
    }
}
