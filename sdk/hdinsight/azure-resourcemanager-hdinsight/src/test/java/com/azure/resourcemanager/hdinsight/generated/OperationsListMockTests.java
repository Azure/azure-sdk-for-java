// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hdinsight.HDInsightManager;
import com.azure.resourcemanager.hdinsight.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"dqq\",\"display\":{\"provider\":\"kva\",\"resource\":\"l\",\"operation\":\"jqvq\",\"description\":\"wehtaemxh\"},\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"usxivzrrryvei\",\"displayName\":\"pskdyzatvfuzk\",\"displayDescription\":\"tjvv\",\"unit\":\"xwigsye\",\"aggregationType\":\"qdsmjtg\",\"supportedAggregationTypes\":[\"dgkkile\",\"lkcsmknhwtbbae\"],\"supportedTimeGrainTypes\":[\"vv\",\"qfloygbdgwum\",\"xdgd\"],\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"gdexjd\",\"sourceMdmNamespace\":\"jsaqwotmmwllcols\",\"metricFilterPattern\":\"xaptefhexcgjok\",\"fillGapWithZero\":true,\"category\":\"hv\",\"resourceIdDimensionNameOverride\":\"jbekpeeksnbksdq\",\"isInternal\":true,\"delegateMetricNameOverride\":\"klxesl\",\"dimensions\":[{},{},{},{}]}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HDInsightManager manager = HDInsightManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dqq", response.iterator().next().name());
        Assertions.assertEquals("kva", response.iterator().next().display().provider());
        Assertions.assertEquals("l", response.iterator().next().display().resource());
        Assertions.assertEquals("jqvq", response.iterator().next().display().operation());
        Assertions.assertEquals("wehtaemxh", response.iterator().next().display().description());
        Assertions.assertEquals("usxivzrrryvei",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("pskdyzatvfuzk",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("tjvv",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("xwigsye",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("qdsmjtg",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals("dgkkile",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("vv",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals(false,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .enableRegionalMdmAccount());
        Assertions.assertEquals("gdexjd",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmAccount());
        Assertions.assertEquals("jsaqwotmmwllcols",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmNamespace());
        Assertions.assertEquals("xaptefhexcgjok",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .metricFilterPattern());
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .fillGapWithZero());
        Assertions.assertEquals("hv",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("jbekpeeksnbksdq",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions.assertEquals(true,
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("klxesl",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .delegateMetricNameOverride());
    }
}
