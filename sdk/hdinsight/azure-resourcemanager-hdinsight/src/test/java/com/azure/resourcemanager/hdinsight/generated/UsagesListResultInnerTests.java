// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.fluent.models.UsagesListResultInner;
import com.azure.resourcemanager.hdinsight.models.Usage;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UsagesListResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UsagesListResultInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"unit\":\"gkfbtndoaong\",\"currentValue\":1271439560574404501,\"limit\":3888691267660480720,\"name\":{\"value\":\"c\",\"localizedValue\":\"df\"}},{\"unit\":\"waezkojvd\",\"currentValue\":5361825295052268042,\"limit\":6459666134329406148,\"name\":{\"value\":\"cybxa\",\"localizedValue\":\"gszufoxciqopid\"}}]}")
                .toObject(UsagesListResultInner.class);
        Assertions.assertEquals("gkfbtndoaong", model.value().get(0).unit());
        Assertions.assertEquals(1271439560574404501L, model.value().get(0).currentValue());
        Assertions.assertEquals(3888691267660480720L, model.value().get(0).limit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UsagesListResultInner model =
            new UsagesListResultInner()
                .withValue(
                    Arrays
                        .asList(
                            new Usage()
                                .withUnit("gkfbtndoaong")
                                .withCurrentValue(1271439560574404501L)
                                .withLimit(3888691267660480720L),
                            new Usage()
                                .withUnit("waezkojvd")
                                .withCurrentValue(5361825295052268042L)
                                .withLimit(6459666134329406148L)));
        model = BinaryData.fromObject(model).toObject(UsagesListResultInner.class);
        Assertions.assertEquals("gkfbtndoaong", model.value().get(0).unit());
        Assertions.assertEquals(1271439560574404501L, model.value().get(0).currentValue());
        Assertions.assertEquals(3888691267660480720L, model.value().get(0).limit());
    }
}
