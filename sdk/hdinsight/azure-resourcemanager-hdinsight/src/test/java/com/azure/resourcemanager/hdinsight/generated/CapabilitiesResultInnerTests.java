// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.fluent.models.CapabilitiesResultInner;
import com.azure.resourcemanager.hdinsight.models.RegionsCapability;
import com.azure.resourcemanager.hdinsight.models.VersionSpec;
import com.azure.resourcemanager.hdinsight.models.VersionsCapability;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapabilitiesResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapabilitiesResultInner model = BinaryData.fromString(
            "{\"versions\":{\"zikhl\":{\"available\":[{\"friendlyName\":\"gdv\",\"displayName\":\"gpiohgwxrtfudxe\",\"isDefault\":true,\"componentVersions\":{\"himdbl\":\"agvrvmnpkuk\",\"hfjx\":\"gwimfn\"}},{\"friendlyName\":\"szkkfoqre\",\"displayName\":\"kzikfjawneaivxwc\",\"isDefault\":true,\"componentVersions\":{\"eae\":\"irels\"}},{\"friendlyName\":\"abfatkl\",\"displayName\":\"xbjhwuaanozjosph\",\"isDefault\":false,\"componentVersions\":{\"mjwosytx\":\"jrvxaglrv\",\"fcktqumiekke\":\"tcs\"}}]}},\"regions\":{\"su\":{\"available\":[\"gqggebdunygae\",\"idb\",\"fatpxllrxcyjmoa\"]},\"wdmjsjqbjhhyx\":{\"available\":[\"m\"]},\"ubeddg\":{\"available\":[\"lyc\",\"duhpk\",\"kgymareqnajxqug\",\"hky\"]},\"i\":{\"available\":[\"fwqmzqalkrmn\"]}},\"features\":[\"acqqudfnbyxbaaab\",\"yvayffimrzr\",\"uzqogsexnevf\"],\"quota\":{\"coresUsed\":2199712032932609839,\"maxCoresAllowed\":6087640790509225024,\"regionalQuotas\":[{\"regionName\":\"yceuzsoib\",\"coresUsed\":9173200843253449543,\"coresAvailable\":2021331363267121666},{\"regionName\":\"rthzvaytdwkqbrqu\",\"coresUsed\":3218198386643086892,\"coresAvailable\":5967113662628227205},{\"regionName\":\"i\",\"coresUsed\":5279167733168748347,\"coresAvailable\":1235148045143348499},{\"regionName\":\"r\",\"coresUsed\":233619173932499743,\"coresAvailable\":3812395507646425429}]}}")
            .toObject(CapabilitiesResultInner.class);
        Assertions.assertEquals("gdv", model.versions().get("zikhl").available().get(0).friendlyName());
        Assertions.assertEquals("gpiohgwxrtfudxe", model.versions().get("zikhl").available().get(0).displayName());
        Assertions.assertTrue(model.versions().get("zikhl").available().get(0).isDefault());
        Assertions.assertEquals("agvrvmnpkuk",
            model.versions().get("zikhl").available().get(0).componentVersions().get("himdbl"));
        Assertions.assertEquals("gqggebdunygae", model.regions().get("su").available().get(0));
        Assertions.assertEquals("acqqudfnbyxbaaab", model.features().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapabilitiesResultInner model = new CapabilitiesResultInner()
            .withVersions(mapOf("zikhl",
                new VersionsCapability().withAvailable(Arrays.asList(
                    new VersionSpec().withFriendlyName("gdv")
                        .withDisplayName("gpiohgwxrtfudxe")
                        .withIsDefault(true)
                        .withComponentVersions(mapOf("himdbl", "agvrvmnpkuk", "hfjx", "gwimfn")),
                    new VersionSpec().withFriendlyName("szkkfoqre")
                        .withDisplayName("kzikfjawneaivxwc")
                        .withIsDefault(true)
                        .withComponentVersions(mapOf("eae", "irels")),
                    new VersionSpec().withFriendlyName("abfatkl")
                        .withDisplayName("xbjhwuaanozjosph")
                        .withIsDefault(false)
                        .withComponentVersions(mapOf("mjwosytx", "jrvxaglrv", "fcktqumiekke", "tcs"))))))
            .withRegions(mapOf("su",
                new RegionsCapability().withAvailable(Arrays.asList("gqggebdunygae", "idb", "fatpxllrxcyjmoa")),
                "wdmjsjqbjhhyx", new RegionsCapability().withAvailable(Arrays.asList("m")), "ubeddg",
                new RegionsCapability().withAvailable(Arrays.asList("lyc", "duhpk", "kgymareqnajxqug", "hky")), "i",
                new RegionsCapability().withAvailable(Arrays.asList("fwqmzqalkrmn"))))
            .withFeatures(Arrays.asList("acqqudfnbyxbaaab", "yvayffimrzr", "uzqogsexnevf"));
        model = BinaryData.fromObject(model).toObject(CapabilitiesResultInner.class);
        Assertions.assertEquals("gdv", model.versions().get("zikhl").available().get(0).friendlyName());
        Assertions.assertEquals("gpiohgwxrtfudxe", model.versions().get("zikhl").available().get(0).displayName());
        Assertions.assertTrue(model.versions().get("zikhl").available().get(0).isDefault());
        Assertions.assertEquals("agvrvmnpkuk",
            model.versions().get("zikhl").available().get(0).componentVersions().get("himdbl"));
        Assertions.assertEquals("gqggebdunygae", model.regions().get("su").available().get(0));
        Assertions.assertEquals("acqqudfnbyxbaaab", model.features().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
