// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.BillingMeters;
import com.azure.resourcemanager.hdinsight.models.BillingResources;
import com.azure.resourcemanager.hdinsight.models.DiskBillingMeters;
import com.azure.resourcemanager.hdinsight.models.Tier;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BillingResourcesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingResources model = BinaryData.fromString(
            "{\"region\":\"pgvmpipaslthaqfx\",\"billingMeters\":[{\"meterParameter\":\"u\",\"meter\":\"bdsrez\",\"unit\":\"rhneuyowq\"},{\"meterParameter\":\"wyt\",\"meter\":\"ib\",\"unit\":\"cgpik\"},{\"meterParameter\":\"imejzanl\",\"meter\":\"xi\",\"unit\":\"rmbzo\"}],\"diskBillingMeters\":[{\"diskRpMeter\":\"xrjqcirgzpfrlazs\",\"sku\":\"nwoiind\",\"tier\":\"Standard\"},{\"diskRpMeter\":\"jylwbtlhflsj\",\"sku\":\"hszfjvfb\",\"tier\":\"Premium\"}]}")
            .toObject(BillingResources.class);
        Assertions.assertEquals("pgvmpipaslthaqfx", model.region());
        Assertions.assertEquals("u", model.billingMeters().get(0).meterParameter());
        Assertions.assertEquals("bdsrez", model.billingMeters().get(0).meter());
        Assertions.assertEquals("rhneuyowq", model.billingMeters().get(0).unit());
        Assertions.assertEquals("xrjqcirgzpfrlazs", model.diskBillingMeters().get(0).diskRpMeter());
        Assertions.assertEquals("nwoiind", model.diskBillingMeters().get(0).sku());
        Assertions.assertEquals(Tier.STANDARD, model.diskBillingMeters().get(0).tier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingResources model
            = new BillingResources().withRegion("pgvmpipaslthaqfx")
                .withBillingMeters(Arrays.asList(
                    new BillingMeters().withMeterParameter("u").withMeter("bdsrez").withUnit("rhneuyowq"),
                    new BillingMeters().withMeterParameter("wyt").withMeter("ib").withUnit("cgpik"),
                    new BillingMeters().withMeterParameter("imejzanl").withMeter("xi").withUnit("rmbzo")))
                .withDiskBillingMeters(Arrays.asList(new DiskBillingMeters()
                    .withDiskRpMeter("xrjqcirgzpfrlazs")
                    .withSku("nwoiind")
                    .withTier(Tier.STANDARD),
                    new DiskBillingMeters().withDiskRpMeter("jylwbtlhflsj")
                        .withSku("hszfjvfb")
                        .withTier(Tier.PREMIUM)));
        model = BinaryData.fromObject(model).toObject(BillingResources.class);
        Assertions.assertEquals("pgvmpipaslthaqfx", model.region());
        Assertions.assertEquals("u", model.billingMeters().get(0).meterParameter());
        Assertions.assertEquals("bdsrez", model.billingMeters().get(0).meter());
        Assertions.assertEquals("rhneuyowq", model.billingMeters().get(0).unit());
        Assertions.assertEquals("xrjqcirgzpfrlazs", model.diskBillingMeters().get(0).diskRpMeter());
        Assertions.assertEquals("nwoiind", model.diskBillingMeters().get(0).sku());
        Assertions.assertEquals(Tier.STANDARD, model.diskBillingMeters().get(0).tier());
    }
}
