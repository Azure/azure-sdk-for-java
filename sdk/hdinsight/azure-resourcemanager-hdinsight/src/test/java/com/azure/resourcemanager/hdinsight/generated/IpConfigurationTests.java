// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsight.models.IpConfiguration;
import com.azure.resourcemanager.hdinsight.models.PrivateIpAllocationMethod;
import com.azure.resourcemanager.hdinsight.models.ResourceId;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfiguration model =
            BinaryData
                .fromString(
                    "{\"id\":\"tvfcivfsn\",\"name\":\"ymuctqhjfbebrj\",\"type\":\"erfuwuttt\",\"properties\":{\"provisioningState\":\"Failed\",\"primary\":true,\"privateIPAddress\":\"rp\",\"privateIPAllocationMethod\":\"static\",\"subnet\":{\"id\":\"yva\"}}}")
                .toObject(IpConfiguration.class);
        Assertions.assertEquals("ymuctqhjfbebrj", model.name());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("rp", model.privateIpAddress());
        Assertions.assertEquals(PrivateIpAllocationMethod.STATIC, model.privateIpAllocationMethod());
        Assertions.assertEquals("yva", model.subnet().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfiguration model =
            new IpConfiguration()
                .withName("ymuctqhjfbebrj")
                .withPrimary(true)
                .withPrivateIpAddress("rp")
                .withPrivateIpAllocationMethod(PrivateIpAllocationMethod.STATIC)
                .withSubnet(new ResourceId().withId("yva"));
        model = BinaryData.fromObject(model).toObject(IpConfiguration.class);
        Assertions.assertEquals("ymuctqhjfbebrj", model.name());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("rp", model.privateIpAddress());
        Assertions.assertEquals(PrivateIpAllocationMethod.STATIC, model.privateIpAllocationMethod());
        Assertions.assertEquals("yva", model.subnet().id());
    }
}
