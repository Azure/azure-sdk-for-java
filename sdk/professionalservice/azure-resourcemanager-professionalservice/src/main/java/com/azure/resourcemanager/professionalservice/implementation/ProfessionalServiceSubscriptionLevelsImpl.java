// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.professionalservice.fluent.ProfessionalServiceSubscriptionLevelsClient;
import com.azure.resourcemanager.professionalservice.fluent.models.ProfessionalServiceResourceInner;
import com.azure.resourcemanager.professionalservice.models.DeleteOptions;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResource;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceSubscriptionLevels;

public final class ProfessionalServiceSubscriptionLevelsImpl implements ProfessionalServiceSubscriptionLevels {
    private static final ClientLogger LOGGER = new ClientLogger(ProfessionalServiceSubscriptionLevelsImpl.class);

    private final ProfessionalServiceSubscriptionLevelsClient innerClient;

    private final com.azure.resourcemanager.professionalservice.ProfessionalServiceManager serviceManager;

    public ProfessionalServiceSubscriptionLevelsImpl(
        ProfessionalServiceSubscriptionLevelsClient innerClient,
        com.azure.resourcemanager.professionalservice.ProfessionalServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ProfessionalServiceResource> list(String subscriptionId) {
        PagedIterable<ProfessionalServiceResourceInner> inner = this.serviceClient().list(subscriptionId);
        return Utils.mapPage(inner, inner1 -> new ProfessionalServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ProfessionalServiceResource> list(String subscriptionId, Context context) {
        PagedIterable<ProfessionalServiceResourceInner> inner = this.serviceClient().list(subscriptionId, context);
        return Utils.mapPage(inner, inner1 -> new ProfessionalServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ProfessionalServiceResource> listByResourceGroup(
        String subscriptionId, String resourceGroupName) {
        PagedIterable<ProfessionalServiceResourceInner> inner =
            this.serviceClient().listByResourceGroup(subscriptionId, resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ProfessionalServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ProfessionalServiceResource> listByResourceGroup(
        String subscriptionId, String resourceGroupName, Context context) {
        PagedIterable<ProfessionalServiceResourceInner> inner =
            this.serviceClient().listByResourceGroup(subscriptionId, resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ProfessionalServiceResourceImpl(inner1, this.manager()));
    }

    public Response<ProfessionalServiceResource> getByResourceGroupWithResponse(
        String subscriptionId, String resourceGroupName, String resourceName, Context context) {
        Response<ProfessionalServiceResourceInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProfessionalServiceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProfessionalServiceResource getByResourceGroup(
        String subscriptionId, String resourceGroupName, String resourceName) {
        ProfessionalServiceResourceInner inner =
            this.serviceClient().getByResourceGroup(subscriptionId, resourceGroupName, resourceName);
        if (inner != null) {
            return new ProfessionalServiceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String subscriptionId, String resourceGroupName, String resourceName) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, resourceName);
    }

    public void delete(String subscriptionId, String resourceGroupName, String resourceName, Context context) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, resourceName, context);
    }

    public void updateToUnsubscribed(
        String subscriptionId, String resourceGroupName, String resourceName, DeleteOptions parameters) {
        this.serviceClient().updateToUnsubscribed(subscriptionId, resourceGroupName, resourceName, parameters);
    }

    public void updateToUnsubscribed(
        String subscriptionId,
        String resourceGroupName,
        String resourceName,
        DeleteOptions parameters,
        Context context) {
        this.serviceClient().updateToUnsubscribed(subscriptionId, resourceGroupName, resourceName, parameters, context);
    }

    public ProfessionalServiceResource getById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        return this
            .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, Context.NONE)
            .getValue();
    }

    public Response<ProfessionalServiceResource> getByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        return this.getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, context);
    }

    public void deleteById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        this.delete(subscriptionId, resourceGroupName, resourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        this.delete(subscriptionId, resourceGroupName, resourceName, context);
    }

    private ProfessionalServiceSubscriptionLevelsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.professionalservice.ProfessionalServiceManager manager() {
        return this.serviceManager;
    }

    public ProfessionalServiceResourceImpl define(String name) {
        return new ProfessionalServiceResourceImpl(name, this.manager());
    }
}
