// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.professionalservice.fluent.models.ProfessionalServiceResourceInner;

/** An instance of this class provides access to all the operations defined in ProfessionalServiceOperationsClient. */
public interface ProfessionalServiceOperationsClient {
    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner> beginGet(
        String operationId);

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner> beginGet(
        String operationId, Context context);

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner get(String operationId);

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner get(String operationId, Context context);
}
