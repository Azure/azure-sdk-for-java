// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.professionalservice.fluent.models.ProfessionalServiceResourceInner;
import com.azure.resourcemanager.professionalservice.models.DeleteOptions;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResourceCreation;

/**
 * An instance of this class provides access to all the operations defined in
 * ProfessionalServiceSubscriptionLevelsClient.
 */
public interface ProfessionalServiceSubscriptionLevelsClient {
    /**
     * Gets information about all the Subscription Level ProfessionalService in a certain Azure subscription.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all the Subscription Level ProfessionalService in a certain Azure subscription as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProfessionalServiceResourceInner> list(String subscriptionId);

    /**
     * Gets information about all the Subscription Level ProfessionalService in a certain Azure subscription.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all the Subscription Level ProfessionalService in a certain Azure subscription as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProfessionalServiceResourceInner> list(String subscriptionId, Context context);

    /**
     * Gets information about all the Subscription Level ProfessionalService in a certain resource group.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all the Subscription Level ProfessionalService in a certain resource group as paginated
     *     response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProfessionalServiceResourceInner> listByResourceGroup(
        String subscriptionId, String resourceGroupName);

    /**
     * Gets information about all the Subscription Level ProfessionalService in a certain resource group.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all the Subscription Level ProfessionalService in a certain resource group as paginated
     *     response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProfessionalServiceResourceInner> listByResourceGroup(
        String subscriptionId, String resourceGroupName, Context context);

    /**
     * Gets information about the specified Subscription Level ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Subscription Level ProfessionalService along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProfessionalServiceResourceInner> getByResourceGroupWithResponse(
        String subscriptionId, String resourceGroupName, String resourceName, Context context);

    /**
     * Gets information about the specified Subscription Level ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Subscription Level ProfessionalService.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner getByResourceGroup(
        String subscriptionId, String resourceGroupName, String resourceName);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update subscription level ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner> beginCreateOrUpdate(
        String subscriptionId,
        String resourceGroupName,
        String resourceName,
        ProfessionalServiceResourceCreation parameters);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update subscription level ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner> beginCreateOrUpdate(
        String subscriptionId,
        String resourceGroupName,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update subscription level ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner createOrUpdate(
        String subscriptionId,
        String resourceGroupName,
        String resourceName,
        ProfessionalServiceResourceCreation parameters);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update subscription level ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner createOrUpdate(
        String subscriptionId,
        String resourceGroupName,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId, String resourceGroupName, String resourceName);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId, String resourceGroupName, String resourceName, Context context);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String subscriptionId, String resourceGroupName, String resourceName);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String subscriptionId, String resourceGroupName, String resourceName, Context context);

    /**
     * Unsubscribe from a specified Subscription Level ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to unsubscribe ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginUpdateToUnsubscribed(
        String subscriptionId, String resourceGroupName, String resourceName, DeleteOptions parameters);

    /**
     * Unsubscribe from a specified Subscription Level ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to unsubscribe ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginUpdateToUnsubscribed(
        String subscriptionId,
        String resourceGroupName,
        String resourceName,
        DeleteOptions parameters,
        Context context);

    /**
     * Unsubscribe from a specified Subscription Level ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to unsubscribe ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateToUnsubscribed(
        String subscriptionId, String resourceGroupName, String resourceName, DeleteOptions parameters);

    /**
     * Unsubscribe from a specified Subscription Level ProfessionalService.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to unsubscribe ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateToUnsubscribed(
        String subscriptionId,
        String resourceGroupName,
        String resourceName,
        DeleteOptions parameters,
        Context context);
}
