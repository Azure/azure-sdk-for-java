// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.professionalservice.fluent.models.ProfessionalServiceResourceInner;
import com.azure.resourcemanager.professionalservice.models.DeleteOptions;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceCreationProperties;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResource;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResourceCreation;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResourceProperties;
import java.util.Collections;
import java.util.Map;

public final class ProfessionalServiceResourceImpl
    implements ProfessionalServiceResource, ProfessionalServiceResource.Definition, ProfessionalServiceResource.Update {
    private ProfessionalServiceResourceInner innerObject;

    private final com.azure.resourcemanager.professionalservice.ProfessionalServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ProfessionalServiceResourceProperties properties() {
        return this.innerModel().properties();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ProfessionalServiceResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.professionalservice.ProfessionalServiceManager manager() {
        return this.serviceManager;
    }

    private String subscriptionId;

    private String resourceGroupName;

    private String resourceName;

    private ProfessionalServiceResourceCreation createParameters;

    private ProfessionalServiceResourceCreation updateParameters;

    public ProfessionalServiceResourceImpl withExistingResourceGroup(String subscriptionId, String resourceGroupName) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ProfessionalServiceResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getProfessionalServiceSubscriptionLevels()
                .createOrUpdate(subscriptionId, resourceGroupName, resourceName, createParameters, Context.NONE);
        return this;
    }

    public ProfessionalServiceResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getProfessionalServiceSubscriptionLevels()
                .createOrUpdate(subscriptionId, resourceGroupName, resourceName, createParameters, context);
        return this;
    }

    ProfessionalServiceResourceImpl(
        String name, com.azure.resourcemanager.professionalservice.ProfessionalServiceManager serviceManager) {
        this.innerObject = new ProfessionalServiceResourceInner();
        this.serviceManager = serviceManager;
        this.resourceName = name;
        this.createParameters = new ProfessionalServiceResourceCreation();
    }

    public ProfessionalServiceResourceImpl update() {
        this.updateParameters = new ProfessionalServiceResourceCreation();
        return this;
    }

    public ProfessionalServiceResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getProfessionalServiceSubscriptionLevels()
                .createOrUpdate(subscriptionId, resourceGroupName, resourceName, updateParameters, Context.NONE);
        return this;
    }

    public ProfessionalServiceResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getProfessionalServiceSubscriptionLevels()
                .createOrUpdate(subscriptionId, resourceGroupName, resourceName, updateParameters, context);
        return this;
    }

    ProfessionalServiceResourceImpl(
        ProfessionalServiceResourceInner innerObject,
        com.azure.resourcemanager.professionalservice.ProfessionalServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.subscriptionId = Utils.getValueFromIdByName(innerObject.id(), "subscriptions");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.resourceName = Utils.getValueFromIdByName(innerObject.id(), "resources");
    }

    public ProfessionalServiceResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getProfessionalServiceSubscriptionLevels()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, Context.NONE)
                .getValue();
        return this;
    }

    public ProfessionalServiceResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getProfessionalServiceSubscriptionLevels()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, context)
                .getValue();
        return this;
    }

    public void updateToUnsubscribed(DeleteOptions parameters) {
        serviceManager
            .professionalServiceSubscriptionLevels()
            .updateToUnsubscribed(subscriptionId, resourceGroupName, resourceName, parameters);
    }

    public void updateToUnsubscribed(DeleteOptions parameters, Context context) {
        serviceManager
            .professionalServiceSubscriptionLevels()
            .updateToUnsubscribed(subscriptionId, resourceGroupName, resourceName, parameters, context);
    }

    public ProfessionalServiceResourceImpl withRegion(Region location) {
        this.createParameters.withLocation(location.toString());
        return this;
    }

    public ProfessionalServiceResourceImpl withRegion(String location) {
        this.createParameters.withLocation(location);
        return this;
    }

    public ProfessionalServiceResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createParameters.withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ProfessionalServiceResourceImpl withName(String name) {
        if (isInCreateMode()) {
            this.createParameters.withName(name);
            return this;
        } else {
            this.updateParameters.withName(name);
            return this;
        }
    }

    public ProfessionalServiceResourceImpl withProperties(ProfessionalServiceCreationProperties properties) {
        if (isInCreateMode()) {
            this.createParameters.withProperties(properties);
            return this;
        } else {
            this.updateParameters.withProperties(properties);
            return this;
        }
    }

    public ProfessionalServiceResourceImpl withLocation(String location) {
        this.updateParameters.withLocation(location);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
