// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.changeanalysis.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.changeanalysis.fluent.ConfigurationProfilesClient;
import com.azure.resourcemanager.changeanalysis.fluent.models.ConfigurationProfileResourceInner;
import com.azure.resourcemanager.changeanalysis.models.ConfigurationProfileResource;
import com.azure.resourcemanager.changeanalysis.models.ConfigurationProfiles;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ConfigurationProfilesImpl implements ConfigurationProfiles {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConfigurationProfilesImpl.class);

    private final ConfigurationProfilesClient innerClient;

    private final com.azure.resourcemanager.changeanalysis.AzureChangeAnalysisManager serviceManager;

    public ConfigurationProfilesImpl(
        ConfigurationProfilesClient innerClient,
        com.azure.resourcemanager.changeanalysis.AzureChangeAnalysisManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ConfigurationProfileResource get(String profileName) {
        ConfigurationProfileResourceInner inner = this.serviceClient().get(profileName);
        if (inner != null) {
            return new ConfigurationProfileResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConfigurationProfileResource> getWithResponse(String profileName, Context context) {
        Response<ConfigurationProfileResourceInner> inner = this.serviceClient().getWithResponse(profileName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConfigurationProfileResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String profileName) {
        this.serviceClient().delete(profileName);
    }

    public Response<Void> deleteWithResponse(String profileName, Context context) {
        return this.serviceClient().deleteWithResponse(profileName, context);
    }

    public ConfigurationProfileResource getById(String id) {
        String profileName = Utils.getValueFromIdByName(id, "profile");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profile'.", id)));
        }
        return this.getWithResponse(profileName, Context.NONE).getValue();
    }

    public Response<ConfigurationProfileResource> getByIdWithResponse(String id, Context context) {
        String profileName = Utils.getValueFromIdByName(id, "profile");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profile'.", id)));
        }
        return this.getWithResponse(profileName, context);
    }

    public void deleteById(String id) {
        String profileName = Utils.getValueFromIdByName(id, "profile");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profile'.", id)));
        }
        this.deleteWithResponse(profileName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String profileName = Utils.getValueFromIdByName(id, "profile");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profile'.", id)));
        }
        return this.deleteWithResponse(profileName, context);
    }

    private ConfigurationProfilesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.changeanalysis.AzureChangeAnalysisManager manager() {
        return this.serviceManager;
    }

    public ConfigurationProfileResourceImpl define(String name) {
        return new ConfigurationProfileResourceImpl(name, this.manager());
    }
}
