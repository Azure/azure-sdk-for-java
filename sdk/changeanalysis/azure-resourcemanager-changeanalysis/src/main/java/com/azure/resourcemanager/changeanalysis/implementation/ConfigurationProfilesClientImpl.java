// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.changeanalysis.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.changeanalysis.fluent.ConfigurationProfilesClient;
import com.azure.resourcemanager.changeanalysis.fluent.models.ConfigurationProfileResourceInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ConfigurationProfilesClient. */
public final class ConfigurationProfilesClientImpl implements ConfigurationProfilesClient {
    private final ClientLogger logger = new ClientLogger(ConfigurationProfilesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ConfigurationProfilesService service;

    /** The service client containing this operation class. */
    private final AzureChangeAnalysisManagementClientImpl client;

    /**
     * Initializes an instance of ConfigurationProfilesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ConfigurationProfilesClientImpl(AzureChangeAnalysisManagementClientImpl client) {
        this.service =
            RestProxy
                .create(ConfigurationProfilesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureChangeAnalysisManagementClientConfigurationProfiles to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureChangeAnalysisM")
    private interface ConfigurationProfilesService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.ChangeAnalysis/profile/{profileName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationProfileResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("profileName") String profileName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/subscriptions/{subscriptionId}/providers/Microsoft.ChangeAnalysis/profile/{profileName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationProfileResourceInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("profileName") String profileName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ConfigurationProfileResourceInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/subscriptions/{subscriptionId}/providers/Microsoft.ChangeAnalysis/profile/{profileName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationProfileResourceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("profileName") String profileName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ConfigurationProfileResourceInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/subscriptions/{subscriptionId}/providers/Microsoft.ChangeAnalysis/profile/{profileName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("profileName") String profileName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the configuration profile for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration profile for the Microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationProfileResourceInner>> getWithResponseAsync(String profileName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            profileName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the configuration profile for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration profile for the Microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationProfileResourceInner>> getWithResponseAsync(
        String profileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                profileName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the configuration profile for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration profile for the Microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationProfileResourceInner> getAsync(String profileName) {
        return getWithResponseAsync(profileName)
            .flatMap(
                (Response<ConfigurationProfileResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the configuration profile for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration profile for the Microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationProfileResourceInner get(String profileName) {
        return getAsync(profileName).block();
    }

    /**
     * Gets the configuration profile for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration profile for the Microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationProfileResourceInner> getWithResponse(String profileName, Context context) {
        return getWithResponseAsync(profileName, context).block();
    }

    /**
     * Updates configuration profile for for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body Request body containing new configuration profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationProfileResourceInner>> createWithResponseAsync(
        String profileName, ConfigurationProfileResourceInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            profileName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates configuration profile for for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body Request body containing new configuration profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationProfileResourceInner>> createWithResponseAsync(
        String profileName, ConfigurationProfileResourceInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                profileName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Updates configuration profile for for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body Request body containing new configuration profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationProfileResourceInner> createAsync(
        String profileName, ConfigurationProfileResourceInner body) {
        return createWithResponseAsync(profileName, body)
            .flatMap(
                (Response<ConfigurationProfileResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates configuration profile for for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationProfileResourceInner> createAsync(String profileName) {
        final ConfigurationProfileResourceInner body = null;
        return createWithResponseAsync(profileName, body)
            .flatMap(
                (Response<ConfigurationProfileResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates configuration profile for for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationProfileResourceInner create(String profileName) {
        final ConfigurationProfileResourceInner body = null;
        return createAsync(profileName, body).block();
    }

    /**
     * Updates configuration profile for for the Microsoft.ChangeAnalysis resource provider. The profile name should be
     * always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body Request body containing new configuration profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationProfileResourceInner> createWithResponse(
        String profileName, ConfigurationProfileResourceInner body, Context context) {
        return createWithResponseAsync(profileName, body, context).block();
    }

    /**
     * Updates a configuration profile with the specified parameters. The profile name should be always set to
     * 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationProfileResourceInner>> updateWithResponseAsync(
        String profileName, ConfigurationProfileResourceInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            profileName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates a configuration profile with the specified parameters. The profile name should be always set to
     * 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body The parameters for updating a configuration store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationProfileResourceInner>> updateWithResponseAsync(
        String profileName, ConfigurationProfileResourceInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                profileName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Updates a configuration profile with the specified parameters. The profile name should be always set to
     * 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationProfileResourceInner> updateAsync(
        String profileName, ConfigurationProfileResourceInner body) {
        return updateWithResponseAsync(profileName, body)
            .flatMap(
                (Response<ConfigurationProfileResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates a configuration profile with the specified parameters. The profile name should be always set to
     * 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationProfileResourceInner> updateAsync(String profileName) {
        final ConfigurationProfileResourceInner body = null;
        return updateWithResponseAsync(profileName, body)
            .flatMap(
                (Response<ConfigurationProfileResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates a configuration profile with the specified parameters. The profile name should be always set to
     * 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationProfileResourceInner update(String profileName) {
        final ConfigurationProfileResourceInner body = null;
        return updateAsync(profileName, body).block();
    }

    /**
     * Updates a configuration profile with the specified parameters. The profile name should be always set to
     * 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param body The parameters for updating a configuration store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a profile object that contains change analysis configuration, such as notification settings, for this
     *     subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationProfileResourceInner> updateWithResponse(
        String profileName, ConfigurationProfileResourceInner body, Context context) {
        return updateWithResponseAsync(profileName, body, context).block();
    }

    /**
     * Deletes existing configuration profile. The profile name should be always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String profileName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            profileName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes existing configuration profile. The profile name should be always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String profileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                profileName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes existing configuration profile. The profile name should be always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String profileName) {
        return deleteWithResponseAsync(profileName).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes existing configuration profile. The profile name should be always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String profileName) {
        deleteAsync(profileName).block();
    }

    /**
     * Deletes existing configuration profile. The profile name should be always set to 'default'.
     *
     * @param profileName The name of the configuration profile. The profile name should be set to 'default', all other
     *     names will be overwritten.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String profileName, Context context) {
        return deleteWithResponseAsync(profileName, context).block();
    }
}
