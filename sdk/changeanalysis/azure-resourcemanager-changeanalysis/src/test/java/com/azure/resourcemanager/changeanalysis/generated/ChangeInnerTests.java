// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.changeanalysis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.changeanalysis.fluent.models.ChangeInner;
import com.azure.resourcemanager.changeanalysis.models.ChangeCategory;
import com.azure.resourcemanager.changeanalysis.models.ChangeProperties;
import com.azure.resourcemanager.changeanalysis.models.ChangeType;
import com.azure.resourcemanager.changeanalysis.models.Level;
import com.azure.resourcemanager.changeanalysis.models.PropertyChange;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ChangeInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChangeInner model = BinaryData.fromString(
            "{\"properties\":{\"resourceId\":\"yypnddhsgcbacphe\",\"timeStamp\":\"2020-12-30T06:06:44Z\",\"initiatedByList\":[\"nqgoulzndli\",\"wyqkgfgibm\",\"dgak\",\"qsrxybzqqed\"],\"changeType\":\"Add\",\"propertyChanges\":[{\"changeType\":\"Remove\",\"changeCategory\":\"User\",\"jsonPath\":\"flmmnk\",\"displayName\":\"modmglougpb\",\"level\":\"Normal\",\"description\":\"utduqktapspwgcu\",\"oldValue\":\"tumkdosvqwhbm\",\"newValue\":\"bbjfddgmbmbexp\",\"isDataMasked\":true},{\"changeType\":\"Add\",\"changeCategory\":\"User\",\"jsonPath\":\"lfp\",\"displayName\":\"s\",\"level\":\"Noisy\",\"description\":\"qux\",\"oldValue\":\"jyj\",\"newValue\":\"jaoyfhrtx\",\"isDataMasked\":false}]},\"id\":\"erkujys\",\"name\":\"l\",\"type\":\"juvf\"}")
            .toObject(ChangeInner.class);
        Assertions.assertEquals("yypnddhsgcbacphe", model.properties().resourceId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-30T06:06:44Z"), model.properties().timestamp());
        Assertions.assertEquals("nqgoulzndli", model.properties().initiatedByList().get(0));
        Assertions.assertEquals(ChangeType.ADD, model.properties().changeType());
        Assertions.assertEquals(ChangeType.REMOVE, model.properties().propertyChanges().get(0).changeType());
        Assertions.assertEquals(ChangeCategory.USER, model.properties().propertyChanges().get(0).changeCategory());
        Assertions.assertEquals("flmmnk", model.properties().propertyChanges().get(0).jsonPath());
        Assertions.assertEquals("modmglougpb", model.properties().propertyChanges().get(0).displayName());
        Assertions.assertEquals(Level.NORMAL, model.properties().propertyChanges().get(0).level());
        Assertions.assertEquals("utduqktapspwgcu", model.properties().propertyChanges().get(0).description());
        Assertions.assertEquals("tumkdosvqwhbm", model.properties().propertyChanges().get(0).oldValue());
        Assertions.assertEquals("bbjfddgmbmbexp", model.properties().propertyChanges().get(0).newValue());
        Assertions.assertEquals(true, model.properties().propertyChanges().get(0).isDataMasked());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChangeInner model = new ChangeInner().withProperties(new ChangeProperties().withResourceId("yypnddhsgcbacphe")
            .withTimestamp(OffsetDateTime.parse("2020-12-30T06:06:44Z"))
            .withInitiatedByList(Arrays.asList("nqgoulzndli", "wyqkgfgibm", "dgak", "qsrxybzqqed"))
            .withChangeType(ChangeType.ADD)
            .withPropertyChanges(Arrays.asList(
                new PropertyChange().withChangeType(ChangeType.REMOVE)
                    .withChangeCategory(ChangeCategory.USER)
                    .withJsonPath("flmmnk")
                    .withDisplayName("modmglougpb")
                    .withLevel(Level.NORMAL)
                    .withDescription("utduqktapspwgcu")
                    .withOldValue("tumkdosvqwhbm")
                    .withNewValue("bbjfddgmbmbexp")
                    .withIsDataMasked(true),
                new PropertyChange().withChangeType(ChangeType.ADD)
                    .withChangeCategory(ChangeCategory.USER)
                    .withJsonPath("lfp")
                    .withDisplayName("s")
                    .withLevel(Level.NOISY)
                    .withDescription("qux")
                    .withOldValue("jyj")
                    .withNewValue("jaoyfhrtx")
                    .withIsDataMasked(false))));
        model = BinaryData.fromObject(model).toObject(ChangeInner.class);
        Assertions.assertEquals("yypnddhsgcbacphe", model.properties().resourceId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-30T06:06:44Z"), model.properties().timestamp());
        Assertions.assertEquals("nqgoulzndli", model.properties().initiatedByList().get(0));
        Assertions.assertEquals(ChangeType.ADD, model.properties().changeType());
        Assertions.assertEquals(ChangeType.REMOVE, model.properties().propertyChanges().get(0).changeType());
        Assertions.assertEquals(ChangeCategory.USER, model.properties().propertyChanges().get(0).changeCategory());
        Assertions.assertEquals("flmmnk", model.properties().propertyChanges().get(0).jsonPath());
        Assertions.assertEquals("modmglougpb", model.properties().propertyChanges().get(0).displayName());
        Assertions.assertEquals(Level.NORMAL, model.properties().propertyChanges().get(0).level());
        Assertions.assertEquals("utduqktapspwgcu", model.properties().propertyChanges().get(0).description());
        Assertions.assertEquals("tumkdosvqwhbm", model.properties().propertyChanges().get(0).oldValue());
        Assertions.assertEquals("bbjfddgmbmbexp", model.properties().propertyChanges().get(0).newValue());
        Assertions.assertEquals(true, model.properties().propertyChanges().get(0).isDataMasked());
    }
}
