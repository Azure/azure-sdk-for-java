// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.changeanalysis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.changeanalysis.models.ChangeCategory;
import com.azure.resourcemanager.changeanalysis.models.ChangeType;
import com.azure.resourcemanager.changeanalysis.models.Level;
import com.azure.resourcemanager.changeanalysis.models.PropertyChange;
import org.junit.jupiter.api.Assertions;

public final class PropertyChangeTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PropertyChange model = BinaryData.fromString(
            "{\"changeType\":\"Update\",\"changeCategory\":\"User\",\"jsonPath\":\"ehzzvypyqrim\",\"displayName\":\"npvswjdkirso\",\"level\":\"Important\",\"description\":\"hc\",\"oldValue\":\"nohjt\",\"newValue\":\"whdsoifiyip\",\"isDataMasked\":false}")
            .toObject(PropertyChange.class);
        Assertions.assertEquals(ChangeType.UPDATE, model.changeType());
        Assertions.assertEquals(ChangeCategory.USER, model.changeCategory());
        Assertions.assertEquals("ehzzvypyqrim", model.jsonPath());
        Assertions.assertEquals("npvswjdkirso", model.displayName());
        Assertions.assertEquals(Level.IMPORTANT, model.level());
        Assertions.assertEquals("hc", model.description());
        Assertions.assertEquals("nohjt", model.oldValue());
        Assertions.assertEquals("whdsoifiyip", model.newValue());
        Assertions.assertEquals(false, model.isDataMasked());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PropertyChange model = new PropertyChange().withChangeType(ChangeType.UPDATE)
            .withChangeCategory(ChangeCategory.USER)
            .withJsonPath("ehzzvypyqrim")
            .withDisplayName("npvswjdkirso")
            .withLevel(Level.IMPORTANT)
            .withDescription("hc")
            .withOldValue("nohjt")
            .withNewValue("whdsoifiyip")
            .withIsDataMasked(false);
        model = BinaryData.fromObject(model).toObject(PropertyChange.class);
        Assertions.assertEquals(ChangeType.UPDATE, model.changeType());
        Assertions.assertEquals(ChangeCategory.USER, model.changeCategory());
        Assertions.assertEquals("ehzzvypyqrim", model.jsonPath());
        Assertions.assertEquals("npvswjdkirso", model.displayName());
        Assertions.assertEquals(Level.IMPORTANT, model.level());
        Assertions.assertEquals("hc", model.description());
        Assertions.assertEquals("nohjt", model.oldValue());
        Assertions.assertEquals("whdsoifiyip", model.newValue());
        Assertions.assertEquals(false, model.isDataMasked());
    }
}
