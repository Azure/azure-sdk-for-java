// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.changeanalysis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.changeanalysis.AzureChangeAnalysisManager;
import com.azure.resourcemanager.changeanalysis.models.Change;
import com.azure.resourcemanager.changeanalysis.models.ChangeCategory;
import com.azure.resourcemanager.changeanalysis.models.ChangeType;
import com.azure.resourcemanager.changeanalysis.models.Level;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceId\":\"w\",\"timeStamp\":\"2021-10-29T01:50:02Z\",\"initiatedByList\":[\"hrzayvvtpgvdf\",\"iotkftutqxl\",\"gxlefgugnxkrxd\"],\"changeType\":\"Remove\",\"propertyChanges\":[{\"changeType\":\"Update\",\"changeCategory\":\"User\",\"jsonPath\":\"qdrabhjybigehoqf\",\"displayName\":\"wska\",\"level\":\"Normal\",\"description\":\"zlcuiywgqywgndrv\",\"oldValue\":\"hzgpphrcgyncocpe\",\"newValue\":\"vmmcoofs\",\"isDataMasked\":false},{\"changeType\":\"Remove\",\"changeCategory\":\"User\",\"jsonPath\":\"qjqabcypmivkwl\",\"displayName\":\"vccfw\",\"level\":\"Normal\",\"description\":\"acfi\",\"oldValue\":\"l\",\"newValue\":\"x\",\"isDataMasked\":false}]},\"id\":\"gtzxdpn\",\"name\":\"bqqwxrj\",\"type\":\"eallnwsubisnj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureChangeAnalysisManager manager = AzureChangeAnalysisManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Change> response = manager.changes()
            .listByResourceGroup("ciwqvhk", OffsetDateTime.parse("2021-03-25T23:46:11Z"),
                OffsetDateTime.parse("2021-01-03T15:56:28Z"), "uigdtopbobjog", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("w", response.iterator().next().properties().resourceId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T01:50:02Z"),
            response.iterator().next().properties().timestamp());
        Assertions.assertEquals("hrzayvvtpgvdf", response.iterator().next().properties().initiatedByList().get(0));
        Assertions.assertEquals(ChangeType.REMOVE, response.iterator().next().properties().changeType());
        Assertions.assertEquals(ChangeType.UPDATE,
            response.iterator().next().properties().propertyChanges().get(0).changeType());
        Assertions.assertEquals(ChangeCategory.USER,
            response.iterator().next().properties().propertyChanges().get(0).changeCategory());
        Assertions.assertEquals("qdrabhjybigehoqf",
            response.iterator().next().properties().propertyChanges().get(0).jsonPath());
        Assertions.assertEquals("wska", response.iterator().next().properties().propertyChanges().get(0).displayName());
        Assertions.assertEquals(Level.NORMAL, response.iterator().next().properties().propertyChanges().get(0).level());
        Assertions.assertEquals("zlcuiywgqywgndrv",
            response.iterator().next().properties().propertyChanges().get(0).description());
        Assertions.assertEquals("hzgpphrcgyncocpe",
            response.iterator().next().properties().propertyChanges().get(0).oldValue());
        Assertions.assertEquals("vmmcoofs",
            response.iterator().next().properties().propertyChanges().get(0).newValue());
        Assertions.assertEquals(false, response.iterator().next().properties().propertyChanges().get(0).isDataMasked());
    }
}
