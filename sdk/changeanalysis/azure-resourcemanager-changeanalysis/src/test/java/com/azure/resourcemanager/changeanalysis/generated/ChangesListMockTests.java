// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.changeanalysis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.changeanalysis.AzureChangeAnalysisManager;
import com.azure.resourcemanager.changeanalysis.models.Change;
import com.azure.resourcemanager.changeanalysis.models.ChangeCategory;
import com.azure.resourcemanager.changeanalysis.models.ChangeType;
import com.azure.resourcemanager.changeanalysis.models.Level;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceId\":\"hcbonqvpkvlr\",\"timeStamp\":\"2021-10-21T12:09:05Z\",\"initiatedByList\":[\"seiphe\"],\"changeType\":\"Add\",\"propertyChanges\":[{\"changeType\":\"Update\",\"changeCategory\":\"System\",\"jsonPath\":\"nj\",\"displayName\":\"lwtgrhpdj\",\"level\":\"Important\",\"description\":\"asxazjpqyegualhb\",\"oldValue\":\"hejjz\",\"newValue\":\"dudgwdslfhot\",\"isDataMasked\":true},{\"changeType\":\"Update\",\"changeCategory\":\"System\",\"jsonPath\":\"bjnpg\",\"displayName\":\"ftadehxnltyfs\",\"level\":\"Noisy\",\"description\":\"suesnzw\",\"oldValue\":\"jbavorxzdm\",\"newValue\":\"ctbqvudwx\",\"isDataMasked\":false}]},\"id\":\"nvowgujju\",\"name\":\"wdkcglhsl\",\"type\":\"zj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureChangeAnalysisManager manager = AzureChangeAnalysisManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Change> response = manager.changes()
            .list(OffsetDateTime.parse("2021-08-17T16:47:22Z"), OffsetDateTime.parse("2021-04-17T10:50:22Z"),
                "mngnzscxaqw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hcbonqvpkvlr", response.iterator().next().properties().resourceId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-21T12:09:05Z"),
            response.iterator().next().properties().timestamp());
        Assertions.assertEquals("seiphe", response.iterator().next().properties().initiatedByList().get(0));
        Assertions.assertEquals(ChangeType.ADD, response.iterator().next().properties().changeType());
        Assertions.assertEquals(ChangeType.UPDATE,
            response.iterator().next().properties().propertyChanges().get(0).changeType());
        Assertions.assertEquals(ChangeCategory.SYSTEM,
            response.iterator().next().properties().propertyChanges().get(0).changeCategory());
        Assertions.assertEquals("nj", response.iterator().next().properties().propertyChanges().get(0).jsonPath());
        Assertions.assertEquals("lwtgrhpdj",
            response.iterator().next().properties().propertyChanges().get(0).displayName());
        Assertions.assertEquals(Level.IMPORTANT,
            response.iterator().next().properties().propertyChanges().get(0).level());
        Assertions.assertEquals("asxazjpqyegualhb",
            response.iterator().next().properties().propertyChanges().get(0).description());
        Assertions.assertEquals("hejjz", response.iterator().next().properties().propertyChanges().get(0).oldValue());
        Assertions.assertEquals("dudgwdslfhot",
            response.iterator().next().properties().propertyChanges().get(0).newValue());
        Assertions.assertEquals(true, response.iterator().next().properties().propertyChanges().get(0).isDataMasked());
    }
}
