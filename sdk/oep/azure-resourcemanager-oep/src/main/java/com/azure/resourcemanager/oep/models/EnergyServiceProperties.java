// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oep.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The EnergyServiceProperties model.
 */
@Fluent
public final class EnergyServiceProperties implements JsonSerializable<EnergyServiceProperties> {
    /*
     * The dnsName property.
     */
    private String dnsName;

    /*
     * The provisioningState property.
     */
    private ProvisioningState provisioningState;

    /*
     * The authAppId property.
     */
    private String authAppId;

    /*
     * The dataPartitionNames property.
     */
    private List<DataPartitionNames> dataPartitionNames;

    /**
     * Creates an instance of EnergyServiceProperties class.
     */
    public EnergyServiceProperties() {
    }

    /**
     * Get the dnsName property: The dnsName property.
     * 
     * @return the dnsName value.
     */
    public String dnsName() {
        return this.dnsName;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the authAppId property: The authAppId property.
     * 
     * @return the authAppId value.
     */
    public String authAppId() {
        return this.authAppId;
    }

    /**
     * Set the authAppId property: The authAppId property.
     * 
     * @param authAppId the authAppId value to set.
     * @return the EnergyServiceProperties object itself.
     */
    public EnergyServiceProperties withAuthAppId(String authAppId) {
        this.authAppId = authAppId;
        return this;
    }

    /**
     * Get the dataPartitionNames property: The dataPartitionNames property.
     * 
     * @return the dataPartitionNames value.
     */
    public List<DataPartitionNames> dataPartitionNames() {
        return this.dataPartitionNames;
    }

    /**
     * Set the dataPartitionNames property: The dataPartitionNames property.
     * 
     * @param dataPartitionNames the dataPartitionNames value to set.
     * @return the EnergyServiceProperties object itself.
     */
    public EnergyServiceProperties withDataPartitionNames(List<DataPartitionNames> dataPartitionNames) {
        this.dataPartitionNames = dataPartitionNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataPartitionNames() != null) {
            dataPartitionNames().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authAppId", this.authAppId);
        jsonWriter.writeArrayField("dataPartitionNames", this.dataPartitionNames,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnergyServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnergyServiceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnergyServiceProperties.
     */
    public static EnergyServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnergyServiceProperties deserializedEnergyServiceProperties = new EnergyServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dnsName".equals(fieldName)) {
                    deserializedEnergyServiceProperties.dnsName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEnergyServiceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("authAppId".equals(fieldName)) {
                    deserializedEnergyServiceProperties.authAppId = reader.getString();
                } else if ("dataPartitionNames".equals(fieldName)) {
                    List<DataPartitionNames> dataPartitionNames
                        = reader.readArray(reader1 -> DataPartitionNames.fromJson(reader1));
                    deserializedEnergyServiceProperties.dataPartitionNames = dataPartitionNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnergyServiceProperties;
        });
    }
}
