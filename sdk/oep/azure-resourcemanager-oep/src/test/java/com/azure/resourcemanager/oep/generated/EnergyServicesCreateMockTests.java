// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oep.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oep.OepManager;
import com.azure.resourcemanager.oep.models.DataPartitionNames;
import com.azure.resourcemanager.oep.models.EnergyService;
import com.azure.resourcemanager.oep.models.EnergyServiceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EnergyServicesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"dnsName\":\"aop\",\"provisioningState\":\"Succeeded\",\"authAppId\":\"jcmmxdcufufsrp\",\"dataPartitionNames\":[{\"name\":\"dnsezcxtbzs\"},{\"name\":\"yc\"},{\"name\":\"newmdwzjeiachbo\"},{\"name\":\"flnrosfqpteehzz\"}]},\"tags\":{\"vswjdk\":\"yqrimzin\"},\"location\":\"rsoodqxhcrmnoh\",\"id\":\"ckwhds\",\"name\":\"ifiyipjxsqwpgrj\",\"type\":\"znorcj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OepManager manager = OepManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        EnergyService response = manager.energyServices()
            .define("bexppb")
            .withRegion("x")
            .withExistingResourceGroup("dgmb")
            .withTags(mapOf("dnrujqguhmuouqfp", "jvtbvpyss", "uizga", "wzwbnguitn"))
            .withProperties(new EnergyServiceProperties().withAuthAppId("gbquxigj")
                .withDataPartitionNames(Arrays.asList(new DataPartitionNames().withName("jaoyfhrtx"),
                    new DataPartitionNames().withName("n"), new DataPartitionNames().withName("kujysvlejuvfq"),
                    new DataPartitionNames().withName("rlyxwjkcprbnw"))))
            .create();

        Assertions.assertEquals("jcmmxdcufufsrp", response.properties().authAppId());
        Assertions.assertEquals("dnsezcxtbzs", response.properties().dataPartitionNames().get(0).name());
        Assertions.assertEquals("yqrimzin", response.tags().get("vswjdk"));
        Assertions.assertEquals("rsoodqxhcrmnoh", response.location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
