// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oep.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oep.fluent.models.EnergyServiceInner;
import com.azure.resourcemanager.oep.models.DataPartitionNames;
import com.azure.resourcemanager.oep.models.EnergyServiceList;
import com.azure.resourcemanager.oep.models.EnergyServiceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnergyServiceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnergyServiceList model = BinaryData.fromString(
            "{\"nextLink\":\"ycm\",\"value\":[{\"properties\":{\"dnsName\":\"hdxbmtqio\",\"provisioningState\":\"Deleting\",\"authAppId\":\"htbmuf\",\"dataPartitionNames\":[{\"name\":\"oizh\"}]},\"tags\":{\"k\":\"xybqsoqij\",\"btcqq\":\"mbpazlobcufpdzn\"},\"location\":\"nq\",\"id\":\"hqgnufooojywif\",\"name\":\"qes\",\"type\":\"agdfmglzlh\"}]}")
            .toObject(EnergyServiceList.class);
        Assertions.assertEquals("ycm", model.nextLink());
        Assertions.assertEquals("htbmuf", model.value().get(0).properties().authAppId());
        Assertions.assertEquals("oizh", model.value().get(0).properties().dataPartitionNames().get(0).name());
        Assertions.assertEquals("xybqsoqij", model.value().get(0).tags().get("k"));
        Assertions.assertEquals("nq", model.value().get(0).location());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnergyServiceList model = new EnergyServiceList().withNextLink("ycm")
            .withValue(Arrays.asList(new EnergyServiceInner()
                .withProperties(new EnergyServiceProperties().withAuthAppId("htbmuf")
                    .withDataPartitionNames(Arrays.asList(new DataPartitionNames().withName("oizh"))))
                .withTags(mapOf("k", "xybqsoqij", "btcqq", "mbpazlobcufpdzn"))
                .withLocation("nq")));
        model = BinaryData.fromObject(model).toObject(EnergyServiceList.class);
        Assertions.assertEquals("ycm", model.nextLink());
        Assertions.assertEquals("htbmuf", model.value().get(0).properties().authAppId());
        Assertions.assertEquals("oizh", model.value().get(0).properties().dataPartitionNames().get(0).name());
        Assertions.assertEquals("xybqsoqij", model.value().get(0).tags().get("k"));
        Assertions.assertEquals("nq", model.value().get(0).location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
