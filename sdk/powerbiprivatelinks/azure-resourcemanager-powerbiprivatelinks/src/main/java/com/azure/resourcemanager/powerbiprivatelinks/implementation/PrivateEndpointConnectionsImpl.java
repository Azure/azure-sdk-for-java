// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbiprivatelinks.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.PrivateEndpointConnectionsClient;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.powerbiprivatelinks.models.PrivateEndpointConnection;
import com.azure.resourcemanager.powerbiprivatelinks.models.PrivateEndpointConnections;

public final class PrivateEndpointConnectionsImpl implements PrivateEndpointConnections {
    private static final ClientLogger LOGGER = new ClientLogger(PrivateEndpointConnectionsImpl.class);

    private final PrivateEndpointConnectionsClient innerClient;

    private final com.azure.resourcemanager.powerbiprivatelinks.PrivateLinkServicesForPowerBIManager serviceManager;

    public PrivateEndpointConnectionsImpl(
        PrivateEndpointConnectionsClient innerClient,
        com.azure.resourcemanager.powerbiprivatelinks.PrivateLinkServicesForPowerBIManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PrivateEndpointConnection> listByResource(String resourceGroupName, String azureResourceName) {
        PagedIterable<PrivateEndpointConnectionInner> inner =
            this.serviceClient().listByResource(resourceGroupName, azureResourceName);
        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateEndpointConnection> listByResource(
        String resourceGroupName, String azureResourceName, Context context) {
        PagedIterable<PrivateEndpointConnectionInner> inner =
            this.serviceClient().listByResource(resourceGroupName, azureResourceName, context);
        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public Response<PrivateEndpointConnection> getWithResponse(
        String resourceGroupName, String azureResourceName, String privateEndpointName, Context context) {
        Response<PrivateEndpointConnectionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, azureResourceName, privateEndpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateEndpointConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateEndpointConnection get(
        String resourceGroupName, String azureResourceName, String privateEndpointName) {
        PrivateEndpointConnectionInner inner =
            this.serviceClient().get(resourceGroupName, azureResourceName, privateEndpointName);
        if (inner != null) {
            return new PrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String azureResourceName, String privateEndpointName) {
        this.serviceClient().delete(resourceGroupName, azureResourceName, privateEndpointName);
    }

    public void delete(
        String resourceGroupName, String azureResourceName, String privateEndpointName, Context context) {
        this.serviceClient().delete(resourceGroupName, azureResourceName, privateEndpointName, context);
    }

    public PrivateEndpointConnection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureResourceName = Utils.getValueFromIdByName(id, "privateLinkServicesForPowerBI");
        if (azureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateLinkServicesForPowerBI'.",
                                id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, azureResourceName, privateEndpointName, Context.NONE).getValue();
    }

    public Response<PrivateEndpointConnection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureResourceName = Utils.getValueFromIdByName(id, "privateLinkServicesForPowerBI");
        if (azureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateLinkServicesForPowerBI'.",
                                id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, azureResourceName, privateEndpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureResourceName = Utils.getValueFromIdByName(id, "privateLinkServicesForPowerBI");
        if (azureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateLinkServicesForPowerBI'.",
                                id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.",
                                id)));
        }
        this.delete(resourceGroupName, azureResourceName, privateEndpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureResourceName = Utils.getValueFromIdByName(id, "privateLinkServicesForPowerBI");
        if (azureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateLinkServicesForPowerBI'.",
                                id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.",
                                id)));
        }
        this.delete(resourceGroupName, azureResourceName, privateEndpointName, context);
    }

    private PrivateEndpointConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.powerbiprivatelinks.PrivateLinkServicesForPowerBIManager manager() {
        return this.serviceManager;
    }

    public PrivateEndpointConnectionImpl define(String name) {
        return new PrivateEndpointConnectionImpl(name, this.manager());
    }
}
