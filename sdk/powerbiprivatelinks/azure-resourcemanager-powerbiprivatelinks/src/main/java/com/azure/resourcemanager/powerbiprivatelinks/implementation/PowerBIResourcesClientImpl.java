// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbiprivatelinks.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.PowerBIResourcesClient;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.models.TenantResourceInner;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PowerBIResourcesClient. */
public final class PowerBIResourcesClientImpl implements PowerBIResourcesClient {
    /** The proxy service used to perform REST calls. */
    private final PowerBIResourcesService service;

    /** The service client containing this operation class. */
    private final PrivateLinkServicesForPowerBIClientImpl client;

    /**
     * Initializes an instance of PowerBIResourcesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PowerBIResourcesClientImpl(PrivateLinkServicesForPowerBIClientImpl client) {
        this.service =
            RestProxy.create(PowerBIResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PrivateLinkServicesForPowerBIClientPowerBIResources to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PrivateLinkServicesF")
    public interface PowerBIResourcesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/{azureResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<TenantResourceInner>>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureResourceName") String azureResourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/{azureResourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantResourceInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureResourceName") String azureResourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("x-ms-client-tenant-id") String clientTenantId,
            @BodyParam("application/json") TenantResourceInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/{azureResourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantResourceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureResourceName") String azureResourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("x-ms-client-tenant-id") String clientTenantId,
            @BodyParam("application/json") TenantResourceInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/{azureResourceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureResourceName") String azureResourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets all the private link resources for the given Azure resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the private link resources for the given Azure resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<TenantResourceInner>>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String azureResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureResourceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all the private link resources for the given Azure resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the private link resources for the given Azure resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<TenantResourceInner>>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String azureResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureResourceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets all the private link resources for the given Azure resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the private link resources for the given Azure resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<TenantResourceInner>> getByResourceGroupAsync(
        String resourceGroupName, String azureResourceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, azureResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets all the private link resources for the given Azure resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the private link resources for the given Azure resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<TenantResourceInner>> getByResourceGroupWithResponse(
        String resourceGroupName, String azureResourceName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, azureResourceName, context).block();
    }

    /**
     * Gets all the private link resources for the given Azure resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the private link resources for the given Azure resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<TenantResourceInner> getByResourceGroup(String resourceGroupName, String azureResourceName) {
        return getByResourceGroupWithResponse(resourceGroupName, azureResourceName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @param clientTenantId The client tenant id in header. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantResourceInner>> createWithResponseAsync(
        String resourceGroupName, String azureResourceName, TenantResourceInner body, String clientTenantId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureResourceName,
                            this.client.getApiVersion(),
                            clientTenantId,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @param clientTenantId The client tenant id in header. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String azureResourceName,
        TenantResourceInner body,
        String clientTenantId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureResourceName,
                this.client.getApiVersion(),
                clientTenantId,
                body,
                accept,
                context);
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantResourceInner> createAsync(
        String resourceGroupName, String azureResourceName, TenantResourceInner body) {
        final String clientTenantId = null;
        return createWithResponseAsync(resourceGroupName, azureResourceName, body, clientTenantId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @param clientTenantId The client tenant id in header. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantResourceInner> createWithResponse(
        String resourceGroupName,
        String azureResourceName,
        TenantResourceInner body,
        String clientTenantId,
        Context context) {
        return createWithResponseAsync(resourceGroupName, azureResourceName, body, clientTenantId, context).block();
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantResourceInner create(String resourceGroupName, String azureResourceName, TenantResourceInner body) {
        final String clientTenantId = null;
        return createWithResponse(resourceGroupName, azureResourceName, body, clientTenantId, Context.NONE).getValue();
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @param clientTenantId The client tenant id in header. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantResourceInner>> updateWithResponseAsync(
        String resourceGroupName, String azureResourceName, TenantResourceInner body, String clientTenantId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureResourceName,
                            this.client.getApiVersion(),
                            clientTenantId,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @param clientTenantId The client tenant id in header. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String azureResourceName,
        TenantResourceInner body,
        String clientTenantId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureResourceName,
                this.client.getApiVersion(),
                clientTenantId,
                body,
                accept,
                context);
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantResourceInner> updateAsync(
        String resourceGroupName, String azureResourceName, TenantResourceInner body) {
        final String clientTenantId = null;
        return updateWithResponseAsync(resourceGroupName, azureResourceName, body, clientTenantId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @param clientTenantId The client tenant id in header. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantResourceInner> updateWithResponse(
        String resourceGroupName,
        String azureResourceName,
        TenantResourceInner body,
        String clientTenantId,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, azureResourceName, body, clientTenantId, context).block();
    }

    /**
     * Creates or updates a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param body Tenant resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenantResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantResourceInner update(String resourceGroupName, String azureResourceName, TenantResourceInner body) {
        final String clientTenantId = null;
        return updateWithResponse(resourceGroupName, azureResourceName, body, clientTenantId, Context.NONE).getValue();
    }

    /**
     * Deletes a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String azureResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureResourceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String azureResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter azureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureResourceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String azureResourceName) {
        return deleteWithResponseAsync(resourceGroupName, azureResourceName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String azureResourceName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, azureResourceName, context).block();
    }

    /**
     * Deletes a Private Link Service Resource for Power BI.
     *
     * @param resourceGroupName The name of the resource group.
     * @param azureResourceName The name of the Azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String azureResourceName) {
        deleteWithResponse(resourceGroupName, azureResourceName, Context.NONE);
    }
}
