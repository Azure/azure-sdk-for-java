// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbiprivatelinks.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.PrivateLinkServiceResourceOperationResultsClient;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.models.AsyncOperationDetailInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * PrivateLinkServiceResourceOperationResultsClient.
 */
public final class PrivateLinkServiceResourceOperationResultsClientImpl
    implements PrivateLinkServiceResourceOperationResultsClient {
    /** The proxy service used to perform REST calls. */
    private final PrivateLinkServiceResourceOperationResultsService service;

    /** The service client containing this operation class. */
    private final PrivateLinkServicesForPowerBIClientImpl client;

    /**
     * Initializes an instance of PrivateLinkServiceResourceOperationResultsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PrivateLinkServiceResourceOperationResultsClientImpl(PrivateLinkServicesForPowerBIClientImpl client) {
        this.service =
            RestProxy
                .create(
                    PrivateLinkServiceResourceOperationResultsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * PrivateLinkServicesForPowerBIClientPrivateLinkServiceResourceOperationResults to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PrivateLinkServicesF")
    public interface PrivateLinkServiceResourceOperationResultsService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.PowerBI/operationResults/{operationId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("operationId") String operationId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation result of Private Link Service Resources for Power BI along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> getWithResponseAsync(String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            operationId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation result of Private Link Service Resources for Power BI along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> getWithResponseAsync(String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                operationId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of operation result of Private Link Service Resources for Power BI.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AsyncOperationDetailInner>, AsyncOperationDetailInner> beginGetAsync(
        String operationId) {
        Mono<Response<Flux<ByteBuffer>>> mono = getWithResponseAsync(operationId);
        return this
            .client
            .<AsyncOperationDetailInner, AsyncOperationDetailInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AsyncOperationDetailInner.class,
                AsyncOperationDetailInner.class,
                this.client.getContext());
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of operation result of Private Link Service Resources for Power BI.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AsyncOperationDetailInner>, AsyncOperationDetailInner> beginGetAsync(
        String operationId, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = getWithResponseAsync(operationId, context);
        return this
            .client
            .<AsyncOperationDetailInner, AsyncOperationDetailInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AsyncOperationDetailInner.class,
                AsyncOperationDetailInner.class,
                context);
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of operation result of Private Link Service Resources for Power BI.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AsyncOperationDetailInner>, AsyncOperationDetailInner> beginGet(String operationId) {
        return this.beginGetAsync(operationId).getSyncPoller();
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of operation result of Private Link Service Resources for Power BI.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AsyncOperationDetailInner>, AsyncOperationDetailInner> beginGet(
        String operationId, Context context) {
        return this.beginGetAsync(operationId, context).getSyncPoller();
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation result of Private Link Service Resources for Power BI on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AsyncOperationDetailInner> getAsync(String operationId) {
        return beginGetAsync(operationId).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation result of Private Link Service Resources for Power BI on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AsyncOperationDetailInner> getAsync(String operationId, Context context) {
        return beginGetAsync(operationId, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation result of Private Link Service Resources for Power BI.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AsyncOperationDetailInner get(String operationId) {
        return getAsync(operationId).block();
    }

    /**
     * Gets operation result of Private Link Service Resources for Power BI.
     *
     * @param operationId The id of Azure async operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation result of Private Link Service Resources for Power BI.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AsyncOperationDetailInner get(String operationId, Context context) {
        return getAsync(operationId, context).block();
    }
}
