// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbiprivatelinks.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.models.PrivateLinkResourceInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** PrivateLinkResourcesListResult Specifies list of the private link resource. */
@Fluent
public final class PrivateLinkResourcesListResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PrivateLinkResourcesListResult.class);

    /*
     * A collection of private endpoint connection resources.
     */
    @JsonProperty(value = "value")
    private List<PrivateLinkResourceInner> value;

    /*
     * URL to get the next set of operation list results (if there are any).
     */
    @JsonProperty(value = "nextLink", access = JsonProperty.Access.WRITE_ONLY)
    private String nextLink;

    /**
     * Get the value property: A collection of private endpoint connection resources.
     *
     * @return the value value.
     */
    public List<PrivateLinkResourceInner> value() {
        return this.value;
    }

    /**
     * Set the value property: A collection of private endpoint connection resources.
     *
     * @param value the value value to set.
     * @return the PrivateLinkResourcesListResult object itself.
     */
    public PrivateLinkResourcesListResult withValue(List<PrivateLinkResourceInner> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the nextLink property: URL to get the next set of operation list results (if there are any).
     *
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }
}
