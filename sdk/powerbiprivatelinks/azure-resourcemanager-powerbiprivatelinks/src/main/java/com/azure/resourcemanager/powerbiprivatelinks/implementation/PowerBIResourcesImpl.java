// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbiprivatelinks.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.PowerBIResourcesClient;
import com.azure.resourcemanager.powerbiprivatelinks.fluent.models.TenantResourceInner;
import com.azure.resourcemanager.powerbiprivatelinks.models.PowerBIResources;
import com.azure.resourcemanager.powerbiprivatelinks.models.TenantResource;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class PowerBIResourcesImpl implements PowerBIResources {
    private static final ClientLogger LOGGER = new ClientLogger(PowerBIResourcesImpl.class);

    private final PowerBIResourcesClient innerClient;

    private final com.azure.resourcemanager.powerbiprivatelinks.PrivateLinkServicesForPowerBIManager serviceManager;

    public PowerBIResourcesImpl(
        PowerBIResourcesClient innerClient,
        com.azure.resourcemanager.powerbiprivatelinks.PrivateLinkServicesForPowerBIManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<List<TenantResource>> getByResourceGroupWithResponse(
        String resourceGroupName, String azureResourceName, Context context) {
        Response<List<TenantResourceInner>> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, azureResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new TenantResourceImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<TenantResource> getByResourceGroup(String resourceGroupName, String azureResourceName) {
        List<TenantResourceInner> inner = this.serviceClient().getByResourceGroup(resourceGroupName, azureResourceName);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new TenantResourceImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String azureResourceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, azureResourceName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String azureResourceName) {
        this.serviceClient().delete(resourceGroupName, azureResourceName);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureResourceName = Utils.getValueFromIdByName(id, "privateLinkServicesForPowerBI");
        if (azureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateLinkServicesForPowerBI'.",
                                id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, azureResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureResourceName = Utils.getValueFromIdByName(id, "privateLinkServicesForPowerBI");
        if (azureResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateLinkServicesForPowerBI'.",
                                id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, azureResourceName, context);
    }

    private PowerBIResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.powerbiprivatelinks.PrivateLinkServicesForPowerBIManager manager() {
        return this.serviceManager;
    }

    public TenantResourceImpl define(String name) {
        return new TenantResourceImpl(name, this.manager());
    }
}
