// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.durabletask.models.SchedulerPropertiesUpdate;
import com.azure.resourcemanager.durabletask.models.SchedulerSkuUpdate;
import com.azure.resourcemanager.durabletask.models.SchedulerUpdate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SchedulerUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SchedulerUpdate model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Provisioning\",\"endpoint\":\"scmdvpjhulsuu\",\"ipAllowlist\":[\"jozkrwfndiod\",\"pslwejdpvw\",\"yoqpsoaccta\"],\"sku\":{\"name\":\"ljlahbcryf\",\"capacity\":1389039399,\"redundancyState\":\"None\"}},\"tags\":{\"hcrzevd\":\"gexpaojakhmsbz\",\"qjbpfzfsin\":\"hlxaolthqtr\",\"wzo\":\"gvfcj\",\"np\":\"xjtfelluwfzit\"}}")
            .toObject(SchedulerUpdate.class);
        Assertions.assertEquals("jozkrwfndiod", model.properties().ipAllowlist().get(0));
        Assertions.assertEquals("ljlahbcryf", model.properties().sku().name());
        Assertions.assertEquals(1389039399, model.properties().sku().capacity());
        Assertions.assertEquals("gexpaojakhmsbz", model.tags().get("hcrzevd"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SchedulerUpdate model = new SchedulerUpdate()
            .withProperties(new SchedulerPropertiesUpdate()
                .withIpAllowlist(Arrays.asList("jozkrwfndiod", "pslwejdpvw", "yoqpsoaccta"))
                .withSku(new SchedulerSkuUpdate().withName("ljlahbcryf").withCapacity(1389039399)))
            .withTags(
                mapOf("hcrzevd", "gexpaojakhmsbz", "qjbpfzfsin", "hlxaolthqtr", "wzo", "gvfcj", "np", "xjtfelluwfzit"));
        model = BinaryData.fromObject(model).toObject(SchedulerUpdate.class);
        Assertions.assertEquals("jozkrwfndiod", model.properties().ipAllowlist().get(0));
        Assertions.assertEquals("ljlahbcryf", model.properties().sku().name());
        Assertions.assertEquals(1389039399, model.properties().sku().capacity());
        Assertions.assertEquals("gexpaojakhmsbz", model.tags().get("hcrzevd"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
