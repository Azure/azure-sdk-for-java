// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.durabletask.fluent.models.SchedulerInner;
import com.azure.resourcemanager.durabletask.models.SchedulerProperties;
import com.azure.resourcemanager.durabletask.models.SchedulerSku;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SchedulerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SchedulerInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"endpoint\":\"pzvgnwzsymglzufc\",\"ipAllowlist\":[\"kohdbiha\"],\"sku\":{\"name\":\"ufhfcbjysa\",\"capacity\":437058664,\"redundancyState\":\"None\"}},\"location\":\"hab\",\"tags\":{\"byscnp\":\"ikxwc\",\"hiv\":\"x\",\"rtfw\":\"qniwbybrkxvdumj\",\"cs\":\"ukxgaud\"},\"id\":\"h\",\"name\":\"jcny\",\"type\":\"j\"}")
            .toObject(SchedulerInner.class);
        Assertions.assertEquals("hab", model.location());
        Assertions.assertEquals("ikxwc", model.tags().get("byscnp"));
        Assertions.assertEquals("kohdbiha", model.properties().ipAllowlist().get(0));
        Assertions.assertEquals("ufhfcbjysa", model.properties().sku().name());
        Assertions.assertEquals(437058664, model.properties().sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SchedulerInner model = new SchedulerInner().withLocation("hab")
            .withTags(mapOf("byscnp", "ikxwc", "hiv", "x", "rtfw", "qniwbybrkxvdumj", "cs", "ukxgaud"))
            .withProperties(new SchedulerProperties().withIpAllowlist(Arrays.asList("kohdbiha"))
                .withSku(new SchedulerSku().withName("ufhfcbjysa").withCapacity(437058664)));
        model = BinaryData.fromObject(model).toObject(SchedulerInner.class);
        Assertions.assertEquals("hab", model.location());
        Assertions.assertEquals("ikxwc", model.tags().get("byscnp"));
        Assertions.assertEquals("kohdbiha", model.properties().ipAllowlist().get(0));
        Assertions.assertEquals("ufhfcbjysa", model.properties().sku().name());
        Assertions.assertEquals(437058664, model.properties().sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
