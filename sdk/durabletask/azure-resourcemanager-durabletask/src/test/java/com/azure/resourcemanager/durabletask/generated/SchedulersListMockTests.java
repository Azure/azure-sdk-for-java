// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.durabletask.DurableTaskManager;
import com.azure.resourcemanager.durabletask.models.Scheduler;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Updating\",\"endpoint\":\"bkbfkgukdkex\",\"ipAllowlist\":[\"pofm\",\"axcfjpgddtocjjx\",\"vpmouexhdzxib\",\"eojnxqbzvddn\"],\"sku\":{\"name\":\"wndeicbtwnp\",\"capacity\":1464431072,\"redundancyState\":\"Zone\"}},\"location\":\"hrhcffcyddglmjth\",\"tags\":{\"hix\":\"wpyeicxmqciwqvh\"},\"id\":\"igdtopbob\",\"name\":\"og\",\"type\":\"m\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DurableTaskManager manager = DurableTaskManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Scheduler> response = manager.schedulers().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hrhcffcyddglmjth", response.iterator().next().location());
        Assertions.assertEquals("wpyeicxmqciwqvh", response.iterator().next().tags().get("hix"));
        Assertions.assertEquals("pofm", response.iterator().next().properties().ipAllowlist().get(0));
        Assertions.assertEquals("wndeicbtwnp", response.iterator().next().properties().sku().name());
        Assertions.assertEquals(1464431072, response.iterator().next().properties().sku().capacity());
    }
}
