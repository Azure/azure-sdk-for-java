// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.durabletask.fluent.SchedulersClient;
import com.azure.resourcemanager.durabletask.fluent.models.SchedulerInner;
import com.azure.resourcemanager.durabletask.models.Scheduler;
import com.azure.resourcemanager.durabletask.models.Schedulers;

public final class SchedulersImpl implements Schedulers {
    private static final ClientLogger LOGGER = new ClientLogger(SchedulersImpl.class);

    private final SchedulersClient innerClient;

    private final com.azure.resourcemanager.durabletask.DurableTaskManager serviceManager;

    public SchedulersImpl(SchedulersClient innerClient,
        com.azure.resourcemanager.durabletask.DurableTaskManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Scheduler> getByResourceGroupWithResponse(String resourceGroupName, String schedulerName,
        Context context) {
        Response<SchedulerInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, schedulerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SchedulerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Scheduler getByResourceGroup(String resourceGroupName, String schedulerName) {
        SchedulerInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, schedulerName);
        if (inner != null) {
            return new SchedulerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String schedulerName) {
        this.serviceClient().delete(resourceGroupName, schedulerName);
    }

    public void delete(String resourceGroupName, String schedulerName, Context context) {
        this.serviceClient().delete(resourceGroupName, schedulerName, context);
    }

    public PagedIterable<Scheduler> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SchedulerInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchedulerImpl(inner1, this.manager()));
    }

    public PagedIterable<Scheduler> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SchedulerInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchedulerImpl(inner1, this.manager()));
    }

    public PagedIterable<Scheduler> list() {
        PagedIterable<SchedulerInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchedulerImpl(inner1, this.manager()));
    }

    public PagedIterable<Scheduler> list(Context context) {
        PagedIterable<SchedulerInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchedulerImpl(inner1, this.manager()));
    }

    public Scheduler getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schedulerName = ResourceManagerUtils.getValueFromIdByName(id, "schedulers");
        if (schedulerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schedulers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, schedulerName, Context.NONE).getValue();
    }

    public Response<Scheduler> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schedulerName = ResourceManagerUtils.getValueFromIdByName(id, "schedulers");
        if (schedulerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schedulers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, schedulerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schedulerName = ResourceManagerUtils.getValueFromIdByName(id, "schedulers");
        if (schedulerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schedulers'.", id)));
        }
        this.delete(resourceGroupName, schedulerName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schedulerName = ResourceManagerUtils.getValueFromIdByName(id, "schedulers");
        if (schedulerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schedulers'.", id)));
        }
        this.delete(resourceGroupName, schedulerName, context);
    }

    private SchedulersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.durabletask.DurableTaskManager manager() {
        return this.serviceManager;
    }

    public SchedulerImpl define(String name) {
        return new SchedulerImpl(name, this.manager());
    }
}
