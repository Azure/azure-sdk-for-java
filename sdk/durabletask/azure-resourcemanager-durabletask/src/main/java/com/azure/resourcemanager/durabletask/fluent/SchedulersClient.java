// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.durabletask.fluent.models.SchedulerInner;
import com.azure.resourcemanager.durabletask.models.SchedulerUpdate;

/**
 * An instance of this class provides access to all the operations defined in SchedulersClient.
 */
public interface SchedulersClient {
    /**
     * Get a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Scheduler along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SchedulerInner> getByResourceGroupWithResponse(String resourceGroupName, String schedulerName,
        Context context);

    /**
     * Get a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Scheduler.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SchedulerInner getByResourceGroup(String resourceGroupName, String schedulerName);

    /**
     * Create or update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SchedulerInner>, SchedulerInner> beginCreateOrUpdate(String resourceGroupName,
        String schedulerName, SchedulerInner resource);

    /**
     * Create or update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SchedulerInner>, SchedulerInner> beginCreateOrUpdate(String resourceGroupName,
        String schedulerName, SchedulerInner resource, Context context);

    /**
     * Create or update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SchedulerInner createOrUpdate(String resourceGroupName, String schedulerName, SchedulerInner resource);

    /**
     * Create or update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SchedulerInner createOrUpdate(String resourceGroupName, String schedulerName, SchedulerInner resource,
        Context context);

    /**
     * Update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SchedulerInner>, SchedulerInner> beginUpdate(String resourceGroupName, String schedulerName,
        SchedulerUpdate properties);

    /**
     * Update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SchedulerInner>, SchedulerInner> beginUpdate(String resourceGroupName, String schedulerName,
        SchedulerUpdate properties, Context context);

    /**
     * Update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SchedulerInner update(String resourceGroupName, String schedulerName, SchedulerUpdate properties);

    /**
     * Update a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Durable Task Scheduler resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SchedulerInner update(String resourceGroupName, String schedulerName, SchedulerUpdate properties, Context context);

    /**
     * Delete a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String schedulerName);

    /**
     * Delete a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String schedulerName, Context context);

    /**
     * Delete a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String schedulerName);

    /**
     * Delete a Scheduler.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String schedulerName, Context context);

    /**
     * List Schedulers by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Scheduler list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SchedulerInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Schedulers by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Scheduler list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SchedulerInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List Schedulers by subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Scheduler list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SchedulerInner> list();

    /**
     * List Schedulers by subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Scheduler list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SchedulerInner> list(Context context);
}
