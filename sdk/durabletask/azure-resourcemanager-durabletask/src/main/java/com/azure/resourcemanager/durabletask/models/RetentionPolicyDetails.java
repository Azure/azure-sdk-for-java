// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a retention policy.
 */
@Fluent
public final class RetentionPolicyDetails implements JsonSerializable<RetentionPolicyDetails> {
    /*
     * The retention period in days after which the orchestration will be purged automatically
     */
    @Generated
    private int retentionPeriodInDays;

    /*
     * The orchestration state to which this policy applies. If omitted, the policy applies to all purgeable
     * orchestration states.
     */
    @Generated
    private PurgeableOrchestrationState orchestrationState;

    /**
     * Creates an instance of RetentionPolicyDetails class.
     */
    @Generated
    public RetentionPolicyDetails() {
    }

    /**
     * Get the retentionPeriodInDays property: The retention period in days after which the orchestration will be purged
     * automatically.
     * 
     * @return the retentionPeriodInDays value.
     */
    @Generated
    public int retentionPeriodInDays() {
        return this.retentionPeriodInDays;
    }

    /**
     * Set the retentionPeriodInDays property: The retention period in days after which the orchestration will be purged
     * automatically.
     * 
     * @param retentionPeriodInDays the retentionPeriodInDays value to set.
     * @return the RetentionPolicyDetails object itself.
     */
    @Generated
    public RetentionPolicyDetails withRetentionPeriodInDays(int retentionPeriodInDays) {
        this.retentionPeriodInDays = retentionPeriodInDays;
        return this;
    }

    /**
     * Get the orchestrationState property: The orchestration state to which this policy applies. If omitted, the policy
     * applies to all purgeable orchestration states.
     * 
     * @return the orchestrationState value.
     */
    @Generated
    public PurgeableOrchestrationState orchestrationState() {
        return this.orchestrationState;
    }

    /**
     * Set the orchestrationState property: The orchestration state to which this policy applies. If omitted, the policy
     * applies to all purgeable orchestration states.
     * 
     * @param orchestrationState the orchestrationState value to set.
     * @return the RetentionPolicyDetails object itself.
     */
    @Generated
    public RetentionPolicyDetails withOrchestrationState(PurgeableOrchestrationState orchestrationState) {
        this.orchestrationState = orchestrationState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("retentionPeriodInDays", this.retentionPeriodInDays);
        jsonWriter.writeStringField("orchestrationState",
            this.orchestrationState == null ? null : this.orchestrationState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RetentionPolicyDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RetentionPolicyDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RetentionPolicyDetails.
     */
    public static RetentionPolicyDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RetentionPolicyDetails deserializedRetentionPolicyDetails = new RetentionPolicyDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionPeriodInDays".equals(fieldName)) {
                    deserializedRetentionPolicyDetails.retentionPeriodInDays = reader.getInt();
                } else if ("orchestrationState".equals(fieldName)) {
                    deserializedRetentionPolicyDetails.orchestrationState
                        = PurgeableOrchestrationState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRetentionPolicyDetails;
        });
    }
}
