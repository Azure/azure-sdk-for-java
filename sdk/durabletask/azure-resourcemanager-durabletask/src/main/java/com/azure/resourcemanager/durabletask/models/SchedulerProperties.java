// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the Scheduler.
 */
@Fluent
public final class SchedulerProperties implements JsonSerializable<SchedulerProperties> {
    /*
     * The status of the last operation
     */
    private ProvisioningState provisioningState;

    /*
     * URL of the durable task scheduler
     */
    private String endpoint;

    /*
     * IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR
     */
    private List<String> ipAllowlist;

    /*
     * SKU of the durable task scheduler
     */
    private SchedulerSku sku;

    /**
     * Creates an instance of SchedulerProperties class.
     */
    public SchedulerProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the endpoint property: URL of the durable task scheduler.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the ipAllowlist property: IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR.
     * 
     * @return the ipAllowlist value.
     */
    public List<String> ipAllowlist() {
        return this.ipAllowlist;
    }

    /**
     * Set the ipAllowlist property: IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR.
     * 
     * @param ipAllowlist the ipAllowlist value to set.
     * @return the SchedulerProperties object itself.
     */
    public SchedulerProperties withIpAllowlist(List<String> ipAllowlist) {
        this.ipAllowlist = ipAllowlist;
        return this;
    }

    /**
     * Get the sku property: SKU of the durable task scheduler.
     * 
     * @return the sku value.
     */
    public SchedulerSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: SKU of the durable task scheduler.
     * 
     * @param sku the sku value to set.
     * @return the SchedulerProperties object itself.
     */
    public SchedulerProperties withSku(SchedulerSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipAllowlist() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property ipAllowlist in model SchedulerProperties"));
        }
        if (sku() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sku in model SchedulerProperties"));
        } else {
            sku().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SchedulerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipAllowlist", this.ipAllowlist, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchedulerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchedulerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SchedulerProperties.
     */
    public static SchedulerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchedulerProperties deserializedSchedulerProperties = new SchedulerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipAllowlist".equals(fieldName)) {
                    List<String> ipAllowlist = reader.readArray(reader1 -> reader1.getString());
                    deserializedSchedulerProperties.ipAllowlist = ipAllowlist;
                } else if ("sku".equals(fieldName)) {
                    deserializedSchedulerProperties.sku = SchedulerSku.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSchedulerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("endpoint".equals(fieldName)) {
                    deserializedSchedulerProperties.endpoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedulerProperties;
        });
    }
}
