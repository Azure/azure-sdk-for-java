// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SKU (Stock Keeping Unit) assigned to this durable task scheduler.
 */
@Fluent
public final class SchedulerSku implements JsonSerializable<SchedulerSku> {
    /*
     * The name of the SKU
     */
    private String name;

    /*
     * The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy
     */
    private Integer capacity;

    /*
     * Indicates whether the current SKU configuration is zone redundant
     */
    private RedundancyState redundancyState;

    /**
     * Creates an instance of SchedulerSku class.
     */
    public SchedulerSku() {
    }

    /**
     * Get the name property: The name of the SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the SKU.
     * 
     * @param name the name value to set.
     * @return the SchedulerSku object itself.
     */
    public SchedulerSku withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the capacity property: The SKU capacity. This allows scale out/in for the resource and impacts zone
     * redundancy.
     * 
     * @return the capacity value.
     */
    public Integer capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: The SKU capacity. This allows scale out/in for the resource and impacts zone
     * redundancy.
     * 
     * @param capacity the capacity value to set.
     * @return the SchedulerSku object itself.
     */
    public SchedulerSku withCapacity(Integer capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the redundancyState property: Indicates whether the current SKU configuration is zone redundant.
     * 
     * @return the redundancyState value.
     */
    public RedundancyState redundancyState() {
        return this.redundancyState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model SchedulerSku"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SchedulerSku.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("capacity", this.capacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchedulerSku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchedulerSku if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SchedulerSku.
     */
    public static SchedulerSku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchedulerSku deserializedSchedulerSku = new SchedulerSku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSchedulerSku.name = reader.getString();
                } else if ("capacity".equals(fieldName)) {
                    deserializedSchedulerSku.capacity = reader.getNullable(JsonReader::getInt);
                } else if ("redundancyState".equals(fieldName)) {
                    deserializedSchedulerSku.redundancyState = RedundancyState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedulerSku;
        });
    }
}
