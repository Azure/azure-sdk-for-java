// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.durabletask.fluent.models.RetentionPolicyInner;

/**
 * An instance of this class provides access to all the operations defined in RetentionPoliciesClient.
 */
public interface RetentionPoliciesClient {
    /**
     * Get a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Retention Policy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<RetentionPolicyInner> getWithResponse(String resourceGroupName, String schedulerName, Context context);

    /**
     * Get a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Retention Policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RetentionPolicyInner get(String resourceGroupName, String schedulerName);

    /**
     * Create or Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RetentionPolicyInner>, RetentionPolicyInner> beginCreateOrReplace(String resourceGroupName,
        String schedulerName, RetentionPolicyInner resource);

    /**
     * Create or Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RetentionPolicyInner>, RetentionPolicyInner> beginCreateOrReplace(String resourceGroupName,
        String schedulerName, RetentionPolicyInner resource, Context context);

    /**
     * Create or Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RetentionPolicyInner createOrReplace(String resourceGroupName, String schedulerName, RetentionPolicyInner resource);

    /**
     * Create or Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RetentionPolicyInner createOrReplace(String resourceGroupName, String schedulerName, RetentionPolicyInner resource,
        Context context);

    /**
     * Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RetentionPolicyInner>, RetentionPolicyInner> beginUpdate(String resourceGroupName,
        String schedulerName, RetentionPolicyInner properties);

    /**
     * Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RetentionPolicyInner>, RetentionPolicyInner> beginUpdate(String resourceGroupName,
        String schedulerName, RetentionPolicyInner properties, Context context);

    /**
     * Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RetentionPolicyInner update(String resourceGroupName, String schedulerName, RetentionPolicyInner properties);

    /**
     * Update a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a retention policy resource belonging to the scheduler.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RetentionPolicyInner update(String resourceGroupName, String schedulerName, RetentionPolicyInner properties,
        Context context);

    /**
     * Delete a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String schedulerName);

    /**
     * Delete a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String schedulerName, Context context);

    /**
     * Delete a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String schedulerName);

    /**
     * Delete a Retention Policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String schedulerName, Context context);

    /**
     * List Retention Policies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a RetentionPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RetentionPolicyInner> listByScheduler(String resourceGroupName, String schedulerName);

    /**
     * List Retention Policies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param schedulerName The name of the Scheduler.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a RetentionPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RetentionPolicyInner> listByScheduler(String resourceGroupName, String schedulerName,
        Context context);
}
