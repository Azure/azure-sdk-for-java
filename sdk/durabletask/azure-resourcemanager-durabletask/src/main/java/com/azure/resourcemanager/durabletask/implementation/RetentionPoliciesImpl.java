// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.durabletask.fluent.RetentionPoliciesClient;
import com.azure.resourcemanager.durabletask.fluent.models.RetentionPolicyInner;
import com.azure.resourcemanager.durabletask.models.RetentionPolicies;
import com.azure.resourcemanager.durabletask.models.RetentionPolicy;

public final class RetentionPoliciesImpl implements RetentionPolicies {
    private static final ClientLogger LOGGER = new ClientLogger(RetentionPoliciesImpl.class);

    private final RetentionPoliciesClient innerClient;

    private final com.azure.resourcemanager.durabletask.DurableTaskManager serviceManager;

    public RetentionPoliciesImpl(RetentionPoliciesClient innerClient,
        com.azure.resourcemanager.durabletask.DurableTaskManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<RetentionPolicy> getWithResponse(String resourceGroupName, String schedulerName, Context context) {
        Response<RetentionPolicyInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, schedulerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RetentionPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RetentionPolicy get(String resourceGroupName, String schedulerName) {
        RetentionPolicyInner inner = this.serviceClient().get(resourceGroupName, schedulerName);
        if (inner != null) {
            return new RetentionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RetentionPolicy createOrReplace(String resourceGroupName, String schedulerName,
        RetentionPolicyInner resource) {
        RetentionPolicyInner inner = this.serviceClient().createOrReplace(resourceGroupName, schedulerName, resource);
        if (inner != null) {
            return new RetentionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RetentionPolicy createOrReplace(String resourceGroupName, String schedulerName,
        RetentionPolicyInner resource, Context context) {
        RetentionPolicyInner inner
            = this.serviceClient().createOrReplace(resourceGroupName, schedulerName, resource, context);
        if (inner != null) {
            return new RetentionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RetentionPolicy update(String resourceGroupName, String schedulerName, RetentionPolicyInner properties) {
        RetentionPolicyInner inner = this.serviceClient().update(resourceGroupName, schedulerName, properties);
        if (inner != null) {
            return new RetentionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RetentionPolicy update(String resourceGroupName, String schedulerName, RetentionPolicyInner properties,
        Context context) {
        RetentionPolicyInner inner = this.serviceClient().update(resourceGroupName, schedulerName, properties, context);
        if (inner != null) {
            return new RetentionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String schedulerName) {
        this.serviceClient().delete(resourceGroupName, schedulerName);
    }

    public void delete(String resourceGroupName, String schedulerName, Context context) {
        this.serviceClient().delete(resourceGroupName, schedulerName, context);
    }

    public PagedIterable<RetentionPolicy> listByScheduler(String resourceGroupName, String schedulerName) {
        PagedIterable<RetentionPolicyInner> inner
            = this.serviceClient().listByScheduler(resourceGroupName, schedulerName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RetentionPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<RetentionPolicy> listByScheduler(String resourceGroupName, String schedulerName,
        Context context) {
        PagedIterable<RetentionPolicyInner> inner
            = this.serviceClient().listByScheduler(resourceGroupName, schedulerName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RetentionPolicyImpl(inner1, this.manager()));
    }

    private RetentionPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.durabletask.DurableTaskManager manager() {
        return this.serviceManager;
    }
}
