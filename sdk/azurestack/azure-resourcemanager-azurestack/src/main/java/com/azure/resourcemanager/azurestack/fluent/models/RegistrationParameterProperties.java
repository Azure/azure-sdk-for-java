// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of the Azure Stack registration resource.
 */
@Fluent
public final class RegistrationParameterProperties implements JsonSerializable<RegistrationParameterProperties> {
    /*
     * The token identifying registered Azure Stack
     */
    private String registrationToken;

    /**
     * Creates an instance of RegistrationParameterProperties class.
     */
    public RegistrationParameterProperties() {
    }

    /**
     * Get the registrationToken property: The token identifying registered Azure Stack.
     * 
     * @return the registrationToken value.
     */
    public String registrationToken() {
        return this.registrationToken;
    }

    /**
     * Set the registrationToken property: The token identifying registered Azure Stack.
     * 
     * @param registrationToken the registrationToken value to set.
     * @return the RegistrationParameterProperties object itself.
     */
    public RegistrationParameterProperties withRegistrationToken(String registrationToken) {
        this.registrationToken = registrationToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (registrationToken() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property registrationToken in model RegistrationParameterProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RegistrationParameterProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("registrationToken", this.registrationToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistrationParameterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistrationParameterProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegistrationParameterProperties.
     */
    public static RegistrationParameterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistrationParameterProperties deserializedRegistrationParameterProperties
                = new RegistrationParameterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("registrationToken".equals(fieldName)) {
                    deserializedRegistrationParameterProperties.registrationToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistrationParameterProperties;
        });
    }
}
