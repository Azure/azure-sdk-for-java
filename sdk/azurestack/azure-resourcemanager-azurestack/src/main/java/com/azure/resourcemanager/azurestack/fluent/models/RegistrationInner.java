// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Registration information.
 */
@Fluent
public final class RegistrationInner extends Resource {
    /*
     * Registration resource.
     */
    private RegistrationProperties innerProperties;

    /*
     * The entity tag used for optimistic concurrency when modifying the resource.
     */
    private String etag;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of RegistrationInner class.
     */
    public RegistrationInner() {
    }

    /**
     * Get the innerProperties property: Registration resource.
     * 
     * @return the innerProperties value.
     */
    private RegistrationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: The entity tag used for optimistic concurrency when modifying the resource.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: The entity tag used for optimistic concurrency when modifying the resource.
     * 
     * @param etag the etag value to set.
     * @return the RegistrationInner object itself.
     */
    public RegistrationInner withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegistrationInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegistrationInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the objectId property: The object identifier associated with the Azure Stack connecting to Azure.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.innerProperties() == null ? null : this.innerProperties().objectId();
    }

    /**
     * Set the objectId property: The object identifier associated with the Azure Stack connecting to Azure.
     * 
     * @param objectId the objectId value to set.
     * @return the RegistrationInner object itself.
     */
    public RegistrationInner withObjectId(String objectId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationProperties();
        }
        this.innerProperties().withObjectId(objectId);
        return this;
    }

    /**
     * Get the cloudId property: The identifier of the registered Azure Stack.
     * 
     * @return the cloudId value.
     */
    public String cloudId() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudId();
    }

    /**
     * Set the cloudId property: The identifier of the registered Azure Stack.
     * 
     * @param cloudId the cloudId value to set.
     * @return the RegistrationInner object itself.
     */
    public RegistrationInner withCloudId(String cloudId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationProperties();
        }
        this.innerProperties().withCloudId(cloudId);
        return this;
    }

    /**
     * Get the billingModel property: Specifies the billing mode for the Azure Stack registration.
     * 
     * @return the billingModel value.
     */
    public String billingModel() {
        return this.innerProperties() == null ? null : this.innerProperties().billingModel();
    }

    /**
     * Set the billingModel property: Specifies the billing mode for the Azure Stack registration.
     * 
     * @param billingModel the billingModel value to set.
     * @return the RegistrationInner object itself.
     */
    public RegistrationInner withBillingModel(String billingModel) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationProperties();
        }
        this.innerProperties().withBillingModel(billingModel);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("etag", this.etag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistrationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistrationInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegistrationInner.
     */
    public static RegistrationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistrationInner deserializedRegistrationInner = new RegistrationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRegistrationInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRegistrationInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRegistrationInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedRegistrationInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedRegistrationInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedRegistrationInner.innerProperties = RegistrationProperties.fromJson(reader);
                } else if ("etag".equals(fieldName)) {
                    deserializedRegistrationInner.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistrationInner;
        });
    }
}
