// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestack.fluent.LinkedSubscriptionsClient;
import com.azure.resourcemanager.azurestack.fluent.models.LinkedSubscriptionInner;
import com.azure.resourcemanager.azurestack.models.LinkedSubscription;
import com.azure.resourcemanager.azurestack.models.LinkedSubscriptions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class LinkedSubscriptionsImpl implements LinkedSubscriptions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LinkedSubscriptionsImpl.class);

    private final LinkedSubscriptionsClient innerClient;

    private final com.azure.resourcemanager.azurestack.AzureStackManager serviceManager;

    public LinkedSubscriptionsImpl(
        LinkedSubscriptionsClient innerClient, com.azure.resourcemanager.azurestack.AzureStackManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LinkedSubscription> listByResourceGroup(String resourceGroup) {
        PagedIterable<LinkedSubscriptionInner> inner = this.serviceClient().listByResourceGroup(resourceGroup);
        return Utils.mapPage(inner, inner1 -> new LinkedSubscriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<LinkedSubscription> listByResourceGroup(String resourceGroup, Context context) {
        PagedIterable<LinkedSubscriptionInner> inner = this.serviceClient().listByResourceGroup(resourceGroup, context);
        return Utils.mapPage(inner, inner1 -> new LinkedSubscriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<LinkedSubscription> list() {
        PagedIterable<LinkedSubscriptionInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new LinkedSubscriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<LinkedSubscription> list(Context context) {
        PagedIterable<LinkedSubscriptionInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new LinkedSubscriptionImpl(inner1, this.manager()));
    }

    public LinkedSubscription getByResourceGroup(String resourceGroup, String linkedSubscriptionName) {
        LinkedSubscriptionInner inner = this.serviceClient().getByResourceGroup(resourceGroup, linkedSubscriptionName);
        if (inner != null) {
            return new LinkedSubscriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LinkedSubscription> getByResourceGroupWithResponse(
        String resourceGroup, String linkedSubscriptionName, Context context) {
        Response<LinkedSubscriptionInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroup, linkedSubscriptionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LinkedSubscriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroup, String linkedSubscriptionName) {
        this.serviceClient().delete(resourceGroup, linkedSubscriptionName);
    }

    public Response<Void> deleteWithResponse(String resourceGroup, String linkedSubscriptionName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroup, linkedSubscriptionName, context);
    }

    public LinkedSubscription getById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String linkedSubscriptionName = Utils.getValueFromIdByName(id, "linkedSubscriptions");
        if (linkedSubscriptionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'linkedSubscriptions'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroup, linkedSubscriptionName, Context.NONE).getValue();
    }

    public Response<LinkedSubscription> getByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String linkedSubscriptionName = Utils.getValueFromIdByName(id, "linkedSubscriptions");
        if (linkedSubscriptionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'linkedSubscriptions'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroup, linkedSubscriptionName, context);
    }

    public void deleteById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String linkedSubscriptionName = Utils.getValueFromIdByName(id, "linkedSubscriptions");
        if (linkedSubscriptionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'linkedSubscriptions'.", id)));
        }
        this.deleteWithResponse(resourceGroup, linkedSubscriptionName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String linkedSubscriptionName = Utils.getValueFromIdByName(id, "linkedSubscriptions");
        if (linkedSubscriptionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'linkedSubscriptions'.", id)));
        }
        return this.deleteWithResponse(resourceGroup, linkedSubscriptionName, context);
    }

    private LinkedSubscriptionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestack.AzureStackManager manager() {
        return this.serviceManager;
    }

    public LinkedSubscriptionImpl define(String name) {
        return new LinkedSubscriptionImpl(name, this.manager());
    }
}
