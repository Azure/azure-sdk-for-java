// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Product information.
 */
@Immutable
public class VirtualMachineProductProperties implements JsonSerializable<VirtualMachineProductProperties> {
    /*
     * Specifies product version.
     */
    private String version;

    /*
     * OS disk image used by product.
     */
    private OsDiskImage osDiskImage;

    /*
     * List of attached data disks.
     */
    private List<DataDiskImage> dataDiskImages;

    /**
     * Creates an instance of VirtualMachineProductProperties class.
     */
    public VirtualMachineProductProperties() {
    }

    /**
     * Get the version property: Specifies product version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Specifies product version.
     * 
     * @param version the version value to set.
     * @return the VirtualMachineProductProperties object itself.
     */
    VirtualMachineProductProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the osDiskImage property: OS disk image used by product.
     * 
     * @return the osDiskImage value.
     */
    public OsDiskImage osDiskImage() {
        return this.osDiskImage;
    }

    /**
     * Set the osDiskImage property: OS disk image used by product.
     * 
     * @param osDiskImage the osDiskImage value to set.
     * @return the VirtualMachineProductProperties object itself.
     */
    VirtualMachineProductProperties withOsDiskImage(OsDiskImage osDiskImage) {
        this.osDiskImage = osDiskImage;
        return this;
    }

    /**
     * Get the dataDiskImages property: List of attached data disks.
     * 
     * @return the dataDiskImages value.
     */
    public List<DataDiskImage> dataDiskImages() {
        return this.dataDiskImages;
    }

    /**
     * Set the dataDiskImages property: List of attached data disks.
     * 
     * @param dataDiskImages the dataDiskImages value to set.
     * @return the VirtualMachineProductProperties object itself.
     */
    VirtualMachineProductProperties withDataDiskImages(List<DataDiskImage> dataDiskImages) {
        this.dataDiskImages = dataDiskImages;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osDiskImage() != null) {
            osDiskImage().validate();
        }
        if (dataDiskImages() != null) {
            dataDiskImages().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineProductProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineProductProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineProductProperties.
     */
    public static VirtualMachineProductProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineProductProperties deserializedVirtualMachineProductProperties
                = new VirtualMachineProductProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedVirtualMachineProductProperties.version = reader.getString();
                } else if ("osDiskImage".equals(fieldName)) {
                    deserializedVirtualMachineProductProperties.osDiskImage = OsDiskImage.fromJson(reader);
                } else if ("dataDiskImages".equals(fieldName)) {
                    List<DataDiskImage> dataDiskImages = reader.readArray(reader1 -> DataDiskImage.fromJson(reader1));
                    deserializedVirtualMachineProductProperties.dataDiskImages = dataDiskImages;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineProductProperties;
        });
    }
}
