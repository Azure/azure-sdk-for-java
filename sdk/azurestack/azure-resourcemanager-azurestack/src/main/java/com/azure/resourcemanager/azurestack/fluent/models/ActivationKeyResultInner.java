// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource containing the Azure Stack activation key.
 */
@Fluent
public final class ActivationKeyResultInner implements JsonSerializable<ActivationKeyResultInner> {
    /*
     * Azure Stack activation key.
     */
    private String activationKey;

    /**
     * Creates an instance of ActivationKeyResultInner class.
     */
    public ActivationKeyResultInner() {
    }

    /**
     * Get the activationKey property: Azure Stack activation key.
     * 
     * @return the activationKey value.
     */
    public String activationKey() {
        return this.activationKey;
    }

    /**
     * Set the activationKey property: Azure Stack activation key.
     * 
     * @param activationKey the activationKey value to set.
     * @return the ActivationKeyResultInner object itself.
     */
    public ActivationKeyResultInner withActivationKey(String activationKey) {
        this.activationKey = activationKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activationKey", this.activationKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActivationKeyResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActivationKeyResultInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActivationKeyResultInner.
     */
    public static ActivationKeyResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActivationKeyResultInner deserializedActivationKeyResultInner = new ActivationKeyResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activationKey".equals(fieldName)) {
                    deserializedActivationKeyResultInner.activationKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActivationKeyResultInner;
        });
    }
}
