// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Product compatibility.
 */
@Fluent
public final class Compatibility implements JsonSerializable<Compatibility> {
    /*
     * Tells if product is compatible with current device
     */
    private Boolean isCompatible;

    /*
     * Short error message if any compatibility issues are found
     */
    private String message;

    /*
     * Full error message if any compatibility issues are found
     */
    private String description;

    /*
     * List of all issues found
     */
    private List<CompatibilityIssue> issues;

    /**
     * Creates an instance of Compatibility class.
     */
    public Compatibility() {
    }

    /**
     * Get the isCompatible property: Tells if product is compatible with current device.
     * 
     * @return the isCompatible value.
     */
    public Boolean isCompatible() {
        return this.isCompatible;
    }

    /**
     * Set the isCompatible property: Tells if product is compatible with current device.
     * 
     * @param isCompatible the isCompatible value to set.
     * @return the Compatibility object itself.
     */
    public Compatibility withIsCompatible(Boolean isCompatible) {
        this.isCompatible = isCompatible;
        return this;
    }

    /**
     * Get the message property: Short error message if any compatibility issues are found.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Short error message if any compatibility issues are found.
     * 
     * @param message the message value to set.
     * @return the Compatibility object itself.
     */
    public Compatibility withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the description property: Full error message if any compatibility issues are found.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Full error message if any compatibility issues are found.
     * 
     * @param description the description value to set.
     * @return the Compatibility object itself.
     */
    public Compatibility withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the issues property: List of all issues found.
     * 
     * @return the issues value.
     */
    public List<CompatibilityIssue> issues() {
        return this.issues;
    }

    /**
     * Set the issues property: List of all issues found.
     * 
     * @param issues the issues value to set.
     * @return the Compatibility object itself.
     */
    public Compatibility withIssues(List<CompatibilityIssue> issues) {
        this.issues = issues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isCompatible", this.isCompatible);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("issues", this.issues,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Compatibility from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Compatibility if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Compatibility.
     */
    public static Compatibility fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Compatibility deserializedCompatibility = new Compatibility();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isCompatible".equals(fieldName)) {
                    deserializedCompatibility.isCompatible = reader.getNullable(JsonReader::getBoolean);
                } else if ("message".equals(fieldName)) {
                    deserializedCompatibility.message = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedCompatibility.description = reader.getString();
                } else if ("issues".equals(fieldName)) {
                    List<CompatibilityIssue> issues
                        = reader.readArray(reader1 -> CompatibilityIssue.fromString(reader1.getString()));
                    deserializedCompatibility.issues = issues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCompatibility;
        });
    }
}
