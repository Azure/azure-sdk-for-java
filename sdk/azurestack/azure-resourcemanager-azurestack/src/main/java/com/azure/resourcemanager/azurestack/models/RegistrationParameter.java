// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Registration resource. */
@JsonFlatten
@Fluent
public class RegistrationParameter {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RegistrationParameter.class);

    /*
     * Location of the resource.
     */
    @JsonProperty(value = "location", required = true)
    private Location location;

    /*
     * The token identifying registered Azure Stack
     */
    @JsonProperty(value = "properties.registrationToken", required = true)
    private String registrationToken;

    /**
     * Get the location property: Location of the resource.
     *
     * @return the location value.
     */
    public Location location() {
        return this.location;
    }

    /**
     * Set the location property: Location of the resource.
     *
     * @param location the location value to set.
     * @return the RegistrationParameter object itself.
     */
    public RegistrationParameter withLocation(Location location) {
        this.location = location;
        return this;
    }

    /**
     * Get the registrationToken property: The token identifying registered Azure Stack.
     *
     * @return the registrationToken value.
     */
    public String registrationToken() {
        return this.registrationToken;
    }

    /**
     * Set the registrationToken property: The token identifying registered Azure Stack.
     *
     * @param registrationToken the registrationToken value to set.
     * @return the RegistrationParameter object itself.
     */
    public RegistrationParameter withRegistrationToken(String registrationToken) {
        this.registrationToken = registrationToken;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property location in model RegistrationParameter"));
        }
        if (registrationToken() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property registrationToken in model RegistrationParameter"));
        }
    }
}
