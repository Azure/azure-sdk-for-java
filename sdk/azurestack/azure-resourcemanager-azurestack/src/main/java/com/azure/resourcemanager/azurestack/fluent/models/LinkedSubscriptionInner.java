// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Linked Subscription information. */
@Fluent
public final class LinkedSubscriptionInner extends Resource {
    /*
     * Linked Subscription resource.
     */
    @JsonProperty(value = "properties")
    private LinkedSubscriptionProperties innerProperties;

    /*
     * The kind of the resource.
     */
    @JsonProperty(value = "kind", access = JsonProperty.Access.WRITE_ONLY)
    private String kind;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * The entity tag used for optimistic concurrency when modifying the
     * resource.
     */
    @JsonProperty(value = "etag")
    private String etag;

    /**
     * Get the innerProperties property: Linked Subscription resource.
     *
     * @return the innerProperties value.
     */
    private LinkedSubscriptionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the kind property: The kind of the resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the etag property: The entity tag used for optimistic concurrency when modifying the resource.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: The entity tag used for optimistic concurrency when modifying the resource.
     *
     * @param etag the etag value to set.
     * @return the LinkedSubscriptionInner object itself.
     */
    public LinkedSubscriptionInner withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LinkedSubscriptionInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LinkedSubscriptionInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the linkedSubscriptionId property: The identifier associated with the device subscription.
     *
     * @return the linkedSubscriptionId value.
     */
    public String linkedSubscriptionId() {
        return this.innerProperties() == null ? null : this.innerProperties().linkedSubscriptionId();
    }

    /**
     * Set the linkedSubscriptionId property: The identifier associated with the device subscription.
     *
     * @param linkedSubscriptionId the linkedSubscriptionId value to set.
     * @return the LinkedSubscriptionInner object itself.
     */
    public LinkedSubscriptionInner withLinkedSubscriptionId(String linkedSubscriptionId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LinkedSubscriptionProperties();
        }
        this.innerProperties().withLinkedSubscriptionId(linkedSubscriptionId);
        return this;
    }

    /**
     * Get the registrationResourceId property: The identifier associated with the device registration.
     *
     * @return the registrationResourceId value.
     */
    public String registrationResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().registrationResourceId();
    }

    /**
     * Set the registrationResourceId property: The identifier associated with the device registration.
     *
     * @param registrationResourceId the registrationResourceId value to set.
     * @return the LinkedSubscriptionInner object itself.
     */
    public LinkedSubscriptionInner withRegistrationResourceId(String registrationResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LinkedSubscriptionProperties();
        }
        this.innerProperties().withRegistrationResourceId(registrationResourceId);
        return this;
    }

    /**
     * Get the deviceId property: The identifier of the Azure Stack device for remote management.
     *
     * @return the deviceId value.
     */
    public String deviceId() {
        return this.innerProperties() == null ? null : this.innerProperties().deviceId();
    }

    /**
     * Get the deviceObjectId property: The object identifier associated with the Azure Stack device connecting to
     * Azure.
     *
     * @return the deviceObjectId value.
     */
    public String deviceObjectId() {
        return this.innerProperties() == null ? null : this.innerProperties().deviceObjectId();
    }

    /**
     * Get the deviceLinkState property: The connection state of the Azure Stack device.
     *
     * @return the deviceLinkState value.
     */
    public String deviceLinkState() {
        return this.innerProperties() == null ? null : this.innerProperties().deviceLinkState();
    }

    /**
     * Get the lastConnectedTime property: The last remote management connection time for the Azure Stack device
     * connected to the linked subscription resource.
     *
     * @return the lastConnectedTime value.
     */
    public String lastConnectedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastConnectedTime();
    }

    /**
     * Get the deviceConnectionStatus property: The status of the remote management connection of the Azure Stack
     * device.
     *
     * @return the deviceConnectionStatus value.
     */
    public String deviceConnectionStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().deviceConnectionStatus();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
