// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties portion of the registration resource.
 */
@Fluent
public final class RegistrationProperties implements JsonSerializable<RegistrationProperties> {
    /*
     * The object identifier associated with the Azure Stack connecting to Azure.
     */
    private String objectId;

    /*
     * The identifier of the registered Azure Stack.
     */
    private String cloudId;

    /*
     * Specifies the billing mode for the Azure Stack registration.
     */
    private String billingModel;

    /**
     * Creates an instance of RegistrationProperties class.
     */
    public RegistrationProperties() {
    }

    /**
     * Get the objectId property: The object identifier associated with the Azure Stack connecting to Azure.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: The object identifier associated with the Azure Stack connecting to Azure.
     * 
     * @param objectId the objectId value to set.
     * @return the RegistrationProperties object itself.
     */
    public RegistrationProperties withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Get the cloudId property: The identifier of the registered Azure Stack.
     * 
     * @return the cloudId value.
     */
    public String cloudId() {
        return this.cloudId;
    }

    /**
     * Set the cloudId property: The identifier of the registered Azure Stack.
     * 
     * @param cloudId the cloudId value to set.
     * @return the RegistrationProperties object itself.
     */
    public RegistrationProperties withCloudId(String cloudId) {
        this.cloudId = cloudId;
        return this;
    }

    /**
     * Get the billingModel property: Specifies the billing mode for the Azure Stack registration.
     * 
     * @return the billingModel value.
     */
    public String billingModel() {
        return this.billingModel;
    }

    /**
     * Set the billingModel property: Specifies the billing mode for the Azure Stack registration.
     * 
     * @param billingModel the billingModel value to set.
     * @return the RegistrationProperties object itself.
     */
    public RegistrationProperties withBillingModel(String billingModel) {
        this.billingModel = billingModel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectId", this.objectId);
        jsonWriter.writeStringField("cloudId", this.cloudId);
        jsonWriter.writeStringField("billingModel", this.billingModel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistrationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegistrationProperties.
     */
    public static RegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistrationProperties deserializedRegistrationProperties = new RegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectId".equals(fieldName)) {
                    deserializedRegistrationProperties.objectId = reader.getString();
                } else if ("cloudId".equals(fieldName)) {
                    deserializedRegistrationProperties.cloudId = reader.getString();
                } else if ("billingModel".equals(fieldName)) {
                    deserializedRegistrationProperties.billingModel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistrationProperties;
        });
    }
}
