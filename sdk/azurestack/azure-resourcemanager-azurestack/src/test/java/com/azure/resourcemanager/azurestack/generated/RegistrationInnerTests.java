// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestack.fluent.models.RegistrationInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RegistrationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegistrationInner model = BinaryData.fromString(
            "{\"properties\":{\"objectId\":\"s\",\"cloudId\":\"pgn\",\"billingModel\":\"txhp\"},\"etag\":\"bzpfzab\",\"location\":\"lcuhxwtctyqiklb\",\"tags\":{\"svmkfssxquk\":\"plwzbhvgyugu\",\"mg\":\"fpl\"},\"id\":\"xnkjzkdesl\",\"name\":\"vlopwiyighx\",\"type\":\"kdwzbaiuebbaumny\"}")
            .toObject(RegistrationInner.class);
        Assertions.assertEquals("lcuhxwtctyqiklb", model.location());
        Assertions.assertEquals("plwzbhvgyugu", model.tags().get("svmkfssxquk"));
        Assertions.assertEquals("bzpfzab", model.etag());
        Assertions.assertEquals("s", model.objectId());
        Assertions.assertEquals("pgn", model.cloudId());
        Assertions.assertEquals("txhp", model.billingModel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegistrationInner model = new RegistrationInner().withLocation("lcuhxwtctyqiklb")
            .withTags(mapOf("svmkfssxquk", "plwzbhvgyugu", "mg", "fpl"))
            .withEtag("bzpfzab")
            .withObjectId("s")
            .withCloudId("pgn")
            .withBillingModel("txhp");
        model = BinaryData.fromObject(model).toObject(RegistrationInner.class);
        Assertions.assertEquals("lcuhxwtctyqiklb", model.location());
        Assertions.assertEquals("plwzbhvgyugu", model.tags().get("svmkfssxquk"));
        Assertions.assertEquals("bzpfzab", model.etag());
        Assertions.assertEquals("s", model.objectId());
        Assertions.assertEquals("pgn", model.cloudId());
        Assertions.assertEquals("txhp", model.billingModel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
