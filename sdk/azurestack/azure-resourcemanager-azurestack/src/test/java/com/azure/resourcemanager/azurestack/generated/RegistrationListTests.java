// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestack.fluent.models.RegistrationInner;
import com.azure.resourcemanager.azurestack.models.RegistrationList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RegistrationListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegistrationList model = BinaryData.fromString(
            "{\"nextLink\":\"pikad\",\"value\":[{\"properties\":{\"objectId\":\"agnb\",\"cloudId\":\"nhijggmebfsi\",\"billingModel\":\"butr\"},\"etag\":\"pnazzm\",\"location\":\"jrunmpxtt\",\"tags\":{\"henbtkcxywnytn\":\"rbnlankxmyskp\",\"haaxdbabphl\":\"synlqidybyxczfc\",\"yazttbtwwrqpue\":\"rqlfktsthsucocmn\",\"xibxujwbhqwalm\":\"ckzywbiexzfeyue\"},\"id\":\"zyoxaepdkzjan\",\"name\":\"ux\",\"type\":\"hdwbavxbniwdjs\"}]}")
            .toObject(RegistrationList.class);
        Assertions.assertEquals("pikad", model.nextLink());
        Assertions.assertEquals("jrunmpxtt", model.value().get(0).location());
        Assertions.assertEquals("rbnlankxmyskp", model.value().get(0).tags().get("henbtkcxywnytn"));
        Assertions.assertEquals("pnazzm", model.value().get(0).etag());
        Assertions.assertEquals("agnb", model.value().get(0).objectId());
        Assertions.assertEquals("nhijggmebfsi", model.value().get(0).cloudId());
        Assertions.assertEquals("butr", model.value().get(0).billingModel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegistrationList model = new RegistrationList().withNextLink("pikad")
            .withValue(Arrays.asList(new RegistrationInner().withLocation("jrunmpxtt")
                .withTags(mapOf("henbtkcxywnytn", "rbnlankxmyskp", "haaxdbabphl", "synlqidybyxczfc", "yazttbtwwrqpue",
                    "rqlfktsthsucocmn", "xibxujwbhqwalm", "ckzywbiexzfeyue"))
                .withEtag("pnazzm")
                .withObjectId("agnb")
                .withCloudId("nhijggmebfsi")
                .withBillingModel("butr")));
        model = BinaryData.fromObject(model).toObject(RegistrationList.class);
        Assertions.assertEquals("pikad", model.nextLink());
        Assertions.assertEquals("jrunmpxtt", model.value().get(0).location());
        Assertions.assertEquals("rbnlankxmyskp", model.value().get(0).tags().get("henbtkcxywnytn"));
        Assertions.assertEquals("pnazzm", model.value().get(0).etag());
        Assertions.assertEquals("agnb", model.value().get(0).objectId());
        Assertions.assertEquals("nhijggmebfsi", model.value().get(0).cloudId());
        Assertions.assertEquals("butr", model.value().get(0).billingModel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
