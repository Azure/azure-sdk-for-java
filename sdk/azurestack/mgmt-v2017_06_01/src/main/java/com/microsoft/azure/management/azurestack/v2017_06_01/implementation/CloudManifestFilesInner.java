/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.azurestack.v2017_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.azurestack.v2017_06_01.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CloudManifestFiles.
 */
public class CloudManifestFilesInner {
    /** The Retrofit service to perform REST calls. */
    private CloudManifestFilesService service;
    /** The service client containing this operation class. */
    private AzureStackManagementClientImpl client;

    /**
     * Initializes an instance of CloudManifestFilesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CloudManifestFilesInner(Retrofit retrofit, AzureStackManagementClientImpl client) {
        this.service = retrofit.create(CloudManifestFilesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudManifestFiles to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CloudManifestFilesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.CloudManifestFiles list" })
        @GET("providers/Microsoft.AzureStack/cloudManifestFiles")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.azurestack.v2017_06_01.CloudManifestFiles get" })
        @GET("providers/Microsoft.AzureStack/cloudManifestFiles/{verificationVersion}")
        Observable<Response<ResponseBody>> get(@Path("verificationVersion") String verificationVersion, @Query("versionCreationDate") String versionCreationDate, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Returns a cloud specific manifest JSON file with latest version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CloudManifestFileResponseInner object if successful.
     */
    public CloudManifestFileResponseInner list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Returns a cloud specific manifest JSON file with latest version.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CloudManifestFileResponseInner> listAsync(final ServiceCallback<CloudManifestFileResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns a cloud specific manifest JSON file with latest version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CloudManifestFileResponseInner object
     */
    public Observable<CloudManifestFileResponseInner> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<CloudManifestFileResponseInner>, CloudManifestFileResponseInner>() {
            @Override
            public CloudManifestFileResponseInner call(ServiceResponse<CloudManifestFileResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns a cloud specific manifest JSON file with latest version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CloudManifestFileResponseInner object
     */
    public Observable<ServiceResponse<CloudManifestFileResponseInner>> listWithServiceResponseAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CloudManifestFileResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<CloudManifestFileResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CloudManifestFileResponseInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CloudManifestFileResponseInner> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CloudManifestFileResponseInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CloudManifestFileResponseInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CloudManifestFileResponseInner object if successful.
     */
    public CloudManifestFileResponseInner get(String verificationVersion) {
        return getWithServiceResponseAsync(verificationVersion).toBlocking().single().body();
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CloudManifestFileResponseInner> getAsync(String verificationVersion, final ServiceCallback<CloudManifestFileResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(verificationVersion), serviceCallback);
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CloudManifestFileResponseInner object
     */
    public Observable<CloudManifestFileResponseInner> getAsync(String verificationVersion) {
        return getWithServiceResponseAsync(verificationVersion).map(new Func1<ServiceResponse<CloudManifestFileResponseInner>, CloudManifestFileResponseInner>() {
            @Override
            public CloudManifestFileResponseInner call(ServiceResponse<CloudManifestFileResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CloudManifestFileResponseInner object
     */
    public Observable<ServiceResponse<CloudManifestFileResponseInner>> getWithServiceResponseAsync(String verificationVersion) {
        if (verificationVersion == null) {
            throw new IllegalArgumentException("Parameter verificationVersion is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String versionCreationDate = null;
        return service.get(verificationVersion, versionCreationDate, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CloudManifestFileResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<CloudManifestFileResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CloudManifestFileResponseInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @param versionCreationDate Signing verification key version creation date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CloudManifestFileResponseInner object if successful.
     */
    public CloudManifestFileResponseInner get(String verificationVersion, String versionCreationDate) {
        return getWithServiceResponseAsync(verificationVersion, versionCreationDate).toBlocking().single().body();
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @param versionCreationDate Signing verification key version creation date.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CloudManifestFileResponseInner> getAsync(String verificationVersion, String versionCreationDate, final ServiceCallback<CloudManifestFileResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(verificationVersion, versionCreationDate), serviceCallback);
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @param versionCreationDate Signing verification key version creation date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CloudManifestFileResponseInner object
     */
    public Observable<CloudManifestFileResponseInner> getAsync(String verificationVersion, String versionCreationDate) {
        return getWithServiceResponseAsync(verificationVersion, versionCreationDate).map(new Func1<ServiceResponse<CloudManifestFileResponseInner>, CloudManifestFileResponseInner>() {
            @Override
            public CloudManifestFileResponseInner call(ServiceResponse<CloudManifestFileResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns a cloud specific manifest JSON file.
     *
     * @param verificationVersion Signing verification key version.
     * @param versionCreationDate Signing verification key version creation date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CloudManifestFileResponseInner object
     */
    public Observable<ServiceResponse<CloudManifestFileResponseInner>> getWithServiceResponseAsync(String verificationVersion, String versionCreationDate) {
        if (verificationVersion == null) {
            throw new IllegalArgumentException("Parameter verificationVersion is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(verificationVersion, versionCreationDate, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CloudManifestFileResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<CloudManifestFileResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CloudManifestFileResponseInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CloudManifestFileResponseInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CloudManifestFileResponseInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CloudManifestFileResponseInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
