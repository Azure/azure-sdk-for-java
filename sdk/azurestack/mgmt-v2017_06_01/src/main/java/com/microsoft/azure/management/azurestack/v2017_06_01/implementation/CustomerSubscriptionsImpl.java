/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.azurestack.v2017_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.azurestack.v2017_06_01.CustomerSubscriptions;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.azurestack.v2017_06_01.CustomerSubscription;

class CustomerSubscriptionsImpl extends WrapperImpl<CustomerSubscriptionsInner> implements CustomerSubscriptions {
    private final AzureStackManager manager;

    CustomerSubscriptionsImpl(AzureStackManager manager) {
        super(manager.inner().customerSubscriptions());
        this.manager = manager;
    }

    public AzureStackManager manager() {
        return this.manager;
    }

    @Override
    public CustomerSubscriptionImpl define(String name) {
        return wrapModel(name);
    }

    private CustomerSubscriptionImpl wrapModel(CustomerSubscriptionInner inner) {
        return  new CustomerSubscriptionImpl(inner, manager());
    }

    private CustomerSubscriptionImpl wrapModel(String name) {
        return new CustomerSubscriptionImpl(name, this.manager());
    }

    @Override
    public Observable<CustomerSubscription> listAsync(final String resourceGroup, final String registrationName) {
        CustomerSubscriptionsInner client = this.inner();
        return client.listAsync(resourceGroup, registrationName)
        .flatMapIterable(new Func1<Page<CustomerSubscriptionInner>, Iterable<CustomerSubscriptionInner>>() {
            @Override
            public Iterable<CustomerSubscriptionInner> call(Page<CustomerSubscriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CustomerSubscriptionInner, CustomerSubscription>() {
            @Override
            public CustomerSubscription call(CustomerSubscriptionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CustomerSubscription> getAsync(String resourceGroup, String registrationName, String customerSubscriptionName) {
        CustomerSubscriptionsInner client = this.inner();
        return client.getAsync(resourceGroup, registrationName, customerSubscriptionName)
        .flatMap(new Func1<CustomerSubscriptionInner, Observable<CustomerSubscription>>() {
            @Override
            public Observable<CustomerSubscription> call(CustomerSubscriptionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((CustomerSubscription)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroup, String registrationName, String customerSubscriptionName) {
        CustomerSubscriptionsInner client = this.inner();
        return client.deleteAsync(resourceGroup, registrationName, customerSubscriptionName).toCompletable();
    }

}
