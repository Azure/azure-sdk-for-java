// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.synapse.accesscontrol;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.synapse.accesscontrol.implementation.RoleAssignmentsImpl;
import com.azure.synapse.accesscontrol.models.ErrorContractException;
import com.azure.synapse.accesscontrol.models.RoleAssignmentDetails;
import com.azure.synapse.accesscontrol.models.RoleAssignmentDetailsList;
import com.azure.synapse.accesscontrol.models.RoleAssignmentsListRoleAssignmentsResponse;
import java.util.UUID;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AccessControlClient type. */
@ServiceClient(builder = AccessControlClientBuilder.class, isAsync = true)
public final class RoleAssignmentsAsyncClient {
    private final RoleAssignmentsImpl serviceClient;

    /**
     * Initializes an instance of RoleAssignments client.
     *
     * @param serviceClient the service client implementation.
     */
    RoleAssignmentsAsyncClient(RoleAssignmentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List role assignments.
     *
     * @param roleId The roleId parameter.
     * @param principalId The principalId parameter.
     * @param scope The scope parameter.
     * @param continuationToken The continuationToken parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleAssignmentsListRoleAssignmentsResponse> listRoleAssignmentsWithResponse(
            String roleId, String principalId, String scope, String continuationToken) {
        return this.serviceClient.listRoleAssignmentsWithResponseAsync(roleId, principalId, scope, continuationToken);
    }

    /**
     * List role assignments.
     *
     * @param roleId The roleId parameter.
     * @param principalId The principalId parameter.
     * @param scope The scope parameter.
     * @param continuationToken The continuationToken parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleAssignmentDetailsList> listRoleAssignments(
            String roleId, String principalId, String scope, String continuationToken) {
        return this.serviceClient.listRoleAssignmentsAsync(roleId, principalId, scope, continuationToken);
    }

    /**
     * List role assignments.
     *
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleAssignmentDetailsList> listRoleAssignments() {
        return this.serviceClient.listRoleAssignmentsAsync();
    }

    /**
     * Create role assignment.
     *
     * @param roleAssignmentId The roleAssignmentId parameter.
     * @param roleId Role ID of the Synapse Built-In Role.
     * @param principalId Object ID of the AAD principal or security-group.
     * @param scope Scope at which the role assignment is created.
     * @param principalType Type of the principal Id: User, Group or ServicePrincipal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoleAssignmentDetails>> createRoleAssignmentWithResponse(
            String roleAssignmentId, UUID roleId, UUID principalId, String scope, String principalType) {
        return this.serviceClient.createRoleAssignmentWithResponseAsync(
                roleAssignmentId, roleId, principalId, scope, principalType);
    }

    /**
     * Create role assignment.
     *
     * @param roleAssignmentId The roleAssignmentId parameter.
     * @param roleId Role ID of the Synapse Built-In Role.
     * @param principalId Object ID of the AAD principal or security-group.
     * @param scope Scope at which the role assignment is created.
     * @param principalType Type of the principal Id: User, Group or ServicePrincipal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleAssignmentDetails> createRoleAssignment(
            String roleAssignmentId, UUID roleId, UUID principalId, String scope, String principalType) {
        return this.serviceClient.createRoleAssignmentAsync(
                roleAssignmentId, roleId, principalId, scope, principalType);
    }

    /**
     * Create role assignment.
     *
     * @param roleAssignmentId The roleAssignmentId parameter.
     * @param roleId Role ID of the Synapse Built-In Role.
     * @param principalId Object ID of the AAD principal or security-group.
     * @param scope Scope at which the role assignment is created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleAssignmentDetails> createRoleAssignment(
            String roleAssignmentId, UUID roleId, UUID principalId, String scope) {
        return this.serviceClient.createRoleAssignmentAsync(roleAssignmentId, roleId, principalId, scope);
    }

    /**
     * Get role assignment by role assignment Id.
     *
     * @param roleAssignmentId The roleAssignmentId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignment by role assignment Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoleAssignmentDetails>> getRoleAssignmentByIdWithResponse(String roleAssignmentId) {
        return this.serviceClient.getRoleAssignmentByIdWithResponseAsync(roleAssignmentId);
    }

    /**
     * Get role assignment by role assignment Id.
     *
     * @param roleAssignmentId The roleAssignmentId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignment by role assignment Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleAssignmentDetails> getRoleAssignmentById(String roleAssignmentId) {
        return this.serviceClient.getRoleAssignmentByIdAsync(roleAssignmentId);
    }

    /**
     * Delete role assignment by role assignment Id.
     *
     * @param roleAssignmentId The roleAssignmentId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRoleAssignmentByIdWithResponse(String roleAssignmentId) {
        return this.serviceClient.deleteRoleAssignmentByIdWithResponseAsync(roleAssignmentId);
    }

    /**
     * Delete role assignment by role assignment Id.
     *
     * @param roleAssignmentId The roleAssignmentId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRoleAssignmentById(String roleAssignmentId) {
        return this.serviceClient.deleteRoleAssignmentByIdAsync(roleAssignmentId);
    }
}
