// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.synapse.accesscontrol.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.synapse.accesscontrol.models.Action;
import com.azure.synapse.accesscontrol.models.CheckAccessDecision;
import com.azure.synapse.accesscontrol.models.CheckPrincipalAccessRequest;
import com.azure.synapse.accesscontrol.models.ErrorContractException;
import com.azure.synapse.accesscontrol.models.SubjectInfo;
import java.util.List;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the AccessControlClient type. */
public final class AccessControlClientImpl {
    /** The proxy service used to perform REST calls. */
    private final AccessControlClientService service;

    /** The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. */
    private final String endpoint;

    /**
     * Gets The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The RoleDefinitionsImpl object to access its operations. */
    private final RoleDefinitionsImpl roleDefinitions;

    /**
     * Gets the RoleDefinitionsImpl object to access its operations.
     *
     * @return the RoleDefinitionsImpl object.
     */
    public RoleDefinitionsImpl getRoleDefinitions() {
        return this.roleDefinitions;
    }

    /** The RoleAssignmentsImpl object to access its operations. */
    private final RoleAssignmentsImpl roleAssignments;

    /**
     * Gets the RoleAssignmentsImpl object to access its operations.
     *
     * @return the RoleAssignmentsImpl object.
     */
    public RoleAssignmentsImpl getRoleAssignments() {
        return this.roleAssignments;
    }

    /**
     * Initializes an instance of AccessControlClient client.
     *
     * @param endpoint The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
     */
    public AccessControlClientImpl(String endpoint) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint);
    }

    /**
     * Initializes an instance of AccessControlClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
     */
    public AccessControlClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of AccessControlClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
     */
    public AccessControlClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.apiVersion = "2020-08-01-preview";
        this.roleDefinitions = new RoleDefinitionsImpl(this);
        this.roleAssignments = new RoleAssignmentsImpl(this);
        this.service =
                RestProxy.create(AccessControlClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for AccessControlClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AccessControlClient")
    private interface AccessControlClientService {
        @Post("/checkAccessSynapseRbac")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorContractException.class)
        Mono<Response<List<CheckAccessDecision>>> checkPrincipalAccess(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CheckPrincipalAccessRequest request,
                Context context);
    }

    /**
     * Check if the given principalId has access to perform list of actions at a given scope.
     *
     * @param subject Subject details.
     * @param actions List of actions.
     * @param scope Scope at which the check access is done.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check access response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CheckAccessDecision>>> checkPrincipalAccessWithResponseAsync(
            SubjectInfo subject, List<Action> actions, String scope) {
        CheckPrincipalAccessRequest request = new CheckPrincipalAccessRequest();
        request.setSubject(subject);
        request.setActions(actions);
        request.setScope(scope);
        return FluxUtil.withContext(
                context -> service.checkPrincipalAccess(this.getEndpoint(), this.getApiVersion(), request, context));
    }

    /**
     * Check if the given principalId has access to perform list of actions at a given scope.
     *
     * @param subject Subject details.
     * @param actions List of actions.
     * @param scope Scope at which the check access is done.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check access response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CheckAccessDecision>>> checkPrincipalAccessWithResponseAsync(
            SubjectInfo subject, List<Action> actions, String scope, Context context) {
        CheckPrincipalAccessRequest request = new CheckPrincipalAccessRequest();
        request.setSubject(subject);
        request.setActions(actions);
        request.setScope(scope);
        return service.checkPrincipalAccess(this.getEndpoint(), this.getApiVersion(), request, context);
    }

    /**
     * Check if the given principalId has access to perform list of actions at a given scope.
     *
     * @param subject Subject details.
     * @param actions List of actions.
     * @param scope Scope at which the check access is done.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check access response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CheckAccessDecision>> checkPrincipalAccessAsync(
            SubjectInfo subject, List<Action> actions, String scope) {
        return checkPrincipalAccessWithResponseAsync(subject, actions, scope)
                .flatMap(
                        (Response<List<CheckAccessDecision>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if the given principalId has access to perform list of actions at a given scope.
     *
     * @param subject Subject details.
     * @param actions List of actions.
     * @param scope Scope at which the check access is done.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check access response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CheckAccessDecision>> checkPrincipalAccessAsync(
            SubjectInfo subject, List<Action> actions, String scope, Context context) {
        return checkPrincipalAccessWithResponseAsync(subject, actions, scope, context)
                .flatMap(
                        (Response<List<CheckAccessDecision>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if the given principalId has access to perform list of actions at a given scope.
     *
     * @param subject Subject details.
     * @param actions List of actions.
     * @param scope Scope at which the check access is done.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check access response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CheckAccessDecision> checkPrincipalAccess(SubjectInfo subject, List<Action> actions, String scope) {
        return checkPrincipalAccessAsync(subject, actions, scope).block();
    }

    /**
     * Check if the given principalId has access to perform list of actions at a given scope.
     *
     * @param subject Subject details.
     * @param actions List of actions.
     * @param scope Scope at which the check access is done.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check access response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<CheckAccessDecision>> checkPrincipalAccessWithResponse(
            SubjectInfo subject, List<Action> actions, String scope, Context context) {
        return checkPrincipalAccessWithResponseAsync(subject, actions, scope, context).block();
    }
}
