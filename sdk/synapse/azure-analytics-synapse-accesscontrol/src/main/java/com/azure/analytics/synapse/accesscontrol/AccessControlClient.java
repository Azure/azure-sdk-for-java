// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.accesscontrol;

import com.azure.analytics.synapse.accesscontrol.implementation.AccessControlClientImpl;
import com.azure.analytics.synapse.accesscontrol.models.ErrorContractException;
import com.azure.analytics.synapse.accesscontrol.models.RoleAssignmentDetails;
import com.azure.analytics.synapse.accesscontrol.models.RoleAssignmentOptions;
import com.azure.analytics.synapse.accesscontrol.models.SynapseRole;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.util.List;

/** Initializes a new instance of the synchronous AccessControlClient type. */
@ServiceClient(builder = AccessControlClientBuilder.class)
public final class AccessControlClient {
    private final AccessControlClientImpl serviceClient;

    /**
     * Initializes an instance of AccessControlClient client.
     *
     * @param serviceClient the service client implementation.
     */
    AccessControlClient(AccessControlClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create role assignment.
     *
     * @param createRoleAssignmentOptions Role Assignment request details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignmentDetails createRoleAssignment(RoleAssignmentOptions createRoleAssignmentOptions) {
        return this.serviceClient.createRoleAssignment(createRoleAssignmentOptions);
    }

    /**
     * Create role assignment.
     *
     * @param createRoleAssignmentOptions Role Assignment request details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignment response details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignmentDetails> createRoleAssignmentWithResponse(
            RoleAssignmentOptions createRoleAssignmentOptions, Context context) {
        return this.serviceClient.createRoleAssignmentWithResponse(createRoleAssignmentOptions, context);
    }

    /**
     * List role assignments.
     *
     * @param roleId Synapse Built-In Role Id.
     * @param principalId Object ID of the AAD principal or security-group.
     * @param continuationToken Continuation token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of role assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<RoleAssignmentDetails> getRoleAssignments(String roleId, String principalId, String continuationToken) {
        return this.serviceClient.getRoleAssignments(roleId, principalId, continuationToken);
    }

    /**
     * List role assignments.
     *
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of role assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<RoleAssignmentDetails> getRoleAssignments() {
        return this.serviceClient.getRoleAssignments();
    }

    /**
     * List role assignments.
     *
     * @param roleId Synapse Built-In Role Id.
     * @param principalId Object ID of the AAD principal or security-group.
     * @param continuationToken Continuation token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of role assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<RoleAssignmentDetails>> getRoleAssignmentsWithResponse(
            String roleId, String principalId, String continuationToken, Context context) {
        return this.serviceClient.getRoleAssignmentsWithResponse(roleId, principalId, continuationToken, context);
    }

    /**
     * Get role assignment by role assignment Id.
     *
     * @param roleAssignmentId The ID of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignment by role assignment Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignmentDetails getRoleAssignmentById(String roleAssignmentId) {
        return this.serviceClient.getRoleAssignmentById(roleAssignmentId);
    }

    /**
     * Get role assignment by role assignment Id.
     *
     * @param roleAssignmentId The ID of the role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignment by role assignment Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignmentDetails> getRoleAssignmentByIdWithResponse(String roleAssignmentId, Context context) {
        return this.serviceClient.getRoleAssignmentByIdWithResponse(roleAssignmentId, context);
    }

    /**
     * Delete role assignment by role assignment Id.
     *
     * @param roleAssignmentId The ID of the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRoleAssignmentById(String roleAssignmentId) {
        this.serviceClient.deleteRoleAssignmentById(roleAssignmentId);
    }

    /**
     * Delete role assignment by role assignment Id.
     *
     * @param roleAssignmentId The ID of the role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRoleAssignmentByIdWithResponse(String roleAssignmentId, Context context) {
        return this.serviceClient.deleteRoleAssignmentByIdWithResponse(roleAssignmentId, context);
    }

    /**
     * List role assignments of the caller.
     *
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Post200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> getCallerRoleAssignments() {
        return this.serviceClient.getCallerRoleAssignments();
    }

    /**
     * List role assignments of the caller.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Post200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> getCallerRoleAssignmentsWithResponse(Context context) {
        return this.serviceClient.getCallerRoleAssignmentsWithResponse(context);
    }

    /**
     * List roles.
     *
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Synapse roles available.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SynapseRole> getRoleDefinitions() {
        return this.serviceClient.getRoleDefinitions();
    }

    /**
     * List roles.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Synapse roles available.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SynapseRole> getRoleDefinitions(Context context) {
        return this.serviceClient.getRoleDefinitions(context);
    }

    /**
     * Get role by role Id.
     *
     * @param roleId Synapse Built-In Role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role by role Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SynapseRole getRoleDefinitionById(String roleId) {
        return this.serviceClient.getRoleDefinitionById(roleId);
    }

    /**
     * Get role by role Id.
     *
     * @param roleId Synapse Built-In Role Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorContractException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role by role Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SynapseRole> getRoleDefinitionByIdWithResponse(String roleId, Context context) {
        return this.serviceClient.getRoleDefinitionByIdWithResponse(roleId, context);
    }
}
