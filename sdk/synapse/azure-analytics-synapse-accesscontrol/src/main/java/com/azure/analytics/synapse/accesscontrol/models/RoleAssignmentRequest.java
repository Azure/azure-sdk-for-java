// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.accesscontrol.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * Role Assignment request details.
 */
@Fluent
public final class RoleAssignmentRequest implements JsonSerializable<RoleAssignmentRequest> {
    /*
     * Role ID of the Synapse Built-In Role
     */
    private UUID roleId;

    /*
     * Object ID of the AAD principal or security-group
     */
    private UUID principalId;

    /*
     * Scope at which the role assignment is created
     */
    private String scope;

    /*
     * Type of the principal Id: User, Group or ServicePrincipal
     */
    private String principalType;

    /**
     * Creates an instance of RoleAssignmentRequest class.
     */
    public RoleAssignmentRequest() {
    }

    /**
     * Get the roleId property: Role ID of the Synapse Built-In Role.
     * 
     * @return the roleId value.
     */
    public UUID getRoleId() {
        return this.roleId;
    }

    /**
     * Set the roleId property: Role ID of the Synapse Built-In Role.
     * 
     * @param roleId the roleId value to set.
     * @return the RoleAssignmentRequest object itself.
     */
    public RoleAssignmentRequest setRoleId(UUID roleId) {
        this.roleId = roleId;
        return this;
    }

    /**
     * Get the principalId property: Object ID of the AAD principal or security-group.
     * 
     * @return the principalId value.
     */
    public UUID getPrincipalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: Object ID of the AAD principal or security-group.
     * 
     * @param principalId the principalId value to set.
     * @return the RoleAssignmentRequest object itself.
     */
    public RoleAssignmentRequest setPrincipalId(UUID principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the scope property: Scope at which the role assignment is created.
     * 
     * @return the scope value.
     */
    public String getScope() {
        return this.scope;
    }

    /**
     * Set the scope property: Scope at which the role assignment is created.
     * 
     * @param scope the scope value to set.
     * @return the RoleAssignmentRequest object itself.
     */
    public RoleAssignmentRequest setScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the principalType property: Type of the principal Id: User, Group or ServicePrincipal.
     * 
     * @return the principalType value.
     */
    public String getPrincipalType() {
        return this.principalType;
    }

    /**
     * Set the principalType property: Type of the principal Id: User, Group or ServicePrincipal.
     * 
     * @param principalType the principalType value to set.
     * @return the RoleAssignmentRequest object itself.
     */
    public RoleAssignmentRequest setPrincipalType(String principalType) {
        this.principalType = principalType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("roleId", Objects.toString(this.roleId, null));
        jsonWriter.writeStringField("principalId", Objects.toString(this.principalId, null));
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("principalType", this.principalType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoleAssignmentRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoleAssignmentRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RoleAssignmentRequest.
     */
    public static RoleAssignmentRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoleAssignmentRequest deserializedRoleAssignmentRequest = new RoleAssignmentRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("roleId".equals(fieldName)) {
                    deserializedRoleAssignmentRequest.roleId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("principalId".equals(fieldName)) {
                    deserializedRoleAssignmentRequest.principalId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("scope".equals(fieldName)) {
                    deserializedRoleAssignmentRequest.scope = reader.getString();
                } else if ("principalType".equals(fieldName)) {
                    deserializedRoleAssignmentRequest.principalType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoleAssignmentRequest;
        });
    }
}
