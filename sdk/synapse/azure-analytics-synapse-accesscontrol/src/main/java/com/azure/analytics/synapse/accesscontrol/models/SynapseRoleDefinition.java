// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.accesscontrol.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Synapse role definition details.
 */
@Fluent
public final class SynapseRoleDefinition implements JsonSerializable<SynapseRoleDefinition> {
    /*
     * Role Definition ID
     */
    private UUID id;

    /*
     * Name of the Synapse role
     */
    private String name;

    /*
     * Is a built-in role or not
     */
    private Boolean isBuiltIn;

    /*
     * Description for the Synapse role
     */
    private String description;

    /*
     * Permissions for the Synapse role
     */
    private List<SynapseRbacPermission> permissions;

    /*
     * Allowed scopes for the Synapse role
     */
    private List<String> scopes;

    /*
     * Availability of the Synapse role
     */
    private String availabilityStatus;

    /**
     * Creates an instance of SynapseRoleDefinition class.
     */
    public SynapseRoleDefinition() {
    }

    /**
     * Get the id property: Role Definition ID.
     * 
     * @return the id value.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Set the id property: Role Definition ID.
     * 
     * @param id the id value to set.
     * @return the SynapseRoleDefinition object itself.
     */
    public SynapseRoleDefinition setId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Name of the Synapse role.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the Synapse role.
     * 
     * @param name the name value to set.
     * @return the SynapseRoleDefinition object itself.
     */
    public SynapseRoleDefinition setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the isBuiltIn property: Is a built-in role or not.
     * 
     * @return the isBuiltIn value.
     */
    public Boolean isBuiltIn() {
        return this.isBuiltIn;
    }

    /**
     * Set the isBuiltIn property: Is a built-in role or not.
     * 
     * @param isBuiltIn the isBuiltIn value to set.
     * @return the SynapseRoleDefinition object itself.
     */
    public SynapseRoleDefinition setIsBuiltIn(Boolean isBuiltIn) {
        this.isBuiltIn = isBuiltIn;
        return this;
    }

    /**
     * Get the description property: Description for the Synapse role.
     * 
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Description for the Synapse role.
     * 
     * @param description the description value to set.
     * @return the SynapseRoleDefinition object itself.
     */
    public SynapseRoleDefinition setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the permissions property: Permissions for the Synapse role.
     * 
     * @return the permissions value.
     */
    public List<SynapseRbacPermission> getPermissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: Permissions for the Synapse role.
     * 
     * @param permissions the permissions value to set.
     * @return the SynapseRoleDefinition object itself.
     */
    public SynapseRoleDefinition setPermissions(List<SynapseRbacPermission> permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the scopes property: Allowed scopes for the Synapse role.
     * 
     * @return the scopes value.
     */
    public List<String> getScopes() {
        return this.scopes;
    }

    /**
     * Set the scopes property: Allowed scopes for the Synapse role.
     * 
     * @param scopes the scopes value to set.
     * @return the SynapseRoleDefinition object itself.
     */
    public SynapseRoleDefinition setScopes(List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Get the availabilityStatus property: Availability of the Synapse role.
     * 
     * @return the availabilityStatus value.
     */
    public String getAvailabilityStatus() {
        return this.availabilityStatus;
    }

    /**
     * Set the availabilityStatus property: Availability of the Synapse role.
     * 
     * @param availabilityStatus the availabilityStatus value to set.
     * @return the SynapseRoleDefinition object itself.
     */
    public SynapseRoleDefinition setAvailabilityStatus(String availabilityStatus) {
        this.availabilityStatus = availabilityStatus;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", Objects.toString(this.id, null));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBooleanField("isBuiltIn", this.isBuiltIn);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("permissions", this.permissions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("scopes", this.scopes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("availabilityStatus", this.availabilityStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SynapseRoleDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SynapseRoleDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SynapseRoleDefinition.
     */
    public static SynapseRoleDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SynapseRoleDefinition deserializedSynapseRoleDefinition = new SynapseRoleDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSynapseRoleDefinition.id
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("name".equals(fieldName)) {
                    deserializedSynapseRoleDefinition.name = reader.getString();
                } else if ("isBuiltIn".equals(fieldName)) {
                    deserializedSynapseRoleDefinition.isBuiltIn = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedSynapseRoleDefinition.description = reader.getString();
                } else if ("permissions".equals(fieldName)) {
                    List<SynapseRbacPermission> permissions
                        = reader.readArray(reader1 -> SynapseRbacPermission.fromJson(reader1));
                    deserializedSynapseRoleDefinition.permissions = permissions;
                } else if ("scopes".equals(fieldName)) {
                    List<String> scopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedSynapseRoleDefinition.scopes = scopes;
                } else if ("availabilityStatus".equals(fieldName)) {
                    deserializedSynapseRoleDefinition.availabilityStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSynapseRoleDefinition;
        });
    }
}
