// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.accesscontrol.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Role Assignment response details.
 */
@Fluent
public final class RoleAssignmentDetailsList implements JsonSerializable<RoleAssignmentDetailsList> {
    /*
     * Number of role assignments
     */
    private Integer count;

    /*
     * A list of role assignments
     */
    private List<RoleAssignmentDetails> value;

    /**
     * Creates an instance of RoleAssignmentDetailsList class.
     */
    public RoleAssignmentDetailsList() {
    }

    /**
     * Get the count property: Number of role assignments.
     * 
     * @return the count value.
     */
    public Integer getCount() {
        return this.count;
    }

    /**
     * Set the count property: Number of role assignments.
     * 
     * @param count the count value to set.
     * @return the RoleAssignmentDetailsList object itself.
     */
    public RoleAssignmentDetailsList setCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the value property: A list of role assignments.
     * 
     * @return the value value.
     */
    public List<RoleAssignmentDetails> getValue() {
        return this.value;
    }

    /**
     * Set the value property: A list of role assignments.
     * 
     * @param value the value value to set.
     * @return the RoleAssignmentDetailsList object itself.
     */
    public RoleAssignmentDetailsList setValue(List<RoleAssignmentDetails> value) {
        this.value = value;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoleAssignmentDetailsList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoleAssignmentDetailsList if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoleAssignmentDetailsList.
     */
    public static RoleAssignmentDetailsList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoleAssignmentDetailsList deserializedRoleAssignmentDetailsList = new RoleAssignmentDetailsList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedRoleAssignmentDetailsList.count = reader.getNullable(JsonReader::getInt);
                } else if ("value".equals(fieldName)) {
                    List<RoleAssignmentDetails> value
                        = reader.readArray(reader1 -> RoleAssignmentDetails.fromJson(reader1));
                    deserializedRoleAssignmentDetailsList.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoleAssignmentDetailsList;
        });
    }
}
