/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.synapse.v2020_12_01.implementation.SynapseManager;
import java.util.Map;
import java.util.List;
import java.util.UUID;
import com.microsoft.azure.management.synapse.v2020_12_01.implementation.PrivateEndpointConnectionInner;
import com.microsoft.azure.management.synapse.v2020_12_01.implementation.WorkspaceInner;

/**
 * Type representing Workspace.
 */
public interface Workspace extends HasInner<WorkspaceInner>, Resource, GroupableResourceCore<SynapseManager, WorkspaceInner>, HasResourceGroup, Refreshable<Workspace>, Updatable<Workspace.Update>, HasManager<SynapseManager> {
    /**
     * @return the adlaResourceId value.
     */
    String adlaResourceId();

    /**
     * @return the connectivityEndpoints value.
     */
    Map<String, String> connectivityEndpoints();

    /**
     * @return the defaultDataLakeStorage value.
     */
    DataLakeStorageAccountDetails defaultDataLakeStorage();

    /**
     * @return the encryption value.
     */
    EncryptionDetails encryption();

    /**
     * @return the extraProperties value.
     */
    Map<String, Object> extraProperties();

    /**
     * @return the identity value.
     */
    ManagedIdentity identity();

    /**
     * @return the managedResourceGroupName value.
     */
    String managedResourceGroupName();

    /**
     * @return the managedVirtualNetwork value.
     */
    String managedVirtualNetwork();

    /**
     * @return the managedVirtualNetworkSettings value.
     */
    ManagedVirtualNetworkSettings managedVirtualNetworkSettings();

    /**
     * @return the privateEndpointConnections value.
     */
    List<PrivateEndpointConnection> privateEndpointConnections();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the purviewConfiguration value.
     */
    PurviewConfiguration purviewConfiguration();

    /**
     * @return the sqlAdministratorLogin value.
     */
    String sqlAdministratorLogin();

    /**
     * @return the sqlAdministratorLoginPassword value.
     */
    String sqlAdministratorLoginPassword();

    /**
     * @return the virtualNetworkProfile value.
     */
    VirtualNetworkProfile virtualNetworkProfile();

    /**
     * @return the workspaceRepositoryConfiguration value.
     */
    WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration();

    /**
     * @return the workspaceUID value.
     */
    UUID workspaceUID();

    /**
     * The entirety of the Workspace definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Workspace definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Workspace definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Workspace definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the workspace definition allowing to specify ConnectivityEndpoints.
         */
        interface WithConnectivityEndpoints {
            /**
             * Specifies connectivityEndpoints.
             * @param connectivityEndpoints Connectivity endpoints
             * @return the next definition stage
             */
            WithCreate withConnectivityEndpoints(Map<String, String> connectivityEndpoints);
        }

        /**
         * The stage of the workspace definition allowing to specify DefaultDataLakeStorage.
         */
        interface WithDefaultDataLakeStorage {
            /**
             * Specifies defaultDataLakeStorage.
             * @param defaultDataLakeStorage Workspace default data lake storage account details
             * @return the next definition stage
             */
            WithCreate withDefaultDataLakeStorage(DataLakeStorageAccountDetails defaultDataLakeStorage);
        }

        /**
         * The stage of the workspace definition allowing to specify Encryption.
         */
        interface WithEncryption {
            /**
             * Specifies encryption.
             * @param encryption The encryption details of the workspace
             * @return the next definition stage
             */
            WithCreate withEncryption(EncryptionDetails encryption);
        }

        /**
         * The stage of the workspace definition allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity Identity of the workspace
             * @return the next definition stage
             */
            WithCreate withIdentity(ManagedIdentity identity);
        }

        /**
         * The stage of the workspace definition allowing to specify ManagedResourceGroupName.
         */
        interface WithManagedResourceGroupName {
            /**
             * Specifies managedResourceGroupName.
             * @param managedResourceGroupName Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and '-', '_', '(', ')' and'.'. Note that the name cannot end with '.'
             * @return the next definition stage
             */
            WithCreate withManagedResourceGroupName(String managedResourceGroupName);
        }

        /**
         * The stage of the workspace definition allowing to specify ManagedVirtualNetwork.
         */
        interface WithManagedVirtualNetwork {
            /**
             * Specifies managedVirtualNetwork.
             * @param managedVirtualNetwork Setting this to 'default' will ensure that all compute for this workspace is in a virtual network managed on behalf of the user
             * @return the next definition stage
             */
            WithCreate withManagedVirtualNetwork(String managedVirtualNetwork);
        }

        /**
         * The stage of the workspace definition allowing to specify ManagedVirtualNetworkSettings.
         */
        interface WithManagedVirtualNetworkSettings {
            /**
             * Specifies managedVirtualNetworkSettings.
             * @param managedVirtualNetworkSettings Managed Virtual Network Settings
             * @return the next definition stage
             */
            WithCreate withManagedVirtualNetworkSettings(ManagedVirtualNetworkSettings managedVirtualNetworkSettings);
        }

        /**
         * The stage of the workspace definition allowing to specify PrivateEndpointConnections.
         */
        interface WithPrivateEndpointConnections {
            /**
             * Specifies privateEndpointConnections.
             * @param privateEndpointConnections Private endpoint connections to the workspace
             * @return the next definition stage
             */
            WithCreate withPrivateEndpointConnections(List<PrivateEndpointConnectionInner> privateEndpointConnections);
        }

        /**
         * The stage of the workspace definition allowing to specify PurviewConfiguration.
         */
        interface WithPurviewConfiguration {
            /**
             * Specifies purviewConfiguration.
             * @param purviewConfiguration Purview Configuration
             * @return the next definition stage
             */
            WithCreate withPurviewConfiguration(PurviewConfiguration purviewConfiguration);
        }

        /**
         * The stage of the workspace definition allowing to specify SqlAdministratorLogin.
         */
        interface WithSqlAdministratorLogin {
            /**
             * Specifies sqlAdministratorLogin.
             * @param sqlAdministratorLogin Login for workspace SQL active directory administrator
             * @return the next definition stage
             */
            WithCreate withSqlAdministratorLogin(String sqlAdministratorLogin);
        }

        /**
         * The stage of the workspace definition allowing to specify SqlAdministratorLoginPassword.
         */
        interface WithSqlAdministratorLoginPassword {
            /**
             * Specifies sqlAdministratorLoginPassword.
             * @param sqlAdministratorLoginPassword SQL administrator login password
             * @return the next definition stage
             */
            WithCreate withSqlAdministratorLoginPassword(String sqlAdministratorLoginPassword);
        }

        /**
         * The stage of the workspace definition allowing to specify VirtualNetworkProfile.
         */
        interface WithVirtualNetworkProfile {
            /**
             * Specifies virtualNetworkProfile.
             * @param virtualNetworkProfile Virtual Network profile
             * @return the next definition stage
             */
            WithCreate withVirtualNetworkProfile(VirtualNetworkProfile virtualNetworkProfile);
        }

        /**
         * The stage of the workspace definition allowing to specify WorkspaceRepositoryConfiguration.
         */
        interface WithWorkspaceRepositoryConfiguration {
            /**
             * Specifies workspaceRepositoryConfiguration.
             * @param workspaceRepositoryConfiguration Git integration settings
             * @return the next definition stage
             */
            WithCreate withWorkspaceRepositoryConfiguration(WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Workspace>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithConnectivityEndpoints, DefinitionStages.WithDefaultDataLakeStorage, DefinitionStages.WithEncryption, DefinitionStages.WithIdentity, DefinitionStages.WithManagedResourceGroupName, DefinitionStages.WithManagedVirtualNetwork, DefinitionStages.WithManagedVirtualNetworkSettings, DefinitionStages.WithPrivateEndpointConnections, DefinitionStages.WithPurviewConfiguration, DefinitionStages.WithSqlAdministratorLogin, DefinitionStages.WithSqlAdministratorLoginPassword, DefinitionStages.WithVirtualNetworkProfile, DefinitionStages.WithWorkspaceRepositoryConfiguration {
        }
    }
    /**
     * The template for a Workspace update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Workspace>, Resource.UpdateWithTags<Update>, UpdateStages.WithEncryption, UpdateStages.WithIdentity, UpdateStages.WithManagedVirtualNetworkSettings, UpdateStages.WithPurviewConfiguration, UpdateStages.WithSqlAdministratorLoginPassword, UpdateStages.WithWorkspaceRepositoryConfiguration {
    }

    /**
     * Grouping of Workspace update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the workspace update allowing to specify Encryption.
         */
        interface WithEncryption {
            /**
             * Specifies encryption.
             * @param encryption The encryption details of the workspace
             * @return the next update stage
             */
            Update withEncryption(EncryptionDetails encryption);
        }

        /**
         * The stage of the workspace update allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity The identity of the workspace
             * @return the next update stage
             */
            Update withIdentity(ManagedIdentity identity);
        }

        /**
         * The stage of the workspace update allowing to specify ManagedVirtualNetworkSettings.
         */
        interface WithManagedVirtualNetworkSettings {
            /**
             * Specifies managedVirtualNetworkSettings.
             * @param managedVirtualNetworkSettings Managed Virtual Network Settings
             * @return the next update stage
             */
            Update withManagedVirtualNetworkSettings(ManagedVirtualNetworkSettings managedVirtualNetworkSettings);
        }

        /**
         * The stage of the workspace update allowing to specify PurviewConfiguration.
         */
        interface WithPurviewConfiguration {
            /**
             * Specifies purviewConfiguration.
             * @param purviewConfiguration Purview Configuration
             * @return the next update stage
             */
            Update withPurviewConfiguration(PurviewConfiguration purviewConfiguration);
        }

        /**
         * The stage of the workspace update allowing to specify SqlAdministratorLoginPassword.
         */
        interface WithSqlAdministratorLoginPassword {
            /**
             * Specifies sqlAdministratorLoginPassword.
             * @param sqlAdministratorLoginPassword SQL administrator login password
             * @return the next update stage
             */
            Update withSqlAdministratorLoginPassword(String sqlAdministratorLoginPassword);
        }

        /**
         * The stage of the workspace update allowing to specify WorkspaceRepositoryConfiguration.
         */
        interface WithWorkspaceRepositoryConfiguration {
            /**
             * Specifies workspaceRepositoryConfiguration.
             * @param workspaceRepositoryConfiguration Git integration settings
             * @return the next update stage
             */
            Update withWorkspaceRepositoryConfiguration(WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration);
        }

    }
}
