/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.synapse.v2020_12_01.ErrorResponseException;
import com.microsoft.azure.management.synapse.v2020_12_01.IntegrationRuntimeAuthKeyName;
import com.microsoft.azure.management.synapse.v2020_12_01.IntegrationRuntimeRegenerateKeyParameters;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in IntegrationRuntimeAuthKeysOperations.
 */
public class IntegrationRuntimeAuthKeysOperationsInner {
    /** The Retrofit service to perform REST calls. */
    private IntegrationRuntimeAuthKeysOperationsService service;
    /** The service client containing this operation class. */
    private SynapseManagementClientImpl client;

    /**
     * Initializes an instance of IntegrationRuntimeAuthKeysOperationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public IntegrationRuntimeAuthKeysOperationsInner(Retrofit retrofit, SynapseManagementClientImpl client) {
        this.service = retrofit.create(IntegrationRuntimeAuthKeysOperationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for IntegrationRuntimeAuthKeysOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface IntegrationRuntimeAuthKeysOperationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.IntegrationRuntimeAuthKeysOperations regenerate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey")
        Observable<Response<ResponseBody>> regenerate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("integrationRuntimeName") String integrationRuntimeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body IntegrationRuntimeRegenerateKeyParameters regenerateKeyParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.IntegrationRuntimeAuthKeysOperations list" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("integrationRuntimeName") String integrationRuntimeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationRuntimeAuthKeysInner object if successful.
     */
    public IntegrationRuntimeAuthKeysInner regenerate(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        return regenerateWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName).toBlocking().single().body();
    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationRuntimeAuthKeysInner> regenerateAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName, final ServiceCallback<IntegrationRuntimeAuthKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName), serviceCallback);
    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationRuntimeAuthKeysInner object
     */
    public Observable<IntegrationRuntimeAuthKeysInner> regenerateAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        return regenerateWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName).map(new Func1<ServiceResponse<IntegrationRuntimeAuthKeysInner>, IntegrationRuntimeAuthKeysInner>() {
            @Override
            public IntegrationRuntimeAuthKeysInner call(ServiceResponse<IntegrationRuntimeAuthKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationRuntimeAuthKeysInner object
     */
    public Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>> regenerateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (integrationRuntimeName == null) {
            throw new IllegalArgumentException("Parameter integrationRuntimeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final IntegrationRuntimeAuthKeyName keyName = null;
        IntegrationRuntimeRegenerateKeyParameters regenerateKeyParameters = new IntegrationRuntimeRegenerateKeyParameters();
        regenerateKeyParameters.withKeyName(null);
        return service.regenerate(this.client.subscriptionId(), resourceGroupName, workspaceName, integrationRuntimeName, this.client.apiVersion(), this.client.acceptLanguage(), regenerateKeyParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationRuntimeAuthKeysInner> clientResponse = regenerateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param keyName The name of the authentication key to regenerate. Possible values include: 'authKey1', 'authKey2'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationRuntimeAuthKeysInner object if successful.
     */
    public IntegrationRuntimeAuthKeysInner regenerate(String resourceGroupName, String workspaceName, String integrationRuntimeName, IntegrationRuntimeAuthKeyName keyName) {
        return regenerateWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName, keyName).toBlocking().single().body();
    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param keyName The name of the authentication key to regenerate. Possible values include: 'authKey1', 'authKey2'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationRuntimeAuthKeysInner> regenerateAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName, IntegrationRuntimeAuthKeyName keyName, final ServiceCallback<IntegrationRuntimeAuthKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName, keyName), serviceCallback);
    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param keyName The name of the authentication key to regenerate. Possible values include: 'authKey1', 'authKey2'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationRuntimeAuthKeysInner object
     */
    public Observable<IntegrationRuntimeAuthKeysInner> regenerateAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName, IntegrationRuntimeAuthKeyName keyName) {
        return regenerateWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName, keyName).map(new Func1<ServiceResponse<IntegrationRuntimeAuthKeysInner>, IntegrationRuntimeAuthKeysInner>() {
            @Override
            public IntegrationRuntimeAuthKeysInner call(ServiceResponse<IntegrationRuntimeAuthKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate integration runtime authentication key.
     * Regenerate the authentication key for an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param keyName The name of the authentication key to regenerate. Possible values include: 'authKey1', 'authKey2'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationRuntimeAuthKeysInner object
     */
    public Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>> regenerateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName, IntegrationRuntimeAuthKeyName keyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (integrationRuntimeName == null) {
            throw new IllegalArgumentException("Parameter integrationRuntimeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        IntegrationRuntimeRegenerateKeyParameters regenerateKeyParameters = new IntegrationRuntimeRegenerateKeyParameters();
        regenerateKeyParameters.withKeyName(keyName);
        return service.regenerate(this.client.subscriptionId(), resourceGroupName, workspaceName, integrationRuntimeName, this.client.apiVersion(), this.client.acceptLanguage(), regenerateKeyParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationRuntimeAuthKeysInner> clientResponse = regenerateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationRuntimeAuthKeysInner> regenerateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationRuntimeAuthKeysInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationRuntimeAuthKeysInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List integration runtime authentication keys.
     * List authentication keys in an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationRuntimeAuthKeysInner object if successful.
     */
    public IntegrationRuntimeAuthKeysInner list(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        return listWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName).toBlocking().single().body();
    }

    /**
     * List integration runtime authentication keys.
     * List authentication keys in an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationRuntimeAuthKeysInner> listAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName, final ServiceCallback<IntegrationRuntimeAuthKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName), serviceCallback);
    }

    /**
     * List integration runtime authentication keys.
     * List authentication keys in an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationRuntimeAuthKeysInner object
     */
    public Observable<IntegrationRuntimeAuthKeysInner> listAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        return listWithServiceResponseAsync(resourceGroupName, workspaceName, integrationRuntimeName).map(new Func1<ServiceResponse<IntegrationRuntimeAuthKeysInner>, IntegrationRuntimeAuthKeysInner>() {
            @Override
            public IntegrationRuntimeAuthKeysInner call(ServiceResponse<IntegrationRuntimeAuthKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List integration runtime authentication keys.
     * List authentication keys in an integration runtime.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationRuntimeAuthKeysInner object
     */
    public Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>> listWithServiceResponseAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (integrationRuntimeName == null) {
            throw new IllegalArgumentException("Parameter integrationRuntimeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, workspaceName, integrationRuntimeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationRuntimeAuthKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationRuntimeAuthKeysInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationRuntimeAuthKeysInner> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationRuntimeAuthKeysInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationRuntimeAuthKeysInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
