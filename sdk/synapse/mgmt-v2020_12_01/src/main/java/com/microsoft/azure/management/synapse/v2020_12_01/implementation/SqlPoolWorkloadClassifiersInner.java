/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SqlPoolWorkloadClassifiers.
 */
public class SqlPoolWorkloadClassifiersInner {
    /** The Retrofit service to perform REST calls. */
    private SqlPoolWorkloadClassifiersService service;
    /** The service client containing this operation class. */
    private SynapseManagementClientImpl client;

    /**
     * Initializes an instance of SqlPoolWorkloadClassifiersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SqlPoolWorkloadClassifiersInner(Retrofit retrofit, SynapseManagementClientImpl client) {
        this.service = retrofit.create(SqlPoolWorkloadClassifiersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SqlPoolWorkloadClassifiers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SqlPoolWorkloadClassifiersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolWorkloadClassifiers get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Path("workloadGroupName") String workloadGroupName, @Path("workloadClassifierName") String workloadClassifierName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolWorkloadClassifiers createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Path("workloadGroupName") String workloadGroupName, @Path("workloadClassifierName") String workloadClassifierName, @Query("api-version") String apiVersion, @Body WorkloadClassifierInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolWorkloadClassifiers beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Path("workloadGroupName") String workloadGroupName, @Path("workloadClassifierName") String workloadClassifierName, @Query("api-version") String apiVersion, @Body WorkloadClassifierInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolWorkloadClassifiers delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Path("workloadGroupName") String workloadGroupName, @Path("workloadClassifierName") String workloadClassifierName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolWorkloadClassifiers beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Path("workloadGroupName") String workloadGroupName, @Path("workloadClassifierName") String workloadClassifierName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolWorkloadClassifiers list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}/workloadClassifiers")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Path("workloadGroupName") String workloadGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolWorkloadClassifiers listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get workload classifier.
     * Get a workload classifier of Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadClassifierInner object if successful.
     */
    public WorkloadClassifierInner get(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).toBlocking().single().body();
    }

    /**
     * Get workload classifier.
     * Get a workload classifier of Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadClassifierInner> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, final ServiceCallback<WorkloadClassifierInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName), serviceCallback);
    }

    /**
     * Get workload classifier.
     * Get a workload classifier of Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadClassifierInner object
     */
    public Observable<WorkloadClassifierInner> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).map(new Func1<ServiceResponse<WorkloadClassifierInner>, WorkloadClassifierInner>() {
            @Override
            public WorkloadClassifierInner call(ServiceResponse<WorkloadClassifierInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get workload classifier.
     * Get a workload classifier of Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadClassifierInner object
     */
    public Observable<ServiceResponse<WorkloadClassifierInner>> getWithServiceResponseAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (workloadGroupName == null) {
            throw new IllegalArgumentException("Parameter workloadGroupName is required and cannot be null.");
        }
        if (workloadClassifierName == null) {
            throw new IllegalArgumentException("Parameter workloadClassifierName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadClassifierInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadClassifierInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadClassifierInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadClassifierInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadClassifierInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadClassifierInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadClassifierInner object if successful.
     */
    public WorkloadClassifierInner createOrUpdate(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).toBlocking().last().body();
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadClassifierInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters, final ServiceCallback<WorkloadClassifierInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters), serviceCallback);
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadClassifierInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).map(new Func1<ServiceResponse<WorkloadClassifierInner>, WorkloadClassifierInner>() {
            @Override
            public WorkloadClassifierInner call(ServiceResponse<WorkloadClassifierInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadClassifierInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (workloadGroupName == null) {
            throw new IllegalArgumentException("Parameter workloadGroupName is required and cannot be null.");
        }
        if (workloadClassifierName == null) {
            throw new IllegalArgumentException("Parameter workloadClassifierName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadClassifierInner>() { }.getType());
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadClassifierInner object if successful.
     */
    public WorkloadClassifierInner beginCreateOrUpdate(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).toBlocking().single().body();
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadClassifierInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters, final ServiceCallback<WorkloadClassifierInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters), serviceCallback);
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadClassifierInner object
     */
    public Observable<WorkloadClassifierInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).map(new Func1<ServiceResponse<WorkloadClassifierInner>, WorkloadClassifierInner>() {
            @Override
            public WorkloadClassifierInner call(ServiceResponse<WorkloadClassifierInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Or Update workload classifier.
     * Create Or Update workload classifier for a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadClassifierInner object
     */
    public Observable<ServiceResponse<WorkloadClassifierInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, WorkloadClassifierInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (workloadGroupName == null) {
            throw new IllegalArgumentException("Parameter workloadGroupName is required and cannot be null.");
        }
        if (workloadClassifierName == null) {
            throw new IllegalArgumentException("Parameter workloadClassifierName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadClassifierInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadClassifierInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadClassifierInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadClassifierInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadClassifierInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadClassifierInner>() { }.getType())
                .register(201, new TypeToken<WorkloadClassifierInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        deleteWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).toBlocking().last().body();
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName), serviceCallback);
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        return deleteWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (workloadGroupName == null) {
            throw new IllegalArgumentException("Parameter workloadGroupName is required and cannot be null.");
        }
        if (workloadClassifierName == null) {
            throw new IllegalArgumentException("Parameter workloadClassifierName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).toBlocking().single().body();
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName), serviceCallback);
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove workload classifier.
     * Remove workload classifier of a Sql pool's workload group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName, String workloadClassifierName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (workloadGroupName == null) {
            throw new IllegalArgumentException("Parameter workloadGroupName is required and cannot be null.");
        }
        if (workloadClassifierName == null) {
            throw new IllegalArgumentException("Parameter workloadClassifierName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadClassifierInner&gt; object if successful.
     */
    public PagedList<WorkloadClassifierInner> list(final String resourceGroupName, final String workspaceName, final String sqlPoolName, final String workloadGroupName) {
        ServiceResponse<Page<WorkloadClassifierInner>> response = listSinglePageAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName).toBlocking().single();
        return new PagedList<WorkloadClassifierInner>(response.body()) {
            @Override
            public Page<WorkloadClassifierInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadClassifierInner>> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName, final String workloadGroupName, final ListOperationCallback<WorkloadClassifierInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadClassifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadClassifierInner&gt; object
     */
    public Observable<Page<WorkloadClassifierInner>> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName, final String workloadGroupName) {
        return listWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName)
            .map(new Func1<ServiceResponse<Page<WorkloadClassifierInner>>, Page<WorkloadClassifierInner>>() {
                @Override
                public Page<WorkloadClassifierInner> call(ServiceResponse<Page<WorkloadClassifierInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadClassifierInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName, final String workloadGroupName) {
        return listSinglePageAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadClassifierInner>>, Observable<ServiceResponse<Page<WorkloadClassifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> call(ServiceResponse<Page<WorkloadClassifierInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
    ServiceResponse<PageImpl<WorkloadClassifierInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadClassifierInner>> * @param workspaceName The name of the workspace
    ServiceResponse<PageImpl<WorkloadClassifierInner>> * @param sqlPoolName SQL pool name
    ServiceResponse<PageImpl<WorkloadClassifierInner>> * @param workloadGroupName The name of the workload group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadClassifierInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> listSinglePageAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName, final String workloadGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (workloadGroupName == null) {
            throw new IllegalArgumentException("Parameter workloadGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadClassifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadClassifierInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadClassifierInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadClassifierInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadClassifierInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadClassifierInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadClassifierInner&gt; object if successful.
     */
    public PagedList<WorkloadClassifierInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadClassifierInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadClassifierInner>(response.body()) {
            @Override
            public Page<WorkloadClassifierInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadClassifierInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadClassifierInner>> serviceFuture, final ListOperationCallback<WorkloadClassifierInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadClassifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadClassifierInner&gt; object
     */
    public Observable<Page<WorkloadClassifierInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadClassifierInner>>, Page<WorkloadClassifierInner>>() {
                @Override
                public Page<WorkloadClassifierInner> call(ServiceResponse<Page<WorkloadClassifierInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadClassifierInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadClassifierInner>>, Observable<ServiceResponse<Page<WorkloadClassifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> call(ServiceResponse<Page<WorkloadClassifierInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Sql pool's workload classifier.
     * Get list of  Sql pool's workload classifier for workload groups.
     *
    ServiceResponse<PageImpl<WorkloadClassifierInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadClassifierInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadClassifierInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadClassifierInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadClassifierInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadClassifierInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadClassifierInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadClassifierInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadClassifierInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
