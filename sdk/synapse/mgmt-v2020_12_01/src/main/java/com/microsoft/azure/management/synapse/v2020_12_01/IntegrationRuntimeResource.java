/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.synapse.v2020_12_01.implementation.IntegrationRuntimeResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.synapse.v2020_12_01.implementation.SynapseManager;
import com.microsoft.azure.management.synapse.v2020_12_01.implementation.IntegrationRuntimeInner;
import java.util.Map;

/**
 * Type representing IntegrationRuntimeResource.
 */
public interface IntegrationRuntimeResource extends HasInner<IntegrationRuntimeResourceInner>, Indexable, Refreshable<IntegrationRuntimeResource>, Updatable<IntegrationRuntimeResource.Update>, HasManager<SynapseManager> {
    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the properties value.
     */
    IntegrationRuntimeInner properties();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the IntegrationRuntimeResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithWorkspace, DefinitionStages.WithIfMatch, DefinitionStages.WithProperties, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of IntegrationRuntimeResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a IntegrationRuntimeResource definition.
         */
        interface Blank extends WithWorkspace {
        }

        /**
         * The stage of the integrationruntimeresource definition allowing to specify Workspace.
         */
        interface WithWorkspace {
           /**
            * Specifies resourceGroupName, workspaceName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param workspaceName The name of the workspace
            * @return the next definition stage
            */
            WithIfMatch withExistingWorkspace(String resourceGroupName, String workspaceName);
        }

        /**
         * The stage of the integrationruntimeresource definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update
            * @return the next definition stage
            */
            WithProperties withIfMatch(String ifMatch);
        }

        /**
         * The stage of the integrationruntimeresource definition allowing to specify Properties.
         */
        interface WithProperties {
           /**
            * Specifies properties.
            * @param properties Integration runtime properties
            * @return the next definition stage
            */
            WithCreate withProperties(IntegrationRuntimeInner properties);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<IntegrationRuntimeResource> {
        }
    }
    /**
     * The template for a IntegrationRuntimeResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<IntegrationRuntimeResource>, UpdateStages.WithAutoUpdate, UpdateStages.WithUpdateDelayOffset {
    }

    /**
     * Grouping of IntegrationRuntimeResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the integrationruntimeresource update allowing to specify AutoUpdate.
         */
        interface WithAutoUpdate {
            /**
             * Specifies autoUpdate.
             * @param autoUpdate Enables or disables the auto-update feature of the self-hosted integration runtime. See https://go.microsoft.com/fwlink/?linkid=854189. Possible values include: 'On', 'Off'
             * @return the next update stage
             */
            Update withAutoUpdate(IntegrationRuntimeAutoUpdate autoUpdate);
        }

        /**
         * The stage of the integrationruntimeresource update allowing to specify UpdateDelayOffset.
         */
        interface WithUpdateDelayOffset {
            /**
             * Specifies updateDelayOffset.
             * @param updateDelayOffset The time offset (in hours) in the day, e.g., PT03H is 3 hours. The integration runtime auto update will happen on that time
             * @return the next update stage
             */
            Update withUpdateDelayOffset(String updateDelayOffset);
        }

    }
}
