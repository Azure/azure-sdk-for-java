/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2020_12_01.WorkspaceManagedSqlServerVulnerabilityAssessments;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.synapse.v2020_12_01.ServerVulnerabilityAssessment;

class WorkspaceManagedSqlServerVulnerabilityAssessmentsImpl extends WrapperImpl<WorkspaceManagedSqlServerVulnerabilityAssessmentsInner> implements WorkspaceManagedSqlServerVulnerabilityAssessments {
    private final SynapseManager manager;

    WorkspaceManagedSqlServerVulnerabilityAssessmentsImpl(SynapseManager manager) {
        super(manager.inner().workspaceManagedSqlServerVulnerabilityAssessments());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public ServerVulnerabilityAssessmentImpl define(String name) {
        return wrapModel(name);
    }

    private ServerVulnerabilityAssessmentImpl wrapModel(ServerVulnerabilityAssessmentInner inner) {
        return  new ServerVulnerabilityAssessmentImpl(inner, manager());
    }

    private ServerVulnerabilityAssessmentImpl wrapModel(String name) {
        return new ServerVulnerabilityAssessmentImpl(name, this.manager());
    }

    @Override
    public Observable<ServerVulnerabilityAssessment> listAsync(final String resourceGroupName, final String workspaceName) {
        WorkspaceManagedSqlServerVulnerabilityAssessmentsInner client = this.inner();
        return client.listAsync(resourceGroupName, workspaceName)
        .flatMapIterable(new Func1<Page<ServerVulnerabilityAssessmentInner>, Iterable<ServerVulnerabilityAssessmentInner>>() {
            @Override
            public Iterable<ServerVulnerabilityAssessmentInner> call(Page<ServerVulnerabilityAssessmentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServerVulnerabilityAssessmentInner, ServerVulnerabilityAssessment>() {
            @Override
            public ServerVulnerabilityAssessment call(ServerVulnerabilityAssessmentInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ServerVulnerabilityAssessment> getAsync(String resourceGroupName, String workspaceName) {
        WorkspaceManagedSqlServerVulnerabilityAssessmentsInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<ServerVulnerabilityAssessmentInner, Observable<ServerVulnerabilityAssessment>>() {
            @Override
            public Observable<ServerVulnerabilityAssessment> call(ServerVulnerabilityAssessmentInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ServerVulnerabilityAssessment)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName) {
        WorkspaceManagedSqlServerVulnerabilityAssessmentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName).toCompletable();
    }

}
