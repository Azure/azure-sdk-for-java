/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessmentRuleBaselines;
import com.microsoft.azure.management.synapse.v2020_12_01.VulnerabilityAssessmentPolicyBaselineName;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessmentRuleBaseline;
import rx.Completable;

class SqlPoolVulnerabilityAssessmentRuleBaselinesImpl extends WrapperImpl<SqlPoolVulnerabilityAssessmentRuleBaselinesInner> implements SqlPoolVulnerabilityAssessmentRuleBaselines {
    private final SynapseManager manager;

    SqlPoolVulnerabilityAssessmentRuleBaselinesImpl(SynapseManager manager) {
        super(manager.inner().sqlPoolVulnerabilityAssessmentRuleBaselines());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public SqlPoolVulnerabilityAssessmentRuleBaselineImpl defineBaseline(String name) {
        return wrapBaselineModel(name);
    }

    private SqlPoolVulnerabilityAssessmentRuleBaselineImpl wrapBaselineModel(String name) {
        return new SqlPoolVulnerabilityAssessmentRuleBaselineImpl(name, this.manager());
    }

    private SqlPoolVulnerabilityAssessmentRuleBaselineImpl wrapSqlPoolVulnerabilityAssessmentRuleBaselineModel(SqlPoolVulnerabilityAssessmentRuleBaselineInner inner) {
        return  new SqlPoolVulnerabilityAssessmentRuleBaselineImpl(inner, manager());
    }

    private Observable<SqlPoolVulnerabilityAssessmentRuleBaselineInner> getSqlPoolVulnerabilityAssessmentRuleBaselineInnerUsingSqlPoolVulnerabilityAssessmentRuleBaselinesInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String workspaceName = IdParsingUtils.getValueFromIdByName(id, "workspaces");
        String sqlPoolName = IdParsingUtils.getValueFromIdByName(id, "sqlPools");
        String ruleId = IdParsingUtils.getValueFromIdByName(id, "rules");
        VulnerabilityAssessmentPolicyBaselineName baselineName = VulnerabilityAssessmentPolicyBaselineName.valueOf(IdParsingUtils.getValueFromIdByName(id, "baselines"));
        SqlPoolVulnerabilityAssessmentRuleBaselinesInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, sqlPoolName, ruleId, baselineName);
    }

    @Override
    public Observable<SqlPoolVulnerabilityAssessmentRuleBaseline> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        SqlPoolVulnerabilityAssessmentRuleBaselinesInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, sqlPoolName, ruleId, baselineName)
        .flatMap(new Func1<SqlPoolVulnerabilityAssessmentRuleBaselineInner, Observable<SqlPoolVulnerabilityAssessmentRuleBaseline>>() {
            @Override
            public Observable<SqlPoolVulnerabilityAssessmentRuleBaseline> call(SqlPoolVulnerabilityAssessmentRuleBaselineInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((SqlPoolVulnerabilityAssessmentRuleBaseline)wrapSqlPoolVulnerabilityAssessmentRuleBaselineModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        SqlPoolVulnerabilityAssessmentRuleBaselinesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, sqlPoolName, ruleId, baselineName).toCompletable();
    }

}
