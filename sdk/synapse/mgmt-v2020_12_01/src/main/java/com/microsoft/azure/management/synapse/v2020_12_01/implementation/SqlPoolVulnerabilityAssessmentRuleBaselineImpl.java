/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessmentRuleBaseline;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessmentRuleBaselineItem;
import com.microsoft.azure.management.synapse.v2020_12_01.VulnerabilityAssessmentPolicyBaselineName;

class SqlPoolVulnerabilityAssessmentRuleBaselineImpl extends CreatableUpdatableImpl<SqlPoolVulnerabilityAssessmentRuleBaseline, SqlPoolVulnerabilityAssessmentRuleBaselineInner, SqlPoolVulnerabilityAssessmentRuleBaselineImpl> implements SqlPoolVulnerabilityAssessmentRuleBaseline, SqlPoolVulnerabilityAssessmentRuleBaseline.Definition, SqlPoolVulnerabilityAssessmentRuleBaseline.Update {
    private final SynapseManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String sqlPoolName;
    private String ruleId;
    private VulnerabilityAssessmentPolicyBaselineName baselineName;
    private List<SqlPoolVulnerabilityAssessmentRuleBaselineItem> cbaselineResults;
    private List<SqlPoolVulnerabilityAssessmentRuleBaselineItem> ubaselineResults;

    SqlPoolVulnerabilityAssessmentRuleBaselineImpl(String name, SynapseManager manager) {
        super(name, new SqlPoolVulnerabilityAssessmentRuleBaselineInner());
        this.manager = manager;
        // Set resource name
        this.baselineName = VulnerabilityAssessmentPolicyBaselineName.fromString(name);
        //
    }

    SqlPoolVulnerabilityAssessmentRuleBaselineImpl(SqlPoolVulnerabilityAssessmentRuleBaselineInner inner, SynapseManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.baselineName = VulnerabilityAssessmentPolicyBaselineName.fromString(inner.name());
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.sqlPoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "sqlPools");
        this.ruleId = IdParsingUtils.getValueFromIdByName(inner.id(), "rules");
        this.baselineName = VulnerabilityAssessmentPolicyBaselineName.valueOf(IdParsingUtils.getValueFromIdByName(inner.id(), "baselines"));
        //
    }

    @Override
    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SqlPoolVulnerabilityAssessmentRuleBaseline> createResourceAsync() {
        SqlPoolVulnerabilityAssessmentRuleBaselinesInner client = this.manager().inner().sqlPoolVulnerabilityAssessmentRuleBaselines();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.sqlPoolName, this.ruleId, this.baselineName, this.cbaselineResults)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SqlPoolVulnerabilityAssessmentRuleBaseline> updateResourceAsync() {
        SqlPoolVulnerabilityAssessmentRuleBaselinesInner client = this.manager().inner().sqlPoolVulnerabilityAssessmentRuleBaselines();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.sqlPoolName, this.ruleId, this.baselineName, this.ubaselineResults)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SqlPoolVulnerabilityAssessmentRuleBaselineInner> getInnerAsync() {
        SqlPoolVulnerabilityAssessmentRuleBaselinesInner client = this.manager().inner().sqlPoolVulnerabilityAssessmentRuleBaselines();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.sqlPoolName, this.ruleId, this.baselineName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<SqlPoolVulnerabilityAssessmentRuleBaselineItem> baselineResults() {
        return this.inner().baselineResults();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SqlPoolVulnerabilityAssessmentRuleBaselineImpl withExistingRule(String resourceGroupName, String workspaceName, String sqlPoolName, String ruleId) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        this.sqlPoolName = sqlPoolName;
        this.ruleId = ruleId;
        return this;
    }

    @Override
    public SqlPoolVulnerabilityAssessmentRuleBaselineImpl withBaselineResults(List<SqlPoolVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        if (isInCreateMode()) {
            this.cbaselineResults = baselineResults;
        } else {
            this.ubaselineResults = baselineResults;
        }
        return this;
    }

}
