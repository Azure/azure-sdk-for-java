/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.management.synapse.v2020_12_01.WorkloadClassifier;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class WorkloadClassifierImpl extends CreatableUpdatableImpl<WorkloadClassifier, WorkloadClassifierInner, WorkloadClassifierImpl> implements WorkloadClassifier, WorkloadClassifier.Definition, WorkloadClassifier.Update {
    private final SynapseManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String sqlPoolName;
    private String workloadGroupName;
    private String workloadClassifierName;

    WorkloadClassifierImpl(String name, SynapseManager manager) {
        super(name, new WorkloadClassifierInner());
        this.manager = manager;
        // Set resource name
        this.workloadClassifierName = name;
        //
    }

    WorkloadClassifierImpl(WorkloadClassifierInner inner, SynapseManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.workloadClassifierName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.sqlPoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "sqlPools");
        this.workloadGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "workloadGroups");
        this.workloadClassifierName = IdParsingUtils.getValueFromIdByName(inner.id(), "workloadClassifiers");
        //
    }

    @Override
    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public Observable<WorkloadClassifier> createResourceAsync() {
        SqlPoolWorkloadClassifiersInner client = this.manager().inner().sqlPoolWorkloadClassifiers();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.sqlPoolName, this.workloadGroupName, this.workloadClassifierName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<WorkloadClassifier> updateResourceAsync() {
        SqlPoolWorkloadClassifiersInner client = this.manager().inner().sqlPoolWorkloadClassifiers();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.sqlPoolName, this.workloadGroupName, this.workloadClassifierName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<WorkloadClassifierInner> getInnerAsync() {
        SqlPoolWorkloadClassifiersInner client = this.manager().inner().sqlPoolWorkloadClassifiers();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.sqlPoolName, this.workloadGroupName, this.workloadClassifierName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String context() {
        return this.inner().context();
    }

    @Override
    public String endTime() {
        return this.inner().endTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String importance() {
        return this.inner().importance();
    }

    @Override
    public String label() {
        return this.inner().label();
    }

    @Override
    public String memberName() {
        return this.inner().memberName();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String startTime() {
        return this.inner().startTime();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public WorkloadClassifierImpl withExistingWorkloadGroup(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        this.sqlPoolName = sqlPoolName;
        this.workloadGroupName = workloadGroupName;
        return this;
    }

    @Override
    public WorkloadClassifierImpl withMemberName(String memberName) {
        this.inner().withMemberName(memberName);
        return this;
    }

    @Override
    public WorkloadClassifierImpl withContext(String context) {
        this.inner().withContext(context);
        return this;
    }

    @Override
    public WorkloadClassifierImpl withEndTime(String endTime) {
        this.inner().withEndTime(endTime);
        return this;
    }

    @Override
    public WorkloadClassifierImpl withImportance(String importance) {
        this.inner().withImportance(importance);
        return this;
    }

    @Override
    public WorkloadClassifierImpl withLabel(String label) {
        this.inner().withLabel(label);
        return this;
    }

    @Override
    public WorkloadClassifierImpl withStartTime(String startTime) {
        this.inner().withStartTime(startTime);
        return this;
    }

}
