/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.management.synapse.v2020_12_01.MaintenanceWindowOptions;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import java.util.List;
import com.microsoft.azure.management.synapse.v2020_12_01.MaintenanceWindowTimeRange;

class MaintenanceWindowOptionsImpl extends WrapperImpl<MaintenanceWindowOptionsInner> implements MaintenanceWindowOptions {
    private final SynapseManager manager;
    MaintenanceWindowOptionsImpl(MaintenanceWindowOptionsInner inner, SynapseManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public Boolean allowMultipleMaintenanceWindowsPerCycle() {
        return this.inner().allowMultipleMaintenanceWindowsPerCycle();
    }

    @Override
    public Integer defaultDurationInMinutes() {
        return this.inner().defaultDurationInMinutes();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isEnabled() {
        return this.inner().isEnabled();
    }

    @Override
    public List<MaintenanceWindowTimeRange> maintenanceWindowCycles() {
        return this.inner().maintenanceWindowCycles();
    }

    @Override
    public Integer minCycles() {
        return this.inner().minCycles();
    }

    @Override
    public Integer minDurationInMinutes() {
        return this.inner().minDurationInMinutes();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer timeGranularityInMinutes() {
        return this.inner().timeGranularityInMinutes();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
