/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessmentScans;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessmentScansExport;
import com.microsoft.azure.management.synapse.v2020_12_01.VulnerabilityAssessmentScanRecord;

class SqlPoolVulnerabilityAssessmentScansImpl extends WrapperImpl<SqlPoolVulnerabilityAssessmentScansInner> implements SqlPoolVulnerabilityAssessmentScans {
    private final SynapseManager manager;

    SqlPoolVulnerabilityAssessmentScansImpl(SynapseManager manager) {
        super(manager.inner().sqlPoolVulnerabilityAssessmentScans());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    private VulnerabilityAssessmentScanRecordImpl wrapModel(VulnerabilityAssessmentScanRecordInner inner) {
        return  new VulnerabilityAssessmentScanRecordImpl(inner, manager());
    }

    @Override
    public Completable initiateScanAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String scanId) {
        SqlPoolVulnerabilityAssessmentScansInner client = this.inner();
        return client.initiateScanAsync(resourceGroupName, workspaceName, sqlPoolName, scanId).toCompletable();
    }

    @Override
    public Observable<SqlPoolVulnerabilityAssessmentScansExport> exportAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String scanId) {
        SqlPoolVulnerabilityAssessmentScansInner client = this.inner();
        return client.exportAsync(resourceGroupName, workspaceName, sqlPoolName, scanId)
        .map(new Func1<SqlPoolVulnerabilityAssessmentScansExportInner, SqlPoolVulnerabilityAssessmentScansExport>() {
            @Override
            public SqlPoolVulnerabilityAssessmentScansExport call(SqlPoolVulnerabilityAssessmentScansExportInner inner) {
                return new SqlPoolVulnerabilityAssessmentScansExportImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VulnerabilityAssessmentScanRecord> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName) {
        SqlPoolVulnerabilityAssessmentScansInner client = this.inner();
        return client.listAsync(resourceGroupName, workspaceName, sqlPoolName)
        .flatMapIterable(new Func1<Page<VulnerabilityAssessmentScanRecordInner>, Iterable<VulnerabilityAssessmentScanRecordInner>>() {
            @Override
            public Iterable<VulnerabilityAssessmentScanRecordInner> call(Page<VulnerabilityAssessmentScanRecordInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VulnerabilityAssessmentScanRecordInner, VulnerabilityAssessmentScanRecord>() {
            @Override
            public VulnerabilityAssessmentScanRecord call(VulnerabilityAssessmentScanRecordInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<VulnerabilityAssessmentScanRecord> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String scanId) {
        SqlPoolVulnerabilityAssessmentScansInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, sqlPoolName, scanId)
        .flatMap(new Func1<VulnerabilityAssessmentScanRecordInner, Observable<VulnerabilityAssessmentScanRecord>>() {
            @Override
            public Observable<VulnerabilityAssessmentScanRecord> call(VulnerabilityAssessmentScanRecordInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((VulnerabilityAssessmentScanRecord)wrapModel(inner));
                }
            }
       });
    }

}
