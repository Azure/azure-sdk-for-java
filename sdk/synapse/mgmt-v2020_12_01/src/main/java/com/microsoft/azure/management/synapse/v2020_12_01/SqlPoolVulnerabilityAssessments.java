/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.synapse.v2020_12_01.implementation.SqlPoolVulnerabilityAssessmentsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing SqlPoolVulnerabilityAssessments.
 */
public interface SqlPoolVulnerabilityAssessments extends SupportsCreating<SqlPoolVulnerabilityAssessment.DefinitionStages.Blank>, HasInner<SqlPoolVulnerabilityAssessmentsInner> {
    /**
     * Gets the Sql pool's vulnerability assessment.
     * Gets the Sql pool's vulnerability assessment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SqlPoolVulnerabilityAssessment> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName);

    /**
     * Lists the vulnerability assessment policies associated with a SQL pool.
     * Lists the vulnerability assessment policies associated with a SQL pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SqlPoolVulnerabilityAssessment> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName);

    /**
     * Removes the database's vulnerability assessment.
     * Removes the database's vulnerability assessment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName);

}
