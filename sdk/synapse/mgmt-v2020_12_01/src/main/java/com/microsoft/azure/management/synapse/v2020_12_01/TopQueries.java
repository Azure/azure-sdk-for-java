/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01;

import org.joda.time.DateTime;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A database query.
 */
public class TopQueries {
    /**
     * The function that is used to aggregate each query's metrics. Possible
     * values include: 'min', 'max', 'avg', 'sum'.
     */
    @JsonProperty(value = "aggregationFunction", access = JsonProperty.Access.WRITE_ONLY)
    private QueryAggregationFunction aggregationFunction;

    /**
     * The execution type that is used to filter the query instances that are
     * returned. Possible values include: 'any', 'regular', 'irregular',
     * 'aborted', 'exception'.
     */
    @JsonProperty(value = "executionType", access = JsonProperty.Access.WRITE_ONLY)
    private QueryExecutionType executionType;

    /**
     * The duration of the interval (ISO8601 duration format).
     */
    @JsonProperty(value = "intervalType", access = JsonProperty.Access.WRITE_ONLY)
    private String intervalType;

    /**
     * The number of requested queries.
     */
    @JsonProperty(value = "numberOfTopQueries", access = JsonProperty.Access.WRITE_ONLY)
    private Double numberOfTopQueries;

    /**
     * The start time for queries that are returned (ISO8601 format).
     */
    @JsonProperty(value = "observationStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime observationStartTime;

    /**
     * The end time for queries that are returned (ISO8601 format).
     */
    @JsonProperty(value = "observationEndTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime observationEndTime;

    /**
     * The type of metric to use for ordering the top metrics. Possible values
     * include: 'cpu', 'io', 'logio', 'duration', 'executionCount'.
     */
    @JsonProperty(value = "observedMetric", access = JsonProperty.Access.WRITE_ONLY)
    private QueryObservedMetricType observedMetric;

    /**
     * The list of queries.
     */
    @JsonProperty(value = "queries", access = JsonProperty.Access.WRITE_ONLY)
    private List<QueryStatistic> queries;

    /**
     * Get the function that is used to aggregate each query's metrics. Possible values include: 'min', 'max', 'avg', 'sum'.
     *
     * @return the aggregationFunction value
     */
    public QueryAggregationFunction aggregationFunction() {
        return this.aggregationFunction;
    }

    /**
     * Get the execution type that is used to filter the query instances that are returned. Possible values include: 'any', 'regular', 'irregular', 'aborted', 'exception'.
     *
     * @return the executionType value
     */
    public QueryExecutionType executionType() {
        return this.executionType;
    }

    /**
     * Get the duration of the interval (ISO8601 duration format).
     *
     * @return the intervalType value
     */
    public String intervalType() {
        return this.intervalType;
    }

    /**
     * Get the number of requested queries.
     *
     * @return the numberOfTopQueries value
     */
    public Double numberOfTopQueries() {
        return this.numberOfTopQueries;
    }

    /**
     * Get the start time for queries that are returned (ISO8601 format).
     *
     * @return the observationStartTime value
     */
    public DateTime observationStartTime() {
        return this.observationStartTime;
    }

    /**
     * Get the end time for queries that are returned (ISO8601 format).
     *
     * @return the observationEndTime value
     */
    public DateTime observationEndTime() {
        return this.observationEndTime;
    }

    /**
     * Get the type of metric to use for ordering the top metrics. Possible values include: 'cpu', 'io', 'logio', 'duration', 'executionCount'.
     *
     * @return the observedMetric value
     */
    public QueryObservedMetricType observedMetric() {
        return this.observedMetric;
    }

    /**
     * Get the list of queries.
     *
     * @return the queries value
     */
    public List<QueryStatistic> queries() {
        return this.queries;
    }

}
