/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.management.synapse.v2020_12_01.IpFirewallRuleInfo;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.synapse.v2020_12_01.ProvisioningState;

class IpFirewallRuleInfoImpl extends CreatableUpdatableImpl<IpFirewallRuleInfo, IpFirewallRuleInfoInner, IpFirewallRuleInfoImpl> implements IpFirewallRuleInfo, IpFirewallRuleInfo.Definition, IpFirewallRuleInfo.Update {
    private final SynapseManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String ruleName;

    IpFirewallRuleInfoImpl(String name, SynapseManager manager) {
        super(name, new IpFirewallRuleInfoInner());
        this.manager = manager;
        // Set resource name
        this.ruleName = name;
        //
    }

    IpFirewallRuleInfoImpl(IpFirewallRuleInfoInner inner, SynapseManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.ruleName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.ruleName = IdParsingUtils.getValueFromIdByName(inner.id(), "firewallRules");
        //
    }

    @Override
    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public Observable<IpFirewallRuleInfo> createResourceAsync() {
        IpFirewallRulesInner client = this.manager().inner().ipFirewallRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.ruleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<IpFirewallRuleInfo> updateResourceAsync() {
        IpFirewallRulesInner client = this.manager().inner().ipFirewallRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.ruleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<IpFirewallRuleInfoInner> getInnerAsync() {
        IpFirewallRulesInner client = this.manager().inner().ipFirewallRules();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.ruleName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String endIpAddress() {
        return this.inner().endIpAddress();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String startIpAddress() {
        return this.inner().startIpAddress();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public IpFirewallRuleInfoImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    @Override
    public IpFirewallRuleInfoImpl withEndIpAddress(String endIpAddress) {
        this.inner().withEndIpAddress(endIpAddress);
        return this;
    }

    @Override
    public IpFirewallRuleInfoImpl withStartIpAddress(String startIpAddress) {
        this.inner().withStartIpAddress(startIpAddress);
        return this;
    }

}
