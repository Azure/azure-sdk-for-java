/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolDataWarehouseUserActivities;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.synapse.v2020_12_01.DataWarehouseUserActivities;

class SqlPoolDataWarehouseUserActivitiesImpl extends WrapperImpl<SqlPoolDataWarehouseUserActivitiesInner> implements SqlPoolDataWarehouseUserActivities {
    private final SynapseManager manager;

    SqlPoolDataWarehouseUserActivitiesImpl(SynapseManager manager) {
        super(manager.inner().sqlPoolDataWarehouseUserActivities());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    private DataWarehouseUserActivitiesImpl wrapModel(DataWarehouseUserActivitiesInner inner) {
        return  new DataWarehouseUserActivitiesImpl(inner, manager());
    }

    @Override
    public Observable<DataWarehouseUserActivities> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName) {
        SqlPoolDataWarehouseUserActivitiesInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, sqlPoolName)
        .flatMap(new Func1<DataWarehouseUserActivitiesInner, Observable<DataWarehouseUserActivities>>() {
            @Override
            public Observable<DataWarehouseUserActivities> call(DataWarehouseUserActivitiesInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DataWarehouseUserActivities)wrapModel(inner));
                }
            }
       });
    }

}
