/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.synapse.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessments;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.synapse.v2020_12_01.SqlPoolVulnerabilityAssessment;

class SqlPoolVulnerabilityAssessmentsImpl extends WrapperImpl<SqlPoolVulnerabilityAssessmentsInner> implements SqlPoolVulnerabilityAssessments {
    private final SynapseManager manager;

    SqlPoolVulnerabilityAssessmentsImpl(SynapseManager manager) {
        super(manager.inner().sqlPoolVulnerabilityAssessments());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public SqlPoolVulnerabilityAssessmentImpl define(String name) {
        return wrapModel(name);
    }

    private SqlPoolVulnerabilityAssessmentImpl wrapModel(SqlPoolVulnerabilityAssessmentInner inner) {
        return  new SqlPoolVulnerabilityAssessmentImpl(inner, manager());
    }

    private SqlPoolVulnerabilityAssessmentImpl wrapModel(String name) {
        return new SqlPoolVulnerabilityAssessmentImpl(name, this.manager());
    }

    @Override
    public Observable<SqlPoolVulnerabilityAssessment> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName) {
        SqlPoolVulnerabilityAssessmentsInner client = this.inner();
        return client.listAsync(resourceGroupName, workspaceName, sqlPoolName)
        .flatMapIterable(new Func1<Page<SqlPoolVulnerabilityAssessmentInner>, Iterable<SqlPoolVulnerabilityAssessmentInner>>() {
            @Override
            public Iterable<SqlPoolVulnerabilityAssessmentInner> call(Page<SqlPoolVulnerabilityAssessmentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SqlPoolVulnerabilityAssessmentInner, SqlPoolVulnerabilityAssessment>() {
            @Override
            public SqlPoolVulnerabilityAssessment call(SqlPoolVulnerabilityAssessmentInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<SqlPoolVulnerabilityAssessment> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName) {
        SqlPoolVulnerabilityAssessmentsInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, sqlPoolName)
        .flatMap(new Func1<SqlPoolVulnerabilityAssessmentInner, Observable<SqlPoolVulnerabilityAssessment>>() {
            @Override
            public Observable<SqlPoolVulnerabilityAssessment> call(SqlPoolVulnerabilityAssessmentInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((SqlPoolVulnerabilityAssessment)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName) {
        SqlPoolVulnerabilityAssessmentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, sqlPoolName).toCompletable();
    }

}
