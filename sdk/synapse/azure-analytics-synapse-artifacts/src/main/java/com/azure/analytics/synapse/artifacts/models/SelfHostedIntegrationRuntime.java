// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Self-hosted integration runtime.
 */
@Fluent
public class SelfHostedIntegrationRuntime extends IntegrationRuntime {
    /*
     * Type of integration runtime.
     */
    private IntegrationRuntimeType type = IntegrationRuntimeType.SELF_HOSTED;

    /*
     * Linked integration runtime type from data factory
     */
    private LinkedIntegrationRuntimeType linkedInfo;

    /**
     * Creates an instance of SelfHostedIntegrationRuntime class.
     */
    public SelfHostedIntegrationRuntime() {
    }

    /**
     * Get the type property: Type of integration runtime.
     * 
     * @return the type value.
     */
    @Override
    public IntegrationRuntimeType getType() {
        return this.type;
    }

    /**
     * Get the linkedInfo property: Linked integration runtime type from data factory.
     * 
     * @return the linkedInfo value.
     */
    public LinkedIntegrationRuntimeType getLinkedInfo() {
        return this.linkedInfo;
    }

    /**
     * Set the linkedInfo property: Linked integration runtime type from data factory.
     * 
     * @param linkedInfo the linkedInfo value to set.
     * @return the SelfHostedIntegrationRuntime object itself.
     */
    public SelfHostedIntegrationRuntime setLinkedInfo(LinkedIntegrationRuntimeType linkedInfo) {
        this.linkedInfo = linkedInfo;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SelfHostedIntegrationRuntime setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        if (linkedInfo != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeJsonField("linkedInfo", this.linkedInfo);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SelfHostedIntegrationRuntime from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SelfHostedIntegrationRuntime if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SelfHostedIntegrationRuntime.
     */
    public static SelfHostedIntegrationRuntime fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SelfHostedIntegrationRuntime deserializedSelfHostedIntegrationRuntime = new SelfHostedIntegrationRuntime();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntime.setDescription(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntime.type
                        = IntegrationRuntimeType.fromString(reader.getString());
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("linkedInfo".equals(fieldName)) {
                            deserializedSelfHostedIntegrationRuntime.linkedInfo
                                = LinkedIntegrationRuntimeType.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSelfHostedIntegrationRuntime.setAdditionalProperties(additionalProperties);

            return deserializedSelfHostedIntegrationRuntime;
        });
    }
}
