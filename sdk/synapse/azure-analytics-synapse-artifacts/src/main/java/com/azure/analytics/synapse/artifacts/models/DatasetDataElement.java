// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Columns that define the structure of the dataset.
 */
@Fluent
public final class DatasetDataElement implements JsonSerializable<DatasetDataElement> {
    /*
     * Name of the column. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object name;

    /*
     * Type of the column. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object type;

    /**
     * Creates an instance of DatasetDataElement class.
     */
    @Generated
    public DatasetDataElement() {
    }

    /**
     * Get the name property: Name of the column. Type: string (or Expression with resultType string).
     * 
     * @return the name value.
     */
    @Generated
    public Object getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the column. Type: string (or Expression with resultType string).
     * 
     * @param name the name value to set.
     * @return the DatasetDataElement object itself.
     */
    @Generated
    public DatasetDataElement setName(Object name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Type of the column. Type: string (or Expression with resultType string).
     * 
     * @return the type value.
     */
    @Generated
    public Object getType() {
        return this.type;
    }

    /**
     * Set the type property: Type of the column. Type: string (or Expression with resultType string).
     * 
     * @param type the type value to set.
     * @return the DatasetDataElement object itself.
     */
    @Generated
    public DatasetDataElement setType(Object type) {
        this.type = type;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (this.name != null) {
            jsonWriter.writeUntypedField("name", this.name);
        }
        if (this.type != null) {
            jsonWriter.writeUntypedField("type", this.type);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatasetDataElement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatasetDataElement if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatasetDataElement.
     */
    @Generated
    public static DatasetDataElement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatasetDataElement deserializedDatasetDataElement = new DatasetDataElement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDatasetDataElement.name = reader.readUntyped();
                } else if ("type".equals(fieldName)) {
                    deserializedDatasetDataElement.type = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatasetDataElement;
        });
    }
}
