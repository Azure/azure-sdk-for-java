// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Run notebook response.
 */
@Fluent
public final class RunNotebookResponse implements JsonSerializable<RunNotebookResponse> {
    /*
     * Response message.
     */
    private String message;

    /*
     * Result of run notebook.
     */
    private RunNotebookResult result;

    /**
     * Creates an instance of RunNotebookResponse class.
     */
    public RunNotebookResponse() {
    }

    /**
     * Get the message property: Response message.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the result property: Result of run notebook.
     * 
     * @return the result value.
     */
    public RunNotebookResult getResult() {
        return this.result;
    }

    /**
     * Set the result property: Result of run notebook.
     * 
     * @param result the result value to set.
     * @return the RunNotebookResponse object itself.
     */
    public RunNotebookResponse setResult(RunNotebookResult result) {
        this.result = result;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("result", this.result);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunNotebookResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunNotebookResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RunNotebookResponse.
     */
    public static RunNotebookResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunNotebookResponse deserializedRunNotebookResponse = new RunNotebookResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    deserializedRunNotebookResponse.message = reader.getString();
                } else if ("result".equals(fieldName)) {
                    deserializedRunNotebookResponse.result = RunNotebookResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunNotebookResponse;
        });
    }
}
