// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity Dynamics CRM sink.
 */
@Fluent
public final class DynamicsCrmSink extends CopySink {
    /*
     * Copy sink type.
     */
    @Generated
    private String type = "DynamicsCrmSink";

    /*
     * The write behavior for the operation.
     */
    @Generated
    private DynamicsSinkWriteBehavior writeBehavior;

    /*
     * The flag indicating whether to ignore null values from input dataset (except key fields) during write operation.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     */
    @Generated
    private Object ignoreNullValues;

    /*
     * The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with
     * resultType string).
     */
    @Generated
    private Object alternateKeyName;

    /**
     * Creates an instance of DynamicsCrmSink class.
     */
    @Generated
    public DynamicsCrmSink() {
    }

    /**
     * Get the type property: Copy sink type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the writeBehavior property: The write behavior for the operation.
     * 
     * @return the writeBehavior value.
     */
    @Generated
    public DynamicsSinkWriteBehavior getWriteBehavior() {
        return this.writeBehavior;
    }

    /**
     * Set the writeBehavior property: The write behavior for the operation.
     * 
     * @param writeBehavior the writeBehavior value to set.
     * @return the DynamicsCrmSink object itself.
     */
    @Generated
    public DynamicsCrmSink setWriteBehavior(DynamicsSinkWriteBehavior writeBehavior) {
        this.writeBehavior = writeBehavior;
        return this;
    }

    /**
     * Get the ignoreNullValues property: The flag indicating whether to ignore null values from input dataset (except
     * key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the ignoreNullValues value.
     */
    @Generated
    public Object getIgnoreNullValues() {
        return this.ignoreNullValues;
    }

    /**
     * Set the ignoreNullValues property: The flag indicating whether to ignore null values from input dataset (except
     * key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param ignoreNullValues the ignoreNullValues value to set.
     * @return the DynamicsCrmSink object itself.
     */
    @Generated
    public DynamicsCrmSink setIgnoreNullValues(Object ignoreNullValues) {
        this.ignoreNullValues = ignoreNullValues;
        return this;
    }

    /**
     * Get the alternateKeyName property: The logical name of the alternate key which will be used when upserting
     * records. Type: string (or Expression with resultType string).
     * 
     * @return the alternateKeyName value.
     */
    @Generated
    public Object getAlternateKeyName() {
        return this.alternateKeyName;
    }

    /**
     * Set the alternateKeyName property: The logical name of the alternate key which will be used when upserting
     * records. Type: string (or Expression with resultType string).
     * 
     * @param alternateKeyName the alternateKeyName value to set.
     * @return the DynamicsCrmSink object itself.
     */
    @Generated
    public DynamicsCrmSink setAlternateKeyName(Object alternateKeyName) {
        this.alternateKeyName = alternateKeyName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DynamicsCrmSink setWriteBatchSize(Object writeBatchSize) {
        super.setWriteBatchSize(writeBatchSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DynamicsCrmSink setWriteBatchTimeout(Object writeBatchTimeout) {
        super.setWriteBatchTimeout(writeBatchTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DynamicsCrmSink setSinkRetryCount(Object sinkRetryCount) {
        super.setSinkRetryCount(sinkRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DynamicsCrmSink setSinkRetryWait(Object sinkRetryWait) {
        super.setSinkRetryWait(sinkRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DynamicsCrmSink setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (getWriteBatchSize() != null) {
            jsonWriter.writeUntypedField("writeBatchSize", getWriteBatchSize());
        }
        if (getWriteBatchTimeout() != null) {
            jsonWriter.writeUntypedField("writeBatchTimeout", getWriteBatchTimeout());
        }
        if (getSinkRetryCount() != null) {
            jsonWriter.writeUntypedField("sinkRetryCount", getSinkRetryCount());
        }
        if (getSinkRetryWait() != null) {
            jsonWriter.writeUntypedField("sinkRetryWait", getSinkRetryWait());
        }
        if (getMaxConcurrentConnections() != null) {
            jsonWriter.writeUntypedField("maxConcurrentConnections", getMaxConcurrentConnections());
        }
        jsonWriter.writeStringField("writeBehavior", this.writeBehavior == null ? null : this.writeBehavior.toString());
        jsonWriter.writeStringField("type", this.type);
        if (this.ignoreNullValues != null) {
            jsonWriter.writeUntypedField("ignoreNullValues", this.ignoreNullValues);
        }
        if (this.alternateKeyName != null) {
            jsonWriter.writeUntypedField("alternateKeyName", this.alternateKeyName);
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DynamicsCrmSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DynamicsCrmSink if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DynamicsCrmSink.
     */
    @Generated
    public static DynamicsCrmSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DynamicsCrmSink deserializedDynamicsCrmSink = new DynamicsCrmSink();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("writeBatchSize".equals(fieldName)) {
                    deserializedDynamicsCrmSink.setWriteBatchSize(reader.readUntyped());
                } else if ("writeBatchTimeout".equals(fieldName)) {
                    deserializedDynamicsCrmSink.setWriteBatchTimeout(reader.readUntyped());
                } else if ("sinkRetryCount".equals(fieldName)) {
                    deserializedDynamicsCrmSink.setSinkRetryCount(reader.readUntyped());
                } else if ("sinkRetryWait".equals(fieldName)) {
                    deserializedDynamicsCrmSink.setSinkRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedDynamicsCrmSink.setMaxConcurrentConnections(reader.readUntyped());
                } else if ("writeBehavior".equals(fieldName)) {
                    deserializedDynamicsCrmSink.writeBehavior
                        = DynamicsSinkWriteBehavior.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedDynamicsCrmSink.type = reader.getString();
                } else if ("ignoreNullValues".equals(fieldName)) {
                    deserializedDynamicsCrmSink.ignoreNullValues = reader.readUntyped();
                } else if ("alternateKeyName".equals(fieldName)) {
                    deserializedDynamicsCrmSink.alternateKeyName = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedDynamicsCrmSink.setAdditionalProperties(additionalProperties);

            return deserializedDynamicsCrmSink;
        });
    }
}
