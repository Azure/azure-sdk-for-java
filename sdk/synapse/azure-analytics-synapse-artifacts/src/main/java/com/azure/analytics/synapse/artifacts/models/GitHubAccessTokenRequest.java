// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The GitHubAccessTokenRequest model.
 */
@Fluent
public final class GitHubAccessTokenRequest implements JsonSerializable<GitHubAccessTokenRequest> {
    /*
     * The GitHub Client Id.
     */
    private String gitHubClientId;

    /*
     * The GitHub Access code.
     */
    private String gitHubAccessCode;

    /*
     * The GitHub access token base URL.
     */
    private String gitHubAccessTokenBaseUrl;

    /**
     * Creates an instance of GitHubAccessTokenRequest class.
     */
    public GitHubAccessTokenRequest() {
    }

    /**
     * Get the gitHubClientId property: The GitHub Client Id.
     * 
     * @return the gitHubClientId value.
     */
    public String getGitHubClientId() {
        return this.gitHubClientId;
    }

    /**
     * Set the gitHubClientId property: The GitHub Client Id.
     * 
     * @param gitHubClientId the gitHubClientId value to set.
     * @return the GitHubAccessTokenRequest object itself.
     */
    public GitHubAccessTokenRequest setGitHubClientId(String gitHubClientId) {
        this.gitHubClientId = gitHubClientId;
        return this;
    }

    /**
     * Get the gitHubAccessCode property: The GitHub Access code.
     * 
     * @return the gitHubAccessCode value.
     */
    public String getGitHubAccessCode() {
        return this.gitHubAccessCode;
    }

    /**
     * Set the gitHubAccessCode property: The GitHub Access code.
     * 
     * @param gitHubAccessCode the gitHubAccessCode value to set.
     * @return the GitHubAccessTokenRequest object itself.
     */
    public GitHubAccessTokenRequest setGitHubAccessCode(String gitHubAccessCode) {
        this.gitHubAccessCode = gitHubAccessCode;
        return this;
    }

    /**
     * Get the gitHubAccessTokenBaseUrl property: The GitHub access token base URL.
     * 
     * @return the gitHubAccessTokenBaseUrl value.
     */
    public String getGitHubAccessTokenBaseUrl() {
        return this.gitHubAccessTokenBaseUrl;
    }

    /**
     * Set the gitHubAccessTokenBaseUrl property: The GitHub access token base URL.
     * 
     * @param gitHubAccessTokenBaseUrl the gitHubAccessTokenBaseUrl value to set.
     * @return the GitHubAccessTokenRequest object itself.
     */
    public GitHubAccessTokenRequest setGitHubAccessTokenBaseUrl(String gitHubAccessTokenBaseUrl) {
        this.gitHubAccessTokenBaseUrl = gitHubAccessTokenBaseUrl;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("gitHubClientId", this.gitHubClientId);
        jsonWriter.writeStringField("gitHubAccessCode", this.gitHubAccessCode);
        jsonWriter.writeStringField("gitHubAccessTokenBaseUrl", this.gitHubAccessTokenBaseUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitHubAccessTokenRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitHubAccessTokenRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GitHubAccessTokenRequest.
     */
    public static GitHubAccessTokenRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitHubAccessTokenRequest deserializedGitHubAccessTokenRequest = new GitHubAccessTokenRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("gitHubClientId".equals(fieldName)) {
                    deserializedGitHubAccessTokenRequest.gitHubClientId = reader.getString();
                } else if ("gitHubAccessCode".equals(fieldName)) {
                    deserializedGitHubAccessTokenRequest.gitHubAccessCode = reader.getString();
                } else if ("gitHubAccessTokenBaseUrl".equals(fieldName)) {
                    deserializedGitHubAccessTokenRequest.gitHubAccessTokenBaseUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitHubAccessTokenRequest;
        });
    }
}
