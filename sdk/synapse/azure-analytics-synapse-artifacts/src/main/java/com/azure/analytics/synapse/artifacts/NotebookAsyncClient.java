// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts;

import com.azure.analytics.synapse.artifacts.implementation.NotebooksImpl;
import com.azure.analytics.synapse.artifacts.implementation.models.CloudErrorException;
import com.azure.analytics.synapse.artifacts.implementation.models.NotebookListResponse;
import com.azure.analytics.synapse.artifacts.implementation.models.NotebookResource;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous ArtifactsClient type.
 */
@ServiceClient(builder = ArtifactsClientBuilder.class)
public final class NotebookAsyncClient {
    private NotebooksImpl serviceClient;

    /**
     * Initializes an instance of Notebooks client.
     */
    NotebookAsyncClient(NotebooksImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Lists Notebooks.
     * 
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebooksByWorkspaceSinglePage() {
        return this.serviceClient.getNotebooksByWorkspaceSinglePageAsync();
    }

    /**
     * Lists Notebooks.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebooksByWorkspaceSinglePage(Context context) {
        return this.serviceClient.getNotebooksByWorkspaceSinglePageAsync(context);
    }

    /**
     * Lists Notebooks.
     * 
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<NotebookResource> getNotebooksByWorkspace() {
        return this.serviceClient.getNotebooksByWorkspaceAsync();
    }

    /**
     * Lists Notebooks.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<NotebookResource> getNotebooksByWorkspace(Context context) {
        return this.serviceClient.getNotebooksByWorkspaceAsync(context);
    }

    /**
     * Lists a summary of Notebooks.
     * 
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebookSummaryByWorkSpaceSinglePage() {
        return this.serviceClient.getNotebookSummaryByWorkSpaceSinglePageAsync();
    }

    /**
     * Lists a summary of Notebooks.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebookSummaryByWorkSpaceSinglePage(Context context) {
        return this.serviceClient.getNotebookSummaryByWorkSpaceSinglePageAsync(context);
    }

    /**
     * Lists a summary of Notebooks.
     * 
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<NotebookResource> getNotebookSummaryByWorkSpace() {
        return this.serviceClient.getNotebookSummaryByWorkSpaceAsync();
    }

    /**
     * Lists a summary of Notebooks.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<NotebookResource> getNotebookSummaryByWorkSpace(Context context) {
        return this.serviceClient.getNotebookSummaryByWorkSpaceAsync(context);
    }

    /**
     * Creates or updates a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param notebook Notebook resource type.
     * @param ifMatch ETag of the Note book entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return notebook resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<NotebookResource>> createOrUpdateNotebookWithResponse(String notebookName, NotebookResource notebook, String ifMatch) {
        return this.serviceClient.createOrUpdateNotebookWithResponseAsync(notebookName, notebook, ifMatch);
    }

    /**
     * Creates or updates a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param notebook Notebook resource type.
     * @param ifMatch ETag of the Note book entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return notebook resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<NotebookResource>> createOrUpdateNotebookWithResponse(String notebookName, NotebookResource notebook, String ifMatch, Context context) {
        return this.serviceClient.createOrUpdateNotebookWithResponseAsync(notebookName, notebook, ifMatch, context);
    }

    /**
     * Creates or updates a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param notebook Notebook resource type.
     * @param ifMatch ETag of the Note book entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return notebook resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NotebookResource> createOrUpdateNotebook(String notebookName, NotebookResource notebook, String ifMatch) {
        return this.serviceClient.createOrUpdateNotebookAsync(notebookName, notebook, ifMatch);
    }

    /**
     * Creates or updates a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param notebook Notebook resource type.
     * @param ifMatch ETag of the Note book entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return notebook resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NotebookResource> createOrUpdateNotebook(String notebookName, NotebookResource notebook, String ifMatch, Context context) {
        return this.serviceClient.createOrUpdateNotebookAsync(notebookName, notebook, ifMatch, context);
    }

    /**
     * Creates or updates a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param notebook Notebook resource type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return notebook resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NotebookResource> createOrUpdateNotebook(String notebookName, NotebookResource notebook) {
        return this.serviceClient.createOrUpdateNotebookAsync(notebookName, notebook);
    }

    /**
     * Gets a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param ifNoneMatch ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Note Book.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<NotebookResource>> getNotebookWithResponse(String notebookName, String ifNoneMatch) {
        return this.serviceClient.getNotebookWithResponseAsync(notebookName, ifNoneMatch);
    }

    /**
     * Gets a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param ifNoneMatch ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Note Book.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<NotebookResource>> getNotebookWithResponse(String notebookName, String ifNoneMatch, Context context) {
        return this.serviceClient.getNotebookWithResponseAsync(notebookName, ifNoneMatch, context);
    }

    /**
     * Gets a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param ifNoneMatch ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Note Book.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NotebookResource> getNotebook(String notebookName, String ifNoneMatch) {
        return this.serviceClient.getNotebookAsync(notebookName, ifNoneMatch);
    }

    /**
     * Gets a Note Book.
     * 
     * @param notebookName The notebook name.
     * @param ifNoneMatch ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Note Book.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NotebookResource> getNotebook(String notebookName, String ifNoneMatch, Context context) {
        return this.serviceClient.getNotebookAsync(notebookName, ifNoneMatch, context);
    }

    /**
     * Gets a Note Book.
     * 
     * @param notebookName The notebook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Note Book.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NotebookResource> getNotebook(String notebookName) {
        return this.serviceClient.getNotebookAsync(notebookName);
    }

    /**
     * Deletes a Note book.
     * 
     * @param notebookName The notebook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteNotebookWithResponse(String notebookName) {
        return this.serviceClient.deleteNotebookWithResponseAsync(notebookName);
    }

    /**
     * Deletes a Note book.
     * 
     * @param notebookName The notebook name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteNotebookWithResponse(String notebookName, Context context) {
        return this.serviceClient.deleteNotebookWithResponseAsync(notebookName, context);
    }

    /**
     * Deletes a Note book.
     * 
     * @param notebookName The notebook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteNotebook(String notebookName) {
        return this.serviceClient.deleteNotebookAsync(notebookName);
    }

    /**
     * Deletes a Note book.
     * 
     * @param notebookName The notebook name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteNotebook(String notebookName, Context context) {
        return this.serviceClient.deleteNotebookAsync(notebookName, context);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebooksByWorkspaceNextSinglePage(String nextLink) {
        return this.serviceClient.getNotebooksByWorkspaceNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebooksByWorkspaceNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.getNotebooksByWorkspaceNextSinglePageAsync(nextLink, context);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebookSummaryByWorkSpaceNextSinglePage(String nextLink) {
        return this.serviceClient.getNotebookSummaryByWorkSpaceNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Notebook resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<NotebookResource>> getNotebookSummaryByWorkSpaceNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.getNotebookSummaryByWorkSpaceNextSinglePageAsync(nextLink, context);
    }
}
