// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Log settings of script activity.
 */
@Fluent
public final class ScriptActivityTypePropertiesLogSettings
    implements JsonSerializable<ScriptActivityTypePropertiesLogSettings> {
    /*
     * The destination of logs. Type: string.
     */
    private ScriptActivityLogDestination logDestination;

    /*
     * Log location settings customer needs to provide when enabling log.
     */
    private LogLocationSettings logLocationSettings;

    /**
     * Creates an instance of ScriptActivityTypePropertiesLogSettings class.
     */
    public ScriptActivityTypePropertiesLogSettings() {
    }

    /**
     * Get the logDestination property: The destination of logs. Type: string.
     * 
     * @return the logDestination value.
     */
    public ScriptActivityLogDestination getLogDestination() {
        return this.logDestination;
    }

    /**
     * Set the logDestination property: The destination of logs. Type: string.
     * 
     * @param logDestination the logDestination value to set.
     * @return the ScriptActivityTypePropertiesLogSettings object itself.
     */
    public ScriptActivityTypePropertiesLogSettings setLogDestination(ScriptActivityLogDestination logDestination) {
        this.logDestination = logDestination;
        return this;
    }

    /**
     * Get the logLocationSettings property: Log location settings customer needs to provide when enabling log.
     * 
     * @return the logLocationSettings value.
     */
    public LogLocationSettings getLogLocationSettings() {
        return this.logLocationSettings;
    }

    /**
     * Set the logLocationSettings property: Log location settings customer needs to provide when enabling log.
     * 
     * @param logLocationSettings the logLocationSettings value to set.
     * @return the ScriptActivityTypePropertiesLogSettings object itself.
     */
    public ScriptActivityTypePropertiesLogSettings setLogLocationSettings(LogLocationSettings logLocationSettings) {
        this.logLocationSettings = logLocationSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("logDestination",
            this.logDestination == null ? null : this.logDestination.toString());
        jsonWriter.writeJsonField("logLocationSettings", this.logLocationSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptActivityTypePropertiesLogSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptActivityTypePropertiesLogSettings if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScriptActivityTypePropertiesLogSettings.
     */
    public static ScriptActivityTypePropertiesLogSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptActivityTypePropertiesLogSettings deserializedScriptActivityTypePropertiesLogSettings
                = new ScriptActivityTypePropertiesLogSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logDestination".equals(fieldName)) {
                    deserializedScriptActivityTypePropertiesLogSettings.logDestination
                        = ScriptActivityLogDestination.fromString(reader.getString());
                } else if ("logLocationSettings".equals(fieldName)) {
                    deserializedScriptActivityTypePropertiesLogSettings.logLocationSettings
                        = LogLocationSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptActivityTypePropertiesLogSettings;
        });
    }
}
