// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * SSIS package location.
 */
@Fluent
public class SsisPackageLocation implements JsonSerializable<SsisPackageLocation> {
    /*
     * The SSIS package path. Type: string (or Expression with resultType string).
     */
    private Object packagePath;

    /*
     * The type of SSIS package location.
     */
    private SsisPackageLocationType type;

    /*
     * Password of the package.
     */
    private SecretBase packagePassword;

    /*
     * The package access credential.
     */
    private SsisAccessCredential accessCredential;

    /*
     * The configuration file of the package execution. Type: string (or Expression with resultType string).
     */
    private Object configurationPath;

    /*
     * The configuration file access credential.
     */
    private SsisAccessCredential configurationAccessCredential;

    /*
     * The package name.
     */
    private String packageName;

    /*
     * The embedded package content. Type: string (or Expression with resultType string).
     */
    private Object packageContent;

    /*
     * The embedded package last modified date.
     */
    private String packageLastModifiedDate;

    /*
     * The embedded child package list.
     */
    private List<SsisChildPackage> childPackages;

    /**
     * Creates an instance of SsisPackageLocation class.
     */
    public SsisPackageLocation() {
    }

    /**
     * Get the packagePath property: The SSIS package path. Type: string (or Expression with resultType string).
     * 
     * @return the packagePath value.
     */
    public Object getPackagePath() {
        return this.packagePath;
    }

    /**
     * Set the packagePath property: The SSIS package path. Type: string (or Expression with resultType string).
     * 
     * @param packagePath the packagePath value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setPackagePath(Object packagePath) {
        this.packagePath = packagePath;
        return this;
    }

    /**
     * Get the type property: The type of SSIS package location.
     * 
     * @return the type value.
     */
    public SsisPackageLocationType getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of SSIS package location.
     * 
     * @param type the type value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setType(SsisPackageLocationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the packagePassword property: Password of the package.
     * 
     * @return the packagePassword value.
     */
    public SecretBase getPackagePassword() {
        return this.packagePassword;
    }

    /**
     * Set the packagePassword property: Password of the package.
     * 
     * @param packagePassword the packagePassword value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setPackagePassword(SecretBase packagePassword) {
        this.packagePassword = packagePassword;
        return this;
    }

    /**
     * Get the accessCredential property: The package access credential.
     * 
     * @return the accessCredential value.
     */
    public SsisAccessCredential getAccessCredential() {
        return this.accessCredential;
    }

    /**
     * Set the accessCredential property: The package access credential.
     * 
     * @param accessCredential the accessCredential value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setAccessCredential(SsisAccessCredential accessCredential) {
        this.accessCredential = accessCredential;
        return this;
    }

    /**
     * Get the configurationPath property: The configuration file of the package execution. Type: string (or Expression
     * with resultType string).
     * 
     * @return the configurationPath value.
     */
    public Object getConfigurationPath() {
        return this.configurationPath;
    }

    /**
     * Set the configurationPath property: The configuration file of the package execution. Type: string (or Expression
     * with resultType string).
     * 
     * @param configurationPath the configurationPath value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setConfigurationPath(Object configurationPath) {
        this.configurationPath = configurationPath;
        return this;
    }

    /**
     * Get the configurationAccessCredential property: The configuration file access credential.
     * 
     * @return the configurationAccessCredential value.
     */
    public SsisAccessCredential getConfigurationAccessCredential() {
        return this.configurationAccessCredential;
    }

    /**
     * Set the configurationAccessCredential property: The configuration file access credential.
     * 
     * @param configurationAccessCredential the configurationAccessCredential value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setConfigurationAccessCredential(SsisAccessCredential configurationAccessCredential) {
        this.configurationAccessCredential = configurationAccessCredential;
        return this;
    }

    /**
     * Get the packageName property: The package name.
     * 
     * @return the packageName value.
     */
    public String getPackageName() {
        return this.packageName;
    }

    /**
     * Set the packageName property: The package name.
     * 
     * @param packageName the packageName value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }

    /**
     * Get the packageContent property: The embedded package content. Type: string (or Expression with resultType
     * string).
     * 
     * @return the packageContent value.
     */
    public Object getPackageContent() {
        return this.packageContent;
    }

    /**
     * Set the packageContent property: The embedded package content. Type: string (or Expression with resultType
     * string).
     * 
     * @param packageContent the packageContent value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setPackageContent(Object packageContent) {
        this.packageContent = packageContent;
        return this;
    }

    /**
     * Get the packageLastModifiedDate property: The embedded package last modified date.
     * 
     * @return the packageLastModifiedDate value.
     */
    public String getPackageLastModifiedDate() {
        return this.packageLastModifiedDate;
    }

    /**
     * Set the packageLastModifiedDate property: The embedded package last modified date.
     * 
     * @param packageLastModifiedDate the packageLastModifiedDate value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setPackageLastModifiedDate(String packageLastModifiedDate) {
        this.packageLastModifiedDate = packageLastModifiedDate;
        return this;
    }

    /**
     * Get the childPackages property: The embedded child package list.
     * 
     * @return the childPackages value.
     */
    public List<SsisChildPackage> getChildPackages() {
        return this.childPackages;
    }

    /**
     * Set the childPackages property: The embedded child package list.
     * 
     * @param childPackages the childPackages value to set.
     * @return the SsisPackageLocation object itself.
     */
    public SsisPackageLocation setChildPackages(List<SsisChildPackage> childPackages) {
        this.childPackages = childPackages;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("packagePath", this.packagePath);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        if (packagePassword != null
            || accessCredential != null
            || configurationPath != null
            || configurationAccessCredential != null
            || packageName != null
            || packageContent != null
            || packageLastModifiedDate != null
            || childPackages != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeJsonField("packagePassword", this.packagePassword);
            jsonWriter.writeJsonField("accessCredential", this.accessCredential);
            jsonWriter.writeUntypedField("configurationPath", this.configurationPath);
            jsonWriter.writeJsonField("configurationAccessCredential", this.configurationAccessCredential);
            jsonWriter.writeStringField("packageName", this.packageName);
            jsonWriter.writeUntypedField("packageContent", this.packageContent);
            jsonWriter.writeStringField("packageLastModifiedDate", this.packageLastModifiedDate);
            jsonWriter.writeArrayField("childPackages", this.childPackages,
                (writer, element) -> writer.writeJson(element));
            jsonWriter.writeEndObject();
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SsisPackageLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SsisPackageLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SsisPackageLocation.
     */
    public static SsisPackageLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SsisPackageLocation deserializedSsisPackageLocation = new SsisPackageLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packagePath".equals(fieldName)) {
                    deserializedSsisPackageLocation.packagePath = reader.readUntyped();
                } else if ("type".equals(fieldName)) {
                    deserializedSsisPackageLocation.type = SsisPackageLocationType.fromString(reader.getString());
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("packagePassword".equals(fieldName)) {
                            deserializedSsisPackageLocation.packagePassword = SecretBase.fromJson(reader);
                        } else if ("accessCredential".equals(fieldName)) {
                            deserializedSsisPackageLocation.accessCredential = SsisAccessCredential.fromJson(reader);
                        } else if ("configurationPath".equals(fieldName)) {
                            deserializedSsisPackageLocation.configurationPath = reader.readUntyped();
                        } else if ("configurationAccessCredential".equals(fieldName)) {
                            deserializedSsisPackageLocation.configurationAccessCredential
                                = SsisAccessCredential.fromJson(reader);
                        } else if ("packageName".equals(fieldName)) {
                            deserializedSsisPackageLocation.packageName = reader.getString();
                        } else if ("packageContent".equals(fieldName)) {
                            deserializedSsisPackageLocation.packageContent = reader.readUntyped();
                        } else if ("packageLastModifiedDate".equals(fieldName)) {
                            deserializedSsisPackageLocation.packageLastModifiedDate = reader.getString();
                        } else if ("childPackages".equals(fieldName)) {
                            List<SsisChildPackage> childPackages
                                = reader.readArray(reader1 -> SsisChildPackage.fromJson(reader1));
                            deserializedSsisPackageLocation.childPackages = childPackages;
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSsisPackageLocation;
        });
    }
}
