// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters of a script block.
 */
@Fluent
public final class ScriptActivityParameter implements JsonSerializable<ScriptActivityParameter> {
    /*
     * The name of the parameter. Type: string (or Expression with resultType string).
     */
    private Object name;

    /*
     * The type of the parameter.
     */
    private ScriptActivityParameterType type;

    /*
     * The value of the parameter.
     */
    private Object value;

    /*
     * The direction of the parameter.
     */
    private ScriptActivityParameterDirection direction;

    /*
     * The size of the output direction parameter.
     */
    private Integer size;

    /**
     * Creates an instance of ScriptActivityParameter class.
     */
    public ScriptActivityParameter() {
    }

    /**
     * Get the name property: The name of the parameter. Type: string (or Expression with resultType string).
     * 
     * @return the name value.
     */
    public Object getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the parameter. Type: string (or Expression with resultType string).
     * 
     * @param name the name value to set.
     * @return the ScriptActivityParameter object itself.
     */
    public ScriptActivityParameter setName(Object name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: The type of the parameter.
     * 
     * @return the type value.
     */
    public ScriptActivityParameterType getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of the parameter.
     * 
     * @param type the type value to set.
     * @return the ScriptActivityParameter object itself.
     */
    public ScriptActivityParameter setType(ScriptActivityParameterType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the value property: The value of the parameter.
     * 
     * @return the value value.
     */
    public Object getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value of the parameter.
     * 
     * @param value the value value to set.
     * @return the ScriptActivityParameter object itself.
     */
    public ScriptActivityParameter setValue(Object value) {
        this.value = value;
        return this;
    }

    /**
     * Get the direction property: The direction of the parameter.
     * 
     * @return the direction value.
     */
    public ScriptActivityParameterDirection getDirection() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction of the parameter.
     * 
     * @param direction the direction value to set.
     * @return the ScriptActivityParameter object itself.
     */
    public ScriptActivityParameter setDirection(ScriptActivityParameterDirection direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the size property: The size of the output direction parameter.
     * 
     * @return the size value.
     */
    public Integer getSize() {
        return this.size;
    }

    /**
     * Set the size property: The size of the output direction parameter.
     * 
     * @param size the size value to set.
     * @return the ScriptActivityParameter object itself.
     */
    public ScriptActivityParameter setSize(Integer size) {
        this.size = size;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("name", this.name);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeUntypedField("value", this.value);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeNumberField("size", this.size);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptActivityParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptActivityParameter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptActivityParameter.
     */
    public static ScriptActivityParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptActivityParameter deserializedScriptActivityParameter = new ScriptActivityParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedScriptActivityParameter.name = reader.readUntyped();
                } else if ("type".equals(fieldName)) {
                    deserializedScriptActivityParameter.type
                        = ScriptActivityParameterType.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedScriptActivityParameter.value = reader.readUntyped();
                } else if ("direction".equals(fieldName)) {
                    deserializedScriptActivityParameter.direction
                        = ScriptActivityParameterDirection.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    deserializedScriptActivityParameter.size = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptActivityParameter;
        });
    }
}
