// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Referenced tumbling window trigger dependency.
 */
@Fluent
public final class TumblingWindowTriggerDependencyReference extends TriggerDependencyReference {
    /*
     * The type of dependency reference.
     */
    @Generated
    private String type = "TumblingWindowTriggerDependencyReference";

    /*
     * Timespan applied to the start time of a tumbling window when evaluating dependency.
     */
    @Generated
    private String offset;

    /*
     * The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be
     * used.
     */
    @Generated
    private String size;

    /**
     * Creates an instance of TumblingWindowTriggerDependencyReference class.
     */
    @Generated
    public TumblingWindowTriggerDependencyReference() {
    }

    /**
     * Get the type property: The type of dependency reference.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the offset property: Timespan applied to the start time of a tumbling window when evaluating dependency.
     * 
     * @return the offset value.
     */
    @Generated
    public String getOffset() {
        return this.offset;
    }

    /**
     * Set the offset property: Timespan applied to the start time of a tumbling window when evaluating dependency.
     * 
     * @param offset the offset value to set.
     * @return the TumblingWindowTriggerDependencyReference object itself.
     */
    @Generated
    public TumblingWindowTriggerDependencyReference setOffset(String offset) {
        this.offset = offset;
        return this;
    }

    /**
     * Get the size property: The size of the window when evaluating the dependency. If undefined the frequency of the
     * tumbling window will be used.
     * 
     * @return the size value.
     */
    @Generated
    public String getSize() {
        return this.size;
    }

    /**
     * Set the size property: The size of the window when evaluating the dependency. If undefined the frequency of the
     * tumbling window will be used.
     * 
     * @param size the size value to set.
     * @return the TumblingWindowTriggerDependencyReference object itself.
     */
    @Generated
    public TumblingWindowTriggerDependencyReference setSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public TumblingWindowTriggerDependencyReference setReferenceTrigger(TriggerReference referenceTrigger) {
        super.setReferenceTrigger(referenceTrigger);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("referenceTrigger", getReferenceTrigger());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("offset", this.offset);
        jsonWriter.writeStringField("size", this.size);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TumblingWindowTriggerDependencyReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TumblingWindowTriggerDependencyReference if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TumblingWindowTriggerDependencyReference.
     */
    @Generated
    public static TumblingWindowTriggerDependencyReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TumblingWindowTriggerDependencyReference deserializedTumblingWindowTriggerDependencyReference
                = new TumblingWindowTriggerDependencyReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referenceTrigger".equals(fieldName)) {
                    deserializedTumblingWindowTriggerDependencyReference
                        .setReferenceTrigger(TriggerReference.fromJson(reader));
                } else if ("type".equals(fieldName)) {
                    deserializedTumblingWindowTriggerDependencyReference.type = reader.getString();
                } else if ("offset".equals(fieldName)) {
                    deserializedTumblingWindowTriggerDependencyReference.offset = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedTumblingWindowTriggerDependencyReference.size = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTumblingWindowTriggerDependencyReference;
        });
    }
}
