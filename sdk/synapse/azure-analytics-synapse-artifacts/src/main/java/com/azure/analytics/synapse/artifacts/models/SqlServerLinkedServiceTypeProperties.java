// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQL Server linked service properties.
 */
@Fluent
public final class SqlServerLinkedServiceTypeProperties extends SqlServerBaseLinkedServiceTypeProperties {
    /*
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    @Generated
    private Object connectionString;

    /*
     * The type used for authentication. Type: string.
     */
    @Generated
    private SqlServerAuthenticationType authenticationType;

    /*
     * The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object userName;

    /*
     * The on-premises Windows authentication password.
     */
    @Generated
    private SecretBase password;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object encryptedCredential;

    /*
     * Sql always encrypted properties.
     */
    @Generated
    private SqlAlwaysEncryptedProperties alwaysEncryptedSettings;

    /*
     * The credential reference containing authentication information.
     */
    @Generated
    private CredentialReference credential;

    /**
     * Creates an instance of SqlServerLinkedServiceTypeProperties class.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties() {
    }

    /**
     * Get the connectionString property: The connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @return the connectionString value.
     */
    @Generated
    public Object getConnectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @param connectionString the connectionString value to set.
     * @return the SqlServerLinkedServiceTypeProperties object itself.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties setConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the authenticationType property: The type used for authentication. Type: string.
     * 
     * @return the authenticationType value.
     */
    @Generated
    public SqlServerAuthenticationType getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The type used for authentication. Type: string.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the SqlServerLinkedServiceTypeProperties object itself.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties setAuthenticationType(SqlServerAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the userName property: The on-premises Windows authentication user name. Type: string (or Expression with
     * resultType string).
     * 
     * @return the userName value.
     */
    @Generated
    public Object getUserName() {
        return this.userName;
    }

    /**
     * Set the userName property: The on-premises Windows authentication user name. Type: string (or Expression with
     * resultType string).
     * 
     * @param userName the userName value to set.
     * @return the SqlServerLinkedServiceTypeProperties object itself.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties setUserName(Object userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get the password property: The on-premises Windows authentication password.
     * 
     * @return the password value.
     */
    @Generated
    public SecretBase getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The on-premises Windows authentication password.
     * 
     * @param password the password value to set.
     * @return the SqlServerLinkedServiceTypeProperties object itself.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties setPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @return the encryptedCredential value.
     */
    @Generated
    public Object getEncryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the SqlServerLinkedServiceTypeProperties object itself.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties setEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the alwaysEncryptedSettings property: Sql always encrypted properties.
     * 
     * @return the alwaysEncryptedSettings value.
     */
    @Generated
    public SqlAlwaysEncryptedProperties getAlwaysEncryptedSettings() {
        return this.alwaysEncryptedSettings;
    }

    /**
     * Set the alwaysEncryptedSettings property: Sql always encrypted properties.
     * 
     * @param alwaysEncryptedSettings the alwaysEncryptedSettings value to set.
     * @return the SqlServerLinkedServiceTypeProperties object itself.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties
        setAlwaysEncryptedSettings(SqlAlwaysEncryptedProperties alwaysEncryptedSettings) {
        this.alwaysEncryptedSettings = alwaysEncryptedSettings;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    @Generated
    public CredentialReference getCredential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the SqlServerLinkedServiceTypeProperties object itself.
     */
    @Generated
    public SqlServerLinkedServiceTypeProperties setCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setServer(Object server) {
        super.setServer(server);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setDatabase(Object database) {
        super.setDatabase(database);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setEncrypt(Object encrypt) {
        super.setEncrypt(encrypt);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setTrustServerCertificate(Object trustServerCertificate) {
        super.setTrustServerCertificate(trustServerCertificate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setHostNameInCertificate(Object hostNameInCertificate) {
        super.setHostNameInCertificate(hostNameInCertificate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setApplicationIntent(Object applicationIntent) {
        super.setApplicationIntent(applicationIntent);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setConnectTimeout(Object connectTimeout) {
        super.setConnectTimeout(connectTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setConnectRetryCount(Object connectRetryCount) {
        super.setConnectRetryCount(connectRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setConnectRetryInterval(Object connectRetryInterval) {
        super.setConnectRetryInterval(connectRetryInterval);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setLoadBalanceTimeout(Object loadBalanceTimeout) {
        super.setLoadBalanceTimeout(loadBalanceTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setCommandTimeout(Object commandTimeout) {
        super.setCommandTimeout(commandTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setIntegratedSecurity(Object integratedSecurity) {
        super.setIntegratedSecurity(integratedSecurity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setFailoverPartner(Object failoverPartner) {
        super.setFailoverPartner(failoverPartner);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setMaxPoolSize(Object maxPoolSize) {
        super.setMaxPoolSize(maxPoolSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setMinPoolSize(Object minPoolSize) {
        super.setMinPoolSize(minPoolSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setMultipleActiveResultSets(Object multipleActiveResultSets) {
        super.setMultipleActiveResultSets(multipleActiveResultSets);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setMultiSubnetFailover(Object multiSubnetFailover) {
        super.setMultiSubnetFailover(multiSubnetFailover);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setPacketSize(Object packetSize) {
        super.setPacketSize(packetSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SqlServerLinkedServiceTypeProperties setPooling(Object pooling) {
        super.setPooling(pooling);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (getServer() != null) {
            jsonWriter.writeUntypedField("server", getServer());
        }
        if (getDatabase() != null) {
            jsonWriter.writeUntypedField("database", getDatabase());
        }
        if (getEncrypt() != null) {
            jsonWriter.writeUntypedField("encrypt", getEncrypt());
        }
        if (getTrustServerCertificate() != null) {
            jsonWriter.writeUntypedField("trustServerCertificate", getTrustServerCertificate());
        }
        if (getHostNameInCertificate() != null) {
            jsonWriter.writeUntypedField("hostNameInCertificate", getHostNameInCertificate());
        }
        if (getApplicationIntent() != null) {
            jsonWriter.writeUntypedField("applicationIntent", getApplicationIntent());
        }
        if (getConnectTimeout() != null) {
            jsonWriter.writeUntypedField("connectTimeout", getConnectTimeout());
        }
        if (getConnectRetryCount() != null) {
            jsonWriter.writeUntypedField("connectRetryCount", getConnectRetryCount());
        }
        if (getConnectRetryInterval() != null) {
            jsonWriter.writeUntypedField("connectRetryInterval", getConnectRetryInterval());
        }
        if (getLoadBalanceTimeout() != null) {
            jsonWriter.writeUntypedField("loadBalanceTimeout", getLoadBalanceTimeout());
        }
        if (getCommandTimeout() != null) {
            jsonWriter.writeUntypedField("commandTimeout", getCommandTimeout());
        }
        if (getIntegratedSecurity() != null) {
            jsonWriter.writeUntypedField("integratedSecurity", getIntegratedSecurity());
        }
        if (getFailoverPartner() != null) {
            jsonWriter.writeUntypedField("failoverPartner", getFailoverPartner());
        }
        if (getMaxPoolSize() != null) {
            jsonWriter.writeUntypedField("maxPoolSize", getMaxPoolSize());
        }
        if (getMinPoolSize() != null) {
            jsonWriter.writeUntypedField("minPoolSize", getMinPoolSize());
        }
        if (getMultipleActiveResultSets() != null) {
            jsonWriter.writeUntypedField("multipleActiveResultSets", getMultipleActiveResultSets());
        }
        if (getMultiSubnetFailover() != null) {
            jsonWriter.writeUntypedField("multiSubnetFailover", getMultiSubnetFailover());
        }
        if (getPacketSize() != null) {
            jsonWriter.writeUntypedField("packetSize", getPacketSize());
        }
        if (getPooling() != null) {
            jsonWriter.writeUntypedField("pooling", getPooling());
        }
        if (this.connectionString != null) {
            jsonWriter.writeUntypedField("connectionString", this.connectionString);
        }
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        if (this.userName != null) {
            jsonWriter.writeUntypedField("userName", this.userName);
        }
        jsonWriter.writeJsonField("password", this.password);
        if (this.encryptedCredential != null) {
            jsonWriter.writeUntypedField("encryptedCredential", this.encryptedCredential);
        }
        jsonWriter.writeJsonField("alwaysEncryptedSettings", this.alwaysEncryptedSettings);
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerLinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerLinkedServiceTypeProperties.
     */
    @Generated
    public static SqlServerLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerLinkedServiceTypeProperties deserializedSqlServerLinkedServiceTypeProperties
                = new SqlServerLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setServer(reader.readUntyped());
                } else if ("database".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setDatabase(reader.readUntyped());
                } else if ("encrypt".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setEncrypt(reader.readUntyped());
                } else if ("trustServerCertificate".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setTrustServerCertificate(reader.readUntyped());
                } else if ("hostNameInCertificate".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setHostNameInCertificate(reader.readUntyped());
                } else if ("applicationIntent".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setApplicationIntent(reader.readUntyped());
                } else if ("connectTimeout".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setConnectTimeout(reader.readUntyped());
                } else if ("connectRetryCount".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setConnectRetryCount(reader.readUntyped());
                } else if ("connectRetryInterval".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setConnectRetryInterval(reader.readUntyped());
                } else if ("loadBalanceTimeout".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setLoadBalanceTimeout(reader.readUntyped());
                } else if ("commandTimeout".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setCommandTimeout(reader.readUntyped());
                } else if ("integratedSecurity".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setIntegratedSecurity(reader.readUntyped());
                } else if ("failoverPartner".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setFailoverPartner(reader.readUntyped());
                } else if ("maxPoolSize".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setMaxPoolSize(reader.readUntyped());
                } else if ("minPoolSize".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setMinPoolSize(reader.readUntyped());
                } else if ("multipleActiveResultSets".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setMultipleActiveResultSets(reader.readUntyped());
                } else if ("multiSubnetFailover".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setMultiSubnetFailover(reader.readUntyped());
                } else if ("packetSize".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setPacketSize(reader.readUntyped());
                } else if ("pooling".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.setPooling(reader.readUntyped());
                } else if ("connectionString".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.connectionString = reader.readUntyped();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.authenticationType
                        = SqlServerAuthenticationType.fromString(reader.getString());
                } else if ("userName".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.userName = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.password = SecretBase.fromJson(reader);
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.encryptedCredential = reader.readUntyped();
                } else if ("alwaysEncryptedSettings".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.alwaysEncryptedSettings
                        = SqlAlwaysEncryptedProperties.fromJson(reader);
                } else if ("credential".equals(fieldName)) {
                    deserializedSqlServerLinkedServiceTypeProperties.credential = CredentialReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerLinkedServiceTypeProperties;
        });
    }
}
