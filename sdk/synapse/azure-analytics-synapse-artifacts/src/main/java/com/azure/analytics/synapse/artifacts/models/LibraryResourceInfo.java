// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Library resource info.
 */
@Immutable
public final class LibraryResourceInfo implements JsonSerializable<LibraryResourceInfo> {
    /*
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    private String id;

    /*
     * record Id of the library/package.
     */
    private Integer recordId;

    /*
     * Provisioning status of the library/package.
     */
    private String state;

    /*
     * The creation time of the library/package.
     */
    private String created;

    /*
     * The last updated time of the library/package.
     */
    private String changed;

    /*
     * The type of the resource. E.g. LibraryArtifact
     */
    private String type;

    /*
     * Name of the library/package.
     */
    private String name;

    /*
     * Operation Id of the operation performed on library/package.
     */
    private String operationId;

    /*
     * artifact Id of the library/package.
     */
    private String artifactId;

    /**
     * Creates an instance of LibraryResourceInfo class.
     */
    public LibraryResourceInfo() {
    }

    /**
     * Get the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the recordId property: record Id of the library/package.
     * 
     * @return the recordId value.
     */
    public Integer getRecordId() {
        return this.recordId;
    }

    /**
     * Get the state property: Provisioning status of the library/package.
     * 
     * @return the state value.
     */
    public String getState() {
        return this.state;
    }

    /**
     * Get the created property: The creation time of the library/package.
     * 
     * @return the created value.
     */
    public String getCreated() {
        return this.created;
    }

    /**
     * Get the changed property: The last updated time of the library/package.
     * 
     * @return the changed value.
     */
    public String getChanged() {
        return this.changed;
    }

    /**
     * Get the type property: The type of the resource. E.g. LibraryArtifact.
     * 
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: Name of the library/package.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the operationId property: Operation Id of the operation performed on library/package.
     * 
     * @return the operationId value.
     */
    public String getOperationId() {
        return this.operationId;
    }

    /**
     * Get the artifactId property: artifact Id of the library/package.
     * 
     * @return the artifactId value.
     */
    public String getArtifactId() {
        return this.artifactId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LibraryResourceInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LibraryResourceInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LibraryResourceInfo.
     */
    public static LibraryResourceInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LibraryResourceInfo deserializedLibraryResourceInfo = new LibraryResourceInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLibraryResourceInfo.id = reader.getString();
                } else if ("recordId".equals(fieldName)) {
                    deserializedLibraryResourceInfo.recordId = reader.getNullable(JsonReader::getInt);
                } else if ("state".equals(fieldName)) {
                    deserializedLibraryResourceInfo.state = reader.getString();
                } else if ("created".equals(fieldName)) {
                    deserializedLibraryResourceInfo.created = reader.getString();
                } else if ("changed".equals(fieldName)) {
                    deserializedLibraryResourceInfo.changed = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLibraryResourceInfo.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLibraryResourceInfo.name = reader.getString();
                } else if ("operationId".equals(fieldName)) {
                    deserializedLibraryResourceInfo.operationId = reader.getString();
                } else if ("artifactId".equals(fieldName)) {
                    deserializedLibraryResourceInfo.artifactId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLibraryResourceInfo;
        });
    }
}
