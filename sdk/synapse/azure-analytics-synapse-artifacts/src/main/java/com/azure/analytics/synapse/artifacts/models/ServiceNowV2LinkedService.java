// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * ServiceNowV2 server linked service.
 */
@Fluent
public class ServiceNowV2LinkedService extends LinkedService {
    /*
     * Type of linked service.
     */
    @Generated
    private String type = "ServiceNowV2";

    /*
     * The endpoint of the ServiceNowV2 server. (i.e. <instance>.service-now.com)
     */
    @Generated
    private Object endpoint;

    /*
     * The authentication type to use.
     */
    @Generated
    private ServiceNowV2AuthenticationType authenticationType;

    /*
     * The user name used to connect to the ServiceNowV2 server for Basic and OAuth2 authentication.
     */
    @Generated
    private Object username;

    /*
     * The password corresponding to the user name for Basic and OAuth2 authentication.
     */
    @Generated
    private SecretBase password;

    /*
     * The client id for OAuth2 authentication.
     */
    @Generated
    private Object clientId;

    /*
     * The client secret for OAuth2 authentication.
     */
    @Generated
    private SecretBase clientSecret;

    /*
     * GrantType for OAuth2 authentication. Default value is password.
     */
    @Generated
    private Object grantType;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    @Generated
    private String encryptedCredential;

    /**
     * Creates an instance of ServiceNowV2LinkedService class.
     */
    @Generated
    public ServiceNowV2LinkedService() {
    }

    /**
     * Get the type property: Type of linked service.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the endpoint property: The endpoint of the ServiceNowV2 server. (i.e. &lt;instance&gt;.service-now.com).
     * 
     * @return the endpoint value.
     */
    @Generated
    public Object getEndpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The endpoint of the ServiceNowV2 server. (i.e. &lt;instance&gt;.service-now.com).
     * 
     * @param endpoint the endpoint value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setEndpoint(Object endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the authenticationType property: The authentication type to use.
     * 
     * @return the authenticationType value.
     */
    @Generated
    public ServiceNowV2AuthenticationType getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The authentication type to use.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setAuthenticationType(ServiceNowV2AuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the username property: The user name used to connect to the ServiceNowV2 server for Basic and OAuth2
     * authentication.
     * 
     * @return the username value.
     */
    @Generated
    public Object getUsername() {
        return this.username;
    }

    /**
     * Set the username property: The user name used to connect to the ServiceNowV2 server for Basic and OAuth2
     * authentication.
     * 
     * @param username the username value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password corresponding to the user name for Basic and OAuth2 authentication.
     * 
     * @return the password value.
     */
    @Generated
    public SecretBase getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The password corresponding to the user name for Basic and OAuth2 authentication.
     * 
     * @param password the password value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the clientId property: The client id for OAuth2 authentication.
     * 
     * @return the clientId value.
     */
    @Generated
    public Object getClientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The client id for OAuth2 authentication.
     * 
     * @param clientId the clientId value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setClientId(Object clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: The client secret for OAuth2 authentication.
     * 
     * @return the clientSecret value.
     */
    @Generated
    public SecretBase getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: The client secret for OAuth2 authentication.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setClientSecret(SecretBase clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Get the grantType property: GrantType for OAuth2 authentication. Default value is password.
     * 
     * @return the grantType value.
     */
    @Generated
    public Object getGrantType() {
        return this.grantType;
    }

    /**
     * Set the grantType property: GrantType for OAuth2 authentication. Default value is password.
     * 
     * @param grantType the grantType value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setGrantType(Object grantType) {
        this.grantType = grantType;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    @Generated
    public String getEncryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the ServiceNowV2LinkedService object itself.
     */
    @Generated
    public ServiceNowV2LinkedService setEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ServiceNowV2LinkedService setVersion(String version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ServiceNowV2LinkedService setConnectVia(IntegrationRuntimeReference connectVia) {
        super.setConnectVia(connectVia);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ServiceNowV2LinkedService setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ServiceNowV2LinkedService setParameters(Map<String, ParameterSpecification> parameters) {
        super.setParameters(parameters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ServiceNowV2LinkedService setAnnotations(List<Object> annotations) {
        super.setAnnotations(annotations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", getVersion());
        jsonWriter.writeJsonField("connectVia", getConnectVia());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("parameters", getParameters(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("annotations", getAnnotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        if (endpoint != null
            || authenticationType != null
            || username != null
            || password != null
            || clientId != null
            || clientSecret != null
            || grantType != null
            || encryptedCredential != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeUntypedField("endpoint", this.endpoint);
            jsonWriter.writeStringField("authenticationType",
                this.authenticationType == null ? null : this.authenticationType.toString());
            if (this.username != null) {
                jsonWriter.writeUntypedField("username", this.username);
            }
            jsonWriter.writeJsonField("password", this.password);
            if (this.clientId != null) {
                jsonWriter.writeUntypedField("clientId", this.clientId);
            }
            jsonWriter.writeJsonField("clientSecret", this.clientSecret);
            if (this.grantType != null) {
                jsonWriter.writeUntypedField("grantType", this.grantType);
            }
            jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceNowV2LinkedService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceNowV2LinkedService if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceNowV2LinkedService.
     */
    @Generated
    public static ServiceNowV2LinkedService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceNowV2LinkedService deserializedServiceNowV2LinkedService = new ServiceNowV2LinkedService();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedServiceNowV2LinkedService.setVersion(reader.getString());
                } else if ("connectVia".equals(fieldName)) {
                    deserializedServiceNowV2LinkedService.setConnectVia(IntegrationRuntimeReference.fromJson(reader));
                } else if ("description".equals(fieldName)) {
                    deserializedServiceNowV2LinkedService.setDescription(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    Map<String, ParameterSpecification> parameters
                        = reader.readMap(reader1 -> ParameterSpecification.fromJson(reader1));
                    deserializedServiceNowV2LinkedService.setParameters(parameters);
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedServiceNowV2LinkedService.setAnnotations(annotations);
                } else if ("type".equals(fieldName)) {
                    deserializedServiceNowV2LinkedService.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("endpoint".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.endpoint = reader.readUntyped();
                        } else if ("authenticationType".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.authenticationType
                                = ServiceNowV2AuthenticationType.fromString(reader.getString());
                        } else if ("username".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.username = reader.readUntyped();
                        } else if ("password".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.password = SecretBase.fromJson(reader);
                        } else if ("clientId".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.clientId = reader.readUntyped();
                        } else if ("clientSecret".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.clientSecret = SecretBase.fromJson(reader);
                        } else if ("grantType".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.grantType = reader.readUntyped();
                        } else if ("encryptedCredential".equals(fieldName)) {
                            deserializedServiceNowV2LinkedService.encryptedCredential = reader.getString();
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedServiceNowV2LinkedService.setAdditionalProperties(additionalProperties);

            return deserializedServiceNowV2LinkedService;
        });
    }
}
