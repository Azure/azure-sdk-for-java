// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * SQL script.
 */
@Fluent
public final class SqlScript implements JsonSerializable<SqlScript> {
    /*
     * The description of the SQL script.
     */
    private String description;

    /*
     * The type of the SQL script.
     */
    private SqlScriptType type;

    /*
     * The content of the SQL script.
     */
    private SqlScriptContent content;

    /*
     * The folder that this SQL script is in. If not specified, this SQL script will appear at the root level.
     */
    private SqlScriptFolder folder;

    /*
     * SQL script.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of SqlScript class.
     */
    public SqlScript() {
    }

    /**
     * Get the description property: The description of the SQL script.
     * 
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the SQL script.
     * 
     * @param description the description value to set.
     * @return the SqlScript object itself.
     */
    public SqlScript setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the type property: The type of the SQL script.
     * 
     * @return the type value.
     */
    public SqlScriptType getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of the SQL script.
     * 
     * @param type the type value to set.
     * @return the SqlScript object itself.
     */
    public SqlScript setType(SqlScriptType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the content property: The content of the SQL script.
     * 
     * @return the content value.
     */
    public SqlScriptContent getContent() {
        return this.content;
    }

    /**
     * Set the content property: The content of the SQL script.
     * 
     * @param content the content value to set.
     * @return the SqlScript object itself.
     */
    public SqlScript setContent(SqlScriptContent content) {
        this.content = content;
        return this;
    }

    /**
     * Get the folder property: The folder that this SQL script is in. If not specified, this SQL script will appear at
     * the root level.
     * 
     * @return the folder value.
     */
    public SqlScriptFolder getFolder() {
        return this.folder;
    }

    /**
     * Set the folder property: The folder that this SQL script is in. If not specified, this SQL script will appear at
     * the root level.
     * 
     * @param folder the folder value to set.
     * @return the SqlScript object itself.
     */
    public SqlScript setFolder(SqlScriptFolder folder) {
        this.folder = folder;
        return this;
    }

    /**
     * Get the additionalProperties property: SQL script.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: SQL script.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the SqlScript object itself.
     */
    public SqlScript setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("content", this.content);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("folder", this.folder);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlScript from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlScript if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlScript.
     */
    public static SqlScript fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlScript deserializedSqlScript = new SqlScript();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    deserializedSqlScript.content = SqlScriptContent.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedSqlScript.description = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSqlScript.type = SqlScriptType.fromString(reader.getString());
                } else if ("folder".equals(fieldName)) {
                    deserializedSqlScript.folder = SqlScriptFolder.fromJson(reader);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSqlScript.additionalProperties = additionalProperties;

            return deserializedSqlScript;
        });
    }
}
