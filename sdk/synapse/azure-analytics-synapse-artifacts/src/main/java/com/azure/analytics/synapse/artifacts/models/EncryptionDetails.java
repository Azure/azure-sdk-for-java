// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the encryption associated with the workspace.
 */
@Fluent
public final class EncryptionDetails implements JsonSerializable<EncryptionDetails> {
    /*
     * Double Encryption enabled
     */
    private Boolean doubleEncryptionEnabled;

    /*
     * Customer Managed Key Details
     */
    private CustomerManagedKeyDetails cmk;

    /**
     * Creates an instance of EncryptionDetails class.
     */
    public EncryptionDetails() {
    }

    /**
     * Get the doubleEncryptionEnabled property: Double Encryption enabled.
     * 
     * @return the doubleEncryptionEnabled value.
     */
    public Boolean isDoubleEncryptionEnabled() {
        return this.doubleEncryptionEnabled;
    }

    /**
     * Get the cmk property: Customer Managed Key Details.
     * 
     * @return the cmk value.
     */
    public CustomerManagedKeyDetails getCmk() {
        return this.cmk;
    }

    /**
     * Set the cmk property: Customer Managed Key Details.
     * 
     * @param cmk the cmk value to set.
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails setCmk(CustomerManagedKeyDetails cmk) {
        this.cmk = cmk;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("cmk", this.cmk);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionDetails.
     */
    public static EncryptionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionDetails deserializedEncryptionDetails = new EncryptionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("doubleEncryptionEnabled".equals(fieldName)) {
                    deserializedEncryptionDetails.doubleEncryptionEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("cmk".equals(fieldName)) {
                    deserializedEncryptionDetails.cmk = CustomerManagedKeyDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionDetails;
        });
    }
}
