// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Delete activity.
 */
@Fluent
public class DeleteActivity extends ExecutionActivity {
    /*
     * Type of activity.
     */
    private String type = "Delete";

    /*
     * If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
     */
    private Object recursive;

    /*
     * The max concurrent connections to connect data source at the same time.
     */
    private Integer maxConcurrentConnections;

    /*
     * Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
     */
    private Object enableLogging;

    /*
     * Log storage settings customer need to provide when enableLogging is true.
     */
    private LogStorageSettings logStorageSettings;

    /*
     * Delete activity dataset reference.
     */
    private DatasetReference dataset;

    /*
     * Delete activity store settings.
     */
    private StoreReadSettings storeSettings;

    /**
     * Creates an instance of DeleteActivity class.
     */
    public DeleteActivity() {
    }

    /**
     * Get the type property: Type of activity.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the recursive property: If true, files or sub-folders under current folder path will be deleted recursively.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the recursive value.
     */
    public Object getRecursive() {
        return this.recursive;
    }

    /**
     * Set the recursive property: If true, files or sub-folders under current folder path will be deleted recursively.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param recursive the recursive value to set.
     * @return the DeleteActivity object itself.
     */
    public DeleteActivity setRecursive(Object recursive) {
        this.recursive = recursive;
        return this;
    }

    /**
     * Get the maxConcurrentConnections property: The max concurrent connections to connect data source at the same
     * time.
     * 
     * @return the maxConcurrentConnections value.
     */
    public Integer getMaxConcurrentConnections() {
        return this.maxConcurrentConnections;
    }

    /**
     * Set the maxConcurrentConnections property: The max concurrent connections to connect data source at the same
     * time.
     * 
     * @param maxConcurrentConnections the maxConcurrentConnections value to set.
     * @return the DeleteActivity object itself.
     */
    public DeleteActivity setMaxConcurrentConnections(Integer maxConcurrentConnections) {
        this.maxConcurrentConnections = maxConcurrentConnections;
        return this;
    }

    /**
     * Get the enableLogging property: Whether to record detailed logs of delete-activity execution. Default value is
     * false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the enableLogging value.
     */
    public Object getEnableLogging() {
        return this.enableLogging;
    }

    /**
     * Set the enableLogging property: Whether to record detailed logs of delete-activity execution. Default value is
     * false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param enableLogging the enableLogging value to set.
     * @return the DeleteActivity object itself.
     */
    public DeleteActivity setEnableLogging(Object enableLogging) {
        this.enableLogging = enableLogging;
        return this;
    }

    /**
     * Get the logStorageSettings property: Log storage settings customer need to provide when enableLogging is true.
     * 
     * @return the logStorageSettings value.
     */
    public LogStorageSettings getLogStorageSettings() {
        return this.logStorageSettings;
    }

    /**
     * Set the logStorageSettings property: Log storage settings customer need to provide when enableLogging is true.
     * 
     * @param logStorageSettings the logStorageSettings value to set.
     * @return the DeleteActivity object itself.
     */
    public DeleteActivity setLogStorageSettings(LogStorageSettings logStorageSettings) {
        this.logStorageSettings = logStorageSettings;
        return this;
    }

    /**
     * Get the dataset property: Delete activity dataset reference.
     * 
     * @return the dataset value.
     */
    public DatasetReference getDataset() {
        return this.dataset;
    }

    /**
     * Set the dataset property: Delete activity dataset reference.
     * 
     * @param dataset the dataset value to set.
     * @return the DeleteActivity object itself.
     */
    public DeleteActivity setDataset(DatasetReference dataset) {
        this.dataset = dataset;
        return this;
    }

    /**
     * Get the storeSettings property: Delete activity store settings.
     * 
     * @return the storeSettings value.
     */
    public StoreReadSettings getStoreSettings() {
        return this.storeSettings;
    }

    /**
     * Set the storeSettings property: Delete activity store settings.
     * 
     * @param storeSettings the storeSettings value to set.
     * @return the DeleteActivity object itself.
     */
    public DeleteActivity setStoreSettings(StoreReadSettings storeSettings) {
        this.storeSettings = storeSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setLinkedServiceName(LinkedServiceReference linkedServiceName) {
        super.setLinkedServiceName(linkedServiceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setPolicy(ActivityPolicy policy) {
        super.setPolicy(policy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setState(ActivityState state) {
        super.setState(state);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setOnInactiveMarkAs(ActivityOnInactiveMarkAs onInactiveMarkAs) {
        super.setOnInactiveMarkAs(onInactiveMarkAs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setDependsOn(List<ActivityDependency> dependsOn) {
        super.setDependsOn(dependsOn);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeleteActivity setUserProperties(List<UserProperty> userProperties) {
        super.setUserProperties(userProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("state", getState() == null ? null : getState().toString());
        jsonWriter.writeStringField("onInactiveMarkAs",
            getOnInactiveMarkAs() == null ? null : getOnInactiveMarkAs().toString());
        jsonWriter.writeArrayField("dependsOn", getDependsOn(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("userProperties", getUserProperties(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("linkedServiceName", getLinkedServiceName());
        jsonWriter.writeJsonField("policy", getPolicy());
        jsonWriter.writeStringField("type", this.type);
        if (recursive != null
            || maxConcurrentConnections != null
            || enableLogging != null
            || logStorageSettings != null
            || dataset != null
            || storeSettings != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeUntypedField("recursive", this.recursive);
            jsonWriter.writeNumberField("maxConcurrentConnections", this.maxConcurrentConnections);
            jsonWriter.writeUntypedField("enableLogging", this.enableLogging);
            jsonWriter.writeJsonField("logStorageSettings", this.logStorageSettings);
            jsonWriter.writeJsonField("dataset", this.dataset);
            jsonWriter.writeJsonField("storeSettings", this.storeSettings);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeleteActivity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeleteActivity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeleteActivity.
     */
    public static DeleteActivity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeleteActivity deserializedDeleteActivity = new DeleteActivity();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDeleteActivity.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedDeleteActivity.setDescription(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedDeleteActivity.setState(ActivityState.fromString(reader.getString()));
                } else if ("onInactiveMarkAs".equals(fieldName)) {
                    deserializedDeleteActivity
                        .setOnInactiveMarkAs(ActivityOnInactiveMarkAs.fromString(reader.getString()));
                } else if ("dependsOn".equals(fieldName)) {
                    List<ActivityDependency> dependsOn
                        = reader.readArray(reader1 -> ActivityDependency.fromJson(reader1));
                    deserializedDeleteActivity.setDependsOn(dependsOn);
                } else if ("userProperties".equals(fieldName)) {
                    List<UserProperty> userProperties = reader.readArray(reader1 -> UserProperty.fromJson(reader1));
                    deserializedDeleteActivity.setUserProperties(userProperties);
                } else if ("linkedServiceName".equals(fieldName)) {
                    deserializedDeleteActivity.setLinkedServiceName(LinkedServiceReference.fromJson(reader));
                } else if ("policy".equals(fieldName)) {
                    deserializedDeleteActivity.setPolicy(ActivityPolicy.fromJson(reader));
                } else if ("type".equals(fieldName)) {
                    deserializedDeleteActivity.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("recursive".equals(fieldName)) {
                            deserializedDeleteActivity.recursive = reader.readUntyped();
                        } else if ("maxConcurrentConnections".equals(fieldName)) {
                            deserializedDeleteActivity.maxConcurrentConnections
                                = reader.getNullable(JsonReader::getInt);
                        } else if ("enableLogging".equals(fieldName)) {
                            deserializedDeleteActivity.enableLogging = reader.readUntyped();
                        } else if ("logStorageSettings".equals(fieldName)) {
                            deserializedDeleteActivity.logStorageSettings = LogStorageSettings.fromJson(reader);
                        } else if ("dataset".equals(fieldName)) {
                            deserializedDeleteActivity.dataset = DatasetReference.fromJson(reader);
                        } else if ("storeSettings".equals(fieldName)) {
                            deserializedDeleteActivity.storeSettings = StoreReadSettings.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedDeleteActivity.setAdditionalProperties(additionalProperties);

            return deserializedDeleteActivity;
        });
    }
}
