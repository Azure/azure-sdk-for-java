// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts;

import com.azure.analytics.synapse.artifacts.implementation.ArtifactsClientImpl;
import com.azure.analytics.synapse.artifacts.models.CloudErrorException;
import com.azure.analytics.synapse.artifacts.models.DDLBatch;
import com.azure.analytics.synapse.artifacts.models.DatabaseEntity;
import com.azure.analytics.synapse.artifacts.models.MDEntity;
import com.azure.analytics.synapse.artifacts.models.QueryArtifactsResponse;
import com.azure.analytics.synapse.artifacts.models.SASEntityType;
import com.azure.analytics.synapse.artifacts.models.SyMsapiddlResponse;
import com.azure.analytics.synapse.artifacts.models.SyMsapiddlResponses;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ArtifactsClient type. */
@ServiceClient(builder = ArtifactsClientBuilder.class, isAsync = true)
public final class ArtifactsAsyncClient {
    @Generated private final ArtifactsClientImpl serviceClient;

    /**
     * Initializes an instance of ArtifactsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    ArtifactsAsyncClient(ArtifactsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param createArtifactsPayload DDLBatch payload containing artifact drafts to be created or deleted or modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the publish response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SyMsapiddlResponses>> executeChangeWithResponse(DDLBatch createArtifactsPayload) {
        return this.serviceClient.executeChangeWithResponseAsync(createArtifactsPayload);
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param createArtifactsPayload DDLBatch payload containing artifact drafts to be created or deleted or modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the publish response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SyMsapiddlResponses> executeChange(DDLBatch createArtifactsPayload) {
        return this.serviceClient.executeChangeAsync(createArtifactsPayload);
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param validationType Validation Type - Currently only IDWValidation is supported.
     * @param createArtifactsPayload DDLBatch containing artifacts to be Created or Deleted or Modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> executeChangeWithValidationWithResponse(
            String validationType, DDLBatch createArtifactsPayload) {
        return this.serviceClient.executeChangeWithValidationWithResponseAsync(validationType, createArtifactsPayload);
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param validationType Validation Type - Currently only IDWValidation is supported.
     * @param createArtifactsPayload DDLBatch containing artifacts to be Created or Deleted or Modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> executeChangeWithValidation(String validationType, DDLBatch createArtifactsPayload) {
        return this.serviceClient.executeChangeWithValidationAsync(validationType, createArtifactsPayload);
    }

    /**
     * Get all databases in a workspace.
     *
     * <p>Get all databases in a workspace.
     *
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all databases in a workspace along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> listDatabasesWithResponse(
            String continuationToken, Long maxPageSize) {
        return this.serviceClient.listDatabasesWithResponseAsync(continuationToken, maxPageSize);
    }

    /**
     * Get all databases in a workspace.
     *
     * <p>Get all databases in a workspace.
     *
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all databases in a workspace on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listDatabases(String continuationToken, Long maxPageSize) {
        return this.serviceClient.listDatabasesAsync(continuationToken, maxPageSize);
    }

    /**
     * Get all databases in a workspace.
     *
     * <p>Get all databases in a workspace.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all databases in a workspace on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listDatabases() {
        return this.serviceClient.listDatabasesAsync();
    }

    /**
     * List all Artifacts of a type in a database.
     *
     * <p>List all Artifacts of a type in a database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> listArtifactsWithResponse(
            String databaseName, SASEntityType artifactType, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listArtifactsWithResponseAsync(
                databaseName, artifactType, continuationToken, maxPageSize);
    }

    /**
     * List all Artifacts of a type in a database.
     *
     * <p>List all Artifacts of a type in a database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listArtifacts(
            String databaseName, SASEntityType artifactType, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listArtifactsAsync(databaseName, artifactType, continuationToken, maxPageSize);
    }

    /**
     * List all Artifacts of a type in a database.
     *
     * <p>List all Artifacts of a type in a database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listArtifacts(String databaseName, SASEntityType artifactType) {
        return this.serviceClient.listArtifactsAsync(databaseName, artifactType);
    }

    /**
     * List all artifacts in schema by type.
     *
     * <p>List all Artifacts in schema by type.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> listArtifactsInSchemaByTypeWithResponse(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String continuationToken,
            Long maxPageSize) {
        return this.serviceClient.listArtifactsInSchemaByTypeWithResponseAsync(
                databaseName, schemaName, artifactType, continuationToken, maxPageSize);
    }

    /**
     * List all artifacts in schema by type.
     *
     * <p>List all Artifacts in schema by type.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listArtifactsInSchemaByType(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String continuationToken,
            Long maxPageSize) {
        return this.serviceClient.listArtifactsInSchemaByTypeAsync(
                databaseName, schemaName, artifactType, continuationToken, maxPageSize);
    }

    /**
     * List all artifacts in schema by type.
     *
     * <p>List all Artifacts in schema by type.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listArtifactsInSchemaByType(
            String databaseName, String schemaName, SASEntityType artifactType) {
        return this.serviceClient.listArtifactsInSchemaByTypeAsync(databaseName, schemaName, artifactType);
    }

    /**
     * List all partition information for a table.
     *
     * <p>List all partition information for a table.
     *
     * @param databaseName Database name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> listPartitionInfosForTableWithResponse(
            String databaseName, String tableName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForTableWithResponseAsync(
                databaseName, tableName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a table.
     *
     * <p>List all partition information for a table.
     *
     * @param databaseName Database name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForTable(
            String databaseName, String tableName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForTableAsync(
                databaseName, tableName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a table.
     *
     * <p>List all partition information for a table.
     *
     * @param databaseName Database name.
     * @param tableName Table name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForTable(String databaseName, String tableName) {
        return this.serviceClient.listPartitionInfosForTableAsync(databaseName, tableName);
    }

    /**
     * List all partition information for a view.
     *
     * <p>List all partition information for a view.
     *
     * @param databaseName Database name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> listPartitionInfosForViewWithResponse(
            String databaseName, String viewName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForViewWithResponseAsync(
                databaseName, viewName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a view.
     *
     * <p>List all partition information for a view.
     *
     * @param databaseName Database name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForView(
            String databaseName, String viewName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForViewAsync(
                databaseName, viewName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a view.
     *
     * <p>List all partition information for a view.
     *
     * @param databaseName Database name.
     * @param viewName View name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForView(String databaseName, String viewName) {
        return this.serviceClient.listPartitionInfosForViewAsync(databaseName, viewName);
    }

    /**
     * List all partition information for table in schema.
     *
     * <p>List all partition information for a table in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> listPartitionInfosForSchemaAndTableWithResponse(
            String databaseName, String schemaName, String tableName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForSchemaAndTableWithResponseAsync(
                databaseName, schemaName, tableName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for table in schema.
     *
     * <p>List all partition information for a table in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForSchemaAndTable(
            String databaseName, String schemaName, String tableName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForSchemaAndTableAsync(
                databaseName, schemaName, tableName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for table in schema.
     *
     * <p>List all partition information for a table in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param tableName Table name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForSchemaAndTable(
            String databaseName, String schemaName, String tableName) {
        return this.serviceClient.listPartitionInfosForSchemaAndTableAsync(databaseName, schemaName, tableName);
    }

    /**
     * List all partition information for a view in schema.
     *
     * <p>List all partition information for a view in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> listPartitionInfosForSchemaAndViewWithResponse(
            String databaseName, String schemaName, String viewName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForSchemaAndViewWithResponseAsync(
                databaseName, schemaName, viewName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a view in schema.
     *
     * <p>List all partition information for a view in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForSchemaAndView(
            String databaseName, String schemaName, String viewName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForSchemaAndViewAsync(
                databaseName, schemaName, viewName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a view in schema.
     *
     * <p>List all partition information for a view in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param viewName View name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> listPartitionInfosForSchemaAndView(
            String databaseName, String schemaName, String viewName) {
        return this.serviceClient.listPartitionInfosForSchemaAndViewAsync(databaseName, schemaName, viewName);
    }

    /**
     * Get details about a database.
     *
     * <p>Get details about a database.
     *
     * @param databaseName Database name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a database along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DatabaseEntity>> getDatabaseWithResponse(String databaseName) {
        return this.serviceClient.getDatabaseWithResponseAsync(databaseName);
    }

    /**
     * Get details about a database.
     *
     * <p>Get details about a database.
     *
     * @param databaseName Database name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a database on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatabaseEntity> getDatabase(String databaseName) {
        return this.serviceClient.getDatabaseAsync(databaseName);
    }

    /**
     * Put a database.
     *
     * <p>Put a database.
     *
     * @param databaseName Database name.
     * @param createArtifactsPayload Database entity payload to create or update a Database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SyMsapiddlResponse>> putDatabaseWithResponse(
            String databaseName, DatabaseEntity createArtifactsPayload) {
        return this.serviceClient.putDatabaseWithResponseAsync(databaseName, createArtifactsPayload);
    }

    /**
     * Put a database.
     *
     * <p>Put a database.
     *
     * @param databaseName Database name.
     * @param createArtifactsPayload Database entity payload to create or update a Database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SyMsapiddlResponse> putDatabase(String databaseName, DatabaseEntity createArtifactsPayload) {
        return this.serviceClient.putDatabaseAsync(databaseName, createArtifactsPayload);
    }

    /**
     * Delete a database.
     *
     * <p>Delete a database.
     *
     * @param databaseName Database name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDatabaseWithResponse(String databaseName) {
        return this.serviceClient.deleteDatabaseWithResponseAsync(databaseName);
    }

    /**
     * Delete a database.
     *
     * <p>Delete a database.
     *
     * @param databaseName Database name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDatabase(String databaseName) {
        return this.serviceClient.deleteDatabaseAsync(databaseName);
    }

    /**
     * Get an artifact from database.
     *
     * <p>Get an artifact from database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from database along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MDEntity>> getArtifactFromDBWithResponse(
            String databaseName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.getArtifactFromDBWithResponseAsync(databaseName, artifactType, artifactName);
    }

    /**
     * Get an artifact from database.
     *
     * <p>Get an artifact from database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from database on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MDEntity> getArtifactFromDB(String databaseName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.getArtifactFromDBAsync(databaseName, artifactType, artifactName);
    }

    /**
     * Put an artifact in a Database.
     *
     * <p>Put an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact entity to be created/modified.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SyMsapiddlResponse>> putArtifactInDBWithResponse(
            String databaseName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload,
            String continuationToken,
            Long maxPageSize) {
        return this.serviceClient.putArtifactInDBWithResponseAsync(
                databaseName, artifactType, artifactName, createArtifactsPayload, continuationToken, maxPageSize);
    }

    /**
     * Put an artifact in a Database.
     *
     * <p>Put an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact entity to be created/modified.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SyMsapiddlResponse> putArtifactInDB(
            String databaseName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload,
            String continuationToken,
            Long maxPageSize) {
        return this.serviceClient.putArtifactInDBAsync(
                databaseName, artifactType, artifactName, createArtifactsPayload, continuationToken, maxPageSize);
    }

    /**
     * Put an artifact in a Database.
     *
     * <p>Put an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact entity to be created/modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SyMsapiddlResponse> putArtifactInDB(
            String databaseName, SASEntityType artifactType, String artifactName, MDEntity createArtifactsPayload) {
        return this.serviceClient.putArtifactInDBAsync(
                databaseName, artifactType, artifactName, createArtifactsPayload);
    }

    /**
     * Delete an artifact in a Database.
     *
     * <p>Delete an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteArtifactForDBWithResponse(
            String databaseName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.deleteArtifactForDBWithResponseAsync(databaseName, artifactType, artifactName);
    }

    /**
     * Delete an artifact in a Database.
     *
     * <p>Delete an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteArtifactForDB(String databaseName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.deleteArtifactForDBAsync(databaseName, artifactType, artifactName);
    }

    /**
     * Get an artifact from schema.
     *
     * <p>Get an artifact from schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from schema along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MDEntity>> getArtifactFromSchemaWithResponse(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.getArtifactFromSchemaWithResponseAsync(
                databaseName, schemaName, artifactType, artifactName);
    }

    /**
     * Get an artifact from schema.
     *
     * <p>Get an artifact from schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from schema on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MDEntity> getArtifactFromSchema(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.getArtifactFromSchemaAsync(databaseName, schemaName, artifactType, artifactName);
    }

    /**
     * Create or Update an artifact in a schema.
     *
     * <p>Create or Update an artifact in a schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact object to be create/updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SyMsapiddlResponse>> putArtifactInSchemaWithResponse(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload) {
        return this.serviceClient.putArtifactInSchemaWithResponseAsync(
                databaseName, schemaName, artifactType, artifactName, createArtifactsPayload);
    }

    /**
     * Create or Update an artifact in a schema.
     *
     * <p>Create or Update an artifact in a schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact object to be create/updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SyMsapiddlResponse> putArtifactInSchema(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload) {
        return this.serviceClient.putArtifactInSchemaAsync(
                databaseName, schemaName, artifactType, artifactName, createArtifactsPayload);
    }

    /**
     * Delete an artifact from Schema.
     *
     * <p>Delete an artifact from Schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteArtifactFromSchemaWithResponse(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.deleteArtifactFromSchemaWithResponseAsync(
                databaseName, schemaName, artifactType, artifactName);
    }

    /**
     * Delete an artifact from Schema.
     *
     * <p>Delete an artifact from Schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteArtifactFromSchema(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.deleteArtifactFromSchemaAsync(databaseName, schemaName, artifactType, artifactName);
    }

    /**
     * Get the status of validation by operation Id.
     *
     * <p>Get the status of validation by operation Id.
     *
     * @param operationId Operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of validation by operation Id along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QueryArtifactsResponse>> getSyMSOperationStatusWithResponse(String operationId) {
        return this.serviceClient.getSyMSOperationStatusWithResponseAsync(operationId);
    }

    /**
     * Get the status of validation by operation Id.
     *
     * <p>Get the status of validation by operation Id.
     *
     * @param operationId Operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of validation by operation Id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QueryArtifactsResponse> getSyMSOperationStatus(String operationId) {
        return this.serviceClient.getSyMSOperationStatusAsync(operationId);
    }
}
