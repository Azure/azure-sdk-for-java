// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Information about a pipeline run.
 */
@Fluent
public final class PipelineRun implements JsonSerializable<PipelineRun> {
    /*
     * Identifier of a run.
     */
    private String runId;

    /*
     * Identifier that correlates all the recovery runs of a pipeline run.
     */
    private String runGroupId;

    /*
     * Indicates if the recovered pipeline run is the latest in its group.
     */
    private Boolean isLatest;

    /*
     * The pipeline name.
     */
    private String pipelineName;

    /*
     * The full or partial list of parameter name, value pair used in the pipeline run.
     */
    private Map<String, String> parameters;

    /*
     * Entity that started the pipeline run.
     */
    private PipelineRunInvokedBy invokedBy;

    /*
     * The last updated timestamp for the pipeline run event in ISO8601 format.
     */
    private OffsetDateTime lastUpdated;

    /*
     * The start time of a pipeline run in ISO8601 format.
     */
    private OffsetDateTime runStart;

    /*
     * The end time of a pipeline run in ISO8601 format.
     */
    private OffsetDateTime runEnd;

    /*
     * The duration of a pipeline run.
     */
    private Integer durationInMs;

    /*
     * The status of a pipeline run.
     */
    private String status;

    /*
     * The message from a pipeline run.
     */
    private String message;

    /*
     * Information about a pipeline run.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of PipelineRun class.
     */
    public PipelineRun() {
    }

    /**
     * Get the runId property: Identifier of a run.
     * 
     * @return the runId value.
     */
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the runGroupId property: Identifier that correlates all the recovery runs of a pipeline run.
     * 
     * @return the runGroupId value.
     */
    public String getRunGroupId() {
        return this.runGroupId;
    }

    /**
     * Get the isLatest property: Indicates if the recovered pipeline run is the latest in its group.
     * 
     * @return the isLatest value.
     */
    public Boolean isLatest() {
        return this.isLatest;
    }

    /**
     * Get the pipelineName property: The pipeline name.
     * 
     * @return the pipelineName value.
     */
    public String getPipelineName() {
        return this.pipelineName;
    }

    /**
     * Get the parameters property: The full or partial list of parameter name, value pair used in the pipeline run.
     * 
     * @return the parameters value.
     */
    public Map<String, String> getParameters() {
        return this.parameters;
    }

    /**
     * Get the invokedBy property: Entity that started the pipeline run.
     * 
     * @return the invokedBy value.
     */
    public PipelineRunInvokedBy getInvokedBy() {
        return this.invokedBy;
    }

    /**
     * Get the lastUpdated property: The last updated timestamp for the pipeline run event in ISO8601 format.
     * 
     * @return the lastUpdated value.
     */
    public OffsetDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Get the runStart property: The start time of a pipeline run in ISO8601 format.
     * 
     * @return the runStart value.
     */
    public OffsetDateTime getRunStart() {
        return this.runStart;
    }

    /**
     * Get the runEnd property: The end time of a pipeline run in ISO8601 format.
     * 
     * @return the runEnd value.
     */
    public OffsetDateTime getRunEnd() {
        return this.runEnd;
    }

    /**
     * Get the durationInMs property: The duration of a pipeline run.
     * 
     * @return the durationInMs value.
     */
    public Integer getDurationInMs() {
        return this.durationInMs;
    }

    /**
     * Get the status property: The status of a pipeline run.
     * 
     * @return the status value.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the message property: The message from a pipeline run.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the additionalProperties property: Information about a pipeline run.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Information about a pipeline run.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the PipelineRun object itself.
     */
    public PipelineRun setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineRun from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineRun if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineRun.
     */
    public static PipelineRun fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineRun deserializedPipelineRun = new PipelineRun();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runId".equals(fieldName)) {
                    deserializedPipelineRun.runId = reader.getString();
                } else if ("runGroupId".equals(fieldName)) {
                    deserializedPipelineRun.runGroupId = reader.getString();
                } else if ("isLatest".equals(fieldName)) {
                    deserializedPipelineRun.isLatest = reader.getNullable(JsonReader::getBoolean);
                } else if ("pipelineName".equals(fieldName)) {
                    deserializedPipelineRun.pipelineName = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedPipelineRun.parameters = parameters;
                } else if ("invokedBy".equals(fieldName)) {
                    deserializedPipelineRun.invokedBy = PipelineRunInvokedBy.fromJson(reader);
                } else if ("lastUpdated".equals(fieldName)) {
                    deserializedPipelineRun.lastUpdated
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("runStart".equals(fieldName)) {
                    deserializedPipelineRun.runStart
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("runEnd".equals(fieldName)) {
                    deserializedPipelineRun.runEnd
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("durationInMs".equals(fieldName)) {
                    deserializedPipelineRun.durationInMs = reader.getNullable(JsonReader::getInt);
                } else if ("status".equals(fieldName)) {
                    deserializedPipelineRun.status = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedPipelineRun.message = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedPipelineRun.additionalProperties = additionalProperties;

            return deserializedPipelineRun;
        });
    }
}
