// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LinkTableRequestSource model.
 */
@Fluent
public final class LinkTableRequestSource implements JsonSerializable<LinkTableRequestSource> {
    /*
     * Source table table name
     */
    private String tableName;

    /*
     * Source table schema name
     */
    private String schemaName;

    /**
     * Creates an instance of LinkTableRequestSource class.
     */
    public LinkTableRequestSource() {
    }

    /**
     * Get the tableName property: Source table table name.
     * 
     * @return the tableName value.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: Source table table name.
     * 
     * @param tableName the tableName value to set.
     * @return the LinkTableRequestSource object itself.
     */
    public LinkTableRequestSource setTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Get the schemaName property: Source table schema name.
     * 
     * @return the schemaName value.
     */
    public String getSchemaName() {
        return this.schemaName;
    }

    /**
     * Set the schemaName property: Source table schema name.
     * 
     * @param schemaName the schemaName value to set.
     * @return the LinkTableRequestSource object itself.
     */
    public LinkTableRequestSource setSchemaName(String schemaName) {
        this.schemaName = schemaName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tableName", this.tableName);
        jsonWriter.writeStringField("schemaName", this.schemaName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkTableRequestSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkTableRequestSource if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkTableRequestSource.
     */
    public static LinkTableRequestSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkTableRequestSource deserializedLinkTableRequestSource = new LinkTableRequestSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tableName".equals(fieldName)) {
                    deserializedLinkTableRequestSource.tableName = reader.getString();
                } else if ("schemaName".equals(fieldName)) {
                    deserializedLinkTableRequestSource.schemaName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkTableRequestSource;
        });
    }
}
