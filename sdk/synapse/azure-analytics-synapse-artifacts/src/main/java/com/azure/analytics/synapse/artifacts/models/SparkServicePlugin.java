// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The SparkServicePlugin model.
 */
@Fluent
public final class SparkServicePlugin implements JsonSerializable<SparkServicePlugin> {
    /*
     * The preparationStartedAt property.
     */
    private OffsetDateTime preparationStartedAt;

    /*
     * The resourceAcquisitionStartedAt property.
     */
    private OffsetDateTime resourceAcquisitionStartedAt;

    /*
     * The submissionStartedAt property.
     */
    private OffsetDateTime submissionStartedAt;

    /*
     * The monitoringStartedAt property.
     */
    private OffsetDateTime monitoringStartedAt;

    /*
     * The cleanupStartedAt property.
     */
    private OffsetDateTime cleanupStartedAt;

    /*
     * The currentState property.
     */
    private PluginCurrentState currentState;

    /**
     * Creates an instance of SparkServicePlugin class.
     */
    public SparkServicePlugin() {
    }

    /**
     * Get the preparationStartedAt property: The preparationStartedAt property.
     * 
     * @return the preparationStartedAt value.
     */
    public OffsetDateTime getPreparationStartedAt() {
        return this.preparationStartedAt;
    }

    /**
     * Set the preparationStartedAt property: The preparationStartedAt property.
     * 
     * @param preparationStartedAt the preparationStartedAt value to set.
     * @return the SparkServicePlugin object itself.
     */
    public SparkServicePlugin setPreparationStartedAt(OffsetDateTime preparationStartedAt) {
        this.preparationStartedAt = preparationStartedAt;
        return this;
    }

    /**
     * Get the resourceAcquisitionStartedAt property: The resourceAcquisitionStartedAt property.
     * 
     * @return the resourceAcquisitionStartedAt value.
     */
    public OffsetDateTime getResourceAcquisitionStartedAt() {
        return this.resourceAcquisitionStartedAt;
    }

    /**
     * Set the resourceAcquisitionStartedAt property: The resourceAcquisitionStartedAt property.
     * 
     * @param resourceAcquisitionStartedAt the resourceAcquisitionStartedAt value to set.
     * @return the SparkServicePlugin object itself.
     */
    public SparkServicePlugin setResourceAcquisitionStartedAt(OffsetDateTime resourceAcquisitionStartedAt) {
        this.resourceAcquisitionStartedAt = resourceAcquisitionStartedAt;
        return this;
    }

    /**
     * Get the submissionStartedAt property: The submissionStartedAt property.
     * 
     * @return the submissionStartedAt value.
     */
    public OffsetDateTime getSubmissionStartedAt() {
        return this.submissionStartedAt;
    }

    /**
     * Set the submissionStartedAt property: The submissionStartedAt property.
     * 
     * @param submissionStartedAt the submissionStartedAt value to set.
     * @return the SparkServicePlugin object itself.
     */
    public SparkServicePlugin setSubmissionStartedAt(OffsetDateTime submissionStartedAt) {
        this.submissionStartedAt = submissionStartedAt;
        return this;
    }

    /**
     * Get the monitoringStartedAt property: The monitoringStartedAt property.
     * 
     * @return the monitoringStartedAt value.
     */
    public OffsetDateTime getMonitoringStartedAt() {
        return this.monitoringStartedAt;
    }

    /**
     * Set the monitoringStartedAt property: The monitoringStartedAt property.
     * 
     * @param monitoringStartedAt the monitoringStartedAt value to set.
     * @return the SparkServicePlugin object itself.
     */
    public SparkServicePlugin setMonitoringStartedAt(OffsetDateTime monitoringStartedAt) {
        this.monitoringStartedAt = monitoringStartedAt;
        return this;
    }

    /**
     * Get the cleanupStartedAt property: The cleanupStartedAt property.
     * 
     * @return the cleanupStartedAt value.
     */
    public OffsetDateTime getCleanupStartedAt() {
        return this.cleanupStartedAt;
    }

    /**
     * Set the cleanupStartedAt property: The cleanupStartedAt property.
     * 
     * @param cleanupStartedAt the cleanupStartedAt value to set.
     * @return the SparkServicePlugin object itself.
     */
    public SparkServicePlugin setCleanupStartedAt(OffsetDateTime cleanupStartedAt) {
        this.cleanupStartedAt = cleanupStartedAt;
        return this;
    }

    /**
     * Get the currentState property: The currentState property.
     * 
     * @return the currentState value.
     */
    public PluginCurrentState getCurrentState() {
        return this.currentState;
    }

    /**
     * Set the currentState property: The currentState property.
     * 
     * @param currentState the currentState value to set.
     * @return the SparkServicePlugin object itself.
     */
    public SparkServicePlugin setCurrentState(PluginCurrentState currentState) {
        this.currentState = currentState;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("preparationStartedAt",
            this.preparationStartedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.preparationStartedAt));
        jsonWriter.writeStringField("resourceAcquisitionStartedAt",
            this.resourceAcquisitionStartedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.resourceAcquisitionStartedAt));
        jsonWriter.writeStringField("submissionStartedAt",
            this.submissionStartedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.submissionStartedAt));
        jsonWriter.writeStringField("monitoringStartedAt",
            this.monitoringStartedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.monitoringStartedAt));
        jsonWriter.writeStringField("cleanupStartedAt",
            this.cleanupStartedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.cleanupStartedAt));
        jsonWriter.writeStringField("currentState", this.currentState == null ? null : this.currentState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkServicePlugin from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkServicePlugin if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SparkServicePlugin.
     */
    public static SparkServicePlugin fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkServicePlugin deserializedSparkServicePlugin = new SparkServicePlugin();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("preparationStartedAt".equals(fieldName)) {
                    deserializedSparkServicePlugin.preparationStartedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("resourceAcquisitionStartedAt".equals(fieldName)) {
                    deserializedSparkServicePlugin.resourceAcquisitionStartedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("submissionStartedAt".equals(fieldName)) {
                    deserializedSparkServicePlugin.submissionStartedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("monitoringStartedAt".equals(fieldName)) {
                    deserializedSparkServicePlugin.monitoringStartedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("cleanupStartedAt".equals(fieldName)) {
                    deserializedSparkServicePlugin.cleanupStartedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("currentState".equals(fieldName)) {
                    deserializedSparkServicePlugin.currentState = PluginCurrentState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkServicePlugin;
        });
    }
}
