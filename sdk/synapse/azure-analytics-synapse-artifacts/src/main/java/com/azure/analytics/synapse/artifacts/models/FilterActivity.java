// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Filter and return results from input array based on the conditions.
 */
@Fluent
public class FilterActivity extends ControlActivity {
    /*
     * Type of activity.
     */
    private String type = "Filter";

    /*
     * Input array on which filter should be applied.
     */
    private Expression items;

    /*
     * Condition to be used for filtering the input.
     */
    private Expression condition;

    /**
     * Creates an instance of FilterActivity class.
     */
    public FilterActivity() {
    }

    /**
     * Get the type property: Type of activity.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the items property: Input array on which filter should be applied.
     * 
     * @return the items value.
     */
    public Expression getItems() {
        return this.items;
    }

    /**
     * Set the items property: Input array on which filter should be applied.
     * 
     * @param items the items value to set.
     * @return the FilterActivity object itself.
     */
    public FilterActivity setItems(Expression items) {
        this.items = items;
        return this;
    }

    /**
     * Get the condition property: Condition to be used for filtering the input.
     * 
     * @return the condition value.
     */
    public Expression getCondition() {
        return this.condition;
    }

    /**
     * Set the condition property: Condition to be used for filtering the input.
     * 
     * @param condition the condition value to set.
     * @return the FilterActivity object itself.
     */
    public FilterActivity setCondition(Expression condition) {
        this.condition = condition;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilterActivity setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilterActivity setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilterActivity setState(ActivityState state) {
        super.setState(state);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilterActivity setOnInactiveMarkAs(ActivityOnInactiveMarkAs onInactiveMarkAs) {
        super.setOnInactiveMarkAs(onInactiveMarkAs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilterActivity setDependsOn(List<ActivityDependency> dependsOn) {
        super.setDependsOn(dependsOn);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilterActivity setUserProperties(List<UserProperty> userProperties) {
        super.setUserProperties(userProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("state", getState() == null ? null : getState().toString());
        jsonWriter.writeStringField("onInactiveMarkAs",
            getOnInactiveMarkAs() == null ? null : getOnInactiveMarkAs().toString());
        jsonWriter.writeArrayField("dependsOn", getDependsOn(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("userProperties", getUserProperties(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type);
        if (items != null || condition != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeJsonField("items", this.items);
            jsonWriter.writeJsonField("condition", this.condition);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterActivity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterActivity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterActivity.
     */
    public static FilterActivity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterActivity deserializedFilterActivity = new FilterActivity();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedFilterActivity.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedFilterActivity.setDescription(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedFilterActivity.setState(ActivityState.fromString(reader.getString()));
                } else if ("onInactiveMarkAs".equals(fieldName)) {
                    deserializedFilterActivity
                        .setOnInactiveMarkAs(ActivityOnInactiveMarkAs.fromString(reader.getString()));
                } else if ("dependsOn".equals(fieldName)) {
                    List<ActivityDependency> dependsOn
                        = reader.readArray(reader1 -> ActivityDependency.fromJson(reader1));
                    deserializedFilterActivity.setDependsOn(dependsOn);
                } else if ("userProperties".equals(fieldName)) {
                    List<UserProperty> userProperties = reader.readArray(reader1 -> UserProperty.fromJson(reader1));
                    deserializedFilterActivity.setUserProperties(userProperties);
                } else if ("type".equals(fieldName)) {
                    deserializedFilterActivity.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("items".equals(fieldName)) {
                            deserializedFilterActivity.items = Expression.fromJson(reader);
                        } else if ("condition".equals(fieldName)) {
                            deserializedFilterActivity.condition = Expression.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedFilterActivity.setAdditionalProperties(additionalProperties);

            return deserializedFilterActivity;
        });
    }
}
