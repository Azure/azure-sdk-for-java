// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Type conversion settings.
 */
@Fluent
public final class TypeConversionSettings implements JsonSerializable<TypeConversionSettings> {
    /*
     * Whether to allow data truncation when converting the data. Type: boolean (or Expression with resultType boolean).
     */
    @Generated
    private Object allowDataTruncation;

    /*
     * Whether to treat boolean values as numbers. Type: boolean (or Expression with resultType boolean).
     */
    @Generated
    private Object treatBooleanAsNumber;

    /*
     * The format for DateTime values. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object dateTimeFormat;

    /*
     * The format for DateTimeOffset values. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object dateTimeOffsetFormat;

    /*
     * The format for TimeSpan values. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object timeSpanFormat;

    /*
     * The format for Time values. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object timeFormat;

    /*
     * The format for Date values. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object dateFormat;

    /*
     * The culture used to convert data from/to string. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object culture;

    /**
     * Creates an instance of TypeConversionSettings class.
     */
    @Generated
    public TypeConversionSettings() {
    }

    /**
     * Get the allowDataTruncation property: Whether to allow data truncation when converting the data. Type: boolean
     * (or Expression with resultType boolean).
     * 
     * @return the allowDataTruncation value.
     */
    @Generated
    public Object getAllowDataTruncation() {
        return this.allowDataTruncation;
    }

    /**
     * Set the allowDataTruncation property: Whether to allow data truncation when converting the data. Type: boolean
     * (or Expression with resultType boolean).
     * 
     * @param allowDataTruncation the allowDataTruncation value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setAllowDataTruncation(Object allowDataTruncation) {
        this.allowDataTruncation = allowDataTruncation;
        return this;
    }

    /**
     * Get the treatBooleanAsNumber property: Whether to treat boolean values as numbers. Type: boolean (or Expression
     * with resultType boolean).
     * 
     * @return the treatBooleanAsNumber value.
     */
    @Generated
    public Object getTreatBooleanAsNumber() {
        return this.treatBooleanAsNumber;
    }

    /**
     * Set the treatBooleanAsNumber property: Whether to treat boolean values as numbers. Type: boolean (or Expression
     * with resultType boolean).
     * 
     * @param treatBooleanAsNumber the treatBooleanAsNumber value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setTreatBooleanAsNumber(Object treatBooleanAsNumber) {
        this.treatBooleanAsNumber = treatBooleanAsNumber;
        return this;
    }

    /**
     * Get the dateTimeFormat property: The format for DateTime values. Type: string (or Expression with resultType
     * string).
     * 
     * @return the dateTimeFormat value.
     */
    @Generated
    public Object getDateTimeFormat() {
        return this.dateTimeFormat;
    }

    /**
     * Set the dateTimeFormat property: The format for DateTime values. Type: string (or Expression with resultType
     * string).
     * 
     * @param dateTimeFormat the dateTimeFormat value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setDateTimeFormat(Object dateTimeFormat) {
        this.dateTimeFormat = dateTimeFormat;
        return this;
    }

    /**
     * Get the dateTimeOffsetFormat property: The format for DateTimeOffset values. Type: string (or Expression with
     * resultType string).
     * 
     * @return the dateTimeOffsetFormat value.
     */
    @Generated
    public Object getDateTimeOffsetFormat() {
        return this.dateTimeOffsetFormat;
    }

    /**
     * Set the dateTimeOffsetFormat property: The format for DateTimeOffset values. Type: string (or Expression with
     * resultType string).
     * 
     * @param dateTimeOffsetFormat the dateTimeOffsetFormat value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setDateTimeOffsetFormat(Object dateTimeOffsetFormat) {
        this.dateTimeOffsetFormat = dateTimeOffsetFormat;
        return this;
    }

    /**
     * Get the timeSpanFormat property: The format for TimeSpan values. Type: string (or Expression with resultType
     * string).
     * 
     * @return the timeSpanFormat value.
     */
    @Generated
    public Object getTimeSpanFormat() {
        return this.timeSpanFormat;
    }

    /**
     * Set the timeSpanFormat property: The format for TimeSpan values. Type: string (or Expression with resultType
     * string).
     * 
     * @param timeSpanFormat the timeSpanFormat value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setTimeSpanFormat(Object timeSpanFormat) {
        this.timeSpanFormat = timeSpanFormat;
        return this;
    }

    /**
     * Get the timeFormat property: The format for Time values. Type: string (or Expression with resultType string).
     * 
     * @return the timeFormat value.
     */
    @Generated
    public Object getTimeFormat() {
        return this.timeFormat;
    }

    /**
     * Set the timeFormat property: The format for Time values. Type: string (or Expression with resultType string).
     * 
     * @param timeFormat the timeFormat value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setTimeFormat(Object timeFormat) {
        this.timeFormat = timeFormat;
        return this;
    }

    /**
     * Get the dateFormat property: The format for Date values. Type: string (or Expression with resultType string).
     * 
     * @return the dateFormat value.
     */
    @Generated
    public Object getDateFormat() {
        return this.dateFormat;
    }

    /**
     * Set the dateFormat property: The format for Date values. Type: string (or Expression with resultType string).
     * 
     * @param dateFormat the dateFormat value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setDateFormat(Object dateFormat) {
        this.dateFormat = dateFormat;
        return this;
    }

    /**
     * Get the culture property: The culture used to convert data from/to string. Type: string (or Expression with
     * resultType string).
     * 
     * @return the culture value.
     */
    @Generated
    public Object getCulture() {
        return this.culture;
    }

    /**
     * Set the culture property: The culture used to convert data from/to string. Type: string (or Expression with
     * resultType string).
     * 
     * @param culture the culture value to set.
     * @return the TypeConversionSettings object itself.
     */
    @Generated
    public TypeConversionSettings setCulture(Object culture) {
        this.culture = culture;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (this.allowDataTruncation != null) {
            jsonWriter.writeUntypedField("allowDataTruncation", this.allowDataTruncation);
        }
        if (this.treatBooleanAsNumber != null) {
            jsonWriter.writeUntypedField("treatBooleanAsNumber", this.treatBooleanAsNumber);
        }
        if (this.dateTimeFormat != null) {
            jsonWriter.writeUntypedField("dateTimeFormat", this.dateTimeFormat);
        }
        if (this.dateTimeOffsetFormat != null) {
            jsonWriter.writeUntypedField("dateTimeOffsetFormat", this.dateTimeOffsetFormat);
        }
        if (this.timeSpanFormat != null) {
            jsonWriter.writeUntypedField("timeSpanFormat", this.timeSpanFormat);
        }
        if (this.timeFormat != null) {
            jsonWriter.writeUntypedField("timeFormat", this.timeFormat);
        }
        if (this.dateFormat != null) {
            jsonWriter.writeUntypedField("dateFormat", this.dateFormat);
        }
        if (this.culture != null) {
            jsonWriter.writeUntypedField("culture", this.culture);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TypeConversionSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TypeConversionSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TypeConversionSettings.
     */
    @Generated
    public static TypeConversionSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TypeConversionSettings deserializedTypeConversionSettings = new TypeConversionSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowDataTruncation".equals(fieldName)) {
                    deserializedTypeConversionSettings.allowDataTruncation = reader.readUntyped();
                } else if ("treatBooleanAsNumber".equals(fieldName)) {
                    deserializedTypeConversionSettings.treatBooleanAsNumber = reader.readUntyped();
                } else if ("dateTimeFormat".equals(fieldName)) {
                    deserializedTypeConversionSettings.dateTimeFormat = reader.readUntyped();
                } else if ("dateTimeOffsetFormat".equals(fieldName)) {
                    deserializedTypeConversionSettings.dateTimeOffsetFormat = reader.readUntyped();
                } else if ("timeSpanFormat".equals(fieldName)) {
                    deserializedTypeConversionSettings.timeSpanFormat = reader.readUntyped();
                } else if ("timeFormat".equals(fieldName)) {
                    deserializedTypeConversionSettings.timeFormat = reader.readUntyped();
                } else if ("dateFormat".equals(fieldName)) {
                    deserializedTypeConversionSettings.dateFormat = reader.readUntyped();
                } else if ("culture".equals(fieldName)) {
                    deserializedTypeConversionSettings.culture = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTypeConversionSettings;
        });
    }
}
