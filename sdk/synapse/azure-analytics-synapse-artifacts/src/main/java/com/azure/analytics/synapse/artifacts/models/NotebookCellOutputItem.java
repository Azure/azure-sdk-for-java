// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An item of the notebook cell execution output.
 */
@Fluent
public final class NotebookCellOutputItem implements JsonSerializable<NotebookCellOutputItem> {
    /*
     * For output_type=stream, determines the name of stream (stdout / stderr).
     */
    @Generated
    private String name;

    /*
     * Execution sequence number.
     */
    @Generated
    private Integer executionCount;

    /*
     * Execution, display, or stream outputs.
     */
    @Generated
    private CellOutputType outputType;

    /*
     * For output_type=stream, the stream's text output, represented as a string or an array of strings.
     */
    @Generated
    private Object text;

    /*
     * Output data. Use MIME type as key, and content as value.
     */
    @Generated
    private Object data;

    /*
     * Metadata for the output item.
     */
    @Generated
    private Object metadata;

    /**
     * Creates an instance of NotebookCellOutputItem class.
     */
    @Generated
    public NotebookCellOutputItem() {
    }

    /**
     * Get the name property: For output_type=stream, determines the name of stream (stdout / stderr).
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: For output_type=stream, determines the name of stream (stdout / stderr).
     * 
     * @param name the name value to set.
     * @return the NotebookCellOutputItem object itself.
     */
    @Generated
    public NotebookCellOutputItem setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the executionCount property: Execution sequence number.
     * 
     * @return the executionCount value.
     */
    @Generated
    public Integer getExecutionCount() {
        return this.executionCount;
    }

    /**
     * Set the executionCount property: Execution sequence number.
     * 
     * @param executionCount the executionCount value to set.
     * @return the NotebookCellOutputItem object itself.
     */
    @Generated
    public NotebookCellOutputItem setExecutionCount(Integer executionCount) {
        this.executionCount = executionCount;
        return this;
    }

    /**
     * Get the outputType property: Execution, display, or stream outputs.
     * 
     * @return the outputType value.
     */
    @Generated
    public CellOutputType getOutputType() {
        return this.outputType;
    }

    /**
     * Set the outputType property: Execution, display, or stream outputs.
     * 
     * @param outputType the outputType value to set.
     * @return the NotebookCellOutputItem object itself.
     */
    @Generated
    public NotebookCellOutputItem setOutputType(CellOutputType outputType) {
        this.outputType = outputType;
        return this;
    }

    /**
     * Get the text property: For output_type=stream, the stream's text output, represented as a string or an array of
     * strings.
     * 
     * @return the text value.
     */
    @Generated
    public Object getText() {
        return this.text;
    }

    /**
     * Set the text property: For output_type=stream, the stream's text output, represented as a string or an array of
     * strings.
     * 
     * @param text the text value to set.
     * @return the NotebookCellOutputItem object itself.
     */
    @Generated
    public NotebookCellOutputItem setText(Object text) {
        this.text = text;
        return this;
    }

    /**
     * Get the data property: Output data. Use MIME type as key, and content as value.
     * 
     * @return the data value.
     */
    @Generated
    public Object getData() {
        return this.data;
    }

    /**
     * Set the data property: Output data. Use MIME type as key, and content as value.
     * 
     * @param data the data value to set.
     * @return the NotebookCellOutputItem object itself.
     */
    @Generated
    public NotebookCellOutputItem setData(Object data) {
        this.data = data;
        return this;
    }

    /**
     * Get the metadata property: Metadata for the output item.
     * 
     * @return the metadata value.
     */
    @Generated
    public Object getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata for the output item.
     * 
     * @param metadata the metadata value to set.
     * @return the NotebookCellOutputItem object itself.
     */
    @Generated
    public NotebookCellOutputItem setMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("output_type", this.outputType == null ? null : this.outputType.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("execution_count", this.executionCount);
        if (this.text != null) {
            jsonWriter.writeUntypedField("text", this.text);
        }
        if (this.data != null) {
            jsonWriter.writeUntypedField("data", this.data);
        }
        if (this.metadata != null) {
            jsonWriter.writeUntypedField("metadata", this.metadata);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotebookCellOutputItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotebookCellOutputItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NotebookCellOutputItem.
     */
    @Generated
    public static NotebookCellOutputItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotebookCellOutputItem deserializedNotebookCellOutputItem = new NotebookCellOutputItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("output_type".equals(fieldName)) {
                    deserializedNotebookCellOutputItem.outputType = CellOutputType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedNotebookCellOutputItem.name = reader.getString();
                } else if ("execution_count".equals(fieldName)) {
                    deserializedNotebookCellOutputItem.executionCount = reader.getNullable(JsonReader::getInt);
                } else if ("text".equals(fieldName)) {
                    deserializedNotebookCellOutputItem.text = reader.readUntyped();
                } else if ("data".equals(fieldName)) {
                    deserializedNotebookCellOutputItem.data = reader.readUntyped();
                } else if ("metadata".equals(fieldName)) {
                    deserializedNotebookCellOutputItem.metadata = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotebookCellOutputItem;
        });
    }
}
