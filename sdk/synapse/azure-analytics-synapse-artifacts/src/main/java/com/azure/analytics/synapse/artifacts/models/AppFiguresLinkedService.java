// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Linked service for AppFigures.
 */
@Fluent
public class AppFiguresLinkedService extends LinkedService {
    /*
     * Type of linked service.
     */
    private String type = "AppFigures";

    /*
     * The username of the Appfigures source.
     */
    private Object userName;

    /*
     * The password of the AppFigures source.
     */
    private SecretBase password;

    /*
     * The client key for the AppFigures source.
     */
    private SecretBase clientKey;

    /**
     * Creates an instance of AppFiguresLinkedService class.
     */
    public AppFiguresLinkedService() {
    }

    /**
     * Get the type property: Type of linked service.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the userName property: The username of the Appfigures source.
     * 
     * @return the userName value.
     */
    public Object getUserName() {
        return this.userName;
    }

    /**
     * Set the userName property: The username of the Appfigures source.
     * 
     * @param userName the userName value to set.
     * @return the AppFiguresLinkedService object itself.
     */
    public AppFiguresLinkedService setUserName(Object userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get the password property: The password of the AppFigures source.
     * 
     * @return the password value.
     */
    public SecretBase getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The password of the AppFigures source.
     * 
     * @param password the password value to set.
     * @return the AppFiguresLinkedService object itself.
     */
    public AppFiguresLinkedService setPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the clientKey property: The client key for the AppFigures source.
     * 
     * @return the clientKey value.
     */
    public SecretBase getClientKey() {
        return this.clientKey;
    }

    /**
     * Set the clientKey property: The client key for the AppFigures source.
     * 
     * @param clientKey the clientKey value to set.
     * @return the AppFiguresLinkedService object itself.
     */
    public AppFiguresLinkedService setClientKey(SecretBase clientKey) {
        this.clientKey = clientKey;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppFiguresLinkedService setConnectVia(IntegrationRuntimeReference connectVia) {
        super.setConnectVia(connectVia);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppFiguresLinkedService setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppFiguresLinkedService setParameters(Map<String, ParameterSpecification> parameters) {
        super.setParameters(parameters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppFiguresLinkedService setAnnotations(List<Object> annotations) {
        super.setAnnotations(annotations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connectVia", getConnectVia());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("parameters", getParameters(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("annotations", getAnnotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        if (userName != null || password != null || clientKey != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeUntypedField("userName", this.userName);
            jsonWriter.writeJsonField("password", this.password);
            jsonWriter.writeJsonField("clientKey", this.clientKey);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppFiguresLinkedService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppFiguresLinkedService if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AppFiguresLinkedService.
     */
    public static AppFiguresLinkedService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppFiguresLinkedService deserializedAppFiguresLinkedService = new AppFiguresLinkedService();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectVia".equals(fieldName)) {
                    deserializedAppFiguresLinkedService.setConnectVia(IntegrationRuntimeReference.fromJson(reader));
                } else if ("description".equals(fieldName)) {
                    deserializedAppFiguresLinkedService.setDescription(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    Map<String, ParameterSpecification> parameters
                        = reader.readMap(reader1 -> ParameterSpecification.fromJson(reader1));
                    deserializedAppFiguresLinkedService.setParameters(parameters);
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedAppFiguresLinkedService.setAnnotations(annotations);
                } else if ("type".equals(fieldName)) {
                    deserializedAppFiguresLinkedService.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("userName".equals(fieldName)) {
                            deserializedAppFiguresLinkedService.userName = reader.readUntyped();
                        } else if ("password".equals(fieldName)) {
                            deserializedAppFiguresLinkedService.password = SecretBase.fromJson(reader);
                        } else if ("clientKey".equals(fieldName)) {
                            deserializedAppFiguresLinkedService.clientKey = SecretBase.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedAppFiguresLinkedService.setAdditionalProperties(additionalProperties);

            return deserializedAppFiguresLinkedService;
        });
    }
}
