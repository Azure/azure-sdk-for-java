// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Data flow flowlet.
 */
@Fluent
public class Flowlet extends DataFlow {
    /*
     * Type of data flow.
     */
    private String type = "Flowlet";

    /*
     * List of sources in Flowlet.
     */
    private List<DataFlowSource> sources;

    /*
     * List of sinks in Flowlet.
     */
    private List<DataFlowSink> sinks;

    /*
     * List of transformations in Flowlet.
     */
    private List<Transformation> transformations;

    /*
     * Flowlet script.
     */
    private String script;

    /*
     * Flowlet script lines.
     */
    private List<String> scriptLines;

    /**
     * Creates an instance of Flowlet class.
     */
    public Flowlet() {
    }

    /**
     * Get the type property: Type of data flow.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the sources property: List of sources in Flowlet.
     * 
     * @return the sources value.
     */
    public List<DataFlowSource> getSources() {
        return this.sources;
    }

    /**
     * Set the sources property: List of sources in Flowlet.
     * 
     * @param sources the sources value to set.
     * @return the Flowlet object itself.
     */
    public Flowlet setSources(List<DataFlowSource> sources) {
        this.sources = sources;
        return this;
    }

    /**
     * Get the sinks property: List of sinks in Flowlet.
     * 
     * @return the sinks value.
     */
    public List<DataFlowSink> getSinks() {
        return this.sinks;
    }

    /**
     * Set the sinks property: List of sinks in Flowlet.
     * 
     * @param sinks the sinks value to set.
     * @return the Flowlet object itself.
     */
    public Flowlet setSinks(List<DataFlowSink> sinks) {
        this.sinks = sinks;
        return this;
    }

    /**
     * Get the transformations property: List of transformations in Flowlet.
     * 
     * @return the transformations value.
     */
    public List<Transformation> getTransformations() {
        return this.transformations;
    }

    /**
     * Set the transformations property: List of transformations in Flowlet.
     * 
     * @param transformations the transformations value to set.
     * @return the Flowlet object itself.
     */
    public Flowlet setTransformations(List<Transformation> transformations) {
        this.transformations = transformations;
        return this;
    }

    /**
     * Get the script property: Flowlet script.
     * 
     * @return the script value.
     */
    public String getScript() {
        return this.script;
    }

    /**
     * Set the script property: Flowlet script.
     * 
     * @param script the script value to set.
     * @return the Flowlet object itself.
     */
    public Flowlet setScript(String script) {
        this.script = script;
        return this;
    }

    /**
     * Get the scriptLines property: Flowlet script lines.
     * 
     * @return the scriptLines value.
     */
    public List<String> getScriptLines() {
        return this.scriptLines;
    }

    /**
     * Set the scriptLines property: Flowlet script lines.
     * 
     * @param scriptLines the scriptLines value to set.
     * @return the Flowlet object itself.
     */
    public Flowlet setScriptLines(List<String> scriptLines) {
        this.scriptLines = scriptLines;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Flowlet setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Flowlet setAnnotations(List<Object> annotations) {
        super.setAnnotations(annotations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Flowlet setFolder(DataFlowFolder folder) {
        super.setFolder(folder);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeArrayField("annotations", getAnnotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeJsonField("folder", getFolder());
        jsonWriter.writeStringField("type", this.type);
        if (sources != null || sinks != null || transformations != null || script != null || scriptLines != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeArrayField("sinks", this.sinks, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeArrayField("transformations", this.transformations,
                (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("script", this.script);
            jsonWriter.writeArrayField("scriptLines", this.scriptLines,
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeEndObject();
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Flowlet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Flowlet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Flowlet.
     */
    public static Flowlet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Flowlet deserializedFlowlet = new Flowlet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedFlowlet.setDescription(reader.getString());
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedFlowlet.setAnnotations(annotations);
                } else if ("folder".equals(fieldName)) {
                    deserializedFlowlet.setFolder(DataFlowFolder.fromJson(reader));
                } else if ("type".equals(fieldName)) {
                    deserializedFlowlet.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("sources".equals(fieldName)) {
                            List<DataFlowSource> sources
                                = reader.readArray(reader1 -> DataFlowSource.fromJson(reader1));
                            deserializedFlowlet.sources = sources;
                        } else if ("sinks".equals(fieldName)) {
                            List<DataFlowSink> sinks = reader.readArray(reader1 -> DataFlowSink.fromJson(reader1));
                            deserializedFlowlet.sinks = sinks;
                        } else if ("transformations".equals(fieldName)) {
                            List<Transformation> transformations
                                = reader.readArray(reader1 -> Transformation.fromJson(reader1));
                            deserializedFlowlet.transformations = transformations;
                        } else if ("script".equals(fieldName)) {
                            deserializedFlowlet.script = reader.getString();
                        } else if ("scriptLines".equals(fieldName)) {
                            List<String> scriptLines = reader.readArray(reader1 -> reader1.getString());
                            deserializedFlowlet.scriptLines = scriptLines;
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlowlet;
        });
    }
}
