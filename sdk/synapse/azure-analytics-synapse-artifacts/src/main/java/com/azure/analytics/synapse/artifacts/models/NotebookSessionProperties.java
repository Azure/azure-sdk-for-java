// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Session properties.
 */
@Fluent
public final class NotebookSessionProperties implements JsonSerializable<NotebookSessionProperties> {
    /*
     * Amount of memory to use for the driver process.
     */
    private String driverMemory;

    /*
     * Number of cores to use for the driver.
     */
    private int driverCores;

    /*
     * Amount of memory to use per executor process.
     */
    private String executorMemory;

    /*
     * Number of cores to use for each executor.
     */
    private int executorCores;

    /*
     * Number of executors to launch for this session.
     */
    private int numExecutors;

    /**
     * Creates an instance of NotebookSessionProperties class.
     */
    public NotebookSessionProperties() {
    }

    /**
     * Get the driverMemory property: Amount of memory to use for the driver process.
     * 
     * @return the driverMemory value.
     */
    public String getDriverMemory() {
        return this.driverMemory;
    }

    /**
     * Set the driverMemory property: Amount of memory to use for the driver process.
     * 
     * @param driverMemory the driverMemory value to set.
     * @return the NotebookSessionProperties object itself.
     */
    public NotebookSessionProperties setDriverMemory(String driverMemory) {
        this.driverMemory = driverMemory;
        return this;
    }

    /**
     * Get the driverCores property: Number of cores to use for the driver.
     * 
     * @return the driverCores value.
     */
    public int getDriverCores() {
        return this.driverCores;
    }

    /**
     * Set the driverCores property: Number of cores to use for the driver.
     * 
     * @param driverCores the driverCores value to set.
     * @return the NotebookSessionProperties object itself.
     */
    public NotebookSessionProperties setDriverCores(int driverCores) {
        this.driverCores = driverCores;
        return this;
    }

    /**
     * Get the executorMemory property: Amount of memory to use per executor process.
     * 
     * @return the executorMemory value.
     */
    public String getExecutorMemory() {
        return this.executorMemory;
    }

    /**
     * Set the executorMemory property: Amount of memory to use per executor process.
     * 
     * @param executorMemory the executorMemory value to set.
     * @return the NotebookSessionProperties object itself.
     */
    public NotebookSessionProperties setExecutorMemory(String executorMemory) {
        this.executorMemory = executorMemory;
        return this;
    }

    /**
     * Get the executorCores property: Number of cores to use for each executor.
     * 
     * @return the executorCores value.
     */
    public int getExecutorCores() {
        return this.executorCores;
    }

    /**
     * Set the executorCores property: Number of cores to use for each executor.
     * 
     * @param executorCores the executorCores value to set.
     * @return the NotebookSessionProperties object itself.
     */
    public NotebookSessionProperties setExecutorCores(int executorCores) {
        this.executorCores = executorCores;
        return this;
    }

    /**
     * Get the numExecutors property: Number of executors to launch for this session.
     * 
     * @return the numExecutors value.
     */
    public int getNumExecutors() {
        return this.numExecutors;
    }

    /**
     * Set the numExecutors property: Number of executors to launch for this session.
     * 
     * @param numExecutors the numExecutors value to set.
     * @return the NotebookSessionProperties object itself.
     */
    public NotebookSessionProperties setNumExecutors(int numExecutors) {
        this.numExecutors = numExecutors;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("driverMemory", this.driverMemory);
        jsonWriter.writeIntField("driverCores", this.driverCores);
        jsonWriter.writeStringField("executorMemory", this.executorMemory);
        jsonWriter.writeIntField("executorCores", this.executorCores);
        jsonWriter.writeIntField("numExecutors", this.numExecutors);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotebookSessionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotebookSessionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NotebookSessionProperties.
     */
    public static NotebookSessionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotebookSessionProperties deserializedNotebookSessionProperties = new NotebookSessionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("driverMemory".equals(fieldName)) {
                    deserializedNotebookSessionProperties.driverMemory = reader.getString();
                } else if ("driverCores".equals(fieldName)) {
                    deserializedNotebookSessionProperties.driverCores = reader.getInt();
                } else if ("executorMemory".equals(fieldName)) {
                    deserializedNotebookSessionProperties.executorMemory = reader.getString();
                } else if ("executorCores".equals(fieldName)) {
                    deserializedNotebookSessionProperties.executorCores = reader.getInt();
                } else if ("numExecutors".equals(fieldName)) {
                    deserializedNotebookSessionProperties.numExecutors = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotebookSessionProperties;
        });
    }
}
