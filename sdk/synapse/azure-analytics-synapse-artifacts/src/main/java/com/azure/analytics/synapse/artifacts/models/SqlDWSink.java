// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity SQL Data Warehouse sink.
 */
@Fluent
public final class SqlDWSink extends CopySink {
    /*
     * Copy sink type.
     */
    private String type = "SqlDWSink";

    /*
     * SQL pre-copy script. Type: string (or Expression with resultType string).
     */
    private Object preCopyScript;

    /*
     * Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
     */
    private Object allowPolyBase;

    /*
     * Specifies PolyBase-related settings when allowPolyBase is true.
     */
    private PolybaseSettings polyBaseSettings;

    /*
     * Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
     */
    private Object allowCopyCommand;

    /*
     * Specifies Copy Command related settings when allowCopyCommand is true.
     */
    private DWCopyCommandSettings copyCommandSettings;

    /*
     * The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
     */
    private Object tableOption;

    /**
     * Creates an instance of SqlDWSink class.
     */
    public SqlDWSink() {
    }

    /**
     * Get the type property: Copy sink type.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the preCopyScript property: SQL pre-copy script. Type: string (or Expression with resultType string).
     * 
     * @return the preCopyScript value.
     */
    public Object getPreCopyScript() {
        return this.preCopyScript;
    }

    /**
     * Set the preCopyScript property: SQL pre-copy script. Type: string (or Expression with resultType string).
     * 
     * @param preCopyScript the preCopyScript value to set.
     * @return the SqlDWSink object itself.
     */
    public SqlDWSink setPreCopyScript(Object preCopyScript) {
        this.preCopyScript = preCopyScript;
        return this;
    }

    /**
     * Get the allowPolyBase property: Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable.
     * Type: boolean (or Expression with resultType boolean).
     * 
     * @return the allowPolyBase value.
     */
    public Object getAllowPolyBase() {
        return this.allowPolyBase;
    }

    /**
     * Set the allowPolyBase property: Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable.
     * Type: boolean (or Expression with resultType boolean).
     * 
     * @param allowPolyBase the allowPolyBase value to set.
     * @return the SqlDWSink object itself.
     */
    public SqlDWSink setAllowPolyBase(Object allowPolyBase) {
        this.allowPolyBase = allowPolyBase;
        return this;
    }

    /**
     * Get the polyBaseSettings property: Specifies PolyBase-related settings when allowPolyBase is true.
     * 
     * @return the polyBaseSettings value.
     */
    public PolybaseSettings getPolyBaseSettings() {
        return this.polyBaseSettings;
    }

    /**
     * Set the polyBaseSettings property: Specifies PolyBase-related settings when allowPolyBase is true.
     * 
     * @param polyBaseSettings the polyBaseSettings value to set.
     * @return the SqlDWSink object itself.
     */
    public SqlDWSink setPolyBaseSettings(PolybaseSettings polyBaseSettings) {
        this.polyBaseSettings = polyBaseSettings;
        return this;
    }

    /**
     * Get the allowCopyCommand property: Indicates to use Copy Command to copy data into SQL Data Warehouse. Type:
     * boolean (or Expression with resultType boolean).
     * 
     * @return the allowCopyCommand value.
     */
    public Object getAllowCopyCommand() {
        return this.allowCopyCommand;
    }

    /**
     * Set the allowCopyCommand property: Indicates to use Copy Command to copy data into SQL Data Warehouse. Type:
     * boolean (or Expression with resultType boolean).
     * 
     * @param allowCopyCommand the allowCopyCommand value to set.
     * @return the SqlDWSink object itself.
     */
    public SqlDWSink setAllowCopyCommand(Object allowCopyCommand) {
        this.allowCopyCommand = allowCopyCommand;
        return this;
    }

    /**
     * Get the copyCommandSettings property: Specifies Copy Command related settings when allowCopyCommand is true.
     * 
     * @return the copyCommandSettings value.
     */
    public DWCopyCommandSettings getCopyCommandSettings() {
        return this.copyCommandSettings;
    }

    /**
     * Set the copyCommandSettings property: Specifies Copy Command related settings when allowCopyCommand is true.
     * 
     * @param copyCommandSettings the copyCommandSettings value to set.
     * @return the SqlDWSink object itself.
     */
    public SqlDWSink setCopyCommandSettings(DWCopyCommandSettings copyCommandSettings) {
        this.copyCommandSettings = copyCommandSettings;
        return this;
    }

    /**
     * Get the tableOption property: The option to handle sink table, such as autoCreate. For now only 'autoCreate'
     * value is supported. Type: string (or Expression with resultType string).
     * 
     * @return the tableOption value.
     */
    public Object getTableOption() {
        return this.tableOption;
    }

    /**
     * Set the tableOption property: The option to handle sink table, such as autoCreate. For now only 'autoCreate'
     * value is supported. Type: string (or Expression with resultType string).
     * 
     * @param tableOption the tableOption value to set.
     * @return the SqlDWSink object itself.
     */
    public SqlDWSink setTableOption(Object tableOption) {
        this.tableOption = tableOption;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDWSink setWriteBatchSize(Object writeBatchSize) {
        super.setWriteBatchSize(writeBatchSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDWSink setWriteBatchTimeout(Object writeBatchTimeout) {
        super.setWriteBatchTimeout(writeBatchTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDWSink setSinkRetryCount(Object sinkRetryCount) {
        super.setSinkRetryCount(sinkRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDWSink setSinkRetryWait(Object sinkRetryWait) {
        super.setSinkRetryWait(sinkRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDWSink setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("writeBatchSize", getWriteBatchSize());
        jsonWriter.writeUntypedField("writeBatchTimeout", getWriteBatchTimeout());
        jsonWriter.writeUntypedField("sinkRetryCount", getSinkRetryCount());
        jsonWriter.writeUntypedField("sinkRetryWait", getSinkRetryWait());
        jsonWriter.writeUntypedField("maxConcurrentConnections", getMaxConcurrentConnections());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeUntypedField("preCopyScript", this.preCopyScript);
        jsonWriter.writeUntypedField("allowPolyBase", this.allowPolyBase);
        jsonWriter.writeJsonField("polyBaseSettings", this.polyBaseSettings);
        jsonWriter.writeUntypedField("allowCopyCommand", this.allowCopyCommand);
        jsonWriter.writeJsonField("copyCommandSettings", this.copyCommandSettings);
        jsonWriter.writeUntypedField("tableOption", this.tableOption);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDWSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDWSink if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SqlDWSink.
     */
    public static SqlDWSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDWSink deserializedSqlDWSink = new SqlDWSink();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("writeBatchSize".equals(fieldName)) {
                    deserializedSqlDWSink.setWriteBatchSize(reader.readUntyped());
                } else if ("writeBatchTimeout".equals(fieldName)) {
                    deserializedSqlDWSink.setWriteBatchTimeout(reader.readUntyped());
                } else if ("sinkRetryCount".equals(fieldName)) {
                    deserializedSqlDWSink.setSinkRetryCount(reader.readUntyped());
                } else if ("sinkRetryWait".equals(fieldName)) {
                    deserializedSqlDWSink.setSinkRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedSqlDWSink.setMaxConcurrentConnections(reader.readUntyped());
                } else if ("type".equals(fieldName)) {
                    deserializedSqlDWSink.type = reader.getString();
                } else if ("preCopyScript".equals(fieldName)) {
                    deserializedSqlDWSink.preCopyScript = reader.readUntyped();
                } else if ("allowPolyBase".equals(fieldName)) {
                    deserializedSqlDWSink.allowPolyBase = reader.readUntyped();
                } else if ("polyBaseSettings".equals(fieldName)) {
                    deserializedSqlDWSink.polyBaseSettings = PolybaseSettings.fromJson(reader);
                } else if ("allowCopyCommand".equals(fieldName)) {
                    deserializedSqlDWSink.allowCopyCommand = reader.readUntyped();
                } else if ("copyCommandSettings".equals(fieldName)) {
                    deserializedSqlDWSink.copyCommandSettings = DWCopyCommandSettings.fromJson(reader);
                } else if ("tableOption".equals(fieldName)) {
                    deserializedSqlDWSink.tableOption = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSqlDWSink.setAdditionalProperties(additionalProperties);

            return deserializedSqlDWSink;
        });
    }
}
