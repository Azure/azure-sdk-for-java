// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The UpdateLandingZoneCredential model.
 */
@Fluent
public final class UpdateLandingZoneCredential implements JsonSerializable<UpdateLandingZoneCredential> {
    /*
     * Landing zone's sas token
     */
    private SecureString sasToken;

    /**
     * Creates an instance of UpdateLandingZoneCredential class.
     */
    public UpdateLandingZoneCredential() {
    }

    /**
     * Get the sasToken property: Landing zone's sas token.
     * 
     * @return the sasToken value.
     */
    public SecureString getSasToken() {
        return this.sasToken;
    }

    /**
     * Set the sasToken property: Landing zone's sas token.
     * 
     * @param sasToken the sasToken value to set.
     * @return the UpdateLandingZoneCredential object itself.
     */
    public UpdateLandingZoneCredential setSasToken(SecureString sasToken) {
        this.sasToken = sasToken;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sasToken", this.sasToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateLandingZoneCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateLandingZoneCredential if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateLandingZoneCredential.
     */
    public static UpdateLandingZoneCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateLandingZoneCredential deserializedUpdateLandingZoneCredential = new UpdateLandingZoneCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sasToken".equals(fieldName)) {
                    deserializedUpdateLandingZoneCredential.sasToken = SecureString.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateLandingZoneCredential;
        });
    }
}
