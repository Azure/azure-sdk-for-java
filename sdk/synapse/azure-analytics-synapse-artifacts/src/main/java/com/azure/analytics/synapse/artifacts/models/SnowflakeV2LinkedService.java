// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Snowflake linked service.
 */
@Fluent
public class SnowflakeV2LinkedService extends LinkedService {
    /*
     * Type of linked service.
     */
    private String type = "SnowflakeV2";

    /*
     * The account identifier of your Snowflake account, e.g. xy12345.east-us-2.azure
     */
    private Object accountIdentifier;

    /*
     * The name of the Snowflake user.
     */
    private Object user;

    /*
     * The Azure key vault secret reference of password in connection string.
     */
    private SecretBase password;

    /*
     * The name of the Snowflake database.
     */
    private Object database;

    /*
     * The name of the Snowflake warehouse.
     */
    private Object warehouse;

    /*
     * The type used for authentication. Type: string.
     */
    private SnowflakeAuthenticationType authenticationType;

    /*
     * The client ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
     */
    private Object clientId;

    /*
     * The Azure key vault secret reference of client secret for AADServicePrincipal authentication.
     */
    private SecretBase clientSecret;

    /*
     * The tenant ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
     */
    private Object tenantId;

    /*
     * The scope of the application registered in Azure Active Directory for AADServicePrincipal authentication.
     */
    private Object scope;

    /*
     * The Azure key vault secret reference of privateKey for KeyPair auth.
     */
    private SecretBase privateKey;

    /*
     * The Azure key vault secret reference of private key password for KeyPair auth with encrypted private key.
     */
    private SecretBase privateKeyPassphrase;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
     */
    private String encryptedCredential;

    /**
     * Creates an instance of SnowflakeV2LinkedService class.
     */
    public SnowflakeV2LinkedService() {
    }

    /**
     * Get the type property: Type of linked service.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the accountIdentifier property: The account identifier of your Snowflake account, e.g.
     * xy12345.east-us-2.azure.
     * 
     * @return the accountIdentifier value.
     */
    public Object getAccountIdentifier() {
        return this.accountIdentifier;
    }

    /**
     * Set the accountIdentifier property: The account identifier of your Snowflake account, e.g.
     * xy12345.east-us-2.azure.
     * 
     * @param accountIdentifier the accountIdentifier value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setAccountIdentifier(Object accountIdentifier) {
        this.accountIdentifier = accountIdentifier;
        return this;
    }

    /**
     * Get the user property: The name of the Snowflake user.
     * 
     * @return the user value.
     */
    public Object getUser() {
        return this.user;
    }

    /**
     * Set the user property: The name of the Snowflake user.
     * 
     * @param user the user value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setUser(Object user) {
        this.user = user;
        return this;
    }

    /**
     * Get the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @return the password value.
     */
    public SecretBase getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @param password the password value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the database property: The name of the Snowflake database.
     * 
     * @return the database value.
     */
    public Object getDatabase() {
        return this.database;
    }

    /**
     * Set the database property: The name of the Snowflake database.
     * 
     * @param database the database value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setDatabase(Object database) {
        this.database = database;
        return this;
    }

    /**
     * Get the warehouse property: The name of the Snowflake warehouse.
     * 
     * @return the warehouse value.
     */
    public Object getWarehouse() {
        return this.warehouse;
    }

    /**
     * Set the warehouse property: The name of the Snowflake warehouse.
     * 
     * @param warehouse the warehouse value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setWarehouse(Object warehouse) {
        this.warehouse = warehouse;
        return this;
    }

    /**
     * Get the authenticationType property: The type used for authentication. Type: string.
     * 
     * @return the authenticationType value.
     */
    public SnowflakeAuthenticationType getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The type used for authentication. Type: string.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setAuthenticationType(SnowflakeAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the clientId property: The client ID of the application registered in Azure Active Directory for
     * AADServicePrincipal authentication.
     * 
     * @return the clientId value.
     */
    public Object getClientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The client ID of the application registered in Azure Active Directory for
     * AADServicePrincipal authentication.
     * 
     * @param clientId the clientId value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setClientId(Object clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: The Azure key vault secret reference of client secret for AADServicePrincipal
     * authentication.
     * 
     * @return the clientSecret value.
     */
    public SecretBase getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: The Azure key vault secret reference of client secret for AADServicePrincipal
     * authentication.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setClientSecret(SecretBase clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Get the tenantId property: The tenant ID of the application registered in Azure Active Directory for
     * AADServicePrincipal authentication.
     * 
     * @return the tenantId value.
     */
    public Object getTenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The tenant ID of the application registered in Azure Active Directory for
     * AADServicePrincipal authentication.
     * 
     * @param tenantId the tenantId value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setTenantId(Object tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the scope property: The scope of the application registered in Azure Active Directory for AADServicePrincipal
     * authentication.
     * 
     * @return the scope value.
     */
    public Object getScope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope of the application registered in Azure Active Directory for AADServicePrincipal
     * authentication.
     * 
     * @param scope the scope value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setScope(Object scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the privateKey property: The Azure key vault secret reference of privateKey for KeyPair auth.
     * 
     * @return the privateKey value.
     */
    public SecretBase getPrivateKey() {
        return this.privateKey;
    }

    /**
     * Set the privateKey property: The Azure key vault secret reference of privateKey for KeyPair auth.
     * 
     * @param privateKey the privateKey value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setPrivateKey(SecretBase privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Get the privateKeyPassphrase property: The Azure key vault secret reference of private key password for KeyPair
     * auth with encrypted private key.
     * 
     * @return the privateKeyPassphrase value.
     */
    public SecretBase getPrivateKeyPassphrase() {
        return this.privateKeyPassphrase;
    }

    /**
     * Set the privateKeyPassphrase property: The Azure key vault secret reference of private key password for KeyPair
     * auth with encrypted private key.
     * 
     * @param privateKeyPassphrase the privateKeyPassphrase value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setPrivateKeyPassphrase(SecretBase privateKeyPassphrase) {
        this.privateKeyPassphrase = privateKeyPassphrase;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String getEncryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the SnowflakeV2LinkedService object itself.
     */
    public SnowflakeV2LinkedService setEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SnowflakeV2LinkedService setConnectVia(IntegrationRuntimeReference connectVia) {
        super.setConnectVia(connectVia);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SnowflakeV2LinkedService setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SnowflakeV2LinkedService setParameters(Map<String, ParameterSpecification> parameters) {
        super.setParameters(parameters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SnowflakeV2LinkedService setAnnotations(List<Object> annotations) {
        super.setAnnotations(annotations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connectVia", getConnectVia());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("parameters", getParameters(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("annotations", getAnnotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        if (accountIdentifier != null
            || user != null
            || password != null
            || database != null
            || warehouse != null
            || authenticationType != null
            || clientId != null
            || clientSecret != null
            || tenantId != null
            || scope != null
            || privateKey != null
            || privateKeyPassphrase != null
            || encryptedCredential != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeUntypedField("accountIdentifier", this.accountIdentifier);
            jsonWriter.writeUntypedField("user", this.user);
            jsonWriter.writeJsonField("password", this.password);
            jsonWriter.writeUntypedField("database", this.database);
            jsonWriter.writeUntypedField("warehouse", this.warehouse);
            jsonWriter.writeStringField("authenticationType",
                this.authenticationType == null ? null : this.authenticationType.toString());
            jsonWriter.writeUntypedField("clientId", this.clientId);
            jsonWriter.writeJsonField("clientSecret", this.clientSecret);
            jsonWriter.writeUntypedField("tenantId", this.tenantId);
            jsonWriter.writeUntypedField("scope", this.scope);
            jsonWriter.writeJsonField("privateKey", this.privateKey);
            jsonWriter.writeJsonField("privateKeyPassphrase", this.privateKeyPassphrase);
            jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SnowflakeV2LinkedService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnowflakeV2LinkedService if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SnowflakeV2LinkedService.
     */
    public static SnowflakeV2LinkedService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SnowflakeV2LinkedService deserializedSnowflakeV2LinkedService = new SnowflakeV2LinkedService();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectVia".equals(fieldName)) {
                    deserializedSnowflakeV2LinkedService.setConnectVia(IntegrationRuntimeReference.fromJson(reader));
                } else if ("description".equals(fieldName)) {
                    deserializedSnowflakeV2LinkedService.setDescription(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    Map<String, ParameterSpecification> parameters
                        = reader.readMap(reader1 -> ParameterSpecification.fromJson(reader1));
                    deserializedSnowflakeV2LinkedService.setParameters(parameters);
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedSnowflakeV2LinkedService.setAnnotations(annotations);
                } else if ("type".equals(fieldName)) {
                    deserializedSnowflakeV2LinkedService.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("accountIdentifier".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.accountIdentifier = reader.readUntyped();
                        } else if ("user".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.user = reader.readUntyped();
                        } else if ("password".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.password = SecretBase.fromJson(reader);
                        } else if ("database".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.database = reader.readUntyped();
                        } else if ("warehouse".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.warehouse = reader.readUntyped();
                        } else if ("authenticationType".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.authenticationType
                                = SnowflakeAuthenticationType.fromString(reader.getString());
                        } else if ("clientId".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.clientId = reader.readUntyped();
                        } else if ("clientSecret".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.clientSecret = SecretBase.fromJson(reader);
                        } else if ("tenantId".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.tenantId = reader.readUntyped();
                        } else if ("scope".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.scope = reader.readUntyped();
                        } else if ("privateKey".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.privateKey = SecretBase.fromJson(reader);
                        } else if ("privateKeyPassphrase".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.privateKeyPassphrase = SecretBase.fromJson(reader);
                        } else if ("encryptedCredential".equals(fieldName)) {
                            deserializedSnowflakeV2LinkedService.encryptedCredential = reader.getString();
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSnowflakeV2LinkedService.setAdditionalProperties(additionalProperties);

            return deserializedSnowflakeV2LinkedService;
        });
    }
}
