// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SSIS access credential.
 */
@Fluent
public final class SsisAccessCredential implements JsonSerializable<SsisAccessCredential> {
    /*
     * Domain for windows authentication.
     */
    private Object domain;

    /*
     * UseName for windows authentication.
     */
    private Object userName;

    /*
     * Password for windows authentication.
     */
    private SecretBase password;

    /**
     * Creates an instance of SsisAccessCredential class.
     */
    public SsisAccessCredential() {
    }

    /**
     * Get the domain property: Domain for windows authentication.
     * 
     * @return the domain value.
     */
    public Object getDomain() {
        return this.domain;
    }

    /**
     * Set the domain property: Domain for windows authentication.
     * 
     * @param domain the domain value to set.
     * @return the SsisAccessCredential object itself.
     */
    public SsisAccessCredential setDomain(Object domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the userName property: UseName for windows authentication.
     * 
     * @return the userName value.
     */
    public Object getUserName() {
        return this.userName;
    }

    /**
     * Set the userName property: UseName for windows authentication.
     * 
     * @param userName the userName value to set.
     * @return the SsisAccessCredential object itself.
     */
    public SsisAccessCredential setUserName(Object userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get the password property: Password for windows authentication.
     * 
     * @return the password value.
     */
    public SecretBase getPassword() {
        return this.password;
    }

    /**
     * Set the password property: Password for windows authentication.
     * 
     * @param password the password value to set.
     * @return the SsisAccessCredential object itself.
     */
    public SsisAccessCredential setPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("domain", this.domain);
        jsonWriter.writeUntypedField("userName", this.userName);
        jsonWriter.writeJsonField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SsisAccessCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SsisAccessCredential if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SsisAccessCredential.
     */
    public static SsisAccessCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SsisAccessCredential deserializedSsisAccessCredential = new SsisAccessCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domain".equals(fieldName)) {
                    deserializedSsisAccessCredential.domain = reader.readUntyped();
                } else if ("userName".equals(fieldName)) {
                    deserializedSsisAccessCredential.userName = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedSsisAccessCredential.password = SecretBase.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSsisAccessCredential;
        });
    }
}
