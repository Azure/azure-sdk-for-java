// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Library/package properties.
 */
@Immutable
public final class LibraryResourceProperties implements JsonSerializable<LibraryResourceProperties> {
    /*
     * Name of the library/package.
     */
    private String name;

    /*
     * Location of library/package in storage account.
     */
    private String path;

    /*
     * Container name of the library/package.
     */
    private String containerName;

    /*
     * The last update time of the library/package.
     */
    private String uploadedTimestamp;

    /*
     * Type of the library/package.
     */
    private String type;

    /*
     * Provisioning status of the library/package.
     */
    private String provisioningStatus;

    /*
     * Creator Id of the library/package.
     */
    private String creatorId;

    /**
     * Creates an instance of LibraryResourceProperties class.
     */
    public LibraryResourceProperties() {
    }

    /**
     * Get the name property: Name of the library/package.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the path property: Location of library/package in storage account.
     * 
     * @return the path value.
     */
    public String getPath() {
        return this.path;
    }

    /**
     * Get the containerName property: Container name of the library/package.
     * 
     * @return the containerName value.
     */
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Get the uploadedTimestamp property: The last update time of the library/package.
     * 
     * @return the uploadedTimestamp value.
     */
    public String getUploadedTimestamp() {
        return this.uploadedTimestamp;
    }

    /**
     * Get the type property: Type of the library/package.
     * 
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Get the provisioningStatus property: Provisioning status of the library/package.
     * 
     * @return the provisioningStatus value.
     */
    public String getProvisioningStatus() {
        return this.provisioningStatus;
    }

    /**
     * Get the creatorId property: Creator Id of the library/package.
     * 
     * @return the creatorId value.
     */
    public String getCreatorId() {
        return this.creatorId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LibraryResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LibraryResourceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LibraryResourceProperties.
     */
    public static LibraryResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LibraryResourceProperties deserializedLibraryResourceProperties = new LibraryResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedLibraryResourceProperties.name = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedLibraryResourceProperties.path = reader.getString();
                } else if ("containerName".equals(fieldName)) {
                    deserializedLibraryResourceProperties.containerName = reader.getString();
                } else if ("uploadedTimestamp".equals(fieldName)) {
                    deserializedLibraryResourceProperties.uploadedTimestamp = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLibraryResourceProperties.type = reader.getString();
                } else if ("provisioningStatus".equals(fieldName)) {
                    deserializedLibraryResourceProperties.provisioningStatus = reader.getString();
                } else if ("creatorId".equals(fieldName)) {
                    deserializedLibraryResourceProperties.creatorId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLibraryResourceProperties;
        });
    }
}
