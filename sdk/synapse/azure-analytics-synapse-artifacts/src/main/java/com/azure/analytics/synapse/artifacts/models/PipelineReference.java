// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Pipeline reference type.
 */
@Fluent
public final class PipelineReference implements JsonSerializable<PipelineReference> {
    /*
     * Pipeline reference type.
     */
    private PipelineReferenceType type;

    /*
     * Reference pipeline name.
     */
    private String referenceName;

    /*
     * Reference name.
     */
    private String name;

    /**
     * Creates an instance of PipelineReference class.
     */
    public PipelineReference() {
    }

    /**
     * Get the type property: Pipeline reference type.
     * 
     * @return the type value.
     */
    public PipelineReferenceType getType() {
        return this.type;
    }

    /**
     * Set the type property: Pipeline reference type.
     * 
     * @param type the type value to set.
     * @return the PipelineReference object itself.
     */
    public PipelineReference setType(PipelineReferenceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the referenceName property: Reference pipeline name.
     * 
     * @return the referenceName value.
     */
    public String getReferenceName() {
        return this.referenceName;
    }

    /**
     * Set the referenceName property: Reference pipeline name.
     * 
     * @param referenceName the referenceName value to set.
     * @return the PipelineReference object itself.
     */
    public PipelineReference setReferenceName(String referenceName) {
        this.referenceName = referenceName;
        return this;
    }

    /**
     * Get the name property: Reference name.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Reference name.
     * 
     * @param name the name value to set.
     * @return the PipelineReference object itself.
     */
    public PipelineReference setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("referenceName", this.referenceName);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineReference.
     */
    public static PipelineReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineReference deserializedPipelineReference = new PipelineReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedPipelineReference.type = PipelineReferenceType.fromString(reader.getString());
                } else if ("referenceName".equals(fieldName)) {
                    deserializedPipelineReference.referenceName = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPipelineReference.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineReference;
        });
    }
}
