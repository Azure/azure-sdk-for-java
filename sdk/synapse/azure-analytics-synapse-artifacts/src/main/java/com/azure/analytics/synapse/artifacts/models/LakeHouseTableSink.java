// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** A copy activity for Microsoft Fabric LakeHouse Table sink. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("LakeHouseTableSink")
@Fluent
public final class LakeHouseTableSink extends CopySink {
    /*
     * The type of table action for LakeHouse Table sink. Possible values include: "None", "Append", "Overwrite".
     */
    @JsonProperty(value = "tableActionOption")
    private Object tableActionOption;

    /*
     * Create partitions in folder structure based on one or multiple columns. Each distinct column value (pair) will
     * be a new partition. Possible values include: "None", "PartitionByKey".
     */
    @JsonProperty(value = "partitionOption")
    private Object partitionOption;

    /*
     * Specify the partition column names from sink columns. Type: array of objects (or Expression with resultType
     * array of objects).
     */
    @JsonProperty(value = "partitionNameList")
    private Object partitionNameList;

    /** Creates an instance of LakeHouseTableSink class. */
    public LakeHouseTableSink() {}

    /**
     * Get the tableActionOption property: The type of table action for LakeHouse Table sink. Possible values include:
     * "None", "Append", "Overwrite".
     *
     * @return the tableActionOption value.
     */
    public Object getTableActionOption() {
        return this.tableActionOption;
    }

    /**
     * Set the tableActionOption property: The type of table action for LakeHouse Table sink. Possible values include:
     * "None", "Append", "Overwrite".
     *
     * @param tableActionOption the tableActionOption value to set.
     * @return the LakeHouseTableSink object itself.
     */
    public LakeHouseTableSink setTableActionOption(Object tableActionOption) {
        this.tableActionOption = tableActionOption;
        return this;
    }

    /**
     * Get the partitionOption property: Create partitions in folder structure based on one or multiple columns. Each
     * distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey".
     *
     * @return the partitionOption value.
     */
    public Object getPartitionOption() {
        return this.partitionOption;
    }

    /**
     * Set the partitionOption property: Create partitions in folder structure based on one or multiple columns. Each
     * distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey".
     *
     * @param partitionOption the partitionOption value to set.
     * @return the LakeHouseTableSink object itself.
     */
    public LakeHouseTableSink setPartitionOption(Object partitionOption) {
        this.partitionOption = partitionOption;
        return this;
    }

    /**
     * Get the partitionNameList property: Specify the partition column names from sink columns. Type: array of objects
     * (or Expression with resultType array of objects).
     *
     * @return the partitionNameList value.
     */
    public Object getPartitionNameList() {
        return this.partitionNameList;
    }

    /**
     * Set the partitionNameList property: Specify the partition column names from sink columns. Type: array of objects
     * (or Expression with resultType array of objects).
     *
     * @param partitionNameList the partitionNameList value to set.
     * @return the LakeHouseTableSink object itself.
     */
    public LakeHouseTableSink setPartitionNameList(Object partitionNameList) {
        this.partitionNameList = partitionNameList;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LakeHouseTableSink setWriteBatchSize(Object writeBatchSize) {
        super.setWriteBatchSize(writeBatchSize);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LakeHouseTableSink setWriteBatchTimeout(Object writeBatchTimeout) {
        super.setWriteBatchTimeout(writeBatchTimeout);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LakeHouseTableSink setSinkRetryCount(Object sinkRetryCount) {
        super.setSinkRetryCount(sinkRetryCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LakeHouseTableSink setSinkRetryWait(Object sinkRetryWait) {
        super.setSinkRetryWait(sinkRetryWait);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LakeHouseTableSink setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }
}
