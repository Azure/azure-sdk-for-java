// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity source for an Office 365 service.
 */
@Fluent
public final class Office365Source extends CopySource {
    /*
     * Copy source type.
     */
    @Generated
    private String type = "Office365Source";

    /*
     * The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
     */
    @Generated
    private Object allowedGroups;

    /*
     * The user scope uri. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object userScopeFilterUri;

    /*
     * The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression
     * with resultType string).
     */
    @Generated
    private Object dateFilterColumn;

    /*
     * Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object startTime;

    /*
     * End time of the requested range for this dataset. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object endTime;

    /*
     * The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array
     * of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
     */
    @Generated
    private Object outputColumns;

    /**
     * Creates an instance of Office365Source class.
     */
    @Generated
    public Office365Source() {
    }

    /**
     * Get the type property: Copy source type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the allowedGroups property: The groups containing all the users. Type: array of strings (or Expression with
     * resultType array of strings).
     * 
     * @return the allowedGroups value.
     */
    @Generated
    public Object getAllowedGroups() {
        return this.allowedGroups;
    }

    /**
     * Set the allowedGroups property: The groups containing all the users. Type: array of strings (or Expression with
     * resultType array of strings).
     * 
     * @param allowedGroups the allowedGroups value to set.
     * @return the Office365Source object itself.
     */
    @Generated
    public Office365Source setAllowedGroups(Object allowedGroups) {
        this.allowedGroups = allowedGroups;
        return this;
    }

    /**
     * Get the userScopeFilterUri property: The user scope uri. Type: string (or Expression with resultType string).
     * 
     * @return the userScopeFilterUri value.
     */
    @Generated
    public Object getUserScopeFilterUri() {
        return this.userScopeFilterUri;
    }

    /**
     * Set the userScopeFilterUri property: The user scope uri. Type: string (or Expression with resultType string).
     * 
     * @param userScopeFilterUri the userScopeFilterUri value to set.
     * @return the Office365Source object itself.
     */
    @Generated
    public Office365Source setUserScopeFilterUri(Object userScopeFilterUri) {
        this.userScopeFilterUri = userScopeFilterUri;
        return this;
    }

    /**
     * Get the dateFilterColumn property: The Column to apply the &lt;paramref name="StartTime"/&gt; and &lt;paramref
     * name="EndTime"/&gt;. Type: string (or Expression with resultType string).
     * 
     * @return the dateFilterColumn value.
     */
    @Generated
    public Object getDateFilterColumn() {
        return this.dateFilterColumn;
    }

    /**
     * Set the dateFilterColumn property: The Column to apply the &lt;paramref name="StartTime"/&gt; and &lt;paramref
     * name="EndTime"/&gt;. Type: string (or Expression with resultType string).
     * 
     * @param dateFilterColumn the dateFilterColumn value to set.
     * @return the Office365Source object itself.
     */
    @Generated
    public Office365Source setDateFilterColumn(Object dateFilterColumn) {
        this.dateFilterColumn = dateFilterColumn;
        return this;
    }

    /**
     * Get the startTime property: Start time of the requested range for this dataset. Type: string (or Expression with
     * resultType string).
     * 
     * @return the startTime value.
     */
    @Generated
    public Object getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Start time of the requested range for this dataset. Type: string (or Expression with
     * resultType string).
     * 
     * @param startTime the startTime value to set.
     * @return the Office365Source object itself.
     */
    @Generated
    public Office365Source setStartTime(Object startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: End time of the requested range for this dataset. Type: string (or Expression with
     * resultType string).
     * 
     * @return the endTime value.
     */
    @Generated
    public Object getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: End time of the requested range for this dataset. Type: string (or Expression with
     * resultType string).
     * 
     * @param endTime the endTime value to set.
     * @return the Office365Source object itself.
     */
    @Generated
    public Office365Source setEndTime(Object endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the outputColumns property: The columns to be read out from the Office 365 table. Type: array of objects (or
     * Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name":
     * "CreatedDateTime" } ].
     * 
     * @return the outputColumns value.
     */
    @Generated
    public Object getOutputColumns() {
        return this.outputColumns;
    }

    /**
     * Set the outputColumns property: The columns to be read out from the Office 365 table. Type: array of objects (or
     * Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name":
     * "CreatedDateTime" } ].
     * 
     * @param outputColumns the outputColumns value to set.
     * @return the Office365Source object itself.
     */
    @Generated
    public Office365Source setOutputColumns(Object outputColumns) {
        this.outputColumns = outputColumns;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public Office365Source setSourceRetryCount(Object sourceRetryCount) {
        super.setSourceRetryCount(sourceRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public Office365Source setSourceRetryWait(Object sourceRetryWait) {
        super.setSourceRetryWait(sourceRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public Office365Source setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (getSourceRetryCount() != null) {
            jsonWriter.writeUntypedField("sourceRetryCount", getSourceRetryCount());
        }
        if (getSourceRetryWait() != null) {
            jsonWriter.writeUntypedField("sourceRetryWait", getSourceRetryWait());
        }
        if (getMaxConcurrentConnections() != null) {
            jsonWriter.writeUntypedField("maxConcurrentConnections", getMaxConcurrentConnections());
        }
        jsonWriter.writeStringField("type", this.type);
        if (this.allowedGroups != null) {
            jsonWriter.writeUntypedField("allowedGroups", this.allowedGroups);
        }
        if (this.userScopeFilterUri != null) {
            jsonWriter.writeUntypedField("userScopeFilterUri", this.userScopeFilterUri);
        }
        if (this.dateFilterColumn != null) {
            jsonWriter.writeUntypedField("dateFilterColumn", this.dateFilterColumn);
        }
        if (this.startTime != null) {
            jsonWriter.writeUntypedField("startTime", this.startTime);
        }
        if (this.endTime != null) {
            jsonWriter.writeUntypedField("endTime", this.endTime);
        }
        if (this.outputColumns != null) {
            jsonWriter.writeUntypedField("outputColumns", this.outputColumns);
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Office365Source from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Office365Source if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Office365Source.
     */
    @Generated
    public static Office365Source fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Office365Source deserializedOffice365Source = new Office365Source();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceRetryCount".equals(fieldName)) {
                    deserializedOffice365Source.setSourceRetryCount(reader.readUntyped());
                } else if ("sourceRetryWait".equals(fieldName)) {
                    deserializedOffice365Source.setSourceRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedOffice365Source.setMaxConcurrentConnections(reader.readUntyped());
                } else if ("type".equals(fieldName)) {
                    deserializedOffice365Source.type = reader.getString();
                } else if ("allowedGroups".equals(fieldName)) {
                    deserializedOffice365Source.allowedGroups = reader.readUntyped();
                } else if ("userScopeFilterUri".equals(fieldName)) {
                    deserializedOffice365Source.userScopeFilterUri = reader.readUntyped();
                } else if ("dateFilterColumn".equals(fieldName)) {
                    deserializedOffice365Source.dateFilterColumn = reader.readUntyped();
                } else if ("startTime".equals(fieldName)) {
                    deserializedOffice365Source.startTime = reader.readUntyped();
                } else if ("endTime".equals(fieldName)) {
                    deserializedOffice365Source.endTime = reader.readUntyped();
                } else if ("outputColumns".equals(fieldName)) {
                    deserializedOffice365Source.outputColumns = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedOffice365Source.setAdditionalProperties(additionalProperties);

            return deserializedOffice365Source;
        });
    }
}
