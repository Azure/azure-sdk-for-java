// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQL pool reference type.
 */
@Fluent
public final class SqlPoolReference implements JsonSerializable<SqlPoolReference> {
    /*
     * SQL pool reference type.
     */
    private SqlPoolReferenceType type;

    /*
     * Reference SQL pool name.
     */
    private String referenceName;

    /**
     * Creates an instance of SqlPoolReference class.
     */
    public SqlPoolReference() {
    }

    /**
     * Get the type property: SQL pool reference type.
     * 
     * @return the type value.
     */
    public SqlPoolReferenceType getType() {
        return this.type;
    }

    /**
     * Set the type property: SQL pool reference type.
     * 
     * @param type the type value to set.
     * @return the SqlPoolReference object itself.
     */
    public SqlPoolReference setType(SqlPoolReferenceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the referenceName property: Reference SQL pool name.
     * 
     * @return the referenceName value.
     */
    public String getReferenceName() {
        return this.referenceName;
    }

    /**
     * Set the referenceName property: Reference SQL pool name.
     * 
     * @param referenceName the referenceName value to set.
     * @return the SqlPoolReference object itself.
     */
    public SqlPoolReference setReferenceName(String referenceName) {
        this.referenceName = referenceName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("referenceName", this.referenceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlPoolReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlPoolReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlPoolReference.
     */
    public static SqlPoolReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlPoolReference deserializedSqlPoolReference = new SqlPoolReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSqlPoolReference.type = SqlPoolReferenceType.fromString(reader.getString());
                } else if ("referenceName".equals(fieldName)) {
                    deserializedSqlPoolReference.referenceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlPoolReference;
        });
    }
}
