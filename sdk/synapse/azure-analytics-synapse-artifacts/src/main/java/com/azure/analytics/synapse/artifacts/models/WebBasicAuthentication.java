// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
 */
@Fluent
public final class WebBasicAuthentication extends WebLinkedServiceTypeProperties {
    /*
     * Type of authentication used to connect to the web table source.
     */
    @Generated
    private WebAuthenticationType authenticationType = WebAuthenticationType.BASIC;

    /*
     * User name for Basic authentication. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object username;

    /*
     * The password for Basic authentication.
     */
    @Generated
    private SecretBase password;

    /**
     * Creates an instance of WebBasicAuthentication class.
     */
    @Generated
    public WebBasicAuthentication() {
    }

    /**
     * Get the authenticationType property: Type of authentication used to connect to the web table source.
     * 
     * @return the authenticationType value.
     */
    @Generated
    @Override
    public WebAuthenticationType getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Get the username property: User name for Basic authentication. Type: string (or Expression with resultType
     * string).
     * 
     * @return the username value.
     */
    @Generated
    public Object getUsername() {
        return this.username;
    }

    /**
     * Set the username property: User name for Basic authentication. Type: string (or Expression with resultType
     * string).
     * 
     * @param username the username value to set.
     * @return the WebBasicAuthentication object itself.
     */
    @Generated
    public WebBasicAuthentication setUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password for Basic authentication.
     * 
     * @return the password value.
     */
    @Generated
    public SecretBase getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The password for Basic authentication.
     * 
     * @param password the password value to set.
     * @return the WebBasicAuthentication object itself.
     */
    @Generated
    public WebBasicAuthentication setPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WebBasicAuthentication setUrl(Object url) {
        super.setUrl(url);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("url", getUrl());
        jsonWriter.writeUntypedField("username", this.username);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebBasicAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebBasicAuthentication if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebBasicAuthentication.
     */
    @Generated
    public static WebBasicAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebBasicAuthentication deserializedWebBasicAuthentication = new WebBasicAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedWebBasicAuthentication.setUrl(reader.readUntyped());
                } else if ("username".equals(fieldName)) {
                    deserializedWebBasicAuthentication.username = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedWebBasicAuthentication.password = SecretBase.fromJson(reader);
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedWebBasicAuthentication.authenticationType
                        = WebAuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebBasicAuthentication;
        });
    }
}
