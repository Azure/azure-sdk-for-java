// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity Azure SQL sink.
 */
@Fluent
public final class AzureSqlSink extends CopySink {
    /*
     * Copy sink type.
     */
    @Generated
    private String type = "AzureSqlSink";

    /*
     * SQL writer stored procedure name. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object sqlWriterStoredProcedureName;

    /*
     * SQL writer table type. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object sqlWriterTableType;

    /*
     * SQL pre-copy script. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object preCopyScript;

    /*
     * SQL stored procedure parameters.
     */
    @Generated
    private Object storedProcedureParameters;

    /*
     * The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object storedProcedureTableTypeParameterName;

    /*
     * The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string
     * (or Expression with resultType string).
     */
    @Generated
    private Object tableOption;

    /**
     * Creates an instance of AzureSqlSink class.
     */
    @Generated
    public AzureSqlSink() {
    }

    /**
     * Get the type property: Copy sink type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the sqlWriterStoredProcedureName property: SQL writer stored procedure name. Type: string (or Expression with
     * resultType string).
     * 
     * @return the sqlWriterStoredProcedureName value.
     */
    @Generated
    public Object getSqlWriterStoredProcedureName() {
        return this.sqlWriterStoredProcedureName;
    }

    /**
     * Set the sqlWriterStoredProcedureName property: SQL writer stored procedure name. Type: string (or Expression with
     * resultType string).
     * 
     * @param sqlWriterStoredProcedureName the sqlWriterStoredProcedureName value to set.
     * @return the AzureSqlSink object itself.
     */
    @Generated
    public AzureSqlSink setSqlWriterStoredProcedureName(Object sqlWriterStoredProcedureName) {
        this.sqlWriterStoredProcedureName = sqlWriterStoredProcedureName;
        return this;
    }

    /**
     * Get the sqlWriterTableType property: SQL writer table type. Type: string (or Expression with resultType string).
     * 
     * @return the sqlWriterTableType value.
     */
    @Generated
    public Object getSqlWriterTableType() {
        return this.sqlWriterTableType;
    }

    /**
     * Set the sqlWriterTableType property: SQL writer table type. Type: string (or Expression with resultType string).
     * 
     * @param sqlWriterTableType the sqlWriterTableType value to set.
     * @return the AzureSqlSink object itself.
     */
    @Generated
    public AzureSqlSink setSqlWriterTableType(Object sqlWriterTableType) {
        this.sqlWriterTableType = sqlWriterTableType;
        return this;
    }

    /**
     * Get the preCopyScript property: SQL pre-copy script. Type: string (or Expression with resultType string).
     * 
     * @return the preCopyScript value.
     */
    @Generated
    public Object getPreCopyScript() {
        return this.preCopyScript;
    }

    /**
     * Set the preCopyScript property: SQL pre-copy script. Type: string (or Expression with resultType string).
     * 
     * @param preCopyScript the preCopyScript value to set.
     * @return the AzureSqlSink object itself.
     */
    @Generated
    public AzureSqlSink setPreCopyScript(Object preCopyScript) {
        this.preCopyScript = preCopyScript;
        return this;
    }

    /**
     * Get the storedProcedureParameters property: SQL stored procedure parameters.
     * 
     * @return the storedProcedureParameters value.
     */
    @Generated
    public Object getStoredProcedureParameters() {
        return this.storedProcedureParameters;
    }

    /**
     * Set the storedProcedureParameters property: SQL stored procedure parameters.
     * 
     * @param storedProcedureParameters the storedProcedureParameters value to set.
     * @return the AzureSqlSink object itself.
     */
    @Generated
    public AzureSqlSink setStoredProcedureParameters(Object storedProcedureParameters) {
        this.storedProcedureParameters = storedProcedureParameters;
        return this;
    }

    /**
     * Get the storedProcedureTableTypeParameterName property: The stored procedure parameter name of the table type.
     * Type: string (or Expression with resultType string).
     * 
     * @return the storedProcedureTableTypeParameterName value.
     */
    @Generated
    public Object getStoredProcedureTableTypeParameterName() {
        return this.storedProcedureTableTypeParameterName;
    }

    /**
     * Set the storedProcedureTableTypeParameterName property: The stored procedure parameter name of the table type.
     * Type: string (or Expression with resultType string).
     * 
     * @param storedProcedureTableTypeParameterName the storedProcedureTableTypeParameterName value to set.
     * @return the AzureSqlSink object itself.
     */
    @Generated
    public AzureSqlSink setStoredProcedureTableTypeParameterName(Object storedProcedureTableTypeParameterName) {
        this.storedProcedureTableTypeParameterName = storedProcedureTableTypeParameterName;
        return this;
    }

    /**
     * Get the tableOption property: The option to handle sink table, such as autoCreate. For now only 'autoCreate'
     * value is supported. Type: string (or Expression with resultType string).
     * 
     * @return the tableOption value.
     */
    @Generated
    public Object getTableOption() {
        return this.tableOption;
    }

    /**
     * Set the tableOption property: The option to handle sink table, such as autoCreate. For now only 'autoCreate'
     * value is supported. Type: string (or Expression with resultType string).
     * 
     * @param tableOption the tableOption value to set.
     * @return the AzureSqlSink object itself.
     */
    @Generated
    public AzureSqlSink setTableOption(Object tableOption) {
        this.tableOption = tableOption;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureSqlSink setWriteBatchSize(Object writeBatchSize) {
        super.setWriteBatchSize(writeBatchSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureSqlSink setWriteBatchTimeout(Object writeBatchTimeout) {
        super.setWriteBatchTimeout(writeBatchTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureSqlSink setSinkRetryCount(Object sinkRetryCount) {
        super.setSinkRetryCount(sinkRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureSqlSink setSinkRetryWait(Object sinkRetryWait) {
        super.setSinkRetryWait(sinkRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureSqlSink setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (getWriteBatchSize() != null) {
            jsonWriter.writeUntypedField("writeBatchSize", getWriteBatchSize());
        }
        if (getWriteBatchTimeout() != null) {
            jsonWriter.writeUntypedField("writeBatchTimeout", getWriteBatchTimeout());
        }
        if (getSinkRetryCount() != null) {
            jsonWriter.writeUntypedField("sinkRetryCount", getSinkRetryCount());
        }
        if (getSinkRetryWait() != null) {
            jsonWriter.writeUntypedField("sinkRetryWait", getSinkRetryWait());
        }
        if (getMaxConcurrentConnections() != null) {
            jsonWriter.writeUntypedField("maxConcurrentConnections", getMaxConcurrentConnections());
        }
        jsonWriter.writeStringField("type", this.type);
        if (this.sqlWriterStoredProcedureName != null) {
            jsonWriter.writeUntypedField("sqlWriterStoredProcedureName", this.sqlWriterStoredProcedureName);
        }
        if (this.sqlWriterTableType != null) {
            jsonWriter.writeUntypedField("sqlWriterTableType", this.sqlWriterTableType);
        }
        if (this.preCopyScript != null) {
            jsonWriter.writeUntypedField("preCopyScript", this.preCopyScript);
        }
        if (this.storedProcedureParameters != null) {
            jsonWriter.writeUntypedField("storedProcedureParameters", this.storedProcedureParameters);
        }
        if (this.storedProcedureTableTypeParameterName != null) {
            jsonWriter.writeUntypedField("storedProcedureTableTypeParameterName",
                this.storedProcedureTableTypeParameterName);
        }
        if (this.tableOption != null) {
            jsonWriter.writeUntypedField("tableOption", this.tableOption);
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSqlSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSqlSink if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSqlSink.
     */
    @Generated
    public static AzureSqlSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSqlSink deserializedAzureSqlSink = new AzureSqlSink();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("writeBatchSize".equals(fieldName)) {
                    deserializedAzureSqlSink.setWriteBatchSize(reader.readUntyped());
                } else if ("writeBatchTimeout".equals(fieldName)) {
                    deserializedAzureSqlSink.setWriteBatchTimeout(reader.readUntyped());
                } else if ("sinkRetryCount".equals(fieldName)) {
                    deserializedAzureSqlSink.setSinkRetryCount(reader.readUntyped());
                } else if ("sinkRetryWait".equals(fieldName)) {
                    deserializedAzureSqlSink.setSinkRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedAzureSqlSink.setMaxConcurrentConnections(reader.readUntyped());
                } else if ("type".equals(fieldName)) {
                    deserializedAzureSqlSink.type = reader.getString();
                } else if ("sqlWriterStoredProcedureName".equals(fieldName)) {
                    deserializedAzureSqlSink.sqlWriterStoredProcedureName = reader.readUntyped();
                } else if ("sqlWriterTableType".equals(fieldName)) {
                    deserializedAzureSqlSink.sqlWriterTableType = reader.readUntyped();
                } else if ("preCopyScript".equals(fieldName)) {
                    deserializedAzureSqlSink.preCopyScript = reader.readUntyped();
                } else if ("storedProcedureParameters".equals(fieldName)) {
                    deserializedAzureSqlSink.storedProcedureParameters = reader.readUntyped();
                } else if ("storedProcedureTableTypeParameterName".equals(fieldName)) {
                    deserializedAzureSqlSink.storedProcedureTableTypeParameterName = reader.readUntyped();
                } else if ("tableOption".equals(fieldName)) {
                    deserializedAzureSqlSink.tableOption = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedAzureSqlSink.setAdditionalProperties(additionalProperties);

            return deserializedAzureSqlSink;
        });
    }
}
