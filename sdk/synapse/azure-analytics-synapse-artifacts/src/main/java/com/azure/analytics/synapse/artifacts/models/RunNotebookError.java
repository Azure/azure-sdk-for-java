// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Run notebook error.
 */
@Fluent
public final class RunNotebookError implements JsonSerializable<RunNotebookError> {
    /*
     * Error name.
     */
    private String ename;

    /*
     * Error message.
     */
    private String evalue;

    /*
     * Error trace.
     */
    private List<String> traceback;

    /**
     * Creates an instance of RunNotebookError class.
     */
    public RunNotebookError() {
    }

    /**
     * Get the ename property: Error name.
     * 
     * @return the ename value.
     */
    public String getEname() {
        return this.ename;
    }

    /**
     * Get the evalue property: Error message.
     * 
     * @return the evalue value.
     */
    public String getEvalue() {
        return this.evalue;
    }

    /**
     * Get the traceback property: Error trace.
     * 
     * @return the traceback value.
     */
    public List<String> getTraceback() {
        return this.traceback;
    }

    /**
     * Set the traceback property: Error trace.
     * 
     * @param traceback the traceback value to set.
     * @return the RunNotebookError object itself.
     */
    public RunNotebookError setTraceback(List<String> traceback) {
        this.traceback = traceback;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("traceback", this.traceback, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunNotebookError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunNotebookError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RunNotebookError.
     */
    public static RunNotebookError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunNotebookError deserializedRunNotebookError = new RunNotebookError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ename".equals(fieldName)) {
                    deserializedRunNotebookError.ename = reader.getString();
                } else if ("evalue".equals(fieldName)) {
                    deserializedRunNotebookError.evalue = reader.getString();
                } else if ("traceback".equals(fieldName)) {
                    List<String> traceback = reader.readArray(reader1 -> reader1.getString());
                    deserializedRunNotebookError.traceback = traceback;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunNotebookError;
        });
    }
}
