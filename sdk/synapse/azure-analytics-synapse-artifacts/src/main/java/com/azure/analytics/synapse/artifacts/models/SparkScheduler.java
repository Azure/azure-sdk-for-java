// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The SparkScheduler model.
 */
@Fluent
public final class SparkScheduler implements JsonSerializable<SparkScheduler> {
    /*
     * The submittedAt property.
     */
    private OffsetDateTime submittedAt;

    /*
     * The scheduledAt property.
     */
    private OffsetDateTime scheduledAt;

    /*
     * The endedAt property.
     */
    private OffsetDateTime endedAt;

    /*
     * The cancellationRequestedAt property.
     */
    private OffsetDateTime cancellationRequestedAt;

    /*
     * The currentState property.
     */
    private SchedulerCurrentState currentState;

    /**
     * Creates an instance of SparkScheduler class.
     */
    public SparkScheduler() {
    }

    /**
     * Get the submittedAt property: The submittedAt property.
     * 
     * @return the submittedAt value.
     */
    public OffsetDateTime getSubmittedAt() {
        return this.submittedAt;
    }

    /**
     * Set the submittedAt property: The submittedAt property.
     * 
     * @param submittedAt the submittedAt value to set.
     * @return the SparkScheduler object itself.
     */
    public SparkScheduler setSubmittedAt(OffsetDateTime submittedAt) {
        this.submittedAt = submittedAt;
        return this;
    }

    /**
     * Get the scheduledAt property: The scheduledAt property.
     * 
     * @return the scheduledAt value.
     */
    public OffsetDateTime getScheduledAt() {
        return this.scheduledAt;
    }

    /**
     * Set the scheduledAt property: The scheduledAt property.
     * 
     * @param scheduledAt the scheduledAt value to set.
     * @return the SparkScheduler object itself.
     */
    public SparkScheduler setScheduledAt(OffsetDateTime scheduledAt) {
        this.scheduledAt = scheduledAt;
        return this;
    }

    /**
     * Get the endedAt property: The endedAt property.
     * 
     * @return the endedAt value.
     */
    public OffsetDateTime getEndedAt() {
        return this.endedAt;
    }

    /**
     * Set the endedAt property: The endedAt property.
     * 
     * @param endedAt the endedAt value to set.
     * @return the SparkScheduler object itself.
     */
    public SparkScheduler setEndedAt(OffsetDateTime endedAt) {
        this.endedAt = endedAt;
        return this;
    }

    /**
     * Get the cancellationRequestedAt property: The cancellationRequestedAt property.
     * 
     * @return the cancellationRequestedAt value.
     */
    public OffsetDateTime getCancellationRequestedAt() {
        return this.cancellationRequestedAt;
    }

    /**
     * Set the cancellationRequestedAt property: The cancellationRequestedAt property.
     * 
     * @param cancellationRequestedAt the cancellationRequestedAt value to set.
     * @return the SparkScheduler object itself.
     */
    public SparkScheduler setCancellationRequestedAt(OffsetDateTime cancellationRequestedAt) {
        this.cancellationRequestedAt = cancellationRequestedAt;
        return this;
    }

    /**
     * Get the currentState property: The currentState property.
     * 
     * @return the currentState value.
     */
    public SchedulerCurrentState getCurrentState() {
        return this.currentState;
    }

    /**
     * Set the currentState property: The currentState property.
     * 
     * @param currentState the currentState value to set.
     * @return the SparkScheduler object itself.
     */
    public SparkScheduler setCurrentState(SchedulerCurrentState currentState) {
        this.currentState = currentState;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("submittedAt",
            this.submittedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.submittedAt));
        jsonWriter.writeStringField("scheduledAt",
            this.scheduledAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduledAt));
        jsonWriter.writeStringField("endedAt",
            this.endedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endedAt));
        jsonWriter.writeStringField("cancellationRequestedAt",
            this.cancellationRequestedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.cancellationRequestedAt));
        jsonWriter.writeStringField("currentState", this.currentState == null ? null : this.currentState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkScheduler from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkScheduler if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SparkScheduler.
     */
    public static SparkScheduler fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkScheduler deserializedSparkScheduler = new SparkScheduler();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("submittedAt".equals(fieldName)) {
                    deserializedSparkScheduler.submittedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("scheduledAt".equals(fieldName)) {
                    deserializedSparkScheduler.scheduledAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("endedAt".equals(fieldName)) {
                    deserializedSparkScheduler.endedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("cancellationRequestedAt".equals(fieldName)) {
                    deserializedSparkScheduler.cancellationRequestedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("currentState".equals(fieldName)) {
                    deserializedSparkScheduler.currentState = SchedulerCurrentState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkScheduler;
        });
    }
}
