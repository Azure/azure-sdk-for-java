// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Nested representation of a complex expression.
 */
@Fluent
public final class ExpressionV2 implements JsonSerializable<ExpressionV2> {
    /*
     * Type of expressions supported by the system. Type: string.
     */
    private ExpressionV2Type type;

    /*
     * Value for Constant/Field Type: string.
     */
    private String value;

    /*
     * Expression operator value Type: string.
     */
    private String operator;

    /*
     * List of nested expressions.
     */
    private List<ExpressionV2> operands;

    /**
     * Creates an instance of ExpressionV2 class.
     */
    public ExpressionV2() {
    }

    /**
     * Get the type property: Type of expressions supported by the system. Type: string.
     * 
     * @return the type value.
     */
    public ExpressionV2Type getType() {
        return this.type;
    }

    /**
     * Set the type property: Type of expressions supported by the system. Type: string.
     * 
     * @param type the type value to set.
     * @return the ExpressionV2 object itself.
     */
    public ExpressionV2 setType(ExpressionV2Type type) {
        this.type = type;
        return this;
    }

    /**
     * Get the value property: Value for Constant/Field Type: string.
     * 
     * @return the value value.
     */
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: Value for Constant/Field Type: string.
     * 
     * @param value the value value to set.
     * @return the ExpressionV2 object itself.
     */
    public ExpressionV2 setValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the operator property: Expression operator value Type: string.
     * 
     * @return the operator value.
     */
    public String getOperator() {
        return this.operator;
    }

    /**
     * Set the operator property: Expression operator value Type: string.
     * 
     * @param operator the operator value to set.
     * @return the ExpressionV2 object itself.
     */
    public ExpressionV2 setOperator(String operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the operands property: List of nested expressions.
     * 
     * @return the operands value.
     */
    public List<ExpressionV2> getOperands() {
        return this.operands;
    }

    /**
     * Set the operands property: List of nested expressions.
     * 
     * @param operands the operands value to set.
     * @return the ExpressionV2 object itself.
     */
    public ExpressionV2 setOperands(List<ExpressionV2> operands) {
        this.operands = operands;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("operator", this.operator);
        jsonWriter.writeArrayField("operands", this.operands, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExpressionV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExpressionV2 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExpressionV2.
     */
    public static ExpressionV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExpressionV2 deserializedExpressionV2 = new ExpressionV2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedExpressionV2.type = ExpressionV2Type.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedExpressionV2.value = reader.getString();
                } else if ("operator".equals(fieldName)) {
                    deserializedExpressionV2.operator = reader.getString();
                } else if ("operands".equals(fieldName)) {
                    List<ExpressionV2> operands = reader.readArray(reader1 -> ExpressionV2.fromJson(reader1));
                    deserializedExpressionV2.operands = operands;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExpressionV2;
        });
    }
}
