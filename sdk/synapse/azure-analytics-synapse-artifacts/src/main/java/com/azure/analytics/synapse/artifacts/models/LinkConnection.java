// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LinkConnection model.
 */
@Fluent
public final class LinkConnection implements JsonSerializable<LinkConnection> {
    /*
     * Properties of link connection's source database
     */
    private LinkConnectionSourceDatabase sourceDatabase;

    /*
     * Properties of link connection's target database
     */
    private LinkConnectionTargetDatabase targetDatabase;

    /*
     * Properties of link connection's landing zone
     */
    private LinkConnectionLandingZone landingZone;

    /*
     * Properties of link connection's compute
     */
    private LinkConnectionCompute compute;

    /**
     * Creates an instance of LinkConnection class.
     */
    public LinkConnection() {
    }

    /**
     * Get the sourceDatabase property: Properties of link connection's source database.
     * 
     * @return the sourceDatabase value.
     */
    public LinkConnectionSourceDatabase getSourceDatabase() {
        return this.sourceDatabase;
    }

    /**
     * Set the sourceDatabase property: Properties of link connection's source database.
     * 
     * @param sourceDatabase the sourceDatabase value to set.
     * @return the LinkConnection object itself.
     */
    public LinkConnection setSourceDatabase(LinkConnectionSourceDatabase sourceDatabase) {
        this.sourceDatabase = sourceDatabase;
        return this;
    }

    /**
     * Get the targetDatabase property: Properties of link connection's target database.
     * 
     * @return the targetDatabase value.
     */
    public LinkConnectionTargetDatabase getTargetDatabase() {
        return this.targetDatabase;
    }

    /**
     * Set the targetDatabase property: Properties of link connection's target database.
     * 
     * @param targetDatabase the targetDatabase value to set.
     * @return the LinkConnection object itself.
     */
    public LinkConnection setTargetDatabase(LinkConnectionTargetDatabase targetDatabase) {
        this.targetDatabase = targetDatabase;
        return this;
    }

    /**
     * Get the landingZone property: Properties of link connection's landing zone.
     * 
     * @return the landingZone value.
     */
    public LinkConnectionLandingZone getLandingZone() {
        return this.landingZone;
    }

    /**
     * Set the landingZone property: Properties of link connection's landing zone.
     * 
     * @param landingZone the landingZone value to set.
     * @return the LinkConnection object itself.
     */
    public LinkConnection setLandingZone(LinkConnectionLandingZone landingZone) {
        this.landingZone = landingZone;
        return this;
    }

    /**
     * Get the compute property: Properties of link connection's compute.
     * 
     * @return the compute value.
     */
    public LinkConnectionCompute getCompute() {
        return this.compute;
    }

    /**
     * Set the compute property: Properties of link connection's compute.
     * 
     * @param compute the compute value to set.
     * @return the LinkConnection object itself.
     */
    public LinkConnection setCompute(LinkConnectionCompute compute) {
        this.compute = compute;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceDatabase", this.sourceDatabase);
        jsonWriter.writeJsonField("targetDatabase", this.targetDatabase);
        jsonWriter.writeJsonField("landingZone", this.landingZone);
        jsonWriter.writeJsonField("compute", this.compute);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkConnection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkConnection.
     */
    public static LinkConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkConnection deserializedLinkConnection = new LinkConnection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceDatabase".equals(fieldName)) {
                    deserializedLinkConnection.sourceDatabase = LinkConnectionSourceDatabase.fromJson(reader);
                } else if ("targetDatabase".equals(fieldName)) {
                    deserializedLinkConnection.targetDatabase = LinkConnectionTargetDatabase.fromJson(reader);
                } else if ("landingZone".equals(fieldName)) {
                    deserializedLinkConnection.landingZone = LinkConnectionLandingZone.fromJson(reader);
                } else if ("compute".equals(fieldName)) {
                    deserializedLinkConnection.compute = LinkConnectionCompute.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkConnection;
        });
    }
}
