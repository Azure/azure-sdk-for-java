// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
 */
@Fluent
public class ManagedIntegrationRuntime extends IntegrationRuntime {
    /*
     * Type of integration runtime.
     */
    private IntegrationRuntimeType type = IntegrationRuntimeType.MANAGED;

    /*
     * Integration runtime state, only valid for managed dedicated integration runtime.
     */
    private IntegrationRuntimeState state;

    /*
     * Managed Virtual Network reference.
     */
    private ManagedVirtualNetworkReference managedVirtualNetwork;

    /*
     * The compute resource for managed integration runtime.
     */
    private IntegrationRuntimeComputeProperties computeProperties;

    /*
     * SSIS properties for managed integration runtime.
     */
    private IntegrationRuntimeSsisProperties ssisProperties;

    /**
     * Creates an instance of ManagedIntegrationRuntime class.
     */
    public ManagedIntegrationRuntime() {
    }

    /**
     * Get the type property: Type of integration runtime.
     * 
     * @return the type value.
     */
    @Override
    public IntegrationRuntimeType getType() {
        return this.type;
    }

    /**
     * Get the state property: Integration runtime state, only valid for managed dedicated integration runtime.
     * 
     * @return the state value.
     */
    public IntegrationRuntimeState getState() {
        return this.state;
    }

    /**
     * Get the managedVirtualNetwork property: Managed Virtual Network reference.
     * 
     * @return the managedVirtualNetwork value.
     */
    public ManagedVirtualNetworkReference getManagedVirtualNetwork() {
        return this.managedVirtualNetwork;
    }

    /**
     * Set the managedVirtualNetwork property: Managed Virtual Network reference.
     * 
     * @param managedVirtualNetwork the managedVirtualNetwork value to set.
     * @return the ManagedIntegrationRuntime object itself.
     */
    public ManagedIntegrationRuntime setManagedVirtualNetwork(ManagedVirtualNetworkReference managedVirtualNetwork) {
        this.managedVirtualNetwork = managedVirtualNetwork;
        return this;
    }

    /**
     * Get the computeProperties property: The compute resource for managed integration runtime.
     * 
     * @return the computeProperties value.
     */
    public IntegrationRuntimeComputeProperties getComputeProperties() {
        return this.computeProperties;
    }

    /**
     * Set the computeProperties property: The compute resource for managed integration runtime.
     * 
     * @param computeProperties the computeProperties value to set.
     * @return the ManagedIntegrationRuntime object itself.
     */
    public ManagedIntegrationRuntime setComputeProperties(IntegrationRuntimeComputeProperties computeProperties) {
        this.computeProperties = computeProperties;
        return this;
    }

    /**
     * Get the ssisProperties property: SSIS properties for managed integration runtime.
     * 
     * @return the ssisProperties value.
     */
    public IntegrationRuntimeSsisProperties getSsisProperties() {
        return this.ssisProperties;
    }

    /**
     * Set the ssisProperties property: SSIS properties for managed integration runtime.
     * 
     * @param ssisProperties the ssisProperties value to set.
     * @return the ManagedIntegrationRuntime object itself.
     */
    public ManagedIntegrationRuntime setSsisProperties(IntegrationRuntimeSsisProperties ssisProperties) {
        this.ssisProperties = ssisProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedIntegrationRuntime setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("managedVirtualNetwork", this.managedVirtualNetwork);
        if (computeProperties != null || ssisProperties != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeJsonField("computeProperties", this.computeProperties);
            jsonWriter.writeJsonField("ssisProperties", this.ssisProperties);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIntegrationRuntime from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIntegrationRuntime if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedIntegrationRuntime.
     */
    public static ManagedIntegrationRuntime fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIntegrationRuntime deserializedManagedIntegrationRuntime = new ManagedIntegrationRuntime();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedManagedIntegrationRuntime.setDescription(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedManagedIntegrationRuntime.type = IntegrationRuntimeType.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedManagedIntegrationRuntime.state
                        = IntegrationRuntimeState.fromString(reader.getString());
                } else if ("managedVirtualNetwork".equals(fieldName)) {
                    deserializedManagedIntegrationRuntime.managedVirtualNetwork
                        = ManagedVirtualNetworkReference.fromJson(reader);
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("computeProperties".equals(fieldName)) {
                            deserializedManagedIntegrationRuntime.computeProperties
                                = IntegrationRuntimeComputeProperties.fromJson(reader);
                        } else if ("ssisProperties".equals(fieldName)) {
                            deserializedManagedIntegrationRuntime.ssisProperties
                                = IntegrationRuntimeSsisProperties.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedManagedIntegrationRuntime.setAdditionalProperties(additionalProperties);

            return deserializedManagedIntegrationRuntime;
        });
    }
}
