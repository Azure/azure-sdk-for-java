// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Staging info for execute data flow activity.
 */
@Fluent
public final class DataFlowStagingInfo implements JsonSerializable<DataFlowStagingInfo> {
    /*
     * Staging linked service reference.
     */
    private LinkedServiceReference linkedService;

    /*
     * Folder path for staging blob.
     */
    private Object folderPath;

    /**
     * Creates an instance of DataFlowStagingInfo class.
     */
    public DataFlowStagingInfo() {
    }

    /**
     * Get the linkedService property: Staging linked service reference.
     * 
     * @return the linkedService value.
     */
    public LinkedServiceReference getLinkedService() {
        return this.linkedService;
    }

    /**
     * Set the linkedService property: Staging linked service reference.
     * 
     * @param linkedService the linkedService value to set.
     * @return the DataFlowStagingInfo object itself.
     */
    public DataFlowStagingInfo setLinkedService(LinkedServiceReference linkedService) {
        this.linkedService = linkedService;
        return this;
    }

    /**
     * Get the folderPath property: Folder path for staging blob.
     * 
     * @return the folderPath value.
     */
    public Object getFolderPath() {
        return this.folderPath;
    }

    /**
     * Set the folderPath property: Folder path for staging blob.
     * 
     * @param folderPath the folderPath value to set.
     * @return the DataFlowStagingInfo object itself.
     */
    public DataFlowStagingInfo setFolderPath(Object folderPath) {
        this.folderPath = folderPath;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("linkedService", this.linkedService);
        jsonWriter.writeUntypedField("folderPath", this.folderPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataFlowStagingInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataFlowStagingInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataFlowStagingInfo.
     */
    public static DataFlowStagingInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataFlowStagingInfo deserializedDataFlowStagingInfo = new DataFlowStagingInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedService".equals(fieldName)) {
                    deserializedDataFlowStagingInfo.linkedService = LinkedServiceReference.fromJson(reader);
                } else if ("folderPath".equals(fieldName)) {
                    deserializedDataFlowStagingInfo.folderPath = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataFlowStagingInfo;
        });
    }
}
