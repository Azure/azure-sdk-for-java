// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Database properties. */
@Fluent
public final class ViewEntityProperties extends MDEntityProperties {
    /*
     * Table namespace.
     */
    @JsonProperty(value = "namespace", required = true)
    private TableNamespace namespace;

    /*
     * Table partitioning information.
     */
    @JsonProperty(value = "partitioning")
    private TablePartitioning partitioning;

    /*
     * Storage descriptor
     */
    @JsonProperty(value = "storageDescriptor", required = true)
    private StorageDescriptor storageDescriptor;

    /*
     * View original text.
     */
    @JsonProperty(value = "viewOriginalText")
    private String viewOriginalText;

    /*
     * View expanded text.
     */
    @JsonProperty(value = "viewExpandedText")
    private String viewExpandedText;

    /*
     * Temporary.
     */
    @JsonProperty(value = "temporary")
    private Boolean temporary;

    /*
     * Is rewrite enabled.
     */
    @JsonProperty(value = "isRewriteEnabled")
    private Boolean isRewriteEnabled;

    /** Creates an instance of ViewEntityProperties class. */
    public ViewEntityProperties() {}

    /**
     * Get the namespace property: Table namespace.
     *
     * @return the namespace value.
     */
    public TableNamespace getNamespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: Table namespace.
     *
     * @param namespace the namespace value to set.
     * @return the ViewEntityProperties object itself.
     */
    public ViewEntityProperties setNamespace(TableNamespace namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the partitioning property: Table partitioning information.
     *
     * @return the partitioning value.
     */
    public TablePartitioning getPartitioning() {
        return this.partitioning;
    }

    /**
     * Set the partitioning property: Table partitioning information.
     *
     * @param partitioning the partitioning value to set.
     * @return the ViewEntityProperties object itself.
     */
    public ViewEntityProperties setPartitioning(TablePartitioning partitioning) {
        this.partitioning = partitioning;
        return this;
    }

    /**
     * Get the storageDescriptor property: Storage descriptor.
     *
     * @return the storageDescriptor value.
     */
    public StorageDescriptor getStorageDescriptor() {
        return this.storageDescriptor;
    }

    /**
     * Set the storageDescriptor property: Storage descriptor.
     *
     * @param storageDescriptor the storageDescriptor value to set.
     * @return the ViewEntityProperties object itself.
     */
    public ViewEntityProperties setStorageDescriptor(StorageDescriptor storageDescriptor) {
        this.storageDescriptor = storageDescriptor;
        return this;
    }

    /**
     * Get the viewOriginalText property: View original text.
     *
     * @return the viewOriginalText value.
     */
    public String getViewOriginalText() {
        return this.viewOriginalText;
    }

    /**
     * Set the viewOriginalText property: View original text.
     *
     * @param viewOriginalText the viewOriginalText value to set.
     * @return the ViewEntityProperties object itself.
     */
    public ViewEntityProperties setViewOriginalText(String viewOriginalText) {
        this.viewOriginalText = viewOriginalText;
        return this;
    }

    /**
     * Get the viewExpandedText property: View expanded text.
     *
     * @return the viewExpandedText value.
     */
    public String getViewExpandedText() {
        return this.viewExpandedText;
    }

    /**
     * Set the viewExpandedText property: View expanded text.
     *
     * @param viewExpandedText the viewExpandedText value to set.
     * @return the ViewEntityProperties object itself.
     */
    public ViewEntityProperties setViewExpandedText(String viewExpandedText) {
        this.viewExpandedText = viewExpandedText;
        return this;
    }

    /**
     * Get the temporary property: Temporary.
     *
     * @return the temporary value.
     */
    public Boolean isTemporary() {
        return this.temporary;
    }

    /**
     * Set the temporary property: Temporary.
     *
     * @param temporary the temporary value to set.
     * @return the ViewEntityProperties object itself.
     */
    public ViewEntityProperties setTemporary(Boolean temporary) {
        this.temporary = temporary;
        return this;
    }

    /**
     * Get the isRewriteEnabled property: Is rewrite enabled.
     *
     * @return the isRewriteEnabled value.
     */
    public Boolean isRewriteEnabled() {
        return this.isRewriteEnabled;
    }

    /**
     * Set the isRewriteEnabled property: Is rewrite enabled.
     *
     * @param isRewriteEnabled the isRewriteEnabled value to set.
     * @return the ViewEntityProperties object itself.
     */
    public ViewEntityProperties setIsRewriteEnabled(Boolean isRewriteEnabled) {
        this.isRewriteEnabled = isRewriteEnabled;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ViewEntityProperties setOriginObjectId(String originObjectId) {
        super.setOriginObjectId(originObjectId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ViewEntityProperties setPublishStatus(String publishStatus) {
        super.setPublishStatus(publishStatus);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ViewEntityProperties setProperties(Map<String, Object> properties) {
        super.setProperties(properties);
        return this;
    }
}
