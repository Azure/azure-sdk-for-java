// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts;

import com.azure.analytics.synapse.artifacts.implementation.RunNotebooksImpl;
import com.azure.analytics.synapse.artifacts.models.CloudErrorException;
import com.azure.analytics.synapse.artifacts.models.RunNotebookRequest;
import com.azure.analytics.synapse.artifacts.models.RunNotebookResponse;
import com.azure.analytics.synapse.artifacts.models.RunNotebookSnapshotResponse;
import com.azure.analytics.synapse.artifacts.models.RunNotebooksCreateRunResponse;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous ArtifactsClient type. */
@ServiceClient(builder = ArtifactsClientBuilder.class)
public final class RunNotebookClient {
    @Generated private final RunNotebooksImpl serviceClient;

    /**
     * Initializes an instance of RunNotebookClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    RunNotebookClient(RunNotebooksImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Run notebook.
     *
     * @param runId Notebook run id.
     * @param runNotebookRequest Run notebook request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunNotebooksCreateRunResponse createRunWithResponse(
            String runId, RunNotebookRequest runNotebookRequest, Context context) {
        return this.serviceClient.createRunWithResponse(runId, runNotebookRequest, context);
    }

    /**
     * Run notebook.
     *
     * @param runId Notebook run id.
     * @param runNotebookRequest Run notebook request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunNotebookResponse createRun(String runId, RunNotebookRequest runNotebookRequest) {
        return this.serviceClient.createRun(runId, runNotebookRequest);
    }

    /**
     * Get RunNotebook Status for run id.
     *
     * @param runId Notebook run id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Status for run id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RunNotebookResponse> getStatusWithResponse(String runId, Context context) {
        return this.serviceClient.getStatusWithResponse(runId, context);
    }

    /**
     * Get RunNotebook Status for run id.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Status for run id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunNotebookResponse getStatus(String runId) {
        return this.serviceClient.getStatus(runId);
    }

    /**
     * Cancel notebook run.
     *
     * @param runId Notebook run id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RunNotebookResponse> cancelRunWithResponse(String runId, Context context) {
        return this.serviceClient.cancelRunWithResponse(runId, context);
    }

    /**
     * Cancel notebook run.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunNotebookResponse cancelRun(String runId) {
        return this.serviceClient.cancelRun(runId);
    }

    /**
     * Get RunNotebook Snapshot for run id.
     *
     * @param runId Notebook run id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Snapshot for run id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RunNotebookSnapshotResponse> getSnapshotWithResponse(String runId, Context context) {
        return this.serviceClient.getSnapshotWithResponse(runId, context);
    }

    /**
     * Get RunNotebook Snapshot for run id.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Snapshot for run id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunNotebookSnapshotResponse getSnapshot(String runId) {
        return this.serviceClient.getSnapshot(runId);
    }
}
