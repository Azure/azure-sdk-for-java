// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SSIS embedded child package.
 */
@Fluent
public final class SsisChildPackage implements JsonSerializable<SsisChildPackage> {
    /*
     * Path for embedded child package. Type: string (or Expression with resultType string).
     */
    private Object packagePath;

    /*
     * Name for embedded child package.
     */
    private String packageName;

    /*
     * Content for embedded child package. Type: string (or Expression with resultType string).
     */
    private Object packageContent;

    /*
     * Last modified date for embedded child package.
     */
    private String packageLastModifiedDate;

    /**
     * Creates an instance of SsisChildPackage class.
     */
    public SsisChildPackage() {
    }

    /**
     * Get the packagePath property: Path for embedded child package. Type: string (or Expression with resultType
     * string).
     * 
     * @return the packagePath value.
     */
    public Object getPackagePath() {
        return this.packagePath;
    }

    /**
     * Set the packagePath property: Path for embedded child package. Type: string (or Expression with resultType
     * string).
     * 
     * @param packagePath the packagePath value to set.
     * @return the SsisChildPackage object itself.
     */
    public SsisChildPackage setPackagePath(Object packagePath) {
        this.packagePath = packagePath;
        return this;
    }

    /**
     * Get the packageName property: Name for embedded child package.
     * 
     * @return the packageName value.
     */
    public String getPackageName() {
        return this.packageName;
    }

    /**
     * Set the packageName property: Name for embedded child package.
     * 
     * @param packageName the packageName value to set.
     * @return the SsisChildPackage object itself.
     */
    public SsisChildPackage setPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }

    /**
     * Get the packageContent property: Content for embedded child package. Type: string (or Expression with resultType
     * string).
     * 
     * @return the packageContent value.
     */
    public Object getPackageContent() {
        return this.packageContent;
    }

    /**
     * Set the packageContent property: Content for embedded child package. Type: string (or Expression with resultType
     * string).
     * 
     * @param packageContent the packageContent value to set.
     * @return the SsisChildPackage object itself.
     */
    public SsisChildPackage setPackageContent(Object packageContent) {
        this.packageContent = packageContent;
        return this;
    }

    /**
     * Get the packageLastModifiedDate property: Last modified date for embedded child package.
     * 
     * @return the packageLastModifiedDate value.
     */
    public String getPackageLastModifiedDate() {
        return this.packageLastModifiedDate;
    }

    /**
     * Set the packageLastModifiedDate property: Last modified date for embedded child package.
     * 
     * @param packageLastModifiedDate the packageLastModifiedDate value to set.
     * @return the SsisChildPackage object itself.
     */
    public SsisChildPackage setPackageLastModifiedDate(String packageLastModifiedDate) {
        this.packageLastModifiedDate = packageLastModifiedDate;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("packagePath", this.packagePath);
        jsonWriter.writeUntypedField("packageContent", this.packageContent);
        jsonWriter.writeStringField("packageName", this.packageName);
        jsonWriter.writeStringField("packageLastModifiedDate", this.packageLastModifiedDate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SsisChildPackage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SsisChildPackage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SsisChildPackage.
     */
    public static SsisChildPackage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SsisChildPackage deserializedSsisChildPackage = new SsisChildPackage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packagePath".equals(fieldName)) {
                    deserializedSsisChildPackage.packagePath = reader.readUntyped();
                } else if ("packageContent".equals(fieldName)) {
                    deserializedSsisChildPackage.packageContent = reader.readUntyped();
                } else if ("packageName".equals(fieldName)) {
                    deserializedSsisChildPackage.packageName = reader.getString();
                } else if ("packageLastModifiedDate".equals(fieldName)) {
                    deserializedSsisChildPackage.packageLastModifiedDate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSsisChildPackage;
        });
    }
}
