// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Azure blob write settings.
 */
@Fluent
public final class AzureBlobStorageWriteSettings extends StoreWriteSettings {
    /*
     * The write setting type.
     */
    @Generated
    private String type = "AzureBlobStorageWriteSettings";

    /*
     * Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
     */
    @Generated
    private Object blockSizeInMB;

    /**
     * Creates an instance of AzureBlobStorageWriteSettings class.
     */
    @Generated
    public AzureBlobStorageWriteSettings() {
    }

    /**
     * Get the type property: The write setting type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the blockSizeInMB property: Indicates the block size(MB) when writing data to blob. Type: integer (or
     * Expression with resultType integer).
     * 
     * @return the blockSizeInMB value.
     */
    @Generated
    public Object getBlockSizeInMB() {
        return this.blockSizeInMB;
    }

    /**
     * Set the blockSizeInMB property: Indicates the block size(MB) when writing data to blob. Type: integer (or
     * Expression with resultType integer).
     * 
     * @param blockSizeInMB the blockSizeInMB value to set.
     * @return the AzureBlobStorageWriteSettings object itself.
     */
    @Generated
    public AzureBlobStorageWriteSettings setBlockSizeInMB(Object blockSizeInMB) {
        this.blockSizeInMB = blockSizeInMB;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureBlobStorageWriteSettings setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureBlobStorageWriteSettings setCopyBehavior(Object copyBehavior) {
        super.setCopyBehavior(copyBehavior);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureBlobStorageWriteSettings setMetadata(List<MetadataItem> metadata) {
        super.setMetadata(metadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (getMaxConcurrentConnections() != null) {
            jsonWriter.writeUntypedField("maxConcurrentConnections", getMaxConcurrentConnections());
        }
        if (getCopyBehavior() != null) {
            jsonWriter.writeUntypedField("copyBehavior", getCopyBehavior());
        }
        jsonWriter.writeArrayField("metadata", getMetadata(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type);
        if (this.blockSizeInMB != null) {
            jsonWriter.writeUntypedField("blockSizeInMB", this.blockSizeInMB);
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBlobStorageWriteSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBlobStorageWriteSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureBlobStorageWriteSettings.
     */
    @Generated
    public static AzureBlobStorageWriteSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBlobStorageWriteSettings deserializedAzureBlobStorageWriteSettings
                = new AzureBlobStorageWriteSettings();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedAzureBlobStorageWriteSettings.setMaxConcurrentConnections(reader.readUntyped());
                } else if ("copyBehavior".equals(fieldName)) {
                    deserializedAzureBlobStorageWriteSettings.setCopyBehavior(reader.readUntyped());
                } else if ("metadata".equals(fieldName)) {
                    List<MetadataItem> metadata = reader.readArray(reader1 -> MetadataItem.fromJson(reader1));
                    deserializedAzureBlobStorageWriteSettings.setMetadata(metadata);
                } else if ("type".equals(fieldName)) {
                    deserializedAzureBlobStorageWriteSettings.type = reader.getString();
                } else if ("blockSizeInMB".equals(fieldName)) {
                    deserializedAzureBlobStorageWriteSettings.blockSizeInMB = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedAzureBlobStorageWriteSettings.setAdditionalProperties(additionalProperties);

            return deserializedAzureBlobStorageWriteSettings;
        });
    }
}
