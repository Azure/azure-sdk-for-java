// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Table Storage linked service properties.
 */
@Fluent
public final class AzureTableStorageLinkedServiceTypeProperties extends AzureStorageLinkedServiceTypeProperties {
    /*
     * Table service endpoint of the Azure Table Storage resource. It is mutually exclusive with connectionString,
     * sasUri property.
     */
    @Generated
    private Object serviceEndpoint;

    /*
     * The credential reference containing authentication information.
     */
    @Generated
    private CredentialReference credential;

    /**
     * Creates an instance of AzureTableStorageLinkedServiceTypeProperties class.
     */
    @Generated
    public AzureTableStorageLinkedServiceTypeProperties() {
    }

    /**
     * Get the serviceEndpoint property: Table service endpoint of the Azure Table Storage resource. It is mutually
     * exclusive with connectionString, sasUri property.
     * 
     * @return the serviceEndpoint value.
     */
    @Generated
    public Object getServiceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Set the serviceEndpoint property: Table service endpoint of the Azure Table Storage resource. It is mutually
     * exclusive with connectionString, sasUri property.
     * 
     * @param serviceEndpoint the serviceEndpoint value to set.
     * @return the AzureTableStorageLinkedServiceTypeProperties object itself.
     */
    @Generated
    public AzureTableStorageLinkedServiceTypeProperties setServiceEndpoint(Object serviceEndpoint) {
        this.serviceEndpoint = serviceEndpoint;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    @Generated
    public CredentialReference getCredential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the AzureTableStorageLinkedServiceTypeProperties object itself.
     */
    @Generated
    public AzureTableStorageLinkedServiceTypeProperties setCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureTableStorageLinkedServiceTypeProperties setConnectionString(Object connectionString) {
        super.setConnectionString(connectionString);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureTableStorageLinkedServiceTypeProperties setAccountKey(AzureKeyVaultSecretReference accountKey) {
        super.setAccountKey(accountKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureTableStorageLinkedServiceTypeProperties setSasUri(Object sasUri) {
        super.setSasUri(sasUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureTableStorageLinkedServiceTypeProperties setSasToken(AzureKeyVaultSecretReference sasToken) {
        super.setSasToken(sasToken);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AzureTableStorageLinkedServiceTypeProperties setEncryptedCredential(String encryptedCredential) {
        super.setEncryptedCredential(encryptedCredential);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (getConnectionString() != null) {
            jsonWriter.writeUntypedField("connectionString", getConnectionString());
        }
        jsonWriter.writeJsonField("accountKey", getAccountKey());
        if (getSasUri() != null) {
            jsonWriter.writeUntypedField("sasUri", getSasUri());
        }
        jsonWriter.writeJsonField("sasToken", getSasToken());
        jsonWriter.writeStringField("encryptedCredential", getEncryptedCredential());
        if (this.serviceEndpoint != null) {
            jsonWriter.writeUntypedField("serviceEndpoint", this.serviceEndpoint);
        }
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureTableStorageLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureTableStorageLinkedServiceTypeProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureTableStorageLinkedServiceTypeProperties.
     */
    @Generated
    public static AzureTableStorageLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureTableStorageLinkedServiceTypeProperties deserializedAzureTableStorageLinkedServiceTypeProperties
                = new AzureTableStorageLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionString".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.setConnectionString(reader.readUntyped());
                } else if ("accountKey".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties
                        .setAccountKey(AzureKeyVaultSecretReference.fromJson(reader));
                } else if ("sasUri".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.setSasUri(reader.readUntyped());
                } else if ("sasToken".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties
                        .setSasToken(AzureKeyVaultSecretReference.fromJson(reader));
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.setEncryptedCredential(reader.getString());
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.serviceEndpoint = reader.readUntyped();
                } else if ("credential".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.credential
                        = CredentialReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureTableStorageLinkedServiceTypeProperties;
        });
    }
}
