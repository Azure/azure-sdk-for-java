// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request body structure for starting data flow debug session.
 */
@Fluent
public final class StartDataFlowDebugSessionRequest implements JsonSerializable<StartDataFlowDebugSessionRequest> {
    /*
     * The ID of data flow debug session.
     */
    private String sessionId;

    /*
     * Data flow instance.
     */
    private DataFlowResource dataFlow;

    /*
     * List of Data flows
     */
    private List<DataFlowResource> dataFlows;

    /*
     * List of datasets.
     */
    private List<DatasetResource> datasets;

    /*
     * List of linked services.
     */
    private List<LinkedServiceResource> linkedServices;

    /*
     * Staging info for debug session.
     */
    private Object staging;

    /*
     * Data flow debug settings.
     */
    private Object debugSettings;

    /*
     * The type of new Databricks cluster.
     */
    private Boolean incrementalDebug;

    /**
     * Creates an instance of StartDataFlowDebugSessionRequest class.
     */
    public StartDataFlowDebugSessionRequest() {
    }

    /**
     * Get the sessionId property: The ID of data flow debug session.
     * 
     * @return the sessionId value.
     */
    public String getSessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId property: The ID of data flow debug session.
     * 
     * @param sessionId the sessionId value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the dataFlow property: Data flow instance.
     * 
     * @return the dataFlow value.
     */
    public DataFlowResource getDataFlow() {
        return this.dataFlow;
    }

    /**
     * Set the dataFlow property: Data flow instance.
     * 
     * @param dataFlow the dataFlow value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setDataFlow(DataFlowResource dataFlow) {
        this.dataFlow = dataFlow;
        return this;
    }

    /**
     * Get the dataFlows property: List of Data flows.
     * 
     * @return the dataFlows value.
     */
    public List<DataFlowResource> getDataFlows() {
        return this.dataFlows;
    }

    /**
     * Set the dataFlows property: List of Data flows.
     * 
     * @param dataFlows the dataFlows value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setDataFlows(List<DataFlowResource> dataFlows) {
        this.dataFlows = dataFlows;
        return this;
    }

    /**
     * Get the datasets property: List of datasets.
     * 
     * @return the datasets value.
     */
    public List<DatasetResource> getDatasets() {
        return this.datasets;
    }

    /**
     * Set the datasets property: List of datasets.
     * 
     * @param datasets the datasets value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setDatasets(List<DatasetResource> datasets) {
        this.datasets = datasets;
        return this;
    }

    /**
     * Get the linkedServices property: List of linked services.
     * 
     * @return the linkedServices value.
     */
    public List<LinkedServiceResource> getLinkedServices() {
        return this.linkedServices;
    }

    /**
     * Set the linkedServices property: List of linked services.
     * 
     * @param linkedServices the linkedServices value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setLinkedServices(List<LinkedServiceResource> linkedServices) {
        this.linkedServices = linkedServices;
        return this;
    }

    /**
     * Get the staging property: Staging info for debug session.
     * 
     * @return the staging value.
     */
    public Object getStaging() {
        return this.staging;
    }

    /**
     * Set the staging property: Staging info for debug session.
     * 
     * @param staging the staging value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setStaging(Object staging) {
        this.staging = staging;
        return this;
    }

    /**
     * Get the debugSettings property: Data flow debug settings.
     * 
     * @return the debugSettings value.
     */
    public Object getDebugSettings() {
        return this.debugSettings;
    }

    /**
     * Set the debugSettings property: Data flow debug settings.
     * 
     * @param debugSettings the debugSettings value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setDebugSettings(Object debugSettings) {
        this.debugSettings = debugSettings;
        return this;
    }

    /**
     * Get the incrementalDebug property: The type of new Databricks cluster.
     * 
     * @return the incrementalDebug value.
     */
    public Boolean isIncrementalDebug() {
        return this.incrementalDebug;
    }

    /**
     * Set the incrementalDebug property: The type of new Databricks cluster.
     * 
     * @param incrementalDebug the incrementalDebug value to set.
     * @return the StartDataFlowDebugSessionRequest object itself.
     */
    public StartDataFlowDebugSessionRequest setIncrementalDebug(Boolean incrementalDebug) {
        this.incrementalDebug = incrementalDebug;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeJsonField("dataFlow", this.dataFlow);
        jsonWriter.writeArrayField("dataFlows", this.dataFlows, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("datasets", this.datasets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedServices", this.linkedServices,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("staging", this.staging);
        jsonWriter.writeUntypedField("debugSettings", this.debugSettings);
        jsonWriter.writeBooleanField("incrementalDebug", this.incrementalDebug);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StartDataFlowDebugSessionRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StartDataFlowDebugSessionRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StartDataFlowDebugSessionRequest.
     */
    public static StartDataFlowDebugSessionRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StartDataFlowDebugSessionRequest deserializedStartDataFlowDebugSessionRequest
                = new StartDataFlowDebugSessionRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sessionId".equals(fieldName)) {
                    deserializedStartDataFlowDebugSessionRequest.sessionId = reader.getString();
                } else if ("dataFlow".equals(fieldName)) {
                    deserializedStartDataFlowDebugSessionRequest.dataFlow = DataFlowResource.fromJson(reader);
                } else if ("dataFlows".equals(fieldName)) {
                    List<DataFlowResource> dataFlows = reader.readArray(reader1 -> DataFlowResource.fromJson(reader1));
                    deserializedStartDataFlowDebugSessionRequest.dataFlows = dataFlows;
                } else if ("datasets".equals(fieldName)) {
                    List<DatasetResource> datasets = reader.readArray(reader1 -> DatasetResource.fromJson(reader1));
                    deserializedStartDataFlowDebugSessionRequest.datasets = datasets;
                } else if ("linkedServices".equals(fieldName)) {
                    List<LinkedServiceResource> linkedServices
                        = reader.readArray(reader1 -> LinkedServiceResource.fromJson(reader1));
                    deserializedStartDataFlowDebugSessionRequest.linkedServices = linkedServices;
                } else if ("staging".equals(fieldName)) {
                    deserializedStartDataFlowDebugSessionRequest.staging = reader.readUntyped();
                } else if ("debugSettings".equals(fieldName)) {
                    deserializedStartDataFlowDebugSessionRequest.debugSettings = reader.readUntyped();
                } else if ("incrementalDebug".equals(fieldName)) {
                    deserializedStartDataFlowDebugSessionRequest.incrementalDebug
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStartDataFlowDebugSessionRequest;
        });
    }
}
