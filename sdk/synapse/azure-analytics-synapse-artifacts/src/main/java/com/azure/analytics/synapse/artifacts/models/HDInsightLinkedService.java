// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * HDInsight linked service.
 */
@Fluent
public class HDInsightLinkedService extends LinkedService {
    /*
     * Type of linked service.
     */
    private String type = "HDInsight";

    /*
     * HDInsight cluster URI. Type: string (or Expression with resultType string).
     */
    private Object clusterUri;

    /*
     * HDInsight cluster user name. Type: string (or Expression with resultType string).
     */
    private Object userName;

    /*
     * HDInsight cluster password.
     */
    private SecretBase password;

    /*
     * The Azure Storage linked service reference.
     */
    private LinkedServiceReference linkedServiceName;

    /*
     * A reference to the Azure SQL linked service that points to the HCatalog database.
     */
    private LinkedServiceReference hcatalogLinkedServiceName;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     */
    private Object encryptedCredential;

    /*
     * Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
     */
    private Object isEspEnabled;

    /*
     * Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
     */
    private Object fileSystem;

    /**
     * Creates an instance of HDInsightLinkedService class.
     */
    public HDInsightLinkedService() {
    }

    /**
     * Get the type property: Type of linked service.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the clusterUri property: HDInsight cluster URI. Type: string (or Expression with resultType string).
     * 
     * @return the clusterUri value.
     */
    public Object getClusterUri() {
        return this.clusterUri;
    }

    /**
     * Set the clusterUri property: HDInsight cluster URI. Type: string (or Expression with resultType string).
     * 
     * @param clusterUri the clusterUri value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setClusterUri(Object clusterUri) {
        this.clusterUri = clusterUri;
        return this;
    }

    /**
     * Get the userName property: HDInsight cluster user name. Type: string (or Expression with resultType string).
     * 
     * @return the userName value.
     */
    public Object getUserName() {
        return this.userName;
    }

    /**
     * Set the userName property: HDInsight cluster user name. Type: string (or Expression with resultType string).
     * 
     * @param userName the userName value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setUserName(Object userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get the password property: HDInsight cluster password.
     * 
     * @return the password value.
     */
    public SecretBase getPassword() {
        return this.password;
    }

    /**
     * Set the password property: HDInsight cluster password.
     * 
     * @param password the password value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the linkedServiceName property: The Azure Storage linked service reference.
     * 
     * @return the linkedServiceName value.
     */
    public LinkedServiceReference getLinkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * Set the linkedServiceName property: The Azure Storage linked service reference.
     * 
     * @param linkedServiceName the linkedServiceName value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setLinkedServiceName(LinkedServiceReference linkedServiceName) {
        this.linkedServiceName = linkedServiceName;
        return this;
    }

    /**
     * Get the hcatalogLinkedServiceName property: A reference to the Azure SQL linked service that points to the
     * HCatalog database.
     * 
     * @return the hcatalogLinkedServiceName value.
     */
    public LinkedServiceReference getHcatalogLinkedServiceName() {
        return this.hcatalogLinkedServiceName;
    }

    /**
     * Set the hcatalogLinkedServiceName property: A reference to the Azure SQL linked service that points to the
     * HCatalog database.
     * 
     * @param hcatalogLinkedServiceName the hcatalogLinkedServiceName value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setHcatalogLinkedServiceName(LinkedServiceReference hcatalogLinkedServiceName) {
        this.hcatalogLinkedServiceName = hcatalogLinkedServiceName;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @return the encryptedCredential value.
     */
    public Object getEncryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the isEspEnabled property: Specify if the HDInsight is created with ESP (Enterprise Security Package). Type:
     * Boolean.
     * 
     * @return the isEspEnabled value.
     */
    public Object getIsEspEnabled() {
        return this.isEspEnabled;
    }

    /**
     * Set the isEspEnabled property: Specify if the HDInsight is created with ESP (Enterprise Security Package). Type:
     * Boolean.
     * 
     * @param isEspEnabled the isEspEnabled value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setIsEspEnabled(Object isEspEnabled) {
        this.isEspEnabled = isEspEnabled;
        return this;
    }

    /**
     * Get the fileSystem property: Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type:
     * string (or Expression with resultType string).
     * 
     * @return the fileSystem value.
     */
    public Object getFileSystem() {
        return this.fileSystem;
    }

    /**
     * Set the fileSystem property: Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type:
     * string (or Expression with resultType string).
     * 
     * @param fileSystem the fileSystem value to set.
     * @return the HDInsightLinkedService object itself.
     */
    public HDInsightLinkedService setFileSystem(Object fileSystem) {
        this.fileSystem = fileSystem;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HDInsightLinkedService setConnectVia(IntegrationRuntimeReference connectVia) {
        super.setConnectVia(connectVia);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HDInsightLinkedService setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HDInsightLinkedService setParameters(Map<String, ParameterSpecification> parameters) {
        super.setParameters(parameters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HDInsightLinkedService setAnnotations(List<Object> annotations) {
        super.setAnnotations(annotations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connectVia", getConnectVia());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("parameters", getParameters(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("annotations", getAnnotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        if (clusterUri != null
            || userName != null
            || password != null
            || linkedServiceName != null
            || hcatalogLinkedServiceName != null
            || encryptedCredential != null
            || isEspEnabled != null
            || fileSystem != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeUntypedField("clusterUri", this.clusterUri);
            jsonWriter.writeUntypedField("userName", this.userName);
            jsonWriter.writeJsonField("password", this.password);
            jsonWriter.writeJsonField("linkedServiceName", this.linkedServiceName);
            jsonWriter.writeJsonField("hcatalogLinkedServiceName", this.hcatalogLinkedServiceName);
            jsonWriter.writeUntypedField("encryptedCredential", this.encryptedCredential);
            jsonWriter.writeUntypedField("isEspEnabled", this.isEspEnabled);
            jsonWriter.writeUntypedField("fileSystem", this.fileSystem);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HDInsightLinkedService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HDInsightLinkedService if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HDInsightLinkedService.
     */
    public static HDInsightLinkedService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HDInsightLinkedService deserializedHDInsightLinkedService = new HDInsightLinkedService();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectVia".equals(fieldName)) {
                    deserializedHDInsightLinkedService.setConnectVia(IntegrationRuntimeReference.fromJson(reader));
                } else if ("description".equals(fieldName)) {
                    deserializedHDInsightLinkedService.setDescription(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    Map<String, ParameterSpecification> parameters
                        = reader.readMap(reader1 -> ParameterSpecification.fromJson(reader1));
                    deserializedHDInsightLinkedService.setParameters(parameters);
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedHDInsightLinkedService.setAnnotations(annotations);
                } else if ("type".equals(fieldName)) {
                    deserializedHDInsightLinkedService.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("clusterUri".equals(fieldName)) {
                            deserializedHDInsightLinkedService.clusterUri = reader.readUntyped();
                        } else if ("userName".equals(fieldName)) {
                            deserializedHDInsightLinkedService.userName = reader.readUntyped();
                        } else if ("password".equals(fieldName)) {
                            deserializedHDInsightLinkedService.password = SecretBase.fromJson(reader);
                        } else if ("linkedServiceName".equals(fieldName)) {
                            deserializedHDInsightLinkedService.linkedServiceName
                                = LinkedServiceReference.fromJson(reader);
                        } else if ("hcatalogLinkedServiceName".equals(fieldName)) {
                            deserializedHDInsightLinkedService.hcatalogLinkedServiceName
                                = LinkedServiceReference.fromJson(reader);
                        } else if ("encryptedCredential".equals(fieldName)) {
                            deserializedHDInsightLinkedService.encryptedCredential = reader.readUntyped();
                        } else if ("isEspEnabled".equals(fieldName)) {
                            deserializedHDInsightLinkedService.isEspEnabled = reader.readUntyped();
                        } else if ("fileSystem".equals(fieldName)) {
                            deserializedHDInsightLinkedService.fileSystem = reader.readUntyped();
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedHDInsightLinkedService.setAdditionalProperties(additionalProperties);

            return deserializedHDInsightLinkedService;
        });
    }
}
