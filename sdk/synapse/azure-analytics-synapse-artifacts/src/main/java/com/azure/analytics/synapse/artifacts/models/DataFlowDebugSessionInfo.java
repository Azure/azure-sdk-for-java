// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Data flow debug session info.
 */
@Fluent
public final class DataFlowDebugSessionInfo implements JsonSerializable<DataFlowDebugSessionInfo> {
    /*
     * The name of the data flow.
     */
    private String dataFlowName;

    /*
     * Compute type of the cluster.
     */
    private String computeType;

    /*
     * Core count of the cluster.
     */
    private Integer coreCount;

    /*
     * Node count of the cluster. (deprecated property)
     */
    private Integer nodeCount;

    /*
     * Attached integration runtime name of data flow debug session.
     */
    private String integrationRuntimeName;

    /*
     * The ID of data flow debug session.
     */
    private String sessionId;

    /*
     * Start time of data flow debug session.
     */
    private String startTime;

    /*
     * Compute type of the cluster.
     */
    private Integer timeToLiveInMinutes;

    /*
     * Last activity time of data flow debug session.
     */
    private String lastActivityTime;

    /*
     * Data flow debug session info.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of DataFlowDebugSessionInfo class.
     */
    public DataFlowDebugSessionInfo() {
    }

    /**
     * Get the dataFlowName property: The name of the data flow.
     * 
     * @return the dataFlowName value.
     */
    public String getDataFlowName() {
        return this.dataFlowName;
    }

    /**
     * Set the dataFlowName property: The name of the data flow.
     * 
     * @param dataFlowName the dataFlowName value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setDataFlowName(String dataFlowName) {
        this.dataFlowName = dataFlowName;
        return this;
    }

    /**
     * Get the computeType property: Compute type of the cluster.
     * 
     * @return the computeType value.
     */
    public String getComputeType() {
        return this.computeType;
    }

    /**
     * Set the computeType property: Compute type of the cluster.
     * 
     * @param computeType the computeType value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setComputeType(String computeType) {
        this.computeType = computeType;
        return this;
    }

    /**
     * Get the coreCount property: Core count of the cluster.
     * 
     * @return the coreCount value.
     */
    public Integer getCoreCount() {
        return this.coreCount;
    }

    /**
     * Set the coreCount property: Core count of the cluster.
     * 
     * @param coreCount the coreCount value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setCoreCount(Integer coreCount) {
        this.coreCount = coreCount;
        return this;
    }

    /**
     * Get the nodeCount property: Node count of the cluster. (deprecated property).
     * 
     * @return the nodeCount value.
     */
    public Integer getNodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: Node count of the cluster. (deprecated property).
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setNodeCount(Integer nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Get the integrationRuntimeName property: Attached integration runtime name of data flow debug session.
     * 
     * @return the integrationRuntimeName value.
     */
    public String getIntegrationRuntimeName() {
        return this.integrationRuntimeName;
    }

    /**
     * Set the integrationRuntimeName property: Attached integration runtime name of data flow debug session.
     * 
     * @param integrationRuntimeName the integrationRuntimeName value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setIntegrationRuntimeName(String integrationRuntimeName) {
        this.integrationRuntimeName = integrationRuntimeName;
        return this;
    }

    /**
     * Get the sessionId property: The ID of data flow debug session.
     * 
     * @return the sessionId value.
     */
    public String getSessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId property: The ID of data flow debug session.
     * 
     * @param sessionId the sessionId value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the startTime property: Start time of data flow debug session.
     * 
     * @return the startTime value.
     */
    public String getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Start time of data flow debug session.
     * 
     * @param startTime the startTime value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the timeToLiveInMinutes property: Compute type of the cluster.
     * 
     * @return the timeToLiveInMinutes value.
     */
    public Integer getTimeToLiveInMinutes() {
        return this.timeToLiveInMinutes;
    }

    /**
     * Set the timeToLiveInMinutes property: Compute type of the cluster.
     * 
     * @param timeToLiveInMinutes the timeToLiveInMinutes value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setTimeToLiveInMinutes(Integer timeToLiveInMinutes) {
        this.timeToLiveInMinutes = timeToLiveInMinutes;
        return this;
    }

    /**
     * Get the lastActivityTime property: Last activity time of data flow debug session.
     * 
     * @return the lastActivityTime value.
     */
    public String getLastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Set the lastActivityTime property: Last activity time of data flow debug session.
     * 
     * @param lastActivityTime the lastActivityTime value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setLastActivityTime(String lastActivityTime) {
        this.lastActivityTime = lastActivityTime;
        return this;
    }

    /**
     * Get the additionalProperties property: Data flow debug session info.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Data flow debug session info.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the DataFlowDebugSessionInfo object itself.
     */
    public DataFlowDebugSessionInfo setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataFlowName", this.dataFlowName);
        jsonWriter.writeStringField("computeType", this.computeType);
        jsonWriter.writeNumberField("coreCount", this.coreCount);
        jsonWriter.writeNumberField("nodeCount", this.nodeCount);
        jsonWriter.writeStringField("integrationRuntimeName", this.integrationRuntimeName);
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeNumberField("timeToLiveInMinutes", this.timeToLiveInMinutes);
        jsonWriter.writeStringField("lastActivityTime", this.lastActivityTime);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataFlowDebugSessionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataFlowDebugSessionInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataFlowDebugSessionInfo.
     */
    public static DataFlowDebugSessionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataFlowDebugSessionInfo deserializedDataFlowDebugSessionInfo = new DataFlowDebugSessionInfo();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataFlowName".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.dataFlowName = reader.getString();
                } else if ("computeType".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.computeType = reader.getString();
                } else if ("coreCount".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.coreCount = reader.getNullable(JsonReader::getInt);
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.nodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("integrationRuntimeName".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.integrationRuntimeName = reader.getString();
                } else if ("sessionId".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.sessionId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.startTime = reader.getString();
                } else if ("timeToLiveInMinutes".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.timeToLiveInMinutes = reader.getNullable(JsonReader::getInt);
                } else if ("lastActivityTime".equals(fieldName)) {
                    deserializedDataFlowDebugSessionInfo.lastActivityTime = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedDataFlowDebugSessionInfo.additionalProperties = additionalProperties;

            return deserializedDataFlowDebugSessionInfo;
        });
    }
}
