// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Spark pool library version requirements
 * 
 * Library requirements for a Big Data pool powered by Apache Spark.
 */
@Fluent
public final class LibraryRequirements implements JsonSerializable<LibraryRequirements> {
    /*
     * The last update time of the library requirements file.
     */
    private OffsetDateTime time;

    /*
     * The library requirements.
     */
    private String content;

    /*
     * The filename of the library requirements file.
     */
    private String filename;

    /**
     * Creates an instance of LibraryRequirements class.
     */
    public LibraryRequirements() {
    }

    /**
     * Get the time property: The last update time of the library requirements file.
     * 
     * @return the time value.
     */
    public OffsetDateTime getTime() {
        return this.time;
    }

    /**
     * Get the content property: The library requirements.
     * 
     * @return the content value.
     */
    public String getContent() {
        return this.content;
    }

    /**
     * Set the content property: The library requirements.
     * 
     * @param content the content value to set.
     * @return the LibraryRequirements object itself.
     */
    public LibraryRequirements setContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the filename property: The filename of the library requirements file.
     * 
     * @return the filename value.
     */
    public String getFilename() {
        return this.filename;
    }

    /**
     * Set the filename property: The filename of the library requirements file.
     * 
     * @param filename the filename value to set.
     * @return the LibraryRequirements object itself.
     */
    public LibraryRequirements setFilename(String filename) {
        this.filename = filename;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("filename", this.filename);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LibraryRequirements from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LibraryRequirements if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LibraryRequirements.
     */
    public static LibraryRequirements fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LibraryRequirements deserializedLibraryRequirements = new LibraryRequirements();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("time".equals(fieldName)) {
                    deserializedLibraryRequirements.time
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("content".equals(fieldName)) {
                    deserializedLibraryRequirements.content = reader.getString();
                } else if ("filename".equals(fieldName)) {
                    deserializedLibraryRequirements.filename = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLibraryRequirements;
        });
    }
}
