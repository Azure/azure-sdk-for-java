// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Microsoft Fabric Warehouse linked service.
 */
@Fluent
public class WarehouseLinkedService extends LinkedService {
    /*
     * Type of linked service.
     */
    @Generated
    private String type = "Warehouse";

    /*
     * The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object artifactId;

    /*
     * The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object endpoint;

    /*
     * The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object workspaceId;

    /*
     * The authentication type to use.
     */
    @Generated
    private WarehouseAuthenticationType authenticationType;

    /*
     * The ID of the application used to authenticate against Microsoft Fabric Warehouse. Type: string (or Expression
     * with resultType string).
     */
    @Generated
    private Object servicePrincipalId;

    /*
     * The Key of the application used to authenticate against Microsoft Fabric Warehouse.
     */
    @Generated
    private SecretBase servicePrincipalKey;

    /*
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType
     * string).
     */
    @Generated
    private Object tenant;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    @Generated
    private String encryptedCredential;

    /*
     * The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for
     * key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object servicePrincipalCredentialType;

    /*
     * The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is
     * 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If
     * servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be
     * AzureKeyVaultSecretReference.
     */
    @Generated
    private SecretBase servicePrincipalCredential;

    /*
     * The credential reference containing authentication information.
     */
    @Generated
    private CredentialReference credential;

    /**
     * Creates an instance of WarehouseLinkedService class.
     */
    @Generated
    public WarehouseLinkedService() {
    }

    /**
     * Get the type property: Type of linked service.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the artifactId property: The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with
     * resultType string).
     * 
     * @return the artifactId value.
     */
    @Generated
    public Object getArtifactId() {
        return this.artifactId;
    }

    /**
     * Set the artifactId property: The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with
     * resultType string).
     * 
     * @param artifactId the artifactId value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setArtifactId(Object artifactId) {
        this.artifactId = artifactId;
        return this;
    }

    /**
     * Get the endpoint property: The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with
     * resultType string).
     * 
     * @return the endpoint value.
     */
    @Generated
    public Object getEndpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with
     * resultType string).
     * 
     * @param endpoint the endpoint value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setEndpoint(Object endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the workspaceId property: The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType
     * string).
     * 
     * @return the workspaceId value.
     */
    @Generated
    public Object getWorkspaceId() {
        return this.workspaceId;
    }

    /**
     * Set the workspaceId property: The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType
     * string).
     * 
     * @param workspaceId the workspaceId value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setWorkspaceId(Object workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * Get the authenticationType property: The authentication type to use.
     * 
     * @return the authenticationType value.
     */
    @Generated
    public WarehouseAuthenticationType getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The authentication type to use.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setAuthenticationType(WarehouseAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the servicePrincipalId property: The ID of the application used to authenticate against Microsoft Fabric
     * Warehouse. Type: string (or Expression with resultType string).
     * 
     * @return the servicePrincipalId value.
     */
    @Generated
    public Object getServicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Set the servicePrincipalId property: The ID of the application used to authenticate against Microsoft Fabric
     * Warehouse. Type: string (or Expression with resultType string).
     * 
     * @param servicePrincipalId the servicePrincipalId value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setServicePrincipalId(Object servicePrincipalId) {
        this.servicePrincipalId = servicePrincipalId;
        return this;
    }

    /**
     * Get the servicePrincipalKey property: The Key of the application used to authenticate against Microsoft Fabric
     * Warehouse.
     * 
     * @return the servicePrincipalKey value.
     */
    @Generated
    public SecretBase getServicePrincipalKey() {
        return this.servicePrincipalKey;
    }

    /**
     * Set the servicePrincipalKey property: The Key of the application used to authenticate against Microsoft Fabric
     * Warehouse.
     * 
     * @param servicePrincipalKey the servicePrincipalKey value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setServicePrincipalKey(SecretBase servicePrincipalKey) {
        this.servicePrincipalKey = servicePrincipalKey;
        return this;
    }

    /**
     * Get the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @return the tenant value.
     */
    @Generated
    public Object getTenant() {
        return this.tenant;
    }

    /**
     * Set the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @param tenant the tenant value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setTenant(Object tenant) {
        this.tenant = tenant;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    @Generated
    public String getEncryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the servicePrincipalCredentialType property: The service principal credential type to use in Server-To-Server
     * authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or
     * Expression with resultType string).
     * 
     * @return the servicePrincipalCredentialType value.
     */
    @Generated
    public Object getServicePrincipalCredentialType() {
        return this.servicePrincipalCredentialType;
    }

    /**
     * Set the servicePrincipalCredentialType property: The service principal credential type to use in Server-To-Server
     * authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or
     * Expression with resultType string).
     * 
     * @param servicePrincipalCredentialType the servicePrincipalCredentialType value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setServicePrincipalCredentialType(Object servicePrincipalCredentialType) {
        this.servicePrincipalCredentialType = servicePrincipalCredentialType;
        return this;
    }

    /**
     * Get the servicePrincipalCredential property: The credential of the service principal object in Azure Active
     * Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be
     * SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert',
     * servicePrincipalCredential can only be AzureKeyVaultSecretReference.
     * 
     * @return the servicePrincipalCredential value.
     */
    @Generated
    public SecretBase getServicePrincipalCredential() {
        return this.servicePrincipalCredential;
    }

    /**
     * Set the servicePrincipalCredential property: The credential of the service principal object in Azure Active
     * Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be
     * SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert',
     * servicePrincipalCredential can only be AzureKeyVaultSecretReference.
     * 
     * @param servicePrincipalCredential the servicePrincipalCredential value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setServicePrincipalCredential(SecretBase servicePrincipalCredential) {
        this.servicePrincipalCredential = servicePrincipalCredential;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    @Generated
    public CredentialReference getCredential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the WarehouseLinkedService object itself.
     */
    @Generated
    public WarehouseLinkedService setCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WarehouseLinkedService setVersion(String version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WarehouseLinkedService setConnectVia(IntegrationRuntimeReference connectVia) {
        super.setConnectVia(connectVia);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WarehouseLinkedService setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WarehouseLinkedService setParameters(Map<String, ParameterSpecification> parameters) {
        super.setParameters(parameters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WarehouseLinkedService setAnnotations(List<Object> annotations) {
        super.setAnnotations(annotations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", getVersion());
        jsonWriter.writeJsonField("connectVia", getConnectVia());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("parameters", getParameters(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("annotations", getAnnotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        if (artifactId != null
            || endpoint != null
            || workspaceId != null
            || authenticationType != null
            || servicePrincipalId != null
            || servicePrincipalKey != null
            || tenant != null
            || encryptedCredential != null
            || servicePrincipalCredentialType != null
            || servicePrincipalCredential != null
            || credential != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeUntypedField("artifactId", this.artifactId);
            jsonWriter.writeUntypedField("endpoint", this.endpoint);
            if (this.workspaceId != null) {
                jsonWriter.writeUntypedField("workspaceId", this.workspaceId);
            }
            jsonWriter.writeStringField("authenticationType",
                this.authenticationType == null ? null : this.authenticationType.toString());
            if (this.servicePrincipalId != null) {
                jsonWriter.writeUntypedField("servicePrincipalId", this.servicePrincipalId);
            }
            jsonWriter.writeJsonField("servicePrincipalKey", this.servicePrincipalKey);
            if (this.tenant != null) {
                jsonWriter.writeUntypedField("tenant", this.tenant);
            }
            jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
            if (this.servicePrincipalCredentialType != null) {
                jsonWriter.writeUntypedField("servicePrincipalCredentialType", this.servicePrincipalCredentialType);
            }
            jsonWriter.writeJsonField("servicePrincipalCredential", this.servicePrincipalCredential);
            jsonWriter.writeJsonField("credential", this.credential);
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WarehouseLinkedService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WarehouseLinkedService if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WarehouseLinkedService.
     */
    @Generated
    public static WarehouseLinkedService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WarehouseLinkedService deserializedWarehouseLinkedService = new WarehouseLinkedService();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedWarehouseLinkedService.setVersion(reader.getString());
                } else if ("connectVia".equals(fieldName)) {
                    deserializedWarehouseLinkedService.setConnectVia(IntegrationRuntimeReference.fromJson(reader));
                } else if ("description".equals(fieldName)) {
                    deserializedWarehouseLinkedService.setDescription(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    Map<String, ParameterSpecification> parameters
                        = reader.readMap(reader1 -> ParameterSpecification.fromJson(reader1));
                    deserializedWarehouseLinkedService.setParameters(parameters);
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedWarehouseLinkedService.setAnnotations(annotations);
                } else if ("type".equals(fieldName)) {
                    deserializedWarehouseLinkedService.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("artifactId".equals(fieldName)) {
                            deserializedWarehouseLinkedService.artifactId = reader.readUntyped();
                        } else if ("endpoint".equals(fieldName)) {
                            deserializedWarehouseLinkedService.endpoint = reader.readUntyped();
                        } else if ("workspaceId".equals(fieldName)) {
                            deserializedWarehouseLinkedService.workspaceId = reader.readUntyped();
                        } else if ("authenticationType".equals(fieldName)) {
                            deserializedWarehouseLinkedService.authenticationType
                                = WarehouseAuthenticationType.fromString(reader.getString());
                        } else if ("servicePrincipalId".equals(fieldName)) {
                            deserializedWarehouseLinkedService.servicePrincipalId = reader.readUntyped();
                        } else if ("servicePrincipalKey".equals(fieldName)) {
                            deserializedWarehouseLinkedService.servicePrincipalKey = SecretBase.fromJson(reader);
                        } else if ("tenant".equals(fieldName)) {
                            deserializedWarehouseLinkedService.tenant = reader.readUntyped();
                        } else if ("encryptedCredential".equals(fieldName)) {
                            deserializedWarehouseLinkedService.encryptedCredential = reader.getString();
                        } else if ("servicePrincipalCredentialType".equals(fieldName)) {
                            deserializedWarehouseLinkedService.servicePrincipalCredentialType = reader.readUntyped();
                        } else if ("servicePrincipalCredential".equals(fieldName)) {
                            deserializedWarehouseLinkedService.servicePrincipalCredential = SecretBase.fromJson(reader);
                        } else if ("credential".equals(fieldName)) {
                            deserializedWarehouseLinkedService.credential = CredentialReference.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedWarehouseLinkedService.setAdditionalProperties(additionalProperties);

            return deserializedWarehouseLinkedService;
        });
    }
}
