// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Run notebook snapshot result.
 */
@Fluent
public final class RunNotebookSnapshotResult implements JsonSerializable<RunNotebookSnapshotResult> {
    /*
     * Run notebook snapshot.
     */
    private RunNotebookSnapshot snapshot;

    /*
     * Run notebook error.
     */
    private RunNotebookError error;

    /*
     * Run id.
     */
    private String runId;

    /*
     * Status of the run notebook.
     */
    private String runStatus;

    /*
     * Timestamp of last update.
     */
    private String lastCheckedOn;

    /*
     * Livy session id.
     */
    private String sessionId;

    /*
     * SparkPool name.
     */
    private String sparkPool;

    /**
     * Creates an instance of RunNotebookSnapshotResult class.
     */
    public RunNotebookSnapshotResult() {
    }

    /**
     * Get the snapshot property: Run notebook snapshot.
     * 
     * @return the snapshot value.
     */
    public RunNotebookSnapshot getSnapshot() {
        return this.snapshot;
    }

    /**
     * Set the snapshot property: Run notebook snapshot.
     * 
     * @param snapshot the snapshot value to set.
     * @return the RunNotebookSnapshotResult object itself.
     */
    public RunNotebookSnapshotResult setSnapshot(RunNotebookSnapshot snapshot) {
        this.snapshot = snapshot;
        return this;
    }

    /**
     * Get the error property: Run notebook error.
     * 
     * @return the error value.
     */
    public RunNotebookError getError() {
        return this.error;
    }

    /**
     * Set the error property: Run notebook error.
     * 
     * @param error the error value to set.
     * @return the RunNotebookSnapshotResult object itself.
     */
    public RunNotebookSnapshotResult setError(RunNotebookError error) {
        this.error = error;
        return this;
    }

    /**
     * Get the runId property: Run id.
     * 
     * @return the runId value.
     */
    public String getRunId() {
        return this.runId;
    }

    /**
     * Set the runId property: Run id.
     * 
     * @param runId the runId value to set.
     * @return the RunNotebookSnapshotResult object itself.
     */
    public RunNotebookSnapshotResult setRunId(String runId) {
        this.runId = runId;
        return this;
    }

    /**
     * Get the runStatus property: Status of the run notebook.
     * 
     * @return the runStatus value.
     */
    public String getRunStatus() {
        return this.runStatus;
    }

    /**
     * Set the runStatus property: Status of the run notebook.
     * 
     * @param runStatus the runStatus value to set.
     * @return the RunNotebookSnapshotResult object itself.
     */
    public RunNotebookSnapshotResult setRunStatus(String runStatus) {
        this.runStatus = runStatus;
        return this;
    }

    /**
     * Get the lastCheckedOn property: Timestamp of last update.
     * 
     * @return the lastCheckedOn value.
     */
    public String getLastCheckedOn() {
        return this.lastCheckedOn;
    }

    /**
     * Set the lastCheckedOn property: Timestamp of last update.
     * 
     * @param lastCheckedOn the lastCheckedOn value to set.
     * @return the RunNotebookSnapshotResult object itself.
     */
    public RunNotebookSnapshotResult setLastCheckedOn(String lastCheckedOn) {
        this.lastCheckedOn = lastCheckedOn;
        return this;
    }

    /**
     * Get the sessionId property: Livy session id.
     * 
     * @return the sessionId value.
     */
    public String getSessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId property: Livy session id.
     * 
     * @param sessionId the sessionId value to set.
     * @return the RunNotebookSnapshotResult object itself.
     */
    public RunNotebookSnapshotResult setSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the sparkPool property: SparkPool name.
     * 
     * @return the sparkPool value.
     */
    public String getSparkPool() {
        return this.sparkPool;
    }

    /**
     * Set the sparkPool property: SparkPool name.
     * 
     * @param sparkPool the sparkPool value to set.
     * @return the RunNotebookSnapshotResult object itself.
     */
    public RunNotebookSnapshotResult setSparkPool(String sparkPool) {
        this.sparkPool = sparkPool;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("snapshot", this.snapshot);
        jsonWriter.writeStringField("runId", this.runId);
        jsonWriter.writeStringField("runStatus", this.runStatus);
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("lastCheckedOn", this.lastCheckedOn);
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeStringField("sparkPool", this.sparkPool);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunNotebookSnapshotResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunNotebookSnapshotResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunNotebookSnapshotResult.
     */
    public static RunNotebookSnapshotResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunNotebookSnapshotResult deserializedRunNotebookSnapshotResult = new RunNotebookSnapshotResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("snapshot".equals(fieldName)) {
                    deserializedRunNotebookSnapshotResult.snapshot = RunNotebookSnapshot.fromJson(reader);
                } else if ("runId".equals(fieldName)) {
                    deserializedRunNotebookSnapshotResult.runId = reader.getString();
                } else if ("runStatus".equals(fieldName)) {
                    deserializedRunNotebookSnapshotResult.runStatus = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedRunNotebookSnapshotResult.error = RunNotebookError.fromJson(reader);
                } else if ("lastCheckedOn".equals(fieldName)) {
                    deserializedRunNotebookSnapshotResult.lastCheckedOn = reader.getString();
                } else if ("sessionId".equals(fieldName)) {
                    deserializedRunNotebookSnapshotResult.sessionId = reader.getString();
                } else if ("sparkPool".equals(fieldName)) {
                    deserializedRunNotebookSnapshotResult.sparkPool = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunNotebookSnapshotResult;
        });
    }
}
