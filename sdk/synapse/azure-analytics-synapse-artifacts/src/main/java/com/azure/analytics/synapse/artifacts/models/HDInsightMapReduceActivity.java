// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * HDInsight MapReduce activity type.
 */
@Fluent
public class HDInsightMapReduceActivity extends ExecutionActivity {
    /*
     * Type of activity.
     */
    @Generated
    private String type = "HDInsightMapReduce";

    /*
     * Storage linked service references.
     */
    @Generated
    private List<LinkedServiceReference> storageLinkedServices;

    /*
     * User specified arguments to HDInsightActivity.
     */
    @Generated
    private List<Object> arguments;

    /*
     * Debug info option.
     */
    @Generated
    private HDInsightActivityDebugInfoOption getDebugInfo;

    /*
     * Class name. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object className;

    /*
     * Jar path. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object jarFilePath;

    /*
     * Jar linked service reference.
     */
    @Generated
    private LinkedServiceReference jarLinkedService;

    /*
     * Jar libs.
     */
    @Generated
    private List<Object> jarLibs;

    /*
     * Allows user to specify defines for the MapReduce job request.
     */
    @Generated
    private Map<String, Object> defines;

    /**
     * Creates an instance of HDInsightMapReduceActivity class.
     */
    @Generated
    public HDInsightMapReduceActivity() {
    }

    /**
     * Get the type property: Type of activity.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the storageLinkedServices property: Storage linked service references.
     * 
     * @return the storageLinkedServices value.
     */
    @Generated
    public List<LinkedServiceReference> getStorageLinkedServices() {
        return this.storageLinkedServices;
    }

    /**
     * Set the storageLinkedServices property: Storage linked service references.
     * 
     * @param storageLinkedServices the storageLinkedServices value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setStorageLinkedServices(List<LinkedServiceReference> storageLinkedServices) {
        this.storageLinkedServices = storageLinkedServices;
        return this;
    }

    /**
     * Get the arguments property: User specified arguments to HDInsightActivity.
     * 
     * @return the arguments value.
     */
    @Generated
    public List<Object> getArguments() {
        return this.arguments;
    }

    /**
     * Set the arguments property: User specified arguments to HDInsightActivity.
     * 
     * @param arguments the arguments value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setArguments(List<Object> arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the getDebugInfo property: Debug info option.
     * 
     * @return the getDebugInfo value.
     */
    @Generated
    public HDInsightActivityDebugInfoOption getGetDebugInfo() {
        return this.getDebugInfo;
    }

    /**
     * Set the getDebugInfo property: Debug info option.
     * 
     * @param getDebugInfo the getDebugInfo value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setGetDebugInfo(HDInsightActivityDebugInfoOption getDebugInfo) {
        this.getDebugInfo = getDebugInfo;
        return this;
    }

    /**
     * Get the className property: Class name. Type: string (or Expression with resultType string).
     * 
     * @return the className value.
     */
    @Generated
    public Object getClassName() {
        return this.className;
    }

    /**
     * Set the className property: Class name. Type: string (or Expression with resultType string).
     * 
     * @param className the className value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setClassName(Object className) {
        this.className = className;
        return this;
    }

    /**
     * Get the jarFilePath property: Jar path. Type: string (or Expression with resultType string).
     * 
     * @return the jarFilePath value.
     */
    @Generated
    public Object getJarFilePath() {
        return this.jarFilePath;
    }

    /**
     * Set the jarFilePath property: Jar path. Type: string (or Expression with resultType string).
     * 
     * @param jarFilePath the jarFilePath value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setJarFilePath(Object jarFilePath) {
        this.jarFilePath = jarFilePath;
        return this;
    }

    /**
     * Get the jarLinkedService property: Jar linked service reference.
     * 
     * @return the jarLinkedService value.
     */
    @Generated
    public LinkedServiceReference getJarLinkedService() {
        return this.jarLinkedService;
    }

    /**
     * Set the jarLinkedService property: Jar linked service reference.
     * 
     * @param jarLinkedService the jarLinkedService value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setJarLinkedService(LinkedServiceReference jarLinkedService) {
        this.jarLinkedService = jarLinkedService;
        return this;
    }

    /**
     * Get the jarLibs property: Jar libs.
     * 
     * @return the jarLibs value.
     */
    @Generated
    public List<Object> getJarLibs() {
        return this.jarLibs;
    }

    /**
     * Set the jarLibs property: Jar libs.
     * 
     * @param jarLibs the jarLibs value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setJarLibs(List<Object> jarLibs) {
        this.jarLibs = jarLibs;
        return this;
    }

    /**
     * Get the defines property: Allows user to specify defines for the MapReduce job request.
     * 
     * @return the defines value.
     */
    @Generated
    public Map<String, Object> getDefines() {
        return this.defines;
    }

    /**
     * Set the defines property: Allows user to specify defines for the MapReduce job request.
     * 
     * @param defines the defines value to set.
     * @return the HDInsightMapReduceActivity object itself.
     */
    @Generated
    public HDInsightMapReduceActivity setDefines(Map<String, Object> defines) {
        this.defines = defines;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setLinkedServiceName(LinkedServiceReference linkedServiceName) {
        super.setLinkedServiceName(linkedServiceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setPolicy(ActivityPolicy policy) {
        super.setPolicy(policy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setState(ActivityState state) {
        super.setState(state);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setOnInactiveMarkAs(ActivityOnInactiveMarkAs onInactiveMarkAs) {
        super.setOnInactiveMarkAs(onInactiveMarkAs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setDependsOn(List<ActivityDependency> dependsOn) {
        super.setDependsOn(dependsOn);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public HDInsightMapReduceActivity setUserProperties(List<UserProperty> userProperties) {
        super.setUserProperties(userProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("state", getState() == null ? null : getState().toString());
        jsonWriter.writeStringField("onInactiveMarkAs",
            getOnInactiveMarkAs() == null ? null : getOnInactiveMarkAs().toString());
        jsonWriter.writeArrayField("dependsOn", getDependsOn(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("userProperties", getUserProperties(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("linkedServiceName", getLinkedServiceName());
        jsonWriter.writeJsonField("policy", getPolicy());
        jsonWriter.writeStringField("type", this.type);
        if (storageLinkedServices != null
            || arguments != null
            || getDebugInfo != null
            || className != null
            || jarFilePath != null
            || jarLinkedService != null
            || jarLibs != null
            || defines != null) {
            jsonWriter.writeStartObject("typeProperties");
            jsonWriter.writeArrayField("storageLinkedServices", this.storageLinkedServices,
                (writer, element) -> writer.writeJson(element));
            jsonWriter.writeArrayField("arguments", this.arguments, (writer, element) -> writer.writeUntyped(element));
            jsonWriter.writeStringField("getDebugInfo",
                this.getDebugInfo == null ? null : this.getDebugInfo.toString());
            jsonWriter.writeUntypedField("className", this.className);
            jsonWriter.writeUntypedField("jarFilePath", this.jarFilePath);
            jsonWriter.writeJsonField("jarLinkedService", this.jarLinkedService);
            jsonWriter.writeArrayField("jarLibs", this.jarLibs, (writer, element) -> writer.writeUntyped(element));
            jsonWriter.writeMapField("defines", this.defines, (writer, element) -> writer.writeUntyped(element));
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HDInsightMapReduceActivity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HDInsightMapReduceActivity if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HDInsightMapReduceActivity.
     */
    @Generated
    public static HDInsightMapReduceActivity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HDInsightMapReduceActivity deserializedHDInsightMapReduceActivity = new HDInsightMapReduceActivity();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedHDInsightMapReduceActivity.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedHDInsightMapReduceActivity.setDescription(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedHDInsightMapReduceActivity.setState(ActivityState.fromString(reader.getString()));
                } else if ("onInactiveMarkAs".equals(fieldName)) {
                    deserializedHDInsightMapReduceActivity
                        .setOnInactiveMarkAs(ActivityOnInactiveMarkAs.fromString(reader.getString()));
                } else if ("dependsOn".equals(fieldName)) {
                    List<ActivityDependency> dependsOn
                        = reader.readArray(reader1 -> ActivityDependency.fromJson(reader1));
                    deserializedHDInsightMapReduceActivity.setDependsOn(dependsOn);
                } else if ("userProperties".equals(fieldName)) {
                    List<UserProperty> userProperties = reader.readArray(reader1 -> UserProperty.fromJson(reader1));
                    deserializedHDInsightMapReduceActivity.setUserProperties(userProperties);
                } else if ("linkedServiceName".equals(fieldName)) {
                    deserializedHDInsightMapReduceActivity
                        .setLinkedServiceName(LinkedServiceReference.fromJson(reader));
                } else if ("policy".equals(fieldName)) {
                    deserializedHDInsightMapReduceActivity.setPolicy(ActivityPolicy.fromJson(reader));
                } else if ("type".equals(fieldName)) {
                    deserializedHDInsightMapReduceActivity.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("storageLinkedServices".equals(fieldName)) {
                            List<LinkedServiceReference> storageLinkedServices
                                = reader.readArray(reader1 -> LinkedServiceReference.fromJson(reader1));
                            deserializedHDInsightMapReduceActivity.storageLinkedServices = storageLinkedServices;
                        } else if ("arguments".equals(fieldName)) {
                            List<Object> arguments = reader.readArray(reader1 -> reader1.readUntyped());
                            deserializedHDInsightMapReduceActivity.arguments = arguments;
                        } else if ("getDebugInfo".equals(fieldName)) {
                            deserializedHDInsightMapReduceActivity.getDebugInfo
                                = HDInsightActivityDebugInfoOption.fromString(reader.getString());
                        } else if ("className".equals(fieldName)) {
                            deserializedHDInsightMapReduceActivity.className = reader.readUntyped();
                        } else if ("jarFilePath".equals(fieldName)) {
                            deserializedHDInsightMapReduceActivity.jarFilePath = reader.readUntyped();
                        } else if ("jarLinkedService".equals(fieldName)) {
                            deserializedHDInsightMapReduceActivity.jarLinkedService
                                = LinkedServiceReference.fromJson(reader);
                        } else if ("jarLibs".equals(fieldName)) {
                            List<Object> jarLibs = reader.readArray(reader1 -> reader1.readUntyped());
                            deserializedHDInsightMapReduceActivity.jarLibs = jarLibs;
                        } else if ("defines".equals(fieldName)) {
                            Map<String, Object> defines = reader.readMap(reader1 -> reader1.readUntyped());
                            deserializedHDInsightMapReduceActivity.defines = defines;
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedHDInsightMapReduceActivity.setAdditionalProperties(additionalProperties);

            return deserializedHDInsightMapReduceActivity;
        });
    }
}
