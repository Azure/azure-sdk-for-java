// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LinkConnectionCompute model.
 */
@Fluent
public final class LinkConnectionCompute implements JsonSerializable<LinkConnectionCompute> {
    /*
     * Compute core count used by the link connection
     */
    private Integer coreCount;

    /*
     * Link connection's compute type
     */
    private String computeType;

    /*
     * Link connection's data process interval in minutes
     */
    private Integer dataProcessIntervalMinutes;

    /**
     * Creates an instance of LinkConnectionCompute class.
     */
    public LinkConnectionCompute() {
    }

    /**
     * Get the coreCount property: Compute core count used by the link connection.
     * 
     * @return the coreCount value.
     */
    public Integer getCoreCount() {
        return this.coreCount;
    }

    /**
     * Set the coreCount property: Compute core count used by the link connection.
     * 
     * @param coreCount the coreCount value to set.
     * @return the LinkConnectionCompute object itself.
     */
    public LinkConnectionCompute setCoreCount(Integer coreCount) {
        this.coreCount = coreCount;
        return this;
    }

    /**
     * Get the computeType property: Link connection's compute type.
     * 
     * @return the computeType value.
     */
    public String getComputeType() {
        return this.computeType;
    }

    /**
     * Set the computeType property: Link connection's compute type.
     * 
     * @param computeType the computeType value to set.
     * @return the LinkConnectionCompute object itself.
     */
    public LinkConnectionCompute setComputeType(String computeType) {
        this.computeType = computeType;
        return this;
    }

    /**
     * Get the dataProcessIntervalMinutes property: Link connection's data process interval in minutes.
     * 
     * @return the dataProcessIntervalMinutes value.
     */
    public Integer getDataProcessIntervalMinutes() {
        return this.dataProcessIntervalMinutes;
    }

    /**
     * Set the dataProcessIntervalMinutes property: Link connection's data process interval in minutes.
     * 
     * @param dataProcessIntervalMinutes the dataProcessIntervalMinutes value to set.
     * @return the LinkConnectionCompute object itself.
     */
    public LinkConnectionCompute setDataProcessIntervalMinutes(Integer dataProcessIntervalMinutes) {
        this.dataProcessIntervalMinutes = dataProcessIntervalMinutes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("coreCount", this.coreCount);
        jsonWriter.writeStringField("computeType", this.computeType);
        jsonWriter.writeNumberField("dataProcessIntervalMinutes", this.dataProcessIntervalMinutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkConnectionCompute from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkConnectionCompute if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkConnectionCompute.
     */
    public static LinkConnectionCompute fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkConnectionCompute deserializedLinkConnectionCompute = new LinkConnectionCompute();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("coreCount".equals(fieldName)) {
                    deserializedLinkConnectionCompute.coreCount = reader.getNullable(JsonReader::getInt);
                } else if ("computeType".equals(fieldName)) {
                    deserializedLinkConnectionCompute.computeType = reader.getString();
                } else if ("dataProcessIntervalMinutes".equals(fieldName)) {
                    deserializedLinkConnectionCompute.dataProcessIntervalMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkConnectionCompute;
        });
    }
}
