// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure SQL Managed Instance linked service properties.
 */
@Fluent
public final class AzureSqlMILinkedServiceTypeProperties extends SqlServerBaseLinkedServiceTypeProperties {
    /*
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    private Object connectionString;

    /*
     * The type used for authentication. Type: string.
     */
    private AzureSqlMIAuthenticationType authenticationType;

    /*
     * The user name to be used when connecting to server. Type: string (or Expression with resultType string).
     */
    private Object userName;

    /*
     * The Azure key vault secret reference of password in connection string.
     */
    private AzureKeyVaultSecretReference password;

    /*
     * The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or
     * Expression with resultType string).
     */
    private Object servicePrincipalId;

    /*
     * The key of the service principal used to authenticate against Azure SQL Managed Instance.
     */
    private SecretBase servicePrincipalKey;

    /*
     * The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for
     * key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
     */
    private Object servicePrincipalCredentialType;

    /*
     * The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is
     * 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If
     * servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be
     * AzureKeyVaultSecretReference.
     */
    private SecretBase servicePrincipalCredential;

    /*
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType
     * string).
     */
    private Object tenant;

    /*
     * Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina,
     * AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type. Type: string (or
     * Expression with resultType string).
     */
    private Object azureCloudType;

    /*
     * Sql always encrypted properties.
     */
    private SqlAlwaysEncryptedProperties alwaysEncryptedSettings;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string (or Expression with resultType string).
     */
    private Object encryptedCredential;

    /*
     * The credential reference containing authentication information.
     */
    private CredentialReference credential;

    /**
     * Creates an instance of AzureSqlMILinkedServiceTypeProperties class.
     */
    public AzureSqlMILinkedServiceTypeProperties() {
    }

    /**
     * Get the connectionString property: The connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @return the connectionString value.
     */
    public Object getConnectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @param connectionString the connectionString value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the authenticationType property: The type used for authentication. Type: string.
     * 
     * @return the authenticationType value.
     */
    public AzureSqlMIAuthenticationType getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The type used for authentication. Type: string.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties
        setAuthenticationType(AzureSqlMIAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the userName property: The user name to be used when connecting to server. Type: string (or Expression with
     * resultType string).
     * 
     * @return the userName value.
     */
    public Object getUserName() {
        return this.userName;
    }

    /**
     * Set the userName property: The user name to be used when connecting to server. Type: string (or Expression with
     * resultType string).
     * 
     * @param userName the userName value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setUserName(Object userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @return the password value.
     */
    public AzureKeyVaultSecretReference getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @param password the password value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setPassword(AzureKeyVaultSecretReference password) {
        this.password = password;
        return this;
    }

    /**
     * Get the servicePrincipalId property: The ID of the service principal used to authenticate against Azure SQL
     * Managed Instance. Type: string (or Expression with resultType string).
     * 
     * @return the servicePrincipalId value.
     */
    public Object getServicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Set the servicePrincipalId property: The ID of the service principal used to authenticate against Azure SQL
     * Managed Instance. Type: string (or Expression with resultType string).
     * 
     * @param servicePrincipalId the servicePrincipalId value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setServicePrincipalId(Object servicePrincipalId) {
        this.servicePrincipalId = servicePrincipalId;
        return this;
    }

    /**
     * Get the servicePrincipalKey property: The key of the service principal used to authenticate against Azure SQL
     * Managed Instance.
     * 
     * @return the servicePrincipalKey value.
     */
    public SecretBase getServicePrincipalKey() {
        return this.servicePrincipalKey;
    }

    /**
     * Set the servicePrincipalKey property: The key of the service principal used to authenticate against Azure SQL
     * Managed Instance.
     * 
     * @param servicePrincipalKey the servicePrincipalKey value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setServicePrincipalKey(SecretBase servicePrincipalKey) {
        this.servicePrincipalKey = servicePrincipalKey;
        return this;
    }

    /**
     * Get the servicePrincipalCredentialType property: The service principal credential type to use in Server-To-Server
     * authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or
     * Expression with resultType string).
     * 
     * @return the servicePrincipalCredentialType value.
     */
    public Object getServicePrincipalCredentialType() {
        return this.servicePrincipalCredentialType;
    }

    /**
     * Set the servicePrincipalCredentialType property: The service principal credential type to use in Server-To-Server
     * authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or
     * Expression with resultType string).
     * 
     * @param servicePrincipalCredentialType the servicePrincipalCredentialType value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties
        setServicePrincipalCredentialType(Object servicePrincipalCredentialType) {
        this.servicePrincipalCredentialType = servicePrincipalCredentialType;
        return this;
    }

    /**
     * Get the servicePrincipalCredential property: The credential of the service principal object in Azure Active
     * Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be
     * SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert',
     * servicePrincipalCredential can only be AzureKeyVaultSecretReference.
     * 
     * @return the servicePrincipalCredential value.
     */
    public SecretBase getServicePrincipalCredential() {
        return this.servicePrincipalCredential;
    }

    /**
     * Set the servicePrincipalCredential property: The credential of the service principal object in Azure Active
     * Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be
     * SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert',
     * servicePrincipalCredential can only be AzureKeyVaultSecretReference.
     * 
     * @param servicePrincipalCredential the servicePrincipalCredential value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setServicePrincipalCredential(SecretBase servicePrincipalCredential) {
        this.servicePrincipalCredential = servicePrincipalCredential;
        return this;
    }

    /**
     * Get the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @return the tenant value.
     */
    public Object getTenant() {
        return this.tenant;
    }

    /**
     * Set the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @param tenant the tenant value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setTenant(Object tenant) {
        this.tenant = tenant;
        return this;
    }

    /**
     * Get the azureCloudType property: Indicates the azure cloud type of the service principle auth. Allowed values are
     * AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type.
     * Type: string (or Expression with resultType string).
     * 
     * @return the azureCloudType value.
     */
    public Object getAzureCloudType() {
        return this.azureCloudType;
    }

    /**
     * Set the azureCloudType property: Indicates the azure cloud type of the service principle auth. Allowed values are
     * AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type.
     * Type: string (or Expression with resultType string).
     * 
     * @param azureCloudType the azureCloudType value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setAzureCloudType(Object azureCloudType) {
        this.azureCloudType = azureCloudType;
        return this;
    }

    /**
     * Get the alwaysEncryptedSettings property: Sql always encrypted properties.
     * 
     * @return the alwaysEncryptedSettings value.
     */
    public SqlAlwaysEncryptedProperties getAlwaysEncryptedSettings() {
        return this.alwaysEncryptedSettings;
    }

    /**
     * Set the alwaysEncryptedSettings property: Sql always encrypted properties.
     * 
     * @param alwaysEncryptedSettings the alwaysEncryptedSettings value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties
        setAlwaysEncryptedSettings(SqlAlwaysEncryptedProperties alwaysEncryptedSettings) {
        this.alwaysEncryptedSettings = alwaysEncryptedSettings;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @return the encryptedCredential value.
     */
    public Object getEncryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    public CredentialReference getCredential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties setCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setServer(Object server) {
        super.setServer(server);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setDatabase(Object database) {
        super.setDatabase(database);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setEncrypt(Object encrypt) {
        super.setEncrypt(encrypt);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setTrustServerCertificate(Object trustServerCertificate) {
        super.setTrustServerCertificate(trustServerCertificate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setHostNameInCertificate(Object hostNameInCertificate) {
        super.setHostNameInCertificate(hostNameInCertificate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setApplicationIntent(Object applicationIntent) {
        super.setApplicationIntent(applicationIntent);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setConnectTimeout(Object connectTimeout) {
        super.setConnectTimeout(connectTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setConnectRetryCount(Object connectRetryCount) {
        super.setConnectRetryCount(connectRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setConnectRetryInterval(Object connectRetryInterval) {
        super.setConnectRetryInterval(connectRetryInterval);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setLoadBalanceTimeout(Object loadBalanceTimeout) {
        super.setLoadBalanceTimeout(loadBalanceTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setCommandTimeout(Object commandTimeout) {
        super.setCommandTimeout(commandTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setIntegratedSecurity(Object integratedSecurity) {
        super.setIntegratedSecurity(integratedSecurity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setFailoverPartner(Object failoverPartner) {
        super.setFailoverPartner(failoverPartner);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setMaxPoolSize(Object maxPoolSize) {
        super.setMaxPoolSize(maxPoolSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setMinPoolSize(Object minPoolSize) {
        super.setMinPoolSize(minPoolSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setMultipleActiveResultSets(Object multipleActiveResultSets) {
        super.setMultipleActiveResultSets(multipleActiveResultSets);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setMultiSubnetFailover(Object multiSubnetFailover) {
        super.setMultiSubnetFailover(multiSubnetFailover);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setPacketSize(Object packetSize) {
        super.setPacketSize(packetSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties setPooling(Object pooling) {
        super.setPooling(pooling);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("server", getServer());
        jsonWriter.writeUntypedField("database", getDatabase());
        jsonWriter.writeUntypedField("encrypt", getEncrypt());
        jsonWriter.writeUntypedField("trustServerCertificate", getTrustServerCertificate());
        jsonWriter.writeUntypedField("hostNameInCertificate", getHostNameInCertificate());
        jsonWriter.writeUntypedField("applicationIntent", getApplicationIntent());
        jsonWriter.writeUntypedField("connectTimeout", getConnectTimeout());
        jsonWriter.writeUntypedField("connectRetryCount", getConnectRetryCount());
        jsonWriter.writeUntypedField("connectRetryInterval", getConnectRetryInterval());
        jsonWriter.writeUntypedField("loadBalanceTimeout", getLoadBalanceTimeout());
        jsonWriter.writeUntypedField("commandTimeout", getCommandTimeout());
        jsonWriter.writeUntypedField("integratedSecurity", getIntegratedSecurity());
        jsonWriter.writeUntypedField("failoverPartner", getFailoverPartner());
        jsonWriter.writeUntypedField("maxPoolSize", getMaxPoolSize());
        jsonWriter.writeUntypedField("minPoolSize", getMinPoolSize());
        jsonWriter.writeUntypedField("multipleActiveResultSets", getMultipleActiveResultSets());
        jsonWriter.writeUntypedField("multiSubnetFailover", getMultiSubnetFailover());
        jsonWriter.writeUntypedField("packetSize", getPacketSize());
        jsonWriter.writeUntypedField("pooling", getPooling());
        jsonWriter.writeUntypedField("connectionString", this.connectionString);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        jsonWriter.writeUntypedField("userName", this.userName);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeUntypedField("servicePrincipalId", this.servicePrincipalId);
        jsonWriter.writeJsonField("servicePrincipalKey", this.servicePrincipalKey);
        jsonWriter.writeUntypedField("servicePrincipalCredentialType", this.servicePrincipalCredentialType);
        jsonWriter.writeJsonField("servicePrincipalCredential", this.servicePrincipalCredential);
        jsonWriter.writeUntypedField("tenant", this.tenant);
        jsonWriter.writeUntypedField("azureCloudType", this.azureCloudType);
        jsonWriter.writeJsonField("alwaysEncryptedSettings", this.alwaysEncryptedSettings);
        jsonWriter.writeUntypedField("encryptedCredential", this.encryptedCredential);
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSqlMILinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSqlMILinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSqlMILinkedServiceTypeProperties.
     */
    public static AzureSqlMILinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSqlMILinkedServiceTypeProperties deserializedAzureSqlMILinkedServiceTypeProperties
                = new AzureSqlMILinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setServer(reader.readUntyped());
                } else if ("database".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setDatabase(reader.readUntyped());
                } else if ("encrypt".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setEncrypt(reader.readUntyped());
                } else if ("trustServerCertificate".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setTrustServerCertificate(reader.readUntyped());
                } else if ("hostNameInCertificate".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setHostNameInCertificate(reader.readUntyped());
                } else if ("applicationIntent".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setApplicationIntent(reader.readUntyped());
                } else if ("connectTimeout".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setConnectTimeout(reader.readUntyped());
                } else if ("connectRetryCount".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setConnectRetryCount(reader.readUntyped());
                } else if ("connectRetryInterval".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setConnectRetryInterval(reader.readUntyped());
                } else if ("loadBalanceTimeout".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setLoadBalanceTimeout(reader.readUntyped());
                } else if ("commandTimeout".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setCommandTimeout(reader.readUntyped());
                } else if ("integratedSecurity".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setIntegratedSecurity(reader.readUntyped());
                } else if ("failoverPartner".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setFailoverPartner(reader.readUntyped());
                } else if ("maxPoolSize".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setMaxPoolSize(reader.readUntyped());
                } else if ("minPoolSize".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setMinPoolSize(reader.readUntyped());
                } else if ("multipleActiveResultSets".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setMultipleActiveResultSets(reader.readUntyped());
                } else if ("multiSubnetFailover".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setMultiSubnetFailover(reader.readUntyped());
                } else if ("packetSize".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setPacketSize(reader.readUntyped());
                } else if ("pooling".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.setPooling(reader.readUntyped());
                } else if ("connectionString".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.connectionString = reader.readUntyped();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.authenticationType
                        = AzureSqlMIAuthenticationType.fromString(reader.getString());
                } else if ("userName".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.userName = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.password
                        = AzureKeyVaultSecretReference.fromJson(reader);
                } else if ("servicePrincipalId".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalId = reader.readUntyped();
                } else if ("servicePrincipalKey".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalKey = SecretBase.fromJson(reader);
                } else if ("servicePrincipalCredentialType".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalCredentialType
                        = reader.readUntyped();
                } else if ("servicePrincipalCredential".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalCredential
                        = SecretBase.fromJson(reader);
                } else if ("tenant".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.tenant = reader.readUntyped();
                } else if ("azureCloudType".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.azureCloudType = reader.readUntyped();
                } else if ("alwaysEncryptedSettings".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.alwaysEncryptedSettings
                        = SqlAlwaysEncryptedProperties.fromJson(reader);
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.encryptedCredential = reader.readUntyped();
                } else if ("credential".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.credential = CredentialReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSqlMILinkedServiceTypeProperties;
        });
    }
}
