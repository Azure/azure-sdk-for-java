// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts;

import com.azure.analytics.synapse.artifacts.implementation.RunNotebooksImpl;
import com.azure.analytics.synapse.artifacts.models.CloudErrorException;
import com.azure.analytics.synapse.artifacts.models.RunNotebookRequest;
import com.azure.analytics.synapse.artifacts.models.RunNotebookResponse;
import com.azure.analytics.synapse.artifacts.models.RunNotebookSnapshotResponse;
import com.azure.analytics.synapse.artifacts.models.RunNotebooksCreateRunResponse;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ArtifactsClient type. */
@ServiceClient(builder = ArtifactsClientBuilder.class, isAsync = true)
public final class RunNotebookAsyncClient {
    @Generated private final RunNotebooksImpl serviceClient;

    /**
     * Initializes an instance of RunNotebookAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    RunNotebookAsyncClient(RunNotebooksImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Run notebook.
     *
     * @param runId Notebook run id.
     * @param runNotebookRequest Run notebook request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunNotebooksCreateRunResponse> createRunWithResponse(
            String runId, RunNotebookRequest runNotebookRequest) {
        return this.serviceClient.createRunWithResponseAsync(runId, runNotebookRequest);
    }

    /**
     * Run notebook.
     *
     * @param runId Notebook run id.
     * @param runNotebookRequest Run notebook request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunNotebookResponse> createRun(String runId, RunNotebookRequest runNotebookRequest) {
        return this.serviceClient.createRunAsync(runId, runNotebookRequest);
    }

    /**
     * Get RunNotebook Status for run id.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Status for run id along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RunNotebookResponse>> getStatusWithResponse(String runId) {
        return this.serviceClient.getStatusWithResponseAsync(runId);
    }

    /**
     * Get RunNotebook Status for run id.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Status for run id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunNotebookResponse> getStatus(String runId) {
        return this.serviceClient.getStatusAsync(runId);
    }

    /**
     * Cancel notebook run.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RunNotebookResponse>> cancelRunWithResponse(String runId) {
        return this.serviceClient.cancelRunWithResponseAsync(runId);
    }

    /**
     * Cancel notebook run.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run notebook response on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunNotebookResponse> cancelRun(String runId) {
        return this.serviceClient.cancelRunAsync(runId);
    }

    /**
     * Get RunNotebook Snapshot for run id.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Snapshot for run id along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RunNotebookSnapshotResponse>> getSnapshotWithResponse(String runId) {
        return this.serviceClient.getSnapshotWithResponseAsync(runId);
    }

    /**
     * Get RunNotebook Snapshot for run id.
     *
     * @param runId Notebook run id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return runNotebook Snapshot for run id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunNotebookSnapshotResponse> getSnapshot(String runId) {
        return this.serviceClient.getSnapshotAsync(runId);
    }
}
