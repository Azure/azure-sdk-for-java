// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LinkConnectionLandingZone model.
 */
@Fluent
public final class LinkConnectionLandingZone implements JsonSerializable<LinkConnectionLandingZone> {
    /*
     * Linked service reference
     */
    private LinkedServiceReference linkedService;

    /*
     * Landing zone's file system name
     */
    private String fileSystem;

    /*
     * Landing zone's folder path name
     */
    private String folderPath;

    /*
     * Landing zone's sas token
     */
    private SecureString sasToken;

    /**
     * Creates an instance of LinkConnectionLandingZone class.
     */
    public LinkConnectionLandingZone() {
    }

    /**
     * Get the linkedService property: Linked service reference.
     * 
     * @return the linkedService value.
     */
    public LinkedServiceReference getLinkedService() {
        return this.linkedService;
    }

    /**
     * Set the linkedService property: Linked service reference.
     * 
     * @param linkedService the linkedService value to set.
     * @return the LinkConnectionLandingZone object itself.
     */
    public LinkConnectionLandingZone setLinkedService(LinkedServiceReference linkedService) {
        this.linkedService = linkedService;
        return this;
    }

    /**
     * Get the fileSystem property: Landing zone's file system name.
     * 
     * @return the fileSystem value.
     */
    public String getFileSystem() {
        return this.fileSystem;
    }

    /**
     * Set the fileSystem property: Landing zone's file system name.
     * 
     * @param fileSystem the fileSystem value to set.
     * @return the LinkConnectionLandingZone object itself.
     */
    public LinkConnectionLandingZone setFileSystem(String fileSystem) {
        this.fileSystem = fileSystem;
        return this;
    }

    /**
     * Get the folderPath property: Landing zone's folder path name.
     * 
     * @return the folderPath value.
     */
    public String getFolderPath() {
        return this.folderPath;
    }

    /**
     * Set the folderPath property: Landing zone's folder path name.
     * 
     * @param folderPath the folderPath value to set.
     * @return the LinkConnectionLandingZone object itself.
     */
    public LinkConnectionLandingZone setFolderPath(String folderPath) {
        this.folderPath = folderPath;
        return this;
    }

    /**
     * Get the sasToken property: Landing zone's sas token.
     * 
     * @return the sasToken value.
     */
    public SecureString getSasToken() {
        return this.sasToken;
    }

    /**
     * Set the sasToken property: Landing zone's sas token.
     * 
     * @param sasToken the sasToken value to set.
     * @return the LinkConnectionLandingZone object itself.
     */
    public LinkConnectionLandingZone setSasToken(SecureString sasToken) {
        this.sasToken = sasToken;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("linkedService", this.linkedService);
        jsonWriter.writeStringField("fileSystem", this.fileSystem);
        jsonWriter.writeStringField("folderPath", this.folderPath);
        jsonWriter.writeJsonField("sasToken", this.sasToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkConnectionLandingZone from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkConnectionLandingZone if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkConnectionLandingZone.
     */
    public static LinkConnectionLandingZone fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkConnectionLandingZone deserializedLinkConnectionLandingZone = new LinkConnectionLandingZone();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedService".equals(fieldName)) {
                    deserializedLinkConnectionLandingZone.linkedService = LinkedServiceReference.fromJson(reader);
                } else if ("fileSystem".equals(fieldName)) {
                    deserializedLinkConnectionLandingZone.fileSystem = reader.getString();
                } else if ("folderPath".equals(fieldName)) {
                    deserializedLinkConnectionLandingZone.folderPath = reader.getString();
                } else if ("sasToken".equals(fieldName)) {
                    deserializedLinkConnectionLandingZone.sasToken = SecureString.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkConnectionLandingZone;
        });
    }
}
