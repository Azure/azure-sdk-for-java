// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity Salesforce V2 source.
 */
@Fluent
public final class SalesforceV2Source extends TabularSource {
    /*
     * Copy source type.
     */
    private String type = "SalesforceV2Source";

    /*
     * Deprecating, please use 'query' property instead. Type: string (or Expression with resultType string).
     */
    private Object soqlQuery;

    /*
     * You can only use Salesforce Object Query Language (SOQL) query with limitations. For SOQL limitations, see this
     * article:
     * https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/queries.htm#SOQL%20Considerations.
     * If query is not specified, all the data of the Salesforce object specified in ObjectApiName/reportId in dataset
     * will be retrieved. Type: string (or Expression with resultType string).
     */
    private Object query;

    /*
     * This property control whether query result contains Deleted objects. Default is false. Type: boolean (or
     * Expression with resultType boolean).
     */
    private Object includeDeletedObjects;

    /*
     * Page size for each http request, too large pageSize will caused timeout, default 300,000. Type: integer (or
     * Expression with resultType integer).
     */
    private Object pageSize;

    /**
     * Creates an instance of SalesforceV2Source class.
     */
    public SalesforceV2Source() {
    }

    /**
     * Get the type property: Copy source type.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the soqlQuery property: Deprecating, please use 'query' property instead. Type: string (or Expression with
     * resultType string).
     * 
     * @return the soqlQuery value.
     */
    public Object getSoqlQuery() {
        return this.soqlQuery;
    }

    /**
     * Set the soqlQuery property: Deprecating, please use 'query' property instead. Type: string (or Expression with
     * resultType string).
     * 
     * @param soqlQuery the soqlQuery value to set.
     * @return the SalesforceV2Source object itself.
     */
    public SalesforceV2Source setSoqlQuery(Object soqlQuery) {
        this.soqlQuery = soqlQuery;
        return this;
    }

    /**
     * Get the query property: You can only use Salesforce Object Query Language (SOQL) query with limitations. For SOQL
     * limitations, see this article:
     * https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/queries.htm#SOQL%20Considerations.
     * If query is not specified, all the data of the Salesforce object specified in ObjectApiName/reportId in dataset
     * will be retrieved. Type: string (or Expression with resultType string).
     * 
     * @return the query value.
     */
    public Object getQuery() {
        return this.query;
    }

    /**
     * Set the query property: You can only use Salesforce Object Query Language (SOQL) query with limitations. For SOQL
     * limitations, see this article:
     * https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/queries.htm#SOQL%20Considerations.
     * If query is not specified, all the data of the Salesforce object specified in ObjectApiName/reportId in dataset
     * will be retrieved. Type: string (or Expression with resultType string).
     * 
     * @param query the query value to set.
     * @return the SalesforceV2Source object itself.
     */
    public SalesforceV2Source setQuery(Object query) {
        this.query = query;
        return this;
    }

    /**
     * Get the includeDeletedObjects property: This property control whether query result contains Deleted objects.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the includeDeletedObjects value.
     */
    public Object getIncludeDeletedObjects() {
        return this.includeDeletedObjects;
    }

    /**
     * Set the includeDeletedObjects property: This property control whether query result contains Deleted objects.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param includeDeletedObjects the includeDeletedObjects value to set.
     * @return the SalesforceV2Source object itself.
     */
    public SalesforceV2Source setIncludeDeletedObjects(Object includeDeletedObjects) {
        this.includeDeletedObjects = includeDeletedObjects;
        return this;
    }

    /**
     * Get the pageSize property: Page size for each http request, too large pageSize will caused timeout, default
     * 300,000. Type: integer (or Expression with resultType integer).
     * 
     * @return the pageSize value.
     */
    public Object getPageSize() {
        return this.pageSize;
    }

    /**
     * Set the pageSize property: Page size for each http request, too large pageSize will caused timeout, default
     * 300,000. Type: integer (or Expression with resultType integer).
     * 
     * @param pageSize the pageSize value to set.
     * @return the SalesforceV2Source object itself.
     */
    public SalesforceV2Source setPageSize(Object pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SalesforceV2Source setQueryTimeout(Object queryTimeout) {
        super.setQueryTimeout(queryTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SalesforceV2Source setAdditionalColumns(Object additionalColumns) {
        super.setAdditionalColumns(additionalColumns);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SalesforceV2Source setSourceRetryCount(Object sourceRetryCount) {
        super.setSourceRetryCount(sourceRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SalesforceV2Source setSourceRetryWait(Object sourceRetryWait) {
        super.setSourceRetryWait(sourceRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SalesforceV2Source setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("sourceRetryCount", getSourceRetryCount());
        jsonWriter.writeUntypedField("sourceRetryWait", getSourceRetryWait());
        jsonWriter.writeUntypedField("maxConcurrentConnections", getMaxConcurrentConnections());
        jsonWriter.writeUntypedField("queryTimeout", getQueryTimeout());
        jsonWriter.writeUntypedField("additionalColumns", getAdditionalColumns());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeUntypedField("SOQLQuery", this.soqlQuery);
        jsonWriter.writeUntypedField("query", this.query);
        jsonWriter.writeUntypedField("includeDeletedObjects", this.includeDeletedObjects);
        jsonWriter.writeUntypedField("pageSize", this.pageSize);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SalesforceV2Source from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SalesforceV2Source if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SalesforceV2Source.
     */
    public static SalesforceV2Source fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SalesforceV2Source deserializedSalesforceV2Source = new SalesforceV2Source();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceRetryCount".equals(fieldName)) {
                    deserializedSalesforceV2Source.setSourceRetryCount(reader.readUntyped());
                } else if ("sourceRetryWait".equals(fieldName)) {
                    deserializedSalesforceV2Source.setSourceRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedSalesforceV2Source.setMaxConcurrentConnections(reader.readUntyped());
                } else if ("queryTimeout".equals(fieldName)) {
                    deserializedSalesforceV2Source.setQueryTimeout(reader.readUntyped());
                } else if ("additionalColumns".equals(fieldName)) {
                    deserializedSalesforceV2Source.setAdditionalColumns(reader.readUntyped());
                } else if ("type".equals(fieldName)) {
                    deserializedSalesforceV2Source.type = reader.getString();
                } else if ("SOQLQuery".equals(fieldName)) {
                    deserializedSalesforceV2Source.soqlQuery = reader.readUntyped();
                } else if ("query".equals(fieldName)) {
                    deserializedSalesforceV2Source.query = reader.readUntyped();
                } else if ("includeDeletedObjects".equals(fieldName)) {
                    deserializedSalesforceV2Source.includeDeletedObjects = reader.readUntyped();
                } else if ("pageSize".equals(fieldName)) {
                    deserializedSalesforceV2Source.pageSize = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSalesforceV2Source.setAdditionalProperties(additionalProperties);

            return deserializedSalesforceV2Source;
        });
    }
}
