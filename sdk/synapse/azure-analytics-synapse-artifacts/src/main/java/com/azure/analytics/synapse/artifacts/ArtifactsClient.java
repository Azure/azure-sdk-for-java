// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts;

import com.azure.analytics.synapse.artifacts.implementation.ArtifactsClientImpl;
import com.azure.analytics.synapse.artifacts.models.CloudErrorException;
import com.azure.analytics.synapse.artifacts.models.DDLBatch;
import com.azure.analytics.synapse.artifacts.models.DatabaseEntity;
import com.azure.analytics.synapse.artifacts.models.MDEntity;
import com.azure.analytics.synapse.artifacts.models.QueryArtifactsResponse;
import com.azure.analytics.synapse.artifacts.models.SASEntityType;
import com.azure.analytics.synapse.artifacts.models.SyMsapiddlResponse;
import com.azure.analytics.synapse.artifacts.models.SyMsapiddlResponses;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous ArtifactsClient type. */
@ServiceClient(builder = ArtifactsClientBuilder.class)
public final class ArtifactsClient {
    @Generated private final ArtifactsClientImpl serviceClient;

    /**
     * Initializes an instance of ArtifactsClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    ArtifactsClient(ArtifactsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param createArtifactsPayload DDLBatch payload containing artifact drafts to be created or deleted or modified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the publish response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SyMsapiddlResponses> executeChangeWithResponse(DDLBatch createArtifactsPayload, Context context) {
        return this.serviceClient.executeChangeWithResponse(createArtifactsPayload, context);
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param createArtifactsPayload DDLBatch payload containing artifact drafts to be created or deleted or modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the publish response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyMsapiddlResponses executeChange(DDLBatch createArtifactsPayload) {
        return this.serviceClient.executeChange(createArtifactsPayload);
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param validationType Validation Type - Currently only IDWValidation is supported.
     * @param createArtifactsPayload DDLBatch containing artifacts to be Created or Deleted or Modified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> executeChangeWithValidationWithResponse(
            String validationType, DDLBatch createArtifactsPayload, Context context) {
        return this.serviceClient.executeChangeWithValidationWithResponse(
                validationType, createArtifactsPayload, context);
    }

    /**
     * Batch execution of DDL Payload.
     *
     * <p>Batch execution of DDL Payload.
     *
     * @param validationType Validation Type - Currently only IDWValidation is supported.
     * @param createArtifactsPayload DDLBatch containing artifacts to be Created or Deleted or Modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void executeChangeWithValidation(String validationType, DDLBatch createArtifactsPayload) {
        this.serviceClient.executeChangeWithValidation(validationType, createArtifactsPayload);
    }

    /**
     * Get all databases in a workspace.
     *
     * <p>Get all databases in a workspace.
     *
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all databases in a workspace along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> listDatabasesWithResponse(
            String continuationToken, Long maxPageSize, Context context) {
        return this.serviceClient.listDatabasesWithResponse(continuationToken, maxPageSize, context);
    }

    /**
     * Get all databases in a workspace.
     *
     * <p>Get all databases in a workspace.
     *
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all databases in a workspace.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listDatabases(String continuationToken, Long maxPageSize) {
        return this.serviceClient.listDatabases(continuationToken, maxPageSize);
    }

    /**
     * Get all databases in a workspace.
     *
     * <p>Get all databases in a workspace.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all databases in a workspace.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listDatabases() {
        return this.serviceClient.listDatabases();
    }

    /**
     * List all Artifacts of a type in a database.
     *
     * <p>List all Artifacts of a type in a database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> listArtifactsWithResponse(
            String databaseName,
            SASEntityType artifactType,
            String continuationToken,
            Long maxPageSize,
            Context context) {
        return this.serviceClient.listArtifactsWithResponse(
                databaseName, artifactType, continuationToken, maxPageSize, context);
    }

    /**
     * List all Artifacts of a type in a database.
     *
     * <p>List all Artifacts of a type in a database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listArtifacts(
            String databaseName, SASEntityType artifactType, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listArtifacts(databaseName, artifactType, continuationToken, maxPageSize);
    }

    /**
     * List all Artifacts of a type in a database.
     *
     * <p>List all Artifacts of a type in a database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listArtifacts(String databaseName, SASEntityType artifactType) {
        return this.serviceClient.listArtifacts(databaseName, artifactType);
    }

    /**
     * List all artifacts in schema by type.
     *
     * <p>List all Artifacts in schema by type.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> listArtifactsInSchemaByTypeWithResponse(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String continuationToken,
            Long maxPageSize,
            Context context) {
        return this.serviceClient.listArtifactsInSchemaByTypeWithResponse(
                databaseName, schemaName, artifactType, continuationToken, maxPageSize, context);
    }

    /**
     * List all artifacts in schema by type.
     *
     * <p>List all Artifacts in schema by type.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listArtifactsInSchemaByType(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String continuationToken,
            Long maxPageSize) {
        return this.serviceClient.listArtifactsInSchemaByType(
                databaseName, schemaName, artifactType, continuationToken, maxPageSize);
    }

    /**
     * List all artifacts in schema by type.
     *
     * <p>List all Artifacts in schema by type.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listArtifactsInSchemaByType(
            String databaseName, String schemaName, SASEntityType artifactType) {
        return this.serviceClient.listArtifactsInSchemaByType(databaseName, schemaName, artifactType);
    }

    /**
     * List all partition information for a table.
     *
     * <p>List all partition information for a table.
     *
     * @param databaseName Database name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> listPartitionInfosForTableWithResponse(
            String databaseName, String tableName, String continuationToken, Long maxPageSize, Context context) {
        return this.serviceClient.listPartitionInfosForTableWithResponse(
                databaseName, tableName, continuationToken, maxPageSize, context);
    }

    /**
     * List all partition information for a table.
     *
     * <p>List all partition information for a table.
     *
     * @param databaseName Database name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForTable(
            String databaseName, String tableName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForTable(databaseName, tableName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a table.
     *
     * <p>List all partition information for a table.
     *
     * @param databaseName Database name.
     * @param tableName Table name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForTable(String databaseName, String tableName) {
        return this.serviceClient.listPartitionInfosForTable(databaseName, tableName);
    }

    /**
     * List all partition information for a view.
     *
     * <p>List all partition information for a view.
     *
     * @param databaseName Database name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> listPartitionInfosForViewWithResponse(
            String databaseName, String viewName, String continuationToken, Long maxPageSize, Context context) {
        return this.serviceClient.listPartitionInfosForViewWithResponse(
                databaseName, viewName, continuationToken, maxPageSize, context);
    }

    /**
     * List all partition information for a view.
     *
     * <p>List all partition information for a view.
     *
     * @param databaseName Database name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForView(
            String databaseName, String viewName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForView(databaseName, viewName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a view.
     *
     * <p>List all partition information for a view.
     *
     * @param databaseName Database name.
     * @param viewName View name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForView(String databaseName, String viewName) {
        return this.serviceClient.listPartitionInfosForView(databaseName, viewName);
    }

    /**
     * List all partition information for table in schema.
     *
     * <p>List all partition information for a table in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> listPartitionInfosForSchemaAndTableWithResponse(
            String databaseName,
            String schemaName,
            String tableName,
            String continuationToken,
            Long maxPageSize,
            Context context) {
        return this.serviceClient.listPartitionInfosForSchemaAndTableWithResponse(
                databaseName, schemaName, tableName, continuationToken, maxPageSize, context);
    }

    /**
     * List all partition information for table in schema.
     *
     * <p>List all partition information for a table in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param tableName Table name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForSchemaAndTable(
            String databaseName, String schemaName, String tableName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForSchemaAndTable(
                databaseName, schemaName, tableName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for table in schema.
     *
     * <p>List all partition information for a table in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param tableName Table name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForSchemaAndTable(
            String databaseName, String schemaName, String tableName) {
        return this.serviceClient.listPartitionInfosForSchemaAndTable(databaseName, schemaName, tableName);
    }

    /**
     * List all partition information for a view in schema.
     *
     * <p>List all partition information for a view in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> listPartitionInfosForSchemaAndViewWithResponse(
            String databaseName,
            String schemaName,
            String viewName,
            String continuationToken,
            Long maxPageSize,
            Context context) {
        return this.serviceClient.listPartitionInfosForSchemaAndViewWithResponse(
                databaseName, schemaName, viewName, continuationToken, maxPageSize, context);
    }

    /**
     * List all partition information for a view in schema.
     *
     * <p>List all partition information for a view in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param viewName View name.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForSchemaAndView(
            String databaseName, String schemaName, String viewName, String continuationToken, Long maxPageSize) {
        return this.serviceClient.listPartitionInfosForSchemaAndView(
                databaseName, schemaName, viewName, continuationToken, maxPageSize);
    }

    /**
     * List all partition information for a view in schema.
     *
     * <p>List all partition information for a view in schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param viewName View name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query artifacts response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse listPartitionInfosForSchemaAndView(
            String databaseName, String schemaName, String viewName) {
        return this.serviceClient.listPartitionInfosForSchemaAndView(databaseName, schemaName, viewName);
    }

    /**
     * Get details about a database.
     *
     * <p>Get details about a database.
     *
     * @param databaseName Database name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a database along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DatabaseEntity> getDatabaseWithResponse(String databaseName, Context context) {
        return this.serviceClient.getDatabaseWithResponse(databaseName, context);
    }

    /**
     * Get details about a database.
     *
     * <p>Get details about a database.
     *
     * @param databaseName Database name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a database.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseEntity getDatabase(String databaseName) {
        return this.serviceClient.getDatabase(databaseName);
    }

    /**
     * Put a database.
     *
     * <p>Put a database.
     *
     * @param databaseName Database name.
     * @param createArtifactsPayload Database entity payload to create or update a Database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SyMsapiddlResponse> putDatabaseWithResponse(
            String databaseName, DatabaseEntity createArtifactsPayload, Context context) {
        return this.serviceClient.putDatabaseWithResponse(databaseName, createArtifactsPayload, context);
    }

    /**
     * Put a database.
     *
     * <p>Put a database.
     *
     * @param databaseName Database name.
     * @param createArtifactsPayload Database entity payload to create or update a Database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyMsapiddlResponse putDatabase(String databaseName, DatabaseEntity createArtifactsPayload) {
        return this.serviceClient.putDatabase(databaseName, createArtifactsPayload);
    }

    /**
     * Delete a database.
     *
     * <p>Delete a database.
     *
     * @param databaseName Database name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDatabaseWithResponse(String databaseName, Context context) {
        return this.serviceClient.deleteDatabaseWithResponse(databaseName, context);
    }

    /**
     * Delete a database.
     *
     * <p>Delete a database.
     *
     * @param databaseName Database name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDatabase(String databaseName) {
        this.serviceClient.deleteDatabase(databaseName);
    }

    /**
     * Get an artifact from database.
     *
     * <p>Get an artifact from database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from database along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MDEntity> getArtifactFromDBWithResponse(
            String databaseName, SASEntityType artifactType, String artifactName, Context context) {
        return this.serviceClient.getArtifactFromDBWithResponse(databaseName, artifactType, artifactName, context);
    }

    /**
     * Get an artifact from database.
     *
     * <p>Get an artifact from database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from database.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MDEntity getArtifactFromDB(String databaseName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.getArtifactFromDB(databaseName, artifactType, artifactName);
    }

    /**
     * Put an artifact in a Database.
     *
     * <p>Put an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact entity to be created/modified.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SyMsapiddlResponse> putArtifactInDBWithResponse(
            String databaseName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload,
            String continuationToken,
            Long maxPageSize,
            Context context) {
        return this.serviceClient.putArtifactInDBWithResponse(
                databaseName,
                artifactType,
                artifactName,
                createArtifactsPayload,
                continuationToken,
                maxPageSize,
                context);
    }

    /**
     * Put an artifact in a Database.
     *
     * <p>Put an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact entity to be created/modified.
     * @param continuationToken Continuation token to get next page.
     * @param maxPageSize Max page size.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyMsapiddlResponse putArtifactInDB(
            String databaseName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload,
            String continuationToken,
            Long maxPageSize) {
        return this.serviceClient.putArtifactInDB(
                databaseName, artifactType, artifactName, createArtifactsPayload, continuationToken, maxPageSize);
    }

    /**
     * Put an artifact in a Database.
     *
     * <p>Put an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact entity to be created/modified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyMsapiddlResponse putArtifactInDB(
            String databaseName, SASEntityType artifactType, String artifactName, MDEntity createArtifactsPayload) {
        return this.serviceClient.putArtifactInDB(databaseName, artifactType, artifactName, createArtifactsPayload);
    }

    /**
     * Delete an artifact in a Database.
     *
     * <p>Delete an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteArtifactForDBWithResponse(
            String databaseName, SASEntityType artifactType, String artifactName, Context context) {
        return this.serviceClient.deleteArtifactForDBWithResponse(databaseName, artifactType, artifactName, context);
    }

    /**
     * Delete an artifact in a Database.
     *
     * <p>Delete an artifact in a Database.
     *
     * @param databaseName Database name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteArtifactForDB(String databaseName, SASEntityType artifactType, String artifactName) {
        this.serviceClient.deleteArtifactForDB(databaseName, artifactType, artifactName);
    }

    /**
     * Get an artifact from schema.
     *
     * <p>Get an artifact from schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from schema along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MDEntity> getArtifactFromSchemaWithResponse(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName, Context context) {
        return this.serviceClient.getArtifactFromSchemaWithResponse(
                databaseName, schemaName, artifactType, artifactName, context);
    }

    /**
     * Get an artifact from schema.
     *
     * <p>Get an artifact from schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an artifact from schema.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MDEntity getArtifactFromSchema(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName) {
        return this.serviceClient.getArtifactFromSchema(databaseName, schemaName, artifactType, artifactName);
    }

    /**
     * Create or Update an artifact in a schema.
     *
     * <p>Create or Update an artifact in a schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact object to be create/updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SyMsapiddlResponse> putArtifactInSchemaWithResponse(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload,
            Context context) {
        return this.serviceClient.putArtifactInSchemaWithResponse(
                databaseName, schemaName, artifactType, artifactName, createArtifactsPayload, context);
    }

    /**
     * Create or Update an artifact in a schema.
     *
     * <p>Create or Update an artifact in a schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param createArtifactsPayload Payload containing artifact object to be create/updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the response for create/publish operation on DDL payload.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyMsapiddlResponse putArtifactInSchema(
            String databaseName,
            String schemaName,
            SASEntityType artifactType,
            String artifactName,
            MDEntity createArtifactsPayload) {
        return this.serviceClient.putArtifactInSchema(
                databaseName, schemaName, artifactType, artifactName, createArtifactsPayload);
    }

    /**
     * Delete an artifact from Schema.
     *
     * <p>Delete an artifact from Schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteArtifactFromSchemaWithResponse(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName, Context context) {
        return this.serviceClient.deleteArtifactFromSchemaWithResponse(
                databaseName, schemaName, artifactType, artifactName, context);
    }

    /**
     * Delete an artifact from Schema.
     *
     * <p>Delete an artifact from Schema.
     *
     * @param databaseName Database name.
     * @param schemaName Schema name.
     * @param artifactType Artifact type.
     * @param artifactName Artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteArtifactFromSchema(
            String databaseName, String schemaName, SASEntityType artifactType, String artifactName) {
        this.serviceClient.deleteArtifactFromSchema(databaseName, schemaName, artifactType, artifactName);
    }

    /**
     * Get the status of validation by operation Id.
     *
     * <p>Get the status of validation by operation Id.
     *
     * @param operationId Operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of validation by operation Id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryArtifactsResponse> getSyMSOperationStatusWithResponse(String operationId, Context context) {
        return this.serviceClient.getSyMSOperationStatusWithResponse(operationId, context);
    }

    /**
     * Get the status of validation by operation Id.
     *
     * <p>Get the status of validation by operation Id.
     *
     * @param operationId Operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of validation by operation Id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryArtifactsResponse getSyMSOperationStatus(String operationId) {
        return this.serviceClient.getSyMSOperationStatus(operationId);
    }
}
