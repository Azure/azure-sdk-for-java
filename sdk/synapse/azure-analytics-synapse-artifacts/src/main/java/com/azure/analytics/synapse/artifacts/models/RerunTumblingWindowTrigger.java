// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/**
 * Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested
 * end time.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("RerunTumblingWindowTrigger")
@JsonFlatten
@Fluent
public class RerunTumblingWindowTrigger extends Trigger {
    /*
     * The parent trigger reference.
     */
    @JsonProperty(value = "typeProperties.parentTrigger", required = true)
    private Object parentTrigger;

    /*
     * The start time for the time period for which restatement is initiated.
     * Only UTC time is currently supported.
     */
    @JsonProperty(value = "typeProperties.requestedStartTime", required = true)
    private OffsetDateTime requestedStartTime;

    /*
     * The end time for the time period for which restatement is initiated.
     * Only UTC time is currently supported.
     */
    @JsonProperty(value = "typeProperties.requestedEndTime", required = true)
    private OffsetDateTime requestedEndTime;

    /*
     * The max number of parallel time windows (ready for execution) for which
     * a rerun is triggered.
     */
    @JsonProperty(value = "typeProperties.rerunConcurrency", required = true)
    private int rerunConcurrency;

    /**
     * Get the parentTrigger property: The parent trigger reference.
     *
     * @return the parentTrigger value.
     */
    public Object getParentTrigger() {
        return this.parentTrigger;
    }

    /**
     * Set the parentTrigger property: The parent trigger reference.
     *
     * @param parentTrigger the parentTrigger value to set.
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger setParentTrigger(Object parentTrigger) {
        this.parentTrigger = parentTrigger;
        return this;
    }

    /**
     * Get the requestedStartTime property: The start time for the time period for which restatement is initiated. Only
     * UTC time is currently supported.
     *
     * @return the requestedStartTime value.
     */
    public OffsetDateTime getRequestedStartTime() {
        return this.requestedStartTime;
    }

    /**
     * Set the requestedStartTime property: The start time for the time period for which restatement is initiated. Only
     * UTC time is currently supported.
     *
     * @param requestedStartTime the requestedStartTime value to set.
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger setRequestedStartTime(OffsetDateTime requestedStartTime) {
        this.requestedStartTime = requestedStartTime;
        return this;
    }

    /**
     * Get the requestedEndTime property: The end time for the time period for which restatement is initiated. Only UTC
     * time is currently supported.
     *
     * @return the requestedEndTime value.
     */
    public OffsetDateTime getRequestedEndTime() {
        return this.requestedEndTime;
    }

    /**
     * Set the requestedEndTime property: The end time for the time period for which restatement is initiated. Only UTC
     * time is currently supported.
     *
     * @param requestedEndTime the requestedEndTime value to set.
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger setRequestedEndTime(OffsetDateTime requestedEndTime) {
        this.requestedEndTime = requestedEndTime;
        return this;
    }

    /**
     * Get the rerunConcurrency property: The max number of parallel time windows (ready for execution) for which a
     * rerun is triggered.
     *
     * @return the rerunConcurrency value.
     */
    public int getRerunConcurrency() {
        return this.rerunConcurrency;
    }

    /**
     * Set the rerunConcurrency property: The max number of parallel time windows (ready for execution) for which a
     * rerun is triggered.
     *
     * @param rerunConcurrency the rerunConcurrency value to set.
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger setRerunConcurrency(int rerunConcurrency) {
        this.rerunConcurrency = rerunConcurrency;
        return this;
    }
}
