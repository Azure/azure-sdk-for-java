// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Activity dependency information.
 */
@Fluent
public final class ActivityDependency implements JsonSerializable<ActivityDependency> {
    /*
     * Activity name.
     */
    private String activity;

    /*
     * Match-Condition for the dependency.
     */
    private List<DependencyCondition> dependencyConditions;

    /*
     * Activity dependency information.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of ActivityDependency class.
     */
    public ActivityDependency() {
    }

    /**
     * Get the activity property: Activity name.
     * 
     * @return the activity value.
     */
    public String getActivity() {
        return this.activity;
    }

    /**
     * Set the activity property: Activity name.
     * 
     * @param activity the activity value to set.
     * @return the ActivityDependency object itself.
     */
    public ActivityDependency setActivity(String activity) {
        this.activity = activity;
        return this;
    }

    /**
     * Get the dependencyConditions property: Match-Condition for the dependency.
     * 
     * @return the dependencyConditions value.
     */
    public List<DependencyCondition> getDependencyConditions() {
        return this.dependencyConditions;
    }

    /**
     * Set the dependencyConditions property: Match-Condition for the dependency.
     * 
     * @param dependencyConditions the dependencyConditions value to set.
     * @return the ActivityDependency object itself.
     */
    public ActivityDependency setDependencyConditions(List<DependencyCondition> dependencyConditions) {
        this.dependencyConditions = dependencyConditions;
        return this;
    }

    /**
     * Get the additionalProperties property: Activity dependency information.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Activity dependency information.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the ActivityDependency object itself.
     */
    public ActivityDependency setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activity", this.activity);
        jsonWriter.writeArrayField("dependencyConditions", this.dependencyConditions,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActivityDependency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActivityDependency if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActivityDependency.
     */
    public static ActivityDependency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActivityDependency deserializedActivityDependency = new ActivityDependency();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activity".equals(fieldName)) {
                    deserializedActivityDependency.activity = reader.getString();
                } else if ("dependencyConditions".equals(fieldName)) {
                    List<DependencyCondition> dependencyConditions
                        = reader.readArray(reader1 -> DependencyCondition.fromString(reader1.getString()));
                    deserializedActivityDependency.dependencyConditions = dependencyConditions;
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedActivityDependency.additionalProperties = additionalProperties;

            return deserializedActivityDependency;
        });
    }
}
