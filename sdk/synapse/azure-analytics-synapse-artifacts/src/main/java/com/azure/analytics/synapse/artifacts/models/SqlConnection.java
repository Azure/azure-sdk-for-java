// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The connection used to execute the SQL script.
 */
@Fluent
public final class SqlConnection implements JsonSerializable<SqlConnection> {
    /*
     * The type of the connection.
     */
    private SqlConnectionType type;

    /*
     * The identifier of the connection.
     */
    private String name;

    /*
     * The associated SQL pool name (supported by SQL pool v3)
     */
    private String poolName;

    /*
     * The associated database name (supported by SQL pool v3)
     */
    private String databaseName;

    /*
     * The connection used to execute the SQL script.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of SqlConnection class.
     */
    public SqlConnection() {
    }

    /**
     * Get the type property: The type of the connection.
     * 
     * @return the type value.
     */
    public SqlConnectionType getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of the connection.
     * 
     * @param type the type value to set.
     * @return the SqlConnection object itself.
     */
    public SqlConnection setType(SqlConnectionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: The identifier of the connection.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The identifier of the connection.
     * 
     * @param name the name value to set.
     * @return the SqlConnection object itself.
     */
    public SqlConnection setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the poolName property: The associated SQL pool name (supported by SQL pool v3).
     * 
     * @return the poolName value.
     */
    public String getPoolName() {
        return this.poolName;
    }

    /**
     * Set the poolName property: The associated SQL pool name (supported by SQL pool v3).
     * 
     * @param poolName the poolName value to set.
     * @return the SqlConnection object itself.
     */
    public SqlConnection setPoolName(String poolName) {
        this.poolName = poolName;
        return this;
    }

    /**
     * Get the databaseName property: The associated database name (supported by SQL pool v3).
     * 
     * @return the databaseName value.
     */
    public String getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The associated database name (supported by SQL pool v3).
     * 
     * @param databaseName the databaseName value to set.
     * @return the SqlConnection object itself.
     */
    public SqlConnection setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the additionalProperties property: The connection used to execute the SQL script.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The connection used to execute the SQL script.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the SqlConnection object itself.
     */
    public SqlConnection setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("poolName", this.poolName);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlConnection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlConnection.
     */
    public static SqlConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlConnection deserializedSqlConnection = new SqlConnection();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSqlConnection.type = SqlConnectionType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedSqlConnection.name = reader.getString();
                } else if ("poolName".equals(fieldName)) {
                    deserializedSqlConnection.poolName = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedSqlConnection.databaseName = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSqlConnection.additionalProperties = additionalProperties;

            return deserializedSqlConnection;
        });
    }
}
