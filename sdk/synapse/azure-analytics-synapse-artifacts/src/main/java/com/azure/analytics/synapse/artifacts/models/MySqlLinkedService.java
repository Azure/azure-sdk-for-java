// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Linked service for MySQL data source.
 */
@Fluent
public class MySqlLinkedService extends LinkedService {
    /*
     * Type of linked service.
     */
    @Generated
    private String type = "MySql";

    /*
     * The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support
     * connection string and property bag, V2 can only support connection string.
     */
    @Generated
    private Object driverVersion;

    /*
     * The connection string.
     */
    @Generated
    private Object connectionString;

    /*
     * Server name for connection. Type: string.
     */
    @Generated
    private Object server;

    /*
     * The port for the connection. Type: integer.
     */
    @Generated
    private Object port;

    /*
     * Username for authentication. Type: string.
     */
    @Generated
    private Object username;

    /*
     * Database name for connection. Type: string.
     */
    @Generated
    private Object database;

    /*
     * SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3: verify-ca, 4: verify-full.
     */
    @Generated
    private Object sslMode;

    /*
     * Use system trust store for connection. Type: integer. 0: enable, 1: disable.
     */
    @Generated
    private Object useSystemTrustStore;

    /*
     * The Azure key vault secret reference of password in connection string.
     */
    @Generated
    private AzureKeyVaultSecretReference password;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object encryptedCredential;

    /*
     * This allows the special “zero” date value 0000-00-00 to be retrieved from the database. Type: boolean.
     */
    @Generated
    private Object allowZeroDateTime;

    /*
     * The length of time (in seconds) to wait for a connection to the server before terminating the attempt and
     * generating an error. Type: integer.
     */
    @Generated
    private Object connectionTimeout;

    /*
     * True to return DateTime.MinValue for date or datetime columns that have disallowed values. Type: boolean.
     */
    @Generated
    private Object convertZeroDateTime;

    /*
     * Determines which column type (if any) should be read as a GUID. Type: string. None: No column types are
     * automatically read as a Guid; Char36: All CHAR(36) columns are read/written as a Guid using lowercase hex with
     * hyphens, which matches UUID.
     */
    @Generated
    private Object guidFormat;

    /*
     * The path to the client’s SSL certificate file in PEM format. SslKey must also be specified. Type: string.
     */
    @Generated
    private Object sslCert;

    /*
     * The path to the client’s SSL private key in PEM format. SslCert must also be specified. Type: string.
     */
    @Generated
    private Object sslKey;

    /*
     * When set to true, TINYINT(1) values are returned as booleans. Type: bool.
     */
    @Generated
    private Object treatTinyAsBoolean;

    /**
     * Creates an instance of MySqlLinkedService class.
     */
    @Generated
    public MySqlLinkedService() {
    }

    /**
     * Get the type property: Type of linked service.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the driverVersion property: The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2
     * for new driver. V1 can support connection string and property bag, V2 can only support connection string.
     * 
     * @return the driverVersion value.
     */
    @Generated
    public Object getDriverVersion() {
        return this.driverVersion;
    }

    /**
     * Set the driverVersion property: The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2
     * for new driver. V1 can support connection string and property bag, V2 can only support connection string.
     * 
     * @param driverVersion the driverVersion value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setDriverVersion(Object driverVersion) {
        this.driverVersion = driverVersion;
        return this;
    }

    /**
     * Get the connectionString property: The connection string.
     * 
     * @return the connectionString value.
     */
    @Generated
    public Object getConnectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The connection string.
     * 
     * @param connectionString the connectionString value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the server property: Server name for connection. Type: string.
     * 
     * @return the server value.
     */
    @Generated
    public Object getServer() {
        return this.server;
    }

    /**
     * Set the server property: Server name for connection. Type: string.
     * 
     * @param server the server value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setServer(Object server) {
        this.server = server;
        return this;
    }

    /**
     * Get the port property: The port for the connection. Type: integer.
     * 
     * @return the port value.
     */
    @Generated
    public Object getPort() {
        return this.port;
    }

    /**
     * Set the port property: The port for the connection. Type: integer.
     * 
     * @param port the port value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setPort(Object port) {
        this.port = port;
        return this;
    }

    /**
     * Get the username property: Username for authentication. Type: string.
     * 
     * @return the username value.
     */
    @Generated
    public Object getUsername() {
        return this.username;
    }

    /**
     * Set the username property: Username for authentication. Type: string.
     * 
     * @param username the username value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the database property: Database name for connection. Type: string.
     * 
     * @return the database value.
     */
    @Generated
    public Object getDatabase() {
        return this.database;
    }

    /**
     * Set the database property: Database name for connection. Type: string.
     * 
     * @param database the database value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setDatabase(Object database) {
        this.database = database;
        return this;
    }

    /**
     * Get the sslMode property: SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3:
     * verify-ca, 4: verify-full.
     * 
     * @return the sslMode value.
     */
    @Generated
    public Object getSslMode() {
        return this.sslMode;
    }

    /**
     * Set the sslMode property: SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3:
     * verify-ca, 4: verify-full.
     * 
     * @param sslMode the sslMode value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setSslMode(Object sslMode) {
        this.sslMode = sslMode;
        return this;
    }

    /**
     * Get the useSystemTrustStore property: Use system trust store for connection. Type: integer. 0: enable, 1:
     * disable.
     * 
     * @return the useSystemTrustStore value.
     */
    @Generated
    public Object getUseSystemTrustStore() {
        return this.useSystemTrustStore;
    }

    /**
     * Set the useSystemTrustStore property: Use system trust store for connection. Type: integer. 0: enable, 1:
     * disable.
     * 
     * @param useSystemTrustStore the useSystemTrustStore value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setUseSystemTrustStore(Object useSystemTrustStore) {
        this.useSystemTrustStore = useSystemTrustStore;
        return this;
    }

    /**
     * Get the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @return the password value.
     */
    @Generated
    public AzureKeyVaultSecretReference getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @param password the password value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setPassword(AzureKeyVaultSecretReference password) {
        this.password = password;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @return the encryptedCredential value.
     */
    @Generated
    public Object getEncryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the allowZeroDateTime property: This allows the special “zero” date value 0000-00-00 to be retrieved from the
     * database. Type: boolean.
     * 
     * @return the allowZeroDateTime value.
     */
    @Generated
    public Object getAllowZeroDateTime() {
        return this.allowZeroDateTime;
    }

    /**
     * Set the allowZeroDateTime property: This allows the special “zero” date value 0000-00-00 to be retrieved from the
     * database. Type: boolean.
     * 
     * @param allowZeroDateTime the allowZeroDateTime value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setAllowZeroDateTime(Object allowZeroDateTime) {
        this.allowZeroDateTime = allowZeroDateTime;
        return this;
    }

    /**
     * Get the connectionTimeout property: The length of time (in seconds) to wait for a connection to the server before
     * terminating the attempt and generating an error. Type: integer.
     * 
     * @return the connectionTimeout value.
     */
    @Generated
    public Object getConnectionTimeout() {
        return this.connectionTimeout;
    }

    /**
     * Set the connectionTimeout property: The length of time (in seconds) to wait for a connection to the server before
     * terminating the attempt and generating an error. Type: integer.
     * 
     * @param connectionTimeout the connectionTimeout value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setConnectionTimeout(Object connectionTimeout) {
        this.connectionTimeout = connectionTimeout;
        return this;
    }

    /**
     * Get the convertZeroDateTime property: True to return DateTime.MinValue for date or datetime columns that have
     * disallowed values. Type: boolean.
     * 
     * @return the convertZeroDateTime value.
     */
    @Generated
    public Object getConvertZeroDateTime() {
        return this.convertZeroDateTime;
    }

    /**
     * Set the convertZeroDateTime property: True to return DateTime.MinValue for date or datetime columns that have
     * disallowed values. Type: boolean.
     * 
     * @param convertZeroDateTime the convertZeroDateTime value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setConvertZeroDateTime(Object convertZeroDateTime) {
        this.convertZeroDateTime = convertZeroDateTime;
        return this;
    }

    /**
     * Get the guidFormat property: Determines which column type (if any) should be read as a GUID. Type: string. None:
     * No column types are automatically read as a Guid; Char36: All CHAR(36) columns are read/written as a Guid using
     * lowercase hex with hyphens, which matches UUID.
     * 
     * @return the guidFormat value.
     */
    @Generated
    public Object getGuidFormat() {
        return this.guidFormat;
    }

    /**
     * Set the guidFormat property: Determines which column type (if any) should be read as a GUID. Type: string. None:
     * No column types are automatically read as a Guid; Char36: All CHAR(36) columns are read/written as a Guid using
     * lowercase hex with hyphens, which matches UUID.
     * 
     * @param guidFormat the guidFormat value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setGuidFormat(Object guidFormat) {
        this.guidFormat = guidFormat;
        return this;
    }

    /**
     * Get the sslCert property: The path to the client’s SSL certificate file in PEM format. SslKey must also be
     * specified. Type: string.
     * 
     * @return the sslCert value.
     */
    @Generated
    public Object getSslCert() {
        return this.sslCert;
    }

    /**
     * Set the sslCert property: The path to the client’s SSL certificate file in PEM format. SslKey must also be
     * specified. Type: string.
     * 
     * @param sslCert the sslCert value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setSslCert(Object sslCert) {
        this.sslCert = sslCert;
        return this;
    }

    /**
     * Get the sslKey property: The path to the client’s SSL private key in PEM format. SslCert must also be specified.
     * Type: string.
     * 
     * @return the sslKey value.
     */
    @Generated
    public Object getSslKey() {
        return this.sslKey;
    }

    /**
     * Set the sslKey property: The path to the client’s SSL private key in PEM format. SslCert must also be specified.
     * Type: string.
     * 
     * @param sslKey the sslKey value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setSslKey(Object sslKey) {
        this.sslKey = sslKey;
        return this;
    }

    /**
     * Get the treatTinyAsBoolean property: When set to true, TINYINT(1) values are returned as booleans. Type: bool.
     * 
     * @return the treatTinyAsBoolean value.
     */
    @Generated
    public Object getTreatTinyAsBoolean() {
        return this.treatTinyAsBoolean;
    }

    /**
     * Set the treatTinyAsBoolean property: When set to true, TINYINT(1) values are returned as booleans. Type: bool.
     * 
     * @param treatTinyAsBoolean the treatTinyAsBoolean value to set.
     * @return the MySqlLinkedService object itself.
     */
    @Generated
    public MySqlLinkedService setTreatTinyAsBoolean(Object treatTinyAsBoolean) {
        this.treatTinyAsBoolean = treatTinyAsBoolean;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MySqlLinkedService setVersion(String version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MySqlLinkedService setConnectVia(IntegrationRuntimeReference connectVia) {
        super.setConnectVia(connectVia);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MySqlLinkedService setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MySqlLinkedService setParameters(Map<String, ParameterSpecification> parameters) {
        super.setParameters(parameters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MySqlLinkedService setAnnotations(List<Object> annotations) {
        super.setAnnotations(annotations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", getVersion());
        jsonWriter.writeJsonField("connectVia", getConnectVia());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("parameters", getParameters(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("annotations", getAnnotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        if (driverVersion != null
            || connectionString != null
            || server != null
            || port != null
            || username != null
            || database != null
            || sslMode != null
            || useSystemTrustStore != null
            || password != null
            || encryptedCredential != null
            || allowZeroDateTime != null
            || connectionTimeout != null
            || convertZeroDateTime != null
            || guidFormat != null
            || sslCert != null
            || sslKey != null
            || treatTinyAsBoolean != null) {
            jsonWriter.writeStartObject("typeProperties");
            if (this.driverVersion != null) {
                jsonWriter.writeUntypedField("driverVersion", this.driverVersion);
            }
            if (this.connectionString != null) {
                jsonWriter.writeUntypedField("connectionString", this.connectionString);
            }
            if (this.server != null) {
                jsonWriter.writeUntypedField("server", this.server);
            }
            if (this.port != null) {
                jsonWriter.writeUntypedField("port", this.port);
            }
            if (this.username != null) {
                jsonWriter.writeUntypedField("username", this.username);
            }
            if (this.database != null) {
                jsonWriter.writeUntypedField("database", this.database);
            }
            if (this.sslMode != null) {
                jsonWriter.writeUntypedField("sslMode", this.sslMode);
            }
            if (this.useSystemTrustStore != null) {
                jsonWriter.writeUntypedField("useSystemTrustStore", this.useSystemTrustStore);
            }
            jsonWriter.writeJsonField("password", this.password);
            if (this.encryptedCredential != null) {
                jsonWriter.writeUntypedField("encryptedCredential", this.encryptedCredential);
            }
            if (this.allowZeroDateTime != null) {
                jsonWriter.writeUntypedField("allowZeroDateTime", this.allowZeroDateTime);
            }
            if (this.connectionTimeout != null) {
                jsonWriter.writeUntypedField("connectionTimeout", this.connectionTimeout);
            }
            if (this.convertZeroDateTime != null) {
                jsonWriter.writeUntypedField("convertZeroDateTime", this.convertZeroDateTime);
            }
            if (this.guidFormat != null) {
                jsonWriter.writeUntypedField("guidFormat", this.guidFormat);
            }
            if (this.sslCert != null) {
                jsonWriter.writeUntypedField("sslCert", this.sslCert);
            }
            if (this.sslKey != null) {
                jsonWriter.writeUntypedField("sslKey", this.sslKey);
            }
            if (this.treatTinyAsBoolean != null) {
                jsonWriter.writeUntypedField("treatTinyAsBoolean", this.treatTinyAsBoolean);
            }
            jsonWriter.writeEndObject();
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MySqlLinkedService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MySqlLinkedService if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MySqlLinkedService.
     */
    @Generated
    public static MySqlLinkedService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MySqlLinkedService deserializedMySqlLinkedService = new MySqlLinkedService();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedMySqlLinkedService.setVersion(reader.getString());
                } else if ("connectVia".equals(fieldName)) {
                    deserializedMySqlLinkedService.setConnectVia(IntegrationRuntimeReference.fromJson(reader));
                } else if ("description".equals(fieldName)) {
                    deserializedMySqlLinkedService.setDescription(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    Map<String, ParameterSpecification> parameters
                        = reader.readMap(reader1 -> ParameterSpecification.fromJson(reader1));
                    deserializedMySqlLinkedService.setParameters(parameters);
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedMySqlLinkedService.setAnnotations(annotations);
                } else if ("type".equals(fieldName)) {
                    deserializedMySqlLinkedService.type = reader.getString();
                } else if ("typeProperties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("driverVersion".equals(fieldName)) {
                            deserializedMySqlLinkedService.driverVersion = reader.readUntyped();
                        } else if ("connectionString".equals(fieldName)) {
                            deserializedMySqlLinkedService.connectionString = reader.readUntyped();
                        } else if ("server".equals(fieldName)) {
                            deserializedMySqlLinkedService.server = reader.readUntyped();
                        } else if ("port".equals(fieldName)) {
                            deserializedMySqlLinkedService.port = reader.readUntyped();
                        } else if ("username".equals(fieldName)) {
                            deserializedMySqlLinkedService.username = reader.readUntyped();
                        } else if ("database".equals(fieldName)) {
                            deserializedMySqlLinkedService.database = reader.readUntyped();
                        } else if ("sslMode".equals(fieldName)) {
                            deserializedMySqlLinkedService.sslMode = reader.readUntyped();
                        } else if ("useSystemTrustStore".equals(fieldName)) {
                            deserializedMySqlLinkedService.useSystemTrustStore = reader.readUntyped();
                        } else if ("password".equals(fieldName)) {
                            deserializedMySqlLinkedService.password = AzureKeyVaultSecretReference.fromJson(reader);
                        } else if ("encryptedCredential".equals(fieldName)) {
                            deserializedMySqlLinkedService.encryptedCredential = reader.readUntyped();
                        } else if ("allowZeroDateTime".equals(fieldName)) {
                            deserializedMySqlLinkedService.allowZeroDateTime = reader.readUntyped();
                        } else if ("connectionTimeout".equals(fieldName)) {
                            deserializedMySqlLinkedService.connectionTimeout = reader.readUntyped();
                        } else if ("convertZeroDateTime".equals(fieldName)) {
                            deserializedMySqlLinkedService.convertZeroDateTime = reader.readUntyped();
                        } else if ("guidFormat".equals(fieldName)) {
                            deserializedMySqlLinkedService.guidFormat = reader.readUntyped();
                        } else if ("sslCert".equals(fieldName)) {
                            deserializedMySqlLinkedService.sslCert = reader.readUntyped();
                        } else if ("sslKey".equals(fieldName)) {
                            deserializedMySqlLinkedService.sslKey = reader.readUntyped();
                        } else if ("treatTinyAsBoolean".equals(fieldName)) {
                            deserializedMySqlLinkedService.treatTinyAsBoolean = reader.readUntyped();
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedMySqlLinkedService.setAdditionalProperties(additionalProperties);

            return deserializedMySqlLinkedService;
        });
    }
}
