// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Trigger runs.
 */
@Fluent
public final class TriggerRun implements JsonSerializable<TriggerRun> {
    /*
     * Trigger run id.
     */
    private String triggerRunId;

    /*
     * Trigger name.
     */
    private String triggerName;

    /*
     * Trigger type.
     */
    private String triggerType;

    /*
     * Trigger run start time.
     */
    private OffsetDateTime triggerRunTimestamp;

    /*
     * Trigger run status.
     */
    private TriggerRunStatus status;

    /*
     * Trigger error message.
     */
    private String message;

    /*
     * List of property name and value related to trigger run. Name, value pair depends on type of trigger.
     */
    private Map<String, String> properties;

    /*
     * List of pipeline name and run Id triggered by the trigger run.
     */
    private Map<String, String> triggeredPipelines;

    /*
     * Trigger runs.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of TriggerRun class.
     */
    public TriggerRun() {
    }

    /**
     * Get the triggerRunId property: Trigger run id.
     * 
     * @return the triggerRunId value.
     */
    public String getTriggerRunId() {
        return this.triggerRunId;
    }

    /**
     * Get the triggerName property: Trigger name.
     * 
     * @return the triggerName value.
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Get the triggerType property: Trigger type.
     * 
     * @return the triggerType value.
     */
    public String getTriggerType() {
        return this.triggerType;
    }

    /**
     * Get the triggerRunTimestamp property: Trigger run start time.
     * 
     * @return the triggerRunTimestamp value.
     */
    public OffsetDateTime getTriggerRunTimestamp() {
        return this.triggerRunTimestamp;
    }

    /**
     * Get the status property: Trigger run status.
     * 
     * @return the status value.
     */
    public TriggerRunStatus getStatus() {
        return this.status;
    }

    /**
     * Get the message property: Trigger error message.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the properties property: List of property name and value related to trigger run. Name, value pair depends on
     * type of trigger.
     * 
     * @return the properties value.
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Get the triggeredPipelines property: List of pipeline name and run Id triggered by the trigger run.
     * 
     * @return the triggeredPipelines value.
     */
    public Map<String, String> getTriggeredPipelines() {
        return this.triggeredPipelines;
    }

    /**
     * Get the additionalProperties property: Trigger runs.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Trigger runs.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the TriggerRun object itself.
     */
    public TriggerRun setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggerRun from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggerRun if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the TriggerRun.
     */
    public static TriggerRun fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggerRun deserializedTriggerRun = new TriggerRun();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("triggerRunId".equals(fieldName)) {
                    deserializedTriggerRun.triggerRunId = reader.getString();
                } else if ("triggerName".equals(fieldName)) {
                    deserializedTriggerRun.triggerName = reader.getString();
                } else if ("triggerType".equals(fieldName)) {
                    deserializedTriggerRun.triggerType = reader.getString();
                } else if ("triggerRunTimestamp".equals(fieldName)) {
                    deserializedTriggerRun.triggerRunTimestamp
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedTriggerRun.status = TriggerRunStatus.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedTriggerRun.message = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedTriggerRun.properties = properties;
                } else if ("triggeredPipelines".equals(fieldName)) {
                    Map<String, String> triggeredPipelines = reader.readMap(reader1 -> reader1.getString());
                    deserializedTriggerRun.triggeredPipelines = triggeredPipelines;
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedTriggerRun.additionalProperties = additionalProperties;

            return deserializedTriggerRun;
        });
    }
}
