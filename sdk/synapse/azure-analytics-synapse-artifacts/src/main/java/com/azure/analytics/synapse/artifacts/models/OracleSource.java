// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.artifacts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity Oracle source.
 */
@Fluent
public final class OracleSource extends CopySource {
    /*
     * Copy source type.
     */
    @Generated
    private String type = "OracleSource";

    /*
     * Oracle reader query. Type: string (or Expression with resultType string).
     */
    @Generated
    private Object oracleReaderQuery;

    /*
     * Query timeout. Type: string (or Expression with resultType string), pattern:
     * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    @Generated
    private Object queryTimeout;

    /*
     * The partition mechanism that will be used for Oracle read in parallel.
     */
    @Generated
    private OraclePartitionOption partitionOption;

    /*
     * The settings that will be leveraged for Oracle source partitioning.
     */
    @Generated
    private OraclePartitionSettings partitionSettings;

    /*
     * Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or
     * Expression with resultType array of objects).
     */
    @Generated
    private Object additionalColumns;

    /*
     * The decimal precision used to represent Oracle NUMBER type without precision and scale. The range is 1 to 256 and
     * default value is 256 if not specified. Type: integer (or Expression with resultType integer). Only used for
     * Version 2.0.
     */
    @Generated
    private Object numberPrecision;

    /*
     * The decimal scale used to represent Oracle NUMBER type without precision and scale. The range is 0 to 130 and
     * default value is 130 if not specified. Type: integer (or Expression with resultType integer). Only used for
     * Version 2.0.
     */
    @Generated
    private Object numberScale;

    /**
     * Creates an instance of OracleSource class.
     */
    @Generated
    public OracleSource() {
    }

    /**
     * Get the type property: Copy source type.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the oracleReaderQuery property: Oracle reader query. Type: string (or Expression with resultType string).
     * 
     * @return the oracleReaderQuery value.
     */
    @Generated
    public Object getOracleReaderQuery() {
        return this.oracleReaderQuery;
    }

    /**
     * Set the oracleReaderQuery property: Oracle reader query. Type: string (or Expression with resultType string).
     * 
     * @param oracleReaderQuery the oracleReaderQuery value to set.
     * @return the OracleSource object itself.
     */
    @Generated
    public OracleSource setOracleReaderQuery(Object oracleReaderQuery) {
        this.oracleReaderQuery = oracleReaderQuery;
        return this;
    }

    /**
     * Get the queryTimeout property: Query timeout. Type: string (or Expression with resultType string), pattern:
     * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     * @return the queryTimeout value.
     */
    @Generated
    public Object getQueryTimeout() {
        return this.queryTimeout;
    }

    /**
     * Set the queryTimeout property: Query timeout. Type: string (or Expression with resultType string), pattern:
     * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     * @param queryTimeout the queryTimeout value to set.
     * @return the OracleSource object itself.
     */
    @Generated
    public OracleSource setQueryTimeout(Object queryTimeout) {
        this.queryTimeout = queryTimeout;
        return this;
    }

    /**
     * Get the partitionOption property: The partition mechanism that will be used for Oracle read in parallel.
     * 
     * @return the partitionOption value.
     */
    @Generated
    public OraclePartitionOption getPartitionOption() {
        return this.partitionOption;
    }

    /**
     * Set the partitionOption property: The partition mechanism that will be used for Oracle read in parallel.
     * 
     * @param partitionOption the partitionOption value to set.
     * @return the OracleSource object itself.
     */
    @Generated
    public OracleSource setPartitionOption(OraclePartitionOption partitionOption) {
        this.partitionOption = partitionOption;
        return this;
    }

    /**
     * Get the partitionSettings property: The settings that will be leveraged for Oracle source partitioning.
     * 
     * @return the partitionSettings value.
     */
    @Generated
    public OraclePartitionSettings getPartitionSettings() {
        return this.partitionSettings;
    }

    /**
     * Set the partitionSettings property: The settings that will be leveraged for Oracle source partitioning.
     * 
     * @param partitionSettings the partitionSettings value to set.
     * @return the OracleSource object itself.
     */
    @Generated
    public OracleSource setPartitionSettings(OraclePartitionSettings partitionSettings) {
        this.partitionSettings = partitionSettings;
        return this;
    }

    /**
     * Get the additionalColumns property: Specifies the additional columns to be added to source data. Type: array of
     * objects(AdditionalColumns) (or Expression with resultType array of objects).
     * 
     * @return the additionalColumns value.
     */
    @Generated
    public Object getAdditionalColumns() {
        return this.additionalColumns;
    }

    /**
     * Set the additionalColumns property: Specifies the additional columns to be added to source data. Type: array of
     * objects(AdditionalColumns) (or Expression with resultType array of objects).
     * 
     * @param additionalColumns the additionalColumns value to set.
     * @return the OracleSource object itself.
     */
    @Generated
    public OracleSource setAdditionalColumns(Object additionalColumns) {
        this.additionalColumns = additionalColumns;
        return this;
    }

    /**
     * Get the numberPrecision property: The decimal precision used to represent Oracle NUMBER type without precision
     * and scale. The range is 1 to 256 and default value is 256 if not specified. Type: integer (or Expression with
     * resultType integer). Only used for Version 2.0.
     * 
     * @return the numberPrecision value.
     */
    @Generated
    public Object getNumberPrecision() {
        return this.numberPrecision;
    }

    /**
     * Set the numberPrecision property: The decimal precision used to represent Oracle NUMBER type without precision
     * and scale. The range is 1 to 256 and default value is 256 if not specified. Type: integer (or Expression with
     * resultType integer). Only used for Version 2.0.
     * 
     * @param numberPrecision the numberPrecision value to set.
     * @return the OracleSource object itself.
     */
    @Generated
    public OracleSource setNumberPrecision(Object numberPrecision) {
        this.numberPrecision = numberPrecision;
        return this;
    }

    /**
     * Get the numberScale property: The decimal scale used to represent Oracle NUMBER type without precision and scale.
     * The range is 0 to 130 and default value is 130 if not specified. Type: integer (or Expression with resultType
     * integer). Only used for Version 2.0.
     * 
     * @return the numberScale value.
     */
    @Generated
    public Object getNumberScale() {
        return this.numberScale;
    }

    /**
     * Set the numberScale property: The decimal scale used to represent Oracle NUMBER type without precision and scale.
     * The range is 0 to 130 and default value is 130 if not specified. Type: integer (or Expression with resultType
     * integer). Only used for Version 2.0.
     * 
     * @param numberScale the numberScale value to set.
     * @return the OracleSource object itself.
     */
    @Generated
    public OracleSource setNumberScale(Object numberScale) {
        this.numberScale = numberScale;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public OracleSource setSourceRetryCount(Object sourceRetryCount) {
        super.setSourceRetryCount(sourceRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public OracleSource setSourceRetryWait(Object sourceRetryWait) {
        super.setSourceRetryWait(sourceRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public OracleSource setMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.setMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (getSourceRetryCount() != null) {
            jsonWriter.writeUntypedField("sourceRetryCount", getSourceRetryCount());
        }
        if (getSourceRetryWait() != null) {
            jsonWriter.writeUntypedField("sourceRetryWait", getSourceRetryWait());
        }
        if (getMaxConcurrentConnections() != null) {
            jsonWriter.writeUntypedField("maxConcurrentConnections", getMaxConcurrentConnections());
        }
        jsonWriter.writeStringField("type", this.type);
        if (this.oracleReaderQuery != null) {
            jsonWriter.writeUntypedField("oracleReaderQuery", this.oracleReaderQuery);
        }
        if (this.queryTimeout != null) {
            jsonWriter.writeUntypedField("queryTimeout", this.queryTimeout);
        }
        jsonWriter.writeStringField("partitionOption",
            this.partitionOption == null ? null : this.partitionOption.toString());
        jsonWriter.writeJsonField("partitionSettings", this.partitionSettings);
        if (this.additionalColumns != null) {
            jsonWriter.writeUntypedField("additionalColumns", this.additionalColumns);
        }
        if (this.numberPrecision != null) {
            jsonWriter.writeUntypedField("numberPrecision", this.numberPrecision);
        }
        if (this.numberScale != null) {
            jsonWriter.writeUntypedField("numberScale", this.numberScale);
        }
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OracleSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OracleSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OracleSource.
     */
    @Generated
    public static OracleSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OracleSource deserializedOracleSource = new OracleSource();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceRetryCount".equals(fieldName)) {
                    deserializedOracleSource.setSourceRetryCount(reader.readUntyped());
                } else if ("sourceRetryWait".equals(fieldName)) {
                    deserializedOracleSource.setSourceRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedOracleSource.setMaxConcurrentConnections(reader.readUntyped());
                } else if ("type".equals(fieldName)) {
                    deserializedOracleSource.type = reader.getString();
                } else if ("oracleReaderQuery".equals(fieldName)) {
                    deserializedOracleSource.oracleReaderQuery = reader.readUntyped();
                } else if ("queryTimeout".equals(fieldName)) {
                    deserializedOracleSource.queryTimeout = reader.readUntyped();
                } else if ("partitionOption".equals(fieldName)) {
                    deserializedOracleSource.partitionOption = OraclePartitionOption.fromString(reader.getString());
                } else if ("partitionSettings".equals(fieldName)) {
                    deserializedOracleSource.partitionSettings = OraclePartitionSettings.fromJson(reader);
                } else if ("additionalColumns".equals(fieldName)) {
                    deserializedOracleSource.additionalColumns = reader.readUntyped();
                } else if ("numberPrecision".equals(fieldName)) {
                    deserializedOracleSource.numberPrecision = reader.readUntyped();
                } else if ("numberScale".equals(fieldName)) {
                    deserializedOracleSource.numberScale = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedOracleSource.setAdditionalProperties(additionalProperties);

            return deserializedOracleSource;
        });
    }
}
