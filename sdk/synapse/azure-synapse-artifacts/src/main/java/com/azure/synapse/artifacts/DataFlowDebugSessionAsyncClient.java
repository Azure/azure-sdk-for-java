// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.synapse.artifacts;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.synapse.artifacts.implementation.DataFlowDebugSessionsImpl;
import com.azure.synapse.artifacts.models.AddDataFlowToDebugSessionResponse;
import com.azure.synapse.artifacts.models.CloudErrorException;
import com.azure.synapse.artifacts.models.CreateDataFlowDebugSessionRequest;
import com.azure.synapse.artifacts.models.CreateDataFlowDebugSessionResponse;
import com.azure.synapse.artifacts.models.DataFlowDebugCommandRequest;
import com.azure.synapse.artifacts.models.DataFlowDebugCommandResponse;
import com.azure.synapse.artifacts.models.DataFlowDebugPackage;
import com.azure.synapse.artifacts.models.DataFlowDebugSessionInfo;
import com.azure.synapse.artifacts.models.DataFlowDebugSessionsCreateDataFlowDebugSessionResponse;
import com.azure.synapse.artifacts.models.DataFlowDebugSessionsExecuteCommandResponse;
import com.azure.synapse.artifacts.models.DeleteDataFlowDebugSessionRequest;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ArtifactsClient type. */
@ServiceClient(builder = ArtifactsClientBuilder.class, isAsync = true)
public final class DataFlowDebugSessionAsyncClient {
    private final DataFlowDebugSessionsImpl serviceClient;

    /**
     * Initializes an instance of DataFlowDebugSessions client.
     *
     * @param serviceClient the service client implementation.
     */
    DataFlowDebugSessionAsyncClient(DataFlowDebugSessionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a data flow debug session.
     *
     * @param request Request body structure for creating data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body structure for creating data flow debug session.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DataFlowDebugSessionsCreateDataFlowDebugSessionResponse> createDataFlowDebugSessionWithResponse(
            CreateDataFlowDebugSessionRequest request) {
        return this.serviceClient.createDataFlowDebugSessionWithResponseAsync(request);
    }

    /**
     * Creates a data flow debug session.
     *
     * @param request Request body structure for creating data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body structure for creating data flow debug session.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateDataFlowDebugSessionResponse> createDataFlowDebugSession(
            CreateDataFlowDebugSessionRequest request) {
        return this.serviceClient.createDataFlowDebugSessionAsync(request);
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active debug sessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DataFlowDebugSessionInfo>> queryDataFlowDebugSessionsByWorkspaceSinglePage() {
        return this.serviceClient.queryDataFlowDebugSessionsByWorkspaceSinglePageAsync();
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active debug sessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataFlowDebugSessionInfo> queryDataFlowDebugSessionsByWorkspace() {
        return this.serviceClient.queryDataFlowDebugSessionsByWorkspaceAsync();
    }

    /**
     * Add a data flow into debug session.
     *
     * @param request Request body structure for starting data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body structure for starting data flow debug session.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AddDataFlowToDebugSessionResponse>> addDataFlowWithResponse(DataFlowDebugPackage request) {
        return this.serviceClient.addDataFlowWithResponseAsync(request);
    }

    /**
     * Add a data flow into debug session.
     *
     * @param request Request body structure for starting data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body structure for starting data flow debug session.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddDataFlowToDebugSessionResponse> addDataFlow(DataFlowDebugPackage request) {
        return this.serviceClient.addDataFlowAsync(request);
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param request Request body structure for deleting data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDataFlowDebugSessionWithResponse(DeleteDataFlowDebugSessionRequest request) {
        return this.serviceClient.deleteDataFlowDebugSessionWithResponseAsync(request);
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param request Request body structure for deleting data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDataFlowDebugSession(DeleteDataFlowDebugSessionRequest request) {
        return this.serviceClient.deleteDataFlowDebugSessionAsync(request);
    }

    /**
     * Execute a data flow debug command.
     *
     * @param request Request body structure for data flow expression preview.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body structure of data flow result for data preview, statistics or expression preview.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DataFlowDebugSessionsExecuteCommandResponse> executeCommandWithResponse(
            DataFlowDebugCommandRequest request) {
        return this.serviceClient.executeCommandWithResponseAsync(request);
    }

    /**
     * Execute a data flow debug command.
     *
     * @param request Request body structure for data flow expression preview.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body structure of data flow result for data preview, statistics or expression preview.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DataFlowDebugCommandResponse> executeCommand(DataFlowDebugCommandRequest request) {
        return this.serviceClient.executeCommandAsync(request);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active debug sessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DataFlowDebugSessionInfo>> queryDataFlowDebugSessionsByWorkspaceNextSinglePage(
            String nextLink) {
        return this.serviceClient.queryDataFlowDebugSessionsByWorkspaceNextSinglePageAsync(nextLink);
    }
}
