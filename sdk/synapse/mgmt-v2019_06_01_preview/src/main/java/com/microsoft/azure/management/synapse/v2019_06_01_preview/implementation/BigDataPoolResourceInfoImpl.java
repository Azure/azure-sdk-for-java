/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPoolResourceInfo;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.AutoScaleProperties;
import org.joda.time.DateTime;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.AutoPauseProperties;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.LibraryRequirements;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.NodeSize;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.NodeSizeFamily;

class BigDataPoolResourceInfoImpl extends CreatableUpdatableImpl<BigDataPoolResourceInfo, BigDataPoolResourceInfoInner, BigDataPoolResourceInfoImpl> implements BigDataPoolResourceInfo, BigDataPoolResourceInfo.Definition, BigDataPoolResourceInfo.Update {
    private final SynapseManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String bigDataPoolName;
    private Boolean cforce;
    private Boolean uforce;

    BigDataPoolResourceInfoImpl(String name, SynapseManager manager) {
        super(name, new BigDataPoolResourceInfoInner());
        this.manager = manager;
        // Set resource name
        this.bigDataPoolName = name;
        //
    }

    BigDataPoolResourceInfoImpl(BigDataPoolResourceInfoInner inner, SynapseManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.bigDataPoolName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.bigDataPoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "bigDataPools");
        //
    }

    @Override
    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public Observable<BigDataPoolResourceInfo> createResourceAsync() {
        BigDataPoolsInner client = this.manager().inner().bigDataPools();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.bigDataPoolName, this.inner(), this.cforce)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<BigDataPoolResourceInfo> updateResourceAsync() {
        BigDataPoolsInner client = this.manager().inner().bigDataPools();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.bigDataPoolName, this.inner(), this.uforce)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<BigDataPoolResourceInfoInner> getInnerAsync() {
        BigDataPoolsInner client = this.manager().inner().bigDataPools();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.bigDataPoolName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public AutoPauseProperties autoPause() {
        return this.inner().autoPause();
    }

    @Override
    public AutoScaleProperties autoScale() {
        return this.inner().autoScale();
    }

    @Override
    public DateTime creationDate() {
        return this.inner().creationDate();
    }

    @Override
    public String defaultSparkLogFolder() {
        return this.inner().defaultSparkLogFolder();
    }

    @Override
    public Boolean haveLibraryRequirementsChanged() {
        return this.inner().haveLibraryRequirementsChanged();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isComputeIsolationEnabled() {
        return this.inner().isComputeIsolationEnabled();
    }

    @Override
    public LibraryRequirements libraryRequirements() {
        return this.inner().libraryRequirements();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer nodeCount() {
        return this.inner().nodeCount();
    }

    @Override
    public NodeSize nodeSize() {
        return this.inner().nodeSize();
    }

    @Override
    public NodeSizeFamily nodeSizeFamily() {
        return this.inner().nodeSizeFamily();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Boolean sessionLevelPackagesEnabled() {
        return this.inner().sessionLevelPackagesEnabled();
    }

    @Override
    public LibraryRequirements sparkConfigProperties() {
        return this.inner().sparkConfigProperties();
    }

    @Override
    public String sparkEventsFolder() {
        return this.inner().sparkEventsFolder();
    }

    @Override
    public String sparkVersion() {
        return this.inner().sparkVersion();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public BigDataPoolResourceInfoImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withForce(Boolean force) {
        if (isInCreateMode()) {
            this.cforce = force;
        } else {
            this.uforce = force;
        }
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withAutoPause(AutoPauseProperties autoPause) {
        this.inner().withAutoPause(autoPause);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withAutoScale(AutoScaleProperties autoScale) {
        this.inner().withAutoScale(autoScale);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withCreationDate(DateTime creationDate) {
        this.inner().withCreationDate(creationDate);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withDefaultSparkLogFolder(String defaultSparkLogFolder) {
        this.inner().withDefaultSparkLogFolder(defaultSparkLogFolder);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withHaveLibraryRequirementsChanged(Boolean haveLibraryRequirementsChanged) {
        this.inner().withHaveLibraryRequirementsChanged(haveLibraryRequirementsChanged);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withIsComputeIsolationEnabled(Boolean isComputeIsolationEnabled) {
        this.inner().withIsComputeIsolationEnabled(isComputeIsolationEnabled);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withLibraryRequirements(LibraryRequirements libraryRequirements) {
        this.inner().withLibraryRequirements(libraryRequirements);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withNodeCount(Integer nodeCount) {
        this.inner().withNodeCount(nodeCount);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withNodeSize(NodeSize nodeSize) {
        this.inner().withNodeSize(nodeSize);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withNodeSizeFamily(NodeSizeFamily nodeSizeFamily) {
        this.inner().withNodeSizeFamily(nodeSizeFamily);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withProvisioningState(String provisioningState) {
        this.inner().withProvisioningState(provisioningState);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withSessionLevelPackagesEnabled(Boolean sessionLevelPackagesEnabled) {
        this.inner().withSessionLevelPackagesEnabled(sessionLevelPackagesEnabled);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withSparkConfigProperties(LibraryRequirements sparkConfigProperties) {
        this.inner().withSparkConfigProperties(sparkConfigProperties);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withSparkEventsFolder(String sparkEventsFolder) {
        this.inner().withSparkEventsFolder(sparkEventsFolder);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withSparkVersion(String sparkVersion) {
        this.inner().withSparkVersion(sparkVersion);
        return this;
    }

    @Override
    public BigDataPoolResourceInfoImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
