/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.ErrorContractException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SqlPoolReplicationLinks.
 */
public class SqlPoolReplicationLinksInner {
    /** The Retrofit service to perform REST calls. */
    private SqlPoolReplicationLinksService service;
    /** The service client containing this operation class. */
    private SynapseManagementClientImpl client;

    /**
     * Initializes an instance of SqlPoolReplicationLinksInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SqlPoolReplicationLinksInner(Retrofit retrofit, SynapseManagementClientImpl client) {
        this.service = retrofit.create(SqlPoolReplicationLinksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SqlPoolReplicationLinks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SqlPoolReplicationLinksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.SqlPoolReplicationLinks list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/replicationLinks")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.SqlPoolReplicationLinks getByName" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/replicationLinks/{linkId}")
        Observable<Response<ResponseBody>> getByName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("sqlPoolName") String sqlPoolName, @Path("linkId") String linkId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.SqlPoolReplicationLinks listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReplicationLinkInner&gt; object if successful.
     */
    public PagedList<ReplicationLinkInner> list(final String resourceGroupName, final String workspaceName, final String sqlPoolName) {
        ServiceResponse<Page<ReplicationLinkInner>> response = listSinglePageAsync(resourceGroupName, workspaceName, sqlPoolName).toBlocking().single();
        return new PagedList<ReplicationLinkInner>(response.body()) {
            @Override
            public Page<ReplicationLinkInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReplicationLinkInner>> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName, final ListOperationCallback<ReplicationLinkInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, workspaceName, sqlPoolName),
            new Func1<String, Observable<ServiceResponse<Page<ReplicationLinkInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationLinkInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationLinkInner&gt; object
     */
    public Observable<Page<ReplicationLinkInner>> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName) {
        return listWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName)
            .map(new Func1<ServiceResponse<Page<ReplicationLinkInner>>, Page<ReplicationLinkInner>>() {
                @Override
                public Page<ReplicationLinkInner> call(ServiceResponse<Page<ReplicationLinkInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationLinkInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReplicationLinkInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName) {
        return listSinglePageAsync(resourceGroupName, workspaceName, sqlPoolName)
            .concatMap(new Func1<ServiceResponse<Page<ReplicationLinkInner>>, Observable<ServiceResponse<Page<ReplicationLinkInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationLinkInner>>> call(ServiceResponse<Page<ReplicationLinkInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
    ServiceResponse<PageImpl<ReplicationLinkInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<ReplicationLinkInner>> * @param workspaceName The name of the workspace
    ServiceResponse<PageImpl<ReplicationLinkInner>> * @param sqlPoolName SQL pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReplicationLinkInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReplicationLinkInner>>> listSinglePageAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReplicationLinkInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationLinkInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReplicationLinkInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReplicationLinkInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReplicationLinkInner>> listDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReplicationLinkInner>, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReplicationLinkInner>>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Get SQL pool replication link by name.
     * Get SQL pool replication link by name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param linkId The ID of the replication link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationLinkInner object if successful.
     */
    public ReplicationLinkInner getByName(String resourceGroupName, String workspaceName, String sqlPoolName, String linkId) {
        return getByNameWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, linkId).toBlocking().single().body();
    }

    /**
     * Get SQL pool replication link by name.
     * Get SQL pool replication link by name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param linkId The ID of the replication link.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationLinkInner> getByNameAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String linkId, final ServiceCallback<ReplicationLinkInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByNameWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, linkId), serviceCallback);
    }

    /**
     * Get SQL pool replication link by name.
     * Get SQL pool replication link by name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param linkId The ID of the replication link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationLinkInner object
     */
    public Observable<ReplicationLinkInner> getByNameAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String linkId) {
        return getByNameWithServiceResponseAsync(resourceGroupName, workspaceName, sqlPoolName, linkId).map(new Func1<ServiceResponse<ReplicationLinkInner>, ReplicationLinkInner>() {
            @Override
            public ReplicationLinkInner call(ServiceResponse<ReplicationLinkInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get SQL pool replication link by name.
     * Get SQL pool replication link by name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param sqlPoolName SQL pool name
     * @param linkId The ID of the replication link.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationLinkInner object
     */
    public Observable<ServiceResponse<ReplicationLinkInner>> getByNameWithServiceResponseAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String linkId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sqlPoolName == null) {
            throw new IllegalArgumentException("Parameter sqlPoolName is required and cannot be null.");
        }
        if (linkId == null) {
            throw new IllegalArgumentException("Parameter linkId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByName(this.client.subscriptionId(), resourceGroupName, workspaceName, sqlPoolName, linkId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationLinkInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationLinkInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationLinkInner> clientResponse = getByNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationLinkInner> getByNameDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationLinkInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationLinkInner>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReplicationLinkInner&gt; object if successful.
     */
    public PagedList<ReplicationLinkInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ReplicationLinkInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReplicationLinkInner>(response.body()) {
            @Override
            public Page<ReplicationLinkInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReplicationLinkInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ReplicationLinkInner>> serviceFuture, final ListOperationCallback<ReplicationLinkInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReplicationLinkInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationLinkInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationLinkInner&gt; object
     */
    public Observable<Page<ReplicationLinkInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReplicationLinkInner>>, Page<ReplicationLinkInner>>() {
                @Override
                public Page<ReplicationLinkInner> call(ServiceResponse<Page<ReplicationLinkInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationLinkInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReplicationLinkInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReplicationLinkInner>>, Observable<ServiceResponse<Page<ReplicationLinkInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationLinkInner>>> call(ServiceResponse<Page<ReplicationLinkInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get SQL pool replication links.
     * Lists a Sql pool's replication links.
     *
    ServiceResponse<PageImpl<ReplicationLinkInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReplicationLinkInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReplicationLinkInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReplicationLinkInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationLinkInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReplicationLinkInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReplicationLinkInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReplicationLinkInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReplicationLinkInner>, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReplicationLinkInner>>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

}
