/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.IntegrationRuntimeAuthKeysOperations;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.IntegrationRuntimeAuthKeys;

class IntegrationRuntimeAuthKeysOperationsImpl extends WrapperImpl<IntegrationRuntimeAuthKeysOperationsInner> implements IntegrationRuntimeAuthKeysOperations {
    private final SynapseManager manager;

    IntegrationRuntimeAuthKeysOperationsImpl(SynapseManager manager) {
        super(manager.inner().integrationRuntimeAuthKeysOperations());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public Observable<IntegrationRuntimeAuthKeys> regenerateAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimeAuthKeysOperationsInner client = this.inner();
        return client.regenerateAsync(resourceGroupName, workspaceName, integrationRuntimeName)
        .map(new Func1<IntegrationRuntimeAuthKeysInner, IntegrationRuntimeAuthKeys>() {
            @Override
            public IntegrationRuntimeAuthKeys call(IntegrationRuntimeAuthKeysInner inner) {
                return new IntegrationRuntimeAuthKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<IntegrationRuntimeAuthKeys> listAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimeAuthKeysOperationsInner client = this.inner();
        return client.listAsync(resourceGroupName, workspaceName, integrationRuntimeName)
        .map(new Func1<IntegrationRuntimeAuthKeysInner, IntegrationRuntimeAuthKeys>() {
            @Override
            public IntegrationRuntimeAuthKeys call(IntegrationRuntimeAuthKeysInner inner) {
                return new IntegrationRuntimeAuthKeysImpl(inner, manager());
            }
        });
    }

}
