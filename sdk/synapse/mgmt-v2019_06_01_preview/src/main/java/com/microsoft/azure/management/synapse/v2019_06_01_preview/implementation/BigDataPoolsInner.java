/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPoolPatchInfo;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.ErrorContractException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BigDataPools.
 */
public class BigDataPoolsInner {
    /** The Retrofit service to perform REST calls. */
    private BigDataPoolsService service;
    /** The service client containing this operation class. */
    private SynapseManagementClientImpl client;

    /**
     * Initializes an instance of BigDataPoolsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BigDataPoolsInner(Retrofit retrofit, SynapseManagementClientImpl client) {
        this.service = retrofit.create(BigDataPoolsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BigDataPools to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BigDataPoolsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("bigDataPoolName") String bigDataPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("bigDataPoolName") String bigDataPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BigDataPoolPatchInfo bigDataPoolPatchInfo, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("bigDataPoolName") String bigDataPoolName, @Query("api-version") String apiVersion, @Query("force") Boolean force, @Body BigDataPoolResourceInfoInner bigDataPoolInfo, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("bigDataPoolName") String bigDataPoolName, @Query("api-version") String apiVersion, @Query("force") Boolean force, @Body BigDataPoolResourceInfoInner bigDataPoolInfo, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("bigDataPoolName") String bigDataPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("bigDataPoolName") String bigDataPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools listByWorkspace" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools")
        Observable<Response<ResponseBody>> listByWorkspace(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.BigDataPools listByWorkspaceNext" })
        @GET
        Observable<Response<ResponseBody>> listByWorkspaceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get Big Data pool.
     * Get a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDataPoolResourceInfoInner object if successful.
     */
    public BigDataPoolResourceInfoInner get(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).toBlocking().single().body();
    }

    /**
     * Get Big Data pool.
     * Get a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDataPoolResourceInfoInner> getAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, final ServiceCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName), serviceCallback);
    }

    /**
     * Get Big Data pool.
     * Get a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<BigDataPoolResourceInfoInner> getAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).map(new Func1<ServiceResponse<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner>() {
            @Override
            public BigDataPoolResourceInfoInner call(ServiceResponse<BigDataPoolResourceInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Big Data pool.
     * Get a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> getWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDataPoolResourceInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDataPoolResourceInfoInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDataPoolResourceInfoInner> getDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BigDataPoolResourceInfoInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BigDataPoolResourceInfoInner>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDataPoolResourceInfoInner object if successful.
     */
    public BigDataPoolResourceInfoInner update(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).toBlocking().single().body();
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDataPoolResourceInfoInner> updateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, final ServiceCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName), serviceCallback);
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<BigDataPoolResourceInfoInner> updateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).map(new Func1<ServiceResponse<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner>() {
            @Override
            public BigDataPoolResourceInfoInner call(ServiceResponse<BigDataPoolResourceInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> updateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        BigDataPoolPatchInfo bigDataPoolPatchInfo = new BigDataPoolPatchInfo();
        bigDataPoolPatchInfo.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), this.client.acceptLanguage(), bigDataPoolPatchInfo, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDataPoolResourceInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDataPoolResourceInfoInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param tags Updated tags for the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDataPoolResourceInfoInner object if successful.
     */
    public BigDataPoolResourceInfoInner update(String resourceGroupName, String workspaceName, String bigDataPoolName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, tags).toBlocking().single().body();
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param tags Updated tags for the Big Data pool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDataPoolResourceInfoInner> updateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, Map<String, String> tags, final ServiceCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, tags), serviceCallback);
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param tags Updated tags for the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<BigDataPoolResourceInfoInner> updateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, tags).map(new Func1<ServiceResponse<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner>() {
            @Override
            public BigDataPoolResourceInfoInner call(ServiceResponse<BigDataPoolResourceInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a Big Data pool.
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param tags Updated tags for the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> updateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        BigDataPoolPatchInfo bigDataPoolPatchInfo = new BigDataPoolPatchInfo();
        bigDataPoolPatchInfo.withTags(tags);
        return service.update(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), this.client.acceptLanguage(), bigDataPoolPatchInfo, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDataPoolResourceInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDataPoolResourceInfoInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDataPoolResourceInfoInner> updateDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BigDataPoolResourceInfoInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BigDataPoolResourceInfoInner>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDataPoolResourceInfoInner object if successful.
     */
    public BigDataPoolResourceInfoInner createOrUpdate(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo).toBlocking().last().body();
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDataPoolResourceInfoInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, final ServiceCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo), serviceCallback);
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BigDataPoolResourceInfoInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo).map(new Func1<ServiceResponse<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner>() {
            @Override
            public BigDataPoolResourceInfoInner call(ServiceResponse<BigDataPoolResourceInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (bigDataPoolInfo == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolInfo is required and cannot be null.");
        }
        Validator.validate(bigDataPoolInfo);
        final Boolean force = null;
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), force, bigDataPoolInfo, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BigDataPoolResourceInfoInner>() { }.getType());
    }
    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDataPoolResourceInfoInner object if successful.
     */
    public BigDataPoolResourceInfoInner createOrUpdate(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo, force).toBlocking().last().body();
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDataPoolResourceInfoInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force, final ServiceCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo, force), serviceCallback);
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BigDataPoolResourceInfoInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo, force).map(new Func1<ServiceResponse<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner>() {
            @Override
            public BigDataPoolResourceInfoInner call(ServiceResponse<BigDataPoolResourceInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (bigDataPoolInfo == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolInfo is required and cannot be null.");
        }
        Validator.validate(bigDataPoolInfo);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), force, bigDataPoolInfo, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BigDataPoolResourceInfoInner>() { }.getType());
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDataPoolResourceInfoInner object if successful.
     */
    public BigDataPoolResourceInfoInner beginCreateOrUpdate(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo).toBlocking().single().body();
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDataPoolResourceInfoInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, final ServiceCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo), serviceCallback);
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<BigDataPoolResourceInfoInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo).map(new Func1<ServiceResponse<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner>() {
            @Override
            public BigDataPoolResourceInfoInner call(ServiceResponse<BigDataPoolResourceInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (bigDataPoolInfo == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolInfo is required and cannot be null.");
        }
        Validator.validate(bigDataPoolInfo);
        final Boolean force = null;
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), force, bigDataPoolInfo, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDataPoolResourceInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDataPoolResourceInfoInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDataPoolResourceInfoInner object if successful.
     */
    public BigDataPoolResourceInfoInner beginCreateOrUpdate(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo, force).toBlocking().single().body();
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDataPoolResourceInfoInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force, final ServiceCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo, force), serviceCallback);
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<BigDataPoolResourceInfoInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName, bigDataPoolInfo, force).map(new Func1<ServiceResponse<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner>() {
            @Override
            public BigDataPoolResourceInfoInner call(ServiceResponse<BigDataPoolResourceInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a Big Data pool.
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDataPoolResourceInfoInner object
     */
    public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, BigDataPoolResourceInfoInner bigDataPoolInfo, Boolean force) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (bigDataPoolInfo == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolInfo is required and cannot be null.");
        }
        Validator.validate(bigDataPoolInfo);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), force, bigDataPoolInfo, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDataPoolResourceInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<BigDataPoolResourceInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDataPoolResourceInfoInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDataPoolResourceInfoInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BigDataPoolResourceInfoInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BigDataPoolResourceInfoInner>() { }.getType())
                .register(202, new TypeToken<BigDataPoolResourceInfoInner>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object delete(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return deleteWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).toBlocking().last().body();
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName), serviceCallback);
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> deleteAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return deleteWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> deleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Object>() { }.getType());
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginDelete(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).toBlocking().single().body();
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginDeleteAsync(String resourceGroupName, String workspaceName, String bigDataPoolName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName), serviceCallback);
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginDeleteAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, bigDataPoolName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a Big Data pool.
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param bigDataPoolName Big Data pool name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String bigDataPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (bigDataPoolName == null) {
            throw new IllegalArgumentException("Parameter bigDataPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, workspaceName, bigDataPoolName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(202, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BigDataPoolResourceInfoInner&gt; object if successful.
     */
    public PagedList<BigDataPoolResourceInfoInner> listByWorkspace(final String resourceGroupName, final String workspaceName) {
        ServiceResponse<Page<BigDataPoolResourceInfoInner>> response = listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName).toBlocking().single();
        return new PagedList<BigDataPoolResourceInfoInner>(response.body()) {
            @Override
            public Page<BigDataPoolResourceInfoInner> nextPage(String nextPageLink) {
                return listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BigDataPoolResourceInfoInner>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName, final ListOperationCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName),
            new Func1<String, Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> call(String nextPageLink) {
                    return listByWorkspaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BigDataPoolResourceInfoInner&gt; object
     */
    public Observable<Page<BigDataPoolResourceInfoInner>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName) {
        return listByWorkspaceWithServiceResponseAsync(resourceGroupName, workspaceName)
            .map(new Func1<ServiceResponse<Page<BigDataPoolResourceInfoInner>>, Page<BigDataPoolResourceInfoInner>>() {
                @Override
                public Page<BigDataPoolResourceInfoInner> call(ServiceResponse<Page<BigDataPoolResourceInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BigDataPoolResourceInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> listByWorkspaceWithServiceResponseAsync(final String resourceGroupName, final String workspaceName) {
        return listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName)
            .concatMap(new Func1<ServiceResponse<Page<BigDataPoolResourceInfoInner>>, Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> call(ServiceResponse<Page<BigDataPoolResourceInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByWorkspaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
    ServiceResponse<PageImpl<BigDataPoolResourceInfoInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<BigDataPoolResourceInfoInner>> * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BigDataPoolResourceInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> listByWorkspaceSinglePageAsync(final String resourceGroupName, final String workspaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByWorkspace(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BigDataPoolResourceInfoInner>> result = listByWorkspaceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BigDataPoolResourceInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BigDataPoolResourceInfoInner>> listByWorkspaceDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BigDataPoolResourceInfoInner>, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BigDataPoolResourceInfoInner>>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BigDataPoolResourceInfoInner&gt; object if successful.
     */
    public PagedList<BigDataPoolResourceInfoInner> listByWorkspaceNext(final String nextPageLink) {
        ServiceResponse<Page<BigDataPoolResourceInfoInner>> response = listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BigDataPoolResourceInfoInner>(response.body()) {
            @Override
            public Page<BigDataPoolResourceInfoInner> nextPage(String nextPageLink) {
                return listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BigDataPoolResourceInfoInner>> listByWorkspaceNextAsync(final String nextPageLink, final ServiceFuture<List<BigDataPoolResourceInfoInner>> serviceFuture, final ListOperationCallback<BigDataPoolResourceInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByWorkspaceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> call(String nextPageLink) {
                    return listByWorkspaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BigDataPoolResourceInfoInner&gt; object
     */
    public Observable<Page<BigDataPoolResourceInfoInner>> listByWorkspaceNextAsync(final String nextPageLink) {
        return listByWorkspaceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BigDataPoolResourceInfoInner>>, Page<BigDataPoolResourceInfoInner>>() {
                @Override
                public Page<BigDataPoolResourceInfoInner> call(ServiceResponse<Page<BigDataPoolResourceInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BigDataPoolResourceInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> listByWorkspaceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByWorkspaceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BigDataPoolResourceInfoInner>>, Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> call(ServiceResponse<Page<BigDataPoolResourceInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByWorkspaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List the Big Data pools in a workspace.
     * List Big Data pools in a workspace.
     *
    ServiceResponse<PageImpl<BigDataPoolResourceInfoInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BigDataPoolResourceInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> listByWorkspaceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByWorkspaceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BigDataPoolResourceInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BigDataPoolResourceInfoInner>> result = listByWorkspaceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BigDataPoolResourceInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BigDataPoolResourceInfoInner>> listByWorkspaceNextDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BigDataPoolResourceInfoInner>, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BigDataPoolResourceInfoInner>>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

}
