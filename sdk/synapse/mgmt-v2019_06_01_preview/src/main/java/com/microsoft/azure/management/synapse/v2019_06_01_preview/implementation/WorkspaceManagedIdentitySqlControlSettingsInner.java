/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.ErrorContractException;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in WorkspaceManagedIdentitySqlControlSettings.
 */
public class WorkspaceManagedIdentitySqlControlSettingsInner {
    /** The Retrofit service to perform REST calls. */
    private WorkspaceManagedIdentitySqlControlSettingsService service;
    /** The service client containing this operation class. */
    private SynapseManagementClientImpl client;

    /**
     * Initializes an instance of WorkspaceManagedIdentitySqlControlSettingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WorkspaceManagedIdentitySqlControlSettingsInner(Retrofit retrofit, SynapseManagementClientImpl client) {
        this.service = retrofit.create(WorkspaceManagedIdentitySqlControlSettingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkspaceManagedIdentitySqlControlSettings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WorkspaceManagedIdentitySqlControlSettingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.WorkspaceManagedIdentitySqlControlSettings get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedIdentitySqlControlSettings/default")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.WorkspaceManagedIdentitySqlControlSettings createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedIdentitySqlControlSettings/default")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ManagedIdentitySqlControlSettingsModelInner managedIdentitySqlControlSettings, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.WorkspaceManagedIdentitySqlControlSettings beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedIdentitySqlControlSettings/default")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ManagedIdentitySqlControlSettingsModelInner managedIdentitySqlControlSettings, @Header("User-Agent") String userAgent);

    }

    /**
     * Get Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedIdentitySqlControlSettingsModelInner object if successful.
     */
    public ManagedIdentitySqlControlSettingsModelInner get(String resourceGroupName, String workspaceName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName).toBlocking().single().body();
    }

    /**
     * Get Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedIdentitySqlControlSettingsModelInner> getAsync(String resourceGroupName, String workspaceName, final ServiceCallback<ManagedIdentitySqlControlSettingsModelInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, workspaceName), serviceCallback);
    }

    /**
     * Get Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedIdentitySqlControlSettingsModelInner object
     */
    public Observable<ManagedIdentitySqlControlSettingsModelInner> getAsync(String resourceGroupName, String workspaceName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName).map(new Func1<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>, ManagedIdentitySqlControlSettingsModelInner>() {
            @Override
            public ManagedIdentitySqlControlSettingsModelInner call(ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedIdentitySqlControlSettingsModelInner object
     */
    public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> getWithServiceResponseAsync(String resourceGroupName, String workspaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> getDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ManagedIdentitySqlControlSettingsModelInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ManagedIdentitySqlControlSettingsModelInner>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedIdentitySqlControlSettingsModelInner object if successful.
     */
    public ManagedIdentitySqlControlSettingsModelInner createOrUpdate(String resourceGroupName, String workspaceName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName).toBlocking().last().body();
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedIdentitySqlControlSettingsModelInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, final ServiceCallback<ManagedIdentitySqlControlSettingsModelInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName), serviceCallback);
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ManagedIdentitySqlControlSettingsModelInner> createOrUpdateAsync(String resourceGroupName, String workspaceName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName).map(new Func1<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>, ManagedIdentitySqlControlSettingsModelInner>() {
            @Override
            public ManagedIdentitySqlControlSettingsModelInner call(ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity = null;
        ManagedIdentitySqlControlSettingsModelInner managedIdentitySqlControlSettings = new ManagedIdentitySqlControlSettingsModelInner();
        managedIdentitySqlControlSettings.withGrantSqlControlToManagedIdentity(null);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), this.client.acceptLanguage(), managedIdentitySqlControlSettings, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ManagedIdentitySqlControlSettingsModelInner>() { }.getType());
    }
    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedIdentitySqlControlSettingsModelInner object if successful.
     */
    public ManagedIdentitySqlControlSettingsModelInner createOrUpdate(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, grantSqlControlToManagedIdentity).toBlocking().last().body();
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedIdentitySqlControlSettingsModelInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity, final ServiceCallback<ManagedIdentitySqlControlSettingsModelInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, grantSqlControlToManagedIdentity), serviceCallback);
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ManagedIdentitySqlControlSettingsModelInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, grantSqlControlToManagedIdentity).map(new Func1<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>, ManagedIdentitySqlControlSettingsModelInner>() {
            @Override
            public ManagedIdentitySqlControlSettingsModelInner call(ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(grantSqlControlToManagedIdentity);
        ManagedIdentitySqlControlSettingsModelInner managedIdentitySqlControlSettings = new ManagedIdentitySqlControlSettingsModelInner();
        managedIdentitySqlControlSettings.withGrantSqlControlToManagedIdentity(grantSqlControlToManagedIdentity);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), this.client.acceptLanguage(), managedIdentitySqlControlSettings, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ManagedIdentitySqlControlSettingsModelInner>() { }.getType());
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedIdentitySqlControlSettingsModelInner object if successful.
     */
    public ManagedIdentitySqlControlSettingsModelInner beginCreateOrUpdate(String resourceGroupName, String workspaceName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName).toBlocking().single().body();
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedIdentitySqlControlSettingsModelInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, final ServiceCallback<ManagedIdentitySqlControlSettingsModelInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName), serviceCallback);
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedIdentitySqlControlSettingsModelInner object
     */
    public Observable<ManagedIdentitySqlControlSettingsModelInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName).map(new Func1<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>, ManagedIdentitySqlControlSettingsModelInner>() {
            @Override
            public ManagedIdentitySqlControlSettingsModelInner call(ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedIdentitySqlControlSettingsModelInner object
     */
    public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity = null;
        ManagedIdentitySqlControlSettingsModelInner managedIdentitySqlControlSettings = new ManagedIdentitySqlControlSettingsModelInner();
        managedIdentitySqlControlSettings.withGrantSqlControlToManagedIdentity(null);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), this.client.acceptLanguage(), managedIdentitySqlControlSettings, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedIdentitySqlControlSettingsModelInner object if successful.
     */
    public ManagedIdentitySqlControlSettingsModelInner beginCreateOrUpdate(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, grantSqlControlToManagedIdentity).toBlocking().single().body();
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedIdentitySqlControlSettingsModelInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity, final ServiceCallback<ManagedIdentitySqlControlSettingsModelInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, grantSqlControlToManagedIdentity), serviceCallback);
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedIdentitySqlControlSettingsModelInner object
     */
    public Observable<ManagedIdentitySqlControlSettingsModelInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, grantSqlControlToManagedIdentity).map(new Func1<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>, ManagedIdentitySqlControlSettingsModelInner>() {
            @Override
            public ManagedIdentitySqlControlSettingsModelInner call(ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update Managed Identity Sql Control Settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param grantSqlControlToManagedIdentity Grant sql control to managed identity
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedIdentitySqlControlSettingsModelInner object
     */
    public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(grantSqlControlToManagedIdentity);
        ManagedIdentitySqlControlSettingsModelInner managedIdentitySqlControlSettings = new ManagedIdentitySqlControlSettingsModelInner();
        managedIdentitySqlControlSettings.withGrantSqlControlToManagedIdentity(grantSqlControlToManagedIdentity);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), this.client.acceptLanguage(), managedIdentitySqlControlSettings, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagedIdentitySqlControlSettingsModelInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ManagedIdentitySqlControlSettingsModelInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ManagedIdentitySqlControlSettingsModelInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ManagedIdentitySqlControlSettingsModelInner>() { }.getType())
                .register(201, new TypeToken<Void>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

}
