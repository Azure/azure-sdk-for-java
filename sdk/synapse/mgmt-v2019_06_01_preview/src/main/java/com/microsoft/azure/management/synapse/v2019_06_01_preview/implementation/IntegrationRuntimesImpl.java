/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.IntegrationRuntimes;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.IntegrationRuntimeStatusResponse;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.IntegrationRuntimeResource;

class IntegrationRuntimesImpl extends WrapperImpl<IntegrationRuntimesInner> implements IntegrationRuntimes {
    private final SynapseManager manager;

    IntegrationRuntimesImpl(SynapseManager manager) {
        super(manager.inner().integrationRuntimes());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public IntegrationRuntimeResourceImpl define(String name) {
        return wrapModel(name);
    }

    private IntegrationRuntimeResourceImpl wrapModel(IntegrationRuntimeResourceInner inner) {
        return  new IntegrationRuntimeResourceImpl(inner, manager());
    }

    private IntegrationRuntimeResourceImpl wrapModel(String name) {
        return new IntegrationRuntimeResourceImpl(name, this.manager());
    }

    @Override
    public Completable upgradeAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimesInner client = this.inner();
        return client.upgradeAsync(resourceGroupName, workspaceName, integrationRuntimeName).toCompletable();
    }

    @Override
    public Observable<IntegrationRuntimeStatusResponse> startAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimesInner client = this.inner();
        return client.startAsync(resourceGroupName, workspaceName, integrationRuntimeName)
        .map(new Func1<IntegrationRuntimeStatusResponseInner, IntegrationRuntimeStatusResponse>() {
            @Override
            public IntegrationRuntimeStatusResponse call(IntegrationRuntimeStatusResponseInner inner) {
                return new IntegrationRuntimeStatusResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable stopAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimesInner client = this.inner();
        return client.stopAsync(resourceGroupName, workspaceName, integrationRuntimeName).toCompletable();
    }

    @Override
    public Completable enableInteractiveQueryAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimesInner client = this.inner();
        return client.enableInteractiveQueryAsync(resourceGroupName, workspaceName, integrationRuntimeName).toCompletable();
    }

    @Override
    public Completable disableInteractiveQueryAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimesInner client = this.inner();
        return client.disableInteractiveQueryAsync(resourceGroupName, workspaceName, integrationRuntimeName).toCompletable();
    }

    @Override
    public Observable<IntegrationRuntimeResource> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName) {
        IntegrationRuntimesInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMapIterable(new Func1<Page<IntegrationRuntimeResourceInner>, Iterable<IntegrationRuntimeResourceInner>>() {
            @Override
            public Iterable<IntegrationRuntimeResourceInner> call(Page<IntegrationRuntimeResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<IntegrationRuntimeResourceInner, IntegrationRuntimeResource>() {
            @Override
            public IntegrationRuntimeResource call(IntegrationRuntimeResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<IntegrationRuntimeResource> getAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimesInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, integrationRuntimeName)
        .flatMap(new Func1<IntegrationRuntimeResourceInner, Observable<IntegrationRuntimeResource>>() {
            @Override
            public Observable<IntegrationRuntimeResource> call(IntegrationRuntimeResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((IntegrationRuntimeResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String integrationRuntimeName) {
        IntegrationRuntimesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, integrationRuntimeName).toCompletable();
    }

}
