/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.CheckNameAvailabilityRequest;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.ErrorContractException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Operations.
 */
public class OperationsInner {
    /** The Retrofit service to perform REST calls. */
    private OperationsService service;
    /** The service client containing this operation class. */
    private SynapseManagementClientImpl client;

    /**
     * Initializes an instance of OperationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public OperationsInner(Retrofit retrofit, SynapseManagementClientImpl client) {
        this.service = retrofit.create(OperationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Operations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface OperationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.Operations checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Synapse/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body CheckNameAvailabilityRequest request, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.Operations list" })
        @GET("providers/Microsoft.Synapse/operations")
        Observable<Response<ResponseBody>> list(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.Operations getLocationHeaderResult" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/operationResults/{operationId}")
        Observable<Response<ResponseBody>> getLocationHeaderResult(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("operationId") String operationId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.synapse.v2019_06_01_preview.Operations getAzureAsyncHeaderResult" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/operationStatuses/{operationId}")
        Observable<Response<ResponseBody>> getAzureAsyncHeaderResult(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("operationId") String operationId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Check name availability.
     * Check whether a workspace name is available.
     *
     * @param request The check request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckNameAvailabilityResponseInner object if successful.
     */
    public CheckNameAvailabilityResponseInner checkNameAvailability(CheckNameAvailabilityRequest request) {
        return checkNameAvailabilityWithServiceResponseAsync(request).toBlocking().single().body();
    }

    /**
     * Check name availability.
     * Check whether a workspace name is available.
     *
     * @param request The check request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckNameAvailabilityResponseInner> checkNameAvailabilityAsync(CheckNameAvailabilityRequest request, final ServiceCallback<CheckNameAvailabilityResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(request), serviceCallback);
    }

    /**
     * Check name availability.
     * Check whether a workspace name is available.
     *
     * @param request The check request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityResponseInner object
     */
    public Observable<CheckNameAvailabilityResponseInner> checkNameAvailabilityAsync(CheckNameAvailabilityRequest request) {
        return checkNameAvailabilityWithServiceResponseAsync(request).map(new Func1<ServiceResponse<CheckNameAvailabilityResponseInner>, CheckNameAvailabilityResponseInner>() {
            @Override
            public CheckNameAvailabilityResponseInner call(ServiceResponse<CheckNameAvailabilityResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check name availability.
     * Check whether a workspace name is available.
     *
     * @param request The check request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityResponseInner object
     */
    public Observable<ServiceResponse<CheckNameAvailabilityResponseInner>> checkNameAvailabilityWithServiceResponseAsync(CheckNameAvailabilityRequest request) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.checkNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), request, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckNameAvailabilityResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckNameAvailabilityResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckNameAvailabilityResponseInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckNameAvailabilityResponseInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckNameAvailabilityResponseInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckNameAvailabilityResponseInner>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * All operations.
     * Get all available operations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AvailableRpOperationInner&gt; object if successful.
     */
    public List<AvailableRpOperationInner> list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * All operations.
     * Get all available operations.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AvailableRpOperationInner>> listAsync(final ServiceCallback<List<AvailableRpOperationInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * All operations.
     * Get all available operations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailableRpOperationInner&gt; object
     */
    public Observable<List<AvailableRpOperationInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<AvailableRpOperationInner>>, List<AvailableRpOperationInner>>() {
            @Override
            public List<AvailableRpOperationInner> call(ServiceResponse<List<AvailableRpOperationInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * All operations.
     * Get all available operations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailableRpOperationInner&gt; object
     */
    public Observable<ServiceResponse<List<AvailableRpOperationInner>>> listWithServiceResponseAsync() {
        return service.list(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<AvailableRpOperationInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<AvailableRpOperationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<AvailableRpOperationInner>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<AvailableRpOperationInner>> listDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException {
        return this.client.restClient().responseBuilderFactory().<List<AvailableRpOperationInner>, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<AvailableRpOperationInner>>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Get operation result.
     * Get the result of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getLocationHeaderResult(String resourceGroupName, String workspaceName, String operationId) {
        getLocationHeaderResultWithServiceResponseAsync(resourceGroupName, workspaceName, operationId).toBlocking().single().body();
    }

    /**
     * Get operation result.
     * Get the result of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getLocationHeaderResultAsync(String resourceGroupName, String workspaceName, String operationId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(getLocationHeaderResultWithServiceResponseAsync(resourceGroupName, workspaceName, operationId), serviceCallback);
    }

    /**
     * Get operation result.
     * Get the result of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> getLocationHeaderResultAsync(String resourceGroupName, String workspaceName, String operationId) {
        return getLocationHeaderResultWithServiceResponseAsync(resourceGroupName, workspaceName, operationId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Get operation result.
     * Get the result of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> getLocationHeaderResultWithServiceResponseAsync(String resourceGroupName, String workspaceName, String operationId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getLocationHeaderResult(this.client.subscriptionId(), resourceGroupName, workspaceName, operationId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = getLocationHeaderResultDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> getLocationHeaderResultDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(201, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

    /**
     * Get operation status.
     * Get the status of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorContractException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResourceInner object if successful.
     */
    public OperationResourceInner getAzureAsyncHeaderResult(String resourceGroupName, String workspaceName, String operationId) {
        return getAzureAsyncHeaderResultWithServiceResponseAsync(resourceGroupName, workspaceName, operationId).toBlocking().single().body();
    }

    /**
     * Get operation status.
     * Get the status of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResourceInner> getAzureAsyncHeaderResultAsync(String resourceGroupName, String workspaceName, String operationId, final ServiceCallback<OperationResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAzureAsyncHeaderResultWithServiceResponseAsync(resourceGroupName, workspaceName, operationId), serviceCallback);
    }

    /**
     * Get operation status.
     * Get the status of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResourceInner object
     */
    public Observable<OperationResourceInner> getAzureAsyncHeaderResultAsync(String resourceGroupName, String workspaceName, String operationId) {
        return getAzureAsyncHeaderResultWithServiceResponseAsync(resourceGroupName, workspaceName, operationId).map(new Func1<ServiceResponse<OperationResourceInner>, OperationResourceInner>() {
            @Override
            public OperationResourceInner call(ServiceResponse<OperationResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get operation status.
     * Get the status of an operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param operationId Operation ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResourceInner object
     */
    public Observable<ServiceResponse<OperationResourceInner>> getAzureAsyncHeaderResultWithServiceResponseAsync(String resourceGroupName, String workspaceName, String operationId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getAzureAsyncHeaderResult(this.client.subscriptionId(), resourceGroupName, workspaceName, operationId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationResourceInner> clientResponse = getAzureAsyncHeaderResultDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationResourceInner> getAzureAsyncHeaderResultDelegate(Response<ResponseBody> response) throws ErrorContractException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationResourceInner, ErrorContractException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationResourceInner>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .registerError(ErrorContractException.class)
                .build(response);
    }

}
