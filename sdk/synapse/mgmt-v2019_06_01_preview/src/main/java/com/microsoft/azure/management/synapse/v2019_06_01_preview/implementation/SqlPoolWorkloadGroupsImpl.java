/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.SqlPoolWorkloadGroups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.WorkloadGroup;

class SqlPoolWorkloadGroupsImpl extends WrapperImpl<SqlPoolWorkloadGroupsInner> implements SqlPoolWorkloadGroups {
    private final SynapseManager manager;

    SqlPoolWorkloadGroupsImpl(SynapseManager manager) {
        super(manager.inner().sqlPoolWorkloadGroups());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public WorkloadGroupImpl define(String name) {
        return wrapModel(name);
    }

    private WorkloadGroupImpl wrapModel(WorkloadGroupInner inner) {
        return  new WorkloadGroupImpl(inner, manager());
    }

    private WorkloadGroupImpl wrapModel(String name) {
        return new WorkloadGroupImpl(name, this.manager());
    }

    @Override
    public Observable<WorkloadGroup> listAsync(final String resourceGroupName, final String workspaceName, final String sqlPoolName) {
        SqlPoolWorkloadGroupsInner client = this.inner();
        return client.listAsync(resourceGroupName, workspaceName, sqlPoolName)
        .flatMapIterable(new Func1<Page<WorkloadGroupInner>, Iterable<WorkloadGroupInner>>() {
            @Override
            public Iterable<WorkloadGroupInner> call(Page<WorkloadGroupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WorkloadGroupInner, WorkloadGroup>() {
            @Override
            public WorkloadGroup call(WorkloadGroupInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<WorkloadGroup> getAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName) {
        SqlPoolWorkloadGroupsInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName)
        .flatMap(new Func1<WorkloadGroupInner, Observable<WorkloadGroup>>() {
            @Override
            public Observable<WorkloadGroup> call(WorkloadGroupInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((WorkloadGroup)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName) {
        SqlPoolWorkloadGroupsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName).toCompletable();
    }

}
