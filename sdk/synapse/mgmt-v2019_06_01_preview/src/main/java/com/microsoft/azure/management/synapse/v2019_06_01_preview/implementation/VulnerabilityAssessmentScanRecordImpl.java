/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import com.microsoft.azure.management.synapse.v2019_06_01_preview.VulnerabilityAssessmentScanRecord;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.VulnerabilityAssessmentScanError;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.VulnerabilityAssessmentScanState;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.VulnerabilityAssessmentScanTriggerType;

class VulnerabilityAssessmentScanRecordImpl extends IndexableRefreshableWrapperImpl<VulnerabilityAssessmentScanRecord, VulnerabilityAssessmentScanRecordInner> implements VulnerabilityAssessmentScanRecord {
    private final SynapseManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String sqlPoolName;
    private String scanId;

    VulnerabilityAssessmentScanRecordImpl(VulnerabilityAssessmentScanRecordInner inner,  SynapseManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.sqlPoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "sqlPools");
        this.scanId = IdParsingUtils.getValueFromIdByName(inner.id(), "scans");
    }

    @Override
    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<VulnerabilityAssessmentScanRecordInner> getInnerAsync() {
        SqlPoolVulnerabilityAssessmentScansInner client = this.manager().inner().sqlPoolVulnerabilityAssessmentScans();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.sqlPoolName, this.scanId);
    }



    @Override
    public DateTime endTime() {
        return this.inner().endTime();
    }

    @Override
    public List<VulnerabilityAssessmentScanError> errors() {
        return this.inner().errors();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer numberOfFailedSecurityChecks() {
        return this.inner().numberOfFailedSecurityChecks();
    }

    @Override
    public String scanId() {
        return this.inner().scanId();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public VulnerabilityAssessmentScanState state() {
        return this.inner().state();
    }

    @Override
    public String storageContainerPath() {
        return this.inner().storageContainerPath();
    }

    @Override
    public VulnerabilityAssessmentScanTriggerType triggerType() {
        return this.inner().triggerType();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
