/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import com.microsoft.azure.management.synapse.v2019_06_01_preview.ServerVulnerabilityAssessment;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.VulnerabilityAssessmentRecurringScansProperties;

class ServerVulnerabilityAssessmentImpl extends CreatableUpdatableImpl<ServerVulnerabilityAssessment, ServerVulnerabilityAssessmentInner, ServerVulnerabilityAssessmentImpl> implements ServerVulnerabilityAssessment, ServerVulnerabilityAssessment.Definition, ServerVulnerabilityAssessment.Update {
    private final SynapseManager manager;
    private String resourceGroupName;
    private String workspaceName;

    ServerVulnerabilityAssessmentImpl(String name, SynapseManager manager) {
        super(name, new ServerVulnerabilityAssessmentInner());
        this.manager = manager;
        // Set resource name
        this.workspaceName = name;
        //
    }

    ServerVulnerabilityAssessmentImpl(ServerVulnerabilityAssessmentInner inner, SynapseManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.workspaceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        //
    }

    @Override
    public SynapseManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServerVulnerabilityAssessment> createResourceAsync() {
        WorkspaceManagedSqlServerVulnerabilityAssessmentsInner client = this.manager().inner().workspaceManagedSqlServerVulnerabilityAssessments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ServerVulnerabilityAssessment> updateResourceAsync() {
        WorkspaceManagedSqlServerVulnerabilityAssessmentsInner client = this.manager().inner().workspaceManagedSqlServerVulnerabilityAssessments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ServerVulnerabilityAssessmentInner> getInnerAsync() {
        WorkspaceManagedSqlServerVulnerabilityAssessmentsInner client = this.manager().inner().workspaceManagedSqlServerVulnerabilityAssessments();
        return client.getAsync(this.resourceGroupName, this.workspaceName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public VulnerabilityAssessmentRecurringScansProperties recurringScans() {
        return this.inner().recurringScans();
    }

    @Override
    public String storageAccountAccessKey() {
        return this.inner().storageAccountAccessKey();
    }

    @Override
    public String storageContainerPath() {
        return this.inner().storageContainerPath();
    }

    @Override
    public String storageContainerSasKey() {
        return this.inner().storageContainerSasKey();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ServerVulnerabilityAssessmentImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    @Override
    public ServerVulnerabilityAssessmentImpl withStorageContainerPath(String storageContainerPath) {
        this.inner().withStorageContainerPath(storageContainerPath);
        return this;
    }

    @Override
    public ServerVulnerabilityAssessmentImpl withRecurringScans(VulnerabilityAssessmentRecurringScansProperties recurringScans) {
        this.inner().withRecurringScans(recurringScans);
        return this;
    }

    @Override
    public ServerVulnerabilityAssessmentImpl withStorageAccountAccessKey(String storageAccountAccessKey) {
        this.inner().withStorageAccountAccessKey(storageAccountAccessKey);
        return this;
    }

    @Override
    public ServerVulnerabilityAssessmentImpl withStorageContainerSasKey(String storageContainerSasKey) {
        this.inner().withStorageContainerSasKey(storageContainerSasKey);
        return this;
    }

}
