/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation.WorkloadClassifierInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation.SynapseManager;

/**
 * Type representing WorkloadClassifier.
 */
public interface WorkloadClassifier extends HasInner<WorkloadClassifierInner>, Indexable, Refreshable<WorkloadClassifier>, Updatable<WorkloadClassifier.Update>, HasManager<SynapseManager> {
    /**
     * @return the context value.
     */
    String context();

    /**
     * @return the endTime value.
     */
    String endTime();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the importance value.
     */
    String importance();

    /**
     * @return the label value.
     */
    String label();

    /**
     * @return the memberName value.
     */
    String memberName();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the startTime value.
     */
    String startTime();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the WorkloadClassifier definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithWorkloadGroup, DefinitionStages.WithMemberName, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of WorkloadClassifier definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a WorkloadClassifier definition.
         */
        interface Blank extends WithWorkloadGroup {
        }

        /**
         * The stage of the workloadclassifier definition allowing to specify WorkloadGroup.
         */
        interface WithWorkloadGroup {
           /**
            * Specifies resourceGroupName, workspaceName, sqlPoolName, workloadGroupName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param workspaceName The name of the workspace
            * @param sqlPoolName SQL pool name
            * @param workloadGroupName The name of the workload group
            * @return the next definition stage
            */
            WithMemberName withExistingWorkloadGroup(String resourceGroupName, String workspaceName, String sqlPoolName, String workloadGroupName);
        }

        /**
         * The stage of the workloadclassifier definition allowing to specify MemberName.
         */
        interface WithMemberName {
           /**
            * Specifies memberName.
            * @param memberName The workload classifier member name
            * @return the next definition stage
            */
            WithCreate withMemberName(String memberName);
        }

        /**
         * The stage of the workloadclassifier definition allowing to specify Context.
         */
        interface WithContext {
            /**
             * Specifies context.
             * @param context The workload classifier context
             * @return the next definition stage
             */
            WithCreate withContext(String context);
        }

        /**
         * The stage of the workloadclassifier definition allowing to specify EndTime.
         */
        interface WithEndTime {
            /**
             * Specifies endTime.
             * @param endTime The workload classifier end time for classification
             * @return the next definition stage
             */
            WithCreate withEndTime(String endTime);
        }

        /**
         * The stage of the workloadclassifier definition allowing to specify Importance.
         */
        interface WithImportance {
            /**
             * Specifies importance.
             * @param importance The workload classifier importance
             * @return the next definition stage
             */
            WithCreate withImportance(String importance);
        }

        /**
         * The stage of the workloadclassifier definition allowing to specify Label.
         */
        interface WithLabel {
            /**
             * Specifies label.
             * @param label The workload classifier label
             * @return the next definition stage
             */
            WithCreate withLabel(String label);
        }

        /**
         * The stage of the workloadclassifier definition allowing to specify StartTime.
         */
        interface WithStartTime {
            /**
             * Specifies startTime.
             * @param startTime The workload classifier start time for classification
             * @return the next definition stage
             */
            WithCreate withStartTime(String startTime);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<WorkloadClassifier>, DefinitionStages.WithContext, DefinitionStages.WithEndTime, DefinitionStages.WithImportance, DefinitionStages.WithLabel, DefinitionStages.WithStartTime {
        }
    }
    /**
     * The template for a WorkloadClassifier update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<WorkloadClassifier>, UpdateStages.WithContext, UpdateStages.WithEndTime, UpdateStages.WithImportance, UpdateStages.WithLabel, UpdateStages.WithStartTime {
    }

    /**
     * Grouping of WorkloadClassifier update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the workloadclassifier update allowing to specify Context.
         */
        interface WithContext {
            /**
             * Specifies context.
             * @param context The workload classifier context
             * @return the next update stage
             */
            Update withContext(String context);
        }

        /**
         * The stage of the workloadclassifier update allowing to specify EndTime.
         */
        interface WithEndTime {
            /**
             * Specifies endTime.
             * @param endTime The workload classifier end time for classification
             * @return the next update stage
             */
            Update withEndTime(String endTime);
        }

        /**
         * The stage of the workloadclassifier update allowing to specify Importance.
         */
        interface WithImportance {
            /**
             * Specifies importance.
             * @param importance The workload classifier importance
             * @return the next update stage
             */
            Update withImportance(String importance);
        }

        /**
         * The stage of the workloadclassifier update allowing to specify Label.
         */
        interface WithLabel {
            /**
             * Specifies label.
             * @param label The workload classifier label
             * @return the next update stage
             */
            Update withLabel(String label);
        }

        /**
         * The stage of the workloadclassifier update allowing to specify StartTime.
         */
        interface WithStartTime {
            /**
             * Specifies startTime.
             * @param startTime The workload classifier start time for classification
             * @return the next update stage
             */
            Update withStartTime(String startTime);
        }

    }
}
