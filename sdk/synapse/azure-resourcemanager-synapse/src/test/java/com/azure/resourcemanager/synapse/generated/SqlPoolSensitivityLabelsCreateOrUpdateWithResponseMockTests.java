// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.SensitivityLabel;
import com.azure.resourcemanager.synapse.models.SensitivityLabelRank;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlPoolSensitivityLabelsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"schemaName\":\"ik\",\"tableName\":\"hzixyqhfnkvy\",\"columnName\":\"qqdseipnquwzxhrp\",\"labelName\":\"odlhkfktl\",\"labelId\":\"dsobjopnouhbq\",\"informationType\":\"kqxs\",\"informationTypeId\":\"uzyigfcvcewbwqhd\",\"isDisabled\":false,\"rank\":\"High\"},\"managedBy\":\"mrncmaz\",\"id\":\"fsq\",\"name\":\"hyqmrejparnpv\",\"type\":\"rsz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SensitivityLabel response = manager.sqlPoolSensitivityLabels()
            .define()
            .withExistingColumn("kfqbriqulwwt", "jmeqkvy", "zokpoy", "ohuen", "na", "jphmpoejnglpws")
            .withLabelName("wxf")
            .withLabelId("kvemyzdpczaqpqi")
            .withInformationType("bmptrwtxzu")
            .withInformationTypeId("amonatnizex")
            .withRank(SensitivityLabelRank.NONE)
            .create();

        Assertions.assertEquals("odlhkfktl", response.labelName());
        Assertions.assertEquals("dsobjopnouhbq", response.labelId());
        Assertions.assertEquals("kqxs", response.informationType());
        Assertions.assertEquals("uzyigfcvcewbwqhd", response.informationTypeId());
        Assertions.assertEquals(SensitivityLabelRank.HIGH, response.rank());
    }
}
