// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SparkConfigurationResourceInner;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SparkConfigurationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SparkConfigurationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"knmzlanrupdwvnp\",\"configs\":{\"laiwdcxsmlzzh\":\"nzqtpjhmqrhvt\",\"vlnnpx\":\"dtxetlgydlh\",\"fiqgeaar\":\"b\"},\"annotations\":[\"ekglklb\",\"ulidwc\",\"vmzegj\"],\"notes\":\"fhjirwgdnqzbrfk\",\"createdBy\":\"zhzmtksjci\",\"created\":\"2021-07-31T03:36:59Z\",\"configMergeRule\":{\"lkeuac\":\"xcdglj\",\"dgycxnmskwhqjjy\":\"tomflrytswfpf\",\"dwqslsrhmpqvw\":\"lurlpshhkvp\",\"qejo\":\"skondcbrwimu\"}},\"etag\":\"vyrrleaesinuq\",\"id\":\"ljqobbpihehcecyb\",\"name\":\"rqbrjbbmpxdlvyk\",\"type\":\"rexcrseqwjksghu\"}")
            .toObject(SparkConfigurationResourceInner.class);
        Assertions.assertEquals("knmzlanrupdwvnp", model.description());
        Assertions.assertEquals("nzqtpjhmqrhvt", model.configs().get("laiwdcxsmlzzh"));
        Assertions.assertEquals("ekglklb", model.annotations().get(0));
        Assertions.assertEquals("fhjirwgdnqzbrfk", model.notes());
        Assertions.assertEquals("zhzmtksjci", model.createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T03:36:59Z"), model.created());
        Assertions.assertEquals("xcdglj", model.configMergeRule().get("lkeuac"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SparkConfigurationResourceInner model = new SparkConfigurationResourceInner().withDescription("knmzlanrupdwvnp")
            .withConfigs(mapOf("laiwdcxsmlzzh", "nzqtpjhmqrhvt", "vlnnpx", "dtxetlgydlh", "fiqgeaar", "b"))
            .withAnnotations(Arrays.asList("ekglklb", "ulidwc", "vmzegj"))
            .withNotes("fhjirwgdnqzbrfk")
            .withCreatedBy("zhzmtksjci")
            .withCreated(OffsetDateTime.parse("2021-07-31T03:36:59Z"))
            .withConfigMergeRule(mapOf("lkeuac", "xcdglj", "dgycxnmskwhqjjy", "tomflrytswfpf", "dwqslsrhmpqvw",
                "lurlpshhkvp", "qejo", "skondcbrwimu"));
        model = BinaryData.fromObject(model).toObject(SparkConfigurationResourceInner.class);
        Assertions.assertEquals("knmzlanrupdwvnp", model.description());
        Assertions.assertEquals("nzqtpjhmqrhvt", model.configs().get("laiwdcxsmlzzh"));
        Assertions.assertEquals("ekglklb", model.annotations().get(0));
        Assertions.assertEquals("fhjirwgdnqzbrfk", model.notes());
        Assertions.assertEquals("zhzmtksjci", model.createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T03:36:59Z"), model.created());
        Assertions.assertEquals("xcdglj", model.configMergeRule().get("lkeuac"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
