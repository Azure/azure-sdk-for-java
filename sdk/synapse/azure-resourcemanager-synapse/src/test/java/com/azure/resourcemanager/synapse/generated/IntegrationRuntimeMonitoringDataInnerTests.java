// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.IntegrationRuntimeMonitoringDataInner;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeNodeMonitoringData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeMonitoringDataInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeMonitoringDataInner model = BinaryData.fromString(
            "{\"name\":\"lubhvjg\",\"nodes\":[{\"nodeName\":\"uyzlw\",\"availableMemoryInMB\":1284227714,\"cpuUtilization\":1438409396,\"concurrentJobsLimit\":2072585958,\"concurrentJobsRunning\":136044381,\"maxConcurrentJobs\":307517518,\"sentBytes\":4.549527,\"receivedBytes\":28.378052,\"\":{\"ykyujxsg\":\"datamczjkm\"}}]}")
            .toObject(IntegrationRuntimeMonitoringDataInner.class);
        Assertions.assertEquals("lubhvjg", model.name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeMonitoringDataInner model = new IntegrationRuntimeMonitoringDataInner().withName("lubhvjg")
            .withNodes(Arrays.asList(new IntegrationRuntimeNodeMonitoringData()
                .withAdditionalProperties(mapOf("nodeName", "uyzlw", "cpuUtilization", 1438409396, "receivedBytes",
                    28.378052f, "concurrentJobsLimit", 2072585958, "concurrentJobsRunning", 136044381,
                    "maxConcurrentJobs", 307517518, "availableMemoryInMB", 1284227714, "sentBytes", 4.549527f))));
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeMonitoringDataInner.class);
        Assertions.assertEquals("lubhvjg", model.name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
