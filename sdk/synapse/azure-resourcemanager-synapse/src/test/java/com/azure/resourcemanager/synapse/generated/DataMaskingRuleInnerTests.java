// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.DataMaskingRuleInner;
import com.azure.resourcemanager.synapse.models.DataMaskingFunction;
import com.azure.resourcemanager.synapse.models.DataMaskingRuleState;
import org.junit.jupiter.api.Assertions;

public final class DataMaskingRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataMaskingRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"id\":\"tac\",\"aliasName\":\"bj\",\"ruleState\":\"Enabled\",\"schemaName\":\"zcjznmwcpmgua\",\"tableName\":\"draufactkah\",\"columnName\":\"ovajjziuxxps\",\"maskingFunction\":\"CCN\",\"numberFrom\":\"e\",\"numberTo\":\"lfg\",\"prefixSize\":\"qubkw\",\"suffixSize\":\"enr\",\"replacementString\":\"utujba\"},\"location\":\"juohminyflnorw\",\"kind\":\"uvwpklvxwmyg\",\"id\":\"xpgpq\",\"name\":\"hiszepnnbjcrxgib\",\"type\":\"daxconfozauorsuk\"}")
            .toObject(DataMaskingRuleInner.class);
        Assertions.assertEquals("bj", model.aliasName());
        Assertions.assertEquals(DataMaskingRuleState.ENABLED, model.ruleState());
        Assertions.assertEquals("zcjznmwcpmgua", model.schemaName());
        Assertions.assertEquals("draufactkah", model.tableName());
        Assertions.assertEquals("ovajjziuxxps", model.columnName());
        Assertions.assertEquals(DataMaskingFunction.CCN, model.maskingFunction());
        Assertions.assertEquals("e", model.numberFrom());
        Assertions.assertEquals("lfg", model.numberTo());
        Assertions.assertEquals("qubkw", model.prefixSize());
        Assertions.assertEquals("enr", model.suffixSize());
        Assertions.assertEquals("utujba", model.replacementString());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataMaskingRuleInner model = new DataMaskingRuleInner().withAliasName("bj")
            .withRuleState(DataMaskingRuleState.ENABLED)
            .withSchemaName("zcjznmwcpmgua")
            .withTableName("draufactkah")
            .withColumnName("ovajjziuxxps")
            .withMaskingFunction(DataMaskingFunction.CCN)
            .withNumberFrom("e")
            .withNumberTo("lfg")
            .withPrefixSize("qubkw")
            .withSuffixSize("enr")
            .withReplacementString("utujba");
        model = BinaryData.fromObject(model).toObject(DataMaskingRuleInner.class);
        Assertions.assertEquals("bj", model.aliasName());
        Assertions.assertEquals(DataMaskingRuleState.ENABLED, model.ruleState());
        Assertions.assertEquals("zcjznmwcpmgua", model.schemaName());
        Assertions.assertEquals("draufactkah", model.tableName());
        Assertions.assertEquals("ovajjziuxxps", model.columnName());
        Assertions.assertEquals(DataMaskingFunction.CCN, model.maskingFunction());
        Assertions.assertEquals("e", model.numberFrom());
        Assertions.assertEquals("lfg", model.numberTo());
        Assertions.assertEquals("qubkw", model.prefixSize());
        Assertions.assertEquals("enr", model.suffixSize());
        Assertions.assertEquals("utujba", model.replacementString());
    }
}
