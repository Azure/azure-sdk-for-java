// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.WorkloadClassifierInner;
import org.junit.jupiter.api.Assertions;

public final class WorkloadClassifierInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadClassifierInner model = BinaryData.fromString(
            "{\"properties\":{\"memberName\":\"srxuzvoam\",\"label\":\"cqiosmgbza\",\"context\":\"xqdlyrtltlapr\",\"startTime\":\"zkatb\",\"endTime\":\"mznnbsoqeqalarvl\",\"importance\":\"un\"},\"id\":\"tgfebwln\",\"name\":\"mhyreeudz\",\"type\":\"av\"}")
            .toObject(WorkloadClassifierInner.class);
        Assertions.assertEquals("srxuzvoam", model.memberName());
        Assertions.assertEquals("cqiosmgbza", model.label());
        Assertions.assertEquals("xqdlyrtltlapr", model.context());
        Assertions.assertEquals("zkatb", model.startTime());
        Assertions.assertEquals("mznnbsoqeqalarvl", model.endTime());
        Assertions.assertEquals("un", model.importance());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadClassifierInner model = new WorkloadClassifierInner().withMemberName("srxuzvoam")
            .withLabel("cqiosmgbza")
            .withContext("xqdlyrtltlapr")
            .withStartTime("zkatb")
            .withEndTime("mznnbsoqeqalarvl")
            .withImportance("un");
        model = BinaryData.fromObject(model).toObject(WorkloadClassifierInner.class);
        Assertions.assertEquals("srxuzvoam", model.memberName());
        Assertions.assertEquals("cqiosmgbza", model.label());
        Assertions.assertEquals("xqdlyrtltlapr", model.context());
        Assertions.assertEquals("zkatb", model.startTime());
        Assertions.assertEquals("mznnbsoqeqalarvl", model.endTime());
        Assertions.assertEquals("un", model.importance());
    }
}
