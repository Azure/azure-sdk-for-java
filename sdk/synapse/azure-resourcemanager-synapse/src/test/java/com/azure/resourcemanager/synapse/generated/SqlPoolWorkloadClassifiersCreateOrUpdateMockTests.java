// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.WorkloadClassifier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlPoolWorkloadClassifiersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"memberName\":\"wglihezomu\",\"label\":\"qgisnionetbzdrd\",\"context\":\"enx\",\"startTime\":\"tlzlmtrlxcznnhz\",\"endTime\":\"nbmxlx\",\"importance\":\"tygeqzus\"},\"id\":\"toqcahfsgbjm\",\"name\":\"reesrfwsszvl\",\"type\":\"wliso\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadClassifier response = manager.sqlPoolWorkloadClassifiers()
            .define("hqodv")
            .withExistingWorkloadGroup("fwzlgzawkgyepeya", "nnidmdiawpzxk", "rntmkctdhu", "sgwqpsqaz")
            .withMemberName("cnbhcb")
            .withLabel("kztibni")
            .withContext("tsxjmfmeftvhkmoo")
            .withStartTime("rh")
            .withEndTime("bwgmjgrul")
            .withImportance("ogxhcxn")
            .create();

        Assertions.assertEquals("wglihezomu", response.memberName());
        Assertions.assertEquals("qgisnionetbzdrd", response.label());
        Assertions.assertEquals("enx", response.context());
        Assertions.assertEquals("tlzlmtrlxcznnhz", response.startTime());
        Assertions.assertEquals("nbmxlx", response.endTime());
        Assertions.assertEquals("tygeqzus", response.importance());
    }
}
