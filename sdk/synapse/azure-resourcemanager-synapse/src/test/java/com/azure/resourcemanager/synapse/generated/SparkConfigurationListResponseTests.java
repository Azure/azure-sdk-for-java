// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SparkConfigurationResourceInner;
import com.azure.resourcemanager.synapse.models.SparkConfigurationListResponse;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SparkConfigurationListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SparkConfigurationListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"description\":\"oe\",\"configs\":{\"drlktg\":\"wankltytmhdroznn\",\"waeeczgfb\":\"csgguxhemlw\",\"zujksrlsmdes\":\"kklelssxblycs\"},\"annotations\":[\"pvmjcdoewbid\",\"vteo\",\"xvgpiude\",\"gfsxzec\"],\"notes\":\"xw\",\"createdBy\":\"fykhvuhxepmru\",\"created\":\"2021-01-01T13:09:47Z\",\"configMergeRule\":{\"lujdjltymkmv\":\"aobn\",\"pphkixkykxds\":\"uihywart\"}},\"etag\":\"pemmucfxhik\",\"id\":\"flrmymyi\",\"name\":\"cqlh\",\"type\":\"isws\"},{\"properties\":{\"description\":\"iiiovgqcgxuugq\",\"configs\":{\"dtguk\":\"totiowlxteqdptjg\",\"gygqwah\":\"anblwphqlkccu\",\"gniiprglvaw\":\"iul\"},\"annotations\":[\"d\"],\"notes\":\"ypivlsbb\",\"createdBy\":\"mcub\",\"created\":\"2021-07-10T21:52:44Z\",\"configMergeRule\":{\"h\":\"xxkubvphavp\",\"bbttefjo\":\"rbqgvgov\"}},\"etag\":\"ssqyzqedik\",\"id\":\"frdbiqmrjgeihf\",\"name\":\"lg\",\"type\":\"wfiwzcxmj\"},{\"properties\":{\"description\":\"yephmgtvljvrcmyf\",\"configs\":{\"pomyqwcabvnuile\":\"pgxh\"},\"annotations\":[\"swlpaugmrmfj\",\"rxwtoaukhfkvc\"],\"notes\":\"izmoaeds\",\"createdBy\":\"wuived\",\"created\":\"2021-07-25T04:49:06Z\",\"configMergeRule\":{\"omguamlj\":\"ewxeiqbpsm\",\"gmsplzgaufcshhv\":\"l\",\"ixt\":\"ewgnxkympqanxrj\"}},\"etag\":\"taoypnyghshxc\",\"id\":\"lhkgmnsghp\",\"name\":\"ycphdrwjjkhvyo\",\"type\":\"ac\"}],\"nextLink\":\"zvxnqmhrp\"}")
            .toObject(SparkConfigurationListResponse.class);
        Assertions.assertEquals("oe", model.value().get(0).description());
        Assertions.assertEquals("wankltytmhdroznn", model.value().get(0).configs().get("drlktg"));
        Assertions.assertEquals("pvmjcdoewbid", model.value().get(0).annotations().get(0));
        Assertions.assertEquals("xw", model.value().get(0).notes());
        Assertions.assertEquals("fykhvuhxepmru", model.value().get(0).createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-01T13:09:47Z"), model.value().get(0).created());
        Assertions.assertEquals("aobn", model.value().get(0).configMergeRule().get("lujdjltymkmv"));
        Assertions.assertEquals("zvxnqmhrp", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SparkConfigurationListResponse model = new SparkConfigurationListResponse()
            .withValue(Arrays.asList(
                new SparkConfigurationResourceInner().withDescription("oe")
                    .withConfigs(mapOf("drlktg", "wankltytmhdroznn", "waeeczgfb", "csgguxhemlw", "zujksrlsmdes",
                        "kklelssxblycs"))
                    .withAnnotations(Arrays.asList("pvmjcdoewbid", "vteo", "xvgpiude", "gfsxzec"))
                    .withNotes("xw")
                    .withCreatedBy("fykhvuhxepmru")
                    .withCreated(OffsetDateTime.parse("2021-01-01T13:09:47Z"))
                    .withConfigMergeRule(mapOf("lujdjltymkmv", "aobn", "pphkixkykxds", "uihywart")),
                new SparkConfigurationResourceInner().withDescription("iiiovgqcgxuugq")
                    .withConfigs(mapOf("dtguk", "totiowlxteqdptjg", "gygqwah", "anblwphqlkccu", "gniiprglvaw", "iul"))
                    .withAnnotations(Arrays.asList("d"))
                    .withNotes("ypivlsbb")
                    .withCreatedBy("mcub")
                    .withCreated(OffsetDateTime.parse("2021-07-10T21:52:44Z"))
                    .withConfigMergeRule(mapOf("h", "xxkubvphavp", "bbttefjo", "rbqgvgov")),
                new SparkConfigurationResourceInner().withDescription("yephmgtvljvrcmyf")
                    .withConfigs(mapOf("pomyqwcabvnuile", "pgxh"))
                    .withAnnotations(Arrays.asList("swlpaugmrmfj", "rxwtoaukhfkvc"))
                    .withNotes("izmoaeds")
                    .withCreatedBy("wuived")
                    .withCreated(OffsetDateTime.parse("2021-07-25T04:49:06Z"))
                    .withConfigMergeRule(
                        mapOf("omguamlj", "ewxeiqbpsm", "gmsplzgaufcshhv", "l", "ixt", "ewgnxkympqanxrj"))))
            .withNextLink("zvxnqmhrp");
        model = BinaryData.fromObject(model).toObject(SparkConfigurationListResponse.class);
        Assertions.assertEquals("oe", model.value().get(0).description());
        Assertions.assertEquals("wankltytmhdroznn", model.value().get(0).configs().get("drlktg"));
        Assertions.assertEquals("pvmjcdoewbid", model.value().get(0).annotations().get(0));
        Assertions.assertEquals("xw", model.value().get(0).notes());
        Assertions.assertEquals("fykhvuhxepmru", model.value().get(0).createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-01T13:09:47Z"), model.value().get(0).created());
        Assertions.assertEquals("aobn", model.value().get(0).configMergeRule().get("lujdjltymkmv"));
        Assertions.assertEquals("zvxnqmhrp", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
