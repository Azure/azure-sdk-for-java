// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SparkConfigurationInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SparkConfigurationInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SparkConfigurationInfo model = BinaryData.fromString(
            "{\"description\":\"zhxogjggsvo\",\"configs\":{\"kmdyomkxfbvfbh\":\"kxibdafh\",\"rhpw\":\"y\"},\"annotations\":[\"deimawzov\"],\"notes\":\"kumuikjcjca\",\"createdBy\":\"bwsnsqow\",\"created\":\"2021-06-25T23:30:28Z\",\"configMergeRule\":{\"ve\":\"likytwvczcswka\",\"pqthehnmnaoya\":\"yfdvlvhbwrnfxtgd\"}}")
            .toObject(SparkConfigurationInfo.class);
        Assertions.assertEquals("zhxogjggsvo", model.description());
        Assertions.assertEquals("kxibdafh", model.configs().get("kmdyomkxfbvfbh"));
        Assertions.assertEquals("deimawzov", model.annotations().get(0));
        Assertions.assertEquals("kumuikjcjca", model.notes());
        Assertions.assertEquals("bwsnsqow", model.createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T23:30:28Z"), model.created());
        Assertions.assertEquals("likytwvczcswka", model.configMergeRule().get("ve"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SparkConfigurationInfo model = new SparkConfigurationInfo().withDescription("zhxogjggsvo")
            .withConfigs(mapOf("kmdyomkxfbvfbh", "kxibdafh", "rhpw", "y"))
            .withAnnotations(Arrays.asList("deimawzov"))
            .withNotes("kumuikjcjca")
            .withCreatedBy("bwsnsqow")
            .withCreated(OffsetDateTime.parse("2021-06-25T23:30:28Z"))
            .withConfigMergeRule(mapOf("ve", "likytwvczcswka", "pqthehnmnaoya", "yfdvlvhbwrnfxtgd"));
        model = BinaryData.fromObject(model).toObject(SparkConfigurationInfo.class);
        Assertions.assertEquals("zhxogjggsvo", model.description());
        Assertions.assertEquals("kxibdafh", model.configs().get("kmdyomkxfbvfbh"));
        Assertions.assertEquals("deimawzov", model.annotations().get(0));
        Assertions.assertEquals("kumuikjcjca", model.notes());
        Assertions.assertEquals("bwsnsqow", model.createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T23:30:28Z"), model.created());
        Assertions.assertEquals("likytwvczcswka", model.configMergeRule().get("ve"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
