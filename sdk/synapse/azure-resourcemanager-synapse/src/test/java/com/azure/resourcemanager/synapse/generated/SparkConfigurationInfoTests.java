// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SparkConfigurationInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SparkConfigurationInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SparkConfigurationInfo model =
            BinaryData
                .fromString(
                    "{\"description\":\"enuygbq\",\"configs\":{\"guaucmfdjwnla\":\"qekewvnqvcd\",\"ikczvvitacgxmf\":\"punj\",\"sjgqrsxyp\":\"sserxhtvsoxhlwn\",\"yuel\":\"uuuybnchrsziz\"},\"annotations\":[\"ndnbfqy\"],\"notes\":\"agfl\",\"createdBy\":\"gm\",\"created\":\"2021-02-22T20:12:59Z\",\"configMergeRule\":{\"pigqfusuckzmkw\":\"zjmucftbyrplroh\",\"jnhgwydyyn\":\"lsnoxaxmqeqalh\",\"ta\":\"svkhgbv\"}}")
                .toObject(SparkConfigurationInfo.class);
        Assertions.assertEquals("enuygbq", model.description());
        Assertions.assertEquals("qekewvnqvcd", model.configs().get("guaucmfdjwnla"));
        Assertions.assertEquals("ndnbfqy", model.annotations().get(0));
        Assertions.assertEquals("agfl", model.notes());
        Assertions.assertEquals("gm", model.createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T20:12:59Z"), model.created());
        Assertions.assertEquals("zjmucftbyrplroh", model.configMergeRule().get("pigqfusuckzmkw"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SparkConfigurationInfo model =
            new SparkConfigurationInfo()
                .withDescription("enuygbq")
                .withConfigs(
                    mapOf(
                        "guaucmfdjwnla",
                        "qekewvnqvcd",
                        "ikczvvitacgxmf",
                        "punj",
                        "sjgqrsxyp",
                        "sserxhtvsoxhlwn",
                        "yuel",
                        "uuuybnchrsziz"))
                .withAnnotations(Arrays.asList("ndnbfqy"))
                .withNotes("agfl")
                .withCreatedBy("gm")
                .withCreated(OffsetDateTime.parse("2021-02-22T20:12:59Z"))
                .withConfigMergeRule(
                    mapOf("pigqfusuckzmkw", "zjmucftbyrplroh", "jnhgwydyyn", "lsnoxaxmqeqalh", "ta", "svkhgbv"));
        model = BinaryData.fromObject(model).toObject(SparkConfigurationInfo.class);
        Assertions.assertEquals("enuygbq", model.description());
        Assertions.assertEquals("qekewvnqvcd", model.configs().get("guaucmfdjwnla"));
        Assertions.assertEquals("ndnbfqy", model.annotations().get(0));
        Assertions.assertEquals("agfl", model.notes());
        Assertions.assertEquals("gm", model.createdBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T20:12:59Z"), model.created());
        Assertions.assertEquals("zjmucftbyrplroh", model.configMergeRule().get("pigqfusuckzmkw"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
