// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.WorkloadGroup;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlPoolWorkloadGroupsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"minResourcePercent\":464620773,\"maxResourcePercent\":1081611869,\"minResourcePercentPerRequest\":26.635860012908495,\"maxResourcePercentPerRequest\":37.11285666442489,\"importance\":\"orimmo\",\"queryExecutionTimeout\":1287065466},\"id\":\"de\",\"name\":\"kkmvhzfovanyrva\",\"type\":\"rtgelg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadGroup response = manager.sqlPoolWorkloadGroups()
            .define("qvkixnmbzmecuyrz")
            .withExistingSqlPool("flqjfshtu", "cyohigimwdcs", "lkq")
            .withMinResourcePercent(1409427025)
            .withMaxResourcePercent(513897021)
            .withMinResourcePercentPerRequest(67.91735830131613)
            .withMaxResourcePercentPerRequest(85.2231290647608D)
            .withImportance("vrietvfp")
            .withQueryExecutionTimeout(1948776985)
            .create();

        Assertions.assertEquals(464620773, response.minResourcePercent());
        Assertions.assertEquals(1081611869, response.maxResourcePercent());
        Assertions.assertEquals(26.635860012908495, response.minResourcePercentPerRequest());
        Assertions.assertEquals(37.11285666442489D, response.maxResourcePercentPerRequest());
        Assertions.assertEquals("orimmo", response.importance());
        Assertions.assertEquals(1287065466, response.queryExecutionTimeout());
    }
}
