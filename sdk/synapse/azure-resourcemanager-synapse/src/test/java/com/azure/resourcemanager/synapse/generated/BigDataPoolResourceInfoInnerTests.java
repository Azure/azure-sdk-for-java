// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.BigDataPoolResourceInfoInner;
import com.azure.resourcemanager.synapse.fluent.models.LibraryInfo;
import com.azure.resourcemanager.synapse.models.AutoPauseProperties;
import com.azure.resourcemanager.synapse.models.AutoScaleProperties;
import com.azure.resourcemanager.synapse.models.DynamicExecutorAllocation;
import com.azure.resourcemanager.synapse.models.LibraryRequirements;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BigDataPoolResourceInfoInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BigDataPoolResourceInfoInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"hq\",\"autoScale\":{\"minNodeCount\":322749480,\"enabled\":true,\"maxNodeCount\":1515333764},\"creationDate\":\"2021-08-05T16:53:34Z\",\"autoPause\":{\"delayInMinutes\":1336465504,\"enabled\":true},\"isComputeIsolationEnabled\":false,\"sessionLevelPackagesEnabled\":true,\"cacheSize\":2143816909,\"dynamicExecutorAllocation\":{\"enabled\":false},\"sparkEventsFolder\":\"idgsybbe\",\"nodeCount\":318397575,\"libraryRequirements\":{\"time\":\"2021-10-06T10:20:32Z\",\"content\":\"msxaobhd\",\"filename\":\"mtqio\"},\"customLibraries\":[{\"name\":\"htbmuf\",\"path\":\"wnoi\",\"containerName\":\"wlrxyb\",\"uploadedTimestamp\":\"2021-01-09T03:58:02Z\",\"type\":\"ijgkdm\",\"provisioningStatus\":\"azlobcufpdznrbt\",\"creatorId\":\"qjnqglhqgnufoooj\"},{\"name\":\"ifsqesaagdfmg\",\"path\":\"lhjxr\",\"containerName\":\"kwm\",\"uploadedTimestamp\":\"2021-08-23T15:37:33Z\",\"type\":\"siznto\",\"provisioningStatus\":\"pa\",\"creatorId\":\"ajpsquc\"}],\"sparkConfigProperties\":{\"time\":\"2021-01-12T06:10:22Z\",\"content\":\"dkfo\",\"filename\":\"nygj\"},\"sparkVersion\":\"jddeqsrdeupewnw\",\"defaultSparkLogFolder\":\"itjz\",\"nodeSize\":\"XXLarge\",\"nodeSizeFamily\":\"MemoryOptimized\",\"lastSucceededTimestamp\":\"2021-05-22T22:11:04Z\"},\"location\":\"hmofc\",\"tags\":{\"rkdtmlxh\":\"my\"},\"id\":\"kuksjtxukcdm\",\"name\":\"arcryuanzwuxzdxt\",\"type\":\"yrlhmwhfpmrqobm\"}")
            .toObject(BigDataPoolResourceInfoInner.class);
        Assertions.assertEquals("hmofc", model.location());
        Assertions.assertEquals("my", model.tags().get("rkdtmlxh"));
        Assertions.assertEquals("hq", model.provisioningState());
        Assertions.assertEquals(322749480, model.autoScale().minNodeCount());
        Assertions.assertEquals(true, model.autoScale().enabled());
        Assertions.assertEquals(1515333764, model.autoScale().maxNodeCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T16:53:34Z"), model.creationDate());
        Assertions.assertEquals(1336465504, model.autoPause().delayInMinutes());
        Assertions.assertEquals(true, model.autoPause().enabled());
        Assertions.assertEquals(false, model.isComputeIsolationEnabled());
        Assertions.assertEquals(true, model.sessionLevelPackagesEnabled());
        Assertions.assertEquals(2143816909, model.cacheSize());
        Assertions.assertEquals(false, model.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals("idgsybbe", model.sparkEventsFolder());
        Assertions.assertEquals(318397575, model.nodeCount());
        Assertions.assertEquals("msxaobhd", model.libraryRequirements().content());
        Assertions.assertEquals("mtqio", model.libraryRequirements().filename());
        Assertions.assertEquals("htbmuf", model.customLibraries().get(0).name());
        Assertions.assertEquals("wnoi", model.customLibraries().get(0).path());
        Assertions.assertEquals("wlrxyb", model.customLibraries().get(0).containerName());
        Assertions.assertEquals("ijgkdm", model.customLibraries().get(0).type());
        Assertions.assertEquals("dkfo", model.sparkConfigProperties().content());
        Assertions.assertEquals("nygj", model.sparkConfigProperties().filename());
        Assertions.assertEquals("jddeqsrdeupewnw", model.sparkVersion());
        Assertions.assertEquals("itjz", model.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.XXLARGE, model.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.MEMORY_OPTIMIZED, model.nodeSizeFamily());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BigDataPoolResourceInfoInner model = new BigDataPoolResourceInfoInner().withLocation("hmofc")
            .withTags(mapOf("rkdtmlxh", "my"))
            .withProvisioningState("hq")
            .withAutoScale(
                new AutoScaleProperties().withMinNodeCount(322749480).withEnabled(true).withMaxNodeCount(1515333764))
            .withCreationDate(OffsetDateTime.parse("2021-08-05T16:53:34Z"))
            .withAutoPause(new AutoPauseProperties().withDelayInMinutes(1336465504).withEnabled(true))
            .withIsComputeIsolationEnabled(false)
            .withSessionLevelPackagesEnabled(true)
            .withCacheSize(2143816909)
            .withDynamicExecutorAllocation(new DynamicExecutorAllocation().withEnabled(false))
            .withSparkEventsFolder("idgsybbe")
            .withNodeCount(318397575)
            .withLibraryRequirements(new LibraryRequirements().withContent("msxaobhd").withFilename("mtqio"))
            .withCustomLibraries(Arrays.asList(
                new LibraryInfo().withName("htbmuf").withPath("wnoi").withContainerName("wlrxyb").withType("ijgkdm"),
                new LibraryInfo().withName("ifsqesaagdfmg")
                    .withPath("lhjxr")
                    .withContainerName("kwm")
                    .withType("siznto")))
            .withSparkConfigProperties(new LibraryRequirements().withContent("dkfo").withFilename("nygj"))
            .withSparkVersion("jddeqsrdeupewnw")
            .withDefaultSparkLogFolder("itjz")
            .withNodeSize(NodeSize.XXLARGE)
            .withNodeSizeFamily(NodeSizeFamily.MEMORY_OPTIMIZED);
        model = BinaryData.fromObject(model).toObject(BigDataPoolResourceInfoInner.class);
        Assertions.assertEquals("hmofc", model.location());
        Assertions.assertEquals("my", model.tags().get("rkdtmlxh"));
        Assertions.assertEquals("hq", model.provisioningState());
        Assertions.assertEquals(322749480, model.autoScale().minNodeCount());
        Assertions.assertEquals(true, model.autoScale().enabled());
        Assertions.assertEquals(1515333764, model.autoScale().maxNodeCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T16:53:34Z"), model.creationDate());
        Assertions.assertEquals(1336465504, model.autoPause().delayInMinutes());
        Assertions.assertEquals(true, model.autoPause().enabled());
        Assertions.assertEquals(false, model.isComputeIsolationEnabled());
        Assertions.assertEquals(true, model.sessionLevelPackagesEnabled());
        Assertions.assertEquals(2143816909, model.cacheSize());
        Assertions.assertEquals(false, model.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals("idgsybbe", model.sparkEventsFolder());
        Assertions.assertEquals(318397575, model.nodeCount());
        Assertions.assertEquals("msxaobhd", model.libraryRequirements().content());
        Assertions.assertEquals("mtqio", model.libraryRequirements().filename());
        Assertions.assertEquals("htbmuf", model.customLibraries().get(0).name());
        Assertions.assertEquals("wnoi", model.customLibraries().get(0).path());
        Assertions.assertEquals("wlrxyb", model.customLibraries().get(0).containerName());
        Assertions.assertEquals("ijgkdm", model.customLibraries().get(0).type());
        Assertions.assertEquals("dkfo", model.sparkConfigProperties().content());
        Assertions.assertEquals("nygj", model.sparkConfigProperties().filename());
        Assertions.assertEquals("jddeqsrdeupewnw", model.sparkVersion());
        Assertions.assertEquals("itjz", model.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.XXLARGE, model.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.MEMORY_OPTIMIZED, model.nodeSizeFamily());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
