// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.BigDataPoolResourceInfoInner;
import com.azure.resourcemanager.synapse.fluent.models.LibraryInfo;
import com.azure.resourcemanager.synapse.models.AutoPauseProperties;
import com.azure.resourcemanager.synapse.models.AutoScaleProperties;
import com.azure.resourcemanager.synapse.models.ConfigurationType;
import com.azure.resourcemanager.synapse.models.DynamicExecutorAllocation;
import com.azure.resourcemanager.synapse.models.LibraryRequirements;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import com.azure.resourcemanager.synapse.models.SparkConfigProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BigDataPoolResourceInfoInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BigDataPoolResourceInfoInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"gfdgugeyzi\",\"autoScale\":{\"minNodeCount\":1233581087,\"enabled\":false,\"maxNodeCount\":976674781},\"creationDate\":\"2021-02-21T09:37:08Z\",\"autoPause\":{\"delayInMinutes\":698820955,\"enabled\":false},\"isComputeIsolationEnabled\":false,\"isAutotuneEnabled\":false,\"sessionLevelPackagesEnabled\":false,\"cacheSize\":782057398,\"dynamicExecutorAllocation\":{\"enabled\":false,\"minExecutors\":837668712,\"maxExecutors\":1792442027},\"sparkEventsFolder\":\"zbgomfgbeg\",\"nodeCount\":1408942113,\"libraryRequirements\":{\"time\":\"2021-04-25T04:23:56Z\",\"content\":\"i\",\"filename\":\"tnluankrr\"},\"customLibraries\":[{\"name\":\"ebtijvacvbmqzbqq\",\"path\":\"aj\",\"containerName\":\"wxacevehj\",\"uploadedTimestamp\":\"2021-06-11T00:32:44Z\",\"type\":\"oafgaoql\",\"provisioningStatus\":\"aeylinm\",\"creatorId\":\"vxirpghriypo\"},{\"name\":\"yhlqhykprlpyznu\",\"path\":\"qdsmexiit\",\"containerName\":\"uxtyasiibmi\",\"uploadedTimestamp\":\"2021-05-03T03:38:09Z\",\"type\":\"ustgnljhnmgixhc\",\"provisioningStatus\":\"vmqfoud\",\"creatorId\":\"hcgyyprotwyp\"},{\"name\":\"d\",\"path\":\"xhugcm\",\"containerName\":\"avlg\",\"uploadedTimestamp\":\"2021-01-22T21:55:11Z\",\"type\":\"ftpmdtzfjltfv\",\"provisioningStatus\":\"cyjtotpvop\",\"creatorId\":\"bdb\"}],\"sparkConfigProperties\":{\"time\":\"2021-01-12T17:35:30Z\",\"content\":\"ihed\",\"filename\":\"qwthmky\",\"configurationType\":\"File\"},\"sparkVersion\":\"sihsgqcwdhohsd\",\"defaultSparkLogFolder\":\"cdzsu\",\"nodeSize\":\"Small\",\"nodeSizeFamily\":\"HardwareAcceleratedFPGA\",\"lastSucceededTimestamp\":\"2021-02-20T04:00:07Z\"},\"location\":\"zlmcmuapcvhdb\",\"tags\":{\"zinkfkbgbzbowxeq\":\"qqxeyskon\",\"ygvkzqkjj\":\"clj\",\"zrxcczurt\":\"okbzef\"},\"id\":\"e\",\"name\":\"pqxbkwvzgnzvdf\",\"type\":\"zdix\"}")
            .toObject(BigDataPoolResourceInfoInner.class);
        Assertions.assertEquals("zlmcmuapcvhdb", model.location());
        Assertions.assertEquals("qqxeyskon", model.tags().get("zinkfkbgbzbowxeq"));
        Assertions.assertEquals("gfdgugeyzi", model.provisioningState());
        Assertions.assertEquals(1233581087, model.autoScale().minNodeCount());
        Assertions.assertEquals(false, model.autoScale().enabled());
        Assertions.assertEquals(976674781, model.autoScale().maxNodeCount());
        Assertions.assertEquals(698820955, model.autoPause().delayInMinutes());
        Assertions.assertEquals(false, model.autoPause().enabled());
        Assertions.assertEquals(false, model.isComputeIsolationEnabled());
        Assertions.assertEquals(false, model.isAutotuneEnabled());
        Assertions.assertEquals(false, model.sessionLevelPackagesEnabled());
        Assertions.assertEquals(782057398, model.cacheSize());
        Assertions.assertEquals(false, model.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals(837668712, model.dynamicExecutorAllocation().minExecutors());
        Assertions.assertEquals(1792442027, model.dynamicExecutorAllocation().maxExecutors());
        Assertions.assertEquals("zbgomfgbeg", model.sparkEventsFolder());
        Assertions.assertEquals(1408942113, model.nodeCount());
        Assertions.assertEquals("i", model.libraryRequirements().content());
        Assertions.assertEquals("tnluankrr", model.libraryRequirements().filename());
        Assertions.assertEquals("ebtijvacvbmqzbqq", model.customLibraries().get(0).name());
        Assertions.assertEquals("aj", model.customLibraries().get(0).path());
        Assertions.assertEquals("wxacevehj", model.customLibraries().get(0).containerName());
        Assertions.assertEquals("oafgaoql", model.customLibraries().get(0).type());
        Assertions.assertEquals("ihed", model.sparkConfigProperties().content());
        Assertions.assertEquals("qwthmky", model.sparkConfigProperties().filename());
        Assertions.assertEquals(ConfigurationType.FILE, model.sparkConfigProperties().configurationType());
        Assertions.assertEquals("sihsgqcwdhohsd", model.sparkVersion());
        Assertions.assertEquals("cdzsu", model.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.SMALL, model.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.HARDWARE_ACCELERATED_FPGA, model.nodeSizeFamily());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BigDataPoolResourceInfoInner model = new BigDataPoolResourceInfoInner().withLocation("zlmcmuapcvhdb")
            .withTags(mapOf("zinkfkbgbzbowxeq", "qqxeyskon", "ygvkzqkjj", "clj", "zrxcczurt", "okbzef"))
            .withProvisioningState("gfdgugeyzi")
            .withAutoScale(
                new AutoScaleProperties().withMinNodeCount(1233581087).withEnabled(false).withMaxNodeCount(976674781))
            .withAutoPause(new AutoPauseProperties().withDelayInMinutes(698820955).withEnabled(false))
            .withIsComputeIsolationEnabled(false)
            .withIsAutotuneEnabled(false)
            .withSessionLevelPackagesEnabled(false)
            .withCacheSize(782057398)
            .withDynamicExecutorAllocation(new DynamicExecutorAllocation().withEnabled(false)
                .withMinExecutors(837668712)
                .withMaxExecutors(1792442027))
            .withSparkEventsFolder("zbgomfgbeg")
            .withNodeCount(1408942113)
            .withLibraryRequirements(new LibraryRequirements().withContent("i").withFilename("tnluankrr"))
            .withCustomLibraries(Arrays.asList(
                new LibraryInfo().withName("ebtijvacvbmqzbqq")
                    .withPath("aj")
                    .withContainerName("wxacevehj")
                    .withType("oafgaoql"),
                new LibraryInfo().withName("yhlqhykprlpyznu")
                    .withPath("qdsmexiit")
                    .withContainerName("uxtyasiibmi")
                    .withType("ustgnljhnmgixhc"),
                new LibraryInfo().withName("d").withPath("xhugcm").withContainerName("avlg").withType("ftpmdtzfjltfv")))
            .withSparkConfigProperties(new SparkConfigProperties().withContent("ihed")
                .withFilename("qwthmky")
                .withConfigurationType(ConfigurationType.FILE))
            .withSparkVersion("sihsgqcwdhohsd")
            .withDefaultSparkLogFolder("cdzsu")
            .withNodeSize(NodeSize.SMALL)
            .withNodeSizeFamily(NodeSizeFamily.HARDWARE_ACCELERATED_FPGA);
        model = BinaryData.fromObject(model).toObject(BigDataPoolResourceInfoInner.class);
        Assertions.assertEquals("zlmcmuapcvhdb", model.location());
        Assertions.assertEquals("qqxeyskon", model.tags().get("zinkfkbgbzbowxeq"));
        Assertions.assertEquals("gfdgugeyzi", model.provisioningState());
        Assertions.assertEquals(1233581087, model.autoScale().minNodeCount());
        Assertions.assertEquals(false, model.autoScale().enabled());
        Assertions.assertEquals(976674781, model.autoScale().maxNodeCount());
        Assertions.assertEquals(698820955, model.autoPause().delayInMinutes());
        Assertions.assertEquals(false, model.autoPause().enabled());
        Assertions.assertEquals(false, model.isComputeIsolationEnabled());
        Assertions.assertEquals(false, model.isAutotuneEnabled());
        Assertions.assertEquals(false, model.sessionLevelPackagesEnabled());
        Assertions.assertEquals(782057398, model.cacheSize());
        Assertions.assertEquals(false, model.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals(837668712, model.dynamicExecutorAllocation().minExecutors());
        Assertions.assertEquals(1792442027, model.dynamicExecutorAllocation().maxExecutors());
        Assertions.assertEquals("zbgomfgbeg", model.sparkEventsFolder());
        Assertions.assertEquals(1408942113, model.nodeCount());
        Assertions.assertEquals("i", model.libraryRequirements().content());
        Assertions.assertEquals("tnluankrr", model.libraryRequirements().filename());
        Assertions.assertEquals("ebtijvacvbmqzbqq", model.customLibraries().get(0).name());
        Assertions.assertEquals("aj", model.customLibraries().get(0).path());
        Assertions.assertEquals("wxacevehj", model.customLibraries().get(0).containerName());
        Assertions.assertEquals("oafgaoql", model.customLibraries().get(0).type());
        Assertions.assertEquals("ihed", model.sparkConfigProperties().content());
        Assertions.assertEquals("qwthmky", model.sparkConfigProperties().filename());
        Assertions.assertEquals(ConfigurationType.FILE, model.sparkConfigProperties().configurationType());
        Assertions.assertEquals("sihsgqcwdhohsd", model.sparkVersion());
        Assertions.assertEquals("cdzsu", model.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.SMALL, model.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.HARDWARE_ACCELERATED_FPGA, model.nodeSizeFamily());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
