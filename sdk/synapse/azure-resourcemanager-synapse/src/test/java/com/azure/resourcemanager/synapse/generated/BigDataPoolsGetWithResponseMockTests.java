// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.BigDataPoolResourceInfo;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BigDataPoolsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"zhomewjjstliu\",\"autoScale\":{\"minNodeCount\":1890150004,\"enabled\":true,\"maxNodeCount\":409167617},\"creationDate\":\"2021-07-27T23:47:28Z\",\"autoPause\":{\"delayInMinutes\":1747041970,\"enabled\":true},\"isComputeIsolationEnabled\":true,\"sessionLevelPackagesEnabled\":true,\"cacheSize\":1931817911,\"dynamicExecutorAllocation\":{\"enabled\":false},\"sparkEventsFolder\":\"kxrx\",\"nodeCount\":879177175,\"libraryRequirements\":{\"time\":\"2021-11-22T19:16:48Z\",\"content\":\"g\",\"filename\":\"qljnqkhychoco\"},\"customLibraries\":[{\"name\":\"hurql\",\"path\":\"ffaweyur\",\"containerName\":\"hy\",\"uploadedTimestamp\":\"2021-09-22T18:28:29Z\",\"type\":\"av\",\"provisioningStatus\":\"qdbrxmrgc\",\"creatorId\":\"apx\"}],\"sparkConfigProperties\":{\"time\":\"2021-01-07T08:52:04Z\",\"content\":\"j\",\"filename\":\"ajb\"},\"sparkVersion\":\"cgduusio\",\"defaultSparkLogFolder\":\"blevpmcluj\",\"nodeSize\":\"XXLarge\",\"nodeSizeFamily\":\"HardwareAcceleratedFPGA\",\"lastSucceededTimestamp\":\"2021-03-12T19:23:15Z\"},\"location\":\"gsjgkzzlta\",\"tags\":{\"qsczpgvdwnapfdqw\":\"zffovwmbjl\"},\"id\":\"wf\",\"name\":\"ptnuwjtkschgc\",\"type\":\"qyhleseyq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BigDataPoolResourceInfo response = manager.bigDataPools()
            .getWithResponse("ahhxhqfaqnvzoqg", "ipemchgavscz", "ejdtxptl", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("gsjgkzzlta", response.location());
        Assertions.assertEquals("zffovwmbjl", response.tags().get("qsczpgvdwnapfdqw"));
        Assertions.assertEquals("zhomewjjstliu", response.provisioningState());
        Assertions.assertEquals(1890150004, response.autoScale().minNodeCount());
        Assertions.assertEquals(true, response.autoScale().enabled());
        Assertions.assertEquals(409167617, response.autoScale().maxNodeCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T23:47:28Z"), response.creationDate());
        Assertions.assertEquals(1747041970, response.autoPause().delayInMinutes());
        Assertions.assertEquals(true, response.autoPause().enabled());
        Assertions.assertEquals(true, response.isComputeIsolationEnabled());
        Assertions.assertEquals(true, response.sessionLevelPackagesEnabled());
        Assertions.assertEquals(1931817911, response.cacheSize());
        Assertions.assertEquals(false, response.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals("kxrx", response.sparkEventsFolder());
        Assertions.assertEquals(879177175, response.nodeCount());
        Assertions.assertEquals("g", response.libraryRequirements().content());
        Assertions.assertEquals("qljnqkhychoco", response.libraryRequirements().filename());
        Assertions.assertEquals("hurql", response.customLibraries().get(0).name());
        Assertions.assertEquals("ffaweyur", response.customLibraries().get(0).path());
        Assertions.assertEquals("hy", response.customLibraries().get(0).containerName());
        Assertions.assertEquals("av", response.customLibraries().get(0).type());
        Assertions.assertEquals("j", response.sparkConfigProperties().content());
        Assertions.assertEquals("ajb", response.sparkConfigProperties().filename());
        Assertions.assertEquals("cgduusio", response.sparkVersion());
        Assertions.assertEquals("blevpmcluj", response.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.XXLARGE, response.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.HARDWARE_ACCELERATED_FPGA, response.nodeSizeFamily());
    }
}
