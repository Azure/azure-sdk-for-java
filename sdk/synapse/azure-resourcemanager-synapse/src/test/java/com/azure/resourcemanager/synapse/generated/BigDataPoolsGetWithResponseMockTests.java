// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.BigDataPoolResourceInfo;
import com.azure.resourcemanager.synapse.models.ConfigurationType;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BigDataPoolsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"zihacen\",\"autoScale\":{\"minNodeCount\":1923513203,\"enabled\":true,\"maxNodeCount\":1229590421},\"creationDate\":\"2021-01-19T05:50:44Z\",\"autoPause\":{\"delayInMinutes\":1597398872,\"enabled\":true},\"isComputeIsolationEnabled\":false,\"isAutotuneEnabled\":true,\"sessionLevelPackagesEnabled\":true,\"cacheSize\":667043908,\"dynamicExecutorAllocation\":{\"enabled\":true,\"minExecutors\":649568800,\"maxExecutors\":1816529038},\"sparkEventsFolder\":\"wyrkbrehzlrynjpc\",\"nodeCount\":1259275397,\"libraryRequirements\":{\"time\":\"2021-04-02T00:33:46Z\",\"content\":\"lr\",\"filename\":\"ubowuywevtj\"},\"customLibraries\":[{\"name\":\"kmwlaok\",\"path\":\"ni\",\"containerName\":\"xgucbmtredscnn\",\"uploadedTimestamp\":\"2021-01-25T21:50:17Z\",\"type\":\"yyuvtzrxzhclec\",\"provisioningStatus\":\"tzqzcloy\",\"creatorId\":\"u\"},{\"name\":\"idhz\",\"path\":\"re\",\"containerName\":\"zsdtm\",\"uploadedTimestamp\":\"2021-07-01T19:30:51Z\",\"type\":\"r\",\"provisioningStatus\":\"lb\",\"creatorId\":\"ychakvy\"},{\"name\":\"bqvum\",\"path\":\"qj\",\"containerName\":\"uepm\",\"uploadedTimestamp\":\"2021-10-22T05:03:01Z\",\"type\":\"zlpqmpftxefvulb\",\"provisioningStatus\":\"rtux\",\"creatorId\":\"rhfcaeooifqdyw\"},{\"name\":\"lobha\",\"path\":\"momfecorkfroc\",\"containerName\":\"mx\",\"uploadedTimestamp\":\"2021-10-24T15:46:41Z\",\"type\":\"zezbjes\",\"provisioningStatus\":\"slurbqfygpny\",\"creatorId\":\"dzuqscag\"}],\"sparkConfigProperties\":{\"time\":\"2021-07-23T05:39:23Z\",\"content\":\"prsytqz\",\"filename\":\"lhmgwfniv\",\"configurationType\":\"File\"},\"sparkVersion\":\"duiolh\",\"defaultSparkLogFolder\":\"qvpbfjpoqzucfzl\",\"nodeSize\":\"Medium\",\"nodeSizeFamily\":\"MemoryOptimized\",\"lastSucceededTimestamp\":\"2021-10-02T11:22:22Z\"},\"location\":\"rbormvhvzie\",\"tags\":{\"gmnwsvhbn\":\"rnqujywzcqy\",\"jtobdrrp\":\"qiwy\"},\"id\":\"rehkunsbfjhh\",\"name\":\"w\",\"type\":\"pkvegeatt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BigDataPoolResourceInfo response = manager.bigDataPools()
            .getWithResponse("fleev", "oqayrehjuqwv", "pxrl", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("rbormvhvzie", response.location());
        Assertions.assertEquals("rnqujywzcqy", response.tags().get("gmnwsvhbn"));
        Assertions.assertEquals("zihacen", response.provisioningState());
        Assertions.assertEquals(1923513203, response.autoScale().minNodeCount());
        Assertions.assertEquals(true, response.autoScale().enabled());
        Assertions.assertEquals(1229590421, response.autoScale().maxNodeCount());
        Assertions.assertEquals(1597398872, response.autoPause().delayInMinutes());
        Assertions.assertEquals(true, response.autoPause().enabled());
        Assertions.assertEquals(false, response.isComputeIsolationEnabled());
        Assertions.assertEquals(true, response.isAutotuneEnabled());
        Assertions.assertEquals(true, response.sessionLevelPackagesEnabled());
        Assertions.assertEquals(667043908, response.cacheSize());
        Assertions.assertEquals(true, response.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals(649568800, response.dynamicExecutorAllocation().minExecutors());
        Assertions.assertEquals(1816529038, response.dynamicExecutorAllocation().maxExecutors());
        Assertions.assertEquals("wyrkbrehzlrynjpc", response.sparkEventsFolder());
        Assertions.assertEquals(1259275397, response.nodeCount());
        Assertions.assertEquals("lr", response.libraryRequirements().content());
        Assertions.assertEquals("ubowuywevtj", response.libraryRequirements().filename());
        Assertions.assertEquals("kmwlaok", response.customLibraries().get(0).name());
        Assertions.assertEquals("ni", response.customLibraries().get(0).path());
        Assertions.assertEquals("xgucbmtredscnn", response.customLibraries().get(0).containerName());
        Assertions.assertEquals("yyuvtzrxzhclec", response.customLibraries().get(0).type());
        Assertions.assertEquals("prsytqz", response.sparkConfigProperties().content());
        Assertions.assertEquals("lhmgwfniv", response.sparkConfigProperties().filename());
        Assertions.assertEquals(ConfigurationType.FILE, response.sparkConfigProperties().configurationType());
        Assertions.assertEquals("duiolh", response.sparkVersion());
        Assertions.assertEquals("qvpbfjpoqzucfzl", response.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.MEDIUM, response.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.MEMORY_OPTIMIZED, response.nodeSizeFamily());
    }
}
