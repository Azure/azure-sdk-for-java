// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.MaintenanceWindowOptionsInner;
import com.azure.resourcemanager.synapse.models.DayOfWeek;
import com.azure.resourcemanager.synapse.models.MaintenanceWindowTimeRange;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MaintenanceWindowOptionsInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MaintenanceWindowOptionsInner model = BinaryData.fromString(
            "{\"properties\":{\"isEnabled\":false,\"maintenanceWindowCycles\":[{\"dayOfWeek\":\"Wednesday\",\"startTime\":\"dxbjhwuaanozj\",\"duration\":\"ph\"}],\"minDurationInMinutes\":1172987793,\"defaultDurationInMinutes\":2134334822,\"minCycles\":1679765822,\"timeGranularityInMinutes\":946948591,\"allowMultipleMaintenanceWindowsPerCycle\":true},\"id\":\"l\",\"name\":\"vimjwos\",\"type\":\"tx\"}")
            .toObject(MaintenanceWindowOptionsInner.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.maintenanceWindowCycles().get(0).dayOfWeek());
        Assertions.assertEquals("dxbjhwuaanozj", model.maintenanceWindowCycles().get(0).startTime());
        Assertions.assertEquals("ph", model.maintenanceWindowCycles().get(0).duration());
        Assertions.assertEquals(1172987793, model.minDurationInMinutes());
        Assertions.assertEquals(2134334822, model.defaultDurationInMinutes());
        Assertions.assertEquals(1679765822, model.minCycles());
        Assertions.assertEquals(946948591, model.timeGranularityInMinutes());
        Assertions.assertEquals(true, model.allowMultipleMaintenanceWindowsPerCycle());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MaintenanceWindowOptionsInner model = new MaintenanceWindowOptionsInner().withIsEnabled(false)
            .withMaintenanceWindowCycles(
                Arrays.asList(new MaintenanceWindowTimeRange().withDayOfWeek(DayOfWeek.WEDNESDAY)
                    .withStartTime("dxbjhwuaanozj")
                    .withDuration("ph")))
            .withMinDurationInMinutes(1172987793)
            .withDefaultDurationInMinutes(2134334822)
            .withMinCycles(1679765822)
            .withTimeGranularityInMinutes(946948591)
            .withAllowMultipleMaintenanceWindowsPerCycle(true);
        model = BinaryData.fromObject(model).toObject(MaintenanceWindowOptionsInner.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.maintenanceWindowCycles().get(0).dayOfWeek());
        Assertions.assertEquals("dxbjhwuaanozj", model.maintenanceWindowCycles().get(0).startTime());
        Assertions.assertEquals("ph", model.maintenanceWindowCycles().get(0).duration());
        Assertions.assertEquals(1172987793, model.minDurationInMinutes());
        Assertions.assertEquals(2134334822, model.defaultDurationInMinutes());
        Assertions.assertEquals(1679765822, model.minCycles());
        Assertions.assertEquals(946948591, model.timeGranularityInMinutes());
        Assertions.assertEquals(true, model.allowMultipleMaintenanceWindowsPerCycle());
    }
}
