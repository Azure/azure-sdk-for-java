// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.IpFirewallRuleProperties;
import com.azure.resourcemanager.synapse.models.ReplaceAllIpFirewallRulesRequest;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplaceAllIpFirewallRulesRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplaceAllIpFirewallRulesRequest model = BinaryData.fromString(
            "{\"ipFirewallRules\":{\"dkcglhsl\":{\"endIpAddress\":\"mohctb\",\"provisioningState\":\"Deleting\",\"startIpAddress\":\"wxdndnvowgujjug\"},\"kh\":{\"endIpAddress\":\"jdyggdtji\",\"provisioningState\":\"Provisioning\",\"startIpAddress\":\"uofqwe\"},\"cibvyvdcsitynn\":{\"endIpAddress\":\"n\",\"provisioningState\":\"Deleting\",\"startIpAddress\":\"exfwhy\"}}}")
            .toObject(ReplaceAllIpFirewallRulesRequest.class);
        Assertions.assertEquals("mohctb", model.ipFirewallRules().get("dkcglhsl").endIpAddress());
        Assertions.assertEquals("wxdndnvowgujjug", model.ipFirewallRules().get("dkcglhsl").startIpAddress());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplaceAllIpFirewallRulesRequest model
            = new ReplaceAllIpFirewallRulesRequest().withIpFirewallRules(mapOf("dkcglhsl",
                new IpFirewallRuleProperties().withEndIpAddress("mohctb").withStartIpAddress("wxdndnvowgujjug"), "kh",
                new IpFirewallRuleProperties().withEndIpAddress("jdyggdtji").withStartIpAddress("uofqwe"),
                "cibvyvdcsitynn", new IpFirewallRuleProperties().withEndIpAddress("n").withStartIpAddress("exfwhy")));
        model = BinaryData.fromObject(model).toObject(ReplaceAllIpFirewallRulesRequest.class);
        Assertions.assertEquals("mohctb", model.ipFirewallRules().get("dkcglhsl").endIpAddress());
        Assertions.assertEquals("wxdndnvowgujjug", model.ipFirewallRules().get("dkcglhsl").startIpAddress());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
