// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.SsisParameter;
import org.junit.jupiter.api.Assertions;

public final class SsisParameterTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SsisParameter model =
            BinaryData
                .fromString(
                    "{\"id\":5832025018417417844,\"name\":\"gydgrpxncakiq\",\"description\":\"ndjrkclamggl\",\"dataType\":\"mfejdoqeykglty\",\"required\":true,\"sensitive\":false,\"designDefaultValue\":\"qkaye\",\"defaultValue\":\"xtlgflwfg\",\"sensitiveDefaultValue\":\"iucijjcea\",\"valueType\":\"ijjj\",\"valueSet\":false,\"variable\":\"mcaszknxkv\"}")
                .toObject(SsisParameter.class);
        Assertions.assertEquals(5832025018417417844L, model.id());
        Assertions.assertEquals("gydgrpxncakiq", model.name());
        Assertions.assertEquals("ndjrkclamggl", model.description());
        Assertions.assertEquals("mfejdoqeykglty", model.dataType());
        Assertions.assertEquals(true, model.required());
        Assertions.assertEquals(false, model.sensitive());
        Assertions.assertEquals("qkaye", model.designDefaultValue());
        Assertions.assertEquals("xtlgflwfg", model.defaultValue());
        Assertions.assertEquals("iucijjcea", model.sensitiveDefaultValue());
        Assertions.assertEquals("ijjj", model.valueType());
        Assertions.assertEquals(false, model.valueSet());
        Assertions.assertEquals("mcaszknxkv", model.variable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SsisParameter model =
            new SsisParameter()
                .withId(5832025018417417844L)
                .withName("gydgrpxncakiq")
                .withDescription("ndjrkclamggl")
                .withDataType("mfejdoqeykglty")
                .withRequired(true)
                .withSensitive(false)
                .withDesignDefaultValue("qkaye")
                .withDefaultValue("xtlgflwfg")
                .withSensitiveDefaultValue("iucijjcea")
                .withValueType("ijjj")
                .withValueSet(false)
                .withVariable("mcaszknxkv");
        model = BinaryData.fromObject(model).toObject(SsisParameter.class);
        Assertions.assertEquals(5832025018417417844L, model.id());
        Assertions.assertEquals("gydgrpxncakiq", model.name());
        Assertions.assertEquals("ndjrkclamggl", model.description());
        Assertions.assertEquals("mfejdoqeykglty", model.dataType());
        Assertions.assertEquals(true, model.required());
        Assertions.assertEquals(false, model.sensitive());
        Assertions.assertEquals("qkaye", model.designDefaultValue());
        Assertions.assertEquals("xtlgflwfg", model.defaultValue());
        Assertions.assertEquals("iucijjcea", model.sensitiveDefaultValue());
        Assertions.assertEquals("ijjj", model.valueType());
        Assertions.assertEquals(false, model.valueSet());
        Assertions.assertEquals("mcaszknxkv", model.variable());
    }
}
