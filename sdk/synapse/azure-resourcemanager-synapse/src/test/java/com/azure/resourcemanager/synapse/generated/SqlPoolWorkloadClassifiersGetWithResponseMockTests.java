// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.WorkloadClassifier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlPoolWorkloadClassifiersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"memberName\":\"ubanlxunpq\",\"label\":\"kqiawzlzklasl\",\"context\":\"ciz\",\"startTime\":\"lrarwpewsaudo\",\"endTime\":\"tighsxjpy\",\"importance\":\"kqbalah\"},\"id\":\"vuuwxhmeh\",\"name\":\"nhjiotiffb\",\"type\":\"cngkegxcypxb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadClassifier response = manager.sqlPoolWorkloadClassifiers()
            .getWithResponse("hqwhitxnmxgnmguz", "uwvorbalkjn", "kbd", "lltqstqkqs", "gxiynecovagzk",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ubanlxunpq", response.memberName());
        Assertions.assertEquals("kqiawzlzklasl", response.label());
        Assertions.assertEquals("ciz", response.context());
        Assertions.assertEquals("lrarwpewsaudo", response.startTime());
        Assertions.assertEquals("tighsxjpy", response.endTime());
        Assertions.assertEquals("kqbalah", response.importance());
    }
}
