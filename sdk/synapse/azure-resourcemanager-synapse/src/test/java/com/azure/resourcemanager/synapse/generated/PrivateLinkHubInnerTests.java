// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.PrivateLinkHubInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkHubInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkHubInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"bnuqqkpik\",\"privateEndpointConnections\":[{\"id\":\"vtq\",\"properties\":{\"privateEndpoint\":{\"id\":\"uynhijg\"},\"privateLinkServiceConnectionState\":{\"status\":\"bfs\",\"description\":\"rbu\",\"actionsRequired\":\"cvpnazzmhjrunmpx\"},\"provisioningState\":\"dbhrbnlankxm\"}},{\"id\":\"k\",\"properties\":{\"privateEndpoint\":{\"id\":\"nbtkcxywnytnr\"},\"privateLinkServiceConnectionState\":{\"status\":\"lqidyby\",\"description\":\"zfcl\",\"actionsRequired\":\"axdbabph\"},\"provisioningState\":\"rqlfktsthsucocmn\"}}]},\"location\":\"yazttbtwwrqpue\",\"tags\":{\"fey\":\"zywbiex\",\"ujwb\":\"eaxib\"},\"id\":\"qwalmuzyoxaepd\",\"name\":\"zjancuxr\",\"type\":\"d\"}")
            .toObject(PrivateLinkHubInner.class);
        Assertions.assertEquals("yazttbtwwrqpue", model.location());
        Assertions.assertEquals("zywbiex", model.tags().get("fey"));
        Assertions.assertEquals("bnuqqkpik", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkHubInner model = new PrivateLinkHubInner().withLocation("yazttbtwwrqpue")
            .withTags(mapOf("fey", "zywbiex", "ujwb", "eaxib"))
            .withProvisioningState("bnuqqkpik");
        model = BinaryData.fromObject(model).toObject(PrivateLinkHubInner.class);
        Assertions.assertEquals("yazttbtwwrqpue", model.location());
        Assertions.assertEquals("zywbiex", model.tags().get("fey"));
        Assertions.assertEquals("bnuqqkpik", model.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
