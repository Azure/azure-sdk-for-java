// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.PrivateLinkHubInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkHubInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkHubInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"yebizikayuh\",\"privateEndpointConnections\":[{\"id\":\"bs\",\"properties\":{\"privateEndpoint\":{\"id\":\"wrv\"},\"privateLinkServiceConnectionState\":{\"status\":\"gmfpgvmp\",\"description\":\"as\",\"actionsRequired\":\"haq\"},\"provisioningState\":\"ss\"}},{\"id\":\"u\",\"properties\":{\"privateEndpoint\":{\"id\":\"srezp\"},\"privateLinkServiceConnectionState\":{\"status\":\"neuyow\",\"description\":\"d\",\"actionsRequired\":\"t\"},\"provisioningState\":\"ib\"}}]},\"location\":\"rcgp\",\"tags\":{\"av\":\"zimejzanlfzx\",\"jq\":\"mbzonokix\",\"rlazszrnw\":\"irgzp\",\"fpwpjylwbt\":\"iin\"},\"id\":\"h\",\"name\":\"lsj\",\"type\":\"dhszfjv\"}")
            .toObject(PrivateLinkHubInner.class);
        Assertions.assertEquals("rcgp", model.location());
        Assertions.assertEquals("zimejzanlfzx", model.tags().get("av"));
        Assertions.assertEquals("yebizikayuh", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkHubInner model = new PrivateLinkHubInner().withLocation("rcgp")
            .withTags(mapOf("av", "zimejzanlfzx", "jq", "mbzonokix", "rlazszrnw", "irgzp", "fpwpjylwbt", "iin"))
            .withProvisioningState("yebizikayuh");
        model = BinaryData.fromObject(model).toObject(PrivateLinkHubInner.class);
        Assertions.assertEquals("rcgp", model.location());
        Assertions.assertEquals("zimejzanlfzx", model.tags().get("av"));
        Assertions.assertEquals("yebizikayuh", model.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
