// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.PrivateLinkHubInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkHubInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkHubInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"ounqecano\",\"privateEndpointConnections\":[{\"id\":\"fhyhltrpmopjmcma\"}]},\"location\":\"okth\",\"tags\":{\"xodpuozmyzydagfu\":\"uaodsfcpk\",\"dxwzywqsmbsurexi\":\"xbezyiuokktwh\"},\"id\":\"o\",\"name\":\"yocf\",\"type\":\"fksymddystki\"}")
                .toObject(PrivateLinkHubInner.class);
        Assertions.assertEquals("okth", model.location());
        Assertions.assertEquals("uaodsfcpk", model.tags().get("xodpuozmyzydagfu"));
        Assertions.assertEquals("ounqecano", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkHubInner model =
            new PrivateLinkHubInner()
                .withLocation("okth")
                .withTags(mapOf("xodpuozmyzydagfu", "uaodsfcpk", "dxwzywqsmbsurexi", "xbezyiuokktwh"))
                .withProvisioningState("ounqecano");
        model = BinaryData.fromObject(model).toObject(PrivateLinkHubInner.class);
        Assertions.assertEquals("okth", model.location());
        Assertions.assertEquals("uaodsfcpk", model.tags().get("xodpuozmyzydagfu"));
        Assertions.assertEquals("ounqecano", model.provisioningState());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
