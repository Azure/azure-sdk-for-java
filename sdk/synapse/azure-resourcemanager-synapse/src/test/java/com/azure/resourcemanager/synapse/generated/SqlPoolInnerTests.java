// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SqlPoolInner;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.Sku;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlPoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlPoolInner model = BinaryData.fromString(
            "{\"sku\":{\"tier\":\"jznb\",\"name\":\"ow\",\"capacity\":2070148801},\"properties\":{\"maxSizeBytes\":4938464628745807464,\"collation\":\"eualupjmkhf\",\"sourceDatabaseId\":\"bbcswsrtjri\",\"recoverableDatabaseId\":\"rbpbewtghfgblcg\",\"provisioningState\":\"zvlvqhjkbegib\",\"status\":\"mxiebw\",\"restorePointInTime\":\"2021-08-25T02:24:40Z\",\"createMode\":\"PointInTimeRestore\",\"creationDate\":\"2021-04-26T15:42:40Z\",\"storageAccountType\":\"GRS\",\"sourceDatabaseDeletionDate\":\"2021-09-09T06:40:06Z\"},\"location\":\"tzjuzgwyzmhtxo\",\"tags\":{\"vjcbpwxqpsrknf\":\"ts\",\"vxqtayriwwroyqbe\":\"guvriuhprwmd\",\"nojvknmefqsg\":\"rmcqiby\",\"pjyzhpv\":\"vah\"},\"id\":\"qzcjrvxdj\",\"name\":\"lmwlxkvugfhzo\",\"type\":\"awjvzunluthnnp\"}")
            .toObject(SqlPoolInner.class);
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.location());
        Assertions.assertEquals("ts", model.tags().get("vjcbpwxqpsrknf"));
        Assertions.assertEquals("jznb", model.sku().tier());
        Assertions.assertEquals("ow", model.sku().name());
        Assertions.assertEquals(2070148801, model.sku().capacity());
        Assertions.assertEquals(4938464628745807464L, model.maxSizeBytes());
        Assertions.assertEquals("eualupjmkhf", model.collation());
        Assertions.assertEquals("bbcswsrtjri", model.sourceDatabaseId());
        Assertions.assertEquals("rbpbewtghfgblcg", model.recoverableDatabaseId());
        Assertions.assertEquals("zvlvqhjkbegib", model.provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-25T02:24:40Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.POINT_IN_TIME_RESTORE, model.createMode());
        Assertions.assertEquals(StorageAccountType.GRS, model.storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-09T06:40:06Z"), model.sourceDatabaseDeletionDate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlPoolInner model = new SqlPoolInner().withLocation("tzjuzgwyzmhtxo")
            .withTags(mapOf("vjcbpwxqpsrknf", "ts", "vxqtayriwwroyqbe", "guvriuhprwmd", "nojvknmefqsg", "rmcqiby",
                "pjyzhpv", "vah"))
            .withSku(new Sku().withTier("jznb").withName("ow").withCapacity(2070148801))
            .withMaxSizeBytes(4938464628745807464L)
            .withCollation("eualupjmkhf")
            .withSourceDatabaseId("bbcswsrtjri")
            .withRecoverableDatabaseId("rbpbewtghfgblcg")
            .withProvisioningState("zvlvqhjkbegib")
            .withRestorePointInTime(OffsetDateTime.parse("2021-08-25T02:24:40Z"))
            .withCreateMode(CreateMode.POINT_IN_TIME_RESTORE)
            .withStorageAccountType(StorageAccountType.GRS)
            .withSourceDatabaseDeletionDate(OffsetDateTime.parse("2021-09-09T06:40:06Z"));
        model = BinaryData.fromObject(model).toObject(SqlPoolInner.class);
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.location());
        Assertions.assertEquals("ts", model.tags().get("vjcbpwxqpsrknf"));
        Assertions.assertEquals("jznb", model.sku().tier());
        Assertions.assertEquals("ow", model.sku().name());
        Assertions.assertEquals(2070148801, model.sku().capacity());
        Assertions.assertEquals(4938464628745807464L, model.maxSizeBytes());
        Assertions.assertEquals("eualupjmkhf", model.collation());
        Assertions.assertEquals("bbcswsrtjri", model.sourceDatabaseId());
        Assertions.assertEquals("rbpbewtghfgblcg", model.recoverableDatabaseId());
        Assertions.assertEquals("zvlvqhjkbegib", model.provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-25T02:24:40Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.POINT_IN_TIME_RESTORE, model.createMode());
        Assertions.assertEquals(StorageAccountType.GRS, model.storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-09T06:40:06Z"), model.sourceDatabaseDeletionDate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
