// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SqlPoolInner;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.Sku;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlPoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlPoolInner model = BinaryData.fromString(
            "{\"sku\":{\"tier\":\"mkqjj\",\"name\":\"uenvrkp\",\"capacity\":1149694160},\"properties\":{\"maxSizeBytes\":2507963657261590571,\"collation\":\"bqaays\",\"sourceDatabaseId\":\"ixqtn\",\"recoverableDatabaseId\":\"tezlwff\",\"provisioningState\":\"akpjpqqmtedlt\",\"status\":\"jihy\",\"restorePointInTime\":\"2021-09-10T18:44:16Z\",\"createMode\":\"Recovery\",\"creationDate\":\"2021-03-06T19:52:25Z\",\"storageAccountType\":\"ZRS\"},\"location\":\"y\",\"tags\":{\"p\":\"ygupkv\"},\"id\":\"dscwxqupevzhf\",\"name\":\"totxhojujb\",\"type\":\"pelmcuvhixbjxyf\"}")
            .toObject(SqlPoolInner.class);
        Assertions.assertEquals("y", model.location());
        Assertions.assertEquals("ygupkv", model.tags().get("p"));
        Assertions.assertEquals("mkqjj", model.sku().tier());
        Assertions.assertEquals("uenvrkp", model.sku().name());
        Assertions.assertEquals(1149694160, model.sku().capacity());
        Assertions.assertEquals(2507963657261590571L, model.maxSizeBytes());
        Assertions.assertEquals("bqaays", model.collation());
        Assertions.assertEquals("ixqtn", model.sourceDatabaseId());
        Assertions.assertEquals("tezlwff", model.recoverableDatabaseId());
        Assertions.assertEquals("akpjpqqmtedlt", model.provisioningState());
        Assertions.assertEquals("jihy", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-10T18:44:16Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.RECOVERY, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T19:52:25Z"), model.creationDate());
        Assertions.assertEquals(StorageAccountType.ZRS, model.storageAccountType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlPoolInner model = new SqlPoolInner().withLocation("y")
            .withTags(mapOf("p", "ygupkv"))
            .withSku(new Sku().withTier("mkqjj").withName("uenvrkp").withCapacity(1149694160))
            .withMaxSizeBytes(2507963657261590571L)
            .withCollation("bqaays")
            .withSourceDatabaseId("ixqtn")
            .withRecoverableDatabaseId("tezlwff")
            .withProvisioningState("akpjpqqmtedlt")
            .withStatus("jihy")
            .withRestorePointInTime(OffsetDateTime.parse("2021-09-10T18:44:16Z"))
            .withCreateMode(CreateMode.RECOVERY)
            .withCreationDate(OffsetDateTime.parse("2021-03-06T19:52:25Z"))
            .withStorageAccountType(StorageAccountType.ZRS);
        model = BinaryData.fromObject(model).toObject(SqlPoolInner.class);
        Assertions.assertEquals("y", model.location());
        Assertions.assertEquals("ygupkv", model.tags().get("p"));
        Assertions.assertEquals("mkqjj", model.sku().tier());
        Assertions.assertEquals("uenvrkp", model.sku().name());
        Assertions.assertEquals(1149694160, model.sku().capacity());
        Assertions.assertEquals(2507963657261590571L, model.maxSizeBytes());
        Assertions.assertEquals("bqaays", model.collation());
        Assertions.assertEquals("ixqtn", model.sourceDatabaseId());
        Assertions.assertEquals("tezlwff", model.recoverableDatabaseId());
        Assertions.assertEquals("akpjpqqmtedlt", model.provisioningState());
        Assertions.assertEquals("jihy", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-10T18:44:16Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.RECOVERY, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T19:52:25Z"), model.creationDate());
        Assertions.assertEquals(StorageAccountType.ZRS, model.storageAccountType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
