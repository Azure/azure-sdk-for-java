// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.SsisVariable;
import org.junit.jupiter.api.Assertions;

public final class SsisVariableTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SsisVariable model = BinaryData.fromString(
            "{\"id\":9009344102822195529,\"name\":\"plixlajmllpqu\",\"description\":\"hamfowgwbtmk\",\"dataType\":\"xpk\",\"sensitive\":false,\"value\":\"xofqovchi\",\"sensitiveValue\":\"p\"}")
            .toObject(SsisVariable.class);
        Assertions.assertEquals(9009344102822195529L, model.id());
        Assertions.assertEquals("plixlajmllpqu", model.name());
        Assertions.assertEquals("hamfowgwbtmk", model.description());
        Assertions.assertEquals("xpk", model.dataType());
        Assertions.assertEquals(false, model.sensitive());
        Assertions.assertEquals("xofqovchi", model.value());
        Assertions.assertEquals("p", model.sensitiveValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SsisVariable model = new SsisVariable().withId(9009344102822195529L)
            .withName("plixlajmllpqu")
            .withDescription("hamfowgwbtmk")
            .withDataType("xpk")
            .withSensitive(false)
            .withValue("xofqovchi")
            .withSensitiveValue("p");
        model = BinaryData.fromObject(model).toObject(SsisVariable.class);
        Assertions.assertEquals(9009344102822195529L, model.id());
        Assertions.assertEquals("plixlajmllpqu", model.name());
        Assertions.assertEquals("hamfowgwbtmk", model.description());
        Assertions.assertEquals("xpk", model.dataType());
        Assertions.assertEquals(false, model.sensitive());
        Assertions.assertEquals("xofqovchi", model.value());
        Assertions.assertEquals("p", model.sensitiveValue());
    }
}
