// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.SsisVariable;
import org.junit.jupiter.api.Assertions;

public final class SsisVariableTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SsisVariable model =
            BinaryData
                .fromString(
                    "{\"id\":1698212736552270549,\"name\":\"jiqul\",\"description\":\"xbdmvrscmqernd\",\"dataType\":\"nyeofltfnnxrk\",\"sensitive\":true,\"value\":\"ynnfmuiii\",\"sensitiveValue\":\"pfoh\"}")
                .toObject(SsisVariable.class);
        Assertions.assertEquals(1698212736552270549L, model.id());
        Assertions.assertEquals("jiqul", model.name());
        Assertions.assertEquals("xbdmvrscmqernd", model.description());
        Assertions.assertEquals("nyeofltfnnxrk", model.dataType());
        Assertions.assertEquals(true, model.sensitive());
        Assertions.assertEquals("ynnfmuiii", model.value());
        Assertions.assertEquals("pfoh", model.sensitiveValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SsisVariable model =
            new SsisVariable()
                .withId(1698212736552270549L)
                .withName("jiqul")
                .withDescription("xbdmvrscmqernd")
                .withDataType("nyeofltfnnxrk")
                .withSensitive(true)
                .withValue("ynnfmuiii")
                .withSensitiveValue("pfoh");
        model = BinaryData.fromObject(model).toObject(SsisVariable.class);
        Assertions.assertEquals(1698212736552270549L, model.id());
        Assertions.assertEquals("jiqul", model.name());
        Assertions.assertEquals("xbdmvrscmqernd", model.description());
        Assertions.assertEquals("nyeofltfnnxrk", model.dataType());
        Assertions.assertEquals(true, model.sensitive());
        Assertions.assertEquals("ynnfmuiii", model.value());
        Assertions.assertEquals("pfoh", model.sensitiveValue());
    }
}
