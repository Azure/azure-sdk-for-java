// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.SqlPool;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlPoolsDeleteMockTests {
    @Test
    public void testDelete() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"tier\":\"gfgf\",\"name\":\"jrykwlefksxqce\",\"capacity\":119953679},\"properties\":{\"maxSizeBytes\":428961828074750240,\"collation\":\"qvzvlu\",\"sourceDatabaseId\":\"qa\",\"recoverableDatabaseId\":\"ssscyvai\",\"provisioningState\":\"Succeeded\",\"status\":\"cvfyeowpsfxtjdhs\",\"restorePointInTime\":\"2021-10-20T12:49:56Z\",\"createMode\":\"Restore\",\"creationDate\":\"2021-06-14T00:45:35Z\",\"storageAccountType\":\"LRS\",\"sourceDatabaseDeletionDate\":\"2021-11-12T07:02:25Z\"},\"location\":\"tehdpboujs\",\"tags\":{\"ygnxcgjtfrnqukt\":\"vvdshxcdedsue\",\"trwntfmtbgw\":\"fnslnlrxsmy\",\"eyz\":\"dxwnazkurrd\",\"uzu\":\"whsetwwjwzzqs\"},\"id\":\"kykcyqhyqqzz\",\"name\":\"c\",\"type\":\"keys\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SynapseManager manager =
            SynapseManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SqlPool response = manager.sqlPools().delete("ljssm", "tsnld", "pwolgisubxb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tehdpboujs", response.location());
        Assertions.assertEquals("vvdshxcdedsue", response.tags().get("ygnxcgjtfrnqukt"));
        Assertions.assertEquals("gfgf", response.sku().tier());
        Assertions.assertEquals("jrykwlefksxqce", response.sku().name());
        Assertions.assertEquals(119953679, response.sku().capacity());
        Assertions.assertEquals(428961828074750240L, response.maxSizeBytes());
        Assertions.assertEquals("qvzvlu", response.collation());
        Assertions.assertEquals("qa", response.sourceDatabaseId());
        Assertions.assertEquals("ssscyvai", response.recoverableDatabaseId());
        Assertions.assertEquals("Succeeded", response.provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T12:49:56Z"), response.restorePointInTime());
        Assertions.assertEquals(CreateMode.RESTORE, response.createMode());
        Assertions.assertEquals(StorageAccountType.LRS, response.storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-12T07:02:25Z"), response.sourceDatabaseDeletionDate());
    }
}
