// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.PrivateLinkHubInner;
import com.azure.resourcemanager.synapse.models.PrivateLinkHubInfoListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkHubInfoListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkHubInfoListResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"aamdect\",\"value\":[{\"properties\":{\"provisioningState\":\"scjeypv\",\"privateEndpointConnections\":[]},\"location\":\"zrkgqhcjrefovg\",\"tags\":{\"yvxyqjp\":\"sle\"},\"id\":\"cattpngjcrcczsq\",\"name\":\"jh\",\"type\":\"mdajv\"}]}")
                .toObject(PrivateLinkHubInfoListResult.class);
        Assertions.assertEquals("aamdect", model.nextLink());
        Assertions.assertEquals("zrkgqhcjrefovg", model.value().get(0).location());
        Assertions.assertEquals("sle", model.value().get(0).tags().get("yvxyqjp"));
        Assertions.assertEquals("scjeypv", model.value().get(0).provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkHubInfoListResult model =
            new PrivateLinkHubInfoListResult()
                .withNextLink("aamdect")
                .withValue(
                    Arrays
                        .asList(
                            new PrivateLinkHubInner()
                                .withLocation("zrkgqhcjrefovg")
                                .withTags(mapOf("yvxyqjp", "sle"))
                                .withProvisioningState("scjeypv")));
        model = BinaryData.fromObject(model).toObject(PrivateLinkHubInfoListResult.class);
        Assertions.assertEquals("aamdect", model.nextLink());
        Assertions.assertEquals("zrkgqhcjrefovg", model.value().get(0).location());
        Assertions.assertEquals("sle", model.value().get(0).tags().get("yvxyqjp"));
        Assertions.assertEquals("scjeypv", model.value().get(0).provisioningState());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
