// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.PrivateLinkHubInner;
import com.azure.resourcemanager.synapse.models.PrivateLinkHubInfoListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkHubInfoListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkHubInfoListResult model = BinaryData.fromString(
            "{\"nextLink\":\"hxepcyvahfnlj\",\"value\":[{\"properties\":{\"provisioningState\":\"vuujq\",\"privateEndpointConnections\":[{\"id\":\"kgj\",\"properties\":{}},{\"id\":\"oxgvclt\",\"properties\":{}}]},\"location\":\"sncghkjeszz\",\"tags\":{\"mpvecxgodebfqk\":\"jhtxfvgxbfsmxne\",\"flz\":\"rbmpukgri\"},\"id\":\"fbxzpuzycisp\",\"name\":\"qzahmgkbrp\",\"type\":\"y\"}]}")
            .toObject(PrivateLinkHubInfoListResult.class);
        Assertions.assertEquals("hxepcyvahfnlj", model.nextLink());
        Assertions.assertEquals("sncghkjeszz", model.value().get(0).location());
        Assertions.assertEquals("jhtxfvgxbfsmxne", model.value().get(0).tags().get("mpvecxgodebfqk"));
        Assertions.assertEquals("vuujq", model.value().get(0).provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkHubInfoListResult model = new PrivateLinkHubInfoListResult().withNextLink("hxepcyvahfnlj")
            .withValue(Arrays.asList(new PrivateLinkHubInner().withLocation("sncghkjeszz")
                .withTags(mapOf("mpvecxgodebfqk", "jhtxfvgxbfsmxne", "flz", "rbmpukgri"))
                .withProvisioningState("vuujq")));
        model = BinaryData.fromObject(model).toObject(PrivateLinkHubInfoListResult.class);
        Assertions.assertEquals("hxepcyvahfnlj", model.nextLink());
        Assertions.assertEquals("sncghkjeszz", model.value().get(0).location());
        Assertions.assertEquals("jhtxfvgxbfsmxne", model.value().get(0).tags().get("mpvecxgodebfqk"));
        Assertions.assertEquals("vuujq", model.value().get(0).provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
