// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.PrivateLinkHubInner;
import com.azure.resourcemanager.synapse.models.PrivateLinkHubInfoListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkHubInfoListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkHubInfoListResult model = BinaryData.fromString(
            "{\"nextLink\":\"rwr\",\"value\":[{\"properties\":{\"provisioningState\":\"aenuuz\",\"privateEndpointConnections\":[{\"id\":\"minrfdw\",\"properties\":{}},{\"id\":\"hhziuief\",\"properties\":{}}]},\"location\":\"bhdmsmlmzqhof\",\"tags\":{\"u\":\"ae\",\"icslfaoq\":\"ah\",\"kaivwit\":\"piyylhalnswhccsp\",\"bwemhairs\":\"scywuggwoluhc\"},\"id\":\"rgzdwmsweyp\",\"name\":\"w\",\"type\":\"xggicccnxqhuexmk\"},{\"properties\":{\"provisioningState\":\"stvlzywemhzrnc\",\"privateEndpointConnections\":[{\"id\":\"lusiy\",\"properties\":{}},{\"id\":\"fgytguslfeadcyg\",\"properties\":{}},{\"id\":\"yhejhzisxgfp\",\"properties\":{}},{\"id\":\"lppvksrpq\",\"properties\":{}}]},\"location\":\"jzraehtwdwrf\",\"tags\":{\"cdl\":\"iby\"},\"id\":\"h\",\"name\":\"hfwpracstwit\",\"type\":\"khevxccedc\"},{\"properties\":{\"provisioningState\":\"dyodnwzxltj\",\"privateEndpointConnections\":[{\"id\":\"ltiugcxnavv\",\"properties\":{}},{\"id\":\"ibyqunyowxwlmdj\",\"properties\":{}},{\"id\":\"fgbvfvpdbo\",\"properties\":{}}]},\"location\":\"cizsjqlhkrribdei\",\"tags\":{\"kghv\":\"p\",\"pjorwkqnyhg\":\"ndzwmkrefa\",\"jivfxzsjabib\":\"ij\",\"jxbkzbzkdvn\":\"ystawfsdjpvkvp\"},\"id\":\"jabudurgkakmo\",\"name\":\"zhjjklffhmouwq\",\"type\":\"gzrf\"}]}")
            .toObject(PrivateLinkHubInfoListResult.class);
        Assertions.assertEquals("rwr", model.nextLink());
        Assertions.assertEquals("bhdmsmlmzqhof", model.value().get(0).location());
        Assertions.assertEquals("ae", model.value().get(0).tags().get("u"));
        Assertions.assertEquals("aenuuz", model.value().get(0).provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkHubInfoListResult model
            = new PrivateLinkHubInfoListResult().withNextLink("rwr")
                .withValue(Arrays.asList(
                    new PrivateLinkHubInner().withLocation("bhdmsmlmzqhof")
                        .withTags(mapOf("u", "ae", "icslfaoq", "ah", "kaivwit", "piyylhalnswhccsp", "bwemhairs",
                            "scywuggwoluhc"))
                        .withProvisioningState("aenuuz"),
                    new PrivateLinkHubInner().withLocation("jzraehtwdwrf")
                        .withTags(mapOf("cdl", "iby"))
                        .withProvisioningState("stvlzywemhzrnc"),
                    new PrivateLinkHubInner().withLocation("cizsjqlhkrribdei")
                        .withTags(mapOf("kghv", "p", "pjorwkqnyhg", "ndzwmkrefa", "jivfxzsjabib", "ij", "jxbkzbzkdvn",
                            "ystawfsdjpvkvp"))
                        .withProvisioningState("dyodnwzxltj")));
        model = BinaryData.fromObject(model).toObject(PrivateLinkHubInfoListResult.class);
        Assertions.assertEquals("rwr", model.nextLink());
        Assertions.assertEquals("bhdmsmlmzqhof", model.value().get(0).location());
        Assertions.assertEquals("ae", model.value().get(0).tags().get("u"));
        Assertions.assertEquals("aenuuz", model.value().get(0).provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
