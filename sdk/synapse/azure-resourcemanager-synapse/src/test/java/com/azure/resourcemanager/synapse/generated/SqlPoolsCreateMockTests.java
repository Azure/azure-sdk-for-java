// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.Sku;
import com.azure.resourcemanager.synapse.models.SqlPool;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlPoolsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"sku\":{\"tier\":\"qtoyrpl\",\"name\":\"lajmllp\",\"capacity\":86519488},\"properties\":{\"maxSizeBytes\":2269079436448448677,\"collation\":\"owgw\",\"sourceDatabaseId\":\"mkekxpkzwaqxo\",\"recoverableDatabaseId\":\"ovchiqbplvfid\",\"provisioningState\":\"Succeeded\",\"status\":\"ihpq\",\"restorePointInTime\":\"2021-11-29T16:42:23Z\",\"createMode\":\"PointInTimeRestore\",\"creationDate\":\"2021-11-13T12:07:33Z\",\"storageAccountType\":\"GRS\"},\"location\":\"cx\",\"tags\":{\"vcxjsgbipcukdvek\":\"jfowxwy\"},\"id\":\"buhoduchv\",\"name\":\"scrdp\",\"type\":\"bfdyjduss\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SqlPool response = manager.sqlPools()
            .define("wakwseivmakxhys")
            .withRegion("eituugedhfpjs")
            .withExistingWorkspace("atuztjct", "bpvbkaehxsmzygd")
            .withTags(mapOf("yjdeolctaebfs", "mbl", "tb", "rledjcu", "d", "tqi"))
            .withSku(new Sku().withTier("juxlkbectvtfjm").withName("dchmaiubavlz").withCapacity(1418013122))
            .withMaxSizeBytes(8179148681287507578L)
            .withCollation("kzaz")
            .withSourceDatabaseId("oke")
            .withRecoverableDatabaseId("jqafkmkro")
            .withProvisioningState("rthqe")
            .withStatus("pqrtvaoznqni")
            .withRestorePointInTime(OffsetDateTime.parse("2020-12-25T05:02:08Z"))
            .withCreateMode(CreateMode.RECOVERY)
            .withCreationDate(OffsetDateTime.parse("2021-10-31T07:16:56Z"))
            .withStorageAccountType(StorageAccountType.GRS)
            .create();

        Assertions.assertEquals("cx", response.location());
        Assertions.assertEquals("jfowxwy", response.tags().get("vcxjsgbipcukdvek"));
        Assertions.assertEquals("qtoyrpl", response.sku().tier());
        Assertions.assertEquals("lajmllp", response.sku().name());
        Assertions.assertEquals(86519488, response.sku().capacity());
        Assertions.assertEquals(2269079436448448677L, response.maxSizeBytes());
        Assertions.assertEquals("owgw", response.collation());
        Assertions.assertEquals("mkekxpkzwaqxo", response.sourceDatabaseId());
        Assertions.assertEquals("ovchiqbplvfid", response.recoverableDatabaseId());
        Assertions.assertEquals("Succeeded", response.provisioningState());
        Assertions.assertEquals("ihpq", response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-29T16:42:23Z"), response.restorePointInTime());
        Assertions.assertEquals(CreateMode.POINT_IN_TIME_RESTORE, response.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-13T12:07:33Z"), response.creationDate());
        Assertions.assertEquals(StorageAccountType.GRS, response.storageAccountType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
