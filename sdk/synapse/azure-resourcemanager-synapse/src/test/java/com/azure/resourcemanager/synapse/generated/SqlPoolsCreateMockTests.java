// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.Sku;
import com.azure.resourcemanager.synapse.models.SqlPool;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlPoolsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"tier\":\"cnadbuwqrgxf\",\"name\":\"mqiyn\",\"capacity\":1277204579},\"properties\":{\"maxSizeBytes\":8493195048582783222,\"collation\":\"kiiwvmtu\",\"sourceDatabaseId\":\"pymdjfuax\",\"recoverableDatabaseId\":\"qvqpilrg\",\"provisioningState\":\"Succeeded\",\"status\":\"x\",\"restorePointInTime\":\"2021-02-04T06:25:12Z\",\"createMode\":\"Default\",\"creationDate\":\"2021-10-19T15:40:56Z\",\"storageAccountType\":\"GRS\",\"sourceDatabaseDeletionDate\":\"2021-01-30T10:04:36Z\"},\"location\":\"fqep\",\"tags\":{\"vpjbowcpjqduq\":\"ltuubw\"},\"id\":\"ixexkydfbwljavhu\",\"name\":\"rkjd\",\"type\":\"vrg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SynapseManager manager =
            SynapseManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SqlPool response =
            manager
                .sqlPools()
                .define("zbeqrztrxa")
                .withRegion("fquwzpwiibel")
                .withExistingWorkspace("yubqjr", "stvrjeqmt")
                .withTags(mapOf("tbxxniuisd", "rwkwbpjxljtxbus"))
                .withSku(new Sku().withTier("d").withName("bsrwrsnrhpqat").withCapacity(1985543449))
                .withMaxSizeBytes(575751252969177352L)
                .withCollation("xkvvcs")
                .withSourceDatabaseId("svuv")
                .withRecoverableDatabaseId("kqxetqmmliv")
                .withProvisioningState("jxnw")
                .withRestorePointInTime(OffsetDateTime.parse("2021-07-27T18:54:55Z"))
                .withCreateMode(CreateMode.DEFAULT)
                .withStorageAccountType(StorageAccountType.GRS)
                .withSourceDatabaseDeletionDate(OffsetDateTime.parse("2021-04-29T09:33:37Z"))
                .create();

        Assertions.assertEquals("fqep", response.location());
        Assertions.assertEquals("ltuubw", response.tags().get("vpjbowcpjqduq"));
        Assertions.assertEquals("cnadbuwqrgxf", response.sku().tier());
        Assertions.assertEquals("mqiyn", response.sku().name());
        Assertions.assertEquals(1277204579, response.sku().capacity());
        Assertions.assertEquals(8493195048582783222L, response.maxSizeBytes());
        Assertions.assertEquals("kiiwvmtu", response.collation());
        Assertions.assertEquals("pymdjfuax", response.sourceDatabaseId());
        Assertions.assertEquals("qvqpilrg", response.recoverableDatabaseId());
        Assertions.assertEquals("Succeeded", response.provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T06:25:12Z"), response.restorePointInTime());
        Assertions.assertEquals(CreateMode.DEFAULT, response.createMode());
        Assertions.assertEquals(StorageAccountType.GRS, response.storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T10:04:36Z"), response.sourceDatabaseDeletionDate());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
