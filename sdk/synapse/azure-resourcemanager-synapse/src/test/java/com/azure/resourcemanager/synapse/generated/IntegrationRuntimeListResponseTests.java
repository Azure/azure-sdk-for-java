// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.IntegrationRuntimeResourceInner;
import com.azure.resourcemanager.synapse.models.IntegrationRuntime;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"type\":\"IntegrationRuntime\",\"description\":\"gzfbishcbk\",\"\":{\"wgipwhono\":\"datadeyeamdphagalpbu\",\"kix\":\"datakgshwa\",\"eputtmrywnuzoqf\":\"databin\"}},\"etag\":\"yqzrnkcqvyxlw\",\"id\":\"zlsico\",\"name\":\"oqqnwvlryav\",\"type\":\"hheunmmqhgyx\"},{\"properties\":{\"type\":\"IntegrationRuntime\",\"description\":\"onocukok\",\"\":{\"szfkbe\":\"dataxuconu\",\"jmwvvj\":\"datapewr\"}},\"etag\":\"tcxsenhwlrs\",\"id\":\"frzpwvlqdqgb\",\"name\":\"qylihkaetckt\",\"type\":\"fcivfsnkym\"}],\"nextLink\":\"tqhjfbebrjcx\"}")
            .toObject(IntegrationRuntimeListResponse.class);
        Assertions.assertEquals("gzfbishcbk", model.value().get(0).properties().description());
        Assertions.assertEquals("tqhjfbebrjcx", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeListResponse model
            = new IntegrationRuntimeListResponse()
                .withValue(Arrays.asList(
                    new IntegrationRuntimeResourceInner()
                        .withProperties(new IntegrationRuntime().withDescription("gzfbishcbk")
                            .withAdditionalProperties(mapOf("type", "IntegrationRuntime"))),
                    new IntegrationRuntimeResourceInner()
                        .withProperties(new IntegrationRuntime().withDescription("onocukok")
                            .withAdditionalProperties(mapOf("type", "IntegrationRuntime")))))
                .withNextLink("tqhjfbebrjcx");
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeListResponse.class);
        Assertions.assertEquals("gzfbishcbk", model.value().get(0).properties().description());
        Assertions.assertEquals("tqhjfbebrjcx", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
