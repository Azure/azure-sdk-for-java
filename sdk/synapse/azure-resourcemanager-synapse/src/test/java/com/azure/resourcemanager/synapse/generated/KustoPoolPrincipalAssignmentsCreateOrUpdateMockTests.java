// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.ClusterPrincipalAssignment;
import com.azure.resourcemanager.synapse.models.ClusterPrincipalRole;
import com.azure.resourcemanager.synapse.models.PrincipalType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class KustoPoolPrincipalAssignmentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"principalId\":\"vvyxtvvxnakzi\",\"role\":\"AllDatabasesAdmin\",\"tenantId\":\"aybf\",\"principalType\":\"App\",\"tenantName\":\"gfwhrmvlaknujmwx\",\"principalName\":\"zblxna\",\"provisioningState\":\"Succeeded\",\"aadObjectId\":\"fndcbsyhlud\"},\"id\":\"kkovohwv\",\"name\":\"rj\",\"type\":\"dvt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPrincipalAssignment response = manager.kustoPoolPrincipalAssignments()
            .define("izej")
            .withExistingKustoPool("hheuyuun", "myevyigdeipn", "li")
            .withPrincipalId("cndjzwhajo")
            .withRole(ClusterPrincipalRole.ALL_DATABASES_VIEWER)
            .withTenantId("qokhdyncradxs")
            .withPrincipalType(PrincipalType.GROUP)
            .create();

        Assertions.assertEquals("vvyxtvvxnakzi", response.principalId());
        Assertions.assertEquals(ClusterPrincipalRole.ALL_DATABASES_ADMIN, response.role());
        Assertions.assertEquals("aybf", response.tenantId());
        Assertions.assertEquals(PrincipalType.APP, response.principalType());
    }
}
