// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.DataFlowComputeType;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeVNetProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model = BinaryData.fromString(
            "{\"location\":\"zvlnsnnjz\",\"nodeSize\":\"afolpymwamxqzrag\",\"numberOfNodes\":1193102156,\"maxParallelExecutionsPerNode\":1656670838,\"dataFlowProperties\":{\"computeType\":\"General\",\"coreCount\":881668100,\"timeToLive\":1328440985,\"\":{\"nmzlanru\":\"dataejchcsrlz\",\"phcnzqtpj\":\"datadwv\"}},\"vNetProperties\":{\"vNetId\":\"rhv\",\"subnet\":\"laiwdcxsmlzzh\",\"publicIPs\":[\"xetlgydlhqv\",\"n\",\"pxy\"],\"subnetId\":\"fiqgeaar\",\"\":{\"ulidwc\":\"dataekglklb\",\"nfhjirwgdnqzbr\":\"datavmzegj\",\"igsxcdgljplk\":\"datakspzhzmtksjcit\"}},\"\":{\"pfmdgycx\":\"datachtomflrytsw\"}}")
            .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("zvlnsnnjz", model.location());
        Assertions.assertEquals("afolpymwamxqzrag", model.nodeSize());
        Assertions.assertEquals(1193102156, model.numberOfNodes());
        Assertions.assertEquals(1656670838, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.dataFlowProperties().computeType());
        Assertions.assertEquals(881668100, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1328440985, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals("rhv", model.vNetProperties().vNetId());
        Assertions.assertEquals("laiwdcxsmlzzh", model.vNetProperties().subnet());
        Assertions.assertEquals("xetlgydlhqv", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("fiqgeaar", model.vNetProperties().subnetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model = new IntegrationRuntimeComputeProperties().withLocation("zvlnsnnjz")
            .withNodeSize("afolpymwamxqzrag")
            .withNumberOfNodes(1193102156)
            .withMaxParallelExecutionsPerNode(1656670838)
            .withDataFlowProperties(
                new IntegrationRuntimeDataFlowProperties().withComputeType(DataFlowComputeType.GENERAL)
                    .withCoreCount(881668100)
                    .withTimeToLive(1328440985)
                    .withAdditionalProperties(mapOf()))
            .withVNetProperties(new IntegrationRuntimeVNetProperties().withVNetId("rhv")
                .withSubnet("laiwdcxsmlzzh")
                .withPublicIPs(Arrays.asList("xetlgydlhqv", "n", "pxy"))
                .withSubnetId("fiqgeaar")
                .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("zvlnsnnjz", model.location());
        Assertions.assertEquals("afolpymwamxqzrag", model.nodeSize());
        Assertions.assertEquals(1193102156, model.numberOfNodes());
        Assertions.assertEquals(1656670838, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.dataFlowProperties().computeType());
        Assertions.assertEquals(881668100, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1328440985, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals("rhv", model.vNetProperties().vNetId());
        Assertions.assertEquals("laiwdcxsmlzzh", model.vNetProperties().subnet());
        Assertions.assertEquals("xetlgydlhqv", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("fiqgeaar", model.vNetProperties().subnetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
