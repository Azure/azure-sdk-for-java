// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.BigDataPoolResourceInfo;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BigDataPoolsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"qkueatgroesho\",\"autoScale\":{\"minNodeCount\":1935320450,\"enabled\":false,\"maxNodeCount\":826437079},\"creationDate\":\"2021-05-24T01:51:35Z\",\"autoPause\":{\"delayInMinutes\":597504676,\"enabled\":true},\"isComputeIsolationEnabled\":false,\"sessionLevelPackagesEnabled\":true,\"cacheSize\":1536135813,\"dynamicExecutorAllocation\":{\"enabled\":true},\"sparkEventsFolder\":\"mtdwcky\",\"nodeCount\":568375923,\"libraryRequirements\":{\"time\":\"2021-08-17T10:42:57Z\",\"content\":\"dljdjuskb\",\"filename\":\"eqy\"},\"customLibraries\":[{\"name\":\"ysfaqegplwrysh\",\"path\":\"d\",\"containerName\":\"bxgkqusy\",\"uploadedTimestamp\":\"2020-12-26T05:36:32Z\",\"type\":\"dacarvvlfnty\",\"provisioningStatus\":\"poi\",\"creatorId\":\"naz\"},{\"name\":\"ohzrsqalsx\",\"path\":\"nwqapfgsdpcvess\",\"containerName\":\"hhkuuip\",\"uploadedTimestamp\":\"2021-07-14T11:13:21Z\",\"type\":\"ctekval\",\"provisioningStatus\":\"htjqvqyvw\",\"creatorId\":\"tae\"},{\"name\":\"hzzysevusxiv\",\"path\":\"rryveimipskdy\",\"containerName\":\"tv\",\"uploadedTimestamp\":\"2021-09-22T17:23:18Z\",\"type\":\"aftjvvruxwigsy\",\"provisioningStatus\":\"pq\",\"creatorId\":\"mjtgrqg\"}],\"sparkConfigProperties\":{\"time\":\"2021-09-22T05:16:38Z\",\"content\":\"eplkcsm\",\"filename\":\"hwtbbaedorvvm\"},\"sparkVersion\":\"loyg\",\"defaultSparkLogFolder\":\"gwumgxdgdhpa\",\"nodeSize\":\"Small\",\"nodeSizeFamily\":\"None\",\"lastSucceededTimestamp\":\"2021-01-13T23:43:23Z\"},\"location\":\"d\",\"tags\":{\"colsrsxaptefhex\":\"aqwotmmwl\"},\"id\":\"gjokjljnhvlqjbek\",\"name\":\"eeksnbksdqhjvyk\",\"type\":\"xeslkhhustcpoqm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BigDataPoolResourceInfo> response
            = manager.bigDataPools().listByWorkspace("txfkndlqvt", "knvgmmbugtywat", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("d", response.iterator().next().location());
        Assertions.assertEquals("aqwotmmwl", response.iterator().next().tags().get("colsrsxaptefhex"));
        Assertions.assertEquals("qkueatgroesho", response.iterator().next().provisioningState());
        Assertions.assertEquals(1935320450, response.iterator().next().autoScale().minNodeCount());
        Assertions.assertEquals(false, response.iterator().next().autoScale().enabled());
        Assertions.assertEquals(826437079, response.iterator().next().autoScale().maxNodeCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-24T01:51:35Z"),
            response.iterator().next().creationDate());
        Assertions.assertEquals(597504676, response.iterator().next().autoPause().delayInMinutes());
        Assertions.assertEquals(true, response.iterator().next().autoPause().enabled());
        Assertions.assertEquals(false, response.iterator().next().isComputeIsolationEnabled());
        Assertions.assertEquals(true, response.iterator().next().sessionLevelPackagesEnabled());
        Assertions.assertEquals(1536135813, response.iterator().next().cacheSize());
        Assertions.assertEquals(true, response.iterator().next().dynamicExecutorAllocation().enabled());
        Assertions.assertEquals("mtdwcky", response.iterator().next().sparkEventsFolder());
        Assertions.assertEquals(568375923, response.iterator().next().nodeCount());
        Assertions.assertEquals("dljdjuskb", response.iterator().next().libraryRequirements().content());
        Assertions.assertEquals("eqy", response.iterator().next().libraryRequirements().filename());
        Assertions.assertEquals("ysfaqegplwrysh", response.iterator().next().customLibraries().get(0).name());
        Assertions.assertEquals("d", response.iterator().next().customLibraries().get(0).path());
        Assertions.assertEquals("bxgkqusy", response.iterator().next().customLibraries().get(0).containerName());
        Assertions.assertEquals("dacarvvlfnty", response.iterator().next().customLibraries().get(0).type());
        Assertions.assertEquals("eplkcsm", response.iterator().next().sparkConfigProperties().content());
        Assertions.assertEquals("hwtbbaedorvvm", response.iterator().next().sparkConfigProperties().filename());
        Assertions.assertEquals("loyg", response.iterator().next().sparkVersion());
        Assertions.assertEquals("gwumgxdgdhpa", response.iterator().next().defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.SMALL, response.iterator().next().nodeSize());
        Assertions.assertEquals(NodeSizeFamily.NONE, response.iterator().next().nodeSizeFamily());
    }
}
