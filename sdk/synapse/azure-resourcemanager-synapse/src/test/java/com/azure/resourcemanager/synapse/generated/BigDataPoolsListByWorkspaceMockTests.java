// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.BigDataPoolResourceInfo;
import com.azure.resourcemanager.synapse.models.ConfigurationType;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BigDataPoolsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"cejo\",\"autoScale\":{\"minNodeCount\":937861779,\"enabled\":false,\"maxNodeCount\":861790888},\"creationDate\":\"2021-03-20T00:28:35Z\",\"autoPause\":{\"delayInMinutes\":99801916,\"enabled\":false},\"isComputeIsolationEnabled\":false,\"isAutotuneEnabled\":true,\"sessionLevelPackagesEnabled\":false,\"cacheSize\":1249603806,\"dynamicExecutorAllocation\":{\"enabled\":true,\"minExecutors\":316016947,\"maxExecutors\":845820025},\"sparkEventsFolder\":\"izhqikmgobl\",\"nodeCount\":44018032,\"libraryRequirements\":{\"time\":\"2021-05-19T05:59:46Z\",\"content\":\"iisklbonxx\",\"filename\":\"jxvtrkfkgenjqnnp\"},\"customLibraries\":[{\"name\":\"snyxigfouj\",\"path\":\"xgdqmrlhnzkwops\",\"containerName\":\"yinxu\",\"uploadedTimestamp\":\"2021-02-03T10:12:01Z\",\"type\":\"yxwjezb\",\"provisioningStatus\":\"ployuekdcpvu\",\"creatorId\":\"rsvjmnsvujnjktv\"},{\"name\":\"efcjisepkdbxot\",\"path\":\"jampqoclannm\",\"containerName\":\"nlsuqbwzstr\",\"uploadedTimestamp\":\"2021-01-09T08:16:41Z\",\"type\":\"patr\",\"provisioningStatus\":\"jktfinf\",\"creatorId\":\"ks\"},{\"name\":\"culwkqic\",\"path\":\"ook\",\"containerName\":\"flsgaoj\",\"uploadedTimestamp\":\"2021-01-11T06:14:21Z\",\"type\":\"q\",\"provisioningStatus\":\"oc\",\"creatorId\":\"zpujzflmcdsg\"},{\"name\":\"elujiswl\",\"path\":\"unxhfwlfxzfwugeu\",\"containerName\":\"knecexkgrv\",\"uploadedTimestamp\":\"2021-09-28T17:08:57Z\",\"type\":\"d\",\"provisioningStatus\":\"gsytqpdzfyxcn\",\"creatorId\":\"woxcgzbejqfb\"}],\"sparkConfigProperties\":{\"time\":\"2021-03-23T15:39:52Z\",\"content\":\"jxdwdrpazqjkr\",\"filename\":\"bwotfcuuugtji\",\"configurationType\":\"Artifact\"},\"sparkVersion\":\"yiawohfmhnnz\",\"defaultSparkLogFolder\":\"cjjkmqenh\",\"nodeSize\":\"XXXLarge\",\"nodeSizeFamily\":\"HardwareAcceleratedFPGA\",\"lastSucceededTimestamp\":\"2021-10-11T05:24:17Z\"},\"location\":\"sgloi\",\"tags\":{\"enbg\":\"lvivqsuvw\",\"pkhc\":\"i\"},\"id\":\"oa\",\"name\":\"xukuicjuftekio\",\"type\":\"anduew\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BigDataPoolResourceInfo> response = manager.bigDataPools()
            .listByWorkspace("hyrkqakofajfr", "prfvmkinwteyrqsh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sgloi", response.iterator().next().location());
        Assertions.assertEquals("lvivqsuvw", response.iterator().next().tags().get("enbg"));
        Assertions.assertEquals("cejo", response.iterator().next().provisioningState());
        Assertions.assertEquals(937861779, response.iterator().next().autoScale().minNodeCount());
        Assertions.assertEquals(false, response.iterator().next().autoScale().enabled());
        Assertions.assertEquals(861790888, response.iterator().next().autoScale().maxNodeCount());
        Assertions.assertEquals(99801916, response.iterator().next().autoPause().delayInMinutes());
        Assertions.assertEquals(false, response.iterator().next().autoPause().enabled());
        Assertions.assertEquals(false, response.iterator().next().isComputeIsolationEnabled());
        Assertions.assertEquals(true, response.iterator().next().isAutotuneEnabled());
        Assertions.assertEquals(false, response.iterator().next().sessionLevelPackagesEnabled());
        Assertions.assertEquals(1249603806, response.iterator().next().cacheSize());
        Assertions.assertEquals(true, response.iterator().next().dynamicExecutorAllocation().enabled());
        Assertions.assertEquals(316016947, response.iterator().next().dynamicExecutorAllocation().minExecutors());
        Assertions.assertEquals(845820025, response.iterator().next().dynamicExecutorAllocation().maxExecutors());
        Assertions.assertEquals("izhqikmgobl", response.iterator().next().sparkEventsFolder());
        Assertions.assertEquals(44018032, response.iterator().next().nodeCount());
        Assertions.assertEquals("iisklbonxx", response.iterator().next().libraryRequirements().content());
        Assertions.assertEquals("jxvtrkfkgenjqnnp", response.iterator().next().libraryRequirements().filename());
        Assertions.assertEquals("snyxigfouj", response.iterator().next().customLibraries().get(0).name());
        Assertions.assertEquals("xgdqmrlhnzkwops", response.iterator().next().customLibraries().get(0).path());
        Assertions.assertEquals("yinxu", response.iterator().next().customLibraries().get(0).containerName());
        Assertions.assertEquals("yxwjezb", response.iterator().next().customLibraries().get(0).type());
        Assertions.assertEquals("jxdwdrpazqjkr", response.iterator().next().sparkConfigProperties().content());
        Assertions.assertEquals("bwotfcuuugtji", response.iterator().next().sparkConfigProperties().filename());
        Assertions.assertEquals(ConfigurationType.ARTIFACT,
            response.iterator().next().sparkConfigProperties().configurationType());
        Assertions.assertEquals("yiawohfmhnnz", response.iterator().next().sparkVersion());
        Assertions.assertEquals("cjjkmqenh", response.iterator().next().defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.XXXLARGE, response.iterator().next().nodeSize());
        Assertions.assertEquals(NodeSizeFamily.HARDWARE_ACCELERATED_FPGA, response.iterator().next().nodeSizeFamily());
    }
}
