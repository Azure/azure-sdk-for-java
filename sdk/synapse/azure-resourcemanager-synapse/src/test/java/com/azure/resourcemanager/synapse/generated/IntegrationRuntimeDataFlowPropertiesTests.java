// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.DataFlowComputeType;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeDataFlowProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeDataFlowPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model =
            BinaryData
                .fromString(
                    "{\"computeType\":\"General\",\"coreCount\":1277865813,\"timeToLive\":92922352,\"cleanup\":true,\"\":{\"bdweade\":\"datad\",\"mvmmagoaqylkjz\":\"datazmwntopagt\"}}")
                .toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1277865813, model.coreCount());
        Assertions.assertEquals(92922352, model.timeToLive());
        Assertions.assertEquals(true, model.cleanup());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model =
            new IntegrationRuntimeDataFlowProperties()
                .withComputeType(DataFlowComputeType.GENERAL)
                .withCoreCount(1277865813)
                .withTimeToLive(92922352)
                .withCleanup(true)
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1277865813, model.coreCount());
        Assertions.assertEquals(92922352, model.timeToLive());
        Assertions.assertEquals(true, model.cleanup());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
