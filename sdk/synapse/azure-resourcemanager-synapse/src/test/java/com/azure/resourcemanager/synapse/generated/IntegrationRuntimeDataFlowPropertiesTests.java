// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.DataFlowComputeType;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeDataFlowProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeDataFlowPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model = BinaryData.fromString(
            "{\"computeType\":\"MemoryOptimized\",\"coreCount\":1936073751,\"timeToLive\":498774199,\"cleanup\":true,\"\":{\"mignohikkg\":\"dataxetyvku\",\"medeil\":\"dataogjwpindedvabbxb\",\"wypusuvjsl\":\"datajywfcfxzirzzih\",\"djsllfr\":\"datazwci\"}}")
            .toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.MEMORY_OPTIMIZED, model.computeType());
        Assertions.assertEquals(1936073751, model.coreCount());
        Assertions.assertEquals(498774199, model.timeToLive());
        Assertions.assertEquals(true, model.cleanup());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model
            = new IntegrationRuntimeDataFlowProperties().withComputeType(DataFlowComputeType.MEMORY_OPTIMIZED)
                .withCoreCount(1936073751)
                .withTimeToLive(498774199)
                .withCleanup(true)
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.MEMORY_OPTIMIZED, model.computeType());
        Assertions.assertEquals(1936073751, model.coreCount());
        Assertions.assertEquals(498774199, model.timeToLive());
        Assertions.assertEquals(true, model.cleanup());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
