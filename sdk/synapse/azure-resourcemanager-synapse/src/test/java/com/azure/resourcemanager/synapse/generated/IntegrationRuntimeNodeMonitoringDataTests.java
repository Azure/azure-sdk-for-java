// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.IntegrationRuntimeNodeMonitoringData;
import java.util.HashMap;
import java.util.Map;

public final class IntegrationRuntimeNodeMonitoringDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeNodeMonitoringData model = BinaryData.fromString(
            "{\"nodeName\":\"srrryejylmbkzu\",\"availableMemoryInMB\":1007245359,\"cpuUtilization\":986601993,\"concurrentJobsLimit\":1684917507,\"concurrentJobsRunning\":2004521886,\"maxConcurrentJobs\":784814227,\"sentBytes\":52.939053,\"receivedBytes\":40.327175,\"\":{\"fqyhqoto\":\"datazzjgnr\",\"pzdqtvhcspod\":\"datahiqakydiwfbrk\",\"lbmoichd\":\"dataqaxsipietgbebjf\"}}")
            .toObject(IntegrationRuntimeNodeMonitoringData.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeNodeMonitoringData model = new IntegrationRuntimeNodeMonitoringData()
            .withAdditionalProperties(mapOf("nodeName", "srrryejylmbkzu", "cpuUtilization", 986601993, "receivedBytes",
                40.327175f, "concurrentJobsLimit", 1684917507, "concurrentJobsRunning", 2004521886, "maxConcurrentJobs",
                784814227, "availableMemoryInMB", 1007245359, "sentBytes", 52.939053f));
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeNodeMonitoringData.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
