// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.DataMaskingFunction;
import com.azure.resourcemanager.synapse.models.DataMaskingRule;
import com.azure.resourcemanager.synapse.models.DataMaskingRuleState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DataMaskingRulesListBySqlPoolMockTests {
    @Test
    public void testListBySqlPool() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"id\":\"aydhf\",\"aliasName\":\"ocxm\",\"ruleState\":\"Disabled\",\"schemaName\":\"hksnyzmspamwbw\",\"tableName\":\"bnl\",\"columnName\":\"lcefiqdktw\",\"maskingFunction\":\"Number\",\"numberFrom\":\"ih\",\"numberTo\":\"fliwoynguuzhwvl\",\"prefixSize\":\"p\",\"suffixSize\":\"hjhausy\",\"replacementString\":\"ekymffztsilscvqs\"},\"location\":\"iihfymkoui\",\"kind\":\"eseuugci\",\"id\":\"zhogsmgbvmtdw\",\"name\":\"qbe\",\"type\":\"jnfveg\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SynapseManager manager =
            SynapseManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DataMaskingRule> response =
            manager.dataMaskingRules().listBySqlPool("nvgskjtoxjd", "jsjznv", "xqqm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ocxm", response.iterator().next().aliasName());
        Assertions.assertEquals(DataMaskingRuleState.DISABLED, response.iterator().next().ruleState());
        Assertions.assertEquals("hksnyzmspamwbw", response.iterator().next().schemaName());
        Assertions.assertEquals("bnl", response.iterator().next().tableName());
        Assertions.assertEquals("lcefiqdktw", response.iterator().next().columnName());
        Assertions.assertEquals(DataMaskingFunction.NUMBER, response.iterator().next().maskingFunction());
        Assertions.assertEquals("ih", response.iterator().next().numberFrom());
        Assertions.assertEquals("fliwoynguuzhwvl", response.iterator().next().numberTo());
        Assertions.assertEquals("p", response.iterator().next().prefixSize());
        Assertions.assertEquals("hjhausy", response.iterator().next().suffixSize());
        Assertions.assertEquals("ekymffztsilscvqs", response.iterator().next().replacementString());
    }
}
