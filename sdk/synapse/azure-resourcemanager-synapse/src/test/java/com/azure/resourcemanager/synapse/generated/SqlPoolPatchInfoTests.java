// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.Sku;
import com.azure.resourcemanager.synapse.models.SqlPoolPatchInfo;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlPoolPatchInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlPoolPatchInfo model = BinaryData.fromString(
            "{\"tags\":{\"jixisxyawjoyaqcs\":\"flhhcaal\",\"eli\":\"yjpkiidzyexz\"},\"location\":\"nr\",\"sku\":{\"tier\":\"o\",\"name\":\"bnxknalaulppg\",\"capacity\":1987785731},\"properties\":{\"maxSizeBytes\":5149418490652934677,\"collation\":\"yiropu\",\"sourceDatabaseId\":\"igvpgylg\",\"recoverableDatabaseId\":\"itxmedjvcslynqww\",\"provisioningState\":\"wzz\",\"status\":\"gktrmgucnapkte\",\"restorePointInTime\":\"2021-08-31T01:54:16Z\",\"createMode\":\"PointInTimeRestore\",\"creationDate\":\"2021-03-29T03:31:11Z\",\"storageAccountType\":\"GRS\",\"sourceDatabaseDeletionDate\":\"2021-10-30T20:36:32Z\"}}")
            .toObject(SqlPoolPatchInfo.class);
        Assertions.assertEquals("flhhcaal", model.tags().get("jixisxyawjoyaqcs"));
        Assertions.assertEquals("nr", model.location());
        Assertions.assertEquals("o", model.sku().tier());
        Assertions.assertEquals("bnxknalaulppg", model.sku().name());
        Assertions.assertEquals(1987785731, model.sku().capacity());
        Assertions.assertEquals(5149418490652934677L, model.maxSizeBytes());
        Assertions.assertEquals("yiropu", model.collation());
        Assertions.assertEquals("igvpgylg", model.sourceDatabaseId());
        Assertions.assertEquals("itxmedjvcslynqww", model.recoverableDatabaseId());
        Assertions.assertEquals("wzz", model.provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-31T01:54:16Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.POINT_IN_TIME_RESTORE, model.createMode());
        Assertions.assertEquals(StorageAccountType.GRS, model.storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T20:36:32Z"), model.sourceDatabaseDeletionDate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlPoolPatchInfo model
            = new SqlPoolPatchInfo().withTags(mapOf("jixisxyawjoyaqcs", "flhhcaal", "eli", "yjpkiidzyexz"))
                .withLocation("nr")
                .withSku(new Sku().withTier("o").withName("bnxknalaulppg").withCapacity(1987785731))
                .withMaxSizeBytes(5149418490652934677L)
                .withCollation("yiropu")
                .withSourceDatabaseId("igvpgylg")
                .withRecoverableDatabaseId("itxmedjvcslynqww")
                .withProvisioningState("wzz")
                .withRestorePointInTime(OffsetDateTime.parse("2021-08-31T01:54:16Z"))
                .withCreateMode(CreateMode.POINT_IN_TIME_RESTORE)
                .withStorageAccountType(StorageAccountType.GRS)
                .withSourceDatabaseDeletionDate(OffsetDateTime.parse("2021-10-30T20:36:32Z"));
        model = BinaryData.fromObject(model).toObject(SqlPoolPatchInfo.class);
        Assertions.assertEquals("flhhcaal", model.tags().get("jixisxyawjoyaqcs"));
        Assertions.assertEquals("nr", model.location());
        Assertions.assertEquals("o", model.sku().tier());
        Assertions.assertEquals("bnxknalaulppg", model.sku().name());
        Assertions.assertEquals(1987785731, model.sku().capacity());
        Assertions.assertEquals(5149418490652934677L, model.maxSizeBytes());
        Assertions.assertEquals("yiropu", model.collation());
        Assertions.assertEquals("igvpgylg", model.sourceDatabaseId());
        Assertions.assertEquals("itxmedjvcslynqww", model.recoverableDatabaseId());
        Assertions.assertEquals("wzz", model.provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-31T01:54:16Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.POINT_IN_TIME_RESTORE, model.createMode());
        Assertions.assertEquals(StorageAccountType.GRS, model.storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T20:36:32Z"), model.sourceDatabaseDeletionDate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
