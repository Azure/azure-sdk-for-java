// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.Sku;
import com.azure.resourcemanager.synapse.models.SqlPoolPatchInfo;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlPoolPatchInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlPoolPatchInfo model = BinaryData.fromString(
            "{\"tags\":{\"tov\":\"luudfdlwggytsb\"},\"location\":\"gseinq\",\"sku\":{\"tier\":\"fxqknpirgneptt\",\"name\":\"msniffc\",\"capacity\":2032190732},\"properties\":{\"maxSizeBytes\":2726034943657769889,\"collation\":\"pij\",\"sourceDatabaseId\":\"rxfrddhc\",\"recoverableDatabaseId\":\"tizzronasxif\",\"provisioningState\":\"zq\",\"status\":\"hftwesgog\",\"restorePointInTime\":\"2021-04-03T17:56:27Z\",\"createMode\":\"Default\",\"creationDate\":\"2021-01-14T03:36:17Z\",\"storageAccountType\":\"ZRS\"}}")
            .toObject(SqlPoolPatchInfo.class);
        Assertions.assertEquals("luudfdlwggytsb", model.tags().get("tov"));
        Assertions.assertEquals("gseinq", model.location());
        Assertions.assertEquals("fxqknpirgneptt", model.sku().tier());
        Assertions.assertEquals("msniffc", model.sku().name());
        Assertions.assertEquals(2032190732, model.sku().capacity());
        Assertions.assertEquals(2726034943657769889L, model.maxSizeBytes());
        Assertions.assertEquals("pij", model.collation());
        Assertions.assertEquals("rxfrddhc", model.sourceDatabaseId());
        Assertions.assertEquals("tizzronasxif", model.recoverableDatabaseId());
        Assertions.assertEquals("zq", model.provisioningState());
        Assertions.assertEquals("hftwesgog", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-03T17:56:27Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.DEFAULT, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-14T03:36:17Z"), model.creationDate());
        Assertions.assertEquals(StorageAccountType.ZRS, model.storageAccountType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlPoolPatchInfo model = new SqlPoolPatchInfo().withTags(mapOf("tov", "luudfdlwggytsb"))
            .withLocation("gseinq")
            .withSku(new Sku().withTier("fxqknpirgneptt").withName("msniffc").withCapacity(2032190732))
            .withMaxSizeBytes(2726034943657769889L)
            .withCollation("pij")
            .withSourceDatabaseId("rxfrddhc")
            .withRecoverableDatabaseId("tizzronasxif")
            .withProvisioningState("zq")
            .withStatus("hftwesgog")
            .withRestorePointInTime(OffsetDateTime.parse("2021-04-03T17:56:27Z"))
            .withCreateMode(CreateMode.DEFAULT)
            .withCreationDate(OffsetDateTime.parse("2021-01-14T03:36:17Z"))
            .withStorageAccountType(StorageAccountType.ZRS);
        model = BinaryData.fromObject(model).toObject(SqlPoolPatchInfo.class);
        Assertions.assertEquals("luudfdlwggytsb", model.tags().get("tov"));
        Assertions.assertEquals("gseinq", model.location());
        Assertions.assertEquals("fxqknpirgneptt", model.sku().tier());
        Assertions.assertEquals("msniffc", model.sku().name());
        Assertions.assertEquals(2032190732, model.sku().capacity());
        Assertions.assertEquals(2726034943657769889L, model.maxSizeBytes());
        Assertions.assertEquals("pij", model.collation());
        Assertions.assertEquals("rxfrddhc", model.sourceDatabaseId());
        Assertions.assertEquals("tizzronasxif", model.recoverableDatabaseId());
        Assertions.assertEquals("zq", model.provisioningState());
        Assertions.assertEquals("hftwesgog", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-03T17:56:27Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.DEFAULT, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-14T03:36:17Z"), model.creationDate());
        Assertions.assertEquals(StorageAccountType.ZRS, model.storageAccountType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
