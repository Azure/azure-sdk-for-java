// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.KustoPoolInner;
import com.azure.resourcemanager.synapse.models.AzureSku;
import com.azure.resourcemanager.synapse.models.OptimizedAutoscale;
import com.azure.resourcemanager.synapse.models.SkuName;
import com.azure.resourcemanager.synapse.models.SkuSize;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KustoPoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KustoPoolInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"Compute optimized\",\"capacity\":1648089745,\"size\":\"Small\"},\"properties\":{\"state\":\"Stopped\",\"provisioningState\":\"Succeeded\",\"uri\":\"foyzbamwineof\",\"dataIngestionUri\":\"kak\",\"stateReason\":\"ldtve\",\"optimizedAutoscale\":{\"version\":1479898890,\"isEnabled\":false,\"minimum\":330899196,\"maximum\":452091482},\"enableStreamingIngest\":false,\"enablePurge\":true,\"languageExtensions\":{\"value\":[{\"languageExtensionName\":\"PYTHON\"},{\"languageExtensionName\":\"R\"},{\"languageExtensionName\":\"PYTHON\"}]},\"workspaceUID\":\"nrup\"},\"etag\":\"amrdixtrekidswys\",\"location\":\"ruffgllukk\",\"tags\":{\"hvmblcouqehbhbc\":\"lxhrp\",\"blto\":\"sziryrandoyp\",\"g\":\"rmkfqlwxldykals\",\"sjjx\":\"olnjpnnbmjksibj\"},\"id\":\"ahmrnadzyqegxyi\",\"name\":\"pinbmhwbjijkgqxn\",\"type\":\"mbk\"}")
            .toObject(KustoPoolInner.class);
        Assertions.assertEquals("ruffgllukk", model.location());
        Assertions.assertEquals("lxhrp", model.tags().get("hvmblcouqehbhbc"));
        Assertions.assertEquals(SkuName.COMPUTE_OPTIMIZED, model.sku().name());
        Assertions.assertEquals(1648089745, model.sku().capacity());
        Assertions.assertEquals(SkuSize.SMALL, model.sku().size());
        Assertions.assertEquals(1479898890, model.optimizedAutoscale().version());
        Assertions.assertEquals(false, model.optimizedAutoscale().isEnabled());
        Assertions.assertEquals(330899196, model.optimizedAutoscale().minimum());
        Assertions.assertEquals(452091482, model.optimizedAutoscale().maximum());
        Assertions.assertEquals(false, model.enableStreamingIngest());
        Assertions.assertEquals(true, model.enablePurge());
        Assertions.assertEquals("nrup", model.workspaceUid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KustoPoolInner model = new KustoPoolInner().withLocation("ruffgllukk")
            .withTags(mapOf("hvmblcouqehbhbc", "lxhrp", "blto", "sziryrandoyp", "g", "rmkfqlwxldykals", "sjjx",
                "olnjpnnbmjksibj"))
            .withSku(
                new AzureSku().withName(SkuName.COMPUTE_OPTIMIZED).withCapacity(1648089745).withSize(SkuSize.SMALL))
            .withOptimizedAutoscale(new OptimizedAutoscale().withVersion(1479898890)
                .withIsEnabled(false)
                .withMinimum(330899196)
                .withMaximum(452091482))
            .withEnableStreamingIngest(false)
            .withEnablePurge(true)
            .withWorkspaceUid("nrup");
        model = BinaryData.fromObject(model).toObject(KustoPoolInner.class);
        Assertions.assertEquals("ruffgllukk", model.location());
        Assertions.assertEquals("lxhrp", model.tags().get("hvmblcouqehbhbc"));
        Assertions.assertEquals(SkuName.COMPUTE_OPTIMIZED, model.sku().name());
        Assertions.assertEquals(1648089745, model.sku().capacity());
        Assertions.assertEquals(SkuSize.SMALL, model.sku().size());
        Assertions.assertEquals(1479898890, model.optimizedAutoscale().version());
        Assertions.assertEquals(false, model.optimizedAutoscale().isEnabled());
        Assertions.assertEquals(330899196, model.optimizedAutoscale().minimum());
        Assertions.assertEquals(452091482, model.optimizedAutoscale().maximum());
        Assertions.assertEquals(false, model.enableStreamingIngest());
        Assertions.assertEquals(true, model.enablePurge());
        Assertions.assertEquals("nrup", model.workspaceUid());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
