// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.synapse.fluent.models.SelfHostedIntegrationRuntimeNodeInner;
import com.azure.resourcemanager.synapse.models.LinkedIntegrationRuntime;
import com.azure.resourcemanager.synapse.models.SelfHostedIntegrationRuntimeStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class SelfHostedIntegrationRuntimeStatusTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SelfHostedIntegrationRuntimeStatus model = BinaryData.fromString(
            "{\"type\":\"SelfHosted\",\"typeProperties\":{\"createTime\":\"2021-07-24T11:19:34Z\",\"taskQueueId\":\"ufypiv\",\"nodeCommunicationChannelEncryptionMode\":\"bbjpmcubkmif\",\"internalChannelEncryption\":\"NotEncrypted\",\"version\":\"ubvphavpmhbrbqgv\",\"nodes\":[{\"nodeName\":\"bbttefjo\",\"machineName\":\"ssqyzqedik\",\"hostServiceUri\":\"rdbiqmrjge\",\"status\":\"Limited\",\"capabilities\":{\"xmjpbyep\":\"ggwfiwz\"},\"versionStatus\":\"gt\",\"version\":\"j\",\"registerTime\":\"2021-11-22T14:35:55Z\",\"lastConnectTime\":\"2021-08-07T04:21:54Z\",\"expiryTime\":\"2021-03-20T09:49:19Z\",\"lastStartTime\":\"2021-07-04T14:58:40Z\",\"lastStopTime\":\"2021-03-25T09:57:24Z\",\"lastUpdateResult\":\"Succeed\",\"lastStartUpdateTime\":\"2021-03-21T08:59:41Z\",\"lastEndUpdateTime\":\"2021-03-15T22:12:36Z\",\"isActiveDispatcher\":true,\"concurrentJobsLimit\":866269149,\"maxConcurrentJobs\":2025357675,\"\":{\"aswlp\":\"datailee\"}},{\"nodeName\":\"gm\",\"machineName\":\"fjlrxwtoauk\",\"hostServiceUri\":\"kvci\",\"status\":\"Limited\",\"capabilities\":{\"dsxjwuivedw\":\"a\",\"psmgo\":\"gyeewxeiq\",\"l\":\"guamlj\",\"ewgnxkympqanxrj\":\"gmsplzgaufcshhv\"},\"versionStatus\":\"xtwbta\",\"version\":\"pnyghs\",\"registerTime\":\"2021-07-25T14:42:35Z\",\"lastConnectTime\":\"2021-07-21T13:22:20Z\",\"expiryTime\":\"2021-09-22T21:59:43Z\",\"lastStartTime\":\"2021-02-25T18:08:40Z\",\"lastStopTime\":\"2021-06-25T22:51:05Z\",\"lastUpdateResult\":\"Succeed\",\"lastStartUpdateTime\":\"2021-11-23T07:57:41Z\",\"lastEndUpdateTime\":\"2021-02-16T02:21:14Z\",\"isActiveDispatcher\":false,\"concurrentJobsLimit\":2068666218,\"maxConcurrentJobs\":1014591780,\"\":{\"luzvxnq\":\"datahvyoma\"}}],\"scheduledUpdateDate\":\"2021-05-26T18:55:49Z\",\"updateDelayOffset\":\"qpd\",\"localTimeZoneOffset\":\"mkoisqcssf\",\"capabilities\":{\"zsylollgt\":\"ifmcsypobkdqzr\",\"vuaurk\":\"czzydmxzjij\"},\"serviceUrls\":[\"irldefxr\"],\"autoUpdate\":\"Off\",\"versionStatus\":\"nbkkjanurnnq\",\"links\":[{\"name\":\"pizxqltgrdogyp\",\"subscriptionId\":\"x\",\"dataFactoryName\":\"fihwu\",\"dataFactoryLocation\":\"ctafsrbxrblm\",\"createTime\":\"2021-09-03T01:56:24Z\"}],\"pushedVersion\":\"xihspnxwq\",\"latestVersion\":\"nepzwakls\",\"autoUpdateETA\":\"2021-07-04T22:14:12Z\"},\"dataFactoryName\":\"qqagwwr\",\"state\":\"Stopping\",\"\":{\"ezkhhltnjadhqo\":\"dataisglrrc\",\"ueayfbpcmsplb\":\"datawjqo\",\"mbscbbx\":\"datarrueqthwmg\",\"d\":\"datagdhxi\"}}")
            .toObject(SelfHostedIntegrationRuntimeStatus.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SelfHostedIntegrationRuntimeStatus model = new SelfHostedIntegrationRuntimeStatus().withNodes(Arrays.asList(
            new SelfHostedIntegrationRuntimeNodeInner().withAdditionalProperties(mapOf("nodeName", "bbttefjo",
                "lastStartUpdateTime", "2021-03-21T08:59:41Z", "lastConnectTime", "2021-08-07T04:21:54Z",
                "capabilities",
                JacksonAdapter.createDefaultSerializerAdapter()
                    .deserialize("{\"xmjpbyep\":\"ggwfiwz\"}", Object.class, SerializerEncoding.JSON),
                "hostServiceUri", "rdbiqmrjge", "registerTime", "2021-11-22T14:35:55Z", "maxConcurrentJobs", 2025357675,
                "lastStopTime", "2021-03-25T09:57:24Z", "version", "j", "machineName", "ssqyzqedik", "versionStatus",
                "gt", "concurrentJobsLimit", 866269149, "lastEndUpdateTime", "2021-03-15T22:12:36Z", "expiryTime",
                "2021-03-20T09:49:19Z", "lastStartTime", "2021-07-04T14:58:40Z", "lastUpdateResult", "Succeed",
                "isActiveDispatcher", true, "status", "Limited")),
            new SelfHostedIntegrationRuntimeNodeInner().withAdditionalProperties(mapOf("nodeName", "gm",
                "lastStartUpdateTime", "2021-11-23T07:57:41Z", "lastConnectTime", "2021-07-21T13:22:20Z",
                "capabilities",
                JacksonAdapter.createDefaultSerializerAdapter()
                    .deserialize(
                        "{\"dsxjwuivedw\":\"a\",\"psmgo\":\"gyeewxeiq\",\"l\":\"guamlj\",\"ewgnxkympqanxrj\":\"gmsplzgaufcshhv\"}",
                        Object.class, SerializerEncoding.JSON),
                "hostServiceUri", "kvci", "registerTime", "2021-07-25T14:42:35Z", "maxConcurrentJobs", 1014591780,
                "lastStopTime", "2021-06-25T22:51:05Z", "version", "pnyghs", "machineName", "fjlrxwtoauk",
                "versionStatus", "xtwbta", "concurrentJobsLimit", 2068666218, "lastEndUpdateTime",
                "2021-02-16T02:21:14Z", "expiryTime", "2021-09-22T21:59:43Z", "lastStartTime", "2021-02-25T18:08:40Z",
                "lastUpdateResult", "Succeed", "isActiveDispatcher", false, "status", "Limited"))))
            .withLinks(Arrays.asList(new LinkedIntegrationRuntime()));
        model = BinaryData.fromObject(model).toObject(SelfHostedIntegrationRuntimeStatus.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
