// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.fluent.models.LibraryInfo;
import com.azure.resourcemanager.synapse.models.AutoPauseProperties;
import com.azure.resourcemanager.synapse.models.AutoScaleProperties;
import com.azure.resourcemanager.synapse.models.BigDataPoolResourceInfo;
import com.azure.resourcemanager.synapse.models.ConfigurationType;
import com.azure.resourcemanager.synapse.models.DynamicExecutorAllocation;
import com.azure.resourcemanager.synapse.models.LibraryRequirements;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import com.azure.resourcemanager.synapse.models.SparkConfigProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BigDataPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"autoScale\":{\"minNodeCount\":970081145,\"enabled\":true,\"maxNodeCount\":208262424},\"creationDate\":\"2021-08-08T10:45:35Z\",\"autoPause\":{\"delayInMinutes\":1219269924,\"enabled\":true},\"isComputeIsolationEnabled\":true,\"isAutotuneEnabled\":false,\"sessionLevelPackagesEnabled\":true,\"cacheSize\":1721286696,\"dynamicExecutorAllocation\":{\"enabled\":false,\"minExecutors\":572095001,\"maxExecutors\":1655561193},\"sparkEventsFolder\":\"ccpumddhgajkr\",\"nodeCount\":92711553,\"libraryRequirements\":{\"time\":\"2021-08-21T23:20:55Z\",\"content\":\"c\",\"filename\":\"vafnbfbqvenq\"},\"customLibraries\":[{\"name\":\"kordw\",\"path\":\"jpecwzvcmb\",\"containerName\":\"dluday\",\"uploadedTimestamp\":\"2021-01-05T20:02:11Z\",\"type\":\"idwmt\",\"provisioningStatus\":\"bvtzldzchub\",\"creatorId\":\"wnlzuvi\"}],\"sparkConfigProperties\":{\"time\":\"2021-06-12T17:05:17Z\",\"content\":\"frbzakp\",\"filename\":\"cqra\",\"configurationType\":\"File\"},\"sparkVersion\":\"psucmximcwqxyn\",\"defaultSparkLogFolder\":\"gs\",\"nodeSize\":\"Medium\",\"nodeSizeFamily\":\"HardwareAcceleratedGPU\",\"lastSucceededTimestamp\":\"2021-03-11T21:02:22Z\"},\"location\":\"bgngcrusxhirc\",\"tags\":{\"lkvuznadvh\":\"vsvkkjbjolpyo\",\"gowxxbhtp\":\"lieo\"},\"id\":\"yioqe\",\"name\":\"qwtqszzgyksik\",\"type\":\"wanvmwdvgjqcrbko\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BigDataPoolResourceInfo response = manager.bigDataPools()
            .define("dckixspsaigavkmv")
            .withRegion("arhqt")
            .withExistingWorkspace("hvpxjhxz", "bfjzabbwzgvzuaix")
            .withTags(mapOf("pchggryelgfy", "azekdzdzffzjwzts"))
            .withProvisioningState("erejrkpzj")
            .withAutoScale(
                new AutoScaleProperties().withMinNodeCount(572681365).withEnabled(true).withMaxNodeCount(1655893027))
            .withAutoPause(new AutoPauseProperties().withDelayInMinutes(725496177).withEnabled(true))
            .withIsComputeIsolationEnabled(false)
            .withIsAutotuneEnabled(false)
            .withSessionLevelPackagesEnabled(true)
            .withCacheSize(309327189)
            .withDynamicExecutorAllocation(new DynamicExecutorAllocation().withEnabled(true)
                .withMinExecutors(1468148143)
                .withMaxExecutors(925533048))
            .withSparkEventsFolder("rab")
            .withNodeCount(2125247115)
            .withLibraryRequirements(new LibraryRequirements().withContent("wpjhspboxhifppsk").withFilename("s"))
            .withCustomLibraries(Arrays.asList(
                new LibraryInfo().withName("mifjuajxww")
                    .withPath("mmp")
                    .withContainerName("lyuqvcmlaexb")
                    .withType("fpnezsjzayml"),
                new LibraryInfo().withName("gi").withPath("omw").withContainerName("nghojov").withType("micjixxfsf"),
                new LibraryInfo().withName("pfgsvbbvaqdljnp")
                    .withPath("l")
                    .withContainerName("rdetawevxehuekdx")
                    .withType("dovbrbler")))
            .withSparkConfigProperties(new SparkConfigProperties().withContent("djccxwbpwyykdi")
                .withFilename("zlrz")
                .withConfigurationType(ConfigurationType.FILE))
            .withSparkVersion("dn")
            .withDefaultSparkLogFolder("mjqmv")
            .withNodeSize(NodeSize.MEDIUM)
            .withNodeSizeFamily(NodeSizeFamily.HARDWARE_ACCELERATED_GPU)
            .withForce(false)
            .create();

        Assertions.assertEquals("bgngcrusxhirc", response.location());
        Assertions.assertEquals("vsvkkjbjolpyo", response.tags().get("lkvuznadvh"));
        Assertions.assertEquals("Succeeded", response.provisioningState());
        Assertions.assertEquals(970081145, response.autoScale().minNodeCount());
        Assertions.assertEquals(true, response.autoScale().enabled());
        Assertions.assertEquals(208262424, response.autoScale().maxNodeCount());
        Assertions.assertEquals(1219269924, response.autoPause().delayInMinutes());
        Assertions.assertEquals(true, response.autoPause().enabled());
        Assertions.assertEquals(true, response.isComputeIsolationEnabled());
        Assertions.assertEquals(false, response.isAutotuneEnabled());
        Assertions.assertEquals(true, response.sessionLevelPackagesEnabled());
        Assertions.assertEquals(1721286696, response.cacheSize());
        Assertions.assertEquals(false, response.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals(572095001, response.dynamicExecutorAllocation().minExecutors());
        Assertions.assertEquals(1655561193, response.dynamicExecutorAllocation().maxExecutors());
        Assertions.assertEquals("ccpumddhgajkr", response.sparkEventsFolder());
        Assertions.assertEquals(92711553, response.nodeCount());
        Assertions.assertEquals("c", response.libraryRequirements().content());
        Assertions.assertEquals("vafnbfbqvenq", response.libraryRequirements().filename());
        Assertions.assertEquals("kordw", response.customLibraries().get(0).name());
        Assertions.assertEquals("jpecwzvcmb", response.customLibraries().get(0).path());
        Assertions.assertEquals("dluday", response.customLibraries().get(0).containerName());
        Assertions.assertEquals("idwmt", response.customLibraries().get(0).type());
        Assertions.assertEquals("frbzakp", response.sparkConfigProperties().content());
        Assertions.assertEquals("cqra", response.sparkConfigProperties().filename());
        Assertions.assertEquals(ConfigurationType.FILE, response.sparkConfigProperties().configurationType());
        Assertions.assertEquals("psucmximcwqxyn", response.sparkVersion());
        Assertions.assertEquals("gs", response.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.MEDIUM, response.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.HARDWARE_ACCELERATED_GPU, response.nodeSizeFamily());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
