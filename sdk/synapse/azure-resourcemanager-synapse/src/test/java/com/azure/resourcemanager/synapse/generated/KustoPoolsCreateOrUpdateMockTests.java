// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.AzureSku;
import com.azure.resourcemanager.synapse.models.KustoPool;
import com.azure.resourcemanager.synapse.models.OptimizedAutoscale;
import com.azure.resourcemanager.synapse.models.SkuName;
import com.azure.resourcemanager.synapse.models.SkuSize;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class KustoPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"Storage optimized\",\"capacity\":138676999,\"size\":\"Extra small\"},\"properties\":{\"state\":\"Updating\",\"provisioningState\":\"Succeeded\",\"uri\":\"mxnhtm\",\"dataIngestionUri\":\"tqlfxolrwvtl\",\"stateReason\":\"yfjswequf\",\"optimizedAutoscale\":{\"version\":982342998,\"isEnabled\":false,\"minimum\":378103748,\"maximum\":357909165},\"enableStreamingIngest\":true,\"enablePurge\":true,\"languageExtensions\":{\"value\":[{\"languageExtensionName\":\"R\"},{\"languageExtensionName\":\"PYTHON\"}]},\"workspaceUID\":\"tbvufrkwjiemim\"},\"etag\":\"npow\",\"location\":\"jskreeedddrft\",\"tags\":{\"uwbrnqyxfedqne\":\"ulpclhsiige\",\"nxoqgv\":\"dqw\"},\"id\":\"zp\",\"name\":\"gp\",\"type\":\"meyobqajejirvavr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        KustoPool response = manager.kustoPools()
            .define("byjecrq")
            .withRegion("helhbimyi")
            .withExistingWorkspace("ifqhdx", "wwulkrybpaevy")
            .withSku(
                new AzureSku().withName(SkuName.STORAGE_OPTIMIZED).withCapacity(1214865889).withSize(SkuSize.SMALL))
            .withTags(mapOf("cthtpq", "a", "zkdiuvflgzhcw", "fzdos", "g", "gwahcrxo"))
            .withOptimizedAutoscale(new OptimizedAutoscale().withVersion(405918188)
                .withIsEnabled(true)
                .withMinimum(342377991)
                .withMaximum(1407841877))
            .withEnableStreamingIngest(true)
            .withEnablePurge(false)
            .withWorkspaceUid("ollcshjucihby")
            .withIfMatch("ghhh")
            .withIfNoneMatch("vnnjd")
            .create();

        Assertions.assertEquals("jskreeedddrft", response.location());
        Assertions.assertEquals("ulpclhsiige", response.tags().get("uwbrnqyxfedqne"));
        Assertions.assertEquals(SkuName.STORAGE_OPTIMIZED, response.sku().name());
        Assertions.assertEquals(138676999, response.sku().capacity());
        Assertions.assertEquals(SkuSize.EXTRA_SMALL, response.sku().size());
        Assertions.assertEquals(982342998, response.optimizedAutoscale().version());
        Assertions.assertEquals(false, response.optimizedAutoscale().isEnabled());
        Assertions.assertEquals(378103748, response.optimizedAutoscale().minimum());
        Assertions.assertEquals(357909165, response.optimizedAutoscale().maximum());
        Assertions.assertEquals(true, response.enableStreamingIngest());
        Assertions.assertEquals(true, response.enablePurge());
        Assertions.assertEquals("tbvufrkwjiemim", response.workspaceUid());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
