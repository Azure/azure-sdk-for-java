// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.BigDataPoolResourceProperties;
import com.azure.resourcemanager.synapse.fluent.models.LibraryInfo;
import com.azure.resourcemanager.synapse.models.AutoPauseProperties;
import com.azure.resourcemanager.synapse.models.AutoScaleProperties;
import com.azure.resourcemanager.synapse.models.ConfigurationType;
import com.azure.resourcemanager.synapse.models.DynamicExecutorAllocation;
import com.azure.resourcemanager.synapse.models.LibraryRequirements;
import com.azure.resourcemanager.synapse.models.NodeSize;
import com.azure.resourcemanager.synapse.models.NodeSizeFamily;
import com.azure.resourcemanager.synapse.models.SparkConfigProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BigDataPoolResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BigDataPoolResourceProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"q\",\"autoScale\":{\"minNodeCount\":155937212,\"enabled\":true,\"maxNodeCount\":1001251604},\"creationDate\":\"2021-04-29T16:57Z\",\"autoPause\":{\"delayInMinutes\":762506077,\"enabled\":false},\"isComputeIsolationEnabled\":false,\"isAutotuneEnabled\":false,\"sessionLevelPackagesEnabled\":true,\"cacheSize\":199675617,\"dynamicExecutorAllocation\":{\"enabled\":false,\"minExecutors\":811304130,\"maxExecutors\":1951649855},\"sparkEventsFolder\":\"utmzlbiojlvfhrbb\",\"nodeCount\":1573372478,\"libraryRequirements\":{\"time\":\"2021-10-25T03:38:05Z\",\"content\":\"wyyu\",\"filename\":\"ochpprpr\"},\"customLibraries\":[{\"name\":\"k\",\"path\":\"zejnhl\",\"containerName\":\"pbzpcpiljhahz\",\"uploadedTimestamp\":\"2021-03-17T10:23:50Z\",\"type\":\"ndbnwieh\",\"provisioningStatus\":\"ewjwiuubw\",\"creatorId\":\"qsfapaqt\"}],\"sparkConfigProperties\":{\"time\":\"2021-11-03T02:23:27Z\",\"content\":\"wexjkmfxapjwogq\",\"filename\":\"o\",\"configurationType\":\"Artifact\"},\"sparkVersion\":\"cdabtqwpwya\",\"defaultSparkLogFolder\":\"zasqbucljgkyexao\",\"nodeSize\":\"Medium\",\"nodeSizeFamily\":\"None\",\"lastSucceededTimestamp\":\"2021-11-04T08:52:55Z\"}")
            .toObject(BigDataPoolResourceProperties.class);
        Assertions.assertEquals("q", model.provisioningState());
        Assertions.assertEquals(155937212, model.autoScale().minNodeCount());
        Assertions.assertEquals(true, model.autoScale().enabled());
        Assertions.assertEquals(1001251604, model.autoScale().maxNodeCount());
        Assertions.assertEquals(762506077, model.autoPause().delayInMinutes());
        Assertions.assertEquals(false, model.autoPause().enabled());
        Assertions.assertEquals(false, model.isComputeIsolationEnabled());
        Assertions.assertEquals(false, model.isAutotuneEnabled());
        Assertions.assertEquals(true, model.sessionLevelPackagesEnabled());
        Assertions.assertEquals(199675617, model.cacheSize());
        Assertions.assertEquals(false, model.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals(811304130, model.dynamicExecutorAllocation().minExecutors());
        Assertions.assertEquals(1951649855, model.dynamicExecutorAllocation().maxExecutors());
        Assertions.assertEquals("utmzlbiojlvfhrbb", model.sparkEventsFolder());
        Assertions.assertEquals(1573372478, model.nodeCount());
        Assertions.assertEquals("wyyu", model.libraryRequirements().content());
        Assertions.assertEquals("ochpprpr", model.libraryRequirements().filename());
        Assertions.assertEquals("k", model.customLibraries().get(0).name());
        Assertions.assertEquals("zejnhl", model.customLibraries().get(0).path());
        Assertions.assertEquals("pbzpcpiljhahz", model.customLibraries().get(0).containerName());
        Assertions.assertEquals("ndbnwieh", model.customLibraries().get(0).type());
        Assertions.assertEquals("wexjkmfxapjwogq", model.sparkConfigProperties().content());
        Assertions.assertEquals("o", model.sparkConfigProperties().filename());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.sparkConfigProperties().configurationType());
        Assertions.assertEquals("cdabtqwpwya", model.sparkVersion());
        Assertions.assertEquals("zasqbucljgkyexao", model.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.MEDIUM, model.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.NONE, model.nodeSizeFamily());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BigDataPoolResourceProperties model = new BigDataPoolResourceProperties().withProvisioningState("q")
            .withAutoScale(
                new AutoScaleProperties().withMinNodeCount(155937212).withEnabled(true).withMaxNodeCount(1001251604))
            .withAutoPause(new AutoPauseProperties().withDelayInMinutes(762506077).withEnabled(false))
            .withIsComputeIsolationEnabled(false)
            .withIsAutotuneEnabled(false)
            .withSessionLevelPackagesEnabled(true)
            .withCacheSize(199675617)
            .withDynamicExecutorAllocation(new DynamicExecutorAllocation().withEnabled(false)
                .withMinExecutors(811304130)
                .withMaxExecutors(1951649855))
            .withSparkEventsFolder("utmzlbiojlvfhrbb")
            .withNodeCount(1573372478)
            .withLibraryRequirements(new LibraryRequirements().withContent("wyyu").withFilename("ochpprpr"))
            .withCustomLibraries(Arrays.asList(new LibraryInfo().withName("k")
                .withPath("zejnhl")
                .withContainerName("pbzpcpiljhahz")
                .withType("ndbnwieh")))
            .withSparkConfigProperties(new SparkConfigProperties().withContent("wexjkmfxapjwogq")
                .withFilename("o")
                .withConfigurationType(ConfigurationType.ARTIFACT))
            .withSparkVersion("cdabtqwpwya")
            .withDefaultSparkLogFolder("zasqbucljgkyexao")
            .withNodeSize(NodeSize.MEDIUM)
            .withNodeSizeFamily(NodeSizeFamily.NONE);
        model = BinaryData.fromObject(model).toObject(BigDataPoolResourceProperties.class);
        Assertions.assertEquals("q", model.provisioningState());
        Assertions.assertEquals(155937212, model.autoScale().minNodeCount());
        Assertions.assertEquals(true, model.autoScale().enabled());
        Assertions.assertEquals(1001251604, model.autoScale().maxNodeCount());
        Assertions.assertEquals(762506077, model.autoPause().delayInMinutes());
        Assertions.assertEquals(false, model.autoPause().enabled());
        Assertions.assertEquals(false, model.isComputeIsolationEnabled());
        Assertions.assertEquals(false, model.isAutotuneEnabled());
        Assertions.assertEquals(true, model.sessionLevelPackagesEnabled());
        Assertions.assertEquals(199675617, model.cacheSize());
        Assertions.assertEquals(false, model.dynamicExecutorAllocation().enabled());
        Assertions.assertEquals(811304130, model.dynamicExecutorAllocation().minExecutors());
        Assertions.assertEquals(1951649855, model.dynamicExecutorAllocation().maxExecutors());
        Assertions.assertEquals("utmzlbiojlvfhrbb", model.sparkEventsFolder());
        Assertions.assertEquals(1573372478, model.nodeCount());
        Assertions.assertEquals("wyyu", model.libraryRequirements().content());
        Assertions.assertEquals("ochpprpr", model.libraryRequirements().filename());
        Assertions.assertEquals("k", model.customLibraries().get(0).name());
        Assertions.assertEquals("zejnhl", model.customLibraries().get(0).path());
        Assertions.assertEquals("pbzpcpiljhahz", model.customLibraries().get(0).containerName());
        Assertions.assertEquals("ndbnwieh", model.customLibraries().get(0).type());
        Assertions.assertEquals("wexjkmfxapjwogq", model.sparkConfigProperties().content());
        Assertions.assertEquals("o", model.sparkConfigProperties().filename());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.sparkConfigProperties().configurationType());
        Assertions.assertEquals("cdabtqwpwya", model.sparkVersion());
        Assertions.assertEquals("zasqbucljgkyexao", model.defaultSparkLogFolder());
        Assertions.assertEquals(NodeSize.MEDIUM, model.nodeSize());
        Assertions.assertEquals(NodeSizeFamily.NONE, model.nodeSizeFamily());
    }
}
