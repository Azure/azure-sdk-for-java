// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.WorkloadGroup;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlPoolWorkloadGroupsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"minResourcePercent\":756636638,\"maxResourcePercent\":1143558986,\"minResourcePercentPerRequest\":91.5593139339048,\"maxResourcePercentPerRequest\":1.7688079195071205,\"importance\":\"mdutzfk\",\"queryExecutionTimeout\":1273960341},\"id\":\"no\",\"name\":\"dccgndjgdpriggqq\",\"type\":\"eqfcbuulpy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkloadGroup> response = manager.sqlPoolWorkloadGroups()
            .list("zdqekivycpzcvd", "zulrqt", "htre", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(756636638, response.iterator().next().minResourcePercent());
        Assertions.assertEquals(1143558986, response.iterator().next().maxResourcePercent());
        Assertions.assertEquals(91.5593139339048, response.iterator().next().minResourcePercentPerRequest());
        Assertions.assertEquals(1.7688079195071205D, response.iterator().next().maxResourcePercentPerRequest());
        Assertions.assertEquals("mdutzfk", response.iterator().next().importance());
        Assertions.assertEquals(1273960341, response.iterator().next().queryExecutionTimeout());
    }
}
