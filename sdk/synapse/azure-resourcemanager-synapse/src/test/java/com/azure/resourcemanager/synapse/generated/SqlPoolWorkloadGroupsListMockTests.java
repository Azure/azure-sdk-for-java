// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.models.WorkloadGroup;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlPoolWorkloadGroupsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"minResourcePercent\":998362511,\"maxResourcePercent\":1079143873,\"minResourcePercentPerRequest\":11.698060849667225,\"maxResourcePercentPerRequest\":42.57665178263599,\"importance\":\"uzvkunhdimjuk\",\"queryExecutionTimeout\":57578265},\"id\":\"zkaugpucdocfqpl\",\"name\":\"gofmhxwrjlv\",\"type\":\"klkvb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SynapseManager manager = SynapseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkloadGroup> response
            = manager.sqlPoolWorkloadGroups().list("oihppi", "bxv", "nzuz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(998362511, response.iterator().next().minResourcePercent());
        Assertions.assertEquals(1079143873, response.iterator().next().maxResourcePercent());
        Assertions.assertEquals(11.698060849667225, response.iterator().next().minResourcePercentPerRequest());
        Assertions.assertEquals(42.57665178263599D, response.iterator().next().maxResourcePercentPerRequest());
        Assertions.assertEquals("uzvkunhdimjuk", response.iterator().next().importance());
        Assertions.assertEquals(57578265, response.iterator().next().queryExecutionTimeout());
    }
}
