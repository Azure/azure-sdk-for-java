// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SqlPoolResourceProperties;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SqlPoolResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlPoolResourceProperties model = BinaryData.fromString(
            "{\"maxSizeBytes\":1375339389748279377,\"collation\":\"kkbnu\",\"sourceDatabaseId\":\"ywvtylbfpnc\",\"recoverableDatabaseId\":\"doiwi\",\"provisioningState\":\"htywubxcbihwq\",\"status\":\"fdntwjchrdgoih\",\"restorePointInTime\":\"2021-10-03T14:03:48Z\",\"createMode\":\"PointInTimeRestore\",\"creationDate\":\"2021-12-07T13:58:09Z\",\"storageAccountType\":\"ZRS\"}")
            .toObject(SqlPoolResourceProperties.class);
        Assertions.assertEquals(1375339389748279377L, model.maxSizeBytes());
        Assertions.assertEquals("kkbnu", model.collation());
        Assertions.assertEquals("ywvtylbfpnc", model.sourceDatabaseId());
        Assertions.assertEquals("doiwi", model.recoverableDatabaseId());
        Assertions.assertEquals("htywubxcbihwq", model.provisioningState());
        Assertions.assertEquals("fdntwjchrdgoih", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-03T14:03:48Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.POINT_IN_TIME_RESTORE, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T13:58:09Z"), model.creationDate());
        Assertions.assertEquals(StorageAccountType.ZRS, model.storageAccountType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlPoolResourceProperties model = new SqlPoolResourceProperties().withMaxSizeBytes(1375339389748279377L)
            .withCollation("kkbnu")
            .withSourceDatabaseId("ywvtylbfpnc")
            .withRecoverableDatabaseId("doiwi")
            .withProvisioningState("htywubxcbihwq")
            .withStatus("fdntwjchrdgoih")
            .withRestorePointInTime(OffsetDateTime.parse("2021-10-03T14:03:48Z"))
            .withCreateMode(CreateMode.POINT_IN_TIME_RESTORE)
            .withCreationDate(OffsetDateTime.parse("2021-12-07T13:58:09Z"))
            .withStorageAccountType(StorageAccountType.ZRS);
        model = BinaryData.fromObject(model).toObject(SqlPoolResourceProperties.class);
        Assertions.assertEquals(1375339389748279377L, model.maxSizeBytes());
        Assertions.assertEquals("kkbnu", model.collation());
        Assertions.assertEquals("ywvtylbfpnc", model.sourceDatabaseId());
        Assertions.assertEquals("doiwi", model.recoverableDatabaseId());
        Assertions.assertEquals("htywubxcbihwq", model.provisioningState());
        Assertions.assertEquals("fdntwjchrdgoih", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-03T14:03:48Z"), model.restorePointInTime());
        Assertions.assertEquals(CreateMode.POINT_IN_TIME_RESTORE, model.createMode());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T13:58:09Z"), model.creationDate());
        Assertions.assertEquals(StorageAccountType.ZRS, model.storageAccountType());
    }
}
