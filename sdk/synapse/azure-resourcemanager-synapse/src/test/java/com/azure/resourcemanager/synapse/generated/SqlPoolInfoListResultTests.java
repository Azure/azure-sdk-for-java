// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.synapse.fluent.models.SqlPoolInner;
import com.azure.resourcemanager.synapse.models.CreateMode;
import com.azure.resourcemanager.synapse.models.Sku;
import com.azure.resourcemanager.synapse.models.SqlPoolInfoListResult;
import com.azure.resourcemanager.synapse.models.StorageAccountType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlPoolInfoListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlPoolInfoListResult model = BinaryData.fromString(
            "{\"nextLink\":\"fqbuaceopzf\",\"value\":[{\"sku\":{\"tier\":\"ao\",\"name\":\"pcqeqx\",\"capacity\":72119187},\"properties\":{\"maxSizeBytes\":4786890397912480430,\"collation\":\"ctobg\",\"sourceDatabaseId\":\"dmoizpostmg\",\"recoverableDatabaseId\":\"fbunrmfqjhhk\",\"provisioningState\":\"pvjymjhxxjyng\",\"status\":\"ivkrtsw\",\"restorePointInTime\":\"2021-05-30T10:12:47Z\",\"createMode\":\"Restore\",\"creationDate\":\"2021-10-26T13:42:02Z\",\"storageAccountType\":\"LRS\",\"sourceDatabaseDeletionDate\":\"2021-04-01T03:47:56Z\"},\"location\":\"vjfdx\",\"tags\":{\"vtcqaqtdo\":\"e\",\"bhsfxob\":\"mcbxvwvxysl\"},\"id\":\"ytkblmpew\",\"name\":\"wfbkrvrns\",\"type\":\"shqjohxcrsbf\"},{\"sku\":{\"tier\":\"srruvwbhsqfsubcg\",\"name\":\"irx\",\"capacity\":1282258802},\"properties\":{\"maxSizeBytes\":4717614806856860947,\"collation\":\"jfdtwssotftpvj\",\"sourceDatabaseId\":\"exilzznfqqnvwpmq\",\"recoverableDatabaseId\":\"ruoujmk\",\"provisioningState\":\"hwqytj\",\"status\":\"bnw\",\"restorePointInTime\":\"2021-08-28T18:20:54Z\",\"createMode\":\"Restore\",\"creationDate\":\"2021-05-04T09:11:45Z\",\"storageAccountType\":\"LRS\",\"sourceDatabaseDeletionDate\":\"2021-02-06T06:59:31Z\"},\"location\":\"aen\",\"tags\":{\"oygmift\":\"hin\"},\"id\":\"nzdndslgna\",\"name\":\"qig\",\"type\":\"nduhavhqlkthum\"}]}")
            .toObject(SqlPoolInfoListResult.class);
        Assertions.assertEquals("fqbuaceopzf", model.nextLink());
        Assertions.assertEquals("vjfdx", model.value().get(0).location());
        Assertions.assertEquals("e", model.value().get(0).tags().get("vtcqaqtdo"));
        Assertions.assertEquals("ao", model.value().get(0).sku().tier());
        Assertions.assertEquals("pcqeqx", model.value().get(0).sku().name());
        Assertions.assertEquals(72119187, model.value().get(0).sku().capacity());
        Assertions.assertEquals(4786890397912480430L, model.value().get(0).maxSizeBytes());
        Assertions.assertEquals("ctobg", model.value().get(0).collation());
        Assertions.assertEquals("dmoizpostmg", model.value().get(0).sourceDatabaseId());
        Assertions.assertEquals("fbunrmfqjhhk", model.value().get(0).recoverableDatabaseId());
        Assertions.assertEquals("pvjymjhxxjyng", model.value().get(0).provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T10:12:47Z"),
            model.value().get(0).restorePointInTime());
        Assertions.assertEquals(CreateMode.RESTORE, model.value().get(0).createMode());
        Assertions.assertEquals(StorageAccountType.LRS, model.value().get(0).storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T03:47:56Z"),
            model.value().get(0).sourceDatabaseDeletionDate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlPoolInfoListResult model = new SqlPoolInfoListResult().withNextLink("fqbuaceopzf")
            .withValue(Arrays.asList(
                new SqlPoolInner().withLocation("vjfdx")
                    .withTags(mapOf("vtcqaqtdo", "e", "bhsfxob", "mcbxvwvxysl"))
                    .withSku(new Sku().withTier("ao").withName("pcqeqx").withCapacity(72119187))
                    .withMaxSizeBytes(4786890397912480430L)
                    .withCollation("ctobg")
                    .withSourceDatabaseId("dmoizpostmg")
                    .withRecoverableDatabaseId("fbunrmfqjhhk")
                    .withProvisioningState("pvjymjhxxjyng")
                    .withRestorePointInTime(OffsetDateTime.parse("2021-05-30T10:12:47Z"))
                    .withCreateMode(CreateMode.RESTORE)
                    .withStorageAccountType(StorageAccountType.LRS)
                    .withSourceDatabaseDeletionDate(OffsetDateTime.parse("2021-04-01T03:47:56Z")),
                new SqlPoolInner().withLocation("aen")
                    .withTags(mapOf("oygmift", "hin"))
                    .withSku(new Sku().withTier("srruvwbhsqfsubcg").withName("irx").withCapacity(1282258802))
                    .withMaxSizeBytes(4717614806856860947L)
                    .withCollation("jfdtwssotftpvj")
                    .withSourceDatabaseId("exilzznfqqnvwpmq")
                    .withRecoverableDatabaseId("ruoujmk")
                    .withProvisioningState("hwqytj")
                    .withRestorePointInTime(OffsetDateTime.parse("2021-08-28T18:20:54Z"))
                    .withCreateMode(CreateMode.RESTORE)
                    .withStorageAccountType(StorageAccountType.LRS)
                    .withSourceDatabaseDeletionDate(OffsetDateTime.parse("2021-02-06T06:59:31Z"))));
        model = BinaryData.fromObject(model).toObject(SqlPoolInfoListResult.class);
        Assertions.assertEquals("fqbuaceopzf", model.nextLink());
        Assertions.assertEquals("vjfdx", model.value().get(0).location());
        Assertions.assertEquals("e", model.value().get(0).tags().get("vtcqaqtdo"));
        Assertions.assertEquals("ao", model.value().get(0).sku().tier());
        Assertions.assertEquals("pcqeqx", model.value().get(0).sku().name());
        Assertions.assertEquals(72119187, model.value().get(0).sku().capacity());
        Assertions.assertEquals(4786890397912480430L, model.value().get(0).maxSizeBytes());
        Assertions.assertEquals("ctobg", model.value().get(0).collation());
        Assertions.assertEquals("dmoizpostmg", model.value().get(0).sourceDatabaseId());
        Assertions.assertEquals("fbunrmfqjhhk", model.value().get(0).recoverableDatabaseId());
        Assertions.assertEquals("pvjymjhxxjyng", model.value().get(0).provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T10:12:47Z"),
            model.value().get(0).restorePointInTime());
        Assertions.assertEquals(CreateMode.RESTORE, model.value().get(0).createMode());
        Assertions.assertEquals(StorageAccountType.LRS, model.value().get(0).storageAccountType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T03:47:56Z"),
            model.value().get(0).sourceDatabaseDeletionDate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
