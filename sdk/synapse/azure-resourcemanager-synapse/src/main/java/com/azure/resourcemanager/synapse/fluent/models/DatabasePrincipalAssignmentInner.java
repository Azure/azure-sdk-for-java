// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.models.DatabasePrincipalRole;
import com.azure.resourcemanager.synapse.models.PrincipalType;
import com.azure.resourcemanager.synapse.models.ResourceProvisioningState;
import java.io.IOException;

/**
 * Class representing a database principal assignment.
 */
@Fluent
public final class DatabasePrincipalAssignmentInner extends ProxyResource {
    /*
     * The database principal.
     */
    private DatabasePrincipalProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DatabasePrincipalAssignmentInner class.
     */
    public DatabasePrincipalAssignmentInner() {
    }

    /**
     * Get the innerProperties property: The database principal.
     * 
     * @return the innerProperties value.
     */
    private DatabasePrincipalProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the principalId property: The principal ID assigned to the database principal. It can be a user email,
     * application ID, or security group name.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.innerProperties() == null ? null : this.innerProperties().principalId();
    }

    /**
     * Set the principalId property: The principal ID assigned to the database principal. It can be a user email,
     * application ID, or security group name.
     * 
     * @param principalId the principalId value to set.
     * @return the DatabasePrincipalAssignmentInner object itself.
     */
    public DatabasePrincipalAssignmentInner withPrincipalId(String principalId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabasePrincipalProperties();
        }
        this.innerProperties().withPrincipalId(principalId);
        return this;
    }

    /**
     * Get the role property: Database principal role.
     * 
     * @return the role value.
     */
    public DatabasePrincipalRole role() {
        return this.innerProperties() == null ? null : this.innerProperties().role();
    }

    /**
     * Set the role property: Database principal role.
     * 
     * @param role the role value to set.
     * @return the DatabasePrincipalAssignmentInner object itself.
     */
    public DatabasePrincipalAssignmentInner withRole(DatabasePrincipalRole role) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabasePrincipalProperties();
        }
        this.innerProperties().withRole(role);
        return this;
    }

    /**
     * Get the tenantId property: The tenant id of the principal.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: The tenant id of the principal.
     * 
     * @param tenantId the tenantId value to set.
     * @return the DatabasePrincipalAssignmentInner object itself.
     */
    public DatabasePrincipalAssignmentInner withTenantId(String tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabasePrincipalProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Get the principalType property: Principal type.
     * 
     * @return the principalType value.
     */
    public PrincipalType principalType() {
        return this.innerProperties() == null ? null : this.innerProperties().principalType();
    }

    /**
     * Set the principalType property: Principal type.
     * 
     * @param principalType the principalType value to set.
     * @return the DatabasePrincipalAssignmentInner object itself.
     */
    public DatabasePrincipalAssignmentInner withPrincipalType(PrincipalType principalType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabasePrincipalProperties();
        }
        this.innerProperties().withPrincipalType(principalType);
        return this;
    }

    /**
     * Get the tenantName property: The tenant name of the principal.
     * 
     * @return the tenantName value.
     */
    public String tenantName() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantName();
    }

    /**
     * Get the principalName property: The principal name.
     * 
     * @return the principalName value.
     */
    public String principalName() {
        return this.innerProperties() == null ? null : this.innerProperties().principalName();
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the aadObjectId property: The service principal object id in AAD (Azure active directory).
     * 
     * @return the aadObjectId value.
     */
    public String aadObjectId() {
        return this.innerProperties() == null ? null : this.innerProperties().aadObjectId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabasePrincipalAssignmentInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabasePrincipalAssignmentInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabasePrincipalAssignmentInner.
     */
    public static DatabasePrincipalAssignmentInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabasePrincipalAssignmentInner deserializedDatabasePrincipalAssignmentInner
                = new DatabasePrincipalAssignmentInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDatabasePrincipalAssignmentInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDatabasePrincipalAssignmentInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDatabasePrincipalAssignmentInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDatabasePrincipalAssignmentInner.innerProperties
                        = DatabasePrincipalProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDatabasePrincipalAssignmentInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabasePrincipalAssignmentInner;
        });
    }
}
