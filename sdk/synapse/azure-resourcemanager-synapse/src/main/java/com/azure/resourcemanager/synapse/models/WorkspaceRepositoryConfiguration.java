// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * Git integration settings.
 */
@Fluent
public final class WorkspaceRepositoryConfiguration implements JsonSerializable<WorkspaceRepositoryConfiguration> {
    /*
     * Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration
     */
    private String type;

    /*
     * GitHub Enterprise host name. For example: `https://github.mydomain.com`
     */
    private String hostname;

    /*
     * Account name
     */
    private String accountName;

    /*
     * VSTS project name
     */
    private String projectName;

    /*
     * Repository name
     */
    private String repositoryName;

    /*
     * Collaboration branch
     */
    private String collaborationBranch;

    /*
     * Root folder to use in the repository
     */
    private String rootFolder;

    /*
     * The last commit ID
     */
    private String lastCommitId;

    /*
     * The VSTS tenant ID
     */
    private UUID tenantId;

    /**
     * Creates an instance of WorkspaceRepositoryConfiguration class.
     */
    public WorkspaceRepositoryConfiguration() {
    }

    /**
     * Get the type property: Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration,
     * WorkspaceGitHubConfiguration.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration,
     * WorkspaceGitHubConfiguration.
     * 
     * @param type the type value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the hostname property: GitHub Enterprise host name. For example: `https://github.mydomain.com`.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: GitHub Enterprise host name. For example: `https://github.mydomain.com`.
     * 
     * @param hostname the hostname value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the accountName property: Account name.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Set the accountName property: Account name.
     * 
     * @param accountName the accountName value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * Get the projectName property: VSTS project name.
     * 
     * @return the projectName value.
     */
    public String projectName() {
        return this.projectName;
    }

    /**
     * Set the projectName property: VSTS project name.
     * 
     * @param projectName the projectName value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withProjectName(String projectName) {
        this.projectName = projectName;
        return this;
    }

    /**
     * Get the repositoryName property: Repository name.
     * 
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    /**
     * Set the repositoryName property: Repository name.
     * 
     * @param repositoryName the repositoryName value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }

    /**
     * Get the collaborationBranch property: Collaboration branch.
     * 
     * @return the collaborationBranch value.
     */
    public String collaborationBranch() {
        return this.collaborationBranch;
    }

    /**
     * Set the collaborationBranch property: Collaboration branch.
     * 
     * @param collaborationBranch the collaborationBranch value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withCollaborationBranch(String collaborationBranch) {
        this.collaborationBranch = collaborationBranch;
        return this;
    }

    /**
     * Get the rootFolder property: Root folder to use in the repository.
     * 
     * @return the rootFolder value.
     */
    public String rootFolder() {
        return this.rootFolder;
    }

    /**
     * Set the rootFolder property: Root folder to use in the repository.
     * 
     * @param rootFolder the rootFolder value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withRootFolder(String rootFolder) {
        this.rootFolder = rootFolder;
        return this;
    }

    /**
     * Get the lastCommitId property: The last commit ID.
     * 
     * @return the lastCommitId value.
     */
    public String lastCommitId() {
        return this.lastCommitId;
    }

    /**
     * Set the lastCommitId property: The last commit ID.
     * 
     * @param lastCommitId the lastCommitId value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withLastCommitId(String lastCommitId) {
        this.lastCommitId = lastCommitId;
        return this;
    }

    /**
     * Get the tenantId property: The VSTS tenant ID.
     * 
     * @return the tenantId value.
     */
    public UUID tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The VSTS tenant ID.
     * 
     * @param tenantId the tenantId value to set.
     * @return the WorkspaceRepositoryConfiguration object itself.
     */
    public WorkspaceRepositoryConfiguration withTenantId(UUID tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("accountName", this.accountName);
        jsonWriter.writeStringField("projectName", this.projectName);
        jsonWriter.writeStringField("repositoryName", this.repositoryName);
        jsonWriter.writeStringField("collaborationBranch", this.collaborationBranch);
        jsonWriter.writeStringField("rootFolder", this.rootFolder);
        jsonWriter.writeStringField("lastCommitId", this.lastCommitId);
        jsonWriter.writeStringField("tenantId", Objects.toString(this.tenantId, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceRepositoryConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceRepositoryConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspaceRepositoryConfiguration.
     */
    public static WorkspaceRepositoryConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceRepositoryConfiguration deserializedWorkspaceRepositoryConfiguration
                = new WorkspaceRepositoryConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.type = reader.getString();
                } else if ("hostName".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.hostname = reader.getString();
                } else if ("accountName".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.accountName = reader.getString();
                } else if ("projectName".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.projectName = reader.getString();
                } else if ("repositoryName".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.repositoryName = reader.getString();
                } else if ("collaborationBranch".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.collaborationBranch = reader.getString();
                } else if ("rootFolder".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.rootFolder = reader.getString();
                } else if ("lastCommitId".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.lastCommitId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedWorkspaceRepositoryConfiguration.tenantId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceRepositoryConfiguration;
        });
    }
}
