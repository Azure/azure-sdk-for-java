// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.models.EntityResource;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Library response details.
 */
@Fluent
public final class LibraryResourceInner extends EntityResource {
    /*
     * Library/package properties.
     */
    private LibraryInfo innerProperties = new LibraryInfo();

    /*
     * Resource Etag.
     */
    private String etag;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of LibraryResourceInner class.
     */
    public LibraryResourceInner() {
    }

    /**
     * Get the innerProperties property: Library/package properties.
     * 
     * @return the innerProperties value.
     */
    private LibraryInfo innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: Resource Etag.
     * 
     * @return the etag value.
     */
    @Override
    public String etag() {
        return this.etag;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the library.
     * 
     * @return the name value.
     */
    public String namePropertiesName() {
        return this.innerProperties() == null ? null : this.innerProperties().name();
    }

    /**
     * Set the name property: Name of the library.
     * 
     * @param name the name value to set.
     * @return the LibraryResourceInner object itself.
     */
    public LibraryResourceInner withNamePropertiesName(String name) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LibraryInfo();
        }
        this.innerProperties().withName(name);
        return this;
    }

    /**
     * Get the path property: Storage blob path of library.
     * 
     * @return the path value.
     */
    public String path() {
        return this.innerProperties() == null ? null : this.innerProperties().path();
    }

    /**
     * Set the path property: Storage blob path of library.
     * 
     * @param path the path value to set.
     * @return the LibraryResourceInner object itself.
     */
    public LibraryResourceInner withPath(String path) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LibraryInfo();
        }
        this.innerProperties().withPath(path);
        return this;
    }

    /**
     * Get the containerName property: Storage blob container name.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.innerProperties() == null ? null : this.innerProperties().containerName();
    }

    /**
     * Set the containerName property: Storage blob container name.
     * 
     * @param containerName the containerName value to set.
     * @return the LibraryResourceInner object itself.
     */
    public LibraryResourceInner withContainerName(String containerName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LibraryInfo();
        }
        this.innerProperties().withContainerName(containerName);
        return this;
    }

    /**
     * Get the uploadedTimestamp property: The last update time of the library.
     * 
     * @return the uploadedTimestamp value.
     */
    public OffsetDateTime uploadedTimestamp() {
        return this.innerProperties() == null ? null : this.innerProperties().uploadedTimestamp();
    }

    /**
     * Get the type property: Type of the library.
     * 
     * @return the type value.
     */
    public String typePropertiesType() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: Type of the library.
     * 
     * @param type the type value to set.
     * @return the LibraryResourceInner object itself.
     */
    public LibraryResourceInner withTypePropertiesType(String type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LibraryInfo();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the provisioningStatus property: Provisioning status of the library/package.
     * 
     * @return the provisioningStatus value.
     */
    public String provisioningStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningStatus();
    }

    /**
     * Get the creatorId property: Creator Id of the library/package.
     * 
     * @return the creatorId value.
     */
    public String creatorId() {
        return this.innerProperties() == null ? null : this.innerProperties().creatorId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model LibraryResourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LibraryResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LibraryResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LibraryResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LibraryResourceInner.
     */
    public static LibraryResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LibraryResourceInner deserializedLibraryResourceInner = new LibraryResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLibraryResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLibraryResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLibraryResourceInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedLibraryResourceInner.etag = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedLibraryResourceInner.innerProperties = LibraryInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLibraryResourceInner;
        });
    }
}
