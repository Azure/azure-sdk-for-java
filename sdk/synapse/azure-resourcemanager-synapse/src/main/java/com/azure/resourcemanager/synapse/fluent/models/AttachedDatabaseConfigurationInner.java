// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.models.DefaultPrincipalsModificationKind;
import com.azure.resourcemanager.synapse.models.ResourceProvisioningState;
import com.azure.resourcemanager.synapse.models.TableLevelSharingProperties;
import java.io.IOException;
import java.util.List;

/**
 * Class representing an attached database configuration.
 */
@Fluent
public final class AttachedDatabaseConfigurationInner extends ProxyResource {
    /*
     * Resource location.
     */
    private String location;

    /*
     * The properties of the attached database configuration.
     */
    private AttachedDatabaseConfigurationProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AttachedDatabaseConfigurationInner class.
     */
    public AttachedDatabaseConfigurationInner() {
    }

    /**
     * Get the location property: Resource location.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Resource location.
     * 
     * @param location the location value to set.
     * @return the AttachedDatabaseConfigurationInner object itself.
     */
    public AttachedDatabaseConfigurationInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the innerProperties property: The properties of the attached database configuration.
     * 
     * @return the innerProperties value.
     */
    private AttachedDatabaseConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the databaseName property: The name of the database which you would like to attach, use * if you want to
     * follow all current and future databases.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.innerProperties() == null ? null : this.innerProperties().databaseName();
    }

    /**
     * Set the databaseName property: The name of the database which you would like to attach, use * if you want to
     * follow all current and future databases.
     * 
     * @param databaseName the databaseName value to set.
     * @return the AttachedDatabaseConfigurationInner object itself.
     */
    public AttachedDatabaseConfigurationInner withDatabaseName(String databaseName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AttachedDatabaseConfigurationProperties();
        }
        this.innerProperties().withDatabaseName(databaseName);
        return this;
    }

    /**
     * Get the kustoPoolResourceId property: The resource id of the kusto pool where the databases you would like to
     * attach reside.
     * 
     * @return the kustoPoolResourceId value.
     */
    public String kustoPoolResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().kustoPoolResourceId();
    }

    /**
     * Set the kustoPoolResourceId property: The resource id of the kusto pool where the databases you would like to
     * attach reside.
     * 
     * @param kustoPoolResourceId the kustoPoolResourceId value to set.
     * @return the AttachedDatabaseConfigurationInner object itself.
     */
    public AttachedDatabaseConfigurationInner withKustoPoolResourceId(String kustoPoolResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AttachedDatabaseConfigurationProperties();
        }
        this.innerProperties().withKustoPoolResourceId(kustoPoolResourceId);
        return this;
    }

    /**
     * Get the attachedDatabaseNames property: The list of databases from the clusterResourceId which are currently
     * attached to the kusto pool.
     * 
     * @return the attachedDatabaseNames value.
     */
    public List<String> attachedDatabaseNames() {
        return this.innerProperties() == null ? null : this.innerProperties().attachedDatabaseNames();
    }

    /**
     * Get the defaultPrincipalsModificationKind property: The default principals modification kind.
     * 
     * @return the defaultPrincipalsModificationKind value.
     */
    public DefaultPrincipalsModificationKind defaultPrincipalsModificationKind() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultPrincipalsModificationKind();
    }

    /**
     * Set the defaultPrincipalsModificationKind property: The default principals modification kind.
     * 
     * @param defaultPrincipalsModificationKind the defaultPrincipalsModificationKind value to set.
     * @return the AttachedDatabaseConfigurationInner object itself.
     */
    public AttachedDatabaseConfigurationInner
        withDefaultPrincipalsModificationKind(DefaultPrincipalsModificationKind defaultPrincipalsModificationKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AttachedDatabaseConfigurationProperties();
        }
        this.innerProperties().withDefaultPrincipalsModificationKind(defaultPrincipalsModificationKind);
        return this;
    }

    /**
     * Get the tableLevelSharingProperties property: Table level sharing specifications.
     * 
     * @return the tableLevelSharingProperties value.
     */
    public TableLevelSharingProperties tableLevelSharingProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().tableLevelSharingProperties();
    }

    /**
     * Set the tableLevelSharingProperties property: Table level sharing specifications.
     * 
     * @param tableLevelSharingProperties the tableLevelSharingProperties value to set.
     * @return the AttachedDatabaseConfigurationInner object itself.
     */
    public AttachedDatabaseConfigurationInner
        withTableLevelSharingProperties(TableLevelSharingProperties tableLevelSharingProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AttachedDatabaseConfigurationProperties();
        }
        this.innerProperties().withTableLevelSharingProperties(tableLevelSharingProperties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AttachedDatabaseConfigurationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AttachedDatabaseConfigurationInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AttachedDatabaseConfigurationInner.
     */
    public static AttachedDatabaseConfigurationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AttachedDatabaseConfigurationInner deserializedAttachedDatabaseConfigurationInner
                = new AttachedDatabaseConfigurationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAttachedDatabaseConfigurationInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAttachedDatabaseConfigurationInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAttachedDatabaseConfigurationInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAttachedDatabaseConfigurationInner.location = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAttachedDatabaseConfigurationInner.innerProperties
                        = AttachedDatabaseConfigurationProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAttachedDatabaseConfigurationInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAttachedDatabaseConfigurationInner;
        });
    }
}
