// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.fluent.models.KustoPoolProperties;
import java.io.IOException;
import java.util.Map;

/**
 * Class representing an update to a Kusto kusto pool.
 */
@Fluent
public final class KustoPoolUpdate extends ProxyResource {
    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The SKU of the kusto pool.
     */
    private AzureSku sku;

    /*
     * The kusto pool properties.
     */
    private KustoPoolProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of KustoPoolUpdate class.
     */
    public KustoPoolUpdate() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the KustoPoolUpdate object itself.
     */
    public KustoPoolUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the sku property: The SKU of the kusto pool.
     * 
     * @return the sku value.
     */
    public AzureSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU of the kusto pool.
     * 
     * @param sku the sku value to set.
     * @return the KustoPoolUpdate object itself.
     */
    public KustoPoolUpdate withSku(AzureSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the innerProperties property: The kusto pool properties.
     * 
     * @return the innerProperties value.
     */
    private KustoPoolProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the state property: The state of the resource.
     * 
     * @return the state value.
     */
    public State state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the uri property: The Kusto Pool URI.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.innerProperties() == null ? null : this.innerProperties().uri();
    }

    /**
     * Get the dataIngestionUri property: The Kusto Pool data ingestion URI.
     * 
     * @return the dataIngestionUri value.
     */
    public String dataIngestionUri() {
        return this.innerProperties() == null ? null : this.innerProperties().dataIngestionUri();
    }

    /**
     * Get the stateReason property: The reason for the Kusto Pool's current state.
     * 
     * @return the stateReason value.
     */
    public String stateReason() {
        return this.innerProperties() == null ? null : this.innerProperties().stateReason();
    }

    /**
     * Get the optimizedAutoscale property: Optimized auto scale definition.
     * 
     * @return the optimizedAutoscale value.
     */
    public OptimizedAutoscale optimizedAutoscale() {
        return this.innerProperties() == null ? null : this.innerProperties().optimizedAutoscale();
    }

    /**
     * Set the optimizedAutoscale property: Optimized auto scale definition.
     * 
     * @param optimizedAutoscale the optimizedAutoscale value to set.
     * @return the KustoPoolUpdate object itself.
     */
    public KustoPoolUpdate withOptimizedAutoscale(OptimizedAutoscale optimizedAutoscale) {
        if (this.innerProperties() == null) {
            this.innerProperties = new KustoPoolProperties();
        }
        this.innerProperties().withOptimizedAutoscale(optimizedAutoscale);
        return this;
    }

    /**
     * Get the enableStreamingIngest property: A boolean value that indicates if the streaming ingest is enabled.
     * 
     * @return the enableStreamingIngest value.
     */
    public Boolean enableStreamingIngest() {
        return this.innerProperties() == null ? null : this.innerProperties().enableStreamingIngest();
    }

    /**
     * Set the enableStreamingIngest property: A boolean value that indicates if the streaming ingest is enabled.
     * 
     * @param enableStreamingIngest the enableStreamingIngest value to set.
     * @return the KustoPoolUpdate object itself.
     */
    public KustoPoolUpdate withEnableStreamingIngest(Boolean enableStreamingIngest) {
        if (this.innerProperties() == null) {
            this.innerProperties = new KustoPoolProperties();
        }
        this.innerProperties().withEnableStreamingIngest(enableStreamingIngest);
        return this;
    }

    /**
     * Get the enablePurge property: A boolean value that indicates if the purge operations are enabled.
     * 
     * @return the enablePurge value.
     */
    public Boolean enablePurge() {
        return this.innerProperties() == null ? null : this.innerProperties().enablePurge();
    }

    /**
     * Set the enablePurge property: A boolean value that indicates if the purge operations are enabled.
     * 
     * @param enablePurge the enablePurge value to set.
     * @return the KustoPoolUpdate object itself.
     */
    public KustoPoolUpdate withEnablePurge(Boolean enablePurge) {
        if (this.innerProperties() == null) {
            this.innerProperties = new KustoPoolProperties();
        }
        this.innerProperties().withEnablePurge(enablePurge);
        return this;
    }

    /**
     * Get the languageExtensions property: List of the Kusto Pool's language extensions.
     * 
     * @return the languageExtensions value.
     */
    public LanguageExtensionsList languageExtensions() {
        return this.innerProperties() == null ? null : this.innerProperties().languageExtensions();
    }

    /**
     * Get the workspaceUid property: The workspace unique identifier.
     * 
     * @return the workspaceUid value.
     */
    public String workspaceUid() {
        return this.innerProperties() == null ? null : this.innerProperties().workspaceUid();
    }

    /**
     * Set the workspaceUid property: The workspace unique identifier.
     * 
     * @param workspaceUid the workspaceUid value to set.
     * @return the KustoPoolUpdate object itself.
     */
    public KustoPoolUpdate withWorkspaceUid(String workspaceUid) {
        if (this.innerProperties() == null) {
            this.innerProperties = new KustoPoolProperties();
        }
        this.innerProperties().withWorkspaceUid(workspaceUid);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KustoPoolUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KustoPoolUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KustoPoolUpdate.
     */
    public static KustoPoolUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KustoPoolUpdate deserializedKustoPoolUpdate = new KustoPoolUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedKustoPoolUpdate.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedKustoPoolUpdate.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedKustoPoolUpdate.type = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedKustoPoolUpdate.tags = tags;
                } else if ("sku".equals(fieldName)) {
                    deserializedKustoPoolUpdate.sku = AzureSku.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedKustoPoolUpdate.innerProperties = KustoPoolProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKustoPoolUpdate;
        });
    }
}
