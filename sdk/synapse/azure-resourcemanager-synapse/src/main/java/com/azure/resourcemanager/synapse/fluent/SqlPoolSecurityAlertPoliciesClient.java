// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.synapse.fluent.models.SqlPoolSecurityAlertPolicyInner;
import com.azure.resourcemanager.synapse.models.SecurityAlertPolicyName;

/** An instance of this class provides access to all the operations defined in SqlPoolSecurityAlertPoliciesClient. */
public interface SqlPoolSecurityAlertPoliciesClient {
    /**
     * Get a list of Sql pool's security alert policies.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Sql pool's security alert policies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlPoolSecurityAlertPolicyInner> list(
        String resourceGroupName, String workspaceName, String sqlPoolName);

    /**
     * Get a list of Sql pool's security alert policies.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Sql pool's security alert policies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlPoolSecurityAlertPolicyInner> list(
        String resourceGroupName, String workspaceName, String sqlPoolName, Context context);

    /**
     * Get a Sql pool's security alert policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Sql pool's security alert policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlPoolSecurityAlertPolicyInner get(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        SecurityAlertPolicyName securityAlertPolicyName);

    /**
     * Get a Sql pool's security alert policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Sql pool's security alert policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlPoolSecurityAlertPolicyInner> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        SecurityAlertPolicyName securityAlertPolicyName,
        Context context);

    /**
     * Create or update a Sql pool's security alert policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param parameters The Sql pool security alert policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Sql pool security alert policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlPoolSecurityAlertPolicyInner createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        SecurityAlertPolicyName securityAlertPolicyName,
        SqlPoolSecurityAlertPolicyInner parameters);

    /**
     * Create or update a Sql pool's security alert policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param parameters The Sql pool security alert policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Sql pool security alert policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlPoolSecurityAlertPolicyInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        SecurityAlertPolicyName securityAlertPolicyName,
        SqlPoolSecurityAlertPolicyInner parameters,
        Context context);
}
