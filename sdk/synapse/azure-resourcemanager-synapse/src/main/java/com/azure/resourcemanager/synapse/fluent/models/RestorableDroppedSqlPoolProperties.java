// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of a restorable dropped Sql pool.
 */
@Immutable
public final class RestorableDroppedSqlPoolProperties implements JsonSerializable<RestorableDroppedSqlPoolProperties> {
    /*
     * The name of the database
     */
    private String databaseName;

    /*
     * The edition of the database
     */
    private String edition;

    /*
     * The max size in bytes of the database
     */
    private String maxSizeBytes;

    /*
     * The service level objective name of the database
     */
    private String serviceLevelObjective;

    /*
     * The elastic pool name of the database
     */
    private String elasticPoolName;

    /*
     * The creation date of the database (ISO8601 format)
     */
    private OffsetDateTime creationDate;

    /*
     * The deletion date of the database (ISO8601 format)
     */
    private OffsetDateTime deletionDate;

    /*
     * The earliest restore date of the database (ISO8601 format)
     */
    private OffsetDateTime earliestRestoreDate;

    /**
     * Creates an instance of RestorableDroppedSqlPoolProperties class.
     */
    public RestorableDroppedSqlPoolProperties() {
    }

    /**
     * Get the databaseName property: The name of the database.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the edition property: The edition of the database.
     * 
     * @return the edition value.
     */
    public String edition() {
        return this.edition;
    }

    /**
     * Get the maxSizeBytes property: The max size in bytes of the database.
     * 
     * @return the maxSizeBytes value.
     */
    public String maxSizeBytes() {
        return this.maxSizeBytes;
    }

    /**
     * Get the serviceLevelObjective property: The service level objective name of the database.
     * 
     * @return the serviceLevelObjective value.
     */
    public String serviceLevelObjective() {
        return this.serviceLevelObjective;
    }

    /**
     * Get the elasticPoolName property: The elastic pool name of the database.
     * 
     * @return the elasticPoolName value.
     */
    public String elasticPoolName() {
        return this.elasticPoolName;
    }

    /**
     * Get the creationDate property: The creation date of the database (ISO8601 format).
     * 
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the deletionDate property: The deletion date of the database (ISO8601 format).
     * 
     * @return the deletionDate value.
     */
    public OffsetDateTime deletionDate() {
        return this.deletionDate;
    }

    /**
     * Get the earliestRestoreDate property: The earliest restore date of the database (ISO8601 format).
     * 
     * @return the earliestRestoreDate value.
     */
    public OffsetDateTime earliestRestoreDate() {
        return this.earliestRestoreDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestorableDroppedSqlPoolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestorableDroppedSqlPoolProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RestorableDroppedSqlPoolProperties.
     */
    public static RestorableDroppedSqlPoolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestorableDroppedSqlPoolProperties deserializedRestorableDroppedSqlPoolProperties
                = new RestorableDroppedSqlPoolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.databaseName = reader.getString();
                } else if ("edition".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.edition = reader.getString();
                } else if ("maxSizeBytes".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.maxSizeBytes = reader.getString();
                } else if ("serviceLevelObjective".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.serviceLevelObjective = reader.getString();
                } else if ("elasticPoolName".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.elasticPoolName = reader.getString();
                } else if ("creationDate".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.creationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.deletionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("earliestRestoreDate".equals(fieldName)) {
                    deserializedRestorableDroppedSqlPoolProperties.earliestRestoreDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestorableDroppedSqlPoolProperties;
        });
    }
}
