// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Tables that will be included and excluded in the follower database.
 */
@Fluent
public final class TableLevelSharingProperties implements JsonSerializable<TableLevelSharingProperties> {
    /*
     * List of tables to include in the follower database
     */
    private List<String> tablesToInclude;

    /*
     * List of tables to exclude from the follower database
     */
    private List<String> tablesToExclude;

    /*
     * List of external tables to include in the follower database
     */
    private List<String> externalTablesToInclude;

    /*
     * List of external tables exclude from the follower database
     */
    private List<String> externalTablesToExclude;

    /*
     * List of materialized views to include in the follower database
     */
    private List<String> materializedViewsToInclude;

    /*
     * List of materialized views exclude from the follower database
     */
    private List<String> materializedViewsToExclude;

    /**
     * Creates an instance of TableLevelSharingProperties class.
     */
    public TableLevelSharingProperties() {
    }

    /**
     * Get the tablesToInclude property: List of tables to include in the follower database.
     * 
     * @return the tablesToInclude value.
     */
    public List<String> tablesToInclude() {
        return this.tablesToInclude;
    }

    /**
     * Set the tablesToInclude property: List of tables to include in the follower database.
     * 
     * @param tablesToInclude the tablesToInclude value to set.
     * @return the TableLevelSharingProperties object itself.
     */
    public TableLevelSharingProperties withTablesToInclude(List<String> tablesToInclude) {
        this.tablesToInclude = tablesToInclude;
        return this;
    }

    /**
     * Get the tablesToExclude property: List of tables to exclude from the follower database.
     * 
     * @return the tablesToExclude value.
     */
    public List<String> tablesToExclude() {
        return this.tablesToExclude;
    }

    /**
     * Set the tablesToExclude property: List of tables to exclude from the follower database.
     * 
     * @param tablesToExclude the tablesToExclude value to set.
     * @return the TableLevelSharingProperties object itself.
     */
    public TableLevelSharingProperties withTablesToExclude(List<String> tablesToExclude) {
        this.tablesToExclude = tablesToExclude;
        return this;
    }

    /**
     * Get the externalTablesToInclude property: List of external tables to include in the follower database.
     * 
     * @return the externalTablesToInclude value.
     */
    public List<String> externalTablesToInclude() {
        return this.externalTablesToInclude;
    }

    /**
     * Set the externalTablesToInclude property: List of external tables to include in the follower database.
     * 
     * @param externalTablesToInclude the externalTablesToInclude value to set.
     * @return the TableLevelSharingProperties object itself.
     */
    public TableLevelSharingProperties withExternalTablesToInclude(List<String> externalTablesToInclude) {
        this.externalTablesToInclude = externalTablesToInclude;
        return this;
    }

    /**
     * Get the externalTablesToExclude property: List of external tables exclude from the follower database.
     * 
     * @return the externalTablesToExclude value.
     */
    public List<String> externalTablesToExclude() {
        return this.externalTablesToExclude;
    }

    /**
     * Set the externalTablesToExclude property: List of external tables exclude from the follower database.
     * 
     * @param externalTablesToExclude the externalTablesToExclude value to set.
     * @return the TableLevelSharingProperties object itself.
     */
    public TableLevelSharingProperties withExternalTablesToExclude(List<String> externalTablesToExclude) {
        this.externalTablesToExclude = externalTablesToExclude;
        return this;
    }

    /**
     * Get the materializedViewsToInclude property: List of materialized views to include in the follower database.
     * 
     * @return the materializedViewsToInclude value.
     */
    public List<String> materializedViewsToInclude() {
        return this.materializedViewsToInclude;
    }

    /**
     * Set the materializedViewsToInclude property: List of materialized views to include in the follower database.
     * 
     * @param materializedViewsToInclude the materializedViewsToInclude value to set.
     * @return the TableLevelSharingProperties object itself.
     */
    public TableLevelSharingProperties withMaterializedViewsToInclude(List<String> materializedViewsToInclude) {
        this.materializedViewsToInclude = materializedViewsToInclude;
        return this;
    }

    /**
     * Get the materializedViewsToExclude property: List of materialized views exclude from the follower database.
     * 
     * @return the materializedViewsToExclude value.
     */
    public List<String> materializedViewsToExclude() {
        return this.materializedViewsToExclude;
    }

    /**
     * Set the materializedViewsToExclude property: List of materialized views exclude from the follower database.
     * 
     * @param materializedViewsToExclude the materializedViewsToExclude value to set.
     * @return the TableLevelSharingProperties object itself.
     */
    public TableLevelSharingProperties withMaterializedViewsToExclude(List<String> materializedViewsToExclude) {
        this.materializedViewsToExclude = materializedViewsToExclude;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tablesToInclude", this.tablesToInclude,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("tablesToExclude", this.tablesToExclude,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("externalTablesToInclude", this.externalTablesToInclude,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("externalTablesToExclude", this.externalTablesToExclude,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("materializedViewsToInclude", this.materializedViewsToInclude,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("materializedViewsToExclude", this.materializedViewsToExclude,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TableLevelSharingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TableLevelSharingProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TableLevelSharingProperties.
     */
    public static TableLevelSharingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TableLevelSharingProperties deserializedTableLevelSharingProperties = new TableLevelSharingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tablesToInclude".equals(fieldName)) {
                    List<String> tablesToInclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedTableLevelSharingProperties.tablesToInclude = tablesToInclude;
                } else if ("tablesToExclude".equals(fieldName)) {
                    List<String> tablesToExclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedTableLevelSharingProperties.tablesToExclude = tablesToExclude;
                } else if ("externalTablesToInclude".equals(fieldName)) {
                    List<String> externalTablesToInclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedTableLevelSharingProperties.externalTablesToInclude = externalTablesToInclude;
                } else if ("externalTablesToExclude".equals(fieldName)) {
                    List<String> externalTablesToExclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedTableLevelSharingProperties.externalTablesToExclude = externalTablesToExclude;
                } else if ("materializedViewsToInclude".equals(fieldName)) {
                    List<String> materializedViewsToInclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedTableLevelSharingProperties.materializedViewsToInclude = materializedViewsToInclude;
                } else if ("materializedViewsToExclude".equals(fieldName)) {
                    List<String> materializedViewsToExclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedTableLevelSharingProperties.materializedViewsToExclude = materializedViewsToExclude;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTableLevelSharingProperties;
        });
    }
}
