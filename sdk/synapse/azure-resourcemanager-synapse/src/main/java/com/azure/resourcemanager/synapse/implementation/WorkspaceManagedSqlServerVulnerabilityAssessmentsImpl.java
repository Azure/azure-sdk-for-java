// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.synapse.fluent.WorkspaceManagedSqlServerVulnerabilityAssessmentsClient;
import com.azure.resourcemanager.synapse.fluent.models.ServerVulnerabilityAssessmentInner;
import com.azure.resourcemanager.synapse.models.ServerVulnerabilityAssessment;
import com.azure.resourcemanager.synapse.models.VulnerabilityAssessmentName;
import com.azure.resourcemanager.synapse.models.WorkspaceManagedSqlServerVulnerabilityAssessments;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class WorkspaceManagedSqlServerVulnerabilityAssessmentsImpl
    implements WorkspaceManagedSqlServerVulnerabilityAssessments {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(WorkspaceManagedSqlServerVulnerabilityAssessmentsImpl.class);

    private final WorkspaceManagedSqlServerVulnerabilityAssessmentsClient innerClient;

    private final com.azure.resourcemanager.synapse.SynapseManager serviceManager;

    public WorkspaceManagedSqlServerVulnerabilityAssessmentsImpl(
        WorkspaceManagedSqlServerVulnerabilityAssessmentsClient innerClient,
        com.azure.resourcemanager.synapse.SynapseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServerVulnerabilityAssessment get(
        String resourceGroupName, String workspaceName, VulnerabilityAssessmentName vulnerabilityAssessmentName) {
        ServerVulnerabilityAssessmentInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, vulnerabilityAssessmentName);
        if (inner != null) {
            return new ServerVulnerabilityAssessmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerVulnerabilityAssessment> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context) {
        Response<ServerVulnerabilityAssessmentInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, workspaceName, vulnerabilityAssessmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerVulnerabilityAssessmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName, String workspaceName, VulnerabilityAssessmentName vulnerabilityAssessmentName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, vulnerabilityAssessmentName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String workspaceName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, workspaceName, vulnerabilityAssessmentName, context);
    }

    public PagedIterable<ServerVulnerabilityAssessment> list(String resourceGroupName, String workspaceName) {
        PagedIterable<ServerVulnerabilityAssessmentInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new ServerVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerVulnerabilityAssessment> list(
        String resourceGroupName, String workspaceName, Context context) {
        PagedIterable<ServerVulnerabilityAssessmentInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, context);
        return Utils.mapPage(inner, inner1 -> new ServerVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    public ServerVulnerabilityAssessment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, workspaceName, vulnerabilityAssessmentName, Context.NONE)
            .getValue();
    }

    public Response<ServerVulnerabilityAssessment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, vulnerabilityAssessmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, vulnerabilityAssessmentName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, vulnerabilityAssessmentName, context);
    }

    private WorkspaceManagedSqlServerVulnerabilityAssessmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.synapse.SynapseManager manager() {
        return this.serviceManager;
    }

    public ServerVulnerabilityAssessmentImpl define(VulnerabilityAssessmentName name) {
        return new ServerVulnerabilityAssessmentImpl(name, this.manager());
    }
}
