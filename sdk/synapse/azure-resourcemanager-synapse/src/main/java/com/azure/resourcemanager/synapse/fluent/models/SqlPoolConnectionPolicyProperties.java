// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of a Sql pool connection policy. */
@Fluent
public final class SqlPoolConnectionPolicyProperties {
    /*
     * The state of security access.
     */
    @JsonProperty(value = "securityEnabledAccess")
    private String securityEnabledAccess;

    /*
     * The fully qualified host name of the auditing proxy.
     */
    @JsonProperty(value = "proxyDnsName")
    private String proxyDnsName;

    /*
     * The port number of the auditing proxy.
     */
    @JsonProperty(value = "proxyPort")
    private String proxyPort;

    /*
     * The visibility of the auditing proxy.
     */
    @JsonProperty(value = "visibility")
    private String visibility;

    /*
     * Whether server default is enabled or disabled.
     */
    @JsonProperty(value = "useServerDefault")
    private String useServerDefault;

    /*
     * The state of proxy redirection.
     */
    @JsonProperty(value = "redirectionState")
    private String redirectionState;

    /*
     * The connection policy state.
     */
    @JsonProperty(value = "state")
    private String state;

    /** Creates an instance of SqlPoolConnectionPolicyProperties class. */
    public SqlPoolConnectionPolicyProperties() {
    }

    /**
     * Get the securityEnabledAccess property: The state of security access.
     *
     * @return the securityEnabledAccess value.
     */
    public String securityEnabledAccess() {
        return this.securityEnabledAccess;
    }

    /**
     * Set the securityEnabledAccess property: The state of security access.
     *
     * @param securityEnabledAccess the securityEnabledAccess value to set.
     * @return the SqlPoolConnectionPolicyProperties object itself.
     */
    public SqlPoolConnectionPolicyProperties withSecurityEnabledAccess(String securityEnabledAccess) {
        this.securityEnabledAccess = securityEnabledAccess;
        return this;
    }

    /**
     * Get the proxyDnsName property: The fully qualified host name of the auditing proxy.
     *
     * @return the proxyDnsName value.
     */
    public String proxyDnsName() {
        return this.proxyDnsName;
    }

    /**
     * Set the proxyDnsName property: The fully qualified host name of the auditing proxy.
     *
     * @param proxyDnsName the proxyDnsName value to set.
     * @return the SqlPoolConnectionPolicyProperties object itself.
     */
    public SqlPoolConnectionPolicyProperties withProxyDnsName(String proxyDnsName) {
        this.proxyDnsName = proxyDnsName;
        return this;
    }

    /**
     * Get the proxyPort property: The port number of the auditing proxy.
     *
     * @return the proxyPort value.
     */
    public String proxyPort() {
        return this.proxyPort;
    }

    /**
     * Set the proxyPort property: The port number of the auditing proxy.
     *
     * @param proxyPort the proxyPort value to set.
     * @return the SqlPoolConnectionPolicyProperties object itself.
     */
    public SqlPoolConnectionPolicyProperties withProxyPort(String proxyPort) {
        this.proxyPort = proxyPort;
        return this;
    }

    /**
     * Get the visibility property: The visibility of the auditing proxy.
     *
     * @return the visibility value.
     */
    public String visibility() {
        return this.visibility;
    }

    /**
     * Set the visibility property: The visibility of the auditing proxy.
     *
     * @param visibility the visibility value to set.
     * @return the SqlPoolConnectionPolicyProperties object itself.
     */
    public SqlPoolConnectionPolicyProperties withVisibility(String visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Get the useServerDefault property: Whether server default is enabled or disabled.
     *
     * @return the useServerDefault value.
     */
    public String useServerDefault() {
        return this.useServerDefault;
    }

    /**
     * Set the useServerDefault property: Whether server default is enabled or disabled.
     *
     * @param useServerDefault the useServerDefault value to set.
     * @return the SqlPoolConnectionPolicyProperties object itself.
     */
    public SqlPoolConnectionPolicyProperties withUseServerDefault(String useServerDefault) {
        this.useServerDefault = useServerDefault;
        return this;
    }

    /**
     * Get the redirectionState property: The state of proxy redirection.
     *
     * @return the redirectionState value.
     */
    public String redirectionState() {
        return this.redirectionState;
    }

    /**
     * Set the redirectionState property: The state of proxy redirection.
     *
     * @param redirectionState the redirectionState value to set.
     * @return the SqlPoolConnectionPolicyProperties object itself.
     */
    public SqlPoolConnectionPolicyProperties withRedirectionState(String redirectionState) {
        this.redirectionState = redirectionState;
        return this;
    }

    /**
     * Get the state property: The connection policy state.
     *
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: The connection policy state.
     *
     * @param state the state value to set.
     * @return the SqlPoolConnectionPolicyProperties object itself.
     */
    public SqlPoolConnectionPolicyProperties withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
