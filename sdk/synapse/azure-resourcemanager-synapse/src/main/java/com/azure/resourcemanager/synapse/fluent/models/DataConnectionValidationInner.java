// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Class representing an data connection validation. */
@Fluent
public final class DataConnectionValidationInner {
    /*
     * The name of the data connection.
     */
    @JsonProperty(value = "dataConnectionName")
    private String dataConnectionName;

    /*
     * The data connection properties to validate.
     */
    @JsonProperty(value = "properties")
    private DataConnectionInner properties;

    /** Creates an instance of DataConnectionValidationInner class. */
    public DataConnectionValidationInner() {
    }

    /**
     * Get the dataConnectionName property: The name of the data connection.
     *
     * @return the dataConnectionName value.
     */
    public String dataConnectionName() {
        return this.dataConnectionName;
    }

    /**
     * Set the dataConnectionName property: The name of the data connection.
     *
     * @param dataConnectionName the dataConnectionName value to set.
     * @return the DataConnectionValidationInner object itself.
     */
    public DataConnectionValidationInner withDataConnectionName(String dataConnectionName) {
        this.dataConnectionName = dataConnectionName;
        return this;
    }

    /**
     * Get the properties property: The data connection properties to validate.
     *
     * @return the properties value.
     */
    public DataConnectionInner properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The data connection properties to validate.
     *
     * @param properties the properties value to set.
     * @return the DataConnectionValidationInner object itself.
     */
    public DataConnectionValidationInner withProperties(DataConnectionInner properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }
}
