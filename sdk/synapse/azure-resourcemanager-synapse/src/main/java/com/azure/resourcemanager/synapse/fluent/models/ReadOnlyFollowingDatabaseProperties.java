// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.models.DatabaseStatistics;
import com.azure.resourcemanager.synapse.models.PrincipalsModificationKind;
import com.azure.resourcemanager.synapse.models.ResourceProvisioningState;
import java.io.IOException;
import java.time.Duration;

/**
 * Class representing the Kusto database properties.
 */
@Fluent
public final class ReadOnlyFollowingDatabaseProperties
    implements JsonSerializable<ReadOnlyFollowingDatabaseProperties> {
    /*
     * The provisioned state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The time the data should be kept before it stops being accessible to queries in TimeSpan.
     */
    private Duration softDeletePeriod;

    /*
     * The time the data should be kept in cache for fast queries in TimeSpan.
     */
    private Duration hotCachePeriod;

    /*
     * The statistics of the database.
     */
    private DatabaseStatistics statistics;

    /*
     * The name of the leader cluster
     */
    private String leaderClusterResourceId;

    /*
     * The name of the attached database configuration cluster
     */
    private String attachedDatabaseConfigurationName;

    /*
     * The principals modification kind of the database
     */
    private PrincipalsModificationKind principalsModificationKind;

    /**
     * Creates an instance of ReadOnlyFollowingDatabaseProperties class.
     */
    public ReadOnlyFollowingDatabaseProperties() {
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the softDeletePeriod property: The time the data should be kept before it stops being accessible to queries
     * in TimeSpan.
     * 
     * @return the softDeletePeriod value.
     */
    public Duration softDeletePeriod() {
        return this.softDeletePeriod;
    }

    /**
     * Get the hotCachePeriod property: The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     * @return the hotCachePeriod value.
     */
    public Duration hotCachePeriod() {
        return this.hotCachePeriod;
    }

    /**
     * Set the hotCachePeriod property: The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     * @param hotCachePeriod the hotCachePeriod value to set.
     * @return the ReadOnlyFollowingDatabaseProperties object itself.
     */
    public ReadOnlyFollowingDatabaseProperties withHotCachePeriod(Duration hotCachePeriod) {
        this.hotCachePeriod = hotCachePeriod;
        return this;
    }

    /**
     * Get the statistics property: The statistics of the database.
     * 
     * @return the statistics value.
     */
    public DatabaseStatistics statistics() {
        return this.statistics;
    }

    /**
     * Get the leaderClusterResourceId property: The name of the leader cluster.
     * 
     * @return the leaderClusterResourceId value.
     */
    public String leaderClusterResourceId() {
        return this.leaderClusterResourceId;
    }

    /**
     * Get the attachedDatabaseConfigurationName property: The name of the attached database configuration cluster.
     * 
     * @return the attachedDatabaseConfigurationName value.
     */
    public String attachedDatabaseConfigurationName() {
        return this.attachedDatabaseConfigurationName;
    }

    /**
     * Get the principalsModificationKind property: The principals modification kind of the database.
     * 
     * @return the principalsModificationKind value.
     */
    public PrincipalsModificationKind principalsModificationKind() {
        return this.principalsModificationKind;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (statistics() != null) {
            statistics().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hotCachePeriod", CoreUtils.durationToStringWithDays(this.hotCachePeriod));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReadOnlyFollowingDatabaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReadOnlyFollowingDatabaseProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReadOnlyFollowingDatabaseProperties.
     */
    public static ReadOnlyFollowingDatabaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReadOnlyFollowingDatabaseProperties deserializedReadOnlyFollowingDatabaseProperties
                = new ReadOnlyFollowingDatabaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedReadOnlyFollowingDatabaseProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("softDeletePeriod".equals(fieldName)) {
                    deserializedReadOnlyFollowingDatabaseProperties.softDeletePeriod
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("hotCachePeriod".equals(fieldName)) {
                    deserializedReadOnlyFollowingDatabaseProperties.hotCachePeriod
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("statistics".equals(fieldName)) {
                    deserializedReadOnlyFollowingDatabaseProperties.statistics = DatabaseStatistics.fromJson(reader);
                } else if ("leaderClusterResourceId".equals(fieldName)) {
                    deserializedReadOnlyFollowingDatabaseProperties.leaderClusterResourceId = reader.getString();
                } else if ("attachedDatabaseConfigurationName".equals(fieldName)) {
                    deserializedReadOnlyFollowingDatabaseProperties.attachedDatabaseConfigurationName
                        = reader.getString();
                } else if ("principalsModificationKind".equals(fieldName)) {
                    deserializedReadOnlyFollowingDatabaseProperties.principalsModificationKind
                        = PrincipalsModificationKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReadOnlyFollowingDatabaseProperties;
        });
    }
}
