// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.synapse.fluent.ExtendedSqlPoolBlobAuditingPoliciesClient;
import com.azure.resourcemanager.synapse.fluent.models.ExtendedSqlPoolBlobAuditingPolicyInner;
import com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicies;
import com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ExtendedSqlPoolBlobAuditingPoliciesImpl implements ExtendedSqlPoolBlobAuditingPolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExtendedSqlPoolBlobAuditingPoliciesImpl.class);

    private final ExtendedSqlPoolBlobAuditingPoliciesClient innerClient;

    private final com.azure.resourcemanager.synapse.SynapseManager serviceManager;

    public ExtendedSqlPoolBlobAuditingPoliciesImpl(
        ExtendedSqlPoolBlobAuditingPoliciesClient innerClient,
        com.azure.resourcemanager.synapse.SynapseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ExtendedSqlPoolBlobAuditingPolicy get(String resourceGroupName, String workspaceName, String sqlPoolName) {
        ExtendedSqlPoolBlobAuditingPolicyInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, sqlPoolName);
        if (inner != null) {
            return new ExtendedSqlPoolBlobAuditingPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExtendedSqlPoolBlobAuditingPolicy> getWithResponse(
        String resourceGroupName, String workspaceName, String sqlPoolName, Context context) {
        Response<ExtendedSqlPoolBlobAuditingPolicyInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, sqlPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExtendedSqlPoolBlobAuditingPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ExtendedSqlPoolBlobAuditingPolicy> listBySqlPool(
        String resourceGroupName, String workspaceName, String sqlPoolName) {
        PagedIterable<ExtendedSqlPoolBlobAuditingPolicyInner> inner =
            this.serviceClient().listBySqlPool(resourceGroupName, workspaceName, sqlPoolName);
        return Utils.mapPage(inner, inner1 -> new ExtendedSqlPoolBlobAuditingPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtendedSqlPoolBlobAuditingPolicy> listBySqlPool(
        String resourceGroupName, String workspaceName, String sqlPoolName, Context context) {
        PagedIterable<ExtendedSqlPoolBlobAuditingPolicyInner> inner =
            this.serviceClient().listBySqlPool(resourceGroupName, workspaceName, sqlPoolName, context);
        return Utils.mapPage(inner, inner1 -> new ExtendedSqlPoolBlobAuditingPolicyImpl(inner1, this.manager()));
    }

    public ExtendedSqlPoolBlobAuditingPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String sqlPoolName = Utils.getValueFromIdByName(id, "sqlPools");
        if (sqlPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlPools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, sqlPoolName, Context.NONE).getValue();
    }

    public Response<ExtendedSqlPoolBlobAuditingPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String sqlPoolName = Utils.getValueFromIdByName(id, "sqlPools");
        if (sqlPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sqlPools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, sqlPoolName, context);
    }

    private ExtendedSqlPoolBlobAuditingPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.synapse.SynapseManager manager() {
        return this.serviceManager;
    }

    public ExtendedSqlPoolBlobAuditingPolicyImpl define() {
        return new ExtendedSqlPoolBlobAuditingPolicyImpl(this.manager());
    }
}
