// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.synapse.models.SqlPoolVulnerabilityAssessmentRuleBaselineItem;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A Sql pool vulnerability assessment rule baseline. */
@JsonFlatten
@Fluent
public class SqlPoolVulnerabilityAssessmentRuleBaselineInner extends ProxyResource {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(SqlPoolVulnerabilityAssessmentRuleBaselineInner.class);

    /*
     * The rule baseline result
     */
    @JsonProperty(value = "properties.baselineResults")
    private List<SqlPoolVulnerabilityAssessmentRuleBaselineItem> baselineResults;

    /**
     * Get the baselineResults property: The rule baseline result.
     *
     * @return the baselineResults value.
     */
    public List<SqlPoolVulnerabilityAssessmentRuleBaselineItem> baselineResults() {
        return this.baselineResults;
    }

    /**
     * Set the baselineResults property: The rule baseline result.
     *
     * @param baselineResults the baselineResults value to set.
     * @return the SqlPoolVulnerabilityAssessmentRuleBaselineInner object itself.
     */
    public SqlPoolVulnerabilityAssessmentRuleBaselineInner withBaselineResults(
        List<SqlPoolVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        this.baselineResults = baselineResults;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (baselineResults() != null) {
            baselineResults().forEach(e -> e.validate());
        }
    }
}
