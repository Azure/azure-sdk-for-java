// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The Sql pool usages.
 */
@Immutable
public final class SqlPoolUsageInner implements JsonSerializable<SqlPoolUsageInner> {
    /*
     * The name of the usage metric.
     */
    private String name;

    /*
     * The name of the resource.
     */
    private String resourceName;

    /*
     * The usage metric display name.
     */
    private String displayName;

    /*
     * The current value of the usage metric.
     */
    private Double currentValue;

    /*
     * The current limit of the usage metric.
     */
    private Double limit;

    /*
     * The units of the usage metric.
     */
    private String unit;

    /*
     * The next reset time for the usage metric (ISO8601 format).
     */
    private OffsetDateTime nextResetTime;

    /**
     * Creates an instance of SqlPoolUsageInner class.
     */
    public SqlPoolUsageInner() {
    }

    /**
     * Get the name property: The name of the usage metric.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the resourceName property: The name of the resource.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Get the displayName property: The usage metric display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the currentValue property: The current value of the usage metric.
     * 
     * @return the currentValue value.
     */
    public Double currentValue() {
        return this.currentValue;
    }

    /**
     * Get the limit property: The current limit of the usage metric.
     * 
     * @return the limit value.
     */
    public Double limit() {
        return this.limit;
    }

    /**
     * Get the unit property: The units of the usage metric.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Get the nextResetTime property: The next reset time for the usage metric (ISO8601 format).
     * 
     * @return the nextResetTime value.
     */
    public OffsetDateTime nextResetTime() {
        return this.nextResetTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlPoolUsageInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlPoolUsageInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlPoolUsageInner.
     */
    public static SqlPoolUsageInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlPoolUsageInner deserializedSqlPoolUsageInner = new SqlPoolUsageInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSqlPoolUsageInner.name = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedSqlPoolUsageInner.resourceName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedSqlPoolUsageInner.displayName = reader.getString();
                } else if ("currentValue".equals(fieldName)) {
                    deserializedSqlPoolUsageInner.currentValue = reader.getNullable(JsonReader::getDouble);
                } else if ("limit".equals(fieldName)) {
                    deserializedSqlPoolUsageInner.limit = reader.getNullable(JsonReader::getDouble);
                } else if ("unit".equals(fieldName)) {
                    deserializedSqlPoolUsageInner.unit = reader.getString();
                } else if ("nextResetTime".equals(fieldName)) {
                    deserializedSqlPoolUsageInner.nextResetTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlPoolUsageInner;
        });
    }
}
