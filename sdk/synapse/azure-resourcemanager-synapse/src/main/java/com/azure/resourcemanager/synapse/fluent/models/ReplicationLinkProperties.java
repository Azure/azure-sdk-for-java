// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.models.ReplicationRole;
import com.azure.resourcemanager.synapse.models.ReplicationState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Represents the properties of a Sql pool replication link.
 */
@Immutable
public final class ReplicationLinkProperties implements JsonSerializable<ReplicationLinkProperties> {
    /*
     * Legacy value indicating whether termination is allowed. Currently always returns true.
     */
    private Boolean isTerminationAllowed;

    /*
     * Replication mode of this replication link.
     */
    private String replicationMode;

    /*
     * The name of the workspace hosting the partner Sql pool.
     */
    private String partnerServer;

    /*
     * The name of the partner Sql pool.
     */
    private String partnerDatabase;

    /*
     * The Azure Region of the partner Sql pool.
     */
    private String partnerLocation;

    /*
     * The role of the Sql pool in the replication link.
     */
    private ReplicationRole role;

    /*
     * The role of the partner Sql pool in the replication link.
     */
    private ReplicationRole partnerRole;

    /*
     * The start time for the replication link.
     */
    private OffsetDateTime startTime;

    /*
     * The percentage of seeding complete for the replication link.
     */
    private Integer percentComplete;

    /*
     * The replication state for the replication link.
     */
    private ReplicationState replicationState;

    /**
     * Creates an instance of ReplicationLinkProperties class.
     */
    public ReplicationLinkProperties() {
    }

    /**
     * Get the isTerminationAllowed property: Legacy value indicating whether termination is allowed. Currently always
     * returns true.
     * 
     * @return the isTerminationAllowed value.
     */
    public Boolean isTerminationAllowed() {
        return this.isTerminationAllowed;
    }

    /**
     * Get the replicationMode property: Replication mode of this replication link.
     * 
     * @return the replicationMode value.
     */
    public String replicationMode() {
        return this.replicationMode;
    }

    /**
     * Get the partnerServer property: The name of the workspace hosting the partner Sql pool.
     * 
     * @return the partnerServer value.
     */
    public String partnerServer() {
        return this.partnerServer;
    }

    /**
     * Get the partnerDatabase property: The name of the partner Sql pool.
     * 
     * @return the partnerDatabase value.
     */
    public String partnerDatabase() {
        return this.partnerDatabase;
    }

    /**
     * Get the partnerLocation property: The Azure Region of the partner Sql pool.
     * 
     * @return the partnerLocation value.
     */
    public String partnerLocation() {
        return this.partnerLocation;
    }

    /**
     * Get the role property: The role of the Sql pool in the replication link.
     * 
     * @return the role value.
     */
    public ReplicationRole role() {
        return this.role;
    }

    /**
     * Get the partnerRole property: The role of the partner Sql pool in the replication link.
     * 
     * @return the partnerRole value.
     */
    public ReplicationRole partnerRole() {
        return this.partnerRole;
    }

    /**
     * Get the startTime property: The start time for the replication link.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the percentComplete property: The percentage of seeding complete for the replication link.
     * 
     * @return the percentComplete value.
     */
    public Integer percentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the replicationState property: The replication state for the replication link.
     * 
     * @return the replicationState value.
     */
    public ReplicationState replicationState() {
        return this.replicationState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationLinkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationLinkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationLinkProperties.
     */
    public static ReplicationLinkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationLinkProperties deserializedReplicationLinkProperties = new ReplicationLinkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isTerminationAllowed".equals(fieldName)) {
                    deserializedReplicationLinkProperties.isTerminationAllowed
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("replicationMode".equals(fieldName)) {
                    deserializedReplicationLinkProperties.replicationMode = reader.getString();
                } else if ("partnerServer".equals(fieldName)) {
                    deserializedReplicationLinkProperties.partnerServer = reader.getString();
                } else if ("partnerDatabase".equals(fieldName)) {
                    deserializedReplicationLinkProperties.partnerDatabase = reader.getString();
                } else if ("partnerLocation".equals(fieldName)) {
                    deserializedReplicationLinkProperties.partnerLocation = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedReplicationLinkProperties.role = ReplicationRole.fromString(reader.getString());
                } else if ("partnerRole".equals(fieldName)) {
                    deserializedReplicationLinkProperties.partnerRole = ReplicationRole.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedReplicationLinkProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedReplicationLinkProperties.percentComplete = reader.getNullable(JsonReader::getInt);
                } else if ("replicationState".equals(fieldName)) {
                    deserializedReplicationLinkProperties.replicationState
                        = ReplicationState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationLinkProperties;
        });
    }
}
