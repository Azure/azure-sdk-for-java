// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.models.ColumnDataType;
import java.io.IOException;

/**
 * Sql pool column properties.
 */
@Fluent
public final class SqlPoolColumnProperties implements JsonSerializable<SqlPoolColumnProperties> {
    /*
     * The column data type.
     */
    private ColumnDataType columnType;

    /*
     * Indicates whether column value is computed or not
     */
    private Boolean isComputed;

    /**
     * Creates an instance of SqlPoolColumnProperties class.
     */
    public SqlPoolColumnProperties() {
    }

    /**
     * Get the columnType property: The column data type.
     * 
     * @return the columnType value.
     */
    public ColumnDataType columnType() {
        return this.columnType;
    }

    /**
     * Set the columnType property: The column data type.
     * 
     * @param columnType the columnType value to set.
     * @return the SqlPoolColumnProperties object itself.
     */
    public SqlPoolColumnProperties withColumnType(ColumnDataType columnType) {
        this.columnType = columnType;
        return this;
    }

    /**
     * Get the isComputed property: Indicates whether column value is computed or not.
     * 
     * @return the isComputed value.
     */
    public Boolean isComputed() {
        return this.isComputed;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("columnType", this.columnType == null ? null : this.columnType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlPoolColumnProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlPoolColumnProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlPoolColumnProperties.
     */
    public static SqlPoolColumnProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlPoolColumnProperties deserializedSqlPoolColumnProperties = new SqlPoolColumnProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("columnType".equals(fieldName)) {
                    deserializedSqlPoolColumnProperties.columnType = ColumnDataType.fromString(reader.getString());
                } else if ("isComputed".equals(fieldName)) {
                    deserializedSqlPoolColumnProperties.isComputed = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlPoolColumnProperties;
        });
    }
}
