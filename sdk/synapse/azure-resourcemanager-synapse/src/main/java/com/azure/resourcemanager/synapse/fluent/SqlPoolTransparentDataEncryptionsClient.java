// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.synapse.fluent.models.TransparentDataEncryptionInner;
import com.azure.resourcemanager.synapse.models.TransparentDataEncryptionName;

/**
 * An instance of this class provides access to all the operations defined in SqlPoolTransparentDataEncryptionsClient.
 */
public interface SqlPoolTransparentDataEncryptionsClient {
    /**
     * Get a SQL pool's transparent data encryption configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL pool's transparent data encryption configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TransparentDataEncryptionInner get(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        TransparentDataEncryptionName transparentDataEncryptionName);

    /**
     * Get a SQL pool's transparent data encryption configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL pool's transparent data encryption configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TransparentDataEncryptionInner> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        TransparentDataEncryptionName transparentDataEncryptionName,
        Context context);

    /**
     * Creates or updates a Sql pool's transparent data encryption configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @param parameters The required parameters for creating or updating transparent data encryption.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Sql pool transparent data encryption configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TransparentDataEncryptionInner createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        TransparentDataEncryptionName transparentDataEncryptionName,
        TransparentDataEncryptionInner parameters);

    /**
     * Creates or updates a Sql pool's transparent data encryption configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @param parameters The required parameters for creating or updating transparent data encryption.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Sql pool transparent data encryption configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TransparentDataEncryptionInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String workspaceName,
        String sqlPoolName,
        TransparentDataEncryptionName transparentDataEncryptionName,
        TransparentDataEncryptionInner parameters,
        Context context);

    /**
     * Get list of SQL pool's transparent data encryption configurations.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SQL pool's transparent data encryption configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TransparentDataEncryptionInner> list(
        String resourceGroupName, String workspaceName, String sqlPoolName);

    /**
     * Get list of SQL pool's transparent data encryption configurations.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SQL pool's transparent data encryption configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TransparentDataEncryptionInner> list(
        String resourceGroupName, String workspaceName, String sqlPoolName, Context context);
}
