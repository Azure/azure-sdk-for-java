// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.synapse.models.EncryptionDetails;
import com.azure.resourcemanager.synapse.models.ManagedVirtualNetworkSettings;
import com.azure.resourcemanager.synapse.models.PurviewConfiguration;
import com.azure.resourcemanager.synapse.models.WorkspacePublicNetworkAccess;
import com.azure.resourcemanager.synapse.models.WorkspaceRepositoryConfiguration;
import java.io.IOException;

/**
 * Workspace patch properties.
 */
@Fluent
public final class WorkspacePatchProperties implements JsonSerializable<WorkspacePatchProperties> {
    /*
     * SQL administrator login password
     */
    private String sqlAdministratorLoginPassword;

    /*
     * Managed Virtual Network Settings
     */
    private ManagedVirtualNetworkSettings managedVirtualNetworkSettings;

    /*
     * Git integration settings
     */
    private WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration;

    /*
     * Purview Configuration
     */
    private PurviewConfiguration purviewConfiguration;

    /*
     * Resource provisioning state
     */
    private String provisioningState;

    /*
     * The encryption details of the workspace
     */
    private EncryptionDetails encryption;

    /*
     * Enable or Disable public network access to workspace
     */
    private WorkspacePublicNetworkAccess publicNetworkAccess;

    /**
     * Creates an instance of WorkspacePatchProperties class.
     */
    public WorkspacePatchProperties() {
    }

    /**
     * Get the sqlAdministratorLoginPassword property: SQL administrator login password.
     * 
     * @return the sqlAdministratorLoginPassword value.
     */
    public String sqlAdministratorLoginPassword() {
        return this.sqlAdministratorLoginPassword;
    }

    /**
     * Set the sqlAdministratorLoginPassword property: SQL administrator login password.
     * 
     * @param sqlAdministratorLoginPassword the sqlAdministratorLoginPassword value to set.
     * @return the WorkspacePatchProperties object itself.
     */
    public WorkspacePatchProperties withSqlAdministratorLoginPassword(String sqlAdministratorLoginPassword) {
        this.sqlAdministratorLoginPassword = sqlAdministratorLoginPassword;
        return this;
    }

    /**
     * Get the managedVirtualNetworkSettings property: Managed Virtual Network Settings.
     * 
     * @return the managedVirtualNetworkSettings value.
     */
    public ManagedVirtualNetworkSettings managedVirtualNetworkSettings() {
        return this.managedVirtualNetworkSettings;
    }

    /**
     * Set the managedVirtualNetworkSettings property: Managed Virtual Network Settings.
     * 
     * @param managedVirtualNetworkSettings the managedVirtualNetworkSettings value to set.
     * @return the WorkspacePatchProperties object itself.
     */
    public WorkspacePatchProperties
        withManagedVirtualNetworkSettings(ManagedVirtualNetworkSettings managedVirtualNetworkSettings) {
        this.managedVirtualNetworkSettings = managedVirtualNetworkSettings;
        return this;
    }

    /**
     * Get the workspaceRepositoryConfiguration property: Git integration settings.
     * 
     * @return the workspaceRepositoryConfiguration value.
     */
    public WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration() {
        return this.workspaceRepositoryConfiguration;
    }

    /**
     * Set the workspaceRepositoryConfiguration property: Git integration settings.
     * 
     * @param workspaceRepositoryConfiguration the workspaceRepositoryConfiguration value to set.
     * @return the WorkspacePatchProperties object itself.
     */
    public WorkspacePatchProperties
        withWorkspaceRepositoryConfiguration(WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration) {
        this.workspaceRepositoryConfiguration = workspaceRepositoryConfiguration;
        return this;
    }

    /**
     * Get the purviewConfiguration property: Purview Configuration.
     * 
     * @return the purviewConfiguration value.
     */
    public PurviewConfiguration purviewConfiguration() {
        return this.purviewConfiguration;
    }

    /**
     * Set the purviewConfiguration property: Purview Configuration.
     * 
     * @param purviewConfiguration the purviewConfiguration value to set.
     * @return the WorkspacePatchProperties object itself.
     */
    public WorkspacePatchProperties withPurviewConfiguration(PurviewConfiguration purviewConfiguration) {
        this.purviewConfiguration = purviewConfiguration;
        return this;
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the encryption property: The encryption details of the workspace.
     * 
     * @return the encryption value.
     */
    public EncryptionDetails encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption details of the workspace.
     * 
     * @param encryption the encryption value to set.
     * @return the WorkspacePatchProperties object itself.
     */
    public WorkspacePatchProperties withEncryption(EncryptionDetails encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Enable or Disable public network access to workspace.
     * 
     * @return the publicNetworkAccess value.
     */
    public WorkspacePublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Enable or Disable public network access to workspace.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the WorkspacePatchProperties object itself.
     */
    public WorkspacePatchProperties withPublicNetworkAccess(WorkspacePublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedVirtualNetworkSettings() != null) {
            managedVirtualNetworkSettings().validate();
        }
        if (workspaceRepositoryConfiguration() != null) {
            workspaceRepositoryConfiguration().validate();
        }
        if (purviewConfiguration() != null) {
            purviewConfiguration().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sqlAdministratorLoginPassword", this.sqlAdministratorLoginPassword);
        jsonWriter.writeJsonField("managedVirtualNetworkSettings", this.managedVirtualNetworkSettings);
        jsonWriter.writeJsonField("workspaceRepositoryConfiguration", this.workspaceRepositoryConfiguration);
        jsonWriter.writeJsonField("purviewConfiguration", this.purviewConfiguration);
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspacePatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspacePatchProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspacePatchProperties.
     */
    public static WorkspacePatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspacePatchProperties deserializedWorkspacePatchProperties = new WorkspacePatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sqlAdministratorLoginPassword".equals(fieldName)) {
                    deserializedWorkspacePatchProperties.sqlAdministratorLoginPassword = reader.getString();
                } else if ("managedVirtualNetworkSettings".equals(fieldName)) {
                    deserializedWorkspacePatchProperties.managedVirtualNetworkSettings
                        = ManagedVirtualNetworkSettings.fromJson(reader);
                } else if ("workspaceRepositoryConfiguration".equals(fieldName)) {
                    deserializedWorkspacePatchProperties.workspaceRepositoryConfiguration
                        = WorkspaceRepositoryConfiguration.fromJson(reader);
                } else if ("purviewConfiguration".equals(fieldName)) {
                    deserializedWorkspacePatchProperties.purviewConfiguration = PurviewConfiguration.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkspacePatchProperties.provisioningState = reader.getString();
                } else if ("encryption".equals(fieldName)) {
                    deserializedWorkspacePatchProperties.encryption = EncryptionDetails.fromJson(reader);
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedWorkspacePatchProperties.publicNetworkAccess
                        = WorkspacePublicNetworkAccess.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspacePatchProperties;
        });
    }
}
