// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.synapse.fluent.models.BigDataPoolResourceInfoInner;
import com.azure.resourcemanager.synapse.models.BigDataPoolPatchInfo;

/** An instance of this class provides access to all the operations defined in BigDataPoolsClient. */
public interface BigDataPoolsClient {
    /**
     * Get a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDataPoolResourceInfoInner get(String resourceGroupName, String workspaceName, String bigDataPoolName);

    /**
     * Get a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BigDataPoolResourceInfoInner> getWithResponse(
        String resourceGroupName, String workspaceName, String bigDataPoolName, Context context);

    /**
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param bigDataPoolPatchInfo The updated Big Data pool properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDataPoolResourceInfoInner update(
        String resourceGroupName,
        String workspaceName,
        String bigDataPoolName,
        BigDataPoolPatchInfo bigDataPoolPatchInfo);

    /**
     * Patch a Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param bigDataPoolPatchInfo The updated Big Data pool properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BigDataPoolResourceInfoInner> updateWithResponse(
        String resourceGroupName,
        String workspaceName,
        String bigDataPoolName,
        BigDataPoolPatchInfo bigDataPoolPatchInfo,
        Context context);

    /**
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner> beginCreateOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String bigDataPoolName,
        BigDataPoolResourceInfoInner bigDataPoolInfo,
        Boolean force);

    /**
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<BigDataPoolResourceInfoInner>, BigDataPoolResourceInfoInner> beginCreateOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String bigDataPoolName,
        BigDataPoolResourceInfoInner bigDataPoolInfo,
        Boolean force,
        Context context);

    /**
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDataPoolResourceInfoInner createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String bigDataPoolName,
        BigDataPoolResourceInfoInner bigDataPoolInfo,
        Boolean force);

    /**
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param bigDataPoolInfo The Big Data pool to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDataPoolResourceInfoInner createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String bigDataPoolName,
        BigDataPoolResourceInfoInner bigDataPoolInfo);

    /**
     * Create a new Big Data pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param force Whether to stop any running jobs in the Big Data pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Big Data pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDataPoolResourceInfoInner createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String bigDataPoolName,
        BigDataPoolResourceInfoInner bigDataPoolInfo,
        Boolean force,
        Context context);

    /**
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Object>, Object> beginDelete(
        String resourceGroupName, String workspaceName, String bigDataPoolName);

    /**
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Object>, Object> beginDelete(
        String resourceGroupName, String workspaceName, String bigDataPoolName, Context context);

    /**
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object delete(String resourceGroupName, String workspaceName, String bigDataPoolName);

    /**
     * Delete a Big Data pool from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object delete(String resourceGroupName, String workspaceName, String bigDataPoolName, Context context);

    /**
     * List Big Data pools in a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Big Data pool information.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BigDataPoolResourceInfoInner> listByWorkspace(String resourceGroupName, String workspaceName);

    /**
     * List Big Data pools in a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Big Data pool information.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BigDataPoolResourceInfoInner> listByWorkspace(
        String resourceGroupName, String workspaceName, Context context);
}
