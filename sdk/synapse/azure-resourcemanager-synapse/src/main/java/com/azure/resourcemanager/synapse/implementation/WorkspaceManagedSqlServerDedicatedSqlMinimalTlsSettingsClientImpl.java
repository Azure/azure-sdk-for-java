// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.synapse.fluent.WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsClient;
import com.azure.resourcemanager.synapse.fluent.models.DedicatedSQLminimalTlsSettingsInner;
import com.azure.resourcemanager.synapse.models.DedicatedSQLminimalTlsSettingsListResult;
import com.azure.resourcemanager.synapse.models.DedicatedSqlMinimalTlsSettingsName;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsClient.
 */
public final class WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsClientImpl
    implements WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsClient {
    /** The proxy service used to perform REST calls. */
    private final WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsService service;

    /** The service client containing this operation class. */
    private final SynapseManagementClientImpl client;

    /**
     * Initializes an instance of WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsClientImpl(SynapseManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * SynapseManagementClientWorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettings to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SynapseManagementCli")
    public interface WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces"
                + "/{workspaceName}/dedicatedSQLminimalTlsSettings/{dedicatedSQLminimalTlsSettingsName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workspaceName") String workspaceName,
            @PathParam("dedicatedSQLminimalTlsSettingsName")
                DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
            @BodyParam("application/json") DedicatedSQLminimalTlsSettingsInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces"
                + "/{workspaceName}/dedicatedSQLminimalTlsSettings/{dedicatedSQLminimalTlsSettingsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DedicatedSQLminimalTlsSettingsInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workspaceName") String workspaceName,
            @PathParam("dedicatedSQLminimalTlsSettingsName") String dedicatedSQLminimalTlsSettingsName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces"
                + "/{workspaceName}/dedicatedSQLminimalTlsSettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DedicatedSQLminimalTlsSettingsListResult>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workspaceName") String workspaceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DedicatedSQLminimalTlsSettingsListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated Sql Minimal Tls Settings Info along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (dedicatedSQLminimalTlsSettingsName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter dedicatedSQLminimalTlsSettingsName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2021-06-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workspaceName,
                            dedicatedSQLminimalTlsSettingsName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated Sql Minimal Tls Settings Info along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (dedicatedSQLminimalTlsSettingsName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter dedicatedSQLminimalTlsSettingsName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2021-06-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                workspaceName,
                dedicatedSQLminimalTlsSettingsName,
                parameters,
                accept,
                context);
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of dedicated Sql Minimal Tls Settings Info.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DedicatedSQLminimalTlsSettingsInner>, DedicatedSQLminimalTlsSettingsInner>
        beginUpdateAsync(
            String resourceGroupName,
            String workspaceName,
            DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
            DedicatedSQLminimalTlsSettingsInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters);
        return this
            .client
            .<DedicatedSQLminimalTlsSettingsInner, DedicatedSQLminimalTlsSettingsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DedicatedSQLminimalTlsSettingsInner.class,
                DedicatedSQLminimalTlsSettingsInner.class,
                this.client.getContext());
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of dedicated Sql Minimal Tls Settings Info.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DedicatedSQLminimalTlsSettingsInner>, DedicatedSQLminimalTlsSettingsInner>
        beginUpdateAsync(
            String resourceGroupName,
            String workspaceName,
            DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
            DedicatedSQLminimalTlsSettingsInner parameters,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters, context);
        return this
            .client
            .<DedicatedSQLminimalTlsSettingsInner, DedicatedSQLminimalTlsSettingsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DedicatedSQLminimalTlsSettingsInner.class,
                DedicatedSQLminimalTlsSettingsInner.class,
                context);
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of dedicated Sql Minimal Tls Settings Info.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DedicatedSQLminimalTlsSettingsInner>, DedicatedSQLminimalTlsSettingsInner> beginUpdate(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters) {
        return this
            .beginUpdateAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters)
            .getSyncPoller();
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of dedicated Sql Minimal Tls Settings Info.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DedicatedSQLminimalTlsSettingsInner>, DedicatedSQLminimalTlsSettingsInner> beginUpdate(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters,
        Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated Sql Minimal Tls Settings Info on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DedicatedSQLminimalTlsSettingsInner> updateAsync(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters) {
        return beginUpdateAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated Sql Minimal Tls Settings Info on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DedicatedSQLminimalTlsSettingsInner> updateAsync(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters,
        Context context) {
        return beginUpdateAsync(
                resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated Sql Minimal Tls Settings Info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedSQLminimalTlsSettingsInner update(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters) {
        return updateAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters).block();
    }

    /**
     * Update server's tls settings.
     *
     * <p>Update workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param parameters minimal tls settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated Sql Minimal Tls Settings Info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedSQLminimalTlsSettingsInner update(
        String resourceGroupName,
        String workspaceName,
        DedicatedSqlMinimalTlsSettingsName dedicatedSQLminimalTlsSettingsName,
        DedicatedSQLminimalTlsSettingsInner parameters,
        Context context) {
        return updateAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, parameters, context)
            .block();
    }

    /**
     * Get server's minimal tls settings.
     *
     * <p>Get workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workspace managed sql server's minimal tls settings along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DedicatedSQLminimalTlsSettingsInner>> getWithResponseAsync(
        String resourceGroupName, String workspaceName, String dedicatedSQLminimalTlsSettingsName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (dedicatedSQLminimalTlsSettingsName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter dedicatedSQLminimalTlsSettingsName is required and cannot be null."));
        }
        final String apiVersion = "2021-06-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workspaceName,
                            dedicatedSQLminimalTlsSettingsName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get server's minimal tls settings.
     *
     * <p>Get workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workspace managed sql server's minimal tls settings along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DedicatedSQLminimalTlsSettingsInner>> getWithResponseAsync(
        String resourceGroupName, String workspaceName, String dedicatedSQLminimalTlsSettingsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (dedicatedSQLminimalTlsSettingsName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter dedicatedSQLminimalTlsSettingsName is required and cannot be null."));
        }
        final String apiVersion = "2021-06-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                workspaceName,
                dedicatedSQLminimalTlsSettingsName,
                accept,
                context);
    }

    /**
     * Get server's minimal tls settings.
     *
     * <p>Get workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workspace managed sql server's minimal tls settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DedicatedSQLminimalTlsSettingsInner> getAsync(
        String resourceGroupName, String workspaceName, String dedicatedSQLminimalTlsSettingsName) {
        return getWithResponseAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get server's minimal tls settings.
     *
     * <p>Get workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workspace managed sql server's minimal tls settings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DedicatedSQLminimalTlsSettingsInner> getWithResponse(
        String resourceGroupName, String workspaceName, String dedicatedSQLminimalTlsSettingsName, Context context) {
        return getWithResponseAsync(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, context)
            .block();
    }

    /**
     * Get server's minimal tls settings.
     *
     * <p>Get workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dedicatedSQLminimalTlsSettingsName The name of the dedicated sql minimal tls settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workspace managed sql server's minimal tls settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedSQLminimalTlsSettingsInner get(
        String resourceGroupName, String workspaceName, String dedicatedSQLminimalTlsSettingsName) {
        return getWithResponse(resourceGroupName, workspaceName, dedicatedSQLminimalTlsSettingsName, Context.NONE)
            .getValue();
    }

    /**
     * List workspace server's minimal tls settings.
     *
     * <p>List workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DedicatedSQLminimalTlsSettingsInner>> listSinglePageAsync(
        String resourceGroupName, String workspaceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        final String apiVersion = "2021-06-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workspaceName,
                            accept,
                            context))
            .<PagedResponse<DedicatedSQLminimalTlsSettingsInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List workspace server's minimal tls settings.
     *
     * <p>List workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DedicatedSQLminimalTlsSettingsInner>> listSinglePageAsync(
        String resourceGroupName, String workspaceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        final String apiVersion = "2021-06-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                workspaceName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List workspace server's minimal tls settings.
     *
     * <p>List workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DedicatedSQLminimalTlsSettingsInner> listAsync(String resourceGroupName, String workspaceName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, workspaceName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List workspace server's minimal tls settings.
     *
     * <p>List workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DedicatedSQLminimalTlsSettingsInner> listAsync(
        String resourceGroupName, String workspaceName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, workspaceName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List workspace server's minimal tls settings.
     *
     * <p>List workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DedicatedSQLminimalTlsSettingsInner> list(String resourceGroupName, String workspaceName) {
        return new PagedIterable<>(listAsync(resourceGroupName, workspaceName));
    }

    /**
     * List workspace server's minimal tls settings.
     *
     * <p>List workspace managed sql server's minimal tls settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DedicatedSQLminimalTlsSettingsInner> list(
        String resourceGroupName, String workspaceName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, workspaceName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DedicatedSQLminimalTlsSettingsInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DedicatedSQLminimalTlsSettingsInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the server's dedicated sql minimal tls settings along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DedicatedSQLminimalTlsSettingsInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
