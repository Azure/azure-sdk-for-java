// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dynamic Executor Allocation Properties.
 */
@Fluent
public final class DynamicExecutorAllocation implements JsonSerializable<DynamicExecutorAllocation> {
    /*
     * Indicates whether Dynamic Executor Allocation is enabled or not.
     */
    private Boolean enabled;

    /*
     * The minimum number of executors alloted
     */
    private Integer minExecutors;

    /*
     * The maximum number of executors alloted
     */
    private Integer maxExecutors;

    /**
     * Creates an instance of DynamicExecutorAllocation class.
     */
    public DynamicExecutorAllocation() {
    }

    /**
     * Get the enabled property: Indicates whether Dynamic Executor Allocation is enabled or not.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates whether Dynamic Executor Allocation is enabled or not.
     * 
     * @param enabled the enabled value to set.
     * @return the DynamicExecutorAllocation object itself.
     */
    public DynamicExecutorAllocation withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the minExecutors property: The minimum number of executors alloted.
     * 
     * @return the minExecutors value.
     */
    public Integer minExecutors() {
        return this.minExecutors;
    }

    /**
     * Set the minExecutors property: The minimum number of executors alloted.
     * 
     * @param minExecutors the minExecutors value to set.
     * @return the DynamicExecutorAllocation object itself.
     */
    public DynamicExecutorAllocation withMinExecutors(Integer minExecutors) {
        this.minExecutors = minExecutors;
        return this;
    }

    /**
     * Get the maxExecutors property: The maximum number of executors alloted.
     * 
     * @return the maxExecutors value.
     */
    public Integer maxExecutors() {
        return this.maxExecutors;
    }

    /**
     * Set the maxExecutors property: The maximum number of executors alloted.
     * 
     * @param maxExecutors the maxExecutors value to set.
     * @return the DynamicExecutorAllocation object itself.
     */
    public DynamicExecutorAllocation withMaxExecutors(Integer maxExecutors) {
        this.maxExecutors = maxExecutors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeNumberField("minExecutors", this.minExecutors);
        jsonWriter.writeNumberField("maxExecutors", this.maxExecutors);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DynamicExecutorAllocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DynamicExecutorAllocation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DynamicExecutorAllocation.
     */
    public static DynamicExecutorAllocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DynamicExecutorAllocation deserializedDynamicExecutorAllocation = new DynamicExecutorAllocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedDynamicExecutorAllocation.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("minExecutors".equals(fieldName)) {
                    deserializedDynamicExecutorAllocation.minExecutors = reader.getNullable(JsonReader::getInt);
                } else if ("maxExecutors".equals(fieldName)) {
                    deserializedDynamicExecutorAllocation.maxExecutors = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDynamicExecutorAllocation;
        });
    }
}
