// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.development;

import com.azure.analytics.synapse.development.implementation.PipelineRunsImpl;
import com.azure.analytics.synapse.development.implementation.models.ActivityRunsQueryResponse;
import com.azure.analytics.synapse.development.implementation.models.CloudErrorException;
import com.azure.analytics.synapse.development.implementation.models.PipelineRun;
import com.azure.analytics.synapse.development.implementation.models.PipelineRunsQueryResponse;
import com.azure.analytics.synapse.development.implementation.models.RunFilterParameters;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous DevelopmentClient type.
 */
@ServiceClient(builder = DevelopmentClientBuilder.class)
public final class PipelineRunAsyncClient {
    private PipelineRunsImpl serviceClient;

    /**
     * Initializes an instance of PipelineRuns client.
     */
    PipelineRunAsyncClient(PipelineRunsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Query pipeline runs in the workspace based on input filter conditions.
     * 
     * @param filterParameters Query parameters for listing runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list pipeline runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PipelineRunsQueryResponse>> queryPipelineRunsByWorkspaceWithResponse(RunFilterParameters filterParameters) {
        return this.serviceClient.queryPipelineRunsByWorkspaceWithResponseAsync(filterParameters);
    }

    /**
     * Query pipeline runs in the workspace based on input filter conditions.
     * 
     * @param filterParameters Query parameters for listing runs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list pipeline runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PipelineRunsQueryResponse>> queryPipelineRunsByWorkspaceWithResponse(RunFilterParameters filterParameters, Context context) {
        return this.serviceClient.queryPipelineRunsByWorkspaceWithResponseAsync(filterParameters, context);
    }

    /**
     * Query pipeline runs in the workspace based on input filter conditions.
     * 
     * @param filterParameters Query parameters for listing runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list pipeline runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PipelineRunsQueryResponse> queryPipelineRunsByWorkspace(RunFilterParameters filterParameters) {
        return this.serviceClient.queryPipelineRunsByWorkspaceAsync(filterParameters);
    }

    /**
     * Query pipeline runs in the workspace based on input filter conditions.
     * 
     * @param filterParameters Query parameters for listing runs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list pipeline runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PipelineRunsQueryResponse> queryPipelineRunsByWorkspace(RunFilterParameters filterParameters, Context context) {
        return this.serviceClient.queryPipelineRunsByWorkspaceAsync(filterParameters, context);
    }

    /**
     * Get a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pipeline run by its run ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PipelineRun>> getPipelineRunWithResponse(String runId) {
        return this.serviceClient.getPipelineRunWithResponseAsync(runId);
    }

    /**
     * Get a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pipeline run by its run ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PipelineRun>> getPipelineRunWithResponse(String runId, Context context) {
        return this.serviceClient.getPipelineRunWithResponseAsync(runId, context);
    }

    /**
     * Get a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pipeline run by its run ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PipelineRun> getPipelineRun(String runId) {
        return this.serviceClient.getPipelineRunAsync(runId);
    }

    /**
     * Get a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pipeline run by its run ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PipelineRun> getPipelineRun(String runId, Context context) {
        return this.serviceClient.getPipelineRunAsync(runId, context);
    }

    /**
     * Query activity runs based on input filter conditions.
     * 
     * @param pipelineName The pipeline name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Query parameters for listing runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list activity runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ActivityRunsQueryResponse>> queryActivityRunsWithResponse(String pipelineName, String runId, RunFilterParameters filterParameters) {
        return this.serviceClient.queryActivityRunsWithResponseAsync(pipelineName, runId, filterParameters);
    }

    /**
     * Query activity runs based on input filter conditions.
     * 
     * @param pipelineName The pipeline name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Query parameters for listing runs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list activity runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ActivityRunsQueryResponse>> queryActivityRunsWithResponse(String pipelineName, String runId, RunFilterParameters filterParameters, Context context) {
        return this.serviceClient.queryActivityRunsWithResponseAsync(pipelineName, runId, filterParameters, context);
    }

    /**
     * Query activity runs based on input filter conditions.
     * 
     * @param pipelineName The pipeline name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Query parameters for listing runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list activity runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ActivityRunsQueryResponse> queryActivityRuns(String pipelineName, String runId, RunFilterParameters filterParameters) {
        return this.serviceClient.queryActivityRunsAsync(pipelineName, runId, filterParameters);
    }

    /**
     * Query activity runs based on input filter conditions.
     * 
     * @param pipelineName The pipeline name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Query parameters for listing runs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list activity runs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ActivityRunsQueryResponse> queryActivityRuns(String pipelineName, String runId, RunFilterParameters filterParameters, Context context) {
        return this.serviceClient.queryActivityRunsAsync(pipelineName, runId, filterParameters, context);
    }

    /**
     * Cancel a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @param isRecursive If true, cancel all the Child pipelines that are triggered by the current pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelPipelineRunWithResponse(String runId, Boolean isRecursive) {
        return this.serviceClient.cancelPipelineRunWithResponseAsync(runId, isRecursive);
    }

    /**
     * Cancel a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @param isRecursive If true, cancel all the Child pipelines that are triggered by the current pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelPipelineRunWithResponse(String runId, Boolean isRecursive, Context context) {
        return this.serviceClient.cancelPipelineRunWithResponseAsync(runId, isRecursive, context);
    }

    /**
     * Cancel a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @param isRecursive If true, cancel all the Child pipelines that are triggered by the current pipeline.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelPipelineRun(String runId, Boolean isRecursive) {
        return this.serviceClient.cancelPipelineRunAsync(runId, isRecursive);
    }

    /**
     * Cancel a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @param isRecursive If true, cancel all the Child pipelines that are triggered by the current pipeline.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelPipelineRun(String runId, Boolean isRecursive, Context context) {
        return this.serviceClient.cancelPipelineRunAsync(runId, isRecursive, context);
    }

    /**
     * Cancel a pipeline run by its run ID.
     * 
     * @param runId The pipeline run identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelPipelineRun(String runId) {
        return this.serviceClient.cancelPipelineRunAsync(runId);
    }
}
