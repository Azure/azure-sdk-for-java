// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.managedprivateendpoints.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a managed private endpoint.
 */
@Fluent
public final class ManagedPrivateEndpointProperties implements JsonSerializable<ManagedPrivateEndpointProperties> {
    /*
     * The name of managed private endpoint
     */
    @Generated
    private String name;

    /*
     * The ARM resource ID of the resource to which the managed private endpoint is created
     */
    @Generated
    private String privateLinkResourceId;

    /*
     * The groupId to which the managed private endpoint is created
     */
    @Generated
    private String groupId;

    /*
     * The managed private endpoint provisioning state
     */
    @Generated
    private String provisioningState;

    /*
     * The managed private endpoint connection state
     */
    @Generated
    private ManagedPrivateEndpointConnectionState connectionState;

    /*
     * Denotes whether the managed private endpoint is reserved
     */
    @Generated
    private Boolean isReserved;

    /*
     * List of fully qualified domain names
     */
    @Generated
    private List<String> fqdns;

    /*
     * Denotes whether the managed private endpoint is compliant
     */
    @Generated
    private Boolean isCompliant;

    /**
     * Creates an instance of ManagedPrivateEndpointProperties class.
     */
    @Generated
    public ManagedPrivateEndpointProperties() {
    }

    /**
     * Get the name property: The name of managed private endpoint.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of managed private endpoint.
     * 
     * @param name the name value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    @Generated
    public ManagedPrivateEndpointProperties setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the privateLinkResourceId property: The ARM resource ID of the resource to which the managed private endpoint
     * is created.
     * 
     * @return the privateLinkResourceId value.
     */
    @Generated
    public String getPrivateLinkResourceId() {
        return this.privateLinkResourceId;
    }

    /**
     * Set the privateLinkResourceId property: The ARM resource ID of the resource to which the managed private endpoint
     * is created.
     * 
     * @param privateLinkResourceId the privateLinkResourceId value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    @Generated
    public ManagedPrivateEndpointProperties setPrivateLinkResourceId(String privateLinkResourceId) {
        this.privateLinkResourceId = privateLinkResourceId;
        return this;
    }

    /**
     * Get the groupId property: The groupId to which the managed private endpoint is created.
     * 
     * @return the groupId value.
     */
    @Generated
    public String getGroupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: The groupId to which the managed private endpoint is created.
     * 
     * @param groupId the groupId value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    @Generated
    public ManagedPrivateEndpointProperties setGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the provisioningState property: The managed private endpoint provisioning state.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the connectionState property: The managed private endpoint connection state.
     * 
     * @return the connectionState value.
     */
    @Generated
    public ManagedPrivateEndpointConnectionState getConnectionState() {
        return this.connectionState;
    }

    /**
     * Set the connectionState property: The managed private endpoint connection state.
     * 
     * @param connectionState the connectionState value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    @Generated
    public ManagedPrivateEndpointProperties setConnectionState(ManagedPrivateEndpointConnectionState connectionState) {
        this.connectionState = connectionState;
        return this;
    }

    /**
     * Get the isReserved property: Denotes whether the managed private endpoint is reserved.
     * 
     * @return the isReserved value.
     */
    @Generated
    public Boolean isReserved() {
        return this.isReserved;
    }

    /**
     * Get the fqdns property: List of fully qualified domain names.
     * 
     * @return the fqdns value.
     */
    @Generated
    public List<String> getFqdns() {
        return this.fqdns;
    }

    /**
     * Set the fqdns property: List of fully qualified domain names.
     * 
     * @param fqdns the fqdns value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    @Generated
    public ManagedPrivateEndpointProperties setFqdns(List<String> fqdns) {
        this.fqdns = fqdns;
        return this;
    }

    /**
     * Get the isCompliant property: Denotes whether the managed private endpoint is compliant.
     * 
     * @return the isCompliant value.
     */
    @Generated
    public Boolean isCompliant() {
        return this.isCompliant;
    }

    /**
     * Set the isCompliant property: Denotes whether the managed private endpoint is compliant.
     * 
     * @param isCompliant the isCompliant value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    @Generated
    public ManagedPrivateEndpointProperties setIsCompliant(Boolean isCompliant) {
        this.isCompliant = isCompliant;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("privateLinkResourceId", this.privateLinkResourceId);
        jsonWriter.writeStringField("groupId", this.groupId);
        jsonWriter.writeJsonField("connectionState", this.connectionState);
        jsonWriter.writeArrayField("fqdns", this.fqdns, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isCompliant", this.isCompliant);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedPrivateEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedPrivateEndpointProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedPrivateEndpointProperties.
     */
    @Generated
    public static ManagedPrivateEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedPrivateEndpointProperties deserializedManagedPrivateEndpointProperties
                = new ManagedPrivateEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.name = reader.getString();
                } else if ("privateLinkResourceId".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.privateLinkResourceId = reader.getString();
                } else if ("groupId".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.groupId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.provisioningState = reader.getString();
                } else if ("connectionState".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.connectionState
                        = ManagedPrivateEndpointConnectionState.fromJson(reader);
                } else if ("isReserved".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.isReserved
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("fqdns".equals(fieldName)) {
                    List<String> fqdns = reader.readArray(reader1 -> reader1.getString());
                    deserializedManagedPrivateEndpointProperties.fqdns = fqdns;
                } else if ("isCompliant".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.isCompliant
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedPrivateEndpointProperties;
        });
    }
}
