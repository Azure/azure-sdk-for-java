// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.spark.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The SparkSession model.
 */
@Fluent
public final class SparkSession implements JsonSerializable<SparkSession> {
    /*
     * The livyInfo property.
     */
    private SparkSessionState livyInfo;

    /*
     * The name property.
     */
    private String name;

    /*
     * The workspaceName property.
     */
    private String workspaceName;

    /*
     * The sparkPoolName property.
     */
    private String sparkPoolName;

    /*
     * The submitterName property.
     */
    private String submitterName;

    /*
     * The submitterId property.
     */
    private String submitterId;

    /*
     * The artifactId property.
     */
    private String artifactId;

    /*
     * The job type.
     */
    private SparkJobType jobType;

    /*
     * The result property.
     */
    private SparkSessionResultType result;

    /*
     * The schedulerInfo property.
     */
    private SparkScheduler scheduler;

    /*
     * The pluginInfo property.
     */
    private SparkServicePlugin plugin;

    /*
     * The errorInfo property.
     */
    private List<SparkServiceError> errors;

    /*
     * Dictionary of <string>
     */
    private Map<String, String> tags;

    /*
     * The id property.
     */
    private int id;

    /*
     * The appId property.
     */
    private String appId;

    /*
     * Dictionary of <string>
     */
    private Map<String, String> appInfo;

    /*
     * The session state.
     */
    private LivyStates state;

    /*
     * The log property.
     */
    private List<String> logLines;

    /**
     * Creates an instance of SparkSession class.
     */
    public SparkSession() {
    }

    /**
     * Get the livyInfo property: The livyInfo property.
     * 
     * @return the livyInfo value.
     */
    public SparkSessionState getLivyInfo() {
        return this.livyInfo;
    }

    /**
     * Set the livyInfo property: The livyInfo property.
     * 
     * @param livyInfo the livyInfo value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setLivyInfo(SparkSessionState livyInfo) {
        this.livyInfo = livyInfo;
        return this;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name property.
     * 
     * @param name the name value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the workspaceName property: The workspaceName property.
     * 
     * @return the workspaceName value.
     */
    public String getWorkspaceName() {
        return this.workspaceName;
    }

    /**
     * Set the workspaceName property: The workspaceName property.
     * 
     * @param workspaceName the workspaceName value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setWorkspaceName(String workspaceName) {
        this.workspaceName = workspaceName;
        return this;
    }

    /**
     * Get the sparkPoolName property: The sparkPoolName property.
     * 
     * @return the sparkPoolName value.
     */
    public String getSparkPoolName() {
        return this.sparkPoolName;
    }

    /**
     * Set the sparkPoolName property: The sparkPoolName property.
     * 
     * @param sparkPoolName the sparkPoolName value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setSparkPoolName(String sparkPoolName) {
        this.sparkPoolName = sparkPoolName;
        return this;
    }

    /**
     * Get the submitterName property: The submitterName property.
     * 
     * @return the submitterName value.
     */
    public String getSubmitterName() {
        return this.submitterName;
    }

    /**
     * Set the submitterName property: The submitterName property.
     * 
     * @param submitterName the submitterName value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setSubmitterName(String submitterName) {
        this.submitterName = submitterName;
        return this;
    }

    /**
     * Get the submitterId property: The submitterId property.
     * 
     * @return the submitterId value.
     */
    public String getSubmitterId() {
        return this.submitterId;
    }

    /**
     * Set the submitterId property: The submitterId property.
     * 
     * @param submitterId the submitterId value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setSubmitterId(String submitterId) {
        this.submitterId = submitterId;
        return this;
    }

    /**
     * Get the artifactId property: The artifactId property.
     * 
     * @return the artifactId value.
     */
    public String getArtifactId() {
        return this.artifactId;
    }

    /**
     * Set the artifactId property: The artifactId property.
     * 
     * @param artifactId the artifactId value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setArtifactId(String artifactId) {
        this.artifactId = artifactId;
        return this;
    }

    /**
     * Get the jobType property: The job type.
     * 
     * @return the jobType value.
     */
    public SparkJobType getJobType() {
        return this.jobType;
    }

    /**
     * Set the jobType property: The job type.
     * 
     * @param jobType the jobType value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setJobType(SparkJobType jobType) {
        this.jobType = jobType;
        return this;
    }

    /**
     * Get the result property: The result property.
     * 
     * @return the result value.
     */
    public SparkSessionResultType getResult() {
        return this.result;
    }

    /**
     * Set the result property: The result property.
     * 
     * @param result the result value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setResult(SparkSessionResultType result) {
        this.result = result;
        return this;
    }

    /**
     * Get the scheduler property: The schedulerInfo property.
     * 
     * @return the scheduler value.
     */
    public SparkScheduler getScheduler() {
        return this.scheduler;
    }

    /**
     * Set the scheduler property: The schedulerInfo property.
     * 
     * @param scheduler the scheduler value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setScheduler(SparkScheduler scheduler) {
        this.scheduler = scheduler;
        return this;
    }

    /**
     * Get the plugin property: The pluginInfo property.
     * 
     * @return the plugin value.
     */
    public SparkServicePlugin getPlugin() {
        return this.plugin;
    }

    /**
     * Set the plugin property: The pluginInfo property.
     * 
     * @param plugin the plugin value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setPlugin(SparkServicePlugin plugin) {
        this.plugin = plugin;
        return this;
    }

    /**
     * Get the errors property: The errorInfo property.
     * 
     * @return the errors value.
     */
    public List<SparkServiceError> getErrors() {
        return this.errors;
    }

    /**
     * Set the errors property: The errorInfo property.
     * 
     * @param errors the errors value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setErrors(List<SparkServiceError> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the tags property: Dictionary of &lt;string&gt;.
     * 
     * @return the tags value.
     */
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Dictionary of &lt;string&gt;.
     * 
     * @param tags the tags value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    public int getId() {
        return this.id;
    }

    /**
     * Set the id property: The id property.
     * 
     * @param id the id value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setId(int id) {
        this.id = id;
        return this;
    }

    /**
     * Get the appId property: The appId property.
     * 
     * @return the appId value.
     */
    public String getAppId() {
        return this.appId;
    }

    /**
     * Set the appId property: The appId property.
     * 
     * @param appId the appId value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Get the appInfo property: Dictionary of &lt;string&gt;.
     * 
     * @return the appInfo value.
     */
    public Map<String, String> getAppInfo() {
        return this.appInfo;
    }

    /**
     * Set the appInfo property: Dictionary of &lt;string&gt;.
     * 
     * @param appInfo the appInfo value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setAppInfo(Map<String, String> appInfo) {
        this.appInfo = appInfo;
        return this;
    }

    /**
     * Get the state property: The session state.
     * 
     * @return the state value.
     */
    public LivyStates getState() {
        return this.state;
    }

    /**
     * Set the state property: The session state.
     * 
     * @param state the state value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setState(LivyStates state) {
        this.state = state;
        return this;
    }

    /**
     * Get the logLines property: The log property.
     * 
     * @return the logLines value.
     */
    public List<String> getLogLines() {
        return this.logLines;
    }

    /**
     * Set the logLines property: The log property.
     * 
     * @param logLines the logLines value to set.
     * @return the SparkSession object itself.
     */
    public SparkSession setLogLines(List<String> logLines) {
        this.logLines = logLines;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("id", this.id);
        jsonWriter.writeJsonField("livyInfo", this.livyInfo);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("workspaceName", this.workspaceName);
        jsonWriter.writeStringField("sparkPoolName", this.sparkPoolName);
        jsonWriter.writeStringField("submitterName", this.submitterName);
        jsonWriter.writeStringField("submitterId", this.submitterId);
        jsonWriter.writeStringField("artifactId", this.artifactId);
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeStringField("result", this.result == null ? null : this.result.toString());
        jsonWriter.writeJsonField("schedulerInfo", this.scheduler);
        jsonWriter.writeJsonField("pluginInfo", this.plugin);
        jsonWriter.writeArrayField("errorInfo", this.errors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("appId", this.appId);
        jsonWriter.writeMapField("appInfo", this.appInfo, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeArrayField("log", this.logLines, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkSession from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkSession if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SparkSession.
     */
    public static SparkSession fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkSession deserializedSparkSession = new SparkSession();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSparkSession.id = reader.getInt();
                } else if ("livyInfo".equals(fieldName)) {
                    deserializedSparkSession.livyInfo = SparkSessionState.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedSparkSession.name = reader.getString();
                } else if ("workspaceName".equals(fieldName)) {
                    deserializedSparkSession.workspaceName = reader.getString();
                } else if ("sparkPoolName".equals(fieldName)) {
                    deserializedSparkSession.sparkPoolName = reader.getString();
                } else if ("submitterName".equals(fieldName)) {
                    deserializedSparkSession.submitterName = reader.getString();
                } else if ("submitterId".equals(fieldName)) {
                    deserializedSparkSession.submitterId = reader.getString();
                } else if ("artifactId".equals(fieldName)) {
                    deserializedSparkSession.artifactId = reader.getString();
                } else if ("jobType".equals(fieldName)) {
                    deserializedSparkSession.jobType = SparkJobType.fromString(reader.getString());
                } else if ("result".equals(fieldName)) {
                    deserializedSparkSession.result = SparkSessionResultType.fromString(reader.getString());
                } else if ("schedulerInfo".equals(fieldName)) {
                    deserializedSparkSession.scheduler = SparkScheduler.fromJson(reader);
                } else if ("pluginInfo".equals(fieldName)) {
                    deserializedSparkSession.plugin = SparkServicePlugin.fromJson(reader);
                } else if ("errorInfo".equals(fieldName)) {
                    List<SparkServiceError> errors = reader.readArray(reader1 -> SparkServiceError.fromJson(reader1));
                    deserializedSparkSession.errors = errors;
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedSparkSession.tags = tags;
                } else if ("appId".equals(fieldName)) {
                    deserializedSparkSession.appId = reader.getString();
                } else if ("appInfo".equals(fieldName)) {
                    Map<String, String> appInfo = reader.readMap(reader1 -> reader1.getString());
                    deserializedSparkSession.appInfo = appInfo;
                } else if ("state".equals(fieldName)) {
                    deserializedSparkSession.state = LivyStates.fromString(reader.getString());
                } else if ("log".equals(fieldName)) {
                    List<String> logLines = reader.readArray(reader1 -> reader1.getString());
                    deserializedSparkSession.logLines = logLines;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkSession;
        });
    }
}
