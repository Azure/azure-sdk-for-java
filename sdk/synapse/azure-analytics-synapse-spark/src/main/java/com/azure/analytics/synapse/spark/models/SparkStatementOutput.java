// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.spark.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SparkStatementOutput model.
 */
@Fluent
public final class SparkStatementOutput implements JsonSerializable<SparkStatementOutput> {
    /*
     * The status property.
     */
    private String status;

    /*
     * The execution_count property.
     */
    private int executionCount;

    /*
     * Any object
     */
    private Object data;

    /*
     * The ename property.
     */
    private String errorName;

    /*
     * The evalue property.
     */
    private String errorValue;

    /*
     * The traceback property.
     */
    private List<String> traceback;

    /**
     * Creates an instance of SparkStatementOutput class.
     */
    public SparkStatementOutput() {
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     * 
     * @param status the status value to set.
     * @return the SparkStatementOutput object itself.
     */
    public SparkStatementOutput setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the executionCount property: The execution_count property.
     * 
     * @return the executionCount value.
     */
    public int getExecutionCount() {
        return this.executionCount;
    }

    /**
     * Set the executionCount property: The execution_count property.
     * 
     * @param executionCount the executionCount value to set.
     * @return the SparkStatementOutput object itself.
     */
    public SparkStatementOutput setExecutionCount(int executionCount) {
        this.executionCount = executionCount;
        return this;
    }

    /**
     * Get the data property: Any object.
     * 
     * @return the data value.
     */
    public Object getData() {
        return this.data;
    }

    /**
     * Set the data property: Any object.
     * 
     * @param data the data value to set.
     * @return the SparkStatementOutput object itself.
     */
    public SparkStatementOutput setData(Object data) {
        this.data = data;
        return this;
    }

    /**
     * Get the errorName property: The ename property.
     * 
     * @return the errorName value.
     */
    public String getErrorName() {
        return this.errorName;
    }

    /**
     * Set the errorName property: The ename property.
     * 
     * @param errorName the errorName value to set.
     * @return the SparkStatementOutput object itself.
     */
    public SparkStatementOutput setErrorName(String errorName) {
        this.errorName = errorName;
        return this;
    }

    /**
     * Get the errorValue property: The evalue property.
     * 
     * @return the errorValue value.
     */
    public String getErrorValue() {
        return this.errorValue;
    }

    /**
     * Set the errorValue property: The evalue property.
     * 
     * @param errorValue the errorValue value to set.
     * @return the SparkStatementOutput object itself.
     */
    public SparkStatementOutput setErrorValue(String errorValue) {
        this.errorValue = errorValue;
        return this;
    }

    /**
     * Get the traceback property: The traceback property.
     * 
     * @return the traceback value.
     */
    public List<String> getTraceback() {
        return this.traceback;
    }

    /**
     * Set the traceback property: The traceback property.
     * 
     * @param traceback the traceback value to set.
     * @return the SparkStatementOutput object itself.
     */
    public SparkStatementOutput setTraceback(List<String> traceback) {
        this.traceback = traceback;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("execution_count", this.executionCount);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeUntypedField("data", this.data);
        jsonWriter.writeStringField("ename", this.errorName);
        jsonWriter.writeStringField("evalue", this.errorValue);
        jsonWriter.writeArrayField("traceback", this.traceback, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkStatementOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkStatementOutput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SparkStatementOutput.
     */
    public static SparkStatementOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkStatementOutput deserializedSparkStatementOutput = new SparkStatementOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("execution_count".equals(fieldName)) {
                    deserializedSparkStatementOutput.executionCount = reader.getInt();
                } else if ("status".equals(fieldName)) {
                    deserializedSparkStatementOutput.status = reader.getString();
                } else if ("data".equals(fieldName)) {
                    deserializedSparkStatementOutput.data = reader.readUntyped();
                } else if ("ename".equals(fieldName)) {
                    deserializedSparkStatementOutput.errorName = reader.getString();
                } else if ("evalue".equals(fieldName)) {
                    deserializedSparkStatementOutput.errorValue = reader.getString();
                } else if ("traceback".equals(fieldName)) {
                    List<String> traceback = reader.readArray(reader1 -> reader1.getString());
                    deserializedSparkStatementOutput.traceback = traceback;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkStatementOutput;
        });
    }
}
