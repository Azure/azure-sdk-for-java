// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.spark.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SparkSessionCollection model.
 */
@Fluent
public final class SparkSessionCollection implements JsonSerializable<SparkSessionCollection> {
    /*
     * The from property.
     */
    @Generated
    private int from;

    /*
     * The total property.
     */
    @Generated
    private int total;

    /*
     * The sessions property.
     */
    @Generated
    private List<SparkSession> sessions;

    /**
     * Creates an instance of SparkSessionCollection class.
     */
    @Generated
    public SparkSessionCollection() {
    }

    /**
     * Get the from property: The from property.
     * 
     * @return the from value.
     */
    @Generated
    public int getFrom() {
        return this.from;
    }

    /**
     * Set the from property: The from property.
     * 
     * @param from the from value to set.
     * @return the SparkSessionCollection object itself.
     */
    @Generated
    public SparkSessionCollection setFrom(int from) {
        this.from = from;
        return this;
    }

    /**
     * Get the total property: The total property.
     * 
     * @return the total value.
     */
    @Generated
    public int getTotal() {
        return this.total;
    }

    /**
     * Set the total property: The total property.
     * 
     * @param total the total value to set.
     * @return the SparkSessionCollection object itself.
     */
    @Generated
    public SparkSessionCollection setTotal(int total) {
        this.total = total;
        return this;
    }

    /**
     * Get the sessions property: The sessions property.
     * 
     * @return the sessions value.
     */
    @Generated
    public List<SparkSession> getSessions() {
        return this.sessions;
    }

    /**
     * Set the sessions property: The sessions property.
     * 
     * @param sessions the sessions value to set.
     * @return the SparkSessionCollection object itself.
     */
    @Generated
    public SparkSessionCollection setSessions(List<SparkSession> sessions) {
        this.sessions = sessions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("from", this.from);
        jsonWriter.writeIntField("total", this.total);
        jsonWriter.writeArrayField("sessions", this.sessions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkSessionCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkSessionCollection if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SparkSessionCollection.
     */
    @Generated
    public static SparkSessionCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkSessionCollection deserializedSparkSessionCollection = new SparkSessionCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("from".equals(fieldName)) {
                    deserializedSparkSessionCollection.from = reader.getInt();
                } else if ("total".equals(fieldName)) {
                    deserializedSparkSessionCollection.total = reader.getInt();
                } else if ("sessions".equals(fieldName)) {
                    List<SparkSession> sessions = reader.readArray(reader1 -> SparkSession.fromJson(reader1));
                    deserializedSparkSessionCollection.sessions = sessions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkSessionCollection;
        });
    }
}
