// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.spark.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SparkStatement model.
 */
@Fluent
public final class SparkStatement implements JsonSerializable<SparkStatement> {
    /*
     * The id property.
     */
    private int id;

    /*
     * The code property.
     */
    private String code;

    /*
     * The state property.
     */
    private LivyStatementStates state;

    /*
     * The output property.
     */
    private SparkStatementOutput output;

    /**
     * Creates an instance of SparkStatement class.
     */
    public SparkStatement() {
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    public int getId() {
        return this.id;
    }

    /**
     * Set the id property: The id property.
     * 
     * @param id the id value to set.
     * @return the SparkStatement object itself.
     */
    public SparkStatement setId(int id) {
        this.id = id;
        return this;
    }

    /**
     * Get the code property: The code property.
     * 
     * @return the code value.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Set the code property: The code property.
     * 
     * @param code the code value to set.
     * @return the SparkStatement object itself.
     */
    public SparkStatement setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the state property: The state property.
     * 
     * @return the state value.
     */
    public LivyStatementStates getState() {
        return this.state;
    }

    /**
     * Set the state property: The state property.
     * 
     * @param state the state value to set.
     * @return the SparkStatement object itself.
     */
    public SparkStatement setState(LivyStatementStates state) {
        this.state = state;
        return this;
    }

    /**
     * Get the output property: The output property.
     * 
     * @return the output value.
     */
    public SparkStatementOutput getOutput() {
        return this.output;
    }

    /**
     * Set the output property: The output property.
     * 
     * @param output the output value to set.
     * @return the SparkStatement object itself.
     */
    public SparkStatement setOutput(SparkStatementOutput output) {
        this.output = output;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("id", this.id);
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeJsonField("output", this.output);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkStatement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkStatement if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SparkStatement.
     */
    public static SparkStatement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkStatement deserializedSparkStatement = new SparkStatement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSparkStatement.id = reader.getInt();
                } else if ("code".equals(fieldName)) {
                    deserializedSparkStatement.code = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedSparkStatement.state = LivyStatementStates.fromString(reader.getString());
                } else if ("output".equals(fieldName)) {
                    deserializedSparkStatement.output = SparkStatementOutput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkStatement;
        });
    }
}
