// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.spark.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SparkServiceError model.
 */
@Fluent
public final class SparkServiceError implements JsonSerializable<SparkServiceError> {
    /*
     * The message property.
     */
    private String message;

    /*
     * The errorCode property.
     */
    private String errorCode;

    /*
     * The source property.
     */
    private SparkErrorSource source;

    /**
     * Creates an instance of SparkServiceError class.
     */
    public SparkServiceError() {
    }

    /**
     * Get the message property: The message property.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Set the message property: The message property.
     * 
     * @param message the message value to set.
     * @return the SparkServiceError object itself.
     */
    public SparkServiceError setMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the errorCode property: The errorCode property.
     * 
     * @return the errorCode value.
     */
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * Set the errorCode property: The errorCode property.
     * 
     * @param errorCode the errorCode value to set.
     * @return the SparkServiceError object itself.
     */
    public SparkServiceError setErrorCode(String errorCode) {
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Get the source property: The source property.
     * 
     * @return the source value.
     */
    public SparkErrorSource getSource() {
        return this.source;
    }

    /**
     * Set the source property: The source property.
     * 
     * @param source the source value to set.
     * @return the SparkServiceError object itself.
     */
    public SparkServiceError setSource(SparkErrorSource source) {
        this.source = source;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkServiceError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkServiceError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SparkServiceError.
     */
    public static SparkServiceError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkServiceError deserializedSparkServiceError = new SparkServiceError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    deserializedSparkServiceError.message = reader.getString();
                } else if ("errorCode".equals(fieldName)) {
                    deserializedSparkServiceError.errorCode = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedSparkServiceError.source = SparkErrorSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkServiceError;
        });
    }
}
