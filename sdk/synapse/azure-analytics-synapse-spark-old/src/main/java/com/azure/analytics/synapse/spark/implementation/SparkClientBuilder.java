// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.spark.implementation;

import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;

/**
 * A builder for creating a new instance of the SparkClient type.
 */
@ServiceClientBuilder(serviceClients = {SparkClientImpl.class})
public final class SparkClientBuilder {
    /*
     * The workspace development endpoint, for example
     * https://myworkspace.dev.azuresynapse.net.
     */
    private String endpoint;

    /**
     * Sets The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
     * 
     * @param endpoint the endpoint value.
     * @return the SparkClientBuilder.
     */
    public SparkClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Valid api-version for the request.
     */
    private String livyApiVersion;

    /**
     * Sets Valid api-version for the request.
     * 
     * @param livyApiVersion the livyApiVersion value.
     * @return the SparkClientBuilder.
     */
    public SparkClientBuilder livyApiVersion(String livyApiVersion) {
        this.livyApiVersion = livyApiVersion;
        return this;
    }

    /*
     * Name of the spark pool.
     */
    private String sparkPoolName;

    /**
     * Sets Name of the spark pool.
     * 
     * @param sparkPoolName the sparkPoolName value.
     * @return the SparkClientBuilder.
     */
    public SparkClientBuilder sparkPoolName(String sparkPoolName) {
        this.sparkPoolName = sparkPoolName;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     * 
     * @param pipeline the pipeline value.
     * @return the SparkClientBuilder.
     */
    public SparkClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /**
     * Builds an instance of SparkClientImpl with the provided parameters.
     * 
     * @return an instance of SparkClientImpl.
     */
    public SparkClientImpl buildClient() {
        if (livyApiVersion == null) {
            this.livyApiVersion = "2019-11-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build();
        }
        SparkClientImpl client = new SparkClientImpl(pipeline);
        client.setEndpoint(this.endpoint);
        client.setLivyApiVersion(this.livyApiVersion);
        client.setSparkPoolName(this.sparkPoolName);
        return client;
    }
}
