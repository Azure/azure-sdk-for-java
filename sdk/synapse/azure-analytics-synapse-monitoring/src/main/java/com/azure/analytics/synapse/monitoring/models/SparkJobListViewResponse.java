// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.synapse.monitoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SparkJobListViewResponse model.
 */
@Fluent
public final class SparkJobListViewResponse implements JsonSerializable<SparkJobListViewResponse> {
    /*
     * The nJobs property.
     */
    private Integer nJobs;

    /*
     * The sparkJobs property.
     */
    private List<SparkJob> sparkJobs;

    /**
     * Creates an instance of SparkJobListViewResponse class.
     */
    public SparkJobListViewResponse() {
    }

    /**
     * Get the nJobs property: The nJobs property.
     * 
     * @return the nJobs value.
     */
    public Integer getNJobs() {
        return this.nJobs;
    }

    /**
     * Set the nJobs property: The nJobs property.
     * 
     * @param nJobs the nJobs value to set.
     * @return the SparkJobListViewResponse object itself.
     */
    public SparkJobListViewResponse setNJobs(Integer nJobs) {
        this.nJobs = nJobs;
        return this;
    }

    /**
     * Get the sparkJobs property: The sparkJobs property.
     * 
     * @return the sparkJobs value.
     */
    public List<SparkJob> getSparkJobs() {
        return this.sparkJobs;
    }

    /**
     * Set the sparkJobs property: The sparkJobs property.
     * 
     * @param sparkJobs the sparkJobs value to set.
     * @return the SparkJobListViewResponse object itself.
     */
    public SparkJobListViewResponse setSparkJobs(List<SparkJob> sparkJobs) {
        this.sparkJobs = sparkJobs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("nJobs", this.nJobs);
        jsonWriter.writeArrayField("sparkJobs", this.sparkJobs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SparkJobListViewResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SparkJobListViewResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SparkJobListViewResponse.
     */
    public static SparkJobListViewResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SparkJobListViewResponse deserializedSparkJobListViewResponse = new SparkJobListViewResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nJobs".equals(fieldName)) {
                    deserializedSparkJobListViewResponse.nJobs = reader.getNullable(JsonReader::getInt);
                } else if ("sparkJobs".equals(fieldName)) {
                    List<SparkJob> sparkJobs = reader.readArray(reader1 -> SparkJob.fromJson(reader1));
                    deserializedSparkJobListViewResponse.sparkJobs = sparkJobs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSparkJobListViewResponse;
        });
    }
}
