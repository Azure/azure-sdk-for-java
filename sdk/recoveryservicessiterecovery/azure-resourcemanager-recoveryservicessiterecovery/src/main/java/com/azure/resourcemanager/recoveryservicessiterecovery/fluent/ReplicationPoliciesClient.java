// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.PolicyInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.CreatePolicyInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdatePolicyInput;

/**
 * An instance of this class provides access to all the operations defined in ReplicationPoliciesClient.
 */
public interface ReplicationPoliciesClient {
    /**
     * Gets the list of replication policies.
     * 
     * Lists the replication policies for a vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protection Profile Collection details as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PolicyInner> list(String resourceGroupName, String resourceName);

    /**
     * Gets the list of replication policies.
     * 
     * Lists the replication policies for a vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protection Profile Collection details as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PolicyInner> list(String resourceGroupName, String resourceName, Context context);

    /**
     * Gets the requested policy.
     * 
     * Gets the details of a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a replication policy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PolicyInner> getWithResponse(String resourceGroupName, String resourceName, String policyName,
        Context context);

    /**
     * Gets the requested policy.
     * 
     * Gets the details of a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a replication policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PolicyInner get(String resourceGroupName, String resourceName, String policyName);

    /**
     * Creates the policy.
     * 
     * The operation to create a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @param input Create policy input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of protection profile details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PolicyInner>, PolicyInner> beginCreate(String resourceGroupName, String resourceName,
        String policyName, CreatePolicyInput input);

    /**
     * Creates the policy.
     * 
     * The operation to create a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @param input Create policy input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of protection profile details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PolicyInner>, PolicyInner> beginCreate(String resourceGroupName, String resourceName,
        String policyName, CreatePolicyInput input, Context context);

    /**
     * Creates the policy.
     * 
     * The operation to create a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @param input Create policy input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protection profile details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PolicyInner create(String resourceGroupName, String resourceName, String policyName, CreatePolicyInput input);

    /**
     * Creates the policy.
     * 
     * The operation to create a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @param input Create policy input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protection profile details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PolicyInner create(String resourceGroupName, String resourceName, String policyName, CreatePolicyInput input,
        Context context);

    /**
     * Delete the policy.
     * 
     * The operation to delete a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName, String policyName);

    /**
     * Delete the policy.
     * 
     * The operation to delete a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName, String policyName,
        Context context);

    /**
     * Delete the policy.
     * 
     * The operation to delete a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String resourceName, String policyName);

    /**
     * Delete the policy.
     * 
     * The operation to delete a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Replication policy name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String resourceName, String policyName, Context context);

    /**
     * Updates the policy.
     * 
     * The operation to update a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Policy Id.
     * @param input Update Policy Input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of protection profile details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PolicyInner>, PolicyInner> beginUpdate(String resourceGroupName, String resourceName,
        String policyName, UpdatePolicyInput input);

    /**
     * Updates the policy.
     * 
     * The operation to update a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Policy Id.
     * @param input Update Policy Input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of protection profile details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PolicyInner>, PolicyInner> beginUpdate(String resourceGroupName, String resourceName,
        String policyName, UpdatePolicyInput input, Context context);

    /**
     * Updates the policy.
     * 
     * The operation to update a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Policy Id.
     * @param input Update Policy Input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protection profile details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PolicyInner update(String resourceGroupName, String resourceName, String policyName, UpdatePolicyInput input);

    /**
     * Updates the policy.
     * 
     * The operation to update a replication policy.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param policyName Policy Id.
     * @param input Update Policy Input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protection profile details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PolicyInner update(String resourceGroupName, String resourceName, String policyName, UpdatePolicyInput input,
        Context context);
}
