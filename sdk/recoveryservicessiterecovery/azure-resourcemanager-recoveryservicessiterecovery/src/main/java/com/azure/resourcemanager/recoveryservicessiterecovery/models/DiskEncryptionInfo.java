// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Recovery disk encryption info (BEK and KEK).
 */
@Fluent
public final class DiskEncryptionInfo implements JsonSerializable<DiskEncryptionInfo> {
    /*
     * The recovery KeyVault reference for secret.
     */
    private DiskEncryptionKeyInfo diskEncryptionKeyInfo;

    /*
     * The recovery KeyVault reference for key.
     */
    private KeyEncryptionKeyInfo keyEncryptionKeyInfo;

    /**
     * Creates an instance of DiskEncryptionInfo class.
     */
    public DiskEncryptionInfo() {
    }

    /**
     * Get the diskEncryptionKeyInfo property: The recovery KeyVault reference for secret.
     * 
     * @return the diskEncryptionKeyInfo value.
     */
    public DiskEncryptionKeyInfo diskEncryptionKeyInfo() {
        return this.diskEncryptionKeyInfo;
    }

    /**
     * Set the diskEncryptionKeyInfo property: The recovery KeyVault reference for secret.
     * 
     * @param diskEncryptionKeyInfo the diskEncryptionKeyInfo value to set.
     * @return the DiskEncryptionInfo object itself.
     */
    public DiskEncryptionInfo withDiskEncryptionKeyInfo(DiskEncryptionKeyInfo diskEncryptionKeyInfo) {
        this.diskEncryptionKeyInfo = diskEncryptionKeyInfo;
        return this;
    }

    /**
     * Get the keyEncryptionKeyInfo property: The recovery KeyVault reference for key.
     * 
     * @return the keyEncryptionKeyInfo value.
     */
    public KeyEncryptionKeyInfo keyEncryptionKeyInfo() {
        return this.keyEncryptionKeyInfo;
    }

    /**
     * Set the keyEncryptionKeyInfo property: The recovery KeyVault reference for key.
     * 
     * @param keyEncryptionKeyInfo the keyEncryptionKeyInfo value to set.
     * @return the DiskEncryptionInfo object itself.
     */
    public DiskEncryptionInfo withKeyEncryptionKeyInfo(KeyEncryptionKeyInfo keyEncryptionKeyInfo) {
        this.keyEncryptionKeyInfo = keyEncryptionKeyInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskEncryptionKeyInfo() != null) {
            diskEncryptionKeyInfo().validate();
        }
        if (keyEncryptionKeyInfo() != null) {
            keyEncryptionKeyInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("diskEncryptionKeyInfo", this.diskEncryptionKeyInfo);
        jsonWriter.writeJsonField("keyEncryptionKeyInfo", this.keyEncryptionKeyInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskEncryptionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskEncryptionInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskEncryptionInfo.
     */
    public static DiskEncryptionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskEncryptionInfo deserializedDiskEncryptionInfo = new DiskEncryptionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskEncryptionKeyInfo".equals(fieldName)) {
                    deserializedDiskEncryptionInfo.diskEncryptionKeyInfo = DiskEncryptionKeyInfo.fromJson(reader);
                } else if ("keyEncryptionKeyInfo".equals(fieldName)) {
                    deserializedDiskEncryptionInfo.keyEncryptionKeyInfo = KeyEncryptionKeyInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskEncryptionInfo;
        });
    }
}
