// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Policy update properties.
 */
@Fluent
public final class UpdatePolicyInputProperties implements JsonSerializable<UpdatePolicyInputProperties> {
    /*
     * The ReplicationProviderSettings.
     */
    private PolicyProviderSpecificInput replicationProviderSettings;

    /**
     * Creates an instance of UpdatePolicyInputProperties class.
     */
    public UpdatePolicyInputProperties() {
    }

    /**
     * Get the replicationProviderSettings property: The ReplicationProviderSettings.
     * 
     * @return the replicationProviderSettings value.
     */
    public PolicyProviderSpecificInput replicationProviderSettings() {
        return this.replicationProviderSettings;
    }

    /**
     * Set the replicationProviderSettings property: The ReplicationProviderSettings.
     * 
     * @param replicationProviderSettings the replicationProviderSettings value to set.
     * @return the UpdatePolicyInputProperties object itself.
     */
    public UpdatePolicyInputProperties
        withReplicationProviderSettings(PolicyProviderSpecificInput replicationProviderSettings) {
        this.replicationProviderSettings = replicationProviderSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (replicationProviderSettings() != null) {
            replicationProviderSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("replicationProviderSettings", this.replicationProviderSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdatePolicyInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdatePolicyInputProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdatePolicyInputProperties.
     */
    public static UpdatePolicyInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdatePolicyInputProperties deserializedUpdatePolicyInputProperties = new UpdatePolicyInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("replicationProviderSettings".equals(fieldName)) {
                    deserializedUpdatePolicyInputProperties.replicationProviderSettings
                        = PolicyProviderSpecificInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdatePolicyInputProperties;
        });
    }
}
