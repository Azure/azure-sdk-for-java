// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Reprotect agent details.
 */
@Immutable
public final class ReprotectAgentDetails implements JsonSerializable<ReprotectAgentDetails> {
    /*
     * The reprotect agent Id.
     */
    private String id;

    /*
     * The reprotect agent name.
     */
    private String name;

    /*
     * The reprotect agent Bios Id.
     */
    private String biosId;

    /*
     * The fabric object Id.
     */
    private String fabricObjectId;

    /*
     * The reprotect agent Fqdn.
     */
    private String fqdn;

    /*
     * The version.
     */
    private String version;

    /*
     * The last heartbeat received from the reprotect agent.
     */
    private OffsetDateTime lastHeartbeatUtc;

    /*
     * The health of the reprotect agent.
     */
    private ProtectionHealth health;

    /*
     * The health errors.
     */
    private List<HealthError> healthErrors;

    /*
     * The protected item count.
     */
    private Integer protectedItemCount;

    /*
     * The list of accessible datastores fetched from discovery.
     */
    private List<String> accessibleDatastores;

    /*
     * The Vcenter Id.
     */
    private String vcenterId;

    /*
     * The last time when SDS information discovered in SRS.
     */
    private OffsetDateTime lastDiscoveryInUtc;

    /**
     * Creates an instance of ReprotectAgentDetails class.
     */
    public ReprotectAgentDetails() {
    }

    /**
     * Get the id property: The reprotect agent Id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The reprotect agent name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the biosId property: The reprotect agent Bios Id.
     * 
     * @return the biosId value.
     */
    public String biosId() {
        return this.biosId;
    }

    /**
     * Get the fabricObjectId property: The fabric object Id.
     * 
     * @return the fabricObjectId value.
     */
    public String fabricObjectId() {
        return this.fabricObjectId;
    }

    /**
     * Get the fqdn property: The reprotect agent Fqdn.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the version property: The version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the lastHeartbeatUtc property: The last heartbeat received from the reprotect agent.
     * 
     * @return the lastHeartbeatUtc value.
     */
    public OffsetDateTime lastHeartbeatUtc() {
        return this.lastHeartbeatUtc;
    }

    /**
     * Get the health property: The health of the reprotect agent.
     * 
     * @return the health value.
     */
    public ProtectionHealth health() {
        return this.health;
    }

    /**
     * Get the healthErrors property: The health errors.
     * 
     * @return the healthErrors value.
     */
    public List<HealthError> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the protectedItemCount property: The protected item count.
     * 
     * @return the protectedItemCount value.
     */
    public Integer protectedItemCount() {
        return this.protectedItemCount;
    }

    /**
     * Get the accessibleDatastores property: The list of accessible datastores fetched from discovery.
     * 
     * @return the accessibleDatastores value.
     */
    public List<String> accessibleDatastores() {
        return this.accessibleDatastores;
    }

    /**
     * Get the vcenterId property: The Vcenter Id.
     * 
     * @return the vcenterId value.
     */
    public String vcenterId() {
        return this.vcenterId;
    }

    /**
     * Get the lastDiscoveryInUtc property: The last time when SDS information discovered in SRS.
     * 
     * @return the lastDiscoveryInUtc value.
     */
    public OffsetDateTime lastDiscoveryInUtc() {
        return this.lastDiscoveryInUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReprotectAgentDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReprotectAgentDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReprotectAgentDetails.
     */
    public static ReprotectAgentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReprotectAgentDetails deserializedReprotectAgentDetails = new ReprotectAgentDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedReprotectAgentDetails.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedReprotectAgentDetails.name = reader.getString();
                } else if ("biosId".equals(fieldName)) {
                    deserializedReprotectAgentDetails.biosId = reader.getString();
                } else if ("fabricObjectId".equals(fieldName)) {
                    deserializedReprotectAgentDetails.fabricObjectId = reader.getString();
                } else if ("fqdn".equals(fieldName)) {
                    deserializedReprotectAgentDetails.fqdn = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedReprotectAgentDetails.version = reader.getString();
                } else if ("lastHeartbeatUtc".equals(fieldName)) {
                    deserializedReprotectAgentDetails.lastHeartbeatUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("health".equals(fieldName)) {
                    deserializedReprotectAgentDetails.health = ProtectionHealth.fromString(reader.getString());
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthError> healthErrors = reader.readArray(reader1 -> HealthError.fromJson(reader1));
                    deserializedReprotectAgentDetails.healthErrors = healthErrors;
                } else if ("protectedItemCount".equals(fieldName)) {
                    deserializedReprotectAgentDetails.protectedItemCount = reader.getNullable(JsonReader::getInt);
                } else if ("accessibleDatastores".equals(fieldName)) {
                    List<String> accessibleDatastores = reader.readArray(reader1 -> reader1.getString());
                    deserializedReprotectAgentDetails.accessibleDatastores = accessibleDatastores;
                } else if ("vcenterId".equals(fieldName)) {
                    deserializedReprotectAgentDetails.vcenterId = reader.getString();
                } else if ("lastDiscoveryInUtc".equals(fieldName)) {
                    deserializedReprotectAgentDetails.lastDiscoveryInUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReprotectAgentDetails;
        });
    }
}
