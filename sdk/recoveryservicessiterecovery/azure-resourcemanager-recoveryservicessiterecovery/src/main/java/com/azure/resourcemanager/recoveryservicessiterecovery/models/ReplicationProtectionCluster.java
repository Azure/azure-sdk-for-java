// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.ReplicationProtectionClusterInner;

/**
 * An immutable client-side representation of ReplicationProtectionCluster.
 */
public interface ReplicationProtectionCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: The custom data.
     * 
     * @return the properties value.
     */
    ReplicationProtectionClusterProperties properties();

    /**
     * Gets the inner
     * com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.ReplicationProtectionClusterInner object.
     * 
     * @return the inner object.
     */
    ReplicationProtectionClusterInner innerModel();

    /**
     * The entirety of the ReplicationProtectionCluster definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The ReplicationProtectionCluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the ReplicationProtectionCluster definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the ReplicationProtectionCluster definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, resourceName, fabricName, protectionContainerName.
             * 
             * @param resourceGroupName The name of the resource group where the recovery services vault is present.
             * @param resourceName The name of the recovery services vault.
             * @param fabricName Fabric name.
             * @param protectionContainerName Protection container name.
             * @return the next definition stage.
             */
            WithCreate withExistingReplicationProtectionContainer(String resourceGroupName, String resourceName,
                String fabricName, String protectionContainerName);
        }

        /**
         * The stage of the ReplicationProtectionCluster definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            ReplicationProtectionCluster create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ReplicationProtectionCluster create(Context context);
        }

        /**
         * The stage of the ReplicationProtectionCluster definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: The custom data..
             * 
             * @param properties The custom data.
             * @return the next definition stage.
             */
            WithCreate withProperties(ReplicationProtectionClusterProperties properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    ReplicationProtectionCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ReplicationProtectionCluster refresh(Context context);

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster applyRecoveryPoint(ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput);

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster applyRecoveryPoint(ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput,
        Context context);

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster failoverCommit();

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster failoverCommit(Context context);

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster repairReplication();

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster repairReplication(Context context);

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param failoverInput Cluster test failover input body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster testFailover(ClusterTestFailoverInput failoverInput);

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param failoverInput Cluster test failover input body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster testFailover(ClusterTestFailoverInput failoverInput, Context context);

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param cleanupInput Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster testFailoverCleanup(ClusterTestFailoverCleanupInput cleanupInput);

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param cleanupInput Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster testFailoverCleanup(ClusterTestFailoverCleanupInput cleanupInput, Context context);

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param failoverInput Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster unplannedFailover(ClusterUnplannedFailoverInput failoverInput);

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param failoverInput Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    ReplicationProtectionCluster unplannedFailover(ClusterUnplannedFailoverInput failoverInput, Context context);
}
