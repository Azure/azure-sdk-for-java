// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Fabric properties.
 */
@Fluent
public final class FabricProperties implements JsonSerializable<FabricProperties> {
    /*
     * Friendly name of the fabric.
     */
    private String friendlyName;

    /*
     * Encryption details for the fabric.
     */
    private EncryptionDetails encryptionDetails;

    /*
     * Rollover encryption details for the fabric.
     */
    private EncryptionDetails rolloverEncryptionDetails;

    /*
     * Dra Registration Id.
     */
    private String internalIdentifier;

    /*
     * BCDR state of the fabric.
     */
    private String bcdrState;

    /*
     * Fabric specific settings.
     */
    private FabricSpecificDetails customDetails;

    /*
     * Fabric health error details.
     */
    private List<HealthError> healthErrorDetails;

    /*
     * Health of fabric.
     */
    private String health;

    /**
     * Creates an instance of FabricProperties class.
     */
    public FabricProperties() {
    }

    /**
     * Get the friendlyName property: Friendly name of the fabric.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the fabric.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the encryptionDetails property: Encryption details for the fabric.
     * 
     * @return the encryptionDetails value.
     */
    public EncryptionDetails encryptionDetails() {
        return this.encryptionDetails;
    }

    /**
     * Set the encryptionDetails property: Encryption details for the fabric.
     * 
     * @param encryptionDetails the encryptionDetails value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withEncryptionDetails(EncryptionDetails encryptionDetails) {
        this.encryptionDetails = encryptionDetails;
        return this;
    }

    /**
     * Get the rolloverEncryptionDetails property: Rollover encryption details for the fabric.
     * 
     * @return the rolloverEncryptionDetails value.
     */
    public EncryptionDetails rolloverEncryptionDetails() {
        return this.rolloverEncryptionDetails;
    }

    /**
     * Set the rolloverEncryptionDetails property: Rollover encryption details for the fabric.
     * 
     * @param rolloverEncryptionDetails the rolloverEncryptionDetails value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withRolloverEncryptionDetails(EncryptionDetails rolloverEncryptionDetails) {
        this.rolloverEncryptionDetails = rolloverEncryptionDetails;
        return this;
    }

    /**
     * Get the internalIdentifier property: Dra Registration Id.
     * 
     * @return the internalIdentifier value.
     */
    public String internalIdentifier() {
        return this.internalIdentifier;
    }

    /**
     * Set the internalIdentifier property: Dra Registration Id.
     * 
     * @param internalIdentifier the internalIdentifier value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withInternalIdentifier(String internalIdentifier) {
        this.internalIdentifier = internalIdentifier;
        return this;
    }

    /**
     * Get the bcdrState property: BCDR state of the fabric.
     * 
     * @return the bcdrState value.
     */
    public String bcdrState() {
        return this.bcdrState;
    }

    /**
     * Set the bcdrState property: BCDR state of the fabric.
     * 
     * @param bcdrState the bcdrState value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withBcdrState(String bcdrState) {
        this.bcdrState = bcdrState;
        return this;
    }

    /**
     * Get the customDetails property: Fabric specific settings.
     * 
     * @return the customDetails value.
     */
    public FabricSpecificDetails customDetails() {
        return this.customDetails;
    }

    /**
     * Set the customDetails property: Fabric specific settings.
     * 
     * @param customDetails the customDetails value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withCustomDetails(FabricSpecificDetails customDetails) {
        this.customDetails = customDetails;
        return this;
    }

    /**
     * Get the healthErrorDetails property: Fabric health error details.
     * 
     * @return the healthErrorDetails value.
     */
    public List<HealthError> healthErrorDetails() {
        return this.healthErrorDetails;
    }

    /**
     * Set the healthErrorDetails property: Fabric health error details.
     * 
     * @param healthErrorDetails the healthErrorDetails value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withHealthErrorDetails(List<HealthError> healthErrorDetails) {
        this.healthErrorDetails = healthErrorDetails;
        return this;
    }

    /**
     * Get the health property: Health of fabric.
     * 
     * @return the health value.
     */
    public String health() {
        return this.health;
    }

    /**
     * Set the health property: Health of fabric.
     * 
     * @param health the health value to set.
     * @return the FabricProperties object itself.
     */
    public FabricProperties withHealth(String health) {
        this.health = health;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryptionDetails() != null) {
            encryptionDetails().validate();
        }
        if (rolloverEncryptionDetails() != null) {
            rolloverEncryptionDetails().validate();
        }
        if (customDetails() != null) {
            customDetails().validate();
        }
        if (healthErrorDetails() != null) {
            healthErrorDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeJsonField("encryptionDetails", this.encryptionDetails);
        jsonWriter.writeJsonField("rolloverEncryptionDetails", this.rolloverEncryptionDetails);
        jsonWriter.writeStringField("internalIdentifier", this.internalIdentifier);
        jsonWriter.writeStringField("bcdrState", this.bcdrState);
        jsonWriter.writeJsonField("customDetails", this.customDetails);
        jsonWriter.writeArrayField("healthErrorDetails", this.healthErrorDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("health", this.health);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FabricProperties.
     */
    public static FabricProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricProperties deserializedFabricProperties = new FabricProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedFabricProperties.friendlyName = reader.getString();
                } else if ("encryptionDetails".equals(fieldName)) {
                    deserializedFabricProperties.encryptionDetails = EncryptionDetails.fromJson(reader);
                } else if ("rolloverEncryptionDetails".equals(fieldName)) {
                    deserializedFabricProperties.rolloverEncryptionDetails = EncryptionDetails.fromJson(reader);
                } else if ("internalIdentifier".equals(fieldName)) {
                    deserializedFabricProperties.internalIdentifier = reader.getString();
                } else if ("bcdrState".equals(fieldName)) {
                    deserializedFabricProperties.bcdrState = reader.getString();
                } else if ("customDetails".equals(fieldName)) {
                    deserializedFabricProperties.customDetails = FabricSpecificDetails.fromJson(reader);
                } else if ("healthErrorDetails".equals(fieldName)) {
                    List<HealthError> healthErrorDetails = reader.readArray(reader1 -> HealthError.fromJson(reader1));
                    deserializedFabricProperties.healthErrorDetails = healthErrorDetails;
                } else if ("health".equals(fieldName)) {
                    deserializedFabricProperties.health = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFabricProperties;
        });
    }
}
