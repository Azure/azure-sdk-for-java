// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Supported operating system details.
 */
@Fluent
public final class SupportedOSDetails implements JsonSerializable<SupportedOSDetails> {
    /*
     * The name.
     */
    private String osName;

    /*
     * The type.
     */
    private String osType;

    /*
     * The list of version for operating system.
     */
    private List<OSVersionWrapper> osVersions;

    /**
     * Creates an instance of SupportedOSDetails class.
     */
    public SupportedOSDetails() {
    }

    /**
     * Get the osName property: The name.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Set the osName property: The name.
     * 
     * @param osName the osName value to set.
     * @return the SupportedOSDetails object itself.
     */
    public SupportedOSDetails withOsName(String osName) {
        this.osName = osName;
        return this;
    }

    /**
     * Get the osType property: The type.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The type.
     * 
     * @param osType the osType value to set.
     * @return the SupportedOSDetails object itself.
     */
    public SupportedOSDetails withOsType(String osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the osVersions property: The list of version for operating system.
     * 
     * @return the osVersions value.
     */
    public List<OSVersionWrapper> osVersions() {
        return this.osVersions;
    }

    /**
     * Set the osVersions property: The list of version for operating system.
     * 
     * @param osVersions the osVersions value to set.
     * @return the SupportedOSDetails object itself.
     */
    public SupportedOSDetails withOsVersions(List<OSVersionWrapper> osVersions) {
        this.osVersions = osVersions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osVersions() != null) {
            osVersions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osName", this.osName);
        jsonWriter.writeStringField("osType", this.osType);
        jsonWriter.writeArrayField("osVersions", this.osVersions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SupportedOSDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SupportedOSDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SupportedOSDetails.
     */
    public static SupportedOSDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SupportedOSDetails deserializedSupportedOSDetails = new SupportedOSDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osName".equals(fieldName)) {
                    deserializedSupportedOSDetails.osName = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedSupportedOSDetails.osType = reader.getString();
                } else if ("osVersions".equals(fieldName)) {
                    List<OSVersionWrapper> osVersions = reader.readArray(reader1 -> OSVersionWrapper.fromJson(reader1));
                    deserializedSupportedOSDetails.osVersions = osVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSupportedOSDetails;
        });
    }
}
