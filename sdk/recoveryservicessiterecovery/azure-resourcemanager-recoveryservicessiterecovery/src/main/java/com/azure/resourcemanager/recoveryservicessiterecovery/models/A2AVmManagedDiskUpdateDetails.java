// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A2A Vm managed disk update details.
 */
@Fluent
public final class A2AVmManagedDiskUpdateDetails implements JsonSerializable<A2AVmManagedDiskUpdateDetails> {
    /*
     * The disk Id.
     */
    private String diskId;

    /*
     * The target disk type before failover.
     */
    private String recoveryTargetDiskAccountType;

    /*
     * The replica disk type before failover.
     */
    private String recoveryReplicaDiskAccountType;

    /*
     * The recovery os disk encryption information.
     */
    private DiskEncryptionInfo diskEncryptionInfo;

    /*
     * The target disk name for unplanned failover operation.
     */
    private String failoverDiskName;

    /*
     * The target disk name for test failover operation.
     */
    private String tfoDiskName;

    /**
     * Creates an instance of A2AVmManagedDiskUpdateDetails class.
     */
    public A2AVmManagedDiskUpdateDetails() {
    }

    /**
     * Get the diskId property: The disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: The disk Id.
     * 
     * @param diskId the diskId value to set.
     * @return the A2AVmManagedDiskUpdateDetails object itself.
     */
    public A2AVmManagedDiskUpdateDetails withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the recoveryTargetDiskAccountType property: The target disk type before failover.
     * 
     * @return the recoveryTargetDiskAccountType value.
     */
    public String recoveryTargetDiskAccountType() {
        return this.recoveryTargetDiskAccountType;
    }

    /**
     * Set the recoveryTargetDiskAccountType property: The target disk type before failover.
     * 
     * @param recoveryTargetDiskAccountType the recoveryTargetDiskAccountType value to set.
     * @return the A2AVmManagedDiskUpdateDetails object itself.
     */
    public A2AVmManagedDiskUpdateDetails withRecoveryTargetDiskAccountType(String recoveryTargetDiskAccountType) {
        this.recoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
        return this;
    }

    /**
     * Get the recoveryReplicaDiskAccountType property: The replica disk type before failover.
     * 
     * @return the recoveryReplicaDiskAccountType value.
     */
    public String recoveryReplicaDiskAccountType() {
        return this.recoveryReplicaDiskAccountType;
    }

    /**
     * Set the recoveryReplicaDiskAccountType property: The replica disk type before failover.
     * 
     * @param recoveryReplicaDiskAccountType the recoveryReplicaDiskAccountType value to set.
     * @return the A2AVmManagedDiskUpdateDetails object itself.
     */
    public A2AVmManagedDiskUpdateDetails withRecoveryReplicaDiskAccountType(String recoveryReplicaDiskAccountType) {
        this.recoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
        return this;
    }

    /**
     * Get the diskEncryptionInfo property: The recovery os disk encryption information.
     * 
     * @return the diskEncryptionInfo value.
     */
    public DiskEncryptionInfo diskEncryptionInfo() {
        return this.diskEncryptionInfo;
    }

    /**
     * Set the diskEncryptionInfo property: The recovery os disk encryption information.
     * 
     * @param diskEncryptionInfo the diskEncryptionInfo value to set.
     * @return the A2AVmManagedDiskUpdateDetails object itself.
     */
    public A2AVmManagedDiskUpdateDetails withDiskEncryptionInfo(DiskEncryptionInfo diskEncryptionInfo) {
        this.diskEncryptionInfo = diskEncryptionInfo;
        return this;
    }

    /**
     * Get the failoverDiskName property: The target disk name for unplanned failover operation.
     * 
     * @return the failoverDiskName value.
     */
    public String failoverDiskName() {
        return this.failoverDiskName;
    }

    /**
     * Set the failoverDiskName property: The target disk name for unplanned failover operation.
     * 
     * @param failoverDiskName the failoverDiskName value to set.
     * @return the A2AVmManagedDiskUpdateDetails object itself.
     */
    public A2AVmManagedDiskUpdateDetails withFailoverDiskName(String failoverDiskName) {
        this.failoverDiskName = failoverDiskName;
        return this;
    }

    /**
     * Get the tfoDiskName property: The target disk name for test failover operation.
     * 
     * @return the tfoDiskName value.
     */
    public String tfoDiskName() {
        return this.tfoDiskName;
    }

    /**
     * Set the tfoDiskName property: The target disk name for test failover operation.
     * 
     * @param tfoDiskName the tfoDiskName value to set.
     * @return the A2AVmManagedDiskUpdateDetails object itself.
     */
    public A2AVmManagedDiskUpdateDetails withTfoDiskName(String tfoDiskName) {
        this.tfoDiskName = tfoDiskName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskEncryptionInfo() != null) {
            diskEncryptionInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeStringField("recoveryTargetDiskAccountType", this.recoveryTargetDiskAccountType);
        jsonWriter.writeStringField("recoveryReplicaDiskAccountType", this.recoveryReplicaDiskAccountType);
        jsonWriter.writeJsonField("diskEncryptionInfo", this.diskEncryptionInfo);
        jsonWriter.writeStringField("failoverDiskName", this.failoverDiskName);
        jsonWriter.writeStringField("tfoDiskName", this.tfoDiskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2AVmManagedDiskUpdateDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2AVmManagedDiskUpdateDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the A2AVmManagedDiskUpdateDetails.
     */
    public static A2AVmManagedDiskUpdateDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2AVmManagedDiskUpdateDetails deserializedA2AVmManagedDiskUpdateDetails
                = new A2AVmManagedDiskUpdateDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedA2AVmManagedDiskUpdateDetails.diskId = reader.getString();
                } else if ("recoveryTargetDiskAccountType".equals(fieldName)) {
                    deserializedA2AVmManagedDiskUpdateDetails.recoveryTargetDiskAccountType = reader.getString();
                } else if ("recoveryReplicaDiskAccountType".equals(fieldName)) {
                    deserializedA2AVmManagedDiskUpdateDetails.recoveryReplicaDiskAccountType = reader.getString();
                } else if ("diskEncryptionInfo".equals(fieldName)) {
                    deserializedA2AVmManagedDiskUpdateDetails.diskEncryptionInfo = DiskEncryptionInfo.fromJson(reader);
                } else if ("failoverDiskName".equals(fieldName)) {
                    deserializedA2AVmManagedDiskUpdateDetails.failoverDiskName = reader.getString();
                } else if ("tfoDiskName".equals(fieldName)) {
                    deserializedA2AVmManagedDiskUpdateDetails.tfoDiskName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedA2AVmManagedDiskUpdateDetails;
        });
    }
}
