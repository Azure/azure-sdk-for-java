// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Query parameter to enumerate jobs.
 */
@Fluent
public final class JobQueryParameter implements JsonSerializable<JobQueryParameter> {
    /*
     * Date time to get jobs from.
     */
    private String startTime;

    /*
     * Date time to get jobs upto.
     */
    private String endTime;

    /*
     * The Id of the fabric to search jobs under.
     */
    private String fabricId;

    /*
     * The type of objects.
     */
    private String affectedObjectTypes;

    /*
     * The states of the job to be filtered can be in.
     */
    private String jobStatus;

    /*
     * The output type of the jobs.
     */
    private ExportJobOutputSerializationType jobOutputType;

    /*
     * The job Name.
     */
    private String jobName;

    /*
     * The timezone offset for the location of the request (in minutes).
     */
    private Double timezoneOffset;

    /**
     * Creates an instance of JobQueryParameter class.
     */
    public JobQueryParameter() {
    }

    /**
     * Get the startTime property: Date time to get jobs from.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Date time to get jobs from.
     * 
     * @param startTime the startTime value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Date time to get jobs upto.
     * 
     * @return the endTime value.
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Date time to get jobs upto.
     * 
     * @param endTime the endTime value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the fabricId property: The Id of the fabric to search jobs under.
     * 
     * @return the fabricId value.
     */
    public String fabricId() {
        return this.fabricId;
    }

    /**
     * Set the fabricId property: The Id of the fabric to search jobs under.
     * 
     * @param fabricId the fabricId value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withFabricId(String fabricId) {
        this.fabricId = fabricId;
        return this;
    }

    /**
     * Get the affectedObjectTypes property: The type of objects.
     * 
     * @return the affectedObjectTypes value.
     */
    public String affectedObjectTypes() {
        return this.affectedObjectTypes;
    }

    /**
     * Set the affectedObjectTypes property: The type of objects.
     * 
     * @param affectedObjectTypes the affectedObjectTypes value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withAffectedObjectTypes(String affectedObjectTypes) {
        this.affectedObjectTypes = affectedObjectTypes;
        return this;
    }

    /**
     * Get the jobStatus property: The states of the job to be filtered can be in.
     * 
     * @return the jobStatus value.
     */
    public String jobStatus() {
        return this.jobStatus;
    }

    /**
     * Set the jobStatus property: The states of the job to be filtered can be in.
     * 
     * @param jobStatus the jobStatus value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withJobStatus(String jobStatus) {
        this.jobStatus = jobStatus;
        return this;
    }

    /**
     * Get the jobOutputType property: The output type of the jobs.
     * 
     * @return the jobOutputType value.
     */
    public ExportJobOutputSerializationType jobOutputType() {
        return this.jobOutputType;
    }

    /**
     * Set the jobOutputType property: The output type of the jobs.
     * 
     * @param jobOutputType the jobOutputType value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withJobOutputType(ExportJobOutputSerializationType jobOutputType) {
        this.jobOutputType = jobOutputType;
        return this;
    }

    /**
     * Get the jobName property: The job Name.
     * 
     * @return the jobName value.
     */
    public String jobName() {
        return this.jobName;
    }

    /**
     * Set the jobName property: The job Name.
     * 
     * @param jobName the jobName value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }

    /**
     * Get the timezoneOffset property: The timezone offset for the location of the request (in minutes).
     * 
     * @return the timezoneOffset value.
     */
    public Double timezoneOffset() {
        return this.timezoneOffset;
    }

    /**
     * Set the timezoneOffset property: The timezone offset for the location of the request (in minutes).
     * 
     * @param timezoneOffset the timezoneOffset value to set.
     * @return the JobQueryParameter object itself.
     */
    public JobQueryParameter withTimezoneOffset(Double timezoneOffset) {
        this.timezoneOffset = timezoneOffset;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeStringField("endTime", this.endTime);
        jsonWriter.writeStringField("fabricId", this.fabricId);
        jsonWriter.writeStringField("affectedObjectTypes", this.affectedObjectTypes);
        jsonWriter.writeStringField("jobStatus", this.jobStatus);
        jsonWriter.writeStringField("jobOutputType", this.jobOutputType == null ? null : this.jobOutputType.toString());
        jsonWriter.writeStringField("jobName", this.jobName);
        jsonWriter.writeNumberField("timezoneOffset", this.timezoneOffset);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobQueryParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobQueryParameter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobQueryParameter.
     */
    public static JobQueryParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobQueryParameter deserializedJobQueryParameter = new JobQueryParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedJobQueryParameter.startTime = reader.getString();
                } else if ("endTime".equals(fieldName)) {
                    deserializedJobQueryParameter.endTime = reader.getString();
                } else if ("fabricId".equals(fieldName)) {
                    deserializedJobQueryParameter.fabricId = reader.getString();
                } else if ("affectedObjectTypes".equals(fieldName)) {
                    deserializedJobQueryParameter.affectedObjectTypes = reader.getString();
                } else if ("jobStatus".equals(fieldName)) {
                    deserializedJobQueryParameter.jobStatus = reader.getString();
                } else if ("jobOutputType".equals(fieldName)) {
                    deserializedJobQueryParameter.jobOutputType
                        = ExportJobOutputSerializationType.fromString(reader.getString());
                } else if ("jobName".equals(fieldName)) {
                    deserializedJobQueryParameter.jobName = reader.getString();
                } else if ("timezoneOffset".equals(fieldName)) {
                    deserializedJobQueryParameter.timezoneOffset = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobQueryParameter;
        });
    }
}
