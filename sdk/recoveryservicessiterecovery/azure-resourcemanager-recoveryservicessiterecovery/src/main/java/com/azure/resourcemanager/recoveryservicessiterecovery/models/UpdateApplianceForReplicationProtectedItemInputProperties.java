// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Update appliance for protected item input properties.
 */
@Fluent
public final class UpdateApplianceForReplicationProtectedItemInputProperties
    implements JsonSerializable<UpdateApplianceForReplicationProtectedItemInputProperties> {
    /*
     * The target appliance Id.
     */
    private String targetApplianceId;

    /*
     * The provider specific input to update replication protected item.
     */
    private UpdateReplicationProtectedItemProviderSpecificInput providerSpecificDetails;

    /**
     * Creates an instance of UpdateApplianceForReplicationProtectedItemInputProperties class.
     */
    public UpdateApplianceForReplicationProtectedItemInputProperties() {
    }

    /**
     * Get the targetApplianceId property: The target appliance Id.
     * 
     * @return the targetApplianceId value.
     */
    public String targetApplianceId() {
        return this.targetApplianceId;
    }

    /**
     * Set the targetApplianceId property: The target appliance Id.
     * 
     * @param targetApplianceId the targetApplianceId value to set.
     * @return the UpdateApplianceForReplicationProtectedItemInputProperties object itself.
     */
    public UpdateApplianceForReplicationProtectedItemInputProperties withTargetApplianceId(String targetApplianceId) {
        this.targetApplianceId = targetApplianceId;
        return this;
    }

    /**
     * Get the providerSpecificDetails property: The provider specific input to update replication protected item.
     * 
     * @return the providerSpecificDetails value.
     */
    public UpdateReplicationProtectedItemProviderSpecificInput providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: The provider specific input to update replication protected item.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the UpdateApplianceForReplicationProtectedItemInputProperties object itself.
     */
    public UpdateApplianceForReplicationProtectedItemInputProperties
        withProviderSpecificDetails(UpdateReplicationProtectedItemProviderSpecificInput providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetApplianceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetApplianceId in model UpdateApplianceForReplicationProtectedItemInputProperties"));
        }
        if (providerSpecificDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property providerSpecificDetails in model UpdateApplianceForReplicationProtectedItemInputProperties"));
        } else {
            providerSpecificDetails().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(UpdateApplianceForReplicationProtectedItemInputProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetApplianceId", this.targetApplianceId);
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateApplianceForReplicationProtectedItemInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateApplianceForReplicationProtectedItemInputProperties if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * UpdateApplianceForReplicationProtectedItemInputProperties.
     */
    public static UpdateApplianceForReplicationProtectedItemInputProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateApplianceForReplicationProtectedItemInputProperties deserializedUpdateApplianceForReplicationProtectedItemInputProperties
                = new UpdateApplianceForReplicationProtectedItemInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetApplianceId".equals(fieldName)) {
                    deserializedUpdateApplianceForReplicationProtectedItemInputProperties.targetApplianceId
                        = reader.getString();
                } else if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedUpdateApplianceForReplicationProtectedItemInputProperties.providerSpecificDetails
                        = UpdateReplicationProtectedItemProviderSpecificInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateApplianceForReplicationProtectedItemInputProperties;
        });
    }
}
