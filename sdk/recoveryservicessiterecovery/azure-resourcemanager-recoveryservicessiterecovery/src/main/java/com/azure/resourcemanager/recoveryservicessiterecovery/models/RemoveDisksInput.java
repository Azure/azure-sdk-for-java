// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for remove disk(s) operation.
 */
@Fluent
public final class RemoveDisksInput implements JsonSerializable<RemoveDisksInput> {
    /*
     * Remove disk input properties.
     */
    private RemoveDisksInputProperties properties;

    /**
     * Creates an instance of RemoveDisksInput class.
     */
    public RemoveDisksInput() {
    }

    /**
     * Get the properties property: Remove disk input properties.
     * 
     * @return the properties value.
     */
    public RemoveDisksInputProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Remove disk input properties.
     * 
     * @param properties the properties value to set.
     * @return the RemoveDisksInput object itself.
     */
    public RemoveDisksInput withProperties(RemoveDisksInputProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoveDisksInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoveDisksInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemoveDisksInput.
     */
    public static RemoveDisksInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemoveDisksInput deserializedRemoveDisksInput = new RemoveDisksInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedRemoveDisksInput.properties = RemoveDisksInputProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemoveDisksInput;
        });
    }
}
