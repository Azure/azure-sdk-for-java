// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Job custom data details.
 */
@Fluent
public final class JobProperties implements JsonSerializable<JobProperties> {
    /*
     * The activity id.
     */
    private String activityId;

    /*
     * The ScenarioName.
     */
    private String scenarioName;

    /*
     * The DisplayName.
     */
    private String friendlyName;

    /*
     * The status of the Job. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled,
     * Suspended or Other.
     */
    private String state;

    /*
     * The description of the state of the Job. For e.g. - For Succeeded state, description can be Completed,
     * PartiallySucceeded, CompletedWithInformation or Skipped.
     */
    private String stateDescription;

    /*
     * The tasks.
     */
    private List<AsrTask> tasks;

    /*
     * The errors.
     */
    private List<JobErrorDetails> errors;

    /*
     * The start time.
     */
    private OffsetDateTime startTime;

    /*
     * The end time.
     */
    private OffsetDateTime endTime;

    /*
     * The Allowed action the job.
     */
    private List<String> allowedActions;

    /*
     * The affected Object Id.
     */
    private String targetObjectId;

    /*
     * The name of the affected object.
     */
    private String targetObjectName;

    /*
     * The type of the affected object which is of Microsoft.Azure.SiteRecovery.V2015_11_10.AffectedObjectType class.
     */
    private String targetInstanceType;

    /*
     * The custom job details like test failover job details.
     */
    private JobDetails customDetails;

    /**
     * Creates an instance of JobProperties class.
     */
    public JobProperties() {
    }

    /**
     * Get the activityId property: The activity id.
     * 
     * @return the activityId value.
     */
    public String activityId() {
        return this.activityId;
    }

    /**
     * Set the activityId property: The activity id.
     * 
     * @param activityId the activityId value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withActivityId(String activityId) {
        this.activityId = activityId;
        return this;
    }

    /**
     * Get the scenarioName property: The ScenarioName.
     * 
     * @return the scenarioName value.
     */
    public String scenarioName() {
        return this.scenarioName;
    }

    /**
     * Set the scenarioName property: The ScenarioName.
     * 
     * @param scenarioName the scenarioName value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withScenarioName(String scenarioName) {
        this.scenarioName = scenarioName;
        return this;
    }

    /**
     * Get the friendlyName property: The DisplayName.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The DisplayName.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the state property: The status of the Job. It is one of these values - NotStarted, InProgress, Succeeded,
     * Failed, Cancelled, Suspended or Other.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: The status of the Job. It is one of these values - NotStarted, InProgress, Succeeded,
     * Failed, Cancelled, Suspended or Other.
     * 
     * @param state the state value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the stateDescription property: The description of the state of the Job. For e.g. - For Succeeded state,
     * description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.
     * 
     * @return the stateDescription value.
     */
    public String stateDescription() {
        return this.stateDescription;
    }

    /**
     * Set the stateDescription property: The description of the state of the Job. For e.g. - For Succeeded state,
     * description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.
     * 
     * @param stateDescription the stateDescription value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withStateDescription(String stateDescription) {
        this.stateDescription = stateDescription;
        return this;
    }

    /**
     * Get the tasks property: The tasks.
     * 
     * @return the tasks value.
     */
    public List<AsrTask> tasks() {
        return this.tasks;
    }

    /**
     * Set the tasks property: The tasks.
     * 
     * @param tasks the tasks value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withTasks(List<AsrTask> tasks) {
        this.tasks = tasks;
        return this;
    }

    /**
     * Get the errors property: The errors.
     * 
     * @return the errors value.
     */
    public List<JobErrorDetails> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The errors.
     * 
     * @param errors the errors value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withErrors(List<JobErrorDetails> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the startTime property: The start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time.
     * 
     * @param startTime the startTime value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time.
     * 
     * @param endTime the endTime value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the allowedActions property: The Allowed action the job.
     * 
     * @return the allowedActions value.
     */
    public List<String> allowedActions() {
        return this.allowedActions;
    }

    /**
     * Set the allowedActions property: The Allowed action the job.
     * 
     * @param allowedActions the allowedActions value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withAllowedActions(List<String> allowedActions) {
        this.allowedActions = allowedActions;
        return this;
    }

    /**
     * Get the targetObjectId property: The affected Object Id.
     * 
     * @return the targetObjectId value.
     */
    public String targetObjectId() {
        return this.targetObjectId;
    }

    /**
     * Set the targetObjectId property: The affected Object Id.
     * 
     * @param targetObjectId the targetObjectId value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withTargetObjectId(String targetObjectId) {
        this.targetObjectId = targetObjectId;
        return this;
    }

    /**
     * Get the targetObjectName property: The name of the affected object.
     * 
     * @return the targetObjectName value.
     */
    public String targetObjectName() {
        return this.targetObjectName;
    }

    /**
     * Set the targetObjectName property: The name of the affected object.
     * 
     * @param targetObjectName the targetObjectName value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withTargetObjectName(String targetObjectName) {
        this.targetObjectName = targetObjectName;
        return this;
    }

    /**
     * Get the targetInstanceType property: The type of the affected object which is of
     * Microsoft.Azure.SiteRecovery.V2015_11_10.AffectedObjectType class.
     * 
     * @return the targetInstanceType value.
     */
    public String targetInstanceType() {
        return this.targetInstanceType;
    }

    /**
     * Set the targetInstanceType property: The type of the affected object which is of
     * Microsoft.Azure.SiteRecovery.V2015_11_10.AffectedObjectType class.
     * 
     * @param targetInstanceType the targetInstanceType value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withTargetInstanceType(String targetInstanceType) {
        this.targetInstanceType = targetInstanceType;
        return this;
    }

    /**
     * Get the customDetails property: The custom job details like test failover job details.
     * 
     * @return the customDetails value.
     */
    public JobDetails customDetails() {
        return this.customDetails;
    }

    /**
     * Set the customDetails property: The custom job details like test failover job details.
     * 
     * @param customDetails the customDetails value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withCustomDetails(JobDetails customDetails) {
        this.customDetails = customDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tasks() != null) {
            tasks().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
        if (customDetails() != null) {
            customDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activityId", this.activityId);
        jsonWriter.writeStringField("scenarioName", this.scenarioName);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("stateDescription", this.stateDescription);
        jsonWriter.writeArrayField("tasks", this.tasks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeArrayField("allowedActions", this.allowedActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("targetObjectId", this.targetObjectId);
        jsonWriter.writeStringField("targetObjectName", this.targetObjectName);
        jsonWriter.writeStringField("targetInstanceType", this.targetInstanceType);
        jsonWriter.writeJsonField("customDetails", this.customDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobProperties.
     */
    public static JobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobProperties deserializedJobProperties = new JobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activityId".equals(fieldName)) {
                    deserializedJobProperties.activityId = reader.getString();
                } else if ("scenarioName".equals(fieldName)) {
                    deserializedJobProperties.scenarioName = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedJobProperties.friendlyName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedJobProperties.state = reader.getString();
                } else if ("stateDescription".equals(fieldName)) {
                    deserializedJobProperties.stateDescription = reader.getString();
                } else if ("tasks".equals(fieldName)) {
                    List<AsrTask> tasks = reader.readArray(reader1 -> AsrTask.fromJson(reader1));
                    deserializedJobProperties.tasks = tasks;
                } else if ("errors".equals(fieldName)) {
                    List<JobErrorDetails> errors = reader.readArray(reader1 -> JobErrorDetails.fromJson(reader1));
                    deserializedJobProperties.errors = errors;
                } else if ("startTime".equals(fieldName)) {
                    deserializedJobProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedJobProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("allowedActions".equals(fieldName)) {
                    List<String> allowedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedJobProperties.allowedActions = allowedActions;
                } else if ("targetObjectId".equals(fieldName)) {
                    deserializedJobProperties.targetObjectId = reader.getString();
                } else if ("targetObjectName".equals(fieldName)) {
                    deserializedJobProperties.targetObjectName = reader.getString();
                } else if ("targetInstanceType".equals(fieldName)) {
                    deserializedJobProperties.targetInstanceType = reader.getString();
                } else if ("customDetails".equals(fieldName)) {
                    deserializedJobProperties.customDetails = JobDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobProperties;
        });
    }
}
