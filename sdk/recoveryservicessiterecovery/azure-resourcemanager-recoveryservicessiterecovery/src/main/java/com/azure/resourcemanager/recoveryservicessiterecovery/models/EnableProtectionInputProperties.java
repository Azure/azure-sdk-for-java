// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Enable protection input properties.
 */
@Fluent
public final class EnableProtectionInputProperties implements JsonSerializable<EnableProtectionInputProperties> {
    /*
     * The Policy Id.
     */
    private String policyId;

    /*
     * The protectable item Id.
     */
    private String protectableItemId;

    /*
     * The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For
     * San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
     */
    private EnableProtectionProviderSpecificInput providerSpecificDetails;

    /**
     * Creates an instance of EnableProtectionInputProperties class.
     */
    public EnableProtectionInputProperties() {
    }

    /**
     * Get the policyId property: The Policy Id.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: The Policy Id.
     * 
     * @param policyId the policyId value to set.
     * @return the EnableProtectionInputProperties object itself.
     */
    public EnableProtectionInputProperties withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * Get the protectableItemId property: The protectable item Id.
     * 
     * @return the protectableItemId value.
     */
    public String protectableItemId() {
        return this.protectableItemId;
    }

    /**
     * Set the protectableItemId property: The protectable item Id.
     * 
     * @param protectableItemId the protectableItemId value to set.
     * @return the EnableProtectionInputProperties object itself.
     */
    public EnableProtectionInputProperties withProtectableItemId(String protectableItemId) {
        this.protectableItemId = protectableItemId;
        return this;
    }

    /**
     * Get the providerSpecificDetails property: The ReplicationProviderInput. For HyperVReplicaAzure provider, it will
     * be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For
     * HyperVReplicaAzure provider, it can be null.
     * 
     * @return the providerSpecificDetails value.
     */
    public EnableProtectionProviderSpecificInput providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: The ReplicationProviderInput. For HyperVReplicaAzure provider, it will
     * be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For
     * HyperVReplicaAzure provider, it can be null.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the EnableProtectionInputProperties object itself.
     */
    public EnableProtectionInputProperties
        withProviderSpecificDetails(EnableProtectionProviderSpecificInput providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerSpecificDetails() != null) {
            providerSpecificDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("policyId", this.policyId);
        jsonWriter.writeStringField("protectableItemId", this.protectableItemId);
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnableProtectionInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnableProtectionInputProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnableProtectionInputProperties.
     */
    public static EnableProtectionInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnableProtectionInputProperties deserializedEnableProtectionInputProperties
                = new EnableProtectionInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyId".equals(fieldName)) {
                    deserializedEnableProtectionInputProperties.policyId = reader.getString();
                } else if ("protectableItemId".equals(fieldName)) {
                    deserializedEnableProtectionInputProperties.protectableItemId = reader.getString();
                } else if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedEnableProtectionInputProperties.providerSpecificDetails
                        = EnableProtectionProviderSpecificInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnableProtectionInputProperties;
        });
    }
}
