// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Disk Details.
 */
@Fluent
public final class OSDetails implements JsonSerializable<OSDetails> {
    /*
     * VM Disk details.
     */
    private String osType;

    /*
     * Product type.
     */
    private String productType;

    /*
     * The OSEdition.
     */
    private String osEdition;

    /*
     * The OS Version.
     */
    private String oSVersion;

    /*
     * The OS Major Version.
     */
    private String oSMajorVersion;

    /*
     * The OS Minor Version.
     */
    private String oSMinorVersion;

    /**
     * Creates an instance of OSDetails class.
     */
    public OSDetails() {
    }

    /**
     * Get the osType property: VM Disk details.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Set the osType property: VM Disk details.
     * 
     * @param osType the osType value to set.
     * @return the OSDetails object itself.
     */
    public OSDetails withOsType(String osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the productType property: Product type.
     * 
     * @return the productType value.
     */
    public String productType() {
        return this.productType;
    }

    /**
     * Set the productType property: Product type.
     * 
     * @param productType the productType value to set.
     * @return the OSDetails object itself.
     */
    public OSDetails withProductType(String productType) {
        this.productType = productType;
        return this;
    }

    /**
     * Get the osEdition property: The OSEdition.
     * 
     * @return the osEdition value.
     */
    public String osEdition() {
        return this.osEdition;
    }

    /**
     * Set the osEdition property: The OSEdition.
     * 
     * @param osEdition the osEdition value to set.
     * @return the OSDetails object itself.
     */
    public OSDetails withOsEdition(String osEdition) {
        this.osEdition = osEdition;
        return this;
    }

    /**
     * Get the oSVersion property: The OS Version.
     * 
     * @return the oSVersion value.
     */
    public String oSVersion() {
        return this.oSVersion;
    }

    /**
     * Set the oSVersion property: The OS Version.
     * 
     * @param oSVersion the oSVersion value to set.
     * @return the OSDetails object itself.
     */
    public OSDetails withOSVersion(String oSVersion) {
        this.oSVersion = oSVersion;
        return this;
    }

    /**
     * Get the oSMajorVersion property: The OS Major Version.
     * 
     * @return the oSMajorVersion value.
     */
    public String oSMajorVersion() {
        return this.oSMajorVersion;
    }

    /**
     * Set the oSMajorVersion property: The OS Major Version.
     * 
     * @param oSMajorVersion the oSMajorVersion value to set.
     * @return the OSDetails object itself.
     */
    public OSDetails withOSMajorVersion(String oSMajorVersion) {
        this.oSMajorVersion = oSMajorVersion;
        return this;
    }

    /**
     * Get the oSMinorVersion property: The OS Minor Version.
     * 
     * @return the oSMinorVersion value.
     */
    public String oSMinorVersion() {
        return this.oSMinorVersion;
    }

    /**
     * Set the oSMinorVersion property: The OS Minor Version.
     * 
     * @param oSMinorVersion the oSMinorVersion value to set.
     * @return the OSDetails object itself.
     */
    public OSDetails withOSMinorVersion(String oSMinorVersion) {
        this.oSMinorVersion = oSMinorVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osType", this.osType);
        jsonWriter.writeStringField("productType", this.productType);
        jsonWriter.writeStringField("osEdition", this.osEdition);
        jsonWriter.writeStringField("oSVersion", this.oSVersion);
        jsonWriter.writeStringField("oSMajorVersion", this.oSMajorVersion);
        jsonWriter.writeStringField("oSMinorVersion", this.oSMinorVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OSDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OSDetails if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the OSDetails.
     */
    public static OSDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OSDetails deserializedOSDetails = new OSDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedOSDetails.osType = reader.getString();
                } else if ("productType".equals(fieldName)) {
                    deserializedOSDetails.productType = reader.getString();
                } else if ("osEdition".equals(fieldName)) {
                    deserializedOSDetails.osEdition = reader.getString();
                } else if ("oSVersion".equals(fieldName)) {
                    deserializedOSDetails.oSVersion = reader.getString();
                } else if ("oSMajorVersion".equals(fieldName)) {
                    deserializedOSDetails.oSMajorVersion = reader.getString();
                } else if ("oSMinorVersion".equals(fieldName)) {
                    deserializedOSDetails.oSMinorVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOSDetails;
        });
    }
}
