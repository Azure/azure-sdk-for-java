// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the gateway operation.
 */
@Immutable
public final class GatewayOperationDetails implements JsonSerializable<GatewayOperationDetails> {
    /*
     * A value indicating the state of gateway operation.
     */
    private String state;

    /*
     * A value indicating the progress percentage of gateway operation.
     */
    private Integer progressPercentage;

    /*
     * A value indicating the time elapsed for the operation in milliseconds.
     */
    private Long timeElapsed;

    /*
     * A value indicating the time remaining for the operation in milliseconds.
     */
    private Long timeRemaining;

    /*
     * A value indicating the upload speed in bytes per second.
     */
    private Long uploadSpeed;

    /*
     * A value indicating the ESXi host name.
     */
    private String hostname;

    /*
     * A value indicating the datastore collection.
     */
    private List<String> dataStores;

    /*
     * A value indicating the VMware read throughput in bytes per second.
     */
    private Long vmwareReadThroughput;

    /**
     * Creates an instance of GatewayOperationDetails class.
     */
    public GatewayOperationDetails() {
    }

    /**
     * Get the state property: A value indicating the state of gateway operation.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the progressPercentage property: A value indicating the progress percentage of gateway operation.
     * 
     * @return the progressPercentage value.
     */
    public Integer progressPercentage() {
        return this.progressPercentage;
    }

    /**
     * Get the timeElapsed property: A value indicating the time elapsed for the operation in milliseconds.
     * 
     * @return the timeElapsed value.
     */
    public Long timeElapsed() {
        return this.timeElapsed;
    }

    /**
     * Get the timeRemaining property: A value indicating the time remaining for the operation in milliseconds.
     * 
     * @return the timeRemaining value.
     */
    public Long timeRemaining() {
        return this.timeRemaining;
    }

    /**
     * Get the uploadSpeed property: A value indicating the upload speed in bytes per second.
     * 
     * @return the uploadSpeed value.
     */
    public Long uploadSpeed() {
        return this.uploadSpeed;
    }

    /**
     * Get the hostname property: A value indicating the ESXi host name.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the dataStores property: A value indicating the datastore collection.
     * 
     * @return the dataStores value.
     */
    public List<String> dataStores() {
        return this.dataStores;
    }

    /**
     * Get the vmwareReadThroughput property: A value indicating the VMware read throughput in bytes per second.
     * 
     * @return the vmwareReadThroughput value.
     */
    public Long vmwareReadThroughput() {
        return this.vmwareReadThroughput;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GatewayOperationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GatewayOperationDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GatewayOperationDetails.
     */
    public static GatewayOperationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GatewayOperationDetails deserializedGatewayOperationDetails = new GatewayOperationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedGatewayOperationDetails.state = reader.getString();
                } else if ("progressPercentage".equals(fieldName)) {
                    deserializedGatewayOperationDetails.progressPercentage = reader.getNullable(JsonReader::getInt);
                } else if ("timeElapsed".equals(fieldName)) {
                    deserializedGatewayOperationDetails.timeElapsed = reader.getNullable(JsonReader::getLong);
                } else if ("timeRemaining".equals(fieldName)) {
                    deserializedGatewayOperationDetails.timeRemaining = reader.getNullable(JsonReader::getLong);
                } else if ("uploadSpeed".equals(fieldName)) {
                    deserializedGatewayOperationDetails.uploadSpeed = reader.getNullable(JsonReader::getLong);
                } else if ("hostName".equals(fieldName)) {
                    deserializedGatewayOperationDetails.hostname = reader.getString();
                } else if ("dataStores".equals(fieldName)) {
                    List<String> dataStores = reader.readArray(reader1 -> reader1.getString());
                    deserializedGatewayOperationDetails.dataStores = dataStores;
                } else if ("vmwareReadThroughput".equals(fieldName)) {
                    deserializedGatewayOperationDetails.vmwareReadThroughput = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGatewayOperationDetails;
        });
    }
}
