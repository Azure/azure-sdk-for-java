// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model class for event details of a job status event.
 */
@Fluent
public final class JobStatusEventDetails extends EventSpecificDetails {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "JobStatus";

    /*
     * Job arm id for the event.
     */
    private String jobId;

    /*
     * JobName for the Event.
     */
    private String jobFriendlyName;

    /*
     * JobStatus for the Event.
     */
    private String jobStatus;

    /*
     * AffectedObjectType for the event.
     */
    private String affectedObjectType;

    /**
     * Creates an instance of JobStatusEventDetails class.
     */
    public JobStatusEventDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the jobId property: Job arm id for the event.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: Job arm id for the event.
     * 
     * @param jobId the jobId value to set.
     * @return the JobStatusEventDetails object itself.
     */
    public JobStatusEventDetails withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the jobFriendlyName property: JobName for the Event.
     * 
     * @return the jobFriendlyName value.
     */
    public String jobFriendlyName() {
        return this.jobFriendlyName;
    }

    /**
     * Set the jobFriendlyName property: JobName for the Event.
     * 
     * @param jobFriendlyName the jobFriendlyName value to set.
     * @return the JobStatusEventDetails object itself.
     */
    public JobStatusEventDetails withJobFriendlyName(String jobFriendlyName) {
        this.jobFriendlyName = jobFriendlyName;
        return this;
    }

    /**
     * Get the jobStatus property: JobStatus for the Event.
     * 
     * @return the jobStatus value.
     */
    public String jobStatus() {
        return this.jobStatus;
    }

    /**
     * Set the jobStatus property: JobStatus for the Event.
     * 
     * @param jobStatus the jobStatus value to set.
     * @return the JobStatusEventDetails object itself.
     */
    public JobStatusEventDetails withJobStatus(String jobStatus) {
        this.jobStatus = jobStatus;
        return this;
    }

    /**
     * Get the affectedObjectType property: AffectedObjectType for the event.
     * 
     * @return the affectedObjectType value.
     */
    public String affectedObjectType() {
        return this.affectedObjectType;
    }

    /**
     * Set the affectedObjectType property: AffectedObjectType for the event.
     * 
     * @param affectedObjectType the affectedObjectType value to set.
     * @return the JobStatusEventDetails object itself.
     */
    public JobStatusEventDetails withAffectedObjectType(String affectedObjectType) {
        this.affectedObjectType = affectedObjectType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("jobId", this.jobId);
        jsonWriter.writeStringField("jobFriendlyName", this.jobFriendlyName);
        jsonWriter.writeStringField("jobStatus", this.jobStatus);
        jsonWriter.writeStringField("affectedObjectType", this.affectedObjectType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobStatusEventDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobStatusEventDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobStatusEventDetails.
     */
    public static JobStatusEventDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobStatusEventDetails deserializedJobStatusEventDetails = new JobStatusEventDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedJobStatusEventDetails.instanceType = reader.getString();
                } else if ("jobId".equals(fieldName)) {
                    deserializedJobStatusEventDetails.jobId = reader.getString();
                } else if ("jobFriendlyName".equals(fieldName)) {
                    deserializedJobStatusEventDetails.jobFriendlyName = reader.getString();
                } else if ("jobStatus".equals(fieldName)) {
                    deserializedJobStatusEventDetails.jobStatus = reader.getString();
                } else if ("affectedObjectType".equals(fieldName)) {
                    deserializedJobStatusEventDetails.affectedObjectType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobStatusEventDetails;
        });
    }
}
