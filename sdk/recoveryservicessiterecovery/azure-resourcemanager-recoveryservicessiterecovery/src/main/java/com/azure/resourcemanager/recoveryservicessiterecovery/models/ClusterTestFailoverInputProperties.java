// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input definition for test failover input properties.
 */
@Fluent
public final class ClusterTestFailoverInputProperties implements JsonSerializable<ClusterTestFailoverInputProperties> {
    /*
     * Failover direction.
     */
    private FailoverDirection failoverDirection;

    /*
     * Network type to be used for test failover.
     */
    private String networkType;

    /*
     * The id of the network to be used for test failover.
     */
    private String networkId;

    /*
     * Provider specific settings.
     */
    private ClusterTestFailoverProviderSpecificInput providerSpecificDetails;

    /**
     * Creates an instance of ClusterTestFailoverInputProperties class.
     */
    public ClusterTestFailoverInputProperties() {
    }

    /**
     * Get the failoverDirection property: Failover direction.
     * 
     * @return the failoverDirection value.
     */
    public FailoverDirection failoverDirection() {
        return this.failoverDirection;
    }

    /**
     * Set the failoverDirection property: Failover direction.
     * 
     * @param failoverDirection the failoverDirection value to set.
     * @return the ClusterTestFailoverInputProperties object itself.
     */
    public ClusterTestFailoverInputProperties withFailoverDirection(FailoverDirection failoverDirection) {
        this.failoverDirection = failoverDirection;
        return this;
    }

    /**
     * Get the networkType property: Network type to be used for test failover.
     * 
     * @return the networkType value.
     */
    public String networkType() {
        return this.networkType;
    }

    /**
     * Set the networkType property: Network type to be used for test failover.
     * 
     * @param networkType the networkType value to set.
     * @return the ClusterTestFailoverInputProperties object itself.
     */
    public ClusterTestFailoverInputProperties withNetworkType(String networkType) {
        this.networkType = networkType;
        return this;
    }

    /**
     * Get the networkId property: The id of the network to be used for test failover.
     * 
     * @return the networkId value.
     */
    public String networkId() {
        return this.networkId;
    }

    /**
     * Set the networkId property: The id of the network to be used for test failover.
     * 
     * @param networkId the networkId value to set.
     * @return the ClusterTestFailoverInputProperties object itself.
     */
    public ClusterTestFailoverInputProperties withNetworkId(String networkId) {
        this.networkId = networkId;
        return this;
    }

    /**
     * Get the providerSpecificDetails property: Provider specific settings.
     * 
     * @return the providerSpecificDetails value.
     */
    public ClusterTestFailoverProviderSpecificInput providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: Provider specific settings.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the ClusterTestFailoverInputProperties object itself.
     */
    public ClusterTestFailoverInputProperties
        withProviderSpecificDetails(ClusterTestFailoverProviderSpecificInput providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerSpecificDetails() != null) {
            providerSpecificDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("failoverDirection",
            this.failoverDirection == null ? null : this.failoverDirection.toString());
        jsonWriter.writeStringField("networkType", this.networkType);
        jsonWriter.writeStringField("networkId", this.networkId);
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterTestFailoverInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterTestFailoverInputProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterTestFailoverInputProperties.
     */
    public static ClusterTestFailoverInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterTestFailoverInputProperties deserializedClusterTestFailoverInputProperties
                = new ClusterTestFailoverInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failoverDirection".equals(fieldName)) {
                    deserializedClusterTestFailoverInputProperties.failoverDirection
                        = FailoverDirection.fromString(reader.getString());
                } else if ("networkType".equals(fieldName)) {
                    deserializedClusterTestFailoverInputProperties.networkType = reader.getString();
                } else if ("networkId".equals(fieldName)) {
                    deserializedClusterTestFailoverInputProperties.networkId = reader.getString();
                } else if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedClusterTestFailoverInputProperties.providerSpecificDetails
                        = ClusterTestFailoverProviderSpecificInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterTestFailoverInputProperties;
        });
    }
}
