// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of an add provider request.
 */
@Fluent
public final class AddRecoveryServicesProviderInputProperties
    implements JsonSerializable<AddRecoveryServicesProviderInputProperties> {
    /*
     * The name of the machine where the provider is getting added.
     */
    private String machineName;

    /*
     * The Id of the machine where the provider is getting added.
     */
    private String machineId;

    /*
     * The Bios Id of the machine.
     */
    private String biosId;

    /*
     * The identity provider input for DRA authentication.
     */
    private IdentityProviderInput authenticationIdentityInput;

    /*
     * The identity provider input for resource access.
     */
    private IdentityProviderInput resourceAccessIdentityInput;

    /*
     * The identity provider input for data plane authentication.
     */
    private IdentityProviderInput dataPlaneAuthenticationIdentityInput;

    /**
     * Creates an instance of AddRecoveryServicesProviderInputProperties class.
     */
    public AddRecoveryServicesProviderInputProperties() {
    }

    /**
     * Get the machineName property: The name of the machine where the provider is getting added.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Set the machineName property: The name of the machine where the provider is getting added.
     * 
     * @param machineName the machineName value to set.
     * @return the AddRecoveryServicesProviderInputProperties object itself.
     */
    public AddRecoveryServicesProviderInputProperties withMachineName(String machineName) {
        this.machineName = machineName;
        return this;
    }

    /**
     * Get the machineId property: The Id of the machine where the provider is getting added.
     * 
     * @return the machineId value.
     */
    public String machineId() {
        return this.machineId;
    }

    /**
     * Set the machineId property: The Id of the machine where the provider is getting added.
     * 
     * @param machineId the machineId value to set.
     * @return the AddRecoveryServicesProviderInputProperties object itself.
     */
    public AddRecoveryServicesProviderInputProperties withMachineId(String machineId) {
        this.machineId = machineId;
        return this;
    }

    /**
     * Get the biosId property: The Bios Id of the machine.
     * 
     * @return the biosId value.
     */
    public String biosId() {
        return this.biosId;
    }

    /**
     * Set the biosId property: The Bios Id of the machine.
     * 
     * @param biosId the biosId value to set.
     * @return the AddRecoveryServicesProviderInputProperties object itself.
     */
    public AddRecoveryServicesProviderInputProperties withBiosId(String biosId) {
        this.biosId = biosId;
        return this;
    }

    /**
     * Get the authenticationIdentityInput property: The identity provider input for DRA authentication.
     * 
     * @return the authenticationIdentityInput value.
     */
    public IdentityProviderInput authenticationIdentityInput() {
        return this.authenticationIdentityInput;
    }

    /**
     * Set the authenticationIdentityInput property: The identity provider input for DRA authentication.
     * 
     * @param authenticationIdentityInput the authenticationIdentityInput value to set.
     * @return the AddRecoveryServicesProviderInputProperties object itself.
     */
    public AddRecoveryServicesProviderInputProperties
        withAuthenticationIdentityInput(IdentityProviderInput authenticationIdentityInput) {
        this.authenticationIdentityInput = authenticationIdentityInput;
        return this;
    }

    /**
     * Get the resourceAccessIdentityInput property: The identity provider input for resource access.
     * 
     * @return the resourceAccessIdentityInput value.
     */
    public IdentityProviderInput resourceAccessIdentityInput() {
        return this.resourceAccessIdentityInput;
    }

    /**
     * Set the resourceAccessIdentityInput property: The identity provider input for resource access.
     * 
     * @param resourceAccessIdentityInput the resourceAccessIdentityInput value to set.
     * @return the AddRecoveryServicesProviderInputProperties object itself.
     */
    public AddRecoveryServicesProviderInputProperties
        withResourceAccessIdentityInput(IdentityProviderInput resourceAccessIdentityInput) {
        this.resourceAccessIdentityInput = resourceAccessIdentityInput;
        return this;
    }

    /**
     * Get the dataPlaneAuthenticationIdentityInput property: The identity provider input for data plane authentication.
     * 
     * @return the dataPlaneAuthenticationIdentityInput value.
     */
    public IdentityProviderInput dataPlaneAuthenticationIdentityInput() {
        return this.dataPlaneAuthenticationIdentityInput;
    }

    /**
     * Set the dataPlaneAuthenticationIdentityInput property: The identity provider input for data plane authentication.
     * 
     * @param dataPlaneAuthenticationIdentityInput the dataPlaneAuthenticationIdentityInput value to set.
     * @return the AddRecoveryServicesProviderInputProperties object itself.
     */
    public AddRecoveryServicesProviderInputProperties
        withDataPlaneAuthenticationIdentityInput(IdentityProviderInput dataPlaneAuthenticationIdentityInput) {
        this.dataPlaneAuthenticationIdentityInput = dataPlaneAuthenticationIdentityInput;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (machineName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineName in model AddRecoveryServicesProviderInputProperties"));
        }
        if (authenticationIdentityInput() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authenticationIdentityInput in model AddRecoveryServicesProviderInputProperties"));
        } else {
            authenticationIdentityInput().validate();
        }
        if (resourceAccessIdentityInput() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceAccessIdentityInput in model AddRecoveryServicesProviderInputProperties"));
        } else {
            resourceAccessIdentityInput().validate();
        }
        if (dataPlaneAuthenticationIdentityInput() != null) {
            dataPlaneAuthenticationIdentityInput().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AddRecoveryServicesProviderInputProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("machineName", this.machineName);
        jsonWriter.writeJsonField("authenticationIdentityInput", this.authenticationIdentityInput);
        jsonWriter.writeJsonField("resourceAccessIdentityInput", this.resourceAccessIdentityInput);
        jsonWriter.writeStringField("machineId", this.machineId);
        jsonWriter.writeStringField("biosId", this.biosId);
        jsonWriter.writeJsonField("dataPlaneAuthenticationIdentityInput", this.dataPlaneAuthenticationIdentityInput);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddRecoveryServicesProviderInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddRecoveryServicesProviderInputProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AddRecoveryServicesProviderInputProperties.
     */
    public static AddRecoveryServicesProviderInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddRecoveryServicesProviderInputProperties deserializedAddRecoveryServicesProviderInputProperties
                = new AddRecoveryServicesProviderInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("machineName".equals(fieldName)) {
                    deserializedAddRecoveryServicesProviderInputProperties.machineName = reader.getString();
                } else if ("authenticationIdentityInput".equals(fieldName)) {
                    deserializedAddRecoveryServicesProviderInputProperties.authenticationIdentityInput
                        = IdentityProviderInput.fromJson(reader);
                } else if ("resourceAccessIdentityInput".equals(fieldName)) {
                    deserializedAddRecoveryServicesProviderInputProperties.resourceAccessIdentityInput
                        = IdentityProviderInput.fromJson(reader);
                } else if ("machineId".equals(fieldName)) {
                    deserializedAddRecoveryServicesProviderInputProperties.machineId = reader.getString();
                } else if ("biosId".equals(fieldName)) {
                    deserializedAddRecoveryServicesProviderInputProperties.biosId = reader.getString();
                } else if ("dataPlaneAuthenticationIdentityInput".equals(fieldName)) {
                    deserializedAddRecoveryServicesProviderInputProperties.dataPlaneAuthenticationIdentityInput
                        = IdentityProviderInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddRecoveryServicesProviderInputProperties;
        });
    }
}
