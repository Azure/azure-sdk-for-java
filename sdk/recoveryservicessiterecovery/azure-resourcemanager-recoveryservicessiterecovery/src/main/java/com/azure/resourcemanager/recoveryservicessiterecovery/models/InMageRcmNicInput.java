// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * InMageRcm NIC input.
 */
@Fluent
public final class InMageRcmNicInput implements JsonSerializable<InMageRcmNicInput> {
    /*
     * The NIC Id.
     */
    private String nicId;

    /*
     * A value indicating whether this is the primary NIC.
     */
    private String isPrimaryNic;

    /*
     * A value indicating whether this NIC is selected for failover.
     */
    private String isSelectedForFailover;

    /*
     * Target subnet name.
     */
    private String targetSubnetName;

    /*
     * The target static IP address.
     */
    private String targetStaticIpAddress;

    /*
     * The test subnet name.
     */
    private String testSubnetName;

    /*
     * The test static IP address.
     */
    private String testStaticIpAddress;

    /**
     * Creates an instance of InMageRcmNicInput class.
     */
    public InMageRcmNicInput() {
    }

    /**
     * Get the nicId property: The NIC Id.
     * 
     * @return the nicId value.
     */
    public String nicId() {
        return this.nicId;
    }

    /**
     * Set the nicId property: The NIC Id.
     * 
     * @param nicId the nicId value to set.
     * @return the InMageRcmNicInput object itself.
     */
    public InMageRcmNicInput withNicId(String nicId) {
        this.nicId = nicId;
        return this;
    }

    /**
     * Get the isPrimaryNic property: A value indicating whether this is the primary NIC.
     * 
     * @return the isPrimaryNic value.
     */
    public String isPrimaryNic() {
        return this.isPrimaryNic;
    }

    /**
     * Set the isPrimaryNic property: A value indicating whether this is the primary NIC.
     * 
     * @param isPrimaryNic the isPrimaryNic value to set.
     * @return the InMageRcmNicInput object itself.
     */
    public InMageRcmNicInput withIsPrimaryNic(String isPrimaryNic) {
        this.isPrimaryNic = isPrimaryNic;
        return this;
    }

    /**
     * Get the isSelectedForFailover property: A value indicating whether this NIC is selected for failover.
     * 
     * @return the isSelectedForFailover value.
     */
    public String isSelectedForFailover() {
        return this.isSelectedForFailover;
    }

    /**
     * Set the isSelectedForFailover property: A value indicating whether this NIC is selected for failover.
     * 
     * @param isSelectedForFailover the isSelectedForFailover value to set.
     * @return the InMageRcmNicInput object itself.
     */
    public InMageRcmNicInput withIsSelectedForFailover(String isSelectedForFailover) {
        this.isSelectedForFailover = isSelectedForFailover;
        return this;
    }

    /**
     * Get the targetSubnetName property: Target subnet name.
     * 
     * @return the targetSubnetName value.
     */
    public String targetSubnetName() {
        return this.targetSubnetName;
    }

    /**
     * Set the targetSubnetName property: Target subnet name.
     * 
     * @param targetSubnetName the targetSubnetName value to set.
     * @return the InMageRcmNicInput object itself.
     */
    public InMageRcmNicInput withTargetSubnetName(String targetSubnetName) {
        this.targetSubnetName = targetSubnetName;
        return this;
    }

    /**
     * Get the targetStaticIpAddress property: The target static IP address.
     * 
     * @return the targetStaticIpAddress value.
     */
    public String targetStaticIpAddress() {
        return this.targetStaticIpAddress;
    }

    /**
     * Set the targetStaticIpAddress property: The target static IP address.
     * 
     * @param targetStaticIpAddress the targetStaticIpAddress value to set.
     * @return the InMageRcmNicInput object itself.
     */
    public InMageRcmNicInput withTargetStaticIpAddress(String targetStaticIpAddress) {
        this.targetStaticIpAddress = targetStaticIpAddress;
        return this;
    }

    /**
     * Get the testSubnetName property: The test subnet name.
     * 
     * @return the testSubnetName value.
     */
    public String testSubnetName() {
        return this.testSubnetName;
    }

    /**
     * Set the testSubnetName property: The test subnet name.
     * 
     * @param testSubnetName the testSubnetName value to set.
     * @return the InMageRcmNicInput object itself.
     */
    public InMageRcmNicInput withTestSubnetName(String testSubnetName) {
        this.testSubnetName = testSubnetName;
        return this;
    }

    /**
     * Get the testStaticIpAddress property: The test static IP address.
     * 
     * @return the testStaticIpAddress value.
     */
    public String testStaticIpAddress() {
        return this.testStaticIpAddress;
    }

    /**
     * Set the testStaticIpAddress property: The test static IP address.
     * 
     * @param testStaticIpAddress the testStaticIpAddress value to set.
     * @return the InMageRcmNicInput object itself.
     */
    public InMageRcmNicInput withTestStaticIpAddress(String testStaticIpAddress) {
        this.testStaticIpAddress = testStaticIpAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nicId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property nicId in model InMageRcmNicInput"));
        }
        if (isPrimaryNic() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property isPrimaryNic in model InMageRcmNicInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InMageRcmNicInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nicId", this.nicId);
        jsonWriter.writeStringField("isPrimaryNic", this.isPrimaryNic);
        jsonWriter.writeStringField("isSelectedForFailover", this.isSelectedForFailover);
        jsonWriter.writeStringField("targetSubnetName", this.targetSubnetName);
        jsonWriter.writeStringField("targetStaticIPAddress", this.targetStaticIpAddress);
        jsonWriter.writeStringField("testSubnetName", this.testSubnetName);
        jsonWriter.writeStringField("testStaticIPAddress", this.testStaticIpAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmNicInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmNicInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InMageRcmNicInput.
     */
    public static InMageRcmNicInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmNicInput deserializedInMageRcmNicInput = new InMageRcmNicInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nicId".equals(fieldName)) {
                    deserializedInMageRcmNicInput.nicId = reader.getString();
                } else if ("isPrimaryNic".equals(fieldName)) {
                    deserializedInMageRcmNicInput.isPrimaryNic = reader.getString();
                } else if ("isSelectedForFailover".equals(fieldName)) {
                    deserializedInMageRcmNicInput.isSelectedForFailover = reader.getString();
                } else if ("targetSubnetName".equals(fieldName)) {
                    deserializedInMageRcmNicInput.targetSubnetName = reader.getString();
                } else if ("targetStaticIPAddress".equals(fieldName)) {
                    deserializedInMageRcmNicInput.targetStaticIpAddress = reader.getString();
                } else if ("testSubnetName".equals(fieldName)) {
                    deserializedInMageRcmNicInput.testSubnetName = reader.getString();
                } else if ("testStaticIPAddress".equals(fieldName)) {
                    deserializedInMageRcmNicInput.testStaticIpAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmNicInput;
        });
    }
}
