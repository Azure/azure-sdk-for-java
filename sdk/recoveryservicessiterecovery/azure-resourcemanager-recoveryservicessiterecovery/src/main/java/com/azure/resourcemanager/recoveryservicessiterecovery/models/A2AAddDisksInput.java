// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A2A add disk(s) input.
 */
@Fluent
public final class A2AAddDisksInput extends AddDisksProviderSpecificInput {
    /*
     * The class type.
     */
    private String instanceType = "A2A";

    /*
     * The list of vm disk details.
     */
    private List<A2AVmDiskInputDetails> vmDisks;

    /*
     * The list of vm managed disk details.
     */
    private List<A2AVmManagedDiskInputDetails> vmManagedDisks;

    /**
     * Creates an instance of A2AAddDisksInput class.
     */
    public A2AAddDisksInput() {
    }

    /**
     * Get the instanceType property: The class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the vmDisks property: The list of vm disk details.
     * 
     * @return the vmDisks value.
     */
    public List<A2AVmDiskInputDetails> vmDisks() {
        return this.vmDisks;
    }

    /**
     * Set the vmDisks property: The list of vm disk details.
     * 
     * @param vmDisks the vmDisks value to set.
     * @return the A2AAddDisksInput object itself.
     */
    public A2AAddDisksInput withVmDisks(List<A2AVmDiskInputDetails> vmDisks) {
        this.vmDisks = vmDisks;
        return this;
    }

    /**
     * Get the vmManagedDisks property: The list of vm managed disk details.
     * 
     * @return the vmManagedDisks value.
     */
    public List<A2AVmManagedDiskInputDetails> vmManagedDisks() {
        return this.vmManagedDisks;
    }

    /**
     * Set the vmManagedDisks property: The list of vm managed disk details.
     * 
     * @param vmManagedDisks the vmManagedDisks value to set.
     * @return the A2AAddDisksInput object itself.
     */
    public A2AAddDisksInput withVmManagedDisks(List<A2AVmManagedDiskInputDetails> vmManagedDisks) {
        this.vmManagedDisks = vmManagedDisks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (vmDisks() != null) {
            vmDisks().forEach(e -> e.validate());
        }
        if (vmManagedDisks() != null) {
            vmManagedDisks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeArrayField("vmDisks", this.vmDisks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("vmManagedDisks", this.vmManagedDisks,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2AAddDisksInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2AAddDisksInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the A2AAddDisksInput.
     */
    public static A2AAddDisksInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2AAddDisksInput deserializedA2AAddDisksInput = new A2AAddDisksInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedA2AAddDisksInput.instanceType = reader.getString();
                } else if ("vmDisks".equals(fieldName)) {
                    List<A2AVmDiskInputDetails> vmDisks
                        = reader.readArray(reader1 -> A2AVmDiskInputDetails.fromJson(reader1));
                    deserializedA2AAddDisksInput.vmDisks = vmDisks;
                } else if ("vmManagedDisks".equals(fieldName)) {
                    List<A2AVmManagedDiskInputDetails> vmManagedDisks
                        = reader.readArray(reader1 -> A2AVmManagedDiskInputDetails.fromJson(reader1));
                    deserializedA2AAddDisksInput.vmManagedDisks = vmManagedDisks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedA2AAddDisksInput;
        });
    }
}
