// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Input definition for apply cluster recovery point properties.
 */
@Fluent
public final class ApplyClusterRecoveryPointInputProperties
    implements JsonSerializable<ApplyClusterRecoveryPointInputProperties> {
    /*
     * The cluster recovery point id to be passed to failover to a particular recovery point.
     */
    private String clusterRecoveryPointId;

    /*
     * The list of individual node recovery points.
     */
    private List<String> individualNodeRecoveryPoints;

    /*
     * The provider specific input for applying cluster recovery point.
     */
    private ApplyClusterRecoveryPointProviderSpecificInput providerSpecificDetails;

    /**
     * Creates an instance of ApplyClusterRecoveryPointInputProperties class.
     */
    public ApplyClusterRecoveryPointInputProperties() {
    }

    /**
     * Get the clusterRecoveryPointId property: The cluster recovery point id to be passed to failover to a particular
     * recovery point.
     * 
     * @return the clusterRecoveryPointId value.
     */
    public String clusterRecoveryPointId() {
        return this.clusterRecoveryPointId;
    }

    /**
     * Set the clusterRecoveryPointId property: The cluster recovery point id to be passed to failover to a particular
     * recovery point.
     * 
     * @param clusterRecoveryPointId the clusterRecoveryPointId value to set.
     * @return the ApplyClusterRecoveryPointInputProperties object itself.
     */
    public ApplyClusterRecoveryPointInputProperties withClusterRecoveryPointId(String clusterRecoveryPointId) {
        this.clusterRecoveryPointId = clusterRecoveryPointId;
        return this;
    }

    /**
     * Get the individualNodeRecoveryPoints property: The list of individual node recovery points.
     * 
     * @return the individualNodeRecoveryPoints value.
     */
    public List<String> individualNodeRecoveryPoints() {
        return this.individualNodeRecoveryPoints;
    }

    /**
     * Set the individualNodeRecoveryPoints property: The list of individual node recovery points.
     * 
     * @param individualNodeRecoveryPoints the individualNodeRecoveryPoints value to set.
     * @return the ApplyClusterRecoveryPointInputProperties object itself.
     */
    public ApplyClusterRecoveryPointInputProperties
        withIndividualNodeRecoveryPoints(List<String> individualNodeRecoveryPoints) {
        this.individualNodeRecoveryPoints = individualNodeRecoveryPoints;
        return this;
    }

    /**
     * Get the providerSpecificDetails property: The provider specific input for applying cluster recovery point.
     * 
     * @return the providerSpecificDetails value.
     */
    public ApplyClusterRecoveryPointProviderSpecificInput providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: The provider specific input for applying cluster recovery point.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the ApplyClusterRecoveryPointInputProperties object itself.
     */
    public ApplyClusterRecoveryPointInputProperties
        withProviderSpecificDetails(ApplyClusterRecoveryPointProviderSpecificInput providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerSpecificDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property providerSpecificDetails in model ApplyClusterRecoveryPointInputProperties"));
        } else {
            providerSpecificDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplyClusterRecoveryPointInputProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        jsonWriter.writeStringField("clusterRecoveryPointId", this.clusterRecoveryPointId);
        jsonWriter.writeArrayField("individualNodeRecoveryPoints", this.individualNodeRecoveryPoints,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplyClusterRecoveryPointInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplyClusterRecoveryPointInputProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplyClusterRecoveryPointInputProperties.
     */
    public static ApplyClusterRecoveryPointInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplyClusterRecoveryPointInputProperties deserializedApplyClusterRecoveryPointInputProperties
                = new ApplyClusterRecoveryPointInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedApplyClusterRecoveryPointInputProperties.providerSpecificDetails
                        = ApplyClusterRecoveryPointProviderSpecificInput.fromJson(reader);
                } else if ("clusterRecoveryPointId".equals(fieldName)) {
                    deserializedApplyClusterRecoveryPointInputProperties.clusterRecoveryPointId = reader.getString();
                } else if ("individualNodeRecoveryPoints".equals(fieldName)) {
                    List<String> individualNodeRecoveryPoints = reader.readArray(reader1 -> reader1.getString());
                    deserializedApplyClusterRecoveryPointInputProperties.individualNodeRecoveryPoints
                        = individualNodeRecoveryPoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplyClusterRecoveryPointInputProperties;
        });
    }
}
