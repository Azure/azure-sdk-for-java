// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VMwareCbt disk input.
 */
@Fluent
public final class VMwareCbtDiskInput implements JsonSerializable<VMwareCbtDiskInput> {
    /*
     * The disk Id.
     */
    private String diskId;

    /*
     * The disk type.
     */
    private DiskAccountType diskType;

    /*
     * A value indicating whether the disk is the OS disk.
     */
    private String isOSDisk;

    /*
     * The log storage account ARM Id.
     */
    private String logStorageAccountId;

    /*
     * The key vault secret name of the log storage account.
     */
    private String logStorageAccountSasSecretName;

    /*
     * The DiskEncryptionSet ARM Id.
     */
    private String diskEncryptionSetId;

    /**
     * Creates an instance of VMwareCbtDiskInput class.
     */
    public VMwareCbtDiskInput() {
    }

    /**
     * Get the diskId property: The disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: The disk Id.
     * 
     * @param diskId the diskId value to set.
     * @return the VMwareCbtDiskInput object itself.
     */
    public VMwareCbtDiskInput withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the diskType property: The disk type.
     * 
     * @return the diskType value.
     */
    public DiskAccountType diskType() {
        return this.diskType;
    }

    /**
     * Set the diskType property: The disk type.
     * 
     * @param diskType the diskType value to set.
     * @return the VMwareCbtDiskInput object itself.
     */
    public VMwareCbtDiskInput withDiskType(DiskAccountType diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Get the isOSDisk property: A value indicating whether the disk is the OS disk.
     * 
     * @return the isOSDisk value.
     */
    public String isOSDisk() {
        return this.isOSDisk;
    }

    /**
     * Set the isOSDisk property: A value indicating whether the disk is the OS disk.
     * 
     * @param isOSDisk the isOSDisk value to set.
     * @return the VMwareCbtDiskInput object itself.
     */
    public VMwareCbtDiskInput withIsOSDisk(String isOSDisk) {
        this.isOSDisk = isOSDisk;
        return this;
    }

    /**
     * Get the logStorageAccountId property: The log storage account ARM Id.
     * 
     * @return the logStorageAccountId value.
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * Set the logStorageAccountId property: The log storage account ARM Id.
     * 
     * @param logStorageAccountId the logStorageAccountId value to set.
     * @return the VMwareCbtDiskInput object itself.
     */
    public VMwareCbtDiskInput withLogStorageAccountId(String logStorageAccountId) {
        this.logStorageAccountId = logStorageAccountId;
        return this;
    }

    /**
     * Get the logStorageAccountSasSecretName property: The key vault secret name of the log storage account.
     * 
     * @return the logStorageAccountSasSecretName value.
     */
    public String logStorageAccountSasSecretName() {
        return this.logStorageAccountSasSecretName;
    }

    /**
     * Set the logStorageAccountSasSecretName property: The key vault secret name of the log storage account.
     * 
     * @param logStorageAccountSasSecretName the logStorageAccountSasSecretName value to set.
     * @return the VMwareCbtDiskInput object itself.
     */
    public VMwareCbtDiskInput withLogStorageAccountSasSecretName(String logStorageAccountSasSecretName) {
        this.logStorageAccountSasSecretName = logStorageAccountSasSecretName;
        return this;
    }

    /**
     * Get the diskEncryptionSetId property: The DiskEncryptionSet ARM Id.
     * 
     * @return the diskEncryptionSetId value.
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * Set the diskEncryptionSetId property: The DiskEncryptionSet ARM Id.
     * 
     * @param diskEncryptionSetId the diskEncryptionSetId value to set.
     * @return the VMwareCbtDiskInput object itself.
     */
    public VMwareCbtDiskInput withDiskEncryptionSetId(String diskEncryptionSetId) {
        this.diskEncryptionSetId = diskEncryptionSetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property diskId in model VMwareCbtDiskInput"));
        }
        if (isOSDisk() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property isOSDisk in model VMwareCbtDiskInput"));
        }
        if (logStorageAccountId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logStorageAccountId in model VMwareCbtDiskInput"));
        }
        if (logStorageAccountSasSecretName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logStorageAccountSasSecretName in model VMwareCbtDiskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VMwareCbtDiskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeStringField("isOSDisk", this.isOSDisk);
        jsonWriter.writeStringField("logStorageAccountId", this.logStorageAccountId);
        jsonWriter.writeStringField("logStorageAccountSasSecretName", this.logStorageAccountSasSecretName);
        jsonWriter.writeStringField("diskType", this.diskType == null ? null : this.diskType.toString());
        jsonWriter.writeStringField("diskEncryptionSetId", this.diskEncryptionSetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareCbtDiskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareCbtDiskInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VMwareCbtDiskInput.
     */
    public static VMwareCbtDiskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareCbtDiskInput deserializedVMwareCbtDiskInput = new VMwareCbtDiskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedVMwareCbtDiskInput.diskId = reader.getString();
                } else if ("isOSDisk".equals(fieldName)) {
                    deserializedVMwareCbtDiskInput.isOSDisk = reader.getString();
                } else if ("logStorageAccountId".equals(fieldName)) {
                    deserializedVMwareCbtDiskInput.logStorageAccountId = reader.getString();
                } else if ("logStorageAccountSasSecretName".equals(fieldName)) {
                    deserializedVMwareCbtDiskInput.logStorageAccountSasSecretName = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedVMwareCbtDiskInput.diskType = DiskAccountType.fromString(reader.getString());
                } else if ("diskEncryptionSetId".equals(fieldName)) {
                    deserializedVMwareCbtDiskInput.diskEncryptionSetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareCbtDiskInput;
        });
    }
}
