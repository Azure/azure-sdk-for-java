// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * InMageRcm specific provider input.
 */
@Fluent
public final class InMageRcmReprotectInput extends ReverseReplicationProviderSpecificInput {
    /*
     * The class type.
     */
    private String instanceType = "InMageRcm";

    /*
     * The reprotect agent Id.
     */
    private String reprotectAgentId;

    /*
     * The target datastore name.
     */
    private String datastoreName;

    /*
     * The log storage account ARM Id.
     */
    private String logStorageAccountId;

    /*
     * The Policy Id.
     */
    private String policyId;

    /**
     * Creates an instance of InMageRcmReprotectInput class.
     */
    public InMageRcmReprotectInput() {
    }

    /**
     * Get the instanceType property: The class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the reprotectAgentId property: The reprotect agent Id.
     * 
     * @return the reprotectAgentId value.
     */
    public String reprotectAgentId() {
        return this.reprotectAgentId;
    }

    /**
     * Set the reprotectAgentId property: The reprotect agent Id.
     * 
     * @param reprotectAgentId the reprotectAgentId value to set.
     * @return the InMageRcmReprotectInput object itself.
     */
    public InMageRcmReprotectInput withReprotectAgentId(String reprotectAgentId) {
        this.reprotectAgentId = reprotectAgentId;
        return this;
    }

    /**
     * Get the datastoreName property: The target datastore name.
     * 
     * @return the datastoreName value.
     */
    public String datastoreName() {
        return this.datastoreName;
    }

    /**
     * Set the datastoreName property: The target datastore name.
     * 
     * @param datastoreName the datastoreName value to set.
     * @return the InMageRcmReprotectInput object itself.
     */
    public InMageRcmReprotectInput withDatastoreName(String datastoreName) {
        this.datastoreName = datastoreName;
        return this;
    }

    /**
     * Get the logStorageAccountId property: The log storage account ARM Id.
     * 
     * @return the logStorageAccountId value.
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * Set the logStorageAccountId property: The log storage account ARM Id.
     * 
     * @param logStorageAccountId the logStorageAccountId value to set.
     * @return the InMageRcmReprotectInput object itself.
     */
    public InMageRcmReprotectInput withLogStorageAccountId(String logStorageAccountId) {
        this.logStorageAccountId = logStorageAccountId;
        return this;
    }

    /**
     * Get the policyId property: The Policy Id.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: The Policy Id.
     * 
     * @param policyId the policyId value to set.
     * @return the InMageRcmReprotectInput object itself.
     */
    public InMageRcmReprotectInput withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (reprotectAgentId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property reprotectAgentId in model InMageRcmReprotectInput"));
        }
        if (datastoreName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property datastoreName in model InMageRcmReprotectInput"));
        }
        if (logStorageAccountId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logStorageAccountId in model InMageRcmReprotectInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InMageRcmReprotectInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reprotectAgentId", this.reprotectAgentId);
        jsonWriter.writeStringField("datastoreName", this.datastoreName);
        jsonWriter.writeStringField("logStorageAccountId", this.logStorageAccountId);
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("policyId", this.policyId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmReprotectInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmReprotectInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InMageRcmReprotectInput.
     */
    public static InMageRcmReprotectInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmReprotectInput deserializedInMageRcmReprotectInput = new InMageRcmReprotectInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reprotectAgentId".equals(fieldName)) {
                    deserializedInMageRcmReprotectInput.reprotectAgentId = reader.getString();
                } else if ("datastoreName".equals(fieldName)) {
                    deserializedInMageRcmReprotectInput.datastoreName = reader.getString();
                } else if ("logStorageAccountId".equals(fieldName)) {
                    deserializedInMageRcmReprotectInput.logStorageAccountId = reader.getString();
                } else if ("instanceType".equals(fieldName)) {
                    deserializedInMageRcmReprotectInput.instanceType = reader.getString();
                } else if ("policyId".equals(fieldName)) {
                    deserializedInMageRcmReprotectInput.policyId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmReprotectInput;
        });
    }
}
