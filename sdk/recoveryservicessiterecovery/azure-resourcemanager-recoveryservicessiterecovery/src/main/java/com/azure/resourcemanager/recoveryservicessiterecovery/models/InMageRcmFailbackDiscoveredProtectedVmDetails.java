// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * InMageRcmFailback discovered VM details.
 */
@Immutable
public final class InMageRcmFailbackDiscoveredProtectedVmDetails
    implements JsonSerializable<InMageRcmFailbackDiscoveredProtectedVmDetails> {
    /*
     * The VCenter Id.
     */
    private String vCenterId;

    /*
     * The VCenter fqdn.
     */
    private String vCenterFqdn;

    /*
     * The list of datastores.
     */
    private List<String> datastores;

    /*
     * The list of IP addresses.
     */
    private List<String> ipAddresses;

    /*
     * The VMware tools status.
     */
    private String vmwareToolsStatus;

    /*
     * The VM power status.
     */
    private String powerStatus;

    /*
     * The VM fqdn.
     */
    private String vmFqdn;

    /*
     * The VM's OS name.
     */
    private String osName;

    /*
     * The SDS created timestamp.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * The SDS updated timestamp.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * A value indicating whether the VM is deleted.
     */
    private Boolean isDeleted;

    /*
     * The last time when SDS information discovered in SRS.
     */
    private OffsetDateTime lastDiscoveryTimeInUtc;

    /**
     * Creates an instance of InMageRcmFailbackDiscoveredProtectedVmDetails class.
     */
    public InMageRcmFailbackDiscoveredProtectedVmDetails() {
    }

    /**
     * Get the vCenterId property: The VCenter Id.
     * 
     * @return the vCenterId value.
     */
    public String vCenterId() {
        return this.vCenterId;
    }

    /**
     * Get the vCenterFqdn property: The VCenter fqdn.
     * 
     * @return the vCenterFqdn value.
     */
    public String vCenterFqdn() {
        return this.vCenterFqdn;
    }

    /**
     * Get the datastores property: The list of datastores.
     * 
     * @return the datastores value.
     */
    public List<String> datastores() {
        return this.datastores;
    }

    /**
     * Get the ipAddresses property: The list of IP addresses.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the vmwareToolsStatus property: The VMware tools status.
     * 
     * @return the vmwareToolsStatus value.
     */
    public String vmwareToolsStatus() {
        return this.vmwareToolsStatus;
    }

    /**
     * Get the powerStatus property: The VM power status.
     * 
     * @return the powerStatus value.
     */
    public String powerStatus() {
        return this.powerStatus;
    }

    /**
     * Get the vmFqdn property: The VM fqdn.
     * 
     * @return the vmFqdn value.
     */
    public String vmFqdn() {
        return this.vmFqdn;
    }

    /**
     * Get the osName property: The VM's OS name.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Get the createdTimestamp property: The SDS created timestamp.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: The SDS updated timestamp.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the isDeleted property: A value indicating whether the VM is deleted.
     * 
     * @return the isDeleted value.
     */
    public Boolean isDeleted() {
        return this.isDeleted;
    }

    /**
     * Get the lastDiscoveryTimeInUtc property: The last time when SDS information discovered in SRS.
     * 
     * @return the lastDiscoveryTimeInUtc value.
     */
    public OffsetDateTime lastDiscoveryTimeInUtc() {
        return this.lastDiscoveryTimeInUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmFailbackDiscoveredProtectedVmDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmFailbackDiscoveredProtectedVmDetails if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageRcmFailbackDiscoveredProtectedVmDetails.
     */
    public static InMageRcmFailbackDiscoveredProtectedVmDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmFailbackDiscoveredProtectedVmDetails deserializedInMageRcmFailbackDiscoveredProtectedVmDetails
                = new InMageRcmFailbackDiscoveredProtectedVmDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vCenterId".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.vCenterId = reader.getString();
                } else if ("vCenterFqdn".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.vCenterFqdn = reader.getString();
                } else if ("datastores".equals(fieldName)) {
                    List<String> datastores = reader.readArray(reader1 -> reader1.getString());
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.datastores = datastores;
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.ipAddresses = ipAddresses;
                } else if ("vmwareToolsStatus".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.vmwareToolsStatus = reader.getString();
                } else if ("powerStatus".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.powerStatus = reader.getString();
                } else if ("vmFqdn".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.vmFqdn = reader.getString();
                } else if ("osName".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.osName = reader.getString();
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("isDeleted".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.isDeleted
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lastDiscoveryTimeInUtc".equals(fieldName)) {
                    deserializedInMageRcmFailbackDiscoveredProtectedVmDetails.lastDiscoveryTimeInUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmFailbackDiscoveredProtectedVmDetails;
        });
    }
}
