// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Encryption details for the fabric.
 */
@Fluent
public final class EncryptionDetails implements JsonSerializable<EncryptionDetails> {
    /*
     * The key encryption key state for the Vmm.
     */
    private String kekState;

    /*
     * The key encryption key certificate thumbprint.
     */
    private String kekCertThumbprint;

    /*
     * The key encryption key certificate expiry date.
     */
    private OffsetDateTime kekCertExpiryDate;

    /**
     * Creates an instance of EncryptionDetails class.
     */
    public EncryptionDetails() {
    }

    /**
     * Get the kekState property: The key encryption key state for the Vmm.
     * 
     * @return the kekState value.
     */
    public String kekState() {
        return this.kekState;
    }

    /**
     * Set the kekState property: The key encryption key state for the Vmm.
     * 
     * @param kekState the kekState value to set.
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withKekState(String kekState) {
        this.kekState = kekState;
        return this;
    }

    /**
     * Get the kekCertThumbprint property: The key encryption key certificate thumbprint.
     * 
     * @return the kekCertThumbprint value.
     */
    public String kekCertThumbprint() {
        return this.kekCertThumbprint;
    }

    /**
     * Set the kekCertThumbprint property: The key encryption key certificate thumbprint.
     * 
     * @param kekCertThumbprint the kekCertThumbprint value to set.
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withKekCertThumbprint(String kekCertThumbprint) {
        this.kekCertThumbprint = kekCertThumbprint;
        return this;
    }

    /**
     * Get the kekCertExpiryDate property: The key encryption key certificate expiry date.
     * 
     * @return the kekCertExpiryDate value.
     */
    public OffsetDateTime kekCertExpiryDate() {
        return this.kekCertExpiryDate;
    }

    /**
     * Set the kekCertExpiryDate property: The key encryption key certificate expiry date.
     * 
     * @param kekCertExpiryDate the kekCertExpiryDate value to set.
     * @return the EncryptionDetails object itself.
     */
    public EncryptionDetails withKekCertExpiryDate(OffsetDateTime kekCertExpiryDate) {
        this.kekCertExpiryDate = kekCertExpiryDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kekState", this.kekState);
        jsonWriter.writeStringField("kekCertThumbprint", this.kekCertThumbprint);
        jsonWriter.writeStringField("kekCertExpiryDate",
            this.kekCertExpiryDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.kekCertExpiryDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionDetails.
     */
    public static EncryptionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionDetails deserializedEncryptionDetails = new EncryptionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kekState".equals(fieldName)) {
                    deserializedEncryptionDetails.kekState = reader.getString();
                } else if ("kekCertThumbprint".equals(fieldName)) {
                    deserializedEncryptionDetails.kekCertThumbprint = reader.getString();
                } else if ("kekCertExpiryDate".equals(fieldName)) {
                    deserializedEncryptionDetails.kekCertExpiryDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionDetails;
        });
    }
}
