// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * This class represents the details for a failover job of cluster.
 */
@Fluent
public final class ClusterFailoverJobDetails extends JobDetails {
    /*
     * Gets the type of job details (see JobDetailsTypes enum for possible values).
     */
    private String instanceType = "ClusterFailoverJobDetails";

    /*
     * The test VM details.
     */
    private List<FailoverReplicationProtectedItemDetails> protectedItemDetails;

    /**
     * Creates an instance of ClusterFailoverJobDetails class.
     */
    public ClusterFailoverJobDetails() {
    }

    /**
     * Get the instanceType property: Gets the type of job details (see JobDetailsTypes enum for possible values).
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the protectedItemDetails property: The test VM details.
     * 
     * @return the protectedItemDetails value.
     */
    public List<FailoverReplicationProtectedItemDetails> protectedItemDetails() {
        return this.protectedItemDetails;
    }

    /**
     * Set the protectedItemDetails property: The test VM details.
     * 
     * @param protectedItemDetails the protectedItemDetails value to set.
     * @return the ClusterFailoverJobDetails object itself.
     */
    public ClusterFailoverJobDetails
        withProtectedItemDetails(List<FailoverReplicationProtectedItemDetails> protectedItemDetails) {
        this.protectedItemDetails = protectedItemDetails;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterFailoverJobDetails withAffectedObjectDetails(Map<String, String> affectedObjectDetails) {
        super.withAffectedObjectDetails(affectedObjectDetails);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (protectedItemDetails() != null) {
            protectedItemDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("affectedObjectDetails", affectedObjectDetails(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeArrayField("protectedItemDetails", this.protectedItemDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterFailoverJobDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterFailoverJobDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterFailoverJobDetails.
     */
    public static ClusterFailoverJobDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterFailoverJobDetails deserializedClusterFailoverJobDetails = new ClusterFailoverJobDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("affectedObjectDetails".equals(fieldName)) {
                    Map<String, String> affectedObjectDetails = reader.readMap(reader1 -> reader1.getString());
                    deserializedClusterFailoverJobDetails.withAffectedObjectDetails(affectedObjectDetails);
                } else if ("instanceType".equals(fieldName)) {
                    deserializedClusterFailoverJobDetails.instanceType = reader.getString();
                } else if ("protectedItemDetails".equals(fieldName)) {
                    List<FailoverReplicationProtectedItemDetails> protectedItemDetails
                        = reader.readArray(reader1 -> FailoverReplicationProtectedItemDetails.fromJson(reader1));
                    deserializedClusterFailoverJobDetails.protectedItemDetails = protectedItemDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterFailoverJobDetails;
        });
    }
}
