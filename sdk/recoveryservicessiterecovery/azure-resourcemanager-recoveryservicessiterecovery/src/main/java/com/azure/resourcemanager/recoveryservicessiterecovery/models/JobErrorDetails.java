// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * This class contains the error details per object.
 */
@Fluent
public final class JobErrorDetails implements JsonSerializable<JobErrorDetails> {
    /*
     * The Service error details.
     */
    private ServiceError serviceErrorDetails;

    /*
     * The Provider error details.
     */
    private ProviderError providerErrorDetails;

    /*
     * Error level of error.
     */
    private String errorLevel;

    /*
     * The creation time of job error.
     */
    private OffsetDateTime creationTime;

    /*
     * The Id of the task.
     */
    private String taskId;

    /**
     * Creates an instance of JobErrorDetails class.
     */
    public JobErrorDetails() {
    }

    /**
     * Get the serviceErrorDetails property: The Service error details.
     * 
     * @return the serviceErrorDetails value.
     */
    public ServiceError serviceErrorDetails() {
        return this.serviceErrorDetails;
    }

    /**
     * Set the serviceErrorDetails property: The Service error details.
     * 
     * @param serviceErrorDetails the serviceErrorDetails value to set.
     * @return the JobErrorDetails object itself.
     */
    public JobErrorDetails withServiceErrorDetails(ServiceError serviceErrorDetails) {
        this.serviceErrorDetails = serviceErrorDetails;
        return this;
    }

    /**
     * Get the providerErrorDetails property: The Provider error details.
     * 
     * @return the providerErrorDetails value.
     */
    public ProviderError providerErrorDetails() {
        return this.providerErrorDetails;
    }

    /**
     * Set the providerErrorDetails property: The Provider error details.
     * 
     * @param providerErrorDetails the providerErrorDetails value to set.
     * @return the JobErrorDetails object itself.
     */
    public JobErrorDetails withProviderErrorDetails(ProviderError providerErrorDetails) {
        this.providerErrorDetails = providerErrorDetails;
        return this;
    }

    /**
     * Get the errorLevel property: Error level of error.
     * 
     * @return the errorLevel value.
     */
    public String errorLevel() {
        return this.errorLevel;
    }

    /**
     * Set the errorLevel property: Error level of error.
     * 
     * @param errorLevel the errorLevel value to set.
     * @return the JobErrorDetails object itself.
     */
    public JobErrorDetails withErrorLevel(String errorLevel) {
        this.errorLevel = errorLevel;
        return this;
    }

    /**
     * Get the creationTime property: The creation time of job error.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: The creation time of job error.
     * 
     * @param creationTime the creationTime value to set.
     * @return the JobErrorDetails object itself.
     */
    public JobErrorDetails withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get the taskId property: The Id of the task.
     * 
     * @return the taskId value.
     */
    public String taskId() {
        return this.taskId;
    }

    /**
     * Set the taskId property: The Id of the task.
     * 
     * @param taskId the taskId value to set.
     * @return the JobErrorDetails object itself.
     */
    public JobErrorDetails withTaskId(String taskId) {
        this.taskId = taskId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceErrorDetails() != null) {
            serviceErrorDetails().validate();
        }
        if (providerErrorDetails() != null) {
            providerErrorDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("serviceErrorDetails", this.serviceErrorDetails);
        jsonWriter.writeJsonField("providerErrorDetails", this.providerErrorDetails);
        jsonWriter.writeStringField("errorLevel", this.errorLevel);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeStringField("taskId", this.taskId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobErrorDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobErrorDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobErrorDetails.
     */
    public static JobErrorDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobErrorDetails deserializedJobErrorDetails = new JobErrorDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceErrorDetails".equals(fieldName)) {
                    deserializedJobErrorDetails.serviceErrorDetails = ServiceError.fromJson(reader);
                } else if ("providerErrorDetails".equals(fieldName)) {
                    deserializedJobErrorDetails.providerErrorDetails = ProviderError.fromJson(reader);
                } else if ("errorLevel".equals(fieldName)) {
                    deserializedJobErrorDetails.errorLevel = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    deserializedJobErrorDetails.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("taskId".equals(fieldName)) {
                    deserializedJobErrorDetails.taskId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobErrorDetails;
        });
    }
}
