// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.RecoveryPlanInner;

/** An immutable client-side representation of RecoveryPlan. */
public interface RecoveryPlan {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: The custom details.
     *
     * @return the properties value.
     */
    RecoveryPlanProperties properties();

    /**
     * Gets the location property: Resource Location.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.RecoveryPlanInner object.
     *
     * @return the inner object.
     */
    RecoveryPlanInner innerModel();

    /** The entirety of the RecoveryPlan definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithProperties,
            DefinitionStages.WithCreate {
    }
    /** The RecoveryPlan definition stages. */
    interface DefinitionStages {
        /** The first stage of the RecoveryPlan definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the RecoveryPlan definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceName, resourceGroupName.
             *
             * @param resourceName The name of the recovery services vault.
             * @param resourceGroupName The name of the resource group where the recovery services vault is present.
             * @return the next definition stage.
             */
            WithProperties withExistingVault(String resourceName, String resourceGroupName);
        }
        /** The stage of the RecoveryPlan definition allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Recovery plan creation properties..
             *
             * @param properties Recovery plan creation properties.
             * @return the next definition stage.
             */
            WithCreate withProperties(CreateRecoveryPlanInputProperties properties);
        }
        /**
         * The stage of the RecoveryPlan definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            RecoveryPlan create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            RecoveryPlan create(Context context);
        }
    }
    /**
     * Begins update for the RecoveryPlan resource.
     *
     * @return the stage of resource update.
     */
    RecoveryPlan.Update update();

    /** The template for RecoveryPlan update. */
    interface Update extends UpdateStages.WithProperties {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        RecoveryPlan apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        RecoveryPlan apply(Context context);
    }
    /** The RecoveryPlan update stages. */
    interface UpdateStages {
        /** The stage of the RecoveryPlan update allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Recovery plan update properties..
             *
             * @param properties Recovery plan update properties.
             * @return the next definition stage.
             */
            Update withProperties(UpdateRecoveryPlanInputProperties properties);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    RecoveryPlan refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    RecoveryPlan refresh(Context context);

    /**
     * The operation to cancel the failover of a recovery plan.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan failoverCancel();

    /**
     * The operation to cancel the failover of a recovery plan.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan failoverCancel(Context context);

    /**
     * The operation to commit the failover of a recovery plan.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan failoverCommit();

    /**
     * The operation to commit the failover of a recovery plan.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan failoverCommit(Context context);

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan plannedFailover(RecoveryPlanPlannedFailoverInput input);

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan plannedFailover(RecoveryPlanPlannedFailoverInput input, Context context);

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan reprotect();

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan reprotect(Context context);

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param input Recovery plan test failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan testFailover(RecoveryPlanTestFailoverInput input);

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param input Recovery plan test failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan testFailover(RecoveryPlanTestFailoverInput input, Context context);

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param input Recovery plan test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan testFailoverCleanup(RecoveryPlanTestFailoverCleanupInput input);

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param input Recovery plan test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan testFailoverCleanup(RecoveryPlanTestFailoverCleanupInput input, Context context);

    /**
     * The operation to start the unplanned failover of a recovery plan.
     *
     * @param input Recovery plan unplanned failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan unplannedFailover(RecoveryPlanUnplannedFailoverInput input);

    /**
     * The operation to start the unplanned failover of a recovery plan.
     *
     * @param input Recovery plan unplanned failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    RecoveryPlan unplannedFailover(RecoveryPlanUnplannedFailoverInput input, Context context);
}
