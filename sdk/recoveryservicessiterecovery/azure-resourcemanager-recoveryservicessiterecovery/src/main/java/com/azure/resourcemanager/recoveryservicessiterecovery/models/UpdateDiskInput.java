// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Disk input for update.
 */
@Fluent
public final class UpdateDiskInput implements JsonSerializable<UpdateDiskInput> {
    /*
     * The disk Id.
     */
    private String diskId;

    /*
     * The target disk name.
     */
    private String targetDiskName;

    /**
     * Creates an instance of UpdateDiskInput class.
     */
    public UpdateDiskInput() {
    }

    /**
     * Get the diskId property: The disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: The disk Id.
     * 
     * @param diskId the diskId value to set.
     * @return the UpdateDiskInput object itself.
     */
    public UpdateDiskInput withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the targetDiskName property: The target disk name.
     * 
     * @return the targetDiskName value.
     */
    public String targetDiskName() {
        return this.targetDiskName;
    }

    /**
     * Set the targetDiskName property: The target disk name.
     * 
     * @param targetDiskName the targetDiskName value to set.
     * @return the UpdateDiskInput object itself.
     */
    public UpdateDiskInput withTargetDiskName(String targetDiskName) {
        this.targetDiskName = targetDiskName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property diskId in model UpdateDiskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateDiskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeStringField("targetDiskName", this.targetDiskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateDiskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateDiskInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateDiskInput.
     */
    public static UpdateDiskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateDiskInput deserializedUpdateDiskInput = new UpdateDiskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedUpdateDiskInput.diskId = reader.getString();
                } else if ("targetDiskName".equals(fieldName)) {
                    deserializedUpdateDiskInput.targetDiskName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateDiskInput;
        });
    }
}
