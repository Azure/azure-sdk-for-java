// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * VMwareCbt provider specific settings.
 */
@Fluent
public final class VMwareCbtMigrationDetails extends MigrationProviderSpecificSettings {
    /*
     * Gets the instance type.
     */
    private String instanceType = "VMwareCbt";

    /*
     * The ARM Id of the VM discovered in VMware.
     */
    private String vmwareMachineId;

    /*
     * The type of the OS on the VM.
     */
    private String osType;

    /*
     * The name of the OS on the VM.
     */
    private String osName;

    /*
     * The firmware type.
     */
    private String firmwareType;

    /*
     * The target generation.
     */
    private String targetGeneration;

    /*
     * License Type of the VM to be used.
     */
    private String licenseType;

    /*
     * The SQL Server license type.
     */
    private String sqlServerLicenseType;

    /*
     * The data mover run as account Id.
     */
    private String dataMoverRunAsAccountId;

    /*
     * The snapshot run as account Id.
     */
    private String snapshotRunAsAccountId;

    /*
     * The replication storage account ARM Id. This is applicable only for the blob based replication test hook.
     */
    private String storageAccountId;

    /*
     * Target VM name.
     */
    private String targetVmName;

    /*
     * The target VM size.
     */
    private String targetVmSize;

    /*
     * The target location.
     */
    private String targetLocation;

    /*
     * The target resource group Id.
     */
    private String targetResourceGroupId;

    /*
     * The target availability set Id.
     */
    private String targetAvailabilitySetId;

    /*
     * The target availability zone.
     */
    private String targetAvailabilityZone;

    /*
     * The target proximity placement group Id.
     */
    private String targetProximityPlacementGroupId;

    /*
     * The confidential VM key vault Id for ADE installation.
     */
    private String confidentialVmKeyVaultId;

    /*
     * The target VM security profile.
     */
    private VMwareCbtSecurityProfileProperties targetVmSecurityProfile;

    /*
     * The target boot diagnostics storage account ARM Id.
     */
    private String targetBootDiagnosticsStorageAccountId;

    /*
     * The target VM tags.
     */
    private Map<String, String> targetVmTags;

    /*
     * The list of protected disks.
     */
    private List<VMwareCbtProtectedDiskDetails> protectedDisks;

    /*
     * The target network Id.
     */
    private String targetNetworkId;

    /*
     * The test network Id.
     */
    private String testNetworkId;

    /*
     * The network details.
     */
    private List<VMwareCbtNicDetails> vmNics;

    /*
     * The tags for the target NICs.
     */
    private Map<String, String> targetNicTags;

    /*
     * The recovery point Id to which the VM was migrated.
     */
    private String migrationRecoveryPointId;

    /*
     * The last recovery point received time.
     */
    private OffsetDateTime lastRecoveryPointReceived;

    /*
     * The last recovery point Id.
     */
    private String lastRecoveryPointId;

    /*
     * The initial seeding progress percentage.
     */
    private Integer initialSeedingProgressPercentage;

    /*
     * The migration progress percentage.
     */
    private Integer migrationProgressPercentage;

    /*
     * The resync progress percentage.
     */
    private Integer resyncProgressPercentage;

    /*
     * The resume progress percentage.
     */
    private Integer resumeProgressPercentage;

    /*
     * The delta sync progress percentage.
     */
    private Integer deltaSyncProgressPercentage;

    /*
     * A value indicating whether checksum resync cycle is in progress.
     */
    private String isCheckSumResyncCycle;

    /*
     * The initial seeding retry count.
     */
    private Long initialSeedingRetryCount;

    /*
     * The resync retry count.
     */
    private Long resyncRetryCount;

    /*
     * The resume retry count.
     */
    private Long resumeRetryCount;

    /*
     * The delta sync retry count.
     */
    private Long deltaSyncRetryCount;

    /*
     * A value indicating whether resync is required.
     */
    private String resyncRequired;

    /*
     * The resync state.
     */
    private ResyncState resyncState;

    /*
     * A value indicating whether auto resync is to be done.
     */
    private String performAutoResync;

    /*
     * The tags for the seed disks.
     */
    private Map<String, String> seedDiskTags;

    /*
     * The tags for the target disks.
     */
    private Map<String, String> targetDiskTags;

    /*
     * A value indicating the inplace OS Upgrade version.
     */
    private List<String> supportedOSVersions;

    /*
     * A value indicating the appliance monitoring details.
     */
    private ApplianceMonitoringDetails applianceMonitoringDetails;

    /*
     * A value indicating the gateway operation details.
     */
    private GatewayOperationDetails gatewayOperationDetails;

    /*
     * A value indicating the SRS operation name.
     */
    private String operationName;

    /**
     * Creates an instance of VMwareCbtMigrationDetails class.
     */
    public VMwareCbtMigrationDetails() {
    }

    /**
     * Get the instanceType property: Gets the instance type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the vmwareMachineId property: The ARM Id of the VM discovered in VMware.
     * 
     * @return the vmwareMachineId value.
     */
    public String vmwareMachineId() {
        return this.vmwareMachineId;
    }

    /**
     * Get the osType property: The type of the OS on the VM.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Get the osName property: The name of the OS on the VM.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Get the firmwareType property: The firmware type.
     * 
     * @return the firmwareType value.
     */
    public String firmwareType() {
        return this.firmwareType;
    }

    /**
     * Get the targetGeneration property: The target generation.
     * 
     * @return the targetGeneration value.
     */
    public String targetGeneration() {
        return this.targetGeneration;
    }

    /**
     * Get the licenseType property: License Type of the VM to be used.
     * 
     * @return the licenseType value.
     */
    public String licenseType() {
        return this.licenseType;
    }

    /**
     * Set the licenseType property: License Type of the VM to be used.
     * 
     * @param licenseType the licenseType value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withLicenseType(String licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get the sqlServerLicenseType property: The SQL Server license type.
     * 
     * @return the sqlServerLicenseType value.
     */
    public String sqlServerLicenseType() {
        return this.sqlServerLicenseType;
    }

    /**
     * Set the sqlServerLicenseType property: The SQL Server license type.
     * 
     * @param sqlServerLicenseType the sqlServerLicenseType value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withSqlServerLicenseType(String sqlServerLicenseType) {
        this.sqlServerLicenseType = sqlServerLicenseType;
        return this;
    }

    /**
     * Get the dataMoverRunAsAccountId property: The data mover run as account Id.
     * 
     * @return the dataMoverRunAsAccountId value.
     */
    public String dataMoverRunAsAccountId() {
        return this.dataMoverRunAsAccountId;
    }

    /**
     * Get the snapshotRunAsAccountId property: The snapshot run as account Id.
     * 
     * @return the snapshotRunAsAccountId value.
     */
    public String snapshotRunAsAccountId() {
        return this.snapshotRunAsAccountId;
    }

    /**
     * Get the storageAccountId property: The replication storage account ARM Id. This is applicable only for the blob
     * based replication test hook.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Get the targetVmName property: Target VM name.
     * 
     * @return the targetVmName value.
     */
    public String targetVmName() {
        return this.targetVmName;
    }

    /**
     * Set the targetVmName property: Target VM name.
     * 
     * @param targetVmName the targetVmName value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetVmName(String targetVmName) {
        this.targetVmName = targetVmName;
        return this;
    }

    /**
     * Get the targetVmSize property: The target VM size.
     * 
     * @return the targetVmSize value.
     */
    public String targetVmSize() {
        return this.targetVmSize;
    }

    /**
     * Set the targetVmSize property: The target VM size.
     * 
     * @param targetVmSize the targetVmSize value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetVmSize(String targetVmSize) {
        this.targetVmSize = targetVmSize;
        return this;
    }

    /**
     * Get the targetLocation property: The target location.
     * 
     * @return the targetLocation value.
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * Get the targetResourceGroupId property: The target resource group Id.
     * 
     * @return the targetResourceGroupId value.
     */
    public String targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    /**
     * Set the targetResourceGroupId property: The target resource group Id.
     * 
     * @param targetResourceGroupId the targetResourceGroupId value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetResourceGroupId(String targetResourceGroupId) {
        this.targetResourceGroupId = targetResourceGroupId;
        return this;
    }

    /**
     * Get the targetAvailabilitySetId property: The target availability set Id.
     * 
     * @return the targetAvailabilitySetId value.
     */
    public String targetAvailabilitySetId() {
        return this.targetAvailabilitySetId;
    }

    /**
     * Set the targetAvailabilitySetId property: The target availability set Id.
     * 
     * @param targetAvailabilitySetId the targetAvailabilitySetId value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetAvailabilitySetId(String targetAvailabilitySetId) {
        this.targetAvailabilitySetId = targetAvailabilitySetId;
        return this;
    }

    /**
     * Get the targetAvailabilityZone property: The target availability zone.
     * 
     * @return the targetAvailabilityZone value.
     */
    public String targetAvailabilityZone() {
        return this.targetAvailabilityZone;
    }

    /**
     * Set the targetAvailabilityZone property: The target availability zone.
     * 
     * @param targetAvailabilityZone the targetAvailabilityZone value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetAvailabilityZone(String targetAvailabilityZone) {
        this.targetAvailabilityZone = targetAvailabilityZone;
        return this;
    }

    /**
     * Get the targetProximityPlacementGroupId property: The target proximity placement group Id.
     * 
     * @return the targetProximityPlacementGroupId value.
     */
    public String targetProximityPlacementGroupId() {
        return this.targetProximityPlacementGroupId;
    }

    /**
     * Set the targetProximityPlacementGroupId property: The target proximity placement group Id.
     * 
     * @param targetProximityPlacementGroupId the targetProximityPlacementGroupId value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetProximityPlacementGroupId(String targetProximityPlacementGroupId) {
        this.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
        return this;
    }

    /**
     * Get the confidentialVmKeyVaultId property: The confidential VM key vault Id for ADE installation.
     * 
     * @return the confidentialVmKeyVaultId value.
     */
    public String confidentialVmKeyVaultId() {
        return this.confidentialVmKeyVaultId;
    }

    /**
     * Set the confidentialVmKeyVaultId property: The confidential VM key vault Id for ADE installation.
     * 
     * @param confidentialVmKeyVaultId the confidentialVmKeyVaultId value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withConfidentialVmKeyVaultId(String confidentialVmKeyVaultId) {
        this.confidentialVmKeyVaultId = confidentialVmKeyVaultId;
        return this;
    }

    /**
     * Get the targetVmSecurityProfile property: The target VM security profile.
     * 
     * @return the targetVmSecurityProfile value.
     */
    public VMwareCbtSecurityProfileProperties targetVmSecurityProfile() {
        return this.targetVmSecurityProfile;
    }

    /**
     * Set the targetVmSecurityProfile property: The target VM security profile.
     * 
     * @param targetVmSecurityProfile the targetVmSecurityProfile value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails
        withTargetVmSecurityProfile(VMwareCbtSecurityProfileProperties targetVmSecurityProfile) {
        this.targetVmSecurityProfile = targetVmSecurityProfile;
        return this;
    }

    /**
     * Get the targetBootDiagnosticsStorageAccountId property: The target boot diagnostics storage account ARM Id.
     * 
     * @return the targetBootDiagnosticsStorageAccountId value.
     */
    public String targetBootDiagnosticsStorageAccountId() {
        return this.targetBootDiagnosticsStorageAccountId;
    }

    /**
     * Set the targetBootDiagnosticsStorageAccountId property: The target boot diagnostics storage account ARM Id.
     * 
     * @param targetBootDiagnosticsStorageAccountId the targetBootDiagnosticsStorageAccountId value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails
        withTargetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
        this.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
        return this;
    }

    /**
     * Get the targetVmTags property: The target VM tags.
     * 
     * @return the targetVmTags value.
     */
    public Map<String, String> targetVmTags() {
        return this.targetVmTags;
    }

    /**
     * Set the targetVmTags property: The target VM tags.
     * 
     * @param targetVmTags the targetVmTags value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetVmTags(Map<String, String> targetVmTags) {
        this.targetVmTags = targetVmTags;
        return this;
    }

    /**
     * Get the protectedDisks property: The list of protected disks.
     * 
     * @return the protectedDisks value.
     */
    public List<VMwareCbtProtectedDiskDetails> protectedDisks() {
        return this.protectedDisks;
    }

    /**
     * Set the protectedDisks property: The list of protected disks.
     * 
     * @param protectedDisks the protectedDisks value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withProtectedDisks(List<VMwareCbtProtectedDiskDetails> protectedDisks) {
        this.protectedDisks = protectedDisks;
        return this;
    }

    /**
     * Get the targetNetworkId property: The target network Id.
     * 
     * @return the targetNetworkId value.
     */
    public String targetNetworkId() {
        return this.targetNetworkId;
    }

    /**
     * Set the targetNetworkId property: The target network Id.
     * 
     * @param targetNetworkId the targetNetworkId value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetNetworkId(String targetNetworkId) {
        this.targetNetworkId = targetNetworkId;
        return this;
    }

    /**
     * Get the testNetworkId property: The test network Id.
     * 
     * @return the testNetworkId value.
     */
    public String testNetworkId() {
        return this.testNetworkId;
    }

    /**
     * Set the testNetworkId property: The test network Id.
     * 
     * @param testNetworkId the testNetworkId value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTestNetworkId(String testNetworkId) {
        this.testNetworkId = testNetworkId;
        return this;
    }

    /**
     * Get the vmNics property: The network details.
     * 
     * @return the vmNics value.
     */
    public List<VMwareCbtNicDetails> vmNics() {
        return this.vmNics;
    }

    /**
     * Set the vmNics property: The network details.
     * 
     * @param vmNics the vmNics value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withVmNics(List<VMwareCbtNicDetails> vmNics) {
        this.vmNics = vmNics;
        return this;
    }

    /**
     * Get the targetNicTags property: The tags for the target NICs.
     * 
     * @return the targetNicTags value.
     */
    public Map<String, String> targetNicTags() {
        return this.targetNicTags;
    }

    /**
     * Set the targetNicTags property: The tags for the target NICs.
     * 
     * @param targetNicTags the targetNicTags value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetNicTags(Map<String, String> targetNicTags) {
        this.targetNicTags = targetNicTags;
        return this;
    }

    /**
     * Get the migrationRecoveryPointId property: The recovery point Id to which the VM was migrated.
     * 
     * @return the migrationRecoveryPointId value.
     */
    public String migrationRecoveryPointId() {
        return this.migrationRecoveryPointId;
    }

    /**
     * Get the lastRecoveryPointReceived property: The last recovery point received time.
     * 
     * @return the lastRecoveryPointReceived value.
     */
    public OffsetDateTime lastRecoveryPointReceived() {
        return this.lastRecoveryPointReceived;
    }

    /**
     * Get the lastRecoveryPointId property: The last recovery point Id.
     * 
     * @return the lastRecoveryPointId value.
     */
    public String lastRecoveryPointId() {
        return this.lastRecoveryPointId;
    }

    /**
     * Get the initialSeedingProgressPercentage property: The initial seeding progress percentage.
     * 
     * @return the initialSeedingProgressPercentage value.
     */
    public Integer initialSeedingProgressPercentage() {
        return this.initialSeedingProgressPercentage;
    }

    /**
     * Get the migrationProgressPercentage property: The migration progress percentage.
     * 
     * @return the migrationProgressPercentage value.
     */
    public Integer migrationProgressPercentage() {
        return this.migrationProgressPercentage;
    }

    /**
     * Get the resyncProgressPercentage property: The resync progress percentage.
     * 
     * @return the resyncProgressPercentage value.
     */
    public Integer resyncProgressPercentage() {
        return this.resyncProgressPercentage;
    }

    /**
     * Get the resumeProgressPercentage property: The resume progress percentage.
     * 
     * @return the resumeProgressPercentage value.
     */
    public Integer resumeProgressPercentage() {
        return this.resumeProgressPercentage;
    }

    /**
     * Get the deltaSyncProgressPercentage property: The delta sync progress percentage.
     * 
     * @return the deltaSyncProgressPercentage value.
     */
    public Integer deltaSyncProgressPercentage() {
        return this.deltaSyncProgressPercentage;
    }

    /**
     * Get the isCheckSumResyncCycle property: A value indicating whether checksum resync cycle is in progress.
     * 
     * @return the isCheckSumResyncCycle value.
     */
    public String isCheckSumResyncCycle() {
        return this.isCheckSumResyncCycle;
    }

    /**
     * Get the initialSeedingRetryCount property: The initial seeding retry count.
     * 
     * @return the initialSeedingRetryCount value.
     */
    public Long initialSeedingRetryCount() {
        return this.initialSeedingRetryCount;
    }

    /**
     * Get the resyncRetryCount property: The resync retry count.
     * 
     * @return the resyncRetryCount value.
     */
    public Long resyncRetryCount() {
        return this.resyncRetryCount;
    }

    /**
     * Get the resumeRetryCount property: The resume retry count.
     * 
     * @return the resumeRetryCount value.
     */
    public Long resumeRetryCount() {
        return this.resumeRetryCount;
    }

    /**
     * Get the deltaSyncRetryCount property: The delta sync retry count.
     * 
     * @return the deltaSyncRetryCount value.
     */
    public Long deltaSyncRetryCount() {
        return this.deltaSyncRetryCount;
    }

    /**
     * Get the resyncRequired property: A value indicating whether resync is required.
     * 
     * @return the resyncRequired value.
     */
    public String resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Get the resyncState property: The resync state.
     * 
     * @return the resyncState value.
     */
    public ResyncState resyncState() {
        return this.resyncState;
    }

    /**
     * Get the performAutoResync property: A value indicating whether auto resync is to be done.
     * 
     * @return the performAutoResync value.
     */
    public String performAutoResync() {
        return this.performAutoResync;
    }

    /**
     * Set the performAutoResync property: A value indicating whether auto resync is to be done.
     * 
     * @param performAutoResync the performAutoResync value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withPerformAutoResync(String performAutoResync) {
        this.performAutoResync = performAutoResync;
        return this;
    }

    /**
     * Get the seedDiskTags property: The tags for the seed disks.
     * 
     * @return the seedDiskTags value.
     */
    public Map<String, String> seedDiskTags() {
        return this.seedDiskTags;
    }

    /**
     * Set the seedDiskTags property: The tags for the seed disks.
     * 
     * @param seedDiskTags the seedDiskTags value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withSeedDiskTags(Map<String, String> seedDiskTags) {
        this.seedDiskTags = seedDiskTags;
        return this;
    }

    /**
     * Get the targetDiskTags property: The tags for the target disks.
     * 
     * @return the targetDiskTags value.
     */
    public Map<String, String> targetDiskTags() {
        return this.targetDiskTags;
    }

    /**
     * Set the targetDiskTags property: The tags for the target disks.
     * 
     * @param targetDiskTags the targetDiskTags value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetDiskTags(Map<String, String> targetDiskTags) {
        this.targetDiskTags = targetDiskTags;
        return this;
    }

    /**
     * Get the supportedOSVersions property: A value indicating the inplace OS Upgrade version.
     * 
     * @return the supportedOSVersions value.
     */
    public List<String> supportedOSVersions() {
        return this.supportedOSVersions;
    }

    /**
     * Set the supportedOSVersions property: A value indicating the inplace OS Upgrade version.
     * 
     * @param supportedOSVersions the supportedOSVersions value to set.
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withSupportedOSVersions(List<String> supportedOSVersions) {
        this.supportedOSVersions = supportedOSVersions;
        return this;
    }

    /**
     * Get the applianceMonitoringDetails property: A value indicating the appliance monitoring details.
     * 
     * @return the applianceMonitoringDetails value.
     */
    public ApplianceMonitoringDetails applianceMonitoringDetails() {
        return this.applianceMonitoringDetails;
    }

    /**
     * Get the gatewayOperationDetails property: A value indicating the gateway operation details.
     * 
     * @return the gatewayOperationDetails value.
     */
    public GatewayOperationDetails gatewayOperationDetails() {
        return this.gatewayOperationDetails;
    }

    /**
     * Get the operationName property: A value indicating the SRS operation name.
     * 
     * @return the operationName value.
     */
    public String operationName() {
        return this.operationName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (targetVmSecurityProfile() != null) {
            targetVmSecurityProfile().validate();
        }
        if (protectedDisks() != null) {
            protectedDisks().forEach(e -> e.validate());
        }
        if (vmNics() != null) {
            vmNics().forEach(e -> e.validate());
        }
        if (applianceMonitoringDetails() != null) {
            applianceMonitoringDetails().validate();
        }
        if (gatewayOperationDetails() != null) {
            gatewayOperationDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("licenseType", this.licenseType);
        jsonWriter.writeStringField("sqlServerLicenseType", this.sqlServerLicenseType);
        jsonWriter.writeStringField("targetVmName", this.targetVmName);
        jsonWriter.writeStringField("targetVmSize", this.targetVmSize);
        jsonWriter.writeStringField("targetResourceGroupId", this.targetResourceGroupId);
        jsonWriter.writeStringField("targetAvailabilitySetId", this.targetAvailabilitySetId);
        jsonWriter.writeStringField("targetAvailabilityZone", this.targetAvailabilityZone);
        jsonWriter.writeStringField("targetProximityPlacementGroupId", this.targetProximityPlacementGroupId);
        jsonWriter.writeStringField("confidentialVmKeyVaultId", this.confidentialVmKeyVaultId);
        jsonWriter.writeJsonField("targetVmSecurityProfile", this.targetVmSecurityProfile);
        jsonWriter.writeStringField("targetBootDiagnosticsStorageAccountId",
            this.targetBootDiagnosticsStorageAccountId);
        jsonWriter.writeMapField("targetVmTags", this.targetVmTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("protectedDisks", this.protectedDisks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("targetNetworkId", this.targetNetworkId);
        jsonWriter.writeStringField("testNetworkId", this.testNetworkId);
        jsonWriter.writeArrayField("vmNics", this.vmNics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("targetNicTags", this.targetNicTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("performAutoResync", this.performAutoResync);
        jsonWriter.writeMapField("seedDiskTags", this.seedDiskTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("targetDiskTags", this.targetDiskTags,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("supportedOSVersions", this.supportedOSVersions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareCbtMigrationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareCbtMigrationDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMwareCbtMigrationDetails.
     */
    public static VMwareCbtMigrationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareCbtMigrationDetails deserializedVMwareCbtMigrationDetails = new VMwareCbtMigrationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.instanceType = reader.getString();
                } else if ("vmwareMachineId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.vmwareMachineId = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.osType = reader.getString();
                } else if ("osName".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.osName = reader.getString();
                } else if ("firmwareType".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.firmwareType = reader.getString();
                } else if ("targetGeneration".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetGeneration = reader.getString();
                } else if ("licenseType".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.licenseType = reader.getString();
                } else if ("sqlServerLicenseType".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.sqlServerLicenseType = reader.getString();
                } else if ("dataMoverRunAsAccountId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.dataMoverRunAsAccountId = reader.getString();
                } else if ("snapshotRunAsAccountId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.snapshotRunAsAccountId = reader.getString();
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.storageAccountId = reader.getString();
                } else if ("targetVmName".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetVmName = reader.getString();
                } else if ("targetVmSize".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetVmSize = reader.getString();
                } else if ("targetLocation".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetLocation = reader.getString();
                } else if ("targetResourceGroupId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetResourceGroupId = reader.getString();
                } else if ("targetAvailabilitySetId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetAvailabilitySetId = reader.getString();
                } else if ("targetAvailabilityZone".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetAvailabilityZone = reader.getString();
                } else if ("targetProximityPlacementGroupId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetProximityPlacementGroupId = reader.getString();
                } else if ("confidentialVmKeyVaultId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.confidentialVmKeyVaultId = reader.getString();
                } else if ("targetVmSecurityProfile".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetVmSecurityProfile
                        = VMwareCbtSecurityProfileProperties.fromJson(reader);
                } else if ("targetBootDiagnosticsStorageAccountId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetBootDiagnosticsStorageAccountId = reader.getString();
                } else if ("targetVmTags".equals(fieldName)) {
                    Map<String, String> targetVmTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVMwareCbtMigrationDetails.targetVmTags = targetVmTags;
                } else if ("protectedDisks".equals(fieldName)) {
                    List<VMwareCbtProtectedDiskDetails> protectedDisks
                        = reader.readArray(reader1 -> VMwareCbtProtectedDiskDetails.fromJson(reader1));
                    deserializedVMwareCbtMigrationDetails.protectedDisks = protectedDisks;
                } else if ("targetNetworkId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.targetNetworkId = reader.getString();
                } else if ("testNetworkId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.testNetworkId = reader.getString();
                } else if ("vmNics".equals(fieldName)) {
                    List<VMwareCbtNicDetails> vmNics
                        = reader.readArray(reader1 -> VMwareCbtNicDetails.fromJson(reader1));
                    deserializedVMwareCbtMigrationDetails.vmNics = vmNics;
                } else if ("targetNicTags".equals(fieldName)) {
                    Map<String, String> targetNicTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVMwareCbtMigrationDetails.targetNicTags = targetNicTags;
                } else if ("migrationRecoveryPointId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.migrationRecoveryPointId = reader.getString();
                } else if ("lastRecoveryPointReceived".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.lastRecoveryPointReceived = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastRecoveryPointId".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.lastRecoveryPointId = reader.getString();
                } else if ("initialSeedingProgressPercentage".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.initialSeedingProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("migrationProgressPercentage".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.migrationProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("resyncProgressPercentage".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.resyncProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("resumeProgressPercentage".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.resumeProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("deltaSyncProgressPercentage".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.deltaSyncProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isCheckSumResyncCycle".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.isCheckSumResyncCycle = reader.getString();
                } else if ("initialSeedingRetryCount".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.initialSeedingRetryCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("resyncRetryCount".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.resyncRetryCount = reader.getNullable(JsonReader::getLong);
                } else if ("resumeRetryCount".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.resumeRetryCount = reader.getNullable(JsonReader::getLong);
                } else if ("deltaSyncRetryCount".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.deltaSyncRetryCount = reader.getNullable(JsonReader::getLong);
                } else if ("resyncRequired".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.resyncRequired = reader.getString();
                } else if ("resyncState".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.resyncState = ResyncState.fromString(reader.getString());
                } else if ("performAutoResync".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.performAutoResync = reader.getString();
                } else if ("seedDiskTags".equals(fieldName)) {
                    Map<String, String> seedDiskTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVMwareCbtMigrationDetails.seedDiskTags = seedDiskTags;
                } else if ("targetDiskTags".equals(fieldName)) {
                    Map<String, String> targetDiskTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVMwareCbtMigrationDetails.targetDiskTags = targetDiskTags;
                } else if ("supportedOSVersions".equals(fieldName)) {
                    List<String> supportedOSVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedVMwareCbtMigrationDetails.supportedOSVersions = supportedOSVersions;
                } else if ("applianceMonitoringDetails".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.applianceMonitoringDetails
                        = ApplianceMonitoringDetails.fromJson(reader);
                } else if ("gatewayOperationDetails".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.gatewayOperationDetails
                        = GatewayOperationDetails.fromJson(reader);
                } else if ("operationName".equals(fieldName)) {
                    deserializedVMwareCbtMigrationDetails.operationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareCbtMigrationDetails;
        });
    }
}
