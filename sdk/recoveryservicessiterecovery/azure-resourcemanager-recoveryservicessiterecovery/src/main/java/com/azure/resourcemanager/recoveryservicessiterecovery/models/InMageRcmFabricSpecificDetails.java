// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** InMageRcm fabric specific details. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "instanceType")
@JsonTypeName("InMageRcm")
@Immutable
public final class InMageRcmFabricSpecificDetails extends FabricSpecificDetails {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InMageRcmFabricSpecificDetails.class);

    /*
     * The ARM Id of the VMware site.
     */
    @JsonProperty(value = "vmwareSiteId", access = JsonProperty.Access.WRITE_ONLY)
    private String vmwareSiteId;

    /*
     * The ARM Id of the physical site.
     */
    @JsonProperty(value = "physicalSiteId", access = JsonProperty.Access.WRITE_ONLY)
    private String physicalSiteId;

    /*
     * The service endpoint.
     */
    @JsonProperty(value = "serviceEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String serviceEndpoint;

    /*
     * The service resource Id.
     */
    @JsonProperty(value = "serviceResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String serviceResourceId;

    /*
     * The service container Id.
     */
    @JsonProperty(value = "serviceContainerId", access = JsonProperty.Access.WRITE_ONLY)
    private String serviceContainerId;

    /*
     * The data plane Uri.
     */
    @JsonProperty(value = "dataPlaneUri", access = JsonProperty.Access.WRITE_ONLY)
    private String dataPlaneUri;

    /*
     * The control plane Uri.
     */
    @JsonProperty(value = "controlPlaneUri", access = JsonProperty.Access.WRITE_ONLY)
    private String controlPlaneUri;

    /*
     * The list of process servers.
     */
    @JsonProperty(value = "processServers", access = JsonProperty.Access.WRITE_ONLY)
    private List<ProcessServerDetails> processServers;

    /*
     * The list of RCM proxies.
     */
    @JsonProperty(value = "rcmProxies", access = JsonProperty.Access.WRITE_ONLY)
    private List<RcmProxyDetails> rcmProxies;

    /*
     * The list of push installers.
     */
    @JsonProperty(value = "pushInstallers", access = JsonProperty.Access.WRITE_ONLY)
    private List<PushInstallerDetails> pushInstallers;

    /*
     * The list of replication agents.
     */
    @JsonProperty(value = "replicationAgents", access = JsonProperty.Access.WRITE_ONLY)
    private List<ReplicationAgentDetails> replicationAgents;

    /*
     * The list of reprotect agents.
     */
    @JsonProperty(value = "reprotectAgents", access = JsonProperty.Access.WRITE_ONLY)
    private List<ReprotectAgentDetails> reprotectAgents;

    /*
     * The list of DRAs.
     */
    @JsonProperty(value = "dras", access = JsonProperty.Access.WRITE_ONLY)
    private List<DraDetails> dras;

    /*
     * The list of agent details.
     */
    @JsonProperty(value = "agentDetails", access = JsonProperty.Access.WRITE_ONLY)
    private List<AgentDetails> agentDetails;

    /**
     * Get the vmwareSiteId property: The ARM Id of the VMware site.
     *
     * @return the vmwareSiteId value.
     */
    public String vmwareSiteId() {
        return this.vmwareSiteId;
    }

    /**
     * Get the physicalSiteId property: The ARM Id of the physical site.
     *
     * @return the physicalSiteId value.
     */
    public String physicalSiteId() {
        return this.physicalSiteId;
    }

    /**
     * Get the serviceEndpoint property: The service endpoint.
     *
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the serviceResourceId property: The service resource Id.
     *
     * @return the serviceResourceId value.
     */
    public String serviceResourceId() {
        return this.serviceResourceId;
    }

    /**
     * Get the serviceContainerId property: The service container Id.
     *
     * @return the serviceContainerId value.
     */
    public String serviceContainerId() {
        return this.serviceContainerId;
    }

    /**
     * Get the dataPlaneUri property: The data plane Uri.
     *
     * @return the dataPlaneUri value.
     */
    public String dataPlaneUri() {
        return this.dataPlaneUri;
    }

    /**
     * Get the controlPlaneUri property: The control plane Uri.
     *
     * @return the controlPlaneUri value.
     */
    public String controlPlaneUri() {
        return this.controlPlaneUri;
    }

    /**
     * Get the processServers property: The list of process servers.
     *
     * @return the processServers value.
     */
    public List<ProcessServerDetails> processServers() {
        return this.processServers;
    }

    /**
     * Get the rcmProxies property: The list of RCM proxies.
     *
     * @return the rcmProxies value.
     */
    public List<RcmProxyDetails> rcmProxies() {
        return this.rcmProxies;
    }

    /**
     * Get the pushInstallers property: The list of push installers.
     *
     * @return the pushInstallers value.
     */
    public List<PushInstallerDetails> pushInstallers() {
        return this.pushInstallers;
    }

    /**
     * Get the replicationAgents property: The list of replication agents.
     *
     * @return the replicationAgents value.
     */
    public List<ReplicationAgentDetails> replicationAgents() {
        return this.replicationAgents;
    }

    /**
     * Get the reprotectAgents property: The list of reprotect agents.
     *
     * @return the reprotectAgents value.
     */
    public List<ReprotectAgentDetails> reprotectAgents() {
        return this.reprotectAgents;
    }

    /**
     * Get the dras property: The list of DRAs.
     *
     * @return the dras value.
     */
    public List<DraDetails> dras() {
        return this.dras;
    }

    /**
     * Get the agentDetails property: The list of agent details.
     *
     * @return the agentDetails value.
     */
    public List<AgentDetails> agentDetails() {
        return this.agentDetails;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (processServers() != null) {
            processServers().forEach(e -> e.validate());
        }
        if (rcmProxies() != null) {
            rcmProxies().forEach(e -> e.validate());
        }
        if (pushInstallers() != null) {
            pushInstallers().forEach(e -> e.validate());
        }
        if (replicationAgents() != null) {
            replicationAgents().forEach(e -> e.validate());
        }
        if (reprotectAgents() != null) {
            reprotectAgents().forEach(e -> e.validate());
        }
        if (dras() != null) {
            dras().forEach(e -> e.validate());
        }
        if (agentDetails() != null) {
            agentDetails().forEach(e -> e.validate());
        }
    }
}
