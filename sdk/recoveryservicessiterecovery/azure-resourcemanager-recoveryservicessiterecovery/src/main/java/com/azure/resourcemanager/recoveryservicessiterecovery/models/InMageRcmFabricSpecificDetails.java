// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * InMageRcm fabric specific details.
 */
@Fluent
public final class InMageRcmFabricSpecificDetails extends FabricSpecificDetails {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "InMageRcm";

    /*
     * The ARM Id of the VMware site.
     */
    private String vmwareSiteId;

    /*
     * The ARM Id of the physical site.
     */
    private String physicalSiteId;

    /*
     * The service endpoint.
     */
    private String serviceEndpoint;

    /*
     * The service resource Id.
     */
    private String serviceResourceId;

    /*
     * The service container Id.
     */
    private String serviceContainerId;

    /*
     * The data plane Uri.
     */
    private String dataPlaneUri;

    /*
     * The control plane Uri.
     */
    private String controlPlaneUri;

    /*
     * The source agent identity details.
     */
    private IdentityProviderDetails sourceAgentIdentityDetails;

    /*
     * The list of process servers.
     */
    private List<ProcessServerDetails> processServers;

    /*
     * The list of RCM proxies.
     */
    private List<RcmProxyDetails> rcmProxies;

    /*
     * The list of push installers.
     */
    private List<PushInstallerDetails> pushInstallers;

    /*
     * The list of replication agents.
     */
    private List<ReplicationAgentDetails> replicationAgents;

    /*
     * The list of reprotect agents.
     */
    private List<ReprotectAgentDetails> reprotectAgents;

    /*
     * The list of Mars agents.
     */
    private List<MarsAgentDetails> marsAgents;

    /*
     * The list of DRAs.
     */
    private List<DraDetails> dras;

    /*
     * The list of agent details.
     */
    private List<AgentDetails> agentDetails;

    /**
     * Creates an instance of InMageRcmFabricSpecificDetails class.
     */
    public InMageRcmFabricSpecificDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the vmwareSiteId property: The ARM Id of the VMware site.
     * 
     * @return the vmwareSiteId value.
     */
    public String vmwareSiteId() {
        return this.vmwareSiteId;
    }

    /**
     * Get the physicalSiteId property: The ARM Id of the physical site.
     * 
     * @return the physicalSiteId value.
     */
    public String physicalSiteId() {
        return this.physicalSiteId;
    }

    /**
     * Get the serviceEndpoint property: The service endpoint.
     * 
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the serviceResourceId property: The service resource Id.
     * 
     * @return the serviceResourceId value.
     */
    public String serviceResourceId() {
        return this.serviceResourceId;
    }

    /**
     * Get the serviceContainerId property: The service container Id.
     * 
     * @return the serviceContainerId value.
     */
    public String serviceContainerId() {
        return this.serviceContainerId;
    }

    /**
     * Get the dataPlaneUri property: The data plane Uri.
     * 
     * @return the dataPlaneUri value.
     */
    public String dataPlaneUri() {
        return this.dataPlaneUri;
    }

    /**
     * Get the controlPlaneUri property: The control plane Uri.
     * 
     * @return the controlPlaneUri value.
     */
    public String controlPlaneUri() {
        return this.controlPlaneUri;
    }

    /**
     * Get the sourceAgentIdentityDetails property: The source agent identity details.
     * 
     * @return the sourceAgentIdentityDetails value.
     */
    public IdentityProviderDetails sourceAgentIdentityDetails() {
        return this.sourceAgentIdentityDetails;
    }

    /**
     * Set the sourceAgentIdentityDetails property: The source agent identity details.
     * 
     * @param sourceAgentIdentityDetails the sourceAgentIdentityDetails value to set.
     * @return the InMageRcmFabricSpecificDetails object itself.
     */
    public InMageRcmFabricSpecificDetails
        withSourceAgentIdentityDetails(IdentityProviderDetails sourceAgentIdentityDetails) {
        this.sourceAgentIdentityDetails = sourceAgentIdentityDetails;
        return this;
    }

    /**
     * Get the processServers property: The list of process servers.
     * 
     * @return the processServers value.
     */
    public List<ProcessServerDetails> processServers() {
        return this.processServers;
    }

    /**
     * Get the rcmProxies property: The list of RCM proxies.
     * 
     * @return the rcmProxies value.
     */
    public List<RcmProxyDetails> rcmProxies() {
        return this.rcmProxies;
    }

    /**
     * Get the pushInstallers property: The list of push installers.
     * 
     * @return the pushInstallers value.
     */
    public List<PushInstallerDetails> pushInstallers() {
        return this.pushInstallers;
    }

    /**
     * Get the replicationAgents property: The list of replication agents.
     * 
     * @return the replicationAgents value.
     */
    public List<ReplicationAgentDetails> replicationAgents() {
        return this.replicationAgents;
    }

    /**
     * Get the reprotectAgents property: The list of reprotect agents.
     * 
     * @return the reprotectAgents value.
     */
    public List<ReprotectAgentDetails> reprotectAgents() {
        return this.reprotectAgents;
    }

    /**
     * Get the marsAgents property: The list of Mars agents.
     * 
     * @return the marsAgents value.
     */
    public List<MarsAgentDetails> marsAgents() {
        return this.marsAgents;
    }

    /**
     * Get the dras property: The list of DRAs.
     * 
     * @return the dras value.
     */
    public List<DraDetails> dras() {
        return this.dras;
    }

    /**
     * Get the agentDetails property: The list of agent details.
     * 
     * @return the agentDetails value.
     */
    public List<AgentDetails> agentDetails() {
        return this.agentDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceAgentIdentityDetails() != null) {
            sourceAgentIdentityDetails().validate();
        }
        if (processServers() != null) {
            processServers().forEach(e -> e.validate());
        }
        if (rcmProxies() != null) {
            rcmProxies().forEach(e -> e.validate());
        }
        if (pushInstallers() != null) {
            pushInstallers().forEach(e -> e.validate());
        }
        if (replicationAgents() != null) {
            replicationAgents().forEach(e -> e.validate());
        }
        if (reprotectAgents() != null) {
            reprotectAgents().forEach(e -> e.validate());
        }
        if (marsAgents() != null) {
            marsAgents().forEach(e -> e.validate());
        }
        if (dras() != null) {
            dras().forEach(e -> e.validate());
        }
        if (agentDetails() != null) {
            agentDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeJsonField("sourceAgentIdentityDetails", this.sourceAgentIdentityDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmFabricSpecificDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmFabricSpecificDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageRcmFabricSpecificDetails.
     */
    public static InMageRcmFabricSpecificDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmFabricSpecificDetails deserializedInMageRcmFabricSpecificDetails
                = new InMageRcmFabricSpecificDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.instanceType = reader.getString();
                } else if ("vmwareSiteId".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.vmwareSiteId = reader.getString();
                } else if ("physicalSiteId".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.physicalSiteId = reader.getString();
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.serviceEndpoint = reader.getString();
                } else if ("serviceResourceId".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.serviceResourceId = reader.getString();
                } else if ("serviceContainerId".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.serviceContainerId = reader.getString();
                } else if ("dataPlaneUri".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.dataPlaneUri = reader.getString();
                } else if ("controlPlaneUri".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.controlPlaneUri = reader.getString();
                } else if ("sourceAgentIdentityDetails".equals(fieldName)) {
                    deserializedInMageRcmFabricSpecificDetails.sourceAgentIdentityDetails
                        = IdentityProviderDetails.fromJson(reader);
                } else if ("processServers".equals(fieldName)) {
                    List<ProcessServerDetails> processServers
                        = reader.readArray(reader1 -> ProcessServerDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.processServers = processServers;
                } else if ("rcmProxies".equals(fieldName)) {
                    List<RcmProxyDetails> rcmProxies = reader.readArray(reader1 -> RcmProxyDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.rcmProxies = rcmProxies;
                } else if ("pushInstallers".equals(fieldName)) {
                    List<PushInstallerDetails> pushInstallers
                        = reader.readArray(reader1 -> PushInstallerDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.pushInstallers = pushInstallers;
                } else if ("replicationAgents".equals(fieldName)) {
                    List<ReplicationAgentDetails> replicationAgents
                        = reader.readArray(reader1 -> ReplicationAgentDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.replicationAgents = replicationAgents;
                } else if ("reprotectAgents".equals(fieldName)) {
                    List<ReprotectAgentDetails> reprotectAgents
                        = reader.readArray(reader1 -> ReprotectAgentDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.reprotectAgents = reprotectAgents;
                } else if ("marsAgents".equals(fieldName)) {
                    List<MarsAgentDetails> marsAgents = reader.readArray(reader1 -> MarsAgentDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.marsAgents = marsAgents;
                } else if ("dras".equals(fieldName)) {
                    List<DraDetails> dras = reader.readArray(reader1 -> DraDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.dras = dras;
                } else if ("agentDetails".equals(fieldName)) {
                    List<AgentDetails> agentDetails = reader.readArray(reader1 -> AgentDetails.fromJson(reader1));
                    deserializedInMageRcmFabricSpecificDetails.agentDetails = agentDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmFabricSpecificDetails;
        });
    }
}
