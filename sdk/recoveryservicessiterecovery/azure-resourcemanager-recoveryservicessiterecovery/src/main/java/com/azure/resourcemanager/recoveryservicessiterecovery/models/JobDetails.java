// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Job details based on specific job type.
 */
@Fluent
public class JobDetails implements JsonSerializable<JobDetails> {
    /*
     * Gets the type of job details (see JobDetailsTypes enum for possible values).
     */
    private String instanceType = "JobDetails";

    /*
     * The affected object properties like source server, source cloud, target server, target cloud etc. based on the
     * workflow object details.
     */
    private Map<String, String> affectedObjectDetails;

    /**
     * Creates an instance of JobDetails class.
     */
    public JobDetails() {
    }

    /**
     * Get the instanceType property: Gets the type of job details (see JobDetailsTypes enum for possible values).
     * 
     * @return the instanceType value.
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the affectedObjectDetails property: The affected object properties like source server, source cloud, target
     * server, target cloud etc. based on the workflow object details.
     * 
     * @return the affectedObjectDetails value.
     */
    public Map<String, String> affectedObjectDetails() {
        return this.affectedObjectDetails;
    }

    /**
     * Set the affectedObjectDetails property: The affected object properties like source server, source cloud, target
     * server, target cloud etc. based on the workflow object details.
     * 
     * @param affectedObjectDetails the affectedObjectDetails value to set.
     * @return the JobDetails object itself.
     */
    public JobDetails withAffectedObjectDetails(Map<String, String> affectedObjectDetails) {
        this.affectedObjectDetails = affectedObjectDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeMapField("affectedObjectDetails", this.affectedObjectDetails,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobDetails if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JobDetails.
     */
    public static JobDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("instanceType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AsrJobDetails".equals(discriminatorValue)) {
                    return AsrJobDetails.fromJson(readerToUse.reset());
                } else if ("ExportJobDetails".equals(discriminatorValue)) {
                    return ExportJobDetails.fromJson(readerToUse.reset());
                } else if ("FailoverJobDetails".equals(discriminatorValue)) {
                    return FailoverJobDetails.fromJson(readerToUse.reset());
                } else if ("SwitchProtectionJobDetails".equals(discriminatorValue)) {
                    return SwitchProtectionJobDetails.fromJson(readerToUse.reset());
                } else if ("TestFailoverJobDetails".equals(discriminatorValue)) {
                    return TestFailoverJobDetails.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static JobDetails fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobDetails deserializedJobDetails = new JobDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedJobDetails.instanceType = reader.getString();
                } else if ("affectedObjectDetails".equals(fieldName)) {
                    Map<String, String> affectedObjectDetails = reader.readMap(reader1 -> reader1.getString());
                    deserializedJobDetails.affectedObjectDetails = affectedObjectDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobDetails;
        });
    }
}
