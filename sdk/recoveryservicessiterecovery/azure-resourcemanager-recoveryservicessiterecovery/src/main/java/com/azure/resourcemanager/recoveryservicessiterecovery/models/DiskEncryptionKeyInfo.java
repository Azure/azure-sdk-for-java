// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Disk Encryption Key Information (BitLocker Encryption Key (BEK) on Windows).
 */
@Fluent
public final class DiskEncryptionKeyInfo implements JsonSerializable<DiskEncryptionKeyInfo> {
    /*
     * The secret url / identifier.
     */
    private String secretIdentifier;

    /*
     * The KeyVault resource ARM id for secret.
     */
    private String keyVaultResourceArmId;

    /**
     * Creates an instance of DiskEncryptionKeyInfo class.
     */
    public DiskEncryptionKeyInfo() {
    }

    /**
     * Get the secretIdentifier property: The secret url / identifier.
     * 
     * @return the secretIdentifier value.
     */
    public String secretIdentifier() {
        return this.secretIdentifier;
    }

    /**
     * Set the secretIdentifier property: The secret url / identifier.
     * 
     * @param secretIdentifier the secretIdentifier value to set.
     * @return the DiskEncryptionKeyInfo object itself.
     */
    public DiskEncryptionKeyInfo withSecretIdentifier(String secretIdentifier) {
        this.secretIdentifier = secretIdentifier;
        return this;
    }

    /**
     * Get the keyVaultResourceArmId property: The KeyVault resource ARM id for secret.
     * 
     * @return the keyVaultResourceArmId value.
     */
    public String keyVaultResourceArmId() {
        return this.keyVaultResourceArmId;
    }

    /**
     * Set the keyVaultResourceArmId property: The KeyVault resource ARM id for secret.
     * 
     * @param keyVaultResourceArmId the keyVaultResourceArmId value to set.
     * @return the DiskEncryptionKeyInfo object itself.
     */
    public DiskEncryptionKeyInfo withKeyVaultResourceArmId(String keyVaultResourceArmId) {
        this.keyVaultResourceArmId = keyVaultResourceArmId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretIdentifier", this.secretIdentifier);
        jsonWriter.writeStringField("keyVaultResourceArmId", this.keyVaultResourceArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskEncryptionKeyInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskEncryptionKeyInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskEncryptionKeyInfo.
     */
    public static DiskEncryptionKeyInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskEncryptionKeyInfo deserializedDiskEncryptionKeyInfo = new DiskEncryptionKeyInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretIdentifier".equals(fieldName)) {
                    deserializedDiskEncryptionKeyInfo.secretIdentifier = reader.getString();
                } else if ("keyVaultResourceArmId".equals(fieldName)) {
                    deserializedDiskEncryptionKeyInfo.keyVaultResourceArmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskEncryptionKeyInfo;
        });
    }
}
