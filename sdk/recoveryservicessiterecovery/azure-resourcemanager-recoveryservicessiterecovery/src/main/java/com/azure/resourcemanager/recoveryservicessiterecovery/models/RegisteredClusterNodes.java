// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Extended location of the resource.
 */
@Fluent
public final class RegisteredClusterNodes implements JsonSerializable<RegisteredClusterNodes> {
    /*
     * The cluster node name.
     */
    private String clusterNodeFqdn;

    /*
     * The machine ID.
     */
    private String machineId;

    /*
     * The BIOS ID.
     */
    private String biosId;

    /*
     * A value indicating whether this represents virtual entity hosting all the shared disks.
     */
    private Boolean isSharedDiskVirtualNode;

    /**
     * Creates an instance of RegisteredClusterNodes class.
     */
    public RegisteredClusterNodes() {
    }

    /**
     * Get the clusterNodeFqdn property: The cluster node name.
     * 
     * @return the clusterNodeFqdn value.
     */
    public String clusterNodeFqdn() {
        return this.clusterNodeFqdn;
    }

    /**
     * Set the clusterNodeFqdn property: The cluster node name.
     * 
     * @param clusterNodeFqdn the clusterNodeFqdn value to set.
     * @return the RegisteredClusterNodes object itself.
     */
    public RegisteredClusterNodes withClusterNodeFqdn(String clusterNodeFqdn) {
        this.clusterNodeFqdn = clusterNodeFqdn;
        return this;
    }

    /**
     * Get the machineId property: The machine ID.
     * 
     * @return the machineId value.
     */
    public String machineId() {
        return this.machineId;
    }

    /**
     * Set the machineId property: The machine ID.
     * 
     * @param machineId the machineId value to set.
     * @return the RegisteredClusterNodes object itself.
     */
    public RegisteredClusterNodes withMachineId(String machineId) {
        this.machineId = machineId;
        return this;
    }

    /**
     * Get the biosId property: The BIOS ID.
     * 
     * @return the biosId value.
     */
    public String biosId() {
        return this.biosId;
    }

    /**
     * Set the biosId property: The BIOS ID.
     * 
     * @param biosId the biosId value to set.
     * @return the RegisteredClusterNodes object itself.
     */
    public RegisteredClusterNodes withBiosId(String biosId) {
        this.biosId = biosId;
        return this;
    }

    /**
     * Get the isSharedDiskVirtualNode property: A value indicating whether this represents virtual entity hosting all
     * the shared disks.
     * 
     * @return the isSharedDiskVirtualNode value.
     */
    public Boolean isSharedDiskVirtualNode() {
        return this.isSharedDiskVirtualNode;
    }

    /**
     * Set the isSharedDiskVirtualNode property: A value indicating whether this represents virtual entity hosting all
     * the shared disks.
     * 
     * @param isSharedDiskVirtualNode the isSharedDiskVirtualNode value to set.
     * @return the RegisteredClusterNodes object itself.
     */
    public RegisteredClusterNodes withIsSharedDiskVirtualNode(Boolean isSharedDiskVirtualNode) {
        this.isSharedDiskVirtualNode = isSharedDiskVirtualNode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterNodeFqdn", this.clusterNodeFqdn);
        jsonWriter.writeStringField("machineId", this.machineId);
        jsonWriter.writeStringField("biosId", this.biosId);
        jsonWriter.writeBooleanField("isSharedDiskVirtualNode", this.isSharedDiskVirtualNode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisteredClusterNodes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisteredClusterNodes if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegisteredClusterNodes.
     */
    public static RegisteredClusterNodes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegisteredClusterNodes deserializedRegisteredClusterNodes = new RegisteredClusterNodes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterNodeFqdn".equals(fieldName)) {
                    deserializedRegisteredClusterNodes.clusterNodeFqdn = reader.getString();
                } else if ("machineId".equals(fieldName)) {
                    deserializedRegisteredClusterNodes.machineId = reader.getString();
                } else if ("biosId".equals(fieldName)) {
                    deserializedRegisteredClusterNodes.biosId = reader.getString();
                } else if ("isSharedDiskVirtualNode".equals(fieldName)) {
                    deserializedRegisteredClusterNodes.isSharedDiskVirtualNode
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegisteredClusterNodes;
        });
    }
}
