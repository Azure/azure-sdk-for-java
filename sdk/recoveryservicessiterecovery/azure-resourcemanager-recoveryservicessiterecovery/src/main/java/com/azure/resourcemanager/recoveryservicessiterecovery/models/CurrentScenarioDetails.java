// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Current scenario details of the protected entity.
 */
@Fluent
public final class CurrentScenarioDetails implements JsonSerializable<CurrentScenarioDetails> {
    /*
     * Scenario name.
     */
    private String scenarioName;

    /*
     * ARM Id of the job being executed.
     */
    private String jobId;

    /*
     * Start time of the workflow.
     */
    private OffsetDateTime startTime;

    /**
     * Creates an instance of CurrentScenarioDetails class.
     */
    public CurrentScenarioDetails() {
    }

    /**
     * Get the scenarioName property: Scenario name.
     * 
     * @return the scenarioName value.
     */
    public String scenarioName() {
        return this.scenarioName;
    }

    /**
     * Set the scenarioName property: Scenario name.
     * 
     * @param scenarioName the scenarioName value to set.
     * @return the CurrentScenarioDetails object itself.
     */
    public CurrentScenarioDetails withScenarioName(String scenarioName) {
        this.scenarioName = scenarioName;
        return this;
    }

    /**
     * Get the jobId property: ARM Id of the job being executed.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: ARM Id of the job being executed.
     * 
     * @param jobId the jobId value to set.
     * @return the CurrentScenarioDetails object itself.
     */
    public CurrentScenarioDetails withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the startTime property: Start time of the workflow.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Start time of the workflow.
     * 
     * @param startTime the startTime value to set.
     * @return the CurrentScenarioDetails object itself.
     */
    public CurrentScenarioDetails withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scenarioName", this.scenarioName);
        jsonWriter.writeStringField("jobId", this.jobId);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CurrentScenarioDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CurrentScenarioDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CurrentScenarioDetails.
     */
    public static CurrentScenarioDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CurrentScenarioDetails deserializedCurrentScenarioDetails = new CurrentScenarioDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scenarioName".equals(fieldName)) {
                    deserializedCurrentScenarioDetails.scenarioName = reader.getString();
                } else if ("jobId".equals(fieldName)) {
                    deserializedCurrentScenarioDetails.jobId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedCurrentScenarioDetails.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCurrentScenarioDetails;
        });
    }
}
