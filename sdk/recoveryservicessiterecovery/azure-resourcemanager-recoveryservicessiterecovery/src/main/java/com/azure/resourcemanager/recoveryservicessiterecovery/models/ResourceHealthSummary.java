// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Base class to define the health summary of the resources contained under an Arm resource.
 */
@Fluent
public final class ResourceHealthSummary implements JsonSerializable<ResourceHealthSummary> {
    /*
     * The count of total resources under the container.
     */
    private Integer resourceCount;

    /*
     * The list of summary of health errors across the resources under the container.
     */
    private List<HealthErrorSummary> issues;

    /*
     * The categorized resource counts.
     */
    private Map<String, Integer> categorizedResourceCounts;

    /**
     * Creates an instance of ResourceHealthSummary class.
     */
    public ResourceHealthSummary() {
    }

    /**
     * Get the resourceCount property: The count of total resources under the container.
     * 
     * @return the resourceCount value.
     */
    public Integer resourceCount() {
        return this.resourceCount;
    }

    /**
     * Set the resourceCount property: The count of total resources under the container.
     * 
     * @param resourceCount the resourceCount value to set.
     * @return the ResourceHealthSummary object itself.
     */
    public ResourceHealthSummary withResourceCount(Integer resourceCount) {
        this.resourceCount = resourceCount;
        return this;
    }

    /**
     * Get the issues property: The list of summary of health errors across the resources under the container.
     * 
     * @return the issues value.
     */
    public List<HealthErrorSummary> issues() {
        return this.issues;
    }

    /**
     * Set the issues property: The list of summary of health errors across the resources under the container.
     * 
     * @param issues the issues value to set.
     * @return the ResourceHealthSummary object itself.
     */
    public ResourceHealthSummary withIssues(List<HealthErrorSummary> issues) {
        this.issues = issues;
        return this;
    }

    /**
     * Get the categorizedResourceCounts property: The categorized resource counts.
     * 
     * @return the categorizedResourceCounts value.
     */
    public Map<String, Integer> categorizedResourceCounts() {
        return this.categorizedResourceCounts;
    }

    /**
     * Set the categorizedResourceCounts property: The categorized resource counts.
     * 
     * @param categorizedResourceCounts the categorizedResourceCounts value to set.
     * @return the ResourceHealthSummary object itself.
     */
    public ResourceHealthSummary withCategorizedResourceCounts(Map<String, Integer> categorizedResourceCounts) {
        this.categorizedResourceCounts = categorizedResourceCounts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issues() != null) {
            issues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("resourceCount", this.resourceCount);
        jsonWriter.writeArrayField("issues", this.issues, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("categorizedResourceCounts", this.categorizedResourceCounts,
            (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceHealthSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceHealthSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceHealthSummary.
     */
    public static ResourceHealthSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceHealthSummary deserializedResourceHealthSummary = new ResourceHealthSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceCount".equals(fieldName)) {
                    deserializedResourceHealthSummary.resourceCount = reader.getNullable(JsonReader::getInt);
                } else if ("issues".equals(fieldName)) {
                    List<HealthErrorSummary> issues = reader.readArray(reader1 -> HealthErrorSummary.fromJson(reader1));
                    deserializedResourceHealthSummary.issues = issues;
                } else if ("categorizedResourceCounts".equals(fieldName)) {
                    Map<String, Integer> categorizedResourceCounts = reader.readMap(reader1 -> reader1.getInt());
                    deserializedResourceHealthSummary.categorizedResourceCounts = categorizedResourceCounts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceHealthSummary;
        });
    }
}
