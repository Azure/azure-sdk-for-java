// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Test migrate cleanup input properties.
 */
@Fluent
public final class TestMigrateCleanupInputProperties implements JsonSerializable<TestMigrateCleanupInputProperties> {
    /*
     * Test migrate cleanup comments.
     */
    private String comments;

    /**
     * Creates an instance of TestMigrateCleanupInputProperties class.
     */
    public TestMigrateCleanupInputProperties() {
    }

    /**
     * Get the comments property: Test migrate cleanup comments.
     * 
     * @return the comments value.
     */
    public String comments() {
        return this.comments;
    }

    /**
     * Set the comments property: Test migrate cleanup comments.
     * 
     * @param comments the comments value to set.
     * @return the TestMigrateCleanupInputProperties object itself.
     */
    public TestMigrateCleanupInputProperties withComments(String comments) {
        this.comments = comments;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("comments", this.comments);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestMigrateCleanupInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestMigrateCleanupInputProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestMigrateCleanupInputProperties.
     */
    public static TestMigrateCleanupInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestMigrateCleanupInputProperties deserializedTestMigrateCleanupInputProperties
                = new TestMigrateCleanupInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("comments".equals(fieldName)) {
                    deserializedTestMigrateCleanupInputProperties.comments = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestMigrateCleanupInputProperties;
        });
    }
}
