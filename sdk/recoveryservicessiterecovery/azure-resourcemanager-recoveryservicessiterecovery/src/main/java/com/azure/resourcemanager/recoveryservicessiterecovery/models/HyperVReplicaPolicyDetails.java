// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Hyper-V Replica Blue specific protection profile details.
 */
@Fluent
public final class HyperVReplicaPolicyDetails extends PolicyProviderSpecificDetails {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "HyperVReplica2012";

    /*
     * A value indicating the number of recovery points.
     */
    private Integer recoveryPoints;

    /*
     * A value indicating the application consistent frequency.
     */
    private Integer applicationConsistentSnapshotFrequencyInHours;

    /*
     * A value indicating whether compression has to be enabled.
     */
    private String compression;

    /*
     * A value indicating whether IR is online.
     */
    private String initialReplicationMethod;

    /*
     * A value indicating the online IR start time.
     */
    private String onlineReplicationStartTime;

    /*
     * A value indicating the offline IR import path.
     */
    private String offlineReplicationImportPath;

    /*
     * A value indicating the offline IR export path.
     */
    private String offlineReplicationExportPath;

    /*
     * A value indicating the recovery HTTPS port.
     */
    private Integer replicationPort;

    /*
     * A value indicating the authentication type.
     */
    private Integer allowedAuthenticationType;

    /*
     * A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud
     */
    private String replicaDeletionOption;

    /**
     * Creates an instance of HyperVReplicaPolicyDetails class.
     */
    public HyperVReplicaPolicyDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the recoveryPoints property: A value indicating the number of recovery points.
     * 
     * @return the recoveryPoints value.
     */
    public Integer recoveryPoints() {
        return this.recoveryPoints;
    }

    /**
     * Set the recoveryPoints property: A value indicating the number of recovery points.
     * 
     * @param recoveryPoints the recoveryPoints value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withRecoveryPoints(Integer recoveryPoints) {
        this.recoveryPoints = recoveryPoints;
        return this;
    }

    /**
     * Get the applicationConsistentSnapshotFrequencyInHours property: A value indicating the application consistent
     * frequency.
     * 
     * @return the applicationConsistentSnapshotFrequencyInHours value.
     */
    public Integer applicationConsistentSnapshotFrequencyInHours() {
        return this.applicationConsistentSnapshotFrequencyInHours;
    }

    /**
     * Set the applicationConsistentSnapshotFrequencyInHours property: A value indicating the application consistent
     * frequency.
     * 
     * @param applicationConsistentSnapshotFrequencyInHours the applicationConsistentSnapshotFrequencyInHours value to
     * set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails
        withApplicationConsistentSnapshotFrequencyInHours(Integer applicationConsistentSnapshotFrequencyInHours) {
        this.applicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHours;
        return this;
    }

    /**
     * Get the compression property: A value indicating whether compression has to be enabled.
     * 
     * @return the compression value.
     */
    public String compression() {
        return this.compression;
    }

    /**
     * Set the compression property: A value indicating whether compression has to be enabled.
     * 
     * @param compression the compression value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withCompression(String compression) {
        this.compression = compression;
        return this;
    }

    /**
     * Get the initialReplicationMethod property: A value indicating whether IR is online.
     * 
     * @return the initialReplicationMethod value.
     */
    public String initialReplicationMethod() {
        return this.initialReplicationMethod;
    }

    /**
     * Set the initialReplicationMethod property: A value indicating whether IR is online.
     * 
     * @param initialReplicationMethod the initialReplicationMethod value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withInitialReplicationMethod(String initialReplicationMethod) {
        this.initialReplicationMethod = initialReplicationMethod;
        return this;
    }

    /**
     * Get the onlineReplicationStartTime property: A value indicating the online IR start time.
     * 
     * @return the onlineReplicationStartTime value.
     */
    public String onlineReplicationStartTime() {
        return this.onlineReplicationStartTime;
    }

    /**
     * Set the onlineReplicationStartTime property: A value indicating the online IR start time.
     * 
     * @param onlineReplicationStartTime the onlineReplicationStartTime value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withOnlineReplicationStartTime(String onlineReplicationStartTime) {
        this.onlineReplicationStartTime = onlineReplicationStartTime;
        return this;
    }

    /**
     * Get the offlineReplicationImportPath property: A value indicating the offline IR import path.
     * 
     * @return the offlineReplicationImportPath value.
     */
    public String offlineReplicationImportPath() {
        return this.offlineReplicationImportPath;
    }

    /**
     * Set the offlineReplicationImportPath property: A value indicating the offline IR import path.
     * 
     * @param offlineReplicationImportPath the offlineReplicationImportPath value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withOfflineReplicationImportPath(String offlineReplicationImportPath) {
        this.offlineReplicationImportPath = offlineReplicationImportPath;
        return this;
    }

    /**
     * Get the offlineReplicationExportPath property: A value indicating the offline IR export path.
     * 
     * @return the offlineReplicationExportPath value.
     */
    public String offlineReplicationExportPath() {
        return this.offlineReplicationExportPath;
    }

    /**
     * Set the offlineReplicationExportPath property: A value indicating the offline IR export path.
     * 
     * @param offlineReplicationExportPath the offlineReplicationExportPath value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withOfflineReplicationExportPath(String offlineReplicationExportPath) {
        this.offlineReplicationExportPath = offlineReplicationExportPath;
        return this;
    }

    /**
     * Get the replicationPort property: A value indicating the recovery HTTPS port.
     * 
     * @return the replicationPort value.
     */
    public Integer replicationPort() {
        return this.replicationPort;
    }

    /**
     * Set the replicationPort property: A value indicating the recovery HTTPS port.
     * 
     * @param replicationPort the replicationPort value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withReplicationPort(Integer replicationPort) {
        this.replicationPort = replicationPort;
        return this;
    }

    /**
     * Get the allowedAuthenticationType property: A value indicating the authentication type.
     * 
     * @return the allowedAuthenticationType value.
     */
    public Integer allowedAuthenticationType() {
        return this.allowedAuthenticationType;
    }

    /**
     * Set the allowedAuthenticationType property: A value indicating the authentication type.
     * 
     * @param allowedAuthenticationType the allowedAuthenticationType value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withAllowedAuthenticationType(Integer allowedAuthenticationType) {
        this.allowedAuthenticationType = allowedAuthenticationType;
        return this;
    }

    /**
     * Get the replicaDeletionOption property: A value indicating whether the VM has to be auto deleted. Supported
     * Values: String.Empty, None, OnRecoveryCloud.
     * 
     * @return the replicaDeletionOption value.
     */
    public String replicaDeletionOption() {
        return this.replicaDeletionOption;
    }

    /**
     * Set the replicaDeletionOption property: A value indicating whether the VM has to be auto deleted. Supported
     * Values: String.Empty, None, OnRecoveryCloud.
     * 
     * @param replicaDeletionOption the replicaDeletionOption value to set.
     * @return the HyperVReplicaPolicyDetails object itself.
     */
    public HyperVReplicaPolicyDetails withReplicaDeletionOption(String replicaDeletionOption) {
        this.replicaDeletionOption = replicaDeletionOption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeNumberField("recoveryPoints", this.recoveryPoints);
        jsonWriter.writeNumberField("applicationConsistentSnapshotFrequencyInHours",
            this.applicationConsistentSnapshotFrequencyInHours);
        jsonWriter.writeStringField("compression", this.compression);
        jsonWriter.writeStringField("initialReplicationMethod", this.initialReplicationMethod);
        jsonWriter.writeStringField("onlineReplicationStartTime", this.onlineReplicationStartTime);
        jsonWriter.writeStringField("offlineReplicationImportPath", this.offlineReplicationImportPath);
        jsonWriter.writeStringField("offlineReplicationExportPath", this.offlineReplicationExportPath);
        jsonWriter.writeNumberField("replicationPort", this.replicationPort);
        jsonWriter.writeNumberField("allowedAuthenticationType", this.allowedAuthenticationType);
        jsonWriter.writeStringField("replicaDeletionOption", this.replicaDeletionOption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVReplicaPolicyDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVReplicaPolicyDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVReplicaPolicyDetails.
     */
    public static HyperVReplicaPolicyDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVReplicaPolicyDetails deserializedHyperVReplicaPolicyDetails = new HyperVReplicaPolicyDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.instanceType = reader.getString();
                } else if ("recoveryPoints".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.recoveryPoints = reader.getNullable(JsonReader::getInt);
                } else if ("applicationConsistentSnapshotFrequencyInHours".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.applicationConsistentSnapshotFrequencyInHours
                        = reader.getNullable(JsonReader::getInt);
                } else if ("compression".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.compression = reader.getString();
                } else if ("initialReplicationMethod".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.initialReplicationMethod = reader.getString();
                } else if ("onlineReplicationStartTime".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.onlineReplicationStartTime = reader.getString();
                } else if ("offlineReplicationImportPath".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.offlineReplicationImportPath = reader.getString();
                } else if ("offlineReplicationExportPath".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.offlineReplicationExportPath = reader.getString();
                } else if ("replicationPort".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.replicationPort = reader.getNullable(JsonReader::getInt);
                } else if ("allowedAuthenticationType".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.allowedAuthenticationType
                        = reader.getNullable(JsonReader::getInt);
                } else if ("replicaDeletionOption".equals(fieldName)) {
                    deserializedHyperVReplicaPolicyDetails.replicaDeletionOption = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVReplicaPolicyDetails;
        });
    }
}
