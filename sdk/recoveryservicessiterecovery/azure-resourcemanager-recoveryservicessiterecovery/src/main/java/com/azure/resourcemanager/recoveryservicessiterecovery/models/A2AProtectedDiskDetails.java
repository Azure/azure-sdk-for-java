// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A2A protected disk details.
 */
@Fluent
public final class A2AProtectedDiskDetails implements JsonSerializable<A2AProtectedDiskDetails> {
    /*
     * The disk uri.
     */
    private String diskUri;

    /*
     * The recovery disk storage account.
     */
    private String recoveryAzureStorageAccountId;

    /*
     * The primary disk storage account.
     */
    private String primaryDiskAzureStorageAccountId;

    /*
     * Recovery disk uri.
     */
    private String recoveryDiskUri;

    /*
     * The disk name.
     */
    private String diskName;

    /*
     * The disk capacity in bytes.
     */
    private Long diskCapacityInBytes;

    /*
     * The primary staging storage account.
     */
    private String primaryStagingAzureStorageAccountId;

    /*
     * The type of disk.
     */
    private String diskType;

    /*
     * A value indicating whether resync is required for this disk.
     */
    private Boolean resyncRequired;

    /*
     * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     */
    private Integer monitoringPercentageCompletion;

    /*
     * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     */
    private String monitoringJobType;

    /*
     * The data pending for replication in MB at staging account.
     */
    private Double dataPendingInStagingStorageAccountInMB;

    /*
     * The data pending at source virtual machine in MB.
     */
    private Double dataPendingAtSourceAgentInMB;

    /*
     * The disk state.
     */
    private String diskState;

    /*
     * The disk level operations list.
     */
    private List<String> allowedDiskLevelOperation;

    /*
     * A value indicating whether vm has encrypted os disk or not.
     */
    private Boolean isDiskEncrypted;

    /*
     * The secret URL / identifier (BEK).
     */
    private String secretIdentifier;

    /*
     * The KeyVault resource id for secret (BEK).
     */
    private String dekKeyVaultArmId;

    /*
     * A value indicating whether disk key got encrypted or not.
     */
    private Boolean isDiskKeyEncrypted;

    /*
     * The key URL / identifier (KEK).
     */
    private String keyIdentifier;

    /*
     * The KeyVault resource id for key (KEK).
     */
    private String kekKeyVaultArmId;

    /*
     * The failover name for the managed disk.
     */
    private String failoverDiskName;

    /*
     * The test failover name for the managed disk.
     */
    private String tfoDiskName;

    /**
     * Creates an instance of A2AProtectedDiskDetails class.
     */
    public A2AProtectedDiskDetails() {
    }

    /**
     * Get the diskUri property: The disk uri.
     * 
     * @return the diskUri value.
     */
    public String diskUri() {
        return this.diskUri;
    }

    /**
     * Set the diskUri property: The disk uri.
     * 
     * @param diskUri the diskUri value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withDiskUri(String diskUri) {
        this.diskUri = diskUri;
        return this;
    }

    /**
     * Get the recoveryAzureStorageAccountId property: The recovery disk storage account.
     * 
     * @return the recoveryAzureStorageAccountId value.
     */
    public String recoveryAzureStorageAccountId() {
        return this.recoveryAzureStorageAccountId;
    }

    /**
     * Set the recoveryAzureStorageAccountId property: The recovery disk storage account.
     * 
     * @param recoveryAzureStorageAccountId the recoveryAzureStorageAccountId value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withRecoveryAzureStorageAccountId(String recoveryAzureStorageAccountId) {
        this.recoveryAzureStorageAccountId = recoveryAzureStorageAccountId;
        return this;
    }

    /**
     * Get the primaryDiskAzureStorageAccountId property: The primary disk storage account.
     * 
     * @return the primaryDiskAzureStorageAccountId value.
     */
    public String primaryDiskAzureStorageAccountId() {
        return this.primaryDiskAzureStorageAccountId;
    }

    /**
     * Set the primaryDiskAzureStorageAccountId property: The primary disk storage account.
     * 
     * @param primaryDiskAzureStorageAccountId the primaryDiskAzureStorageAccountId value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withPrimaryDiskAzureStorageAccountId(String primaryDiskAzureStorageAccountId) {
        this.primaryDiskAzureStorageAccountId = primaryDiskAzureStorageAccountId;
        return this;
    }

    /**
     * Get the recoveryDiskUri property: Recovery disk uri.
     * 
     * @return the recoveryDiskUri value.
     */
    public String recoveryDiskUri() {
        return this.recoveryDiskUri;
    }

    /**
     * Set the recoveryDiskUri property: Recovery disk uri.
     * 
     * @param recoveryDiskUri the recoveryDiskUri value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withRecoveryDiskUri(String recoveryDiskUri) {
        this.recoveryDiskUri = recoveryDiskUri;
        return this;
    }

    /**
     * Get the diskName property: The disk name.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Set the diskName property: The disk name.
     * 
     * @param diskName the diskName value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withDiskName(String diskName) {
        this.diskName = diskName;
        return this;
    }

    /**
     * Get the diskCapacityInBytes property: The disk capacity in bytes.
     * 
     * @return the diskCapacityInBytes value.
     */
    public Long diskCapacityInBytes() {
        return this.diskCapacityInBytes;
    }

    /**
     * Set the diskCapacityInBytes property: The disk capacity in bytes.
     * 
     * @param diskCapacityInBytes the diskCapacityInBytes value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withDiskCapacityInBytes(Long diskCapacityInBytes) {
        this.diskCapacityInBytes = diskCapacityInBytes;
        return this;
    }

    /**
     * Get the primaryStagingAzureStorageAccountId property: The primary staging storage account.
     * 
     * @return the primaryStagingAzureStorageAccountId value.
     */
    public String primaryStagingAzureStorageAccountId() {
        return this.primaryStagingAzureStorageAccountId;
    }

    /**
     * Set the primaryStagingAzureStorageAccountId property: The primary staging storage account.
     * 
     * @param primaryStagingAzureStorageAccountId the primaryStagingAzureStorageAccountId value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withPrimaryStagingAzureStorageAccountId(String primaryStagingAzureStorageAccountId) {
        this.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
        return this;
    }

    /**
     * Get the diskType property: The type of disk.
     * 
     * @return the diskType value.
     */
    public String diskType() {
        return this.diskType;
    }

    /**
     * Set the diskType property: The type of disk.
     * 
     * @param diskType the diskType value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withDiskType(String diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Get the resyncRequired property: A value indicating whether resync is required for this disk.
     * 
     * @return the resyncRequired value.
     */
    public Boolean resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Set the resyncRequired property: A value indicating whether resync is required for this disk.
     * 
     * @param resyncRequired the resyncRequired value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withResyncRequired(Boolean resyncRequired) {
        this.resyncRequired = resyncRequired;
        return this;
    }

    /**
     * Get the monitoringPercentageCompletion property: The percentage of the monitoring job. The type of the monitoring
     * job is defined by MonitoringJobType property.
     * 
     * @return the monitoringPercentageCompletion value.
     */
    public Integer monitoringPercentageCompletion() {
        return this.monitoringPercentageCompletion;
    }

    /**
     * Set the monitoringPercentageCompletion property: The percentage of the monitoring job. The type of the monitoring
     * job is defined by MonitoringJobType property.
     * 
     * @param monitoringPercentageCompletion the monitoringPercentageCompletion value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withMonitoringPercentageCompletion(Integer monitoringPercentageCompletion) {
        this.monitoringPercentageCompletion = monitoringPercentageCompletion;
        return this;
    }

    /**
     * Get the monitoringJobType property: The type of the monitoring job. The progress is contained in
     * MonitoringPercentageCompletion property.
     * 
     * @return the monitoringJobType value.
     */
    public String monitoringJobType() {
        return this.monitoringJobType;
    }

    /**
     * Set the monitoringJobType property: The type of the monitoring job. The progress is contained in
     * MonitoringPercentageCompletion property.
     * 
     * @param monitoringJobType the monitoringJobType value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withMonitoringJobType(String monitoringJobType) {
        this.monitoringJobType = monitoringJobType;
        return this;
    }

    /**
     * Get the dataPendingInStagingStorageAccountInMB property: The data pending for replication in MB at staging
     * account.
     * 
     * @return the dataPendingInStagingStorageAccountInMB value.
     */
    public Double dataPendingInStagingStorageAccountInMB() {
        return this.dataPendingInStagingStorageAccountInMB;
    }

    /**
     * Set the dataPendingInStagingStorageAccountInMB property: The data pending for replication in MB at staging
     * account.
     * 
     * @param dataPendingInStagingStorageAccountInMB the dataPendingInStagingStorageAccountInMB value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails
        withDataPendingInStagingStorageAccountInMB(Double dataPendingInStagingStorageAccountInMB) {
        this.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
        return this;
    }

    /**
     * Get the dataPendingAtSourceAgentInMB property: The data pending at source virtual machine in MB.
     * 
     * @return the dataPendingAtSourceAgentInMB value.
     */
    public Double dataPendingAtSourceAgentInMB() {
        return this.dataPendingAtSourceAgentInMB;
    }

    /**
     * Set the dataPendingAtSourceAgentInMB property: The data pending at source virtual machine in MB.
     * 
     * @param dataPendingAtSourceAgentInMB the dataPendingAtSourceAgentInMB value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withDataPendingAtSourceAgentInMB(Double dataPendingAtSourceAgentInMB) {
        this.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
        return this;
    }

    /**
     * Get the diskState property: The disk state.
     * 
     * @return the diskState value.
     */
    public String diskState() {
        return this.diskState;
    }

    /**
     * Set the diskState property: The disk state.
     * 
     * @param diskState the diskState value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withDiskState(String diskState) {
        this.diskState = diskState;
        return this;
    }

    /**
     * Get the allowedDiskLevelOperation property: The disk level operations list.
     * 
     * @return the allowedDiskLevelOperation value.
     */
    public List<String> allowedDiskLevelOperation() {
        return this.allowedDiskLevelOperation;
    }

    /**
     * Set the allowedDiskLevelOperation property: The disk level operations list.
     * 
     * @param allowedDiskLevelOperation the allowedDiskLevelOperation value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withAllowedDiskLevelOperation(List<String> allowedDiskLevelOperation) {
        this.allowedDiskLevelOperation = allowedDiskLevelOperation;
        return this;
    }

    /**
     * Get the isDiskEncrypted property: A value indicating whether vm has encrypted os disk or not.
     * 
     * @return the isDiskEncrypted value.
     */
    public Boolean isDiskEncrypted() {
        return this.isDiskEncrypted;
    }

    /**
     * Set the isDiskEncrypted property: A value indicating whether vm has encrypted os disk or not.
     * 
     * @param isDiskEncrypted the isDiskEncrypted value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withIsDiskEncrypted(Boolean isDiskEncrypted) {
        this.isDiskEncrypted = isDiskEncrypted;
        return this;
    }

    /**
     * Get the secretIdentifier property: The secret URL / identifier (BEK).
     * 
     * @return the secretIdentifier value.
     */
    public String secretIdentifier() {
        return this.secretIdentifier;
    }

    /**
     * Set the secretIdentifier property: The secret URL / identifier (BEK).
     * 
     * @param secretIdentifier the secretIdentifier value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withSecretIdentifier(String secretIdentifier) {
        this.secretIdentifier = secretIdentifier;
        return this;
    }

    /**
     * Get the dekKeyVaultArmId property: The KeyVault resource id for secret (BEK).
     * 
     * @return the dekKeyVaultArmId value.
     */
    public String dekKeyVaultArmId() {
        return this.dekKeyVaultArmId;
    }

    /**
     * Set the dekKeyVaultArmId property: The KeyVault resource id for secret (BEK).
     * 
     * @param dekKeyVaultArmId the dekKeyVaultArmId value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withDekKeyVaultArmId(String dekKeyVaultArmId) {
        this.dekKeyVaultArmId = dekKeyVaultArmId;
        return this;
    }

    /**
     * Get the isDiskKeyEncrypted property: A value indicating whether disk key got encrypted or not.
     * 
     * @return the isDiskKeyEncrypted value.
     */
    public Boolean isDiskKeyEncrypted() {
        return this.isDiskKeyEncrypted;
    }

    /**
     * Set the isDiskKeyEncrypted property: A value indicating whether disk key got encrypted or not.
     * 
     * @param isDiskKeyEncrypted the isDiskKeyEncrypted value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withIsDiskKeyEncrypted(Boolean isDiskKeyEncrypted) {
        this.isDiskKeyEncrypted = isDiskKeyEncrypted;
        return this;
    }

    /**
     * Get the keyIdentifier property: The key URL / identifier (KEK).
     * 
     * @return the keyIdentifier value.
     */
    public String keyIdentifier() {
        return this.keyIdentifier;
    }

    /**
     * Set the keyIdentifier property: The key URL / identifier (KEK).
     * 
     * @param keyIdentifier the keyIdentifier value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withKeyIdentifier(String keyIdentifier) {
        this.keyIdentifier = keyIdentifier;
        return this;
    }

    /**
     * Get the kekKeyVaultArmId property: The KeyVault resource id for key (KEK).
     * 
     * @return the kekKeyVaultArmId value.
     */
    public String kekKeyVaultArmId() {
        return this.kekKeyVaultArmId;
    }

    /**
     * Set the kekKeyVaultArmId property: The KeyVault resource id for key (KEK).
     * 
     * @param kekKeyVaultArmId the kekKeyVaultArmId value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withKekKeyVaultArmId(String kekKeyVaultArmId) {
        this.kekKeyVaultArmId = kekKeyVaultArmId;
        return this;
    }

    /**
     * Get the failoverDiskName property: The failover name for the managed disk.
     * 
     * @return the failoverDiskName value.
     */
    public String failoverDiskName() {
        return this.failoverDiskName;
    }

    /**
     * Set the failoverDiskName property: The failover name for the managed disk.
     * 
     * @param failoverDiskName the failoverDiskName value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withFailoverDiskName(String failoverDiskName) {
        this.failoverDiskName = failoverDiskName;
        return this;
    }

    /**
     * Get the tfoDiskName property: The test failover name for the managed disk.
     * 
     * @return the tfoDiskName value.
     */
    public String tfoDiskName() {
        return this.tfoDiskName;
    }

    /**
     * Set the tfoDiskName property: The test failover name for the managed disk.
     * 
     * @param tfoDiskName the tfoDiskName value to set.
     * @return the A2AProtectedDiskDetails object itself.
     */
    public A2AProtectedDiskDetails withTfoDiskName(String tfoDiskName) {
        this.tfoDiskName = tfoDiskName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskUri", this.diskUri);
        jsonWriter.writeStringField("recoveryAzureStorageAccountId", this.recoveryAzureStorageAccountId);
        jsonWriter.writeStringField("primaryDiskAzureStorageAccountId", this.primaryDiskAzureStorageAccountId);
        jsonWriter.writeStringField("recoveryDiskUri", this.recoveryDiskUri);
        jsonWriter.writeStringField("diskName", this.diskName);
        jsonWriter.writeNumberField("diskCapacityInBytes", this.diskCapacityInBytes);
        jsonWriter.writeStringField("primaryStagingAzureStorageAccountId", this.primaryStagingAzureStorageAccountId);
        jsonWriter.writeStringField("diskType", this.diskType);
        jsonWriter.writeBooleanField("resyncRequired", this.resyncRequired);
        jsonWriter.writeNumberField("monitoringPercentageCompletion", this.monitoringPercentageCompletion);
        jsonWriter.writeStringField("monitoringJobType", this.monitoringJobType);
        jsonWriter.writeNumberField("dataPendingInStagingStorageAccountInMB",
            this.dataPendingInStagingStorageAccountInMB);
        jsonWriter.writeNumberField("dataPendingAtSourceAgentInMB", this.dataPendingAtSourceAgentInMB);
        jsonWriter.writeStringField("diskState", this.diskState);
        jsonWriter.writeArrayField("allowedDiskLevelOperation", this.allowedDiskLevelOperation,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isDiskEncrypted", this.isDiskEncrypted);
        jsonWriter.writeStringField("secretIdentifier", this.secretIdentifier);
        jsonWriter.writeStringField("dekKeyVaultArmId", this.dekKeyVaultArmId);
        jsonWriter.writeBooleanField("isDiskKeyEncrypted", this.isDiskKeyEncrypted);
        jsonWriter.writeStringField("keyIdentifier", this.keyIdentifier);
        jsonWriter.writeStringField("kekKeyVaultArmId", this.kekKeyVaultArmId);
        jsonWriter.writeStringField("failoverDiskName", this.failoverDiskName);
        jsonWriter.writeStringField("tfoDiskName", this.tfoDiskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2AProtectedDiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2AProtectedDiskDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the A2AProtectedDiskDetails.
     */
    public static A2AProtectedDiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2AProtectedDiskDetails deserializedA2AProtectedDiskDetails = new A2AProtectedDiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskUri".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.diskUri = reader.getString();
                } else if ("recoveryAzureStorageAccountId".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.recoveryAzureStorageAccountId = reader.getString();
                } else if ("primaryDiskAzureStorageAccountId".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.primaryDiskAzureStorageAccountId = reader.getString();
                } else if ("recoveryDiskUri".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.recoveryDiskUri = reader.getString();
                } else if ("diskName".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.diskName = reader.getString();
                } else if ("diskCapacityInBytes".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.diskCapacityInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("primaryStagingAzureStorageAccountId".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.primaryStagingAzureStorageAccountId = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.diskType = reader.getString();
                } else if ("resyncRequired".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.resyncRequired = reader.getNullable(JsonReader::getBoolean);
                } else if ("monitoringPercentageCompletion".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.monitoringPercentageCompletion
                        = reader.getNullable(JsonReader::getInt);
                } else if ("monitoringJobType".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.monitoringJobType = reader.getString();
                } else if ("dataPendingInStagingStorageAccountInMB".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.dataPendingInStagingStorageAccountInMB
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("dataPendingAtSourceAgentInMB".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.dataPendingAtSourceAgentInMB
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("diskState".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.diskState = reader.getString();
                } else if ("allowedDiskLevelOperation".equals(fieldName)) {
                    List<String> allowedDiskLevelOperation = reader.readArray(reader1 -> reader1.getString());
                    deserializedA2AProtectedDiskDetails.allowedDiskLevelOperation = allowedDiskLevelOperation;
                } else if ("isDiskEncrypted".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.isDiskEncrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("secretIdentifier".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.secretIdentifier = reader.getString();
                } else if ("dekKeyVaultArmId".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.dekKeyVaultArmId = reader.getString();
                } else if ("isDiskKeyEncrypted".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.isDiskKeyEncrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("keyIdentifier".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.keyIdentifier = reader.getString();
                } else if ("kekKeyVaultArmId".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.kekKeyVaultArmId = reader.getString();
                } else if ("failoverDiskName".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.failoverDiskName = reader.getString();
                } else if ("tfoDiskName".equals(fieldName)) {
                    deserializedA2AProtectedDiskDetails.tfoDiskName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedA2AProtectedDiskDetails;
        });
    }
}
