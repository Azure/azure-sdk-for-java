// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VMwareCbt security profile input.
 */
@Fluent
public final class VMwareCbtSecurityProfileProperties implements JsonSerializable<VMwareCbtSecurityProfileProperties> {
    /*
     * The target VM security type.
     */
    private SecurityType targetVmSecurityType;

    /*
     * A value indicating whether secure boot to be enabled.
     */
    private String isTargetVmSecureBootEnabled;

    /*
     * A value indicating whether trusted platform module to be enabled.
     */
    private String isTargetVmTpmEnabled;

    /*
     * A value indicating whether integrity monitoring to be enabled.
     */
    private String isTargetVmIntegrityMonitoringEnabled;

    /*
     * A value indicating whether confidential compute encryption to be enabled.
     */
    private String isTargetVmConfidentialEncryptionEnabled;

    /**
     * Creates an instance of VMwareCbtSecurityProfileProperties class.
     */
    public VMwareCbtSecurityProfileProperties() {
    }

    /**
     * Get the targetVmSecurityType property: The target VM security type.
     * 
     * @return the targetVmSecurityType value.
     */
    public SecurityType targetVmSecurityType() {
        return this.targetVmSecurityType;
    }

    /**
     * Set the targetVmSecurityType property: The target VM security type.
     * 
     * @param targetVmSecurityType the targetVmSecurityType value to set.
     * @return the VMwareCbtSecurityProfileProperties object itself.
     */
    public VMwareCbtSecurityProfileProperties withTargetVmSecurityType(SecurityType targetVmSecurityType) {
        this.targetVmSecurityType = targetVmSecurityType;
        return this;
    }

    /**
     * Get the isTargetVmSecureBootEnabled property: A value indicating whether secure boot to be enabled.
     * 
     * @return the isTargetVmSecureBootEnabled value.
     */
    public String isTargetVmSecureBootEnabled() {
        return this.isTargetVmSecureBootEnabled;
    }

    /**
     * Set the isTargetVmSecureBootEnabled property: A value indicating whether secure boot to be enabled.
     * 
     * @param isTargetVmSecureBootEnabled the isTargetVmSecureBootEnabled value to set.
     * @return the VMwareCbtSecurityProfileProperties object itself.
     */
    public VMwareCbtSecurityProfileProperties withIsTargetVmSecureBootEnabled(String isTargetVmSecureBootEnabled) {
        this.isTargetVmSecureBootEnabled = isTargetVmSecureBootEnabled;
        return this;
    }

    /**
     * Get the isTargetVmTpmEnabled property: A value indicating whether trusted platform module to be enabled.
     * 
     * @return the isTargetVmTpmEnabled value.
     */
    public String isTargetVmTpmEnabled() {
        return this.isTargetVmTpmEnabled;
    }

    /**
     * Set the isTargetVmTpmEnabled property: A value indicating whether trusted platform module to be enabled.
     * 
     * @param isTargetVmTpmEnabled the isTargetVmTpmEnabled value to set.
     * @return the VMwareCbtSecurityProfileProperties object itself.
     */
    public VMwareCbtSecurityProfileProperties withIsTargetVmTpmEnabled(String isTargetVmTpmEnabled) {
        this.isTargetVmTpmEnabled = isTargetVmTpmEnabled;
        return this;
    }

    /**
     * Get the isTargetVmIntegrityMonitoringEnabled property: A value indicating whether integrity monitoring to be
     * enabled.
     * 
     * @return the isTargetVmIntegrityMonitoringEnabled value.
     */
    public String isTargetVmIntegrityMonitoringEnabled() {
        return this.isTargetVmIntegrityMonitoringEnabled;
    }

    /**
     * Set the isTargetVmIntegrityMonitoringEnabled property: A value indicating whether integrity monitoring to be
     * enabled.
     * 
     * @param isTargetVmIntegrityMonitoringEnabled the isTargetVmIntegrityMonitoringEnabled value to set.
     * @return the VMwareCbtSecurityProfileProperties object itself.
     */
    public VMwareCbtSecurityProfileProperties
        withIsTargetVmIntegrityMonitoringEnabled(String isTargetVmIntegrityMonitoringEnabled) {
        this.isTargetVmIntegrityMonitoringEnabled = isTargetVmIntegrityMonitoringEnabled;
        return this;
    }

    /**
     * Get the isTargetVmConfidentialEncryptionEnabled property: A value indicating whether confidential compute
     * encryption to be enabled.
     * 
     * @return the isTargetVmConfidentialEncryptionEnabled value.
     */
    public String isTargetVmConfidentialEncryptionEnabled() {
        return this.isTargetVmConfidentialEncryptionEnabled;
    }

    /**
     * Set the isTargetVmConfidentialEncryptionEnabled property: A value indicating whether confidential compute
     * encryption to be enabled.
     * 
     * @param isTargetVmConfidentialEncryptionEnabled the isTargetVmConfidentialEncryptionEnabled value to set.
     * @return the VMwareCbtSecurityProfileProperties object itself.
     */
    public VMwareCbtSecurityProfileProperties
        withIsTargetVmConfidentialEncryptionEnabled(String isTargetVmConfidentialEncryptionEnabled) {
        this.isTargetVmConfidentialEncryptionEnabled = isTargetVmConfidentialEncryptionEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetVmSecurityType",
            this.targetVmSecurityType == null ? null : this.targetVmSecurityType.toString());
        jsonWriter.writeStringField("isTargetVmSecureBootEnabled", this.isTargetVmSecureBootEnabled);
        jsonWriter.writeStringField("isTargetVmTpmEnabled", this.isTargetVmTpmEnabled);
        jsonWriter.writeStringField("isTargetVmIntegrityMonitoringEnabled", this.isTargetVmIntegrityMonitoringEnabled);
        jsonWriter.writeStringField("isTargetVmConfidentialEncryptionEnabled",
            this.isTargetVmConfidentialEncryptionEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareCbtSecurityProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareCbtSecurityProfileProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMwareCbtSecurityProfileProperties.
     */
    public static VMwareCbtSecurityProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareCbtSecurityProfileProperties deserializedVMwareCbtSecurityProfileProperties
                = new VMwareCbtSecurityProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetVmSecurityType".equals(fieldName)) {
                    deserializedVMwareCbtSecurityProfileProperties.targetVmSecurityType
                        = SecurityType.fromString(reader.getString());
                } else if ("isTargetVmSecureBootEnabled".equals(fieldName)) {
                    deserializedVMwareCbtSecurityProfileProperties.isTargetVmSecureBootEnabled = reader.getString();
                } else if ("isTargetVmTpmEnabled".equals(fieldName)) {
                    deserializedVMwareCbtSecurityProfileProperties.isTargetVmTpmEnabled = reader.getString();
                } else if ("isTargetVmIntegrityMonitoringEnabled".equals(fieldName)) {
                    deserializedVMwareCbtSecurityProfileProperties.isTargetVmIntegrityMonitoringEnabled
                        = reader.getString();
                } else if ("isTargetVmConfidentialEncryptionEnabled".equals(fieldName)) {
                    deserializedVMwareCbtSecurityProfileProperties.isTargetVmConfidentialEncryptionEnabled
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareCbtSecurityProfileProperties;
        });
    }
}
