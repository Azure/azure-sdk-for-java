// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * InMageRcmFailback provider specific details.
 */
@Fluent
public final class InMageRcmFailbackReplicationDetails extends ReplicationProviderSpecificSettings {
    /*
     * Gets the Instance type.
     */
    private String instanceType = "InMageRcmFailback";

    /*
     * The virtual machine internal identifier.
     */
    private String internalIdentifier;

    /*
     * The ARM Id of the azure VM.
     */
    private String azureVirtualMachineId;

    /*
     * The multi VM group name.
     */
    private String multiVmGroupName;

    /*
     * The reprotect agent Id.
     */
    private String reprotectAgentId;

    /*
     * The reprotect agent name.
     */
    private String reprotectAgentName;

    /*
     * The type of the OS on the VM.
     */
    private String osType;

    /*
     * The log storage account ARM Id.
     */
    private String logStorageAccountId;

    /*
     * The target vCenter Id.
     */
    private String targetvCenterId;

    /*
     * The target datastore name.
     */
    private String targetDataStoreName;

    /*
     * The target VM name.
     */
    private String targetVmName;

    /*
     * The initial replication progress percentage.
     */
    private Integer initialReplicationProgressPercentage;

    /*
     * The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all
     * selected disks in source VM.
     */
    private Long initialReplicationProcessedBytes;

    /*
     * The initial replication transferred bytes from source VM to target for all selected disks on source VM.
     */
    private Long initialReplicationTransferredBytes;

    /*
     * The initial replication progress health.
     */
    private VmReplicationProgressHealth initialReplicationProgressHealth;

    /*
     * The resync progress percentage.
     */
    private Integer resyncProgressPercentage;

    /*
     * The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks
     * in source VM.
     */
    private Long resyncProcessedBytes;

    /*
     * The resync transferred bytes from source VM to target for all selected disks on source VM.
     */
    private Long resyncTransferredBytes;

    /*
     * The resync progress health.
     */
    private VmReplicationProgressHealth resyncProgressHealth;

    /*
     * A value indicating whether resync is required.
     */
    private String resyncRequired;

    /*
     * The resync state.
     */
    private ResyncState resyncState;

    /*
     * The list of protected disks.
     */
    private List<InMageRcmFailbackProtectedDiskDetails> protectedDisks;

    /*
     * The mobility agent information.
     */
    private InMageRcmFailbackMobilityAgentDetails mobilityAgentDetails;

    /*
     * The network details.
     */
    private List<InMageRcmFailbackNicDetails> vmNics;

    /*
     * The last planned failover start time.
     */
    private OffsetDateTime lastPlannedFailoverStartTime;

    /*
     * The last planned failover status.
     */
    private PlannedFailoverStatus lastPlannedFailoverStatus;

    /*
     * The discovered VM information.
     */
    private InMageRcmFailbackDiscoveredProtectedVmDetails discoveredVmDetails;

    /*
     * The policy Id used by the forward replication.
     */
    private String lastUsedPolicyId;

    /*
     * The policy friendly name used by the forward replication.
     */
    private String lastUsedPolicyFriendlyName;

    /*
     * A value indicating whether agent registration was successful after failover.
     */
    private Boolean isAgentRegistrationSuccessfulAfterFailover;

    /**
     * Creates an instance of InMageRcmFailbackReplicationDetails class.
     */
    public InMageRcmFailbackReplicationDetails() {
    }

    /**
     * Get the instanceType property: Gets the Instance type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the internalIdentifier property: The virtual machine internal identifier.
     * 
     * @return the internalIdentifier value.
     */
    public String internalIdentifier() {
        return this.internalIdentifier;
    }

    /**
     * Get the azureVirtualMachineId property: The ARM Id of the azure VM.
     * 
     * @return the azureVirtualMachineId value.
     */
    public String azureVirtualMachineId() {
        return this.azureVirtualMachineId;
    }

    /**
     * Get the multiVmGroupName property: The multi VM group name.
     * 
     * @return the multiVmGroupName value.
     */
    public String multiVmGroupName() {
        return this.multiVmGroupName;
    }

    /**
     * Get the reprotectAgentId property: The reprotect agent Id.
     * 
     * @return the reprotectAgentId value.
     */
    public String reprotectAgentId() {
        return this.reprotectAgentId;
    }

    /**
     * Get the reprotectAgentName property: The reprotect agent name.
     * 
     * @return the reprotectAgentName value.
     */
    public String reprotectAgentName() {
        return this.reprotectAgentName;
    }

    /**
     * Get the osType property: The type of the OS on the VM.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Get the logStorageAccountId property: The log storage account ARM Id.
     * 
     * @return the logStorageAccountId value.
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * Get the targetvCenterId property: The target vCenter Id.
     * 
     * @return the targetvCenterId value.
     */
    public String targetvCenterId() {
        return this.targetvCenterId;
    }

    /**
     * Get the targetDataStoreName property: The target datastore name.
     * 
     * @return the targetDataStoreName value.
     */
    public String targetDataStoreName() {
        return this.targetDataStoreName;
    }

    /**
     * Get the targetVmName property: The target VM name.
     * 
     * @return the targetVmName value.
     */
    public String targetVmName() {
        return this.targetVmName;
    }

    /**
     * Get the initialReplicationProgressPercentage property: The initial replication progress percentage.
     * 
     * @return the initialReplicationProgressPercentage value.
     */
    public Integer initialReplicationProgressPercentage() {
        return this.initialReplicationProgressPercentage;
    }

    /**
     * Get the initialReplicationProcessedBytes property: The initial replication processed bytes. This includes sum of
     * total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     * @return the initialReplicationProcessedBytes value.
     */
    public Long initialReplicationProcessedBytes() {
        return this.initialReplicationProcessedBytes;
    }

    /**
     * Get the initialReplicationTransferredBytes property: The initial replication transferred bytes from source VM to
     * target for all selected disks on source VM.
     * 
     * @return the initialReplicationTransferredBytes value.
     */
    public Long initialReplicationTransferredBytes() {
        return this.initialReplicationTransferredBytes;
    }

    /**
     * Get the initialReplicationProgressHealth property: The initial replication progress health.
     * 
     * @return the initialReplicationProgressHealth value.
     */
    public VmReplicationProgressHealth initialReplicationProgressHealth() {
        return this.initialReplicationProgressHealth;
    }

    /**
     * Get the resyncProgressPercentage property: The resync progress percentage.
     * 
     * @return the resyncProgressPercentage value.
     */
    public Integer resyncProgressPercentage() {
        return this.resyncProgressPercentage;
    }

    /**
     * Get the resyncProcessedBytes property: The resync processed bytes. This includes sum of total bytes transferred
     * and matched bytes on all selected disks in source VM.
     * 
     * @return the resyncProcessedBytes value.
     */
    public Long resyncProcessedBytes() {
        return this.resyncProcessedBytes;
    }

    /**
     * Get the resyncTransferredBytes property: The resync transferred bytes from source VM to target for all selected
     * disks on source VM.
     * 
     * @return the resyncTransferredBytes value.
     */
    public Long resyncTransferredBytes() {
        return this.resyncTransferredBytes;
    }

    /**
     * Get the resyncProgressHealth property: The resync progress health.
     * 
     * @return the resyncProgressHealth value.
     */
    public VmReplicationProgressHealth resyncProgressHealth() {
        return this.resyncProgressHealth;
    }

    /**
     * Get the resyncRequired property: A value indicating whether resync is required.
     * 
     * @return the resyncRequired value.
     */
    public String resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Get the resyncState property: The resync state.
     * 
     * @return the resyncState value.
     */
    public ResyncState resyncState() {
        return this.resyncState;
    }

    /**
     * Get the protectedDisks property: The list of protected disks.
     * 
     * @return the protectedDisks value.
     */
    public List<InMageRcmFailbackProtectedDiskDetails> protectedDisks() {
        return this.protectedDisks;
    }

    /**
     * Set the protectedDisks property: The list of protected disks.
     * 
     * @param protectedDisks the protectedDisks value to set.
     * @return the InMageRcmFailbackReplicationDetails object itself.
     */
    public InMageRcmFailbackReplicationDetails
        withProtectedDisks(List<InMageRcmFailbackProtectedDiskDetails> protectedDisks) {
        this.protectedDisks = protectedDisks;
        return this;
    }

    /**
     * Get the mobilityAgentDetails property: The mobility agent information.
     * 
     * @return the mobilityAgentDetails value.
     */
    public InMageRcmFailbackMobilityAgentDetails mobilityAgentDetails() {
        return this.mobilityAgentDetails;
    }

    /**
     * Set the mobilityAgentDetails property: The mobility agent information.
     * 
     * @param mobilityAgentDetails the mobilityAgentDetails value to set.
     * @return the InMageRcmFailbackReplicationDetails object itself.
     */
    public InMageRcmFailbackReplicationDetails
        withMobilityAgentDetails(InMageRcmFailbackMobilityAgentDetails mobilityAgentDetails) {
        this.mobilityAgentDetails = mobilityAgentDetails;
        return this;
    }

    /**
     * Get the vmNics property: The network details.
     * 
     * @return the vmNics value.
     */
    public List<InMageRcmFailbackNicDetails> vmNics() {
        return this.vmNics;
    }

    /**
     * Set the vmNics property: The network details.
     * 
     * @param vmNics the vmNics value to set.
     * @return the InMageRcmFailbackReplicationDetails object itself.
     */
    public InMageRcmFailbackReplicationDetails withVmNics(List<InMageRcmFailbackNicDetails> vmNics) {
        this.vmNics = vmNics;
        return this;
    }

    /**
     * Get the lastPlannedFailoverStartTime property: The last planned failover start time.
     * 
     * @return the lastPlannedFailoverStartTime value.
     */
    public OffsetDateTime lastPlannedFailoverStartTime() {
        return this.lastPlannedFailoverStartTime;
    }

    /**
     * Get the lastPlannedFailoverStatus property: The last planned failover status.
     * 
     * @return the lastPlannedFailoverStatus value.
     */
    public PlannedFailoverStatus lastPlannedFailoverStatus() {
        return this.lastPlannedFailoverStatus;
    }

    /**
     * Get the discoveredVmDetails property: The discovered VM information.
     * 
     * @return the discoveredVmDetails value.
     */
    public InMageRcmFailbackDiscoveredProtectedVmDetails discoveredVmDetails() {
        return this.discoveredVmDetails;
    }

    /**
     * Set the discoveredVmDetails property: The discovered VM information.
     * 
     * @param discoveredVmDetails the discoveredVmDetails value to set.
     * @return the InMageRcmFailbackReplicationDetails object itself.
     */
    public InMageRcmFailbackReplicationDetails
        withDiscoveredVmDetails(InMageRcmFailbackDiscoveredProtectedVmDetails discoveredVmDetails) {
        this.discoveredVmDetails = discoveredVmDetails;
        return this;
    }

    /**
     * Get the lastUsedPolicyId property: The policy Id used by the forward replication.
     * 
     * @return the lastUsedPolicyId value.
     */
    public String lastUsedPolicyId() {
        return this.lastUsedPolicyId;
    }

    /**
     * Get the lastUsedPolicyFriendlyName property: The policy friendly name used by the forward replication.
     * 
     * @return the lastUsedPolicyFriendlyName value.
     */
    public String lastUsedPolicyFriendlyName() {
        return this.lastUsedPolicyFriendlyName;
    }

    /**
     * Get the isAgentRegistrationSuccessfulAfterFailover property: A value indicating whether agent registration was
     * successful after failover.
     * 
     * @return the isAgentRegistrationSuccessfulAfterFailover value.
     */
    public Boolean isAgentRegistrationSuccessfulAfterFailover() {
        return this.isAgentRegistrationSuccessfulAfterFailover;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (protectedDisks() != null) {
            protectedDisks().forEach(e -> e.validate());
        }
        if (mobilityAgentDetails() != null) {
            mobilityAgentDetails().validate();
        }
        if (vmNics() != null) {
            vmNics().forEach(e -> e.validate());
        }
        if (discoveredVmDetails() != null) {
            discoveredVmDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeArrayField("protectedDisks", this.protectedDisks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("mobilityAgentDetails", this.mobilityAgentDetails);
        jsonWriter.writeArrayField("vmNics", this.vmNics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("discoveredVmDetails", this.discoveredVmDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmFailbackReplicationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmFailbackReplicationDetails if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageRcmFailbackReplicationDetails.
     */
    public static InMageRcmFailbackReplicationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmFailbackReplicationDetails deserializedInMageRcmFailbackReplicationDetails
                = new InMageRcmFailbackReplicationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.instanceType = reader.getString();
                } else if ("internalIdentifier".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.internalIdentifier = reader.getString();
                } else if ("azureVirtualMachineId".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.azureVirtualMachineId = reader.getString();
                } else if ("multiVmGroupName".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.multiVmGroupName = reader.getString();
                } else if ("reprotectAgentId".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.reprotectAgentId = reader.getString();
                } else if ("reprotectAgentName".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.reprotectAgentName = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.osType = reader.getString();
                } else if ("logStorageAccountId".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.logStorageAccountId = reader.getString();
                } else if ("targetvCenterId".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.targetvCenterId = reader.getString();
                } else if ("targetDataStoreName".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.targetDataStoreName = reader.getString();
                } else if ("targetVmName".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.targetVmName = reader.getString();
                } else if ("initialReplicationProgressPercentage".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.initialReplicationProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("initialReplicationProcessedBytes".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.initialReplicationProcessedBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("initialReplicationTransferredBytes".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.initialReplicationTransferredBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("initialReplicationProgressHealth".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.initialReplicationProgressHealth
                        = VmReplicationProgressHealth.fromString(reader.getString());
                } else if ("resyncProgressPercentage".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.resyncProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("resyncProcessedBytes".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.resyncProcessedBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("resyncTransferredBytes".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.resyncTransferredBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("resyncProgressHealth".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.resyncProgressHealth
                        = VmReplicationProgressHealth.fromString(reader.getString());
                } else if ("resyncRequired".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.resyncRequired = reader.getString();
                } else if ("resyncState".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.resyncState
                        = ResyncState.fromString(reader.getString());
                } else if ("protectedDisks".equals(fieldName)) {
                    List<InMageRcmFailbackProtectedDiskDetails> protectedDisks
                        = reader.readArray(reader1 -> InMageRcmFailbackProtectedDiskDetails.fromJson(reader1));
                    deserializedInMageRcmFailbackReplicationDetails.protectedDisks = protectedDisks;
                } else if ("mobilityAgentDetails".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.mobilityAgentDetails
                        = InMageRcmFailbackMobilityAgentDetails.fromJson(reader);
                } else if ("vmNics".equals(fieldName)) {
                    List<InMageRcmFailbackNicDetails> vmNics
                        = reader.readArray(reader1 -> InMageRcmFailbackNicDetails.fromJson(reader1));
                    deserializedInMageRcmFailbackReplicationDetails.vmNics = vmNics;
                } else if ("lastPlannedFailoverStartTime".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.lastPlannedFailoverStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastPlannedFailoverStatus".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.lastPlannedFailoverStatus
                        = PlannedFailoverStatus.fromString(reader.getString());
                } else if ("discoveredVmDetails".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.discoveredVmDetails
                        = InMageRcmFailbackDiscoveredProtectedVmDetails.fromJson(reader);
                } else if ("lastUsedPolicyId".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.lastUsedPolicyId = reader.getString();
                } else if ("lastUsedPolicyFriendlyName".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.lastUsedPolicyFriendlyName = reader.getString();
                } else if ("isAgentRegistrationSuccessfulAfterFailover".equals(fieldName)) {
                    deserializedInMageRcmFailbackReplicationDetails.isAgentRegistrationSuccessfulAfterFailover
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmFailbackReplicationDetails;
        });
    }
}
