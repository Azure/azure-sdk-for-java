// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Remove Disk input properties.
 */
@Fluent
public final class RemoveDisksInputProperties implements JsonSerializable<RemoveDisksInputProperties> {
    /*
     * The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For
     * San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.
     */
    private RemoveDisksProviderSpecificInput providerSpecificDetails;

    /**
     * Creates an instance of RemoveDisksInputProperties class.
     */
    public RemoveDisksInputProperties() {
    }

    /**
     * Get the providerSpecificDetails property: The ReplicationProviderInput. For HyperVReplicaAzure provider, it will
     * be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For
     * HyperVReplicaAzure provider, it can be null.
     * 
     * @return the providerSpecificDetails value.
     */
    public RemoveDisksProviderSpecificInput providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: The ReplicationProviderInput. For HyperVReplicaAzure provider, it will
     * be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For
     * HyperVReplicaAzure provider, it can be null.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the RemoveDisksInputProperties object itself.
     */
    public RemoveDisksInputProperties
        withProviderSpecificDetails(RemoveDisksProviderSpecificInput providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerSpecificDetails() != null) {
            providerSpecificDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoveDisksInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoveDisksInputProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemoveDisksInputProperties.
     */
    public static RemoveDisksInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemoveDisksInputProperties deserializedRemoveDisksInputProperties = new RemoveDisksInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedRemoveDisksInputProperties.providerSpecificDetails
                        = RemoveDisksProviderSpecificInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemoveDisksInputProperties;
        });
    }
}
