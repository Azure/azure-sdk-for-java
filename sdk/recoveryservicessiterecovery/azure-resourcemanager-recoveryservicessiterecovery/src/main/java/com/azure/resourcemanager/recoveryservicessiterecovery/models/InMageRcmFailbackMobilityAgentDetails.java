// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * InMageRcmFailback mobility agent details.
 */
@Immutable
public final class InMageRcmFailbackMobilityAgentDetails
    implements JsonSerializable<InMageRcmFailbackMobilityAgentDetails> {
    /*
     * The agent version.
     */
    private String version;

    /*
     * The latest agent version available.
     */
    private String latestVersion;

    /*
     * The driver version.
     */
    private String driverVersion;

    /*
     * The latest upgradeable version available without reboot.
     */
    private String latestUpgradableVersionWithoutReboot;

    /*
     * The agent version expiry date.
     */
    private OffsetDateTime agentVersionExpiryDate;

    /*
     * The driver version expiry date.
     */
    private OffsetDateTime driverVersionExpiryDate;

    /*
     * The time of the last heartbeat received from the agent.
     */
    private OffsetDateTime lastHeartbeatUtc;

    /*
     * The whether update is possible or not.
     */
    private List<AgentUpgradeBlockedReason> reasonsBlockingUpgrade;

    /*
     * A value indicating whether agent is upgradeable or not.
     */
    private String isUpgradeable;

    /**
     * Creates an instance of InMageRcmFailbackMobilityAgentDetails class.
     */
    public InMageRcmFailbackMobilityAgentDetails() {
    }

    /**
     * Get the version property: The agent version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the latestVersion property: The latest agent version available.
     * 
     * @return the latestVersion value.
     */
    public String latestVersion() {
        return this.latestVersion;
    }

    /**
     * Get the driverVersion property: The driver version.
     * 
     * @return the driverVersion value.
     */
    public String driverVersion() {
        return this.driverVersion;
    }

    /**
     * Get the latestUpgradableVersionWithoutReboot property: The latest upgradeable version available without reboot.
     * 
     * @return the latestUpgradableVersionWithoutReboot value.
     */
    public String latestUpgradableVersionWithoutReboot() {
        return this.latestUpgradableVersionWithoutReboot;
    }

    /**
     * Get the agentVersionExpiryDate property: The agent version expiry date.
     * 
     * @return the agentVersionExpiryDate value.
     */
    public OffsetDateTime agentVersionExpiryDate() {
        return this.agentVersionExpiryDate;
    }

    /**
     * Get the driverVersionExpiryDate property: The driver version expiry date.
     * 
     * @return the driverVersionExpiryDate value.
     */
    public OffsetDateTime driverVersionExpiryDate() {
        return this.driverVersionExpiryDate;
    }

    /**
     * Get the lastHeartbeatUtc property: The time of the last heartbeat received from the agent.
     * 
     * @return the lastHeartbeatUtc value.
     */
    public OffsetDateTime lastHeartbeatUtc() {
        return this.lastHeartbeatUtc;
    }

    /**
     * Get the reasonsBlockingUpgrade property: The whether update is possible or not.
     * 
     * @return the reasonsBlockingUpgrade value.
     */
    public List<AgentUpgradeBlockedReason> reasonsBlockingUpgrade() {
        return this.reasonsBlockingUpgrade;
    }

    /**
     * Get the isUpgradeable property: A value indicating whether agent is upgradeable or not.
     * 
     * @return the isUpgradeable value.
     */
    public String isUpgradeable() {
        return this.isUpgradeable;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmFailbackMobilityAgentDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmFailbackMobilityAgentDetails if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageRcmFailbackMobilityAgentDetails.
     */
    public static InMageRcmFailbackMobilityAgentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmFailbackMobilityAgentDetails deserializedInMageRcmFailbackMobilityAgentDetails
                = new InMageRcmFailbackMobilityAgentDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.version = reader.getString();
                } else if ("latestVersion".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.latestVersion = reader.getString();
                } else if ("driverVersion".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.driverVersion = reader.getString();
                } else if ("latestUpgradableVersionWithoutReboot".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.latestUpgradableVersionWithoutReboot
                        = reader.getString();
                } else if ("agentVersionExpiryDate".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.agentVersionExpiryDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("driverVersionExpiryDate".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.driverVersionExpiryDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastHeartbeatUtc".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.lastHeartbeatUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reasonsBlockingUpgrade".equals(fieldName)) {
                    List<AgentUpgradeBlockedReason> reasonsBlockingUpgrade
                        = reader.readArray(reader1 -> AgentUpgradeBlockedReason.fromString(reader1.getString()));
                    deserializedInMageRcmFailbackMobilityAgentDetails.reasonsBlockingUpgrade = reasonsBlockingUpgrade;
                } else if ("isUpgradeable".equals(fieldName)) {
                    deserializedInMageRcmFailbackMobilityAgentDetails.isUpgradeable = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmFailbackMobilityAgentDetails;
        });
    }
}
