// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Subnets of the network.
 */
@Fluent
public final class Subnet implements JsonSerializable<Subnet> {
    /*
     * The subnet name.
     */
    private String name;

    /*
     * The subnet friendly name.
     */
    private String friendlyName;

    /*
     * The list of addresses for the subnet.
     */
    private List<String> addressList;

    /**
     * Creates an instance of Subnet class.
     */
    public Subnet() {
    }

    /**
     * Get the name property: The subnet name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The subnet name.
     * 
     * @param name the name value to set.
     * @return the Subnet object itself.
     */
    public Subnet withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the friendlyName property: The subnet friendly name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The subnet friendly name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the Subnet object itself.
     */
    public Subnet withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the addressList property: The list of addresses for the subnet.
     * 
     * @return the addressList value.
     */
    public List<String> addressList() {
        return this.addressList;
    }

    /**
     * Set the addressList property: The list of addresses for the subnet.
     * 
     * @param addressList the addressList value to set.
     * @return the Subnet object itself.
     */
    public Subnet withAddressList(List<String> addressList) {
        this.addressList = addressList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeArrayField("addressList", this.addressList, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Subnet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Subnet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Subnet.
     */
    public static Subnet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Subnet deserializedSubnet = new Subnet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSubnet.name = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedSubnet.friendlyName = reader.getString();
                } else if ("addressList".equals(fieldName)) {
                    List<String> addressList = reader.readArray(reader1 -> reader1.getString());
                    deserializedSubnet.addressList = addressList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnet;
        });
    }
}
