// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * InMageRcmFailback disk level sync details.
 */
@Immutable
public final class InMageRcmFailbackSyncDetails implements JsonSerializable<InMageRcmFailbackSyncDetails> {
    /*
     * The progress health.
     */
    private DiskReplicationProgressHealth progressHealth;

    /*
     * The transferred bytes from source VM to azure for the disk.
     */
    private Long transferredBytes;

    /*
     * The bytes transferred in last 15 minutes from source VM to target.
     */
    private Long last15MinutesTransferredBytes;

    /*
     * The time of the last data transfer from source VM to target.
     */
    private String lastDataTransferTimeUtc;

    /*
     * The total processed bytes. This includes bytes that are transferred from source VM to target and matched bytes.
     */
    private Long processedBytes;

    /*
     * The start time.
     */
    private String startTime;

    /*
     * The last refresh time.
     */
    private String lastRefreshTime;

    /*
     * Progress in percentage. Progress percentage is calculated based on processed bytes.
     */
    private Integer progressPercentage;

    /**
     * Creates an instance of InMageRcmFailbackSyncDetails class.
     */
    public InMageRcmFailbackSyncDetails() {
    }

    /**
     * Get the progressHealth property: The progress health.
     * 
     * @return the progressHealth value.
     */
    public DiskReplicationProgressHealth progressHealth() {
        return this.progressHealth;
    }

    /**
     * Get the transferredBytes property: The transferred bytes from source VM to azure for the disk.
     * 
     * @return the transferredBytes value.
     */
    public Long transferredBytes() {
        return this.transferredBytes;
    }

    /**
     * Get the last15MinutesTransferredBytes property: The bytes transferred in last 15 minutes from source VM to
     * target.
     * 
     * @return the last15MinutesTransferredBytes value.
     */
    public Long last15MinutesTransferredBytes() {
        return this.last15MinutesTransferredBytes;
    }

    /**
     * Get the lastDataTransferTimeUtc property: The time of the last data transfer from source VM to target.
     * 
     * @return the lastDataTransferTimeUtc value.
     */
    public String lastDataTransferTimeUtc() {
        return this.lastDataTransferTimeUtc;
    }

    /**
     * Get the processedBytes property: The total processed bytes. This includes bytes that are transferred from source
     * VM to target and matched bytes.
     * 
     * @return the processedBytes value.
     */
    public Long processedBytes() {
        return this.processedBytes;
    }

    /**
     * Get the startTime property: The start time.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Get the lastRefreshTime property: The last refresh time.
     * 
     * @return the lastRefreshTime value.
     */
    public String lastRefreshTime() {
        return this.lastRefreshTime;
    }

    /**
     * Get the progressPercentage property: Progress in percentage. Progress percentage is calculated based on processed
     * bytes.
     * 
     * @return the progressPercentage value.
     */
    public Integer progressPercentage() {
        return this.progressPercentage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmFailbackSyncDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmFailbackSyncDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageRcmFailbackSyncDetails.
     */
    public static InMageRcmFailbackSyncDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmFailbackSyncDetails deserializedInMageRcmFailbackSyncDetails = new InMageRcmFailbackSyncDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("progressHealth".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.progressHealth
                        = DiskReplicationProgressHealth.fromString(reader.getString());
                } else if ("transferredBytes".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.transferredBytes = reader.getNullable(JsonReader::getLong);
                } else if ("last15MinutesTransferredBytes".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.last15MinutesTransferredBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("lastDataTransferTimeUtc".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.lastDataTransferTimeUtc = reader.getString();
                } else if ("processedBytes".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.processedBytes = reader.getNullable(JsonReader::getLong);
                } else if ("startTime".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.startTime = reader.getString();
                } else if ("lastRefreshTime".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.lastRefreshTime = reader.getString();
                } else if ("progressPercentage".equals(fieldName)) {
                    deserializedInMageRcmFailbackSyncDetails.progressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmFailbackSyncDetails;
        });
    }
}
