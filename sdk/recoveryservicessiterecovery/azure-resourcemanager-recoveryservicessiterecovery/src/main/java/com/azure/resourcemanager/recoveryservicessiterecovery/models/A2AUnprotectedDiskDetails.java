// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A2A unprotected disk details.
 */
@Fluent
public final class A2AUnprotectedDiskDetails implements JsonSerializable<A2AUnprotectedDiskDetails> {
    /*
     * The source lun Id for the data disk.
     */
    private Integer diskLunId;

    /*
     * A value indicating whether the disk auto protection is enabled.
     */
    private AutoProtectionOfDataDisk diskAutoProtectionStatus;

    /**
     * Creates an instance of A2AUnprotectedDiskDetails class.
     */
    public A2AUnprotectedDiskDetails() {
    }

    /**
     * Get the diskLunId property: The source lun Id for the data disk.
     * 
     * @return the diskLunId value.
     */
    public Integer diskLunId() {
        return this.diskLunId;
    }

    /**
     * Set the diskLunId property: The source lun Id for the data disk.
     * 
     * @param diskLunId the diskLunId value to set.
     * @return the A2AUnprotectedDiskDetails object itself.
     */
    public A2AUnprotectedDiskDetails withDiskLunId(Integer diskLunId) {
        this.diskLunId = diskLunId;
        return this;
    }

    /**
     * Get the diskAutoProtectionStatus property: A value indicating whether the disk auto protection is enabled.
     * 
     * @return the diskAutoProtectionStatus value.
     */
    public AutoProtectionOfDataDisk diskAutoProtectionStatus() {
        return this.diskAutoProtectionStatus;
    }

    /**
     * Set the diskAutoProtectionStatus property: A value indicating whether the disk auto protection is enabled.
     * 
     * @param diskAutoProtectionStatus the diskAutoProtectionStatus value to set.
     * @return the A2AUnprotectedDiskDetails object itself.
     */
    public A2AUnprotectedDiskDetails withDiskAutoProtectionStatus(AutoProtectionOfDataDisk diskAutoProtectionStatus) {
        this.diskAutoProtectionStatus = diskAutoProtectionStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("diskLunId", this.diskLunId);
        jsonWriter.writeStringField("diskAutoProtectionStatus",
            this.diskAutoProtectionStatus == null ? null : this.diskAutoProtectionStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2AUnprotectedDiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2AUnprotectedDiskDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the A2AUnprotectedDiskDetails.
     */
    public static A2AUnprotectedDiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2AUnprotectedDiskDetails deserializedA2AUnprotectedDiskDetails = new A2AUnprotectedDiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskLunId".equals(fieldName)) {
                    deserializedA2AUnprotectedDiskDetails.diskLunId = reader.getNullable(JsonReader::getInt);
                } else if ("diskAutoProtectionStatus".equals(fieldName)) {
                    deserializedA2AUnprotectedDiskDetails.diskAutoProtectionStatus
                        = AutoProtectionOfDataDisk.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedA2AUnprotectedDiskDetails;
        });
    }
}
