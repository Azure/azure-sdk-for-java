// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationNetworkMappingsClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.NetworkMappingInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkMapping;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationNetworkMappings;

public final class ReplicationNetworkMappingsImpl implements ReplicationNetworkMappings {
    private static final ClientLogger LOGGER = new ClientLogger(ReplicationNetworkMappingsImpl.class);

    private final ReplicationNetworkMappingsClient innerClient;

    private final com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager;

    public ReplicationNetworkMappingsImpl(ReplicationNetworkMappingsClient innerClient,
        com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<NetworkMapping> listByReplicationNetworks(String resourceGroupName, String resourceName,
        String fabricName, String networkName) {
        PagedIterable<NetworkMappingInner> inner
            = this.serviceClient().listByReplicationNetworks(resourceGroupName, resourceName, fabricName, networkName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkMapping> listByReplicationNetworks(String resourceGroupName, String resourceName,
        String fabricName, String networkName, Context context) {
        PagedIterable<NetworkMappingInner> inner = this.serviceClient()
            .listByReplicationNetworks(resourceGroupName, resourceName, fabricName, networkName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public Response<NetworkMapping> getWithResponse(String resourceGroupName, String resourceName, String fabricName,
        String networkName, String networkMappingName, Context context) {
        Response<NetworkMappingInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, resourceName, fabricName, networkName, networkMappingName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NetworkMappingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkMapping get(String resourceGroupName, String resourceName, String fabricName, String networkName,
        String networkMappingName) {
        NetworkMappingInner inner
            = this.serviceClient().get(resourceGroupName, resourceName, fabricName, networkName, networkMappingName);
        if (inner != null) {
            return new NetworkMappingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String resourceName, String fabricName, String networkName,
        String networkMappingName) {
        this.serviceClient().delete(resourceGroupName, resourceName, fabricName, networkName, networkMappingName);
    }

    public void delete(String resourceGroupName, String resourceName, String fabricName, String networkName,
        String networkMappingName, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, resourceName, fabricName, networkName, networkMappingName, context);
    }

    public PagedIterable<NetworkMapping> list(String resourceGroupName, String resourceName) {
        PagedIterable<NetworkMappingInner> inner = this.serviceClient().list(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkMapping> list(String resourceGroupName, String resourceName, Context context) {
        PagedIterable<NetworkMappingInner> inner = this.serviceClient().list(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public NetworkMapping getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, resourceName, fabricName, networkName, networkMappingName, Context.NONE)
            .getValue();
    }

    public Response<NetworkMapping> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, fabricName, networkName, networkMappingName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.", id)));
        }
        this.delete(resourceGroupName, resourceName, fabricName, networkName, networkMappingName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = ResourceManagerUtils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.", id)));
        }
        this.delete(resourceGroupName, resourceName, fabricName, networkName, networkMappingName, context);
    }

    private ReplicationNetworkMappingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public NetworkMappingImpl define(String name) {
        return new NetworkMappingImpl(name, this.manager());
    }
}
