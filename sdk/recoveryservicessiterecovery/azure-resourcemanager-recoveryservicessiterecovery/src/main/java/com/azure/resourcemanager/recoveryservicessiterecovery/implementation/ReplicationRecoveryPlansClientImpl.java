// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationRecoveryPlansClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.RecoveryPlanInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.CreateRecoveryPlanInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanCollection;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanPlannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanUnplannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateRecoveryPlanInput;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ReplicationRecoveryPlansClient. */
public final class ReplicationRecoveryPlansClientImpl implements ReplicationRecoveryPlansClient {
    private final ClientLogger logger = new ClientLogger(ReplicationRecoveryPlansClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ReplicationRecoveryPlansService service;

    /** The service client containing this operation class. */
    private final SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationRecoveryPlansClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ReplicationRecoveryPlansClientImpl(SiteRecoveryManagementClientImpl client) {
        this.service =
            RestProxy
                .create(ReplicationRecoveryPlansService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SiteRecoveryManagementClientReplicationRecoveryPlans to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SiteRecoveryManageme")
    private interface ReplicationRecoveryPlansService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RecoveryPlanCollection>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RecoveryPlanInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @BodyParam("application/json") CreateRecoveryPlanInput input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @BodyParam("application/json") UpdateRecoveryPlanInput input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> failoverCommit(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> plannedFailover(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @BodyParam("application/json") RecoveryPlanPlannedFailoverInput input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> reprotect(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> testFailover(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @BodyParam("application/json") RecoveryPlanTestFailoverInput input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> testFailoverCleanup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @BodyParam("application/json") RecoveryPlanTestFailoverCleanupInput input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> unplannedFailover(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("recoveryPlanName") String recoveryPlanName,
            @BodyParam("application/json") RecoveryPlanUnplannedFailoverInput input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RecoveryPlanCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists the recovery plans in the vault.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RecoveryPlanInner>> listSinglePageAsync(String resourceName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<RecoveryPlanInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists the recovery plans in the vault.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RecoveryPlanInner>> listSinglePageAsync(
        String resourceName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the recovery plans in the vault.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RecoveryPlanInner> listAsync(String resourceName, String resourceGroupName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceName, resourceGroupName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the recovery plans in the vault.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RecoveryPlanInner> listAsync(String resourceName, String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceName, resourceGroupName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the recovery plans in the vault.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecoveryPlanInner> list(String resourceName, String resourceGroupName) {
        return new PagedIterable<>(listAsync(resourceName, resourceGroupName));
    }

    /**
     * Lists the recovery plans in the vault.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecoveryPlanInner> list(String resourceName, String resourceGroupName, Context context) {
        return new PagedIterable<>(listAsync(resourceName, resourceGroupName, context));
    }

    /**
     * Gets the details of the recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Name of the recovery plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the recovery plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RecoveryPlanInner>> getWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the details of the recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Name of the recovery plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the recovery plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RecoveryPlanInner>> getWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                accept,
                context);
    }

    /**
     * Gets the details of the recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Name of the recovery plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the recovery plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> getAsync(String resourceName, String resourceGroupName, String recoveryPlanName) {
        return getWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName)
            .flatMap(
                (Response<RecoveryPlanInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the details of the recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Name of the recovery plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the recovery plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner get(String resourceName, String resourceGroupName, String recoveryPlanName) {
        return getAsync(resourceName, resourceGroupName, recoveryPlanName).block();
    }

    /**
     * Gets the details of the recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Name of the recovery plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the recovery plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RecoveryPlanInner> getWithResponse(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return getWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, context).block();
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, CreateRecoveryPlanInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            input,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        CreateRecoveryPlanInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                input,
                accept,
                context);
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginCreateAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, CreateRecoveryPlanInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginCreateAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        CreateRecoveryPlanInput input,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginCreate(
        String resourceName, String resourceGroupName, String recoveryPlanName, CreateRecoveryPlanInput input) {
        return beginCreateAsync(resourceName, resourceGroupName, recoveryPlanName, input).getSyncPoller();
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginCreate(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        CreateRecoveryPlanInput input,
        Context context) {
        return beginCreateAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).getSyncPoller();
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> createAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, CreateRecoveryPlanInput input) {
        return beginCreateAsync(resourceName, resourceGroupName, recoveryPlanName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> createAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        CreateRecoveryPlanInput input,
        Context context) {
        return beginCreateAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner create(
        String resourceName, String resourceGroupName, String recoveryPlanName, CreateRecoveryPlanInput input) {
        return createAsync(resourceName, resourceGroupName, recoveryPlanName, input).block();
    }

    /**
     * The operation to create a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner create(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        CreateRecoveryPlanInput input,
        Context context) {
        return createAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).block();
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                context);
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        return beginDeleteAsync(resourceName, resourceGroupName, recoveryPlanName).getSyncPoller();
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return beginDeleteAsync(resourceName, resourceGroupName, recoveryPlanName, context).getSyncPoller();
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceName, String resourceGroupName, String recoveryPlanName) {
        return beginDeleteAsync(resourceName, resourceGroupName, recoveryPlanName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return beginDeleteAsync(resourceName, resourceGroupName, recoveryPlanName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceName, String resourceGroupName, String recoveryPlanName) {
        deleteAsync(resourceName, resourceGroupName, recoveryPlanName).block();
    }

    /**
     * Delete a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        deleteAsync(resourceName, resourceGroupName, recoveryPlanName, context).block();
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, UpdateRecoveryPlanInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            input,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        UpdateRecoveryPlanInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                input,
                accept,
                context);
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUpdateAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, UpdateRecoveryPlanInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUpdateAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        UpdateRecoveryPlanInput input,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUpdate(
        String resourceName, String resourceGroupName, String recoveryPlanName, UpdateRecoveryPlanInput input) {
        return beginUpdateAsync(resourceName, resourceGroupName, recoveryPlanName, input).getSyncPoller();
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUpdate(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        UpdateRecoveryPlanInput input,
        Context context) {
        return beginUpdateAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).getSyncPoller();
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> updateAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, UpdateRecoveryPlanInput input) {
        return beginUpdateAsync(resourceName, resourceGroupName, recoveryPlanName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> updateAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        UpdateRecoveryPlanInput input,
        Context context) {
        return beginUpdateAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner update(
        String resourceName, String resourceGroupName, String recoveryPlanName, UpdateRecoveryPlanInput input) {
        return updateAsync(resourceName, resourceGroupName, recoveryPlanName, input).block();
    }

    /**
     * The operation to update a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner update(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        UpdateRecoveryPlanInput input,
        Context context) {
        return updateAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).block();
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> failoverCommitWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .failoverCommit(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> failoverCommitWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .failoverCommit(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                accept,
                context);
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCommitAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            failoverCommitWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCommitAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            failoverCommitWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCommit(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        return beginFailoverCommitAsync(resourceName, resourceGroupName, recoveryPlanName).getSyncPoller();
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCommit(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return beginFailoverCommitAsync(resourceName, resourceGroupName, recoveryPlanName, context).getSyncPoller();
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> failoverCommitAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        return beginFailoverCommitAsync(resourceName, resourceGroupName, recoveryPlanName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> failoverCommitAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return beginFailoverCommitAsync(resourceName, resourceGroupName, recoveryPlanName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner failoverCommit(String resourceName, String resourceGroupName, String recoveryPlanName) {
        return failoverCommitAsync(resourceName, resourceGroupName, recoveryPlanName).block();
    }

    /**
     * The operation to commit the fail over of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner failoverCommit(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return failoverCommitAsync(resourceName, resourceGroupName, recoveryPlanName, context).block();
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> plannedFailoverWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .plannedFailover(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            input,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> plannedFailoverWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .plannedFailover(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                input,
                accept,
                context);
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginPlannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            plannedFailoverWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginPlannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            plannedFailoverWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginPlannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input) {
        return beginPlannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input).getSyncPoller();
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginPlannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input,
        Context context) {
        return beginPlannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .getSyncPoller();
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> plannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input) {
        return beginPlannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> plannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input,
        Context context) {
        return beginPlannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner plannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input) {
        return plannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input).block();
    }

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner plannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanPlannedFailoverInput input,
        Context context) {
        return plannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).block();
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reprotectWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .reprotect(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reprotectWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .reprotect(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                accept,
                context);
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginReprotectAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            reprotectWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginReprotectAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            reprotectWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginReprotect(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        return beginReprotectAsync(resourceName, resourceGroupName, recoveryPlanName).getSyncPoller();
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginReprotect(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return beginReprotectAsync(resourceName, resourceGroupName, recoveryPlanName, context).getSyncPoller();
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> reprotectAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName) {
        return beginReprotectAsync(resourceName, resourceGroupName, recoveryPlanName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> reprotectAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return beginReprotectAsync(resourceName, resourceGroupName, recoveryPlanName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner reprotect(String resourceName, String resourceGroupName, String recoveryPlanName) {
        return reprotectAsync(resourceName, resourceGroupName, recoveryPlanName).block();
    }

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner reprotect(
        String resourceName, String resourceGroupName, String recoveryPlanName, Context context) {
        return reprotectAsync(resourceName, resourceGroupName, recoveryPlanName, context).block();
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverWithResponseAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, RecoveryPlanTestFailoverInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .testFailover(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            input,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .testFailover(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                input,
                accept,
                context);
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, RecoveryPlanTestFailoverInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            testFailoverWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverInput input,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            testFailoverWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailover(
        String resourceName, String resourceGroupName, String recoveryPlanName, RecoveryPlanTestFailoverInput input) {
        return beginTestFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input).getSyncPoller();
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverInput input,
        Context context) {
        return beginTestFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .getSyncPoller();
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> testFailoverAsync(
        String resourceName, String resourceGroupName, String recoveryPlanName, RecoveryPlanTestFailoverInput input) {
        return beginTestFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> testFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverInput input,
        Context context) {
        return beginTestFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner testFailover(
        String resourceName, String resourceGroupName, String recoveryPlanName, RecoveryPlanTestFailoverInput input) {
        return testFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input).block();
    }

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner testFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverInput input,
        Context context) {
        return testFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).block();
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverCleanupWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .testFailoverCleanup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            input,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverCleanupWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .testFailoverCleanup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                input,
                accept,
                context);
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverCleanupAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            testFailoverCleanupWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverCleanupAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            testFailoverCleanupWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverCleanup(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input) {
        return beginTestFailoverCleanupAsync(resourceName, resourceGroupName, recoveryPlanName, input).getSyncPoller();
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverCleanup(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input,
        Context context) {
        return beginTestFailoverCleanupAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .getSyncPoller();
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> testFailoverCleanupAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input) {
        return beginTestFailoverCleanupAsync(resourceName, resourceGroupName, recoveryPlanName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> testFailoverCleanupAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input,
        Context context) {
        return beginTestFailoverCleanupAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner testFailoverCleanup(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input) {
        return testFailoverCleanupAsync(resourceName, resourceGroupName, recoveryPlanName, input).block();
    }

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner testFailoverCleanup(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanTestFailoverCleanupInput input,
        Context context) {
        return testFailoverCleanupAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).block();
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> unplannedFailoverWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .unplannedFailover(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            resourceName,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            recoveryPlanName,
                            input,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> unplannedFailoverWithResponseAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryPlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .unplannedFailover(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resourceName,
                resourceGroupName,
                this.client.getSubscriptionId(),
                recoveryPlanName,
                input,
                accept,
                context);
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUnplannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            unplannedFailoverWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, Context.NONE);
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUnplannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            unplannedFailoverWithResponseAsync(resourceName, resourceGroupName, recoveryPlanName, input, context);
        return this
            .client
            .<RecoveryPlanInner, RecoveryPlanInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecoveryPlanInner.class, RecoveryPlanInner.class, context);
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUnplannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input) {
        return beginUnplannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input).getSyncPoller();
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUnplannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input,
        Context context) {
        return beginUnplannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .getSyncPoller();
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> unplannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input) {
        return beginUnplannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecoveryPlanInner> unplannedFailoverAsync(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input,
        Context context) {
        return beginUnplannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner unplannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input) {
        return unplannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input).block();
    }

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecoveryPlanInner unplannedFailover(
        String resourceName,
        String resourceGroupName,
        String recoveryPlanName,
        RecoveryPlanUnplannedFailoverInput input,
        Context context) {
        return unplannedFailoverAsync(resourceName, resourceGroupName, recoveryPlanName, input, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RecoveryPlanInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RecoveryPlanInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RecoveryPlanInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
