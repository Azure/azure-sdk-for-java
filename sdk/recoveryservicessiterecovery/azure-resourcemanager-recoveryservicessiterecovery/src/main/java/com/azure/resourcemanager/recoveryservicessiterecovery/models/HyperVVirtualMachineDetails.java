// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Single Host fabric provider specific VM settings.
 */
@Fluent
public class HyperVVirtualMachineDetails extends ConfigurationSettings {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "HyperVVirtualMachine";

    /*
     * The source id of the object.
     */
    private String sourceItemId;

    /*
     * The id of the object in fabric.
     */
    private String generation;

    /*
     * The Last replication time.
     */
    private OSDetails osDetails;

    /*
     * The Last successful failover time.
     */
    private List<DiskDetails> diskDetails;

    /*
     * A value indicating whether the VM has a physical disk attached. String value of SrsDataContract.PresenceStatus
     * enum.
     */
    private PresenceStatus hasPhysicalDisk;

    /*
     * A value indicating whether the VM has a fibre channel adapter attached. String value of
     * SrsDataContract.PresenceStatus enum.
     */
    private PresenceStatus hasFibreChannelAdapter;

    /*
     * A value indicating whether the VM has a shared VHD attached. String value of SrsDataContract.PresenceStatus enum.
     */
    private PresenceStatus hasSharedVhd;

    /*
     * The Id of the hyper-v host in fabric.
     */
    private String hyperVHostId;

    /**
     * Creates an instance of HyperVVirtualMachineDetails class.
     */
    public HyperVVirtualMachineDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the sourceItemId property: The source id of the object.
     * 
     * @return the sourceItemId value.
     */
    public String sourceItemId() {
        return this.sourceItemId;
    }

    /**
     * Set the sourceItemId property: The source id of the object.
     * 
     * @param sourceItemId the sourceItemId value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withSourceItemId(String sourceItemId) {
        this.sourceItemId = sourceItemId;
        return this;
    }

    /**
     * Get the generation property: The id of the object in fabric.
     * 
     * @return the generation value.
     */
    public String generation() {
        return this.generation;
    }

    /**
     * Set the generation property: The id of the object in fabric.
     * 
     * @param generation the generation value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withGeneration(String generation) {
        this.generation = generation;
        return this;
    }

    /**
     * Get the osDetails property: The Last replication time.
     * 
     * @return the osDetails value.
     */
    public OSDetails osDetails() {
        return this.osDetails;
    }

    /**
     * Set the osDetails property: The Last replication time.
     * 
     * @param osDetails the osDetails value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withOsDetails(OSDetails osDetails) {
        this.osDetails = osDetails;
        return this;
    }

    /**
     * Get the diskDetails property: The Last successful failover time.
     * 
     * @return the diskDetails value.
     */
    public List<DiskDetails> diskDetails() {
        return this.diskDetails;
    }

    /**
     * Set the diskDetails property: The Last successful failover time.
     * 
     * @param diskDetails the diskDetails value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withDiskDetails(List<DiskDetails> diskDetails) {
        this.diskDetails = diskDetails;
        return this;
    }

    /**
     * Get the hasPhysicalDisk property: A value indicating whether the VM has a physical disk attached. String value of
     * SrsDataContract.PresenceStatus enum.
     * 
     * @return the hasPhysicalDisk value.
     */
    public PresenceStatus hasPhysicalDisk() {
        return this.hasPhysicalDisk;
    }

    /**
     * Set the hasPhysicalDisk property: A value indicating whether the VM has a physical disk attached. String value of
     * SrsDataContract.PresenceStatus enum.
     * 
     * @param hasPhysicalDisk the hasPhysicalDisk value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withHasPhysicalDisk(PresenceStatus hasPhysicalDisk) {
        this.hasPhysicalDisk = hasPhysicalDisk;
        return this;
    }

    /**
     * Get the hasFibreChannelAdapter property: A value indicating whether the VM has a fibre channel adapter attached.
     * String value of SrsDataContract.PresenceStatus enum.
     * 
     * @return the hasFibreChannelAdapter value.
     */
    public PresenceStatus hasFibreChannelAdapter() {
        return this.hasFibreChannelAdapter;
    }

    /**
     * Set the hasFibreChannelAdapter property: A value indicating whether the VM has a fibre channel adapter attached.
     * String value of SrsDataContract.PresenceStatus enum.
     * 
     * @param hasFibreChannelAdapter the hasFibreChannelAdapter value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withHasFibreChannelAdapter(PresenceStatus hasFibreChannelAdapter) {
        this.hasFibreChannelAdapter = hasFibreChannelAdapter;
        return this;
    }

    /**
     * Get the hasSharedVhd property: A value indicating whether the VM has a shared VHD attached. String value of
     * SrsDataContract.PresenceStatus enum.
     * 
     * @return the hasSharedVhd value.
     */
    public PresenceStatus hasSharedVhd() {
        return this.hasSharedVhd;
    }

    /**
     * Set the hasSharedVhd property: A value indicating whether the VM has a shared VHD attached. String value of
     * SrsDataContract.PresenceStatus enum.
     * 
     * @param hasSharedVhd the hasSharedVhd value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withHasSharedVhd(PresenceStatus hasSharedVhd) {
        this.hasSharedVhd = hasSharedVhd;
        return this;
    }

    /**
     * Get the hyperVHostId property: The Id of the hyper-v host in fabric.
     * 
     * @return the hyperVHostId value.
     */
    public String hyperVHostId() {
        return this.hyperVHostId;
    }

    /**
     * Set the hyperVHostId property: The Id of the hyper-v host in fabric.
     * 
     * @param hyperVHostId the hyperVHostId value to set.
     * @return the HyperVVirtualMachineDetails object itself.
     */
    public HyperVVirtualMachineDetails withHyperVHostId(String hyperVHostId) {
        this.hyperVHostId = hyperVHostId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (osDetails() != null) {
            osDetails().validate();
        }
        if (diskDetails() != null) {
            diskDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("sourceItemId", this.sourceItemId);
        jsonWriter.writeStringField("generation", this.generation);
        jsonWriter.writeJsonField("osDetails", this.osDetails);
        jsonWriter.writeArrayField("diskDetails", this.diskDetails, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("hasPhysicalDisk",
            this.hasPhysicalDisk == null ? null : this.hasPhysicalDisk.toString());
        jsonWriter.writeStringField("hasFibreChannelAdapter",
            this.hasFibreChannelAdapter == null ? null : this.hasFibreChannelAdapter.toString());
        jsonWriter.writeStringField("hasSharedVhd", this.hasSharedVhd == null ? null : this.hasSharedVhd.toString());
        jsonWriter.writeStringField("hyperVHostId", this.hyperVHostId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVVirtualMachineDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVVirtualMachineDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVVirtualMachineDetails.
     */
    public static HyperVVirtualMachineDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("instanceType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("VmmVirtualMachine".equals(discriminatorValue)) {
                    return VmmVirtualMachineDetails.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static HyperVVirtualMachineDetails fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVVirtualMachineDetails deserializedHyperVVirtualMachineDetails = new HyperVVirtualMachineDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.instanceType = reader.getString();
                } else if ("sourceItemId".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.sourceItemId = reader.getString();
                } else if ("generation".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.generation = reader.getString();
                } else if ("osDetails".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.osDetails = OSDetails.fromJson(reader);
                } else if ("diskDetails".equals(fieldName)) {
                    List<DiskDetails> diskDetails = reader.readArray(reader1 -> DiskDetails.fromJson(reader1));
                    deserializedHyperVVirtualMachineDetails.diskDetails = diskDetails;
                } else if ("hasPhysicalDisk".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.hasPhysicalDisk
                        = PresenceStatus.fromString(reader.getString());
                } else if ("hasFibreChannelAdapter".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.hasFibreChannelAdapter
                        = PresenceStatus.fromString(reader.getString());
                } else if ("hasSharedVhd".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.hasSharedVhd
                        = PresenceStatus.fromString(reader.getString());
                } else if ("hyperVHostId".equals(fieldName)) {
                    deserializedHyperVVirtualMachineDetails.hyperVHostId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVVirtualMachineDetails;
        });
    }
}
