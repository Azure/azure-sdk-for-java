// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * HyperV replica 2012 replication details.
 */
@Fluent
public final class HyperVReplicaReplicationDetails extends ReplicationProviderSpecificSettings {
    /*
     * Gets the Instance type.
     */
    private String instanceType = "HyperVReplica2012";

    /*
     * The Last replication time.
     */
    private OffsetDateTime lastReplicatedTime;

    /*
     * The PE Network details.
     */
    private List<VMNicDetails> vmNics;

    /*
     * The virtual machine Id.
     */
    private String vmId;

    /*
     * The protection state for the vm.
     */
    private String vmProtectionState;

    /*
     * The protection state description for the vm.
     */
    private String vmProtectionStateDescription;

    /*
     * Initial replication details.
     */
    private InitialReplicationDetails initialReplicationDetails;

    /*
     * VM disk details.
     */
    private List<DiskDetails> vMDiskDetails;

    /**
     * Creates an instance of HyperVReplicaReplicationDetails class.
     */
    public HyperVReplicaReplicationDetails() {
    }

    /**
     * Get the instanceType property: Gets the Instance type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the lastReplicatedTime property: The Last replication time.
     * 
     * @return the lastReplicatedTime value.
     */
    public OffsetDateTime lastReplicatedTime() {
        return this.lastReplicatedTime;
    }

    /**
     * Set the lastReplicatedTime property: The Last replication time.
     * 
     * @param lastReplicatedTime the lastReplicatedTime value to set.
     * @return the HyperVReplicaReplicationDetails object itself.
     */
    public HyperVReplicaReplicationDetails withLastReplicatedTime(OffsetDateTime lastReplicatedTime) {
        this.lastReplicatedTime = lastReplicatedTime;
        return this;
    }

    /**
     * Get the vmNics property: The PE Network details.
     * 
     * @return the vmNics value.
     */
    public List<VMNicDetails> vmNics() {
        return this.vmNics;
    }

    /**
     * Set the vmNics property: The PE Network details.
     * 
     * @param vmNics the vmNics value to set.
     * @return the HyperVReplicaReplicationDetails object itself.
     */
    public HyperVReplicaReplicationDetails withVmNics(List<VMNicDetails> vmNics) {
        this.vmNics = vmNics;
        return this;
    }

    /**
     * Get the vmId property: The virtual machine Id.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Set the vmId property: The virtual machine Id.
     * 
     * @param vmId the vmId value to set.
     * @return the HyperVReplicaReplicationDetails object itself.
     */
    public HyperVReplicaReplicationDetails withVmId(String vmId) {
        this.vmId = vmId;
        return this;
    }

    /**
     * Get the vmProtectionState property: The protection state for the vm.
     * 
     * @return the vmProtectionState value.
     */
    public String vmProtectionState() {
        return this.vmProtectionState;
    }

    /**
     * Set the vmProtectionState property: The protection state for the vm.
     * 
     * @param vmProtectionState the vmProtectionState value to set.
     * @return the HyperVReplicaReplicationDetails object itself.
     */
    public HyperVReplicaReplicationDetails withVmProtectionState(String vmProtectionState) {
        this.vmProtectionState = vmProtectionState;
        return this;
    }

    /**
     * Get the vmProtectionStateDescription property: The protection state description for the vm.
     * 
     * @return the vmProtectionStateDescription value.
     */
    public String vmProtectionStateDescription() {
        return this.vmProtectionStateDescription;
    }

    /**
     * Set the vmProtectionStateDescription property: The protection state description for the vm.
     * 
     * @param vmProtectionStateDescription the vmProtectionStateDescription value to set.
     * @return the HyperVReplicaReplicationDetails object itself.
     */
    public HyperVReplicaReplicationDetails withVmProtectionStateDescription(String vmProtectionStateDescription) {
        this.vmProtectionStateDescription = vmProtectionStateDescription;
        return this;
    }

    /**
     * Get the initialReplicationDetails property: Initial replication details.
     * 
     * @return the initialReplicationDetails value.
     */
    public InitialReplicationDetails initialReplicationDetails() {
        return this.initialReplicationDetails;
    }

    /**
     * Set the initialReplicationDetails property: Initial replication details.
     * 
     * @param initialReplicationDetails the initialReplicationDetails value to set.
     * @return the HyperVReplicaReplicationDetails object itself.
     */
    public HyperVReplicaReplicationDetails
        withInitialReplicationDetails(InitialReplicationDetails initialReplicationDetails) {
        this.initialReplicationDetails = initialReplicationDetails;
        return this;
    }

    /**
     * Get the vMDiskDetails property: VM disk details.
     * 
     * @return the vMDiskDetails value.
     */
    public List<DiskDetails> vMDiskDetails() {
        return this.vMDiskDetails;
    }

    /**
     * Set the vMDiskDetails property: VM disk details.
     * 
     * @param vMDiskDetails the vMDiskDetails value to set.
     * @return the HyperVReplicaReplicationDetails object itself.
     */
    public HyperVReplicaReplicationDetails withVMDiskDetails(List<DiskDetails> vMDiskDetails) {
        this.vMDiskDetails = vMDiskDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (vmNics() != null) {
            vmNics().forEach(e -> e.validate());
        }
        if (initialReplicationDetails() != null) {
            initialReplicationDetails().validate();
        }
        if (vMDiskDetails() != null) {
            vMDiskDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("lastReplicatedTime",
            this.lastReplicatedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastReplicatedTime));
        jsonWriter.writeArrayField("vmNics", this.vmNics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vmId", this.vmId);
        jsonWriter.writeStringField("vmProtectionState", this.vmProtectionState);
        jsonWriter.writeStringField("vmProtectionStateDescription", this.vmProtectionStateDescription);
        jsonWriter.writeJsonField("initialReplicationDetails", this.initialReplicationDetails);
        jsonWriter.writeArrayField("vMDiskDetails", this.vMDiskDetails, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVReplicaReplicationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVReplicaReplicationDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVReplicaReplicationDetails.
     */
    public static HyperVReplicaReplicationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVReplicaReplicationDetails deserializedHyperVReplicaReplicationDetails
                = new HyperVReplicaReplicationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedHyperVReplicaReplicationDetails.instanceType = reader.getString();
                } else if ("lastReplicatedTime".equals(fieldName)) {
                    deserializedHyperVReplicaReplicationDetails.lastReplicatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("vmNics".equals(fieldName)) {
                    List<VMNicDetails> vmNics = reader.readArray(reader1 -> VMNicDetails.fromJson(reader1));
                    deserializedHyperVReplicaReplicationDetails.vmNics = vmNics;
                } else if ("vmId".equals(fieldName)) {
                    deserializedHyperVReplicaReplicationDetails.vmId = reader.getString();
                } else if ("vmProtectionState".equals(fieldName)) {
                    deserializedHyperVReplicaReplicationDetails.vmProtectionState = reader.getString();
                } else if ("vmProtectionStateDescription".equals(fieldName)) {
                    deserializedHyperVReplicaReplicationDetails.vmProtectionStateDescription = reader.getString();
                } else if ("initialReplicationDetails".equals(fieldName)) {
                    deserializedHyperVReplicaReplicationDetails.initialReplicationDetails
                        = InitialReplicationDetails.fromJson(reader);
                } else if ("vMDiskDetails".equals(fieldName)) {
                    List<DiskDetails> vMDiskDetails = reader.readArray(reader1 -> DiskDetails.fromJson(reader1));
                    deserializedHyperVReplicaReplicationDetails.vMDiskDetails = vMDiskDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVReplicaReplicationDetails;
        });
    }
}
