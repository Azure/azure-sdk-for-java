// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Agent disk details.
 */
@Immutable
public final class AgentDiskDetails implements JsonSerializable<AgentDiskDetails> {
    /*
     * The disk Id.
     */
    private String diskId;

    /*
     * The disk name.
     */
    private String diskName;

    /*
     * A value indicating whether the disk is the OS disk.
     */
    private String isOSDisk;

    /*
     * The disk capacity in bytes.
     */
    private Long capacityInBytes;

    /*
     * The lun of disk.
     */
    private Integer lunId;

    /**
     * Creates an instance of AgentDiskDetails class.
     */
    public AgentDiskDetails() {
    }

    /**
     * Get the diskId property: The disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Get the diskName property: The disk name.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Get the isOSDisk property: A value indicating whether the disk is the OS disk.
     * 
     * @return the isOSDisk value.
     */
    public String isOSDisk() {
        return this.isOSDisk;
    }

    /**
     * Get the capacityInBytes property: The disk capacity in bytes.
     * 
     * @return the capacityInBytes value.
     */
    public Long capacityInBytes() {
        return this.capacityInBytes;
    }

    /**
     * Get the lunId property: The lun of disk.
     * 
     * @return the lunId value.
     */
    public Integer lunId() {
        return this.lunId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentDiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentDiskDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentDiskDetails.
     */
    public static AgentDiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentDiskDetails deserializedAgentDiskDetails = new AgentDiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedAgentDiskDetails.diskId = reader.getString();
                } else if ("diskName".equals(fieldName)) {
                    deserializedAgentDiskDetails.diskName = reader.getString();
                } else if ("isOSDisk".equals(fieldName)) {
                    deserializedAgentDiskDetails.isOSDisk = reader.getString();
                } else if ("capacityInBytes".equals(fieldName)) {
                    deserializedAgentDiskDetails.capacityInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("lunId".equals(fieldName)) {
                    deserializedAgentDiskDetails.lunId = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentDiskDetails;
        });
    }
}
