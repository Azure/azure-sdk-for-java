// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * VMwareCbt specific test migrate input.
 */
@Fluent
public final class VMwareCbtTestMigrateInput extends TestMigrateProviderSpecificInput {
    /*
     * The class type.
     */
    private String instanceType = "VMwareCbt";

    /*
     * The recovery point Id.
     */
    private String recoveryPointId;

    /*
     * The test network Id.
     */
    private String networkId;

    /*
     * The list of NIC details.
     */
    private List<VMwareCbtNicInput> vmNics;

    /*
     * A value indicating the inplace OS Upgrade version.
     */
    private String osUpgradeVersion;

    /**
     * Creates an instance of VMwareCbtTestMigrateInput class.
     */
    public VMwareCbtTestMigrateInput() {
    }

    /**
     * Get the instanceType property: The class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the recoveryPointId property: The recovery point Id.
     * 
     * @return the recoveryPointId value.
     */
    public String recoveryPointId() {
        return this.recoveryPointId;
    }

    /**
     * Set the recoveryPointId property: The recovery point Id.
     * 
     * @param recoveryPointId the recoveryPointId value to set.
     * @return the VMwareCbtTestMigrateInput object itself.
     */
    public VMwareCbtTestMigrateInput withRecoveryPointId(String recoveryPointId) {
        this.recoveryPointId = recoveryPointId;
        return this;
    }

    /**
     * Get the networkId property: The test network Id.
     * 
     * @return the networkId value.
     */
    public String networkId() {
        return this.networkId;
    }

    /**
     * Set the networkId property: The test network Id.
     * 
     * @param networkId the networkId value to set.
     * @return the VMwareCbtTestMigrateInput object itself.
     */
    public VMwareCbtTestMigrateInput withNetworkId(String networkId) {
        this.networkId = networkId;
        return this;
    }

    /**
     * Get the vmNics property: The list of NIC details.
     * 
     * @return the vmNics value.
     */
    public List<VMwareCbtNicInput> vmNics() {
        return this.vmNics;
    }

    /**
     * Set the vmNics property: The list of NIC details.
     * 
     * @param vmNics the vmNics value to set.
     * @return the VMwareCbtTestMigrateInput object itself.
     */
    public VMwareCbtTestMigrateInput withVmNics(List<VMwareCbtNicInput> vmNics) {
        this.vmNics = vmNics;
        return this;
    }

    /**
     * Get the osUpgradeVersion property: A value indicating the inplace OS Upgrade version.
     * 
     * @return the osUpgradeVersion value.
     */
    public String osUpgradeVersion() {
        return this.osUpgradeVersion;
    }

    /**
     * Set the osUpgradeVersion property: A value indicating the inplace OS Upgrade version.
     * 
     * @param osUpgradeVersion the osUpgradeVersion value to set.
     * @return the VMwareCbtTestMigrateInput object itself.
     */
    public VMwareCbtTestMigrateInput withOsUpgradeVersion(String osUpgradeVersion) {
        this.osUpgradeVersion = osUpgradeVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (recoveryPointId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recoveryPointId in model VMwareCbtTestMigrateInput"));
        }
        if (networkId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkId in model VMwareCbtTestMigrateInput"));
        }
        if (vmNics() != null) {
            vmNics().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VMwareCbtTestMigrateInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recoveryPointId", this.recoveryPointId);
        jsonWriter.writeStringField("networkId", this.networkId);
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeArrayField("vmNics", this.vmNics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("osUpgradeVersion", this.osUpgradeVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareCbtTestMigrateInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareCbtTestMigrateInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VMwareCbtTestMigrateInput.
     */
    public static VMwareCbtTestMigrateInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareCbtTestMigrateInput deserializedVMwareCbtTestMigrateInput = new VMwareCbtTestMigrateInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recoveryPointId".equals(fieldName)) {
                    deserializedVMwareCbtTestMigrateInput.recoveryPointId = reader.getString();
                } else if ("networkId".equals(fieldName)) {
                    deserializedVMwareCbtTestMigrateInput.networkId = reader.getString();
                } else if ("instanceType".equals(fieldName)) {
                    deserializedVMwareCbtTestMigrateInput.instanceType = reader.getString();
                } else if ("vmNics".equals(fieldName)) {
                    List<VMwareCbtNicInput> vmNics = reader.readArray(reader1 -> VMwareCbtNicInput.fromJson(reader1));
                    deserializedVMwareCbtTestMigrateInput.vmNics = vmNics;
                } else if ("osUpgradeVersion".equals(fieldName)) {
                    deserializedVMwareCbtTestMigrateInput.osUpgradeVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareCbtTestMigrateInput;
        });
    }
}
