// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Display;
import java.io.IOException;

/**
 * Operations discovery class.
 */
@Fluent
public final class OperationsDiscoveryInner implements JsonSerializable<OperationsDiscoveryInner> {
    /*
     * Name of the API. The name of the operation being performed on this particular object. It should match the action
     * name that appears in RBAC / the event service. Examples of operations include: *
     * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action *
     * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read *
     * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2)
     * Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write,
     * Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should
     * be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action
     * should be used. As a note: all resource providers would need to include the
     * "{Resource Provider Namespace}/register/action" operation in their response. This API is used to register for
     * their service, and should include details about the operation (e.g. a localized name for the resource provider +
     * any special considerations like PII release).
     */
    private String name;

    /*
     * Object type.
     */
    private Display display;

    /*
     * Origin. The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit
     * logs UX. Default value is "user,system".
     */
    private String origin;

    /*
     * Properties. Reserved for future use.
     */
    private Object properties;

    /**
     * Creates an instance of OperationsDiscoveryInner class.
     */
    public OperationsDiscoveryInner() {
    }

    /**
     * Get the name property: Name of the API. The name of the operation being performed on this particular object. It
     * should match the action name that appears in RBAC / the event service. Examples of operations include: *
     * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action *
     * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read *
     * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2)
     * Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write,
     * Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should
     * be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action
     * should be used. As a note: all resource providers would need to include the "{Resource Provider
     * Namespace}/register/action" operation in their response. This API is used to register for their service, and
     * should include details about the operation (e.g. a localized name for the resource provider + any special
     * considerations like PII release).
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the API. The name of the operation being performed on this particular object. It
     * should match the action name that appears in RBAC / the event service. Examples of operations include: *
     * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action *
     * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read *
     * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2)
     * Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write,
     * Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should
     * be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action
     * should be used. As a note: all resource providers would need to include the "{Resource Provider
     * Namespace}/register/action" operation in their response. This API is used to register for their service, and
     * should include details about the operation (e.g. a localized name for the resource provider + any special
     * considerations like PII release).
     * 
     * @param name the name value to set.
     * @return the OperationsDiscoveryInner object itself.
     */
    public OperationsDiscoveryInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the display property: Object type.
     * 
     * @return the display value.
     */
    public Display display() {
        return this.display;
    }

    /**
     * Set the display property: Object type.
     * 
     * @param display the display value to set.
     * @return the OperationsDiscoveryInner object itself.
     */
    public OperationsDiscoveryInner withDisplay(Display display) {
        this.display = display;
        return this;
    }

    /**
     * Get the origin property: Origin. The intended executor of the operation; governs the display of the operation in
     * the RBAC UX and the audit logs UX. Default value is "user,system".
     * 
     * @return the origin value.
     */
    public String origin() {
        return this.origin;
    }

    /**
     * Set the origin property: Origin. The intended executor of the operation; governs the display of the operation in
     * the RBAC UX and the audit logs UX. Default value is "user,system".
     * 
     * @param origin the origin value to set.
     * @return the OperationsDiscoveryInner object itself.
     */
    public OperationsDiscoveryInner withOrigin(String origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get the properties property: Properties. Reserved for future use.
     * 
     * @return the properties value.
     */
    public Object properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties. Reserved for future use.
     * 
     * @param properties the properties value to set.
     * @return the OperationsDiscoveryInner object itself.
     */
    public OperationsDiscoveryInner withProperties(Object properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (display() != null) {
            display().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("display", this.display);
        jsonWriter.writeStringField("origin", this.origin);
        jsonWriter.writeUntypedField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationsDiscoveryInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationsDiscoveryInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationsDiscoveryInner.
     */
    public static OperationsDiscoveryInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationsDiscoveryInner deserializedOperationsDiscoveryInner = new OperationsDiscoveryInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedOperationsDiscoveryInner.name = reader.getString();
                } else if ("display".equals(fieldName)) {
                    deserializedOperationsDiscoveryInner.display = Display.fromJson(reader);
                } else if ("origin".equals(fieldName)) {
                    deserializedOperationsDiscoveryInner.origin = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedOperationsDiscoveryInner.properties = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationsDiscoveryInner;
        });
    }
}
