// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * VMwareV2 fabric specific details.
 */
@Immutable
public final class VMwareV2FabricSpecificDetails extends FabricSpecificDetails {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "VMwareV2";

    /*
     * The ARM Id of the VMware site.
     */
    private String vmwareSiteId;

    /*
     * The ARM Id of the physical site.
     */
    private String physicalSiteId;

    /*
     * The Migration solution ARM Id.
     */
    private String migrationSolutionId;

    /*
     * The service endpoint.
     */
    private String serviceEndpoint;

    /*
     * The service resource Id.
     */
    private String serviceResourceId;

    /*
     * The service container Id.
     */
    private String serviceContainerId;

    /*
     * The list of process servers.
     */
    private List<ProcessServerDetails> processServers;

    /**
     * Creates an instance of VMwareV2FabricSpecificDetails class.
     */
    public VMwareV2FabricSpecificDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the vmwareSiteId property: The ARM Id of the VMware site.
     * 
     * @return the vmwareSiteId value.
     */
    public String vmwareSiteId() {
        return this.vmwareSiteId;
    }

    /**
     * Get the physicalSiteId property: The ARM Id of the physical site.
     * 
     * @return the physicalSiteId value.
     */
    public String physicalSiteId() {
        return this.physicalSiteId;
    }

    /**
     * Get the migrationSolutionId property: The Migration solution ARM Id.
     * 
     * @return the migrationSolutionId value.
     */
    public String migrationSolutionId() {
        return this.migrationSolutionId;
    }

    /**
     * Get the serviceEndpoint property: The service endpoint.
     * 
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the serviceResourceId property: The service resource Id.
     * 
     * @return the serviceResourceId value.
     */
    public String serviceResourceId() {
        return this.serviceResourceId;
    }

    /**
     * Get the serviceContainerId property: The service container Id.
     * 
     * @return the serviceContainerId value.
     */
    public String serviceContainerId() {
        return this.serviceContainerId;
    }

    /**
     * Get the processServers property: The list of process servers.
     * 
     * @return the processServers value.
     */
    public List<ProcessServerDetails> processServers() {
        return this.processServers;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (processServers() != null) {
            processServers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareV2FabricSpecificDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareV2FabricSpecificDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMwareV2FabricSpecificDetails.
     */
    public static VMwareV2FabricSpecificDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareV2FabricSpecificDetails deserializedVMwareV2FabricSpecificDetails
                = new VMwareV2FabricSpecificDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedVMwareV2FabricSpecificDetails.instanceType = reader.getString();
                } else if ("vmwareSiteId".equals(fieldName)) {
                    deserializedVMwareV2FabricSpecificDetails.vmwareSiteId = reader.getString();
                } else if ("physicalSiteId".equals(fieldName)) {
                    deserializedVMwareV2FabricSpecificDetails.physicalSiteId = reader.getString();
                } else if ("migrationSolutionId".equals(fieldName)) {
                    deserializedVMwareV2FabricSpecificDetails.migrationSolutionId = reader.getString();
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedVMwareV2FabricSpecificDetails.serviceEndpoint = reader.getString();
                } else if ("serviceResourceId".equals(fieldName)) {
                    deserializedVMwareV2FabricSpecificDetails.serviceResourceId = reader.getString();
                } else if ("serviceContainerId".equals(fieldName)) {
                    deserializedVMwareV2FabricSpecificDetails.serviceContainerId = reader.getString();
                } else if ("processServers".equals(fieldName)) {
                    List<ProcessServerDetails> processServers
                        = reader.readArray(reader1 -> ProcessServerDetails.fromJson(reader1));
                    deserializedVMwareV2FabricSpecificDetails.processServers = processServers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareV2FabricSpecificDetails;
        });
    }
}
