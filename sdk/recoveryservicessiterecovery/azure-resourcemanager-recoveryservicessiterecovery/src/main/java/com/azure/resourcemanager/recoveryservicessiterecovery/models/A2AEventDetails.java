// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model class for event details of a A2A event.
 */
@Fluent
public final class A2AEventDetails extends EventProviderSpecificDetails {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "A2A";

    /*
     * The protected item arm name.
     */
    private String protectedItemName;

    /*
     * The azure vm arm id.
     */
    private String fabricObjectId;

    /*
     * Fabric arm name.
     */
    private String fabricName;

    /*
     * The fabric location.
     */
    private String fabricLocation;

    /*
     * Remote fabric arm name.
     */
    private String remoteFabricName;

    /*
     * Remote fabric location.
     */
    private String remoteFabricLocation;

    /**
     * Creates an instance of A2AEventDetails class.
     */
    public A2AEventDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the protectedItemName property: The protected item arm name.
     * 
     * @return the protectedItemName value.
     */
    public String protectedItemName() {
        return this.protectedItemName;
    }

    /**
     * Set the protectedItemName property: The protected item arm name.
     * 
     * @param protectedItemName the protectedItemName value to set.
     * @return the A2AEventDetails object itself.
     */
    public A2AEventDetails withProtectedItemName(String protectedItemName) {
        this.protectedItemName = protectedItemName;
        return this;
    }

    /**
     * Get the fabricObjectId property: The azure vm arm id.
     * 
     * @return the fabricObjectId value.
     */
    public String fabricObjectId() {
        return this.fabricObjectId;
    }

    /**
     * Set the fabricObjectId property: The azure vm arm id.
     * 
     * @param fabricObjectId the fabricObjectId value to set.
     * @return the A2AEventDetails object itself.
     */
    public A2AEventDetails withFabricObjectId(String fabricObjectId) {
        this.fabricObjectId = fabricObjectId;
        return this;
    }

    /**
     * Get the fabricName property: Fabric arm name.
     * 
     * @return the fabricName value.
     */
    public String fabricName() {
        return this.fabricName;
    }

    /**
     * Set the fabricName property: Fabric arm name.
     * 
     * @param fabricName the fabricName value to set.
     * @return the A2AEventDetails object itself.
     */
    public A2AEventDetails withFabricName(String fabricName) {
        this.fabricName = fabricName;
        return this;
    }

    /**
     * Get the fabricLocation property: The fabric location.
     * 
     * @return the fabricLocation value.
     */
    public String fabricLocation() {
        return this.fabricLocation;
    }

    /**
     * Set the fabricLocation property: The fabric location.
     * 
     * @param fabricLocation the fabricLocation value to set.
     * @return the A2AEventDetails object itself.
     */
    public A2AEventDetails withFabricLocation(String fabricLocation) {
        this.fabricLocation = fabricLocation;
        return this;
    }

    /**
     * Get the remoteFabricName property: Remote fabric arm name.
     * 
     * @return the remoteFabricName value.
     */
    public String remoteFabricName() {
        return this.remoteFabricName;
    }

    /**
     * Set the remoteFabricName property: Remote fabric arm name.
     * 
     * @param remoteFabricName the remoteFabricName value to set.
     * @return the A2AEventDetails object itself.
     */
    public A2AEventDetails withRemoteFabricName(String remoteFabricName) {
        this.remoteFabricName = remoteFabricName;
        return this;
    }

    /**
     * Get the remoteFabricLocation property: Remote fabric location.
     * 
     * @return the remoteFabricLocation value.
     */
    public String remoteFabricLocation() {
        return this.remoteFabricLocation;
    }

    /**
     * Set the remoteFabricLocation property: Remote fabric location.
     * 
     * @param remoteFabricLocation the remoteFabricLocation value to set.
     * @return the A2AEventDetails object itself.
     */
    public A2AEventDetails withRemoteFabricLocation(String remoteFabricLocation) {
        this.remoteFabricLocation = remoteFabricLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("protectedItemName", this.protectedItemName);
        jsonWriter.writeStringField("fabricObjectId", this.fabricObjectId);
        jsonWriter.writeStringField("fabricName", this.fabricName);
        jsonWriter.writeStringField("fabricLocation", this.fabricLocation);
        jsonWriter.writeStringField("remoteFabricName", this.remoteFabricName);
        jsonWriter.writeStringField("remoteFabricLocation", this.remoteFabricLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2AEventDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2AEventDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the A2AEventDetails.
     */
    public static A2AEventDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2AEventDetails deserializedA2AEventDetails = new A2AEventDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedA2AEventDetails.instanceType = reader.getString();
                } else if ("protectedItemName".equals(fieldName)) {
                    deserializedA2AEventDetails.protectedItemName = reader.getString();
                } else if ("fabricObjectId".equals(fieldName)) {
                    deserializedA2AEventDetails.fabricObjectId = reader.getString();
                } else if ("fabricName".equals(fieldName)) {
                    deserializedA2AEventDetails.fabricName = reader.getString();
                } else if ("fabricLocation".equals(fieldName)) {
                    deserializedA2AEventDetails.fabricLocation = reader.getString();
                } else if ("remoteFabricName".equals(fieldName)) {
                    deserializedA2AEventDetails.remoteFabricName = reader.getString();
                } else if ("remoteFabricLocation".equals(fieldName)) {
                    deserializedA2AEventDetails.remoteFabricLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedA2AEventDetails;
        });
    }
}
