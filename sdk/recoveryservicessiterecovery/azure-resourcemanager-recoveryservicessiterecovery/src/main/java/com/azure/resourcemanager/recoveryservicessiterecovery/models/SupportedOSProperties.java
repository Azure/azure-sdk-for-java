// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Supported operating systems properties.
 */
@Fluent
public final class SupportedOSProperties implements JsonSerializable<SupportedOSProperties> {
    /*
     * The supported operating systems property list.
     */
    private List<SupportedOSProperty> supportedOsList;

    /**
     * Creates an instance of SupportedOSProperties class.
     */
    public SupportedOSProperties() {
    }

    /**
     * Get the supportedOsList property: The supported operating systems property list.
     * 
     * @return the supportedOsList value.
     */
    public List<SupportedOSProperty> supportedOsList() {
        return this.supportedOsList;
    }

    /**
     * Set the supportedOsList property: The supported operating systems property list.
     * 
     * @param supportedOsList the supportedOsList value to set.
     * @return the SupportedOSProperties object itself.
     */
    public SupportedOSProperties withSupportedOsList(List<SupportedOSProperty> supportedOsList) {
        this.supportedOsList = supportedOsList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (supportedOsList() != null) {
            supportedOsList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("supportedOsList", this.supportedOsList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SupportedOSProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SupportedOSProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SupportedOSProperties.
     */
    public static SupportedOSProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SupportedOSProperties deserializedSupportedOSProperties = new SupportedOSProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("supportedOsList".equals(fieldName)) {
                    List<SupportedOSProperty> supportedOsList
                        = reader.readArray(reader1 -> SupportedOSProperty.fromJson(reader1));
                    deserializedSupportedOSProperties.supportedOsList = supportedOsList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSupportedOSProperties;
        });
    }
}
