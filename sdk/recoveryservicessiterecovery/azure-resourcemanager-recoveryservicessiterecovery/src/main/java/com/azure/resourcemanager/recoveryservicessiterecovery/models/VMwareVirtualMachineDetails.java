// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * VMware provider specific settings.
 */
@Fluent
public final class VMwareVirtualMachineDetails extends ConfigurationSettings {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "VMwareVirtualMachine";

    /*
     * The ID generated by the InMage agent after it gets installed on guest. This is the ID to be used during InMage
     * CreateProtection.
     */
    private String agentGeneratedId;

    /*
     * The value indicating if InMage scout agent is installed on guest.
     */
    private String agentInstalled;

    /*
     * The OsType installed on VM.
     */
    private String osType;

    /*
     * The agent version.
     */
    private String agentVersion;

    /*
     * The IP address.
     */
    private String ipAddress;

    /*
     * The value indicating whether VM is powered on.
     */
    private String poweredOn;

    /*
     * The VCenter infrastructure Id.
     */
    private String vCenterInfrastructureId;

    /*
     * A value indicating the discovery type of the machine. Value can be vCenter or physical.
     */
    private String discoveryType;

    /*
     * The disk details.
     */
    private List<InMageDiskDetails> diskDetails;

    /*
     * The validation errors.
     */
    private List<HealthError> validationErrors;

    /**
     * Creates an instance of VMwareVirtualMachineDetails class.
     */
    public VMwareVirtualMachineDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the agentGeneratedId property: The ID generated by the InMage agent after it gets installed on guest. This is
     * the ID to be used during InMage CreateProtection.
     * 
     * @return the agentGeneratedId value.
     */
    public String agentGeneratedId() {
        return this.agentGeneratedId;
    }

    /**
     * Set the agentGeneratedId property: The ID generated by the InMage agent after it gets installed on guest. This is
     * the ID to be used during InMage CreateProtection.
     * 
     * @param agentGeneratedId the agentGeneratedId value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withAgentGeneratedId(String agentGeneratedId) {
        this.agentGeneratedId = agentGeneratedId;
        return this;
    }

    /**
     * Get the agentInstalled property: The value indicating if InMage scout agent is installed on guest.
     * 
     * @return the agentInstalled value.
     */
    public String agentInstalled() {
        return this.agentInstalled;
    }

    /**
     * Set the agentInstalled property: The value indicating if InMage scout agent is installed on guest.
     * 
     * @param agentInstalled the agentInstalled value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withAgentInstalled(String agentInstalled) {
        this.agentInstalled = agentInstalled;
        return this;
    }

    /**
     * Get the osType property: The OsType installed on VM.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The OsType installed on VM.
     * 
     * @param osType the osType value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withOsType(String osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the agentVersion property: The agent version.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Set the agentVersion property: The agent version.
     * 
     * @param agentVersion the agentVersion value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withAgentVersion(String agentVersion) {
        this.agentVersion = agentVersion;
        return this;
    }

    /**
     * Get the ipAddress property: The IP address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: The IP address.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the poweredOn property: The value indicating whether VM is powered on.
     * 
     * @return the poweredOn value.
     */
    public String poweredOn() {
        return this.poweredOn;
    }

    /**
     * Set the poweredOn property: The value indicating whether VM is powered on.
     * 
     * @param poweredOn the poweredOn value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withPoweredOn(String poweredOn) {
        this.poweredOn = poweredOn;
        return this;
    }

    /**
     * Get the vCenterInfrastructureId property: The VCenter infrastructure Id.
     * 
     * @return the vCenterInfrastructureId value.
     */
    public String vCenterInfrastructureId() {
        return this.vCenterInfrastructureId;
    }

    /**
     * Set the vCenterInfrastructureId property: The VCenter infrastructure Id.
     * 
     * @param vCenterInfrastructureId the vCenterInfrastructureId value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withVCenterInfrastructureId(String vCenterInfrastructureId) {
        this.vCenterInfrastructureId = vCenterInfrastructureId;
        return this;
    }

    /**
     * Get the discoveryType property: A value indicating the discovery type of the machine. Value can be vCenter or
     * physical.
     * 
     * @return the discoveryType value.
     */
    public String discoveryType() {
        return this.discoveryType;
    }

    /**
     * Set the discoveryType property: A value indicating the discovery type of the machine. Value can be vCenter or
     * physical.
     * 
     * @param discoveryType the discoveryType value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withDiscoveryType(String discoveryType) {
        this.discoveryType = discoveryType;
        return this;
    }

    /**
     * Get the diskDetails property: The disk details.
     * 
     * @return the diskDetails value.
     */
    public List<InMageDiskDetails> diskDetails() {
        return this.diskDetails;
    }

    /**
     * Set the diskDetails property: The disk details.
     * 
     * @param diskDetails the diskDetails value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withDiskDetails(List<InMageDiskDetails> diskDetails) {
        this.diskDetails = diskDetails;
        return this;
    }

    /**
     * Get the validationErrors property: The validation errors.
     * 
     * @return the validationErrors value.
     */
    public List<HealthError> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Set the validationErrors property: The validation errors.
     * 
     * @param validationErrors the validationErrors value to set.
     * @return the VMwareVirtualMachineDetails object itself.
     */
    public VMwareVirtualMachineDetails withValidationErrors(List<HealthError> validationErrors) {
        this.validationErrors = validationErrors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (diskDetails() != null) {
            diskDetails().forEach(e -> e.validate());
        }
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("agentGeneratedId", this.agentGeneratedId);
        jsonWriter.writeStringField("agentInstalled", this.agentInstalled);
        jsonWriter.writeStringField("osType", this.osType);
        jsonWriter.writeStringField("agentVersion", this.agentVersion);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("poweredOn", this.poweredOn);
        jsonWriter.writeStringField("vCenterInfrastructureId", this.vCenterInfrastructureId);
        jsonWriter.writeStringField("discoveryType", this.discoveryType);
        jsonWriter.writeArrayField("diskDetails", this.diskDetails, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("validationErrors", this.validationErrors,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareVirtualMachineDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareVirtualMachineDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMwareVirtualMachineDetails.
     */
    public static VMwareVirtualMachineDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareVirtualMachineDetails deserializedVMwareVirtualMachineDetails = new VMwareVirtualMachineDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.instanceType = reader.getString();
                } else if ("agentGeneratedId".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.agentGeneratedId = reader.getString();
                } else if ("agentInstalled".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.agentInstalled = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.osType = reader.getString();
                } else if ("agentVersion".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.agentVersion = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.ipAddress = reader.getString();
                } else if ("poweredOn".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.poweredOn = reader.getString();
                } else if ("vCenterInfrastructureId".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.vCenterInfrastructureId = reader.getString();
                } else if ("discoveryType".equals(fieldName)) {
                    deserializedVMwareVirtualMachineDetails.discoveryType = reader.getString();
                } else if ("diskDetails".equals(fieldName)) {
                    List<InMageDiskDetails> diskDetails
                        = reader.readArray(reader1 -> InMageDiskDetails.fromJson(reader1));
                    deserializedVMwareVirtualMachineDetails.diskDetails = diskDetails;
                } else if ("validationErrors".equals(fieldName)) {
                    List<HealthError> validationErrors = reader.readArray(reader1 -> HealthError.fromJson(reader1));
                    deserializedVMwareVirtualMachineDetails.validationErrors = validationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareVirtualMachineDetails;
        });
    }
}
