// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationRecoveryServicesProvidersClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.RecoveryServicesProviderInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryServicesProvider;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationRecoveryServicesProviders;

public final class ReplicationRecoveryServicesProvidersImpl implements ReplicationRecoveryServicesProviders {
    private static final ClientLogger LOGGER = new ClientLogger(ReplicationRecoveryServicesProvidersImpl.class);

    private final ReplicationRecoveryServicesProvidersClient innerClient;

    private final com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager;

    public ReplicationRecoveryServicesProvidersImpl(ReplicationRecoveryServicesProvidersClient innerClient,
        com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RecoveryServicesProvider> listByReplicationFabrics(String resourceGroupName,
        String resourceName, String fabricName) {
        PagedIterable<RecoveryServicesProviderInner> inner
            = this.serviceClient().listByReplicationFabrics(resourceGroupName, resourceName, fabricName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RecoveryServicesProviderImpl(inner1, this.manager()));
    }

    public PagedIterable<RecoveryServicesProvider> listByReplicationFabrics(String resourceGroupName,
        String resourceName, String fabricName, Context context) {
        PagedIterable<RecoveryServicesProviderInner> inner
            = this.serviceClient().listByReplicationFabrics(resourceGroupName, resourceName, fabricName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RecoveryServicesProviderImpl(inner1, this.manager()));
    }

    public Response<RecoveryServicesProvider> getWithResponse(String resourceGroupName, String resourceName,
        String fabricName, String providerName, Context context) {
        Response<RecoveryServicesProviderInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, resourceName, fabricName, providerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RecoveryServicesProviderImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RecoveryServicesProvider get(String resourceGroupName, String resourceName, String fabricName,
        String providerName) {
        RecoveryServicesProviderInner inner
            = this.serviceClient().get(resourceGroupName, resourceName, fabricName, providerName);
        if (inner != null) {
            return new RecoveryServicesProviderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void purge(String resourceGroupName, String resourceName, String fabricName, String providerName) {
        this.serviceClient().purge(resourceGroupName, resourceName, fabricName, providerName);
    }

    public void purge(String resourceGroupName, String resourceName, String fabricName, String providerName,
        Context context) {
        this.serviceClient().purge(resourceGroupName, resourceName, fabricName, providerName, context);
    }

    public RecoveryServicesProvider refreshProvider(String resourceGroupName, String resourceName, String fabricName,
        String providerName) {
        RecoveryServicesProviderInner inner
            = this.serviceClient().refreshProvider(resourceGroupName, resourceName, fabricName, providerName);
        if (inner != null) {
            return new RecoveryServicesProviderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryServicesProvider refreshProvider(String resourceGroupName, String resourceName, String fabricName,
        String providerName, Context context) {
        RecoveryServicesProviderInner inner
            = this.serviceClient().refreshProvider(resourceGroupName, resourceName, fabricName, providerName, context);
        if (inner != null) {
            return new RecoveryServicesProviderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String resourceName, String fabricName, String providerName) {
        this.serviceClient().delete(resourceGroupName, resourceName, fabricName, providerName);
    }

    public void delete(String resourceGroupName, String resourceName, String fabricName, String providerName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, fabricName, providerName, context);
    }

    public PagedIterable<RecoveryServicesProvider> list(String resourceGroupName, String resourceName) {
        PagedIterable<RecoveryServicesProviderInner> inner = this.serviceClient().list(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RecoveryServicesProviderImpl(inner1, this.manager()));
    }

    public PagedIterable<RecoveryServicesProvider> list(String resourceGroupName, String resourceName,
        Context context) {
        PagedIterable<RecoveryServicesProviderInner> inner
            = this.serviceClient().list(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RecoveryServicesProviderImpl(inner1, this.manager()));
    }

    public RecoveryServicesProvider getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String providerName = ResourceManagerUtils.getValueFromIdByName(id, "replicationRecoveryServicesProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'replicationRecoveryServicesProviders'.",
                id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, fabricName, providerName, Context.NONE).getValue();
    }

    public Response<RecoveryServicesProvider> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String providerName = ResourceManagerUtils.getValueFromIdByName(id, "replicationRecoveryServicesProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'replicationRecoveryServicesProviders'.",
                id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, fabricName, providerName, context);
    }

    private ReplicationRecoveryServicesProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public RecoveryServicesProviderImpl define(String name) {
        return new RecoveryServicesProviderImpl(name, this.manager());
    }
}
