// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationJobsClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.JobInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Job;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobQueryParameter;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationJobs;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResumeJobParams;

public final class ReplicationJobsImpl implements ReplicationJobs {
    private static final ClientLogger LOGGER = new ClientLogger(ReplicationJobsImpl.class);

    private final ReplicationJobsClient innerClient;

    private final com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager;

    public ReplicationJobsImpl(ReplicationJobsClient innerClient,
        com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Job> list(String resourceGroupName, String resourceName) {
        PagedIterable<JobInner> inner = this.serviceClient().list(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    public PagedIterable<Job> list(String resourceGroupName, String resourceName, String filter, Context context) {
        PagedIterable<JobInner> inner = this.serviceClient().list(resourceGroupName, resourceName, filter, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    public Response<Job> getWithResponse(String resourceGroupName, String resourceName, String jobName,
        Context context) {
        Response<JobInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, resourceName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new JobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Job get(String resourceGroupName, String resourceName, String jobName) {
        JobInner inner = this.serviceClient().get(resourceGroupName, resourceName, jobName);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job cancel(String resourceGroupName, String resourceName, String jobName) {
        JobInner inner = this.serviceClient().cancel(resourceGroupName, resourceName, jobName);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job cancel(String resourceGroupName, String resourceName, String jobName, Context context) {
        JobInner inner = this.serviceClient().cancel(resourceGroupName, resourceName, jobName, context);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job restart(String resourceGroupName, String resourceName, String jobName) {
        JobInner inner = this.serviceClient().restart(resourceGroupName, resourceName, jobName);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job restart(String resourceGroupName, String resourceName, String jobName, Context context) {
        JobInner inner = this.serviceClient().restart(resourceGroupName, resourceName, jobName, context);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job resume(String resourceGroupName, String resourceName, String jobName, ResumeJobParams resumeJobParams) {
        JobInner inner = this.serviceClient().resume(resourceGroupName, resourceName, jobName, resumeJobParams);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job resume(String resourceGroupName, String resourceName, String jobName, ResumeJobParams resumeJobParams,
        Context context) {
        JobInner inner
            = this.serviceClient().resume(resourceGroupName, resourceName, jobName, resumeJobParams, context);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job export(String resourceGroupName, String resourceName, JobQueryParameter jobQueryParameter) {
        JobInner inner = this.serviceClient().export(resourceGroupName, resourceName, jobQueryParameter);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Job export(String resourceGroupName, String resourceName, JobQueryParameter jobQueryParameter,
        Context context) {
        JobInner inner = this.serviceClient().export(resourceGroupName, resourceName, jobQueryParameter, context);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ReplicationJobsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager manager() {
        return this.serviceManager;
    }
}
