// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * InMageAzureV2 specific provider input.
 */
@Fluent
public final class InMageAzureV2ReprotectInput extends ReverseReplicationProviderSpecificInput {
    /*
     * The class type.
     */
    private String instanceType = "InMageAzureV2";

    /*
     * The Master target Id.
     */
    private String masterTargetId;

    /*
     * The Process Server Id.
     */
    private String processServerId;

    /*
     * The storage account id.
     */
    private String storageAccountId;

    /*
     * The CS account Id.
     */
    private String runAsAccountId;

    /*
     * The Policy Id.
     */
    private String policyId;

    /*
     * The storage account to be used for logging during replication.
     */
    private String logStorageAccountId;

    /*
     * The disks to include list.
     */
    private List<String> disksToInclude;

    /**
     * Creates an instance of InMageAzureV2ReprotectInput class.
     */
    public InMageAzureV2ReprotectInput() {
    }

    /**
     * Get the instanceType property: The class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the masterTargetId property: The Master target Id.
     * 
     * @return the masterTargetId value.
     */
    public String masterTargetId() {
        return this.masterTargetId;
    }

    /**
     * Set the masterTargetId property: The Master target Id.
     * 
     * @param masterTargetId the masterTargetId value to set.
     * @return the InMageAzureV2ReprotectInput object itself.
     */
    public InMageAzureV2ReprotectInput withMasterTargetId(String masterTargetId) {
        this.masterTargetId = masterTargetId;
        return this;
    }

    /**
     * Get the processServerId property: The Process Server Id.
     * 
     * @return the processServerId value.
     */
    public String processServerId() {
        return this.processServerId;
    }

    /**
     * Set the processServerId property: The Process Server Id.
     * 
     * @param processServerId the processServerId value to set.
     * @return the InMageAzureV2ReprotectInput object itself.
     */
    public InMageAzureV2ReprotectInput withProcessServerId(String processServerId) {
        this.processServerId = processServerId;
        return this;
    }

    /**
     * Get the storageAccountId property: The storage account id.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Set the storageAccountId property: The storage account id.
     * 
     * @param storageAccountId the storageAccountId value to set.
     * @return the InMageAzureV2ReprotectInput object itself.
     */
    public InMageAzureV2ReprotectInput withStorageAccountId(String storageAccountId) {
        this.storageAccountId = storageAccountId;
        return this;
    }

    /**
     * Get the runAsAccountId property: The CS account Id.
     * 
     * @return the runAsAccountId value.
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }

    /**
     * Set the runAsAccountId property: The CS account Id.
     * 
     * @param runAsAccountId the runAsAccountId value to set.
     * @return the InMageAzureV2ReprotectInput object itself.
     */
    public InMageAzureV2ReprotectInput withRunAsAccountId(String runAsAccountId) {
        this.runAsAccountId = runAsAccountId;
        return this;
    }

    /**
     * Get the policyId property: The Policy Id.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: The Policy Id.
     * 
     * @param policyId the policyId value to set.
     * @return the InMageAzureV2ReprotectInput object itself.
     */
    public InMageAzureV2ReprotectInput withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * Get the logStorageAccountId property: The storage account to be used for logging during replication.
     * 
     * @return the logStorageAccountId value.
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * Set the logStorageAccountId property: The storage account to be used for logging during replication.
     * 
     * @param logStorageAccountId the logStorageAccountId value to set.
     * @return the InMageAzureV2ReprotectInput object itself.
     */
    public InMageAzureV2ReprotectInput withLogStorageAccountId(String logStorageAccountId) {
        this.logStorageAccountId = logStorageAccountId;
        return this;
    }

    /**
     * Get the disksToInclude property: The disks to include list.
     * 
     * @return the disksToInclude value.
     */
    public List<String> disksToInclude() {
        return this.disksToInclude;
    }

    /**
     * Set the disksToInclude property: The disks to include list.
     * 
     * @param disksToInclude the disksToInclude value to set.
     * @return the InMageAzureV2ReprotectInput object itself.
     */
    public InMageAzureV2ReprotectInput withDisksToInclude(List<String> disksToInclude) {
        this.disksToInclude = disksToInclude;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("masterTargetId", this.masterTargetId);
        jsonWriter.writeStringField("processServerId", this.processServerId);
        jsonWriter.writeStringField("storageAccountId", this.storageAccountId);
        jsonWriter.writeStringField("runAsAccountId", this.runAsAccountId);
        jsonWriter.writeStringField("policyId", this.policyId);
        jsonWriter.writeStringField("logStorageAccountId", this.logStorageAccountId);
        jsonWriter.writeArrayField("disksToInclude", this.disksToInclude,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageAzureV2ReprotectInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageAzureV2ReprotectInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageAzureV2ReprotectInput.
     */
    public static InMageAzureV2ReprotectInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageAzureV2ReprotectInput deserializedInMageAzureV2ReprotectInput = new InMageAzureV2ReprotectInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedInMageAzureV2ReprotectInput.instanceType = reader.getString();
                } else if ("masterTargetId".equals(fieldName)) {
                    deserializedInMageAzureV2ReprotectInput.masterTargetId = reader.getString();
                } else if ("processServerId".equals(fieldName)) {
                    deserializedInMageAzureV2ReprotectInput.processServerId = reader.getString();
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedInMageAzureV2ReprotectInput.storageAccountId = reader.getString();
                } else if ("runAsAccountId".equals(fieldName)) {
                    deserializedInMageAzureV2ReprotectInput.runAsAccountId = reader.getString();
                } else if ("policyId".equals(fieldName)) {
                    deserializedInMageAzureV2ReprotectInput.policyId = reader.getString();
                } else if ("logStorageAccountId".equals(fieldName)) {
                    deserializedInMageAzureV2ReprotectInput.logStorageAccountId = reader.getString();
                } else if ("disksToInclude".equals(fieldName)) {
                    List<String> disksToInclude = reader.readArray(reader1 -> reader1.getString());
                    deserializedInMageAzureV2ReprotectInput.disksToInclude = disksToInclude;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageAzureV2ReprotectInput;
        });
    }
}
