// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Recovery plan script action details.
 */
@Fluent
public final class RecoveryPlanScriptActionDetails extends RecoveryPlanActionDetails {
    /*
     * Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for possible values).
     */
    private String instanceType = "ScriptActionDetails";

    /*
     * The script path.
     */
    private String path;

    /*
     * The script timeout.
     */
    private String timeout;

    /*
     * The fabric location.
     */
    private RecoveryPlanActionLocation fabricLocation;

    /**
     * Creates an instance of RecoveryPlanScriptActionDetails class.
     */
    public RecoveryPlanScriptActionDetails() {
    }

    /**
     * Get the instanceType property: Gets the type of action details (see RecoveryPlanActionDetailsTypes enum for
     * possible values).
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the path property: The script path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The script path.
     * 
     * @param path the path value to set.
     * @return the RecoveryPlanScriptActionDetails object itself.
     */
    public RecoveryPlanScriptActionDetails withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the timeout property: The script timeout.
     * 
     * @return the timeout value.
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The script timeout.
     * 
     * @param timeout the timeout value to set.
     * @return the RecoveryPlanScriptActionDetails object itself.
     */
    public RecoveryPlanScriptActionDetails withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the fabricLocation property: The fabric location.
     * 
     * @return the fabricLocation value.
     */
    public RecoveryPlanActionLocation fabricLocation() {
        return this.fabricLocation;
    }

    /**
     * Set the fabricLocation property: The fabric location.
     * 
     * @param fabricLocation the fabricLocation value to set.
     * @return the RecoveryPlanScriptActionDetails object itself.
     */
    public RecoveryPlanScriptActionDetails withFabricLocation(RecoveryPlanActionLocation fabricLocation) {
        this.fabricLocation = fabricLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (path() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property path in model RecoveryPlanScriptActionDetails"));
        }
        if (fabricLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property fabricLocation in model RecoveryPlanScriptActionDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RecoveryPlanScriptActionDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("fabricLocation",
            this.fabricLocation == null ? null : this.fabricLocation.toString());
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("timeout", this.timeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecoveryPlanScriptActionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecoveryPlanScriptActionDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecoveryPlanScriptActionDetails.
     */
    public static RecoveryPlanScriptActionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecoveryPlanScriptActionDetails deserializedRecoveryPlanScriptActionDetails
                = new RecoveryPlanScriptActionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedRecoveryPlanScriptActionDetails.path = reader.getString();
                } else if ("fabricLocation".equals(fieldName)) {
                    deserializedRecoveryPlanScriptActionDetails.fabricLocation
                        = RecoveryPlanActionLocation.fromString(reader.getString());
                } else if ("instanceType".equals(fieldName)) {
                    deserializedRecoveryPlanScriptActionDetails.instanceType = reader.getString();
                } else if ("timeout".equals(fieldName)) {
                    deserializedRecoveryPlanScriptActionDetails.timeout = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecoveryPlanScriptActionDetails;
        });
    }
}
