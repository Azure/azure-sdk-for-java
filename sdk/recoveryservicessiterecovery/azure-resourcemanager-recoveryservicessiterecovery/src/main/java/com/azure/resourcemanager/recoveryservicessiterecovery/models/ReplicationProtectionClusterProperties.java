// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Replication protection cluster custom data details.
 */
@Fluent
public final class ReplicationProtectionClusterProperties
    implements JsonSerializable<ReplicationProtectionClusterProperties> {
    /*
     * The type of protection cluster type.
     */
    private String protectionClusterType;

    /*
     * The friendly name of the primary fabric.
     */
    private String primaryFabricFriendlyName;

    /*
     * The fabric provider of the primary fabric.
     */
    private String primaryFabricProvider;

    /*
     * The friendly name of recovery fabric.
     */
    private String recoveryFabricFriendlyName;

    /*
     * The Arm Id of recovery fabric.
     */
    private String recoveryFabricId;

    /*
     * The name of primary protection container friendly name.
     */
    private String primaryProtectionContainerFriendlyName;

    /*
     * The name of recovery container friendly name.
     */
    private String recoveryProtectionContainerFriendlyName;

    /*
     * The protection status.
     */
    private String protectionState;

    /*
     * The protection state description.
     */
    private String protectionStateDescription;

    /*
     * The Current active location of the Protection cluster.
     */
    private String activeLocation;

    /*
     * The Test failover state.
     */
    private String testFailoverState;

    /*
     * The Test failover state description.
     */
    private String testFailoverStateDescription;

    /*
     * The allowed operations on the Replication protection cluster.
     */
    private List<String> allowedOperations;

    /*
     * The consolidated protection health for the VM taking any issues with SRS as well as all the replication units
     * associated with the VM's replication group into account. This is a string representation of the ProtectionHealth
     * enumeration.
     */
    private String replicationHealth;

    /*
     * List of health errors.
     */
    private List<HealthError> healthErrors;

    /*
     * The last successful failover time.
     */
    private OffsetDateTime lastSuccessfulFailoverTime;

    /*
     * The last successful test failover time.
     */
    private OffsetDateTime lastSuccessfulTestFailoverTime;

    /*
     * The name of Policy governing this PE.
     */
    private String policyFriendlyName;

    /*
     * The current scenario.
     */
    private CurrentScenarioDetails currentScenario;

    /*
     * The recovery container Id.
     */
    private String recoveryContainerId;

    /*
     * The Agent cluster Id.
     */
    private String agentClusterId;

    /*
     * The cluster FQDN.
     */
    private String clusterFqdn;

    /*
     * The List of cluster Node FQDNs.
     */
    private List<String> clusterNodeFqdns;

    /*
     * The List of Protected Item Id's.
     */
    private List<String> clusterProtectedItemIds;

    /*
     * The provisioning state of the cluster.
     */
    private String provisioningState;

    /*
     * A value indicating whether all nodes of the cluster are registered or not.
     */
    private Boolean areAllClusterNodesRegistered;

    /*
     * The registered node details.
     */
    private List<RegisteredClusterNodes> clusterRegisteredNodes;

    /*
     * The Replication cluster provider custom settings.
     */
    private ReplicationClusterProviderSpecificSettings providerSpecificDetails;

    /*
     * The shared disk properties.
     */
    private SharedDiskReplicationItemProperties sharedDiskProperties;

    /*
     * The Policy Id.
     */
    private String policyId;

    /**
     * Creates an instance of ReplicationProtectionClusterProperties class.
     */
    public ReplicationProtectionClusterProperties() {
    }

    /**
     * Get the protectionClusterType property: The type of protection cluster type.
     * 
     * @return the protectionClusterType value.
     */
    public String protectionClusterType() {
        return this.protectionClusterType;
    }

    /**
     * Set the protectionClusterType property: The type of protection cluster type.
     * 
     * @param protectionClusterType the protectionClusterType value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withProtectionClusterType(String protectionClusterType) {
        this.protectionClusterType = protectionClusterType;
        return this;
    }

    /**
     * Get the primaryFabricFriendlyName property: The friendly name of the primary fabric.
     * 
     * @return the primaryFabricFriendlyName value.
     */
    public String primaryFabricFriendlyName() {
        return this.primaryFabricFriendlyName;
    }

    /**
     * Set the primaryFabricFriendlyName property: The friendly name of the primary fabric.
     * 
     * @param primaryFabricFriendlyName the primaryFabricFriendlyName value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withPrimaryFabricFriendlyName(String primaryFabricFriendlyName) {
        this.primaryFabricFriendlyName = primaryFabricFriendlyName;
        return this;
    }

    /**
     * Get the primaryFabricProvider property: The fabric provider of the primary fabric.
     * 
     * @return the primaryFabricProvider value.
     */
    public String primaryFabricProvider() {
        return this.primaryFabricProvider;
    }

    /**
     * Set the primaryFabricProvider property: The fabric provider of the primary fabric.
     * 
     * @param primaryFabricProvider the primaryFabricProvider value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withPrimaryFabricProvider(String primaryFabricProvider) {
        this.primaryFabricProvider = primaryFabricProvider;
        return this;
    }

    /**
     * Get the recoveryFabricFriendlyName property: The friendly name of recovery fabric.
     * 
     * @return the recoveryFabricFriendlyName value.
     */
    public String recoveryFabricFriendlyName() {
        return this.recoveryFabricFriendlyName;
    }

    /**
     * Set the recoveryFabricFriendlyName property: The friendly name of recovery fabric.
     * 
     * @param recoveryFabricFriendlyName the recoveryFabricFriendlyName value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withRecoveryFabricFriendlyName(String recoveryFabricFriendlyName) {
        this.recoveryFabricFriendlyName = recoveryFabricFriendlyName;
        return this;
    }

    /**
     * Get the recoveryFabricId property: The Arm Id of recovery fabric.
     * 
     * @return the recoveryFabricId value.
     */
    public String recoveryFabricId() {
        return this.recoveryFabricId;
    }

    /**
     * Set the recoveryFabricId property: The Arm Id of recovery fabric.
     * 
     * @param recoveryFabricId the recoveryFabricId value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withRecoveryFabricId(String recoveryFabricId) {
        this.recoveryFabricId = recoveryFabricId;
        return this;
    }

    /**
     * Get the primaryProtectionContainerFriendlyName property: The name of primary protection container friendly name.
     * 
     * @return the primaryProtectionContainerFriendlyName value.
     */
    public String primaryProtectionContainerFriendlyName() {
        return this.primaryProtectionContainerFriendlyName;
    }

    /**
     * Set the primaryProtectionContainerFriendlyName property: The name of primary protection container friendly name.
     * 
     * @param primaryProtectionContainerFriendlyName the primaryProtectionContainerFriendlyName value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withPrimaryProtectionContainerFriendlyName(String primaryProtectionContainerFriendlyName) {
        this.primaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyName;
        return this;
    }

    /**
     * Get the recoveryProtectionContainerFriendlyName property: The name of recovery container friendly name.
     * 
     * @return the recoveryProtectionContainerFriendlyName value.
     */
    public String recoveryProtectionContainerFriendlyName() {
        return this.recoveryProtectionContainerFriendlyName;
    }

    /**
     * Set the recoveryProtectionContainerFriendlyName property: The name of recovery container friendly name.
     * 
     * @param recoveryProtectionContainerFriendlyName the recoveryProtectionContainerFriendlyName value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withRecoveryProtectionContainerFriendlyName(String recoveryProtectionContainerFriendlyName) {
        this.recoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyName;
        return this;
    }

    /**
     * Get the protectionState property: The protection status.
     * 
     * @return the protectionState value.
     */
    public String protectionState() {
        return this.protectionState;
    }

    /**
     * Set the protectionState property: The protection status.
     * 
     * @param protectionState the protectionState value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withProtectionState(String protectionState) {
        this.protectionState = protectionState;
        return this;
    }

    /**
     * Get the protectionStateDescription property: The protection state description.
     * 
     * @return the protectionStateDescription value.
     */
    public String protectionStateDescription() {
        return this.protectionStateDescription;
    }

    /**
     * Set the protectionStateDescription property: The protection state description.
     * 
     * @param protectionStateDescription the protectionStateDescription value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withProtectionStateDescription(String protectionStateDescription) {
        this.protectionStateDescription = protectionStateDescription;
        return this;
    }

    /**
     * Get the activeLocation property: The Current active location of the Protection cluster.
     * 
     * @return the activeLocation value.
     */
    public String activeLocation() {
        return this.activeLocation;
    }

    /**
     * Set the activeLocation property: The Current active location of the Protection cluster.
     * 
     * @param activeLocation the activeLocation value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withActiveLocation(String activeLocation) {
        this.activeLocation = activeLocation;
        return this;
    }

    /**
     * Get the testFailoverState property: The Test failover state.
     * 
     * @return the testFailoverState value.
     */
    public String testFailoverState() {
        return this.testFailoverState;
    }

    /**
     * Set the testFailoverState property: The Test failover state.
     * 
     * @param testFailoverState the testFailoverState value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withTestFailoverState(String testFailoverState) {
        this.testFailoverState = testFailoverState;
        return this;
    }

    /**
     * Get the testFailoverStateDescription property: The Test failover state description.
     * 
     * @return the testFailoverStateDescription value.
     */
    public String testFailoverStateDescription() {
        return this.testFailoverStateDescription;
    }

    /**
     * Set the testFailoverStateDescription property: The Test failover state description.
     * 
     * @param testFailoverStateDescription the testFailoverStateDescription value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withTestFailoverStateDescription(String testFailoverStateDescription) {
        this.testFailoverStateDescription = testFailoverStateDescription;
        return this;
    }

    /**
     * Get the allowedOperations property: The allowed operations on the Replication protection cluster.
     * 
     * @return the allowedOperations value.
     */
    public List<String> allowedOperations() {
        return this.allowedOperations;
    }

    /**
     * Set the allowedOperations property: The allowed operations on the Replication protection cluster.
     * 
     * @param allowedOperations the allowedOperations value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withAllowedOperations(List<String> allowedOperations) {
        this.allowedOperations = allowedOperations;
        return this;
    }

    /**
     * Get the replicationHealth property: The consolidated protection health for the VM taking any issues with SRS as
     * well as all the replication units associated with the VM's replication group into account. This is a string
     * representation of the ProtectionHealth enumeration.
     * 
     * @return the replicationHealth value.
     */
    public String replicationHealth() {
        return this.replicationHealth;
    }

    /**
     * Set the replicationHealth property: The consolidated protection health for the VM taking any issues with SRS as
     * well as all the replication units associated with the VM's replication group into account. This is a string
     * representation of the ProtectionHealth enumeration.
     * 
     * @param replicationHealth the replicationHealth value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withReplicationHealth(String replicationHealth) {
        this.replicationHealth = replicationHealth;
        return this;
    }

    /**
     * Get the healthErrors property: List of health errors.
     * 
     * @return the healthErrors value.
     */
    public List<HealthError> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Set the healthErrors property: List of health errors.
     * 
     * @param healthErrors the healthErrors value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withHealthErrors(List<HealthError> healthErrors) {
        this.healthErrors = healthErrors;
        return this;
    }

    /**
     * Get the lastSuccessfulFailoverTime property: The last successful failover time.
     * 
     * @return the lastSuccessfulFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulFailoverTime() {
        return this.lastSuccessfulFailoverTime;
    }

    /**
     * Set the lastSuccessfulFailoverTime property: The last successful failover time.
     * 
     * @param lastSuccessfulFailoverTime the lastSuccessfulFailoverTime value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withLastSuccessfulFailoverTime(OffsetDateTime lastSuccessfulFailoverTime) {
        this.lastSuccessfulFailoverTime = lastSuccessfulFailoverTime;
        return this;
    }

    /**
     * Get the lastSuccessfulTestFailoverTime property: The last successful test failover time.
     * 
     * @return the lastSuccessfulTestFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulTestFailoverTime() {
        return this.lastSuccessfulTestFailoverTime;
    }

    /**
     * Set the lastSuccessfulTestFailoverTime property: The last successful test failover time.
     * 
     * @param lastSuccessfulTestFailoverTime the lastSuccessfulTestFailoverTime value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withLastSuccessfulTestFailoverTime(OffsetDateTime lastSuccessfulTestFailoverTime) {
        this.lastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTime;
        return this;
    }

    /**
     * Get the policyFriendlyName property: The name of Policy governing this PE.
     * 
     * @return the policyFriendlyName value.
     */
    public String policyFriendlyName() {
        return this.policyFriendlyName;
    }

    /**
     * Set the policyFriendlyName property: The name of Policy governing this PE.
     * 
     * @param policyFriendlyName the policyFriendlyName value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withPolicyFriendlyName(String policyFriendlyName) {
        this.policyFriendlyName = policyFriendlyName;
        return this;
    }

    /**
     * Get the currentScenario property: The current scenario.
     * 
     * @return the currentScenario value.
     */
    public CurrentScenarioDetails currentScenario() {
        return this.currentScenario;
    }

    /**
     * Set the currentScenario property: The current scenario.
     * 
     * @param currentScenario the currentScenario value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withCurrentScenario(CurrentScenarioDetails currentScenario) {
        this.currentScenario = currentScenario;
        return this;
    }

    /**
     * Get the recoveryContainerId property: The recovery container Id.
     * 
     * @return the recoveryContainerId value.
     */
    public String recoveryContainerId() {
        return this.recoveryContainerId;
    }

    /**
     * Set the recoveryContainerId property: The recovery container Id.
     * 
     * @param recoveryContainerId the recoveryContainerId value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withRecoveryContainerId(String recoveryContainerId) {
        this.recoveryContainerId = recoveryContainerId;
        return this;
    }

    /**
     * Get the agentClusterId property: The Agent cluster Id.
     * 
     * @return the agentClusterId value.
     */
    public String agentClusterId() {
        return this.agentClusterId;
    }

    /**
     * Set the agentClusterId property: The Agent cluster Id.
     * 
     * @param agentClusterId the agentClusterId value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withAgentClusterId(String agentClusterId) {
        this.agentClusterId = agentClusterId;
        return this;
    }

    /**
     * Get the clusterFqdn property: The cluster FQDN.
     * 
     * @return the clusterFqdn value.
     */
    public String clusterFqdn() {
        return this.clusterFqdn;
    }

    /**
     * Set the clusterFqdn property: The cluster FQDN.
     * 
     * @param clusterFqdn the clusterFqdn value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withClusterFqdn(String clusterFqdn) {
        this.clusterFqdn = clusterFqdn;
        return this;
    }

    /**
     * Get the clusterNodeFqdns property: The List of cluster Node FQDNs.
     * 
     * @return the clusterNodeFqdns value.
     */
    public List<String> clusterNodeFqdns() {
        return this.clusterNodeFqdns;
    }

    /**
     * Set the clusterNodeFqdns property: The List of cluster Node FQDNs.
     * 
     * @param clusterNodeFqdns the clusterNodeFqdns value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withClusterNodeFqdns(List<String> clusterNodeFqdns) {
        this.clusterNodeFqdns = clusterNodeFqdns;
        return this;
    }

    /**
     * Get the clusterProtectedItemIds property: The List of Protected Item Id's.
     * 
     * @return the clusterProtectedItemIds value.
     */
    public List<String> clusterProtectedItemIds() {
        return this.clusterProtectedItemIds;
    }

    /**
     * Set the clusterProtectedItemIds property: The List of Protected Item Id's.
     * 
     * @param clusterProtectedItemIds the clusterProtectedItemIds value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withClusterProtectedItemIds(List<String> clusterProtectedItemIds) {
        this.clusterProtectedItemIds = clusterProtectedItemIds;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the cluster.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the areAllClusterNodesRegistered property: A value indicating whether all nodes of the cluster are registered
     * or not.
     * 
     * @return the areAllClusterNodesRegistered value.
     */
    public Boolean areAllClusterNodesRegistered() {
        return this.areAllClusterNodesRegistered;
    }

    /**
     * Set the areAllClusterNodesRegistered property: A value indicating whether all nodes of the cluster are registered
     * or not.
     * 
     * @param areAllClusterNodesRegistered the areAllClusterNodesRegistered value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withAreAllClusterNodesRegistered(Boolean areAllClusterNodesRegistered) {
        this.areAllClusterNodesRegistered = areAllClusterNodesRegistered;
        return this;
    }

    /**
     * Get the clusterRegisteredNodes property: The registered node details.
     * 
     * @return the clusterRegisteredNodes value.
     */
    public List<RegisteredClusterNodes> clusterRegisteredNodes() {
        return this.clusterRegisteredNodes;
    }

    /**
     * Set the clusterRegisteredNodes property: The registered node details.
     * 
     * @param clusterRegisteredNodes the clusterRegisteredNodes value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withClusterRegisteredNodes(List<RegisteredClusterNodes> clusterRegisteredNodes) {
        this.clusterRegisteredNodes = clusterRegisteredNodes;
        return this;
    }

    /**
     * Get the providerSpecificDetails property: The Replication cluster provider custom settings.
     * 
     * @return the providerSpecificDetails value.
     */
    public ReplicationClusterProviderSpecificSettings providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: The Replication cluster provider custom settings.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withProviderSpecificDetails(ReplicationClusterProviderSpecificSettings providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Get the sharedDiskProperties property: The shared disk properties.
     * 
     * @return the sharedDiskProperties value.
     */
    public SharedDiskReplicationItemProperties sharedDiskProperties() {
        return this.sharedDiskProperties;
    }

    /**
     * Set the sharedDiskProperties property: The shared disk properties.
     * 
     * @param sharedDiskProperties the sharedDiskProperties value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties
        withSharedDiskProperties(SharedDiskReplicationItemProperties sharedDiskProperties) {
        this.sharedDiskProperties = sharedDiskProperties;
        return this;
    }

    /**
     * Get the policyId property: The Policy Id.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: The Policy Id.
     * 
     * @param policyId the policyId value to set.
     * @return the ReplicationProtectionClusterProperties object itself.
     */
    public ReplicationProtectionClusterProperties withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (currentScenario() != null) {
            currentScenario().validate();
        }
        if (clusterRegisteredNodes() != null) {
            clusterRegisteredNodes().forEach(e -> e.validate());
        }
        if (providerSpecificDetails() != null) {
            providerSpecificDetails().validate();
        }
        if (sharedDiskProperties() != null) {
            sharedDiskProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("protectionClusterType", this.protectionClusterType);
        jsonWriter.writeStringField("primaryFabricFriendlyName", this.primaryFabricFriendlyName);
        jsonWriter.writeStringField("primaryFabricProvider", this.primaryFabricProvider);
        jsonWriter.writeStringField("recoveryFabricFriendlyName", this.recoveryFabricFriendlyName);
        jsonWriter.writeStringField("recoveryFabricId", this.recoveryFabricId);
        jsonWriter.writeStringField("primaryProtectionContainerFriendlyName",
            this.primaryProtectionContainerFriendlyName);
        jsonWriter.writeStringField("recoveryProtectionContainerFriendlyName",
            this.recoveryProtectionContainerFriendlyName);
        jsonWriter.writeStringField("protectionState", this.protectionState);
        jsonWriter.writeStringField("protectionStateDescription", this.protectionStateDescription);
        jsonWriter.writeStringField("activeLocation", this.activeLocation);
        jsonWriter.writeStringField("testFailoverState", this.testFailoverState);
        jsonWriter.writeStringField("testFailoverStateDescription", this.testFailoverStateDescription);
        jsonWriter.writeArrayField("allowedOperations", this.allowedOperations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("replicationHealth", this.replicationHealth);
        jsonWriter.writeArrayField("healthErrors", this.healthErrors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lastSuccessfulFailoverTime",
            this.lastSuccessfulFailoverTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSuccessfulFailoverTime));
        jsonWriter.writeStringField("lastSuccessfulTestFailoverTime",
            this.lastSuccessfulTestFailoverTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSuccessfulTestFailoverTime));
        jsonWriter.writeStringField("policyFriendlyName", this.policyFriendlyName);
        jsonWriter.writeJsonField("currentScenario", this.currentScenario);
        jsonWriter.writeStringField("recoveryContainerId", this.recoveryContainerId);
        jsonWriter.writeStringField("agentClusterId", this.agentClusterId);
        jsonWriter.writeStringField("clusterFqdn", this.clusterFqdn);
        jsonWriter.writeArrayField("clusterNodeFqdns", this.clusterNodeFqdns,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("clusterProtectedItemIds", this.clusterProtectedItemIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("areAllClusterNodesRegistered", this.areAllClusterNodesRegistered);
        jsonWriter.writeArrayField("clusterRegisteredNodes", this.clusterRegisteredNodes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        jsonWriter.writeJsonField("sharedDiskProperties", this.sharedDiskProperties);
        jsonWriter.writeStringField("policyId", this.policyId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationProtectionClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationProtectionClusterProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationProtectionClusterProperties.
     */
    public static ReplicationProtectionClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationProtectionClusterProperties deserializedReplicationProtectionClusterProperties
                = new ReplicationProtectionClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protectionClusterType".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.protectionClusterType = reader.getString();
                } else if ("primaryFabricFriendlyName".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.primaryFabricFriendlyName = reader.getString();
                } else if ("primaryFabricProvider".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.primaryFabricProvider = reader.getString();
                } else if ("recoveryFabricFriendlyName".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.recoveryFabricFriendlyName = reader.getString();
                } else if ("recoveryFabricId".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.recoveryFabricId = reader.getString();
                } else if ("primaryProtectionContainerFriendlyName".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.primaryProtectionContainerFriendlyName
                        = reader.getString();
                } else if ("recoveryProtectionContainerFriendlyName".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.recoveryProtectionContainerFriendlyName
                        = reader.getString();
                } else if ("protectionState".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.protectionState = reader.getString();
                } else if ("protectionStateDescription".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.protectionStateDescription = reader.getString();
                } else if ("activeLocation".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.activeLocation = reader.getString();
                } else if ("testFailoverState".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.testFailoverState = reader.getString();
                } else if ("testFailoverStateDescription".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.testFailoverStateDescription
                        = reader.getString();
                } else if ("allowedOperations".equals(fieldName)) {
                    List<String> allowedOperations = reader.readArray(reader1 -> reader1.getString());
                    deserializedReplicationProtectionClusterProperties.allowedOperations = allowedOperations;
                } else if ("replicationHealth".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.replicationHealth = reader.getString();
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthError> healthErrors = reader.readArray(reader1 -> HealthError.fromJson(reader1));
                    deserializedReplicationProtectionClusterProperties.healthErrors = healthErrors;
                } else if ("lastSuccessfulFailoverTime".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.lastSuccessfulFailoverTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSuccessfulTestFailoverTime".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.lastSuccessfulTestFailoverTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("policyFriendlyName".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.policyFriendlyName = reader.getString();
                } else if ("currentScenario".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.currentScenario
                        = CurrentScenarioDetails.fromJson(reader);
                } else if ("recoveryContainerId".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.recoveryContainerId = reader.getString();
                } else if ("agentClusterId".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.agentClusterId = reader.getString();
                } else if ("clusterFqdn".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.clusterFqdn = reader.getString();
                } else if ("clusterNodeFqdns".equals(fieldName)) {
                    List<String> clusterNodeFqdns = reader.readArray(reader1 -> reader1.getString());
                    deserializedReplicationProtectionClusterProperties.clusterNodeFqdns = clusterNodeFqdns;
                } else if ("clusterProtectedItemIds".equals(fieldName)) {
                    List<String> clusterProtectedItemIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedReplicationProtectionClusterProperties.clusterProtectedItemIds
                        = clusterProtectedItemIds;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.provisioningState = reader.getString();
                } else if ("areAllClusterNodesRegistered".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.areAllClusterNodesRegistered
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("clusterRegisteredNodes".equals(fieldName)) {
                    List<RegisteredClusterNodes> clusterRegisteredNodes
                        = reader.readArray(reader1 -> RegisteredClusterNodes.fromJson(reader1));
                    deserializedReplicationProtectionClusterProperties.clusterRegisteredNodes = clusterRegisteredNodes;
                } else if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.providerSpecificDetails
                        = ReplicationClusterProviderSpecificSettings.fromJson(reader);
                } else if ("sharedDiskProperties".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.sharedDiskProperties
                        = SharedDiskReplicationItemProperties.fromJson(reader);
                } else if ("policyId".equals(fieldName)) {
                    deserializedReplicationProtectionClusterProperties.policyId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationProtectionClusterProperties;
        });
    }
}
