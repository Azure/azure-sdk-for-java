// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The InputEndpoint model.
 */
@Fluent
public final class InputEndpoint implements JsonSerializable<InputEndpoint> {
    /*
     * The endpointName property.
     */
    private String endpointName;

    /*
     * The privatePort property.
     */
    private Integer privatePort;

    /*
     * The publicPort property.
     */
    private Integer publicPort;

    /*
     * The protocol property.
     */
    private String protocol;

    /**
     * Creates an instance of InputEndpoint class.
     */
    public InputEndpoint() {
    }

    /**
     * Get the endpointName property: The endpointName property.
     * 
     * @return the endpointName value.
     */
    public String endpointName() {
        return this.endpointName;
    }

    /**
     * Set the endpointName property: The endpointName property.
     * 
     * @param endpointName the endpointName value to set.
     * @return the InputEndpoint object itself.
     */
    public InputEndpoint withEndpointName(String endpointName) {
        this.endpointName = endpointName;
        return this;
    }

    /**
     * Get the privatePort property: The privatePort property.
     * 
     * @return the privatePort value.
     */
    public Integer privatePort() {
        return this.privatePort;
    }

    /**
     * Set the privatePort property: The privatePort property.
     * 
     * @param privatePort the privatePort value to set.
     * @return the InputEndpoint object itself.
     */
    public InputEndpoint withPrivatePort(Integer privatePort) {
        this.privatePort = privatePort;
        return this;
    }

    /**
     * Get the publicPort property: The publicPort property.
     * 
     * @return the publicPort value.
     */
    public Integer publicPort() {
        return this.publicPort;
    }

    /**
     * Set the publicPort property: The publicPort property.
     * 
     * @param publicPort the publicPort value to set.
     * @return the InputEndpoint object itself.
     */
    public InputEndpoint withPublicPort(Integer publicPort) {
        this.publicPort = publicPort;
        return this;
    }

    /**
     * Get the protocol property: The protocol property.
     * 
     * @return the protocol value.
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The protocol property.
     * 
     * @param protocol the protocol value to set.
     * @return the InputEndpoint object itself.
     */
    public InputEndpoint withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointName", this.endpointName);
        jsonWriter.writeNumberField("privatePort", this.privatePort);
        jsonWriter.writeNumberField("publicPort", this.publicPort);
        jsonWriter.writeStringField("protocol", this.protocol);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputEndpoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InputEndpoint.
     */
    public static InputEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InputEndpoint deserializedInputEndpoint = new InputEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointName".equals(fieldName)) {
                    deserializedInputEndpoint.endpointName = reader.getString();
                } else if ("privatePort".equals(fieldName)) {
                    deserializedInputEndpoint.privatePort = reader.getNullable(JsonReader::getInt);
                } else if ("publicPort".equals(fieldName)) {
                    deserializedInputEndpoint.publicPort = reader.getNullable(JsonReader::getInt);
                } else if ("protocol".equals(fieldName)) {
                    deserializedInputEndpoint.protocol = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInputEndpoint;
        });
    }
}
