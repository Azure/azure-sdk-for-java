// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A2A remove disk(s) input.
 */
@Fluent
public final class A2ARemoveDisksInput extends RemoveDisksProviderSpecificInput {
    /*
     * The class type.
     */
    private String instanceType = "A2A";

    /*
     * The list of vm disk vhd URIs.
     */
    private List<String> vmDisksUris;

    /*
     * The list of vm managed disk Ids.
     */
    private List<String> vmManagedDisksIds;

    /**
     * Creates an instance of A2ARemoveDisksInput class.
     */
    public A2ARemoveDisksInput() {
    }

    /**
     * Get the instanceType property: The class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the vmDisksUris property: The list of vm disk vhd URIs.
     * 
     * @return the vmDisksUris value.
     */
    public List<String> vmDisksUris() {
        return this.vmDisksUris;
    }

    /**
     * Set the vmDisksUris property: The list of vm disk vhd URIs.
     * 
     * @param vmDisksUris the vmDisksUris value to set.
     * @return the A2ARemoveDisksInput object itself.
     */
    public A2ARemoveDisksInput withVmDisksUris(List<String> vmDisksUris) {
        this.vmDisksUris = vmDisksUris;
        return this;
    }

    /**
     * Get the vmManagedDisksIds property: The list of vm managed disk Ids.
     * 
     * @return the vmManagedDisksIds value.
     */
    public List<String> vmManagedDisksIds() {
        return this.vmManagedDisksIds;
    }

    /**
     * Set the vmManagedDisksIds property: The list of vm managed disk Ids.
     * 
     * @param vmManagedDisksIds the vmManagedDisksIds value to set.
     * @return the A2ARemoveDisksInput object itself.
     */
    public A2ARemoveDisksInput withVmManagedDisksIds(List<String> vmManagedDisksIds) {
        this.vmManagedDisksIds = vmManagedDisksIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeArrayField("vmDisksUris", this.vmDisksUris, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vmManagedDisksIds", this.vmManagedDisksIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2ARemoveDisksInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2ARemoveDisksInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the A2ARemoveDisksInput.
     */
    public static A2ARemoveDisksInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2ARemoveDisksInput deserializedA2ARemoveDisksInput = new A2ARemoveDisksInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedA2ARemoveDisksInput.instanceType = reader.getString();
                } else if ("vmDisksUris".equals(fieldName)) {
                    List<String> vmDisksUris = reader.readArray(reader1 -> reader1.getString());
                    deserializedA2ARemoveDisksInput.vmDisksUris = vmDisksUris;
                } else if ("vmManagedDisksIds".equals(fieldName)) {
                    List<String> vmManagedDisksIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedA2ARemoveDisksInput.vmManagedDisksIds = vmManagedDisksIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedA2ARemoveDisksInput;
        });
    }
}
