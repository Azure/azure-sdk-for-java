// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * class to define the health summary of the Vault.
 */
@Fluent
public final class VaultHealthProperties implements JsonSerializable<VaultHealthProperties> {
    /*
     * The list of errors on the vault.
     */
    private List<HealthError> vaultErrors;

    /*
     * The list of the health detail of the protected items in the vault.
     */
    private ResourceHealthSummary protectedItemsHealth;

    /*
     * The list of the health detail of the fabrics in the vault.
     */
    private ResourceHealthSummary fabricsHealth;

    /*
     * The list of the health detail of the containers in the vault.
     */
    private ResourceHealthSummary containersHealth;

    /**
     * Creates an instance of VaultHealthProperties class.
     */
    public VaultHealthProperties() {
    }

    /**
     * Get the vaultErrors property: The list of errors on the vault.
     * 
     * @return the vaultErrors value.
     */
    public List<HealthError> vaultErrors() {
        return this.vaultErrors;
    }

    /**
     * Set the vaultErrors property: The list of errors on the vault.
     * 
     * @param vaultErrors the vaultErrors value to set.
     * @return the VaultHealthProperties object itself.
     */
    public VaultHealthProperties withVaultErrors(List<HealthError> vaultErrors) {
        this.vaultErrors = vaultErrors;
        return this;
    }

    /**
     * Get the protectedItemsHealth property: The list of the health detail of the protected items in the vault.
     * 
     * @return the protectedItemsHealth value.
     */
    public ResourceHealthSummary protectedItemsHealth() {
        return this.protectedItemsHealth;
    }

    /**
     * Set the protectedItemsHealth property: The list of the health detail of the protected items in the vault.
     * 
     * @param protectedItemsHealth the protectedItemsHealth value to set.
     * @return the VaultHealthProperties object itself.
     */
    public VaultHealthProperties withProtectedItemsHealth(ResourceHealthSummary protectedItemsHealth) {
        this.protectedItemsHealth = protectedItemsHealth;
        return this;
    }

    /**
     * Get the fabricsHealth property: The list of the health detail of the fabrics in the vault.
     * 
     * @return the fabricsHealth value.
     */
    public ResourceHealthSummary fabricsHealth() {
        return this.fabricsHealth;
    }

    /**
     * Set the fabricsHealth property: The list of the health detail of the fabrics in the vault.
     * 
     * @param fabricsHealth the fabricsHealth value to set.
     * @return the VaultHealthProperties object itself.
     */
    public VaultHealthProperties withFabricsHealth(ResourceHealthSummary fabricsHealth) {
        this.fabricsHealth = fabricsHealth;
        return this;
    }

    /**
     * Get the containersHealth property: The list of the health detail of the containers in the vault.
     * 
     * @return the containersHealth value.
     */
    public ResourceHealthSummary containersHealth() {
        return this.containersHealth;
    }

    /**
     * Set the containersHealth property: The list of the health detail of the containers in the vault.
     * 
     * @param containersHealth the containersHealth value to set.
     * @return the VaultHealthProperties object itself.
     */
    public VaultHealthProperties withContainersHealth(ResourceHealthSummary containersHealth) {
        this.containersHealth = containersHealth;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vaultErrors() != null) {
            vaultErrors().forEach(e -> e.validate());
        }
        if (protectedItemsHealth() != null) {
            protectedItemsHealth().validate();
        }
        if (fabricsHealth() != null) {
            fabricsHealth().validate();
        }
        if (containersHealth() != null) {
            containersHealth().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vaultErrors", this.vaultErrors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("protectedItemsHealth", this.protectedItemsHealth);
        jsonWriter.writeJsonField("fabricsHealth", this.fabricsHealth);
        jsonWriter.writeJsonField("containersHealth", this.containersHealth);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultHealthProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultHealthProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VaultHealthProperties.
     */
    public static VaultHealthProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultHealthProperties deserializedVaultHealthProperties = new VaultHealthProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vaultErrors".equals(fieldName)) {
                    List<HealthError> vaultErrors = reader.readArray(reader1 -> HealthError.fromJson(reader1));
                    deserializedVaultHealthProperties.vaultErrors = vaultErrors;
                } else if ("protectedItemsHealth".equals(fieldName)) {
                    deserializedVaultHealthProperties.protectedItemsHealth = ResourceHealthSummary.fromJson(reader);
                } else if ("fabricsHealth".equals(fieldName)) {
                    deserializedVaultHealthProperties.fabricsHealth = ResourceHealthSummary.fromJson(reader);
                } else if ("containersHealth".equals(fieldName)) {
                    deserializedVaultHealthProperties.containersHealth = ResourceHealthSummary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultHealthProperties;
        });
    }
}
