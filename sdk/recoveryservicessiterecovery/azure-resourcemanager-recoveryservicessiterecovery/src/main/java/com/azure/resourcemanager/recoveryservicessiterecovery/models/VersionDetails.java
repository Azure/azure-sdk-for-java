// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Version related details.
 */
@Fluent
public final class VersionDetails implements JsonSerializable<VersionDetails> {
    /*
     * The agent version.
     */
    private String version;

    /*
     * Version expiry date.
     */
    private OffsetDateTime expiryDate;

    /*
     * A value indicating whether security update required.
     */
    private AgentVersionStatus status;

    /**
     * Creates an instance of VersionDetails class.
     */
    public VersionDetails() {
    }

    /**
     * Get the version property: The agent version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The agent version.
     * 
     * @param version the version value to set.
     * @return the VersionDetails object itself.
     */
    public VersionDetails withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the expiryDate property: Version expiry date.
     * 
     * @return the expiryDate value.
     */
    public OffsetDateTime expiryDate() {
        return this.expiryDate;
    }

    /**
     * Set the expiryDate property: Version expiry date.
     * 
     * @param expiryDate the expiryDate value to set.
     * @return the VersionDetails object itself.
     */
    public VersionDetails withExpiryDate(OffsetDateTime expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * Get the status property: A value indicating whether security update required.
     * 
     * @return the status value.
     */
    public AgentVersionStatus status() {
        return this.status;
    }

    /**
     * Set the status property: A value indicating whether security update required.
     * 
     * @param status the status value to set.
     * @return the VersionDetails object itself.
     */
    public VersionDetails withStatus(AgentVersionStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("expiryDate",
            this.expiryDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryDate));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VersionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VersionDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VersionDetails.
     */
    public static VersionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VersionDetails deserializedVersionDetails = new VersionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedVersionDetails.version = reader.getString();
                } else if ("expiryDate".equals(fieldName)) {
                    deserializedVersionDetails.expiryDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedVersionDetails.status = AgentVersionStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVersionDetails;
        });
    }
}
