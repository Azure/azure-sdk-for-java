// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Logical Network Properties.
 */
@Fluent
public final class LogicalNetworkProperties implements JsonSerializable<LogicalNetworkProperties> {
    /*
     * The Friendly Name.
     */
    private String friendlyName;

    /*
     * A value indicating whether Network Virtualization is enabled for the logical network.
     */
    private String networkVirtualizationStatus;

    /*
     * A value indicating whether logical network is used as private test network by test failover.
     */
    private String logicalNetworkUsage;

    /*
     * A value indicating whether logical network definitions are isolated.
     */
    private String logicalNetworkDefinitionsStatus;

    /**
     * Creates an instance of LogicalNetworkProperties class.
     */
    public LogicalNetworkProperties() {
    }

    /**
     * Get the friendlyName property: The Friendly Name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The Friendly Name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the networkVirtualizationStatus property: A value indicating whether Network Virtualization is enabled for
     * the logical network.
     * 
     * @return the networkVirtualizationStatus value.
     */
    public String networkVirtualizationStatus() {
        return this.networkVirtualizationStatus;
    }

    /**
     * Set the networkVirtualizationStatus property: A value indicating whether Network Virtualization is enabled for
     * the logical network.
     * 
     * @param networkVirtualizationStatus the networkVirtualizationStatus value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withNetworkVirtualizationStatus(String networkVirtualizationStatus) {
        this.networkVirtualizationStatus = networkVirtualizationStatus;
        return this;
    }

    /**
     * Get the logicalNetworkUsage property: A value indicating whether logical network is used as private test network
     * by test failover.
     * 
     * @return the logicalNetworkUsage value.
     */
    public String logicalNetworkUsage() {
        return this.logicalNetworkUsage;
    }

    /**
     * Set the logicalNetworkUsage property: A value indicating whether logical network is used as private test network
     * by test failover.
     * 
     * @param logicalNetworkUsage the logicalNetworkUsage value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withLogicalNetworkUsage(String logicalNetworkUsage) {
        this.logicalNetworkUsage = logicalNetworkUsage;
        return this;
    }

    /**
     * Get the logicalNetworkDefinitionsStatus property: A value indicating whether logical network definitions are
     * isolated.
     * 
     * @return the logicalNetworkDefinitionsStatus value.
     */
    public String logicalNetworkDefinitionsStatus() {
        return this.logicalNetworkDefinitionsStatus;
    }

    /**
     * Set the logicalNetworkDefinitionsStatus property: A value indicating whether logical network definitions are
     * isolated.
     * 
     * @param logicalNetworkDefinitionsStatus the logicalNetworkDefinitionsStatus value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withLogicalNetworkDefinitionsStatus(String logicalNetworkDefinitionsStatus) {
        this.logicalNetworkDefinitionsStatus = logicalNetworkDefinitionsStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("networkVirtualizationStatus", this.networkVirtualizationStatus);
        jsonWriter.writeStringField("logicalNetworkUsage", this.logicalNetworkUsage);
        jsonWriter.writeStringField("logicalNetworkDefinitionsStatus", this.logicalNetworkDefinitionsStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogicalNetworkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogicalNetworkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogicalNetworkProperties.
     */
    public static LogicalNetworkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogicalNetworkProperties deserializedLogicalNetworkProperties = new LogicalNetworkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.friendlyName = reader.getString();
                } else if ("networkVirtualizationStatus".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.networkVirtualizationStatus = reader.getString();
                } else if ("logicalNetworkUsage".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.logicalNetworkUsage = reader.getString();
                } else if ("logicalNetworkDefinitionsStatus".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.logicalNetworkDefinitionsStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogicalNetworkProperties;
        });
    }
}
