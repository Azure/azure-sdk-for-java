// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The datastore details of the MT.
 */
@Fluent
public final class DataStore implements JsonSerializable<DataStore> {
    /*
     * The symbolic name of data store.
     */
    private String symbolicName;

    /*
     * The uuid of data store.
     */
    private String uuid;

    /*
     * The capacity of data store in GBs.
     */
    private String capacity;

    /*
     * The free space of data store in GBs.
     */
    private String freeSpace;

    /*
     * The type of data store.
     */
    private String type;

    /**
     * Creates an instance of DataStore class.
     */
    public DataStore() {
    }

    /**
     * Get the symbolicName property: The symbolic name of data store.
     * 
     * @return the symbolicName value.
     */
    public String symbolicName() {
        return this.symbolicName;
    }

    /**
     * Set the symbolicName property: The symbolic name of data store.
     * 
     * @param symbolicName the symbolicName value to set.
     * @return the DataStore object itself.
     */
    public DataStore withSymbolicName(String symbolicName) {
        this.symbolicName = symbolicName;
        return this;
    }

    /**
     * Get the uuid property: The uuid of data store.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Set the uuid property: The uuid of data store.
     * 
     * @param uuid the uuid value to set.
     * @return the DataStore object itself.
     */
    public DataStore withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get the capacity property: The capacity of data store in GBs.
     * 
     * @return the capacity value.
     */
    public String capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: The capacity of data store in GBs.
     * 
     * @param capacity the capacity value to set.
     * @return the DataStore object itself.
     */
    public DataStore withCapacity(String capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the freeSpace property: The free space of data store in GBs.
     * 
     * @return the freeSpace value.
     */
    public String freeSpace() {
        return this.freeSpace;
    }

    /**
     * Set the freeSpace property: The free space of data store in GBs.
     * 
     * @param freeSpace the freeSpace value to set.
     * @return the DataStore object itself.
     */
    public DataStore withFreeSpace(String freeSpace) {
        this.freeSpace = freeSpace;
        return this;
    }

    /**
     * Get the type property: The type of data store.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of data store.
     * 
     * @param type the type value to set.
     * @return the DataStore object itself.
     */
    public DataStore withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("symbolicName", this.symbolicName);
        jsonWriter.writeStringField("uuid", this.uuid);
        jsonWriter.writeStringField("capacity", this.capacity);
        jsonWriter.writeStringField("freeSpace", this.freeSpace);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataStore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataStore if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DataStore.
     */
    public static DataStore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataStore deserializedDataStore = new DataStore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("symbolicName".equals(fieldName)) {
                    deserializedDataStore.symbolicName = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    deserializedDataStore.uuid = reader.getString();
                } else if ("capacity".equals(fieldName)) {
                    deserializedDataStore.capacity = reader.getString();
                } else if ("freeSpace".equals(fieldName)) {
                    deserializedDataStore.freeSpace = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDataStore.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataStore;
        });
    }
}
