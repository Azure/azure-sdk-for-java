// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This class represents the manual action task details.
 */
@Fluent
public final class ManualActionTaskDetails extends TaskTypeDetails {
    /*
     * The type of task details.
     */
    private String instanceType = "ManualActionTaskDetails";

    /*
     * The name.
     */
    private String name;

    /*
     * The instructions.
     */
    private String instructions;

    /*
     * The observation.
     */
    private String observation;

    /**
     * Creates an instance of ManualActionTaskDetails class.
     */
    public ManualActionTaskDetails() {
    }

    /**
     * Get the instanceType property: The type of task details.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the name property: The name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name.
     * 
     * @param name the name value to set.
     * @return the ManualActionTaskDetails object itself.
     */
    public ManualActionTaskDetails withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the instructions property: The instructions.
     * 
     * @return the instructions value.
     */
    public String instructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: The instructions.
     * 
     * @param instructions the instructions value to set.
     * @return the ManualActionTaskDetails object itself.
     */
    public ManualActionTaskDetails withInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the observation property: The observation.
     * 
     * @return the observation value.
     */
    public String observation() {
        return this.observation;
    }

    /**
     * Set the observation property: The observation.
     * 
     * @param observation the observation value to set.
     * @return the ManualActionTaskDetails object itself.
     */
    public ManualActionTaskDetails withObservation(String observation) {
        this.observation = observation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeStringField("observation", this.observation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManualActionTaskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManualActionTaskDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManualActionTaskDetails.
     */
    public static ManualActionTaskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManualActionTaskDetails deserializedManualActionTaskDetails = new ManualActionTaskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedManualActionTaskDetails.instanceType = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedManualActionTaskDetails.name = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    deserializedManualActionTaskDetails.instructions = reader.getString();
                } else if ("observation".equals(fieldName)) {
                    deserializedManualActionTaskDetails.observation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManualActionTaskDetails;
        });
    }
}
