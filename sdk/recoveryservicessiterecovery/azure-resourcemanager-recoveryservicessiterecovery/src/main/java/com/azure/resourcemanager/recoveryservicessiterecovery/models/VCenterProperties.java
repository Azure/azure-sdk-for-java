// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * vCenter properties.
 */
@Fluent
public final class VCenterProperties implements JsonSerializable<VCenterProperties> {
    /*
     * Friendly name of the vCenter.
     */
    private String friendlyName;

    /*
     * VCenter internal ID.
     */
    private String internalId;

    /*
     * The time when the last heartbeat was received by vCenter.
     */
    private OffsetDateTime lastHeartbeat;

    /*
     * The VCenter discovery status.
     */
    private String discoveryStatus;

    /*
     * The process server Id.
     */
    private String processServerId;

    /*
     * The IP address of the vCenter.
     */
    private String ipAddress;

    /*
     * The infrastructure Id of vCenter.
     */
    private String infrastructureId;

    /*
     * The port number for discovery.
     */
    private String port;

    /*
     * The account Id which has privileges to discover the vCenter.
     */
    private String runAsAccountId;

    /*
     * The ARM resource name of the fabric containing this VCenter.
     */
    private String fabricArmResourceName;

    /*
     * The health errors for this VCenter.
     */
    private List<HealthError> healthErrors;

    /**
     * Creates an instance of VCenterProperties class.
     */
    public VCenterProperties() {
    }

    /**
     * Get the friendlyName property: Friendly name of the vCenter.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of the vCenter.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the internalId property: VCenter internal ID.
     * 
     * @return the internalId value.
     */
    public String internalId() {
        return this.internalId;
    }

    /**
     * Set the internalId property: VCenter internal ID.
     * 
     * @param internalId the internalId value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withInternalId(String internalId) {
        this.internalId = internalId;
        return this;
    }

    /**
     * Get the lastHeartbeat property: The time when the last heartbeat was received by vCenter.
     * 
     * @return the lastHeartbeat value.
     */
    public OffsetDateTime lastHeartbeat() {
        return this.lastHeartbeat;
    }

    /**
     * Set the lastHeartbeat property: The time when the last heartbeat was received by vCenter.
     * 
     * @param lastHeartbeat the lastHeartbeat value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withLastHeartbeat(OffsetDateTime lastHeartbeat) {
        this.lastHeartbeat = lastHeartbeat;
        return this;
    }

    /**
     * Get the discoveryStatus property: The VCenter discovery status.
     * 
     * @return the discoveryStatus value.
     */
    public String discoveryStatus() {
        return this.discoveryStatus;
    }

    /**
     * Set the discoveryStatus property: The VCenter discovery status.
     * 
     * @param discoveryStatus the discoveryStatus value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withDiscoveryStatus(String discoveryStatus) {
        this.discoveryStatus = discoveryStatus;
        return this;
    }

    /**
     * Get the processServerId property: The process server Id.
     * 
     * @return the processServerId value.
     */
    public String processServerId() {
        return this.processServerId;
    }

    /**
     * Set the processServerId property: The process server Id.
     * 
     * @param processServerId the processServerId value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withProcessServerId(String processServerId) {
        this.processServerId = processServerId;
        return this;
    }

    /**
     * Get the ipAddress property: The IP address of the vCenter.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: The IP address of the vCenter.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the infrastructureId property: The infrastructure Id of vCenter.
     * 
     * @return the infrastructureId value.
     */
    public String infrastructureId() {
        return this.infrastructureId;
    }

    /**
     * Set the infrastructureId property: The infrastructure Id of vCenter.
     * 
     * @param infrastructureId the infrastructureId value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withInfrastructureId(String infrastructureId) {
        this.infrastructureId = infrastructureId;
        return this;
    }

    /**
     * Get the port property: The port number for discovery.
     * 
     * @return the port value.
     */
    public String port() {
        return this.port;
    }

    /**
     * Set the port property: The port number for discovery.
     * 
     * @param port the port value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withPort(String port) {
        this.port = port;
        return this;
    }

    /**
     * Get the runAsAccountId property: The account Id which has privileges to discover the vCenter.
     * 
     * @return the runAsAccountId value.
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }

    /**
     * Set the runAsAccountId property: The account Id which has privileges to discover the vCenter.
     * 
     * @param runAsAccountId the runAsAccountId value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withRunAsAccountId(String runAsAccountId) {
        this.runAsAccountId = runAsAccountId;
        return this;
    }

    /**
     * Get the fabricArmResourceName property: The ARM resource name of the fabric containing this VCenter.
     * 
     * @return the fabricArmResourceName value.
     */
    public String fabricArmResourceName() {
        return this.fabricArmResourceName;
    }

    /**
     * Set the fabricArmResourceName property: The ARM resource name of the fabric containing this VCenter.
     * 
     * @param fabricArmResourceName the fabricArmResourceName value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withFabricArmResourceName(String fabricArmResourceName) {
        this.fabricArmResourceName = fabricArmResourceName;
        return this;
    }

    /**
     * Get the healthErrors property: The health errors for this VCenter.
     * 
     * @return the healthErrors value.
     */
    public List<HealthError> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Set the healthErrors property: The health errors for this VCenter.
     * 
     * @param healthErrors the healthErrors value to set.
     * @return the VCenterProperties object itself.
     */
    public VCenterProperties withHealthErrors(List<HealthError> healthErrors) {
        this.healthErrors = healthErrors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("internalId", this.internalId);
        jsonWriter.writeStringField("lastHeartbeat",
            this.lastHeartbeat == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastHeartbeat));
        jsonWriter.writeStringField("discoveryStatus", this.discoveryStatus);
        jsonWriter.writeStringField("processServerId", this.processServerId);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("infrastructureId", this.infrastructureId);
        jsonWriter.writeStringField("port", this.port);
        jsonWriter.writeStringField("runAsAccountId", this.runAsAccountId);
        jsonWriter.writeStringField("fabricArmResourceName", this.fabricArmResourceName);
        jsonWriter.writeArrayField("healthErrors", this.healthErrors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VCenterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VCenterProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VCenterProperties.
     */
    public static VCenterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VCenterProperties deserializedVCenterProperties = new VCenterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedVCenterProperties.friendlyName = reader.getString();
                } else if ("internalId".equals(fieldName)) {
                    deserializedVCenterProperties.internalId = reader.getString();
                } else if ("lastHeartbeat".equals(fieldName)) {
                    deserializedVCenterProperties.lastHeartbeat = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("discoveryStatus".equals(fieldName)) {
                    deserializedVCenterProperties.discoveryStatus = reader.getString();
                } else if ("processServerId".equals(fieldName)) {
                    deserializedVCenterProperties.processServerId = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedVCenterProperties.ipAddress = reader.getString();
                } else if ("infrastructureId".equals(fieldName)) {
                    deserializedVCenterProperties.infrastructureId = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedVCenterProperties.port = reader.getString();
                } else if ("runAsAccountId".equals(fieldName)) {
                    deserializedVCenterProperties.runAsAccountId = reader.getString();
                } else if ("fabricArmResourceName".equals(fieldName)) {
                    deserializedVCenterProperties.fabricArmResourceName = reader.getString();
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthError> healthErrors = reader.readArray(reader1 -> HealthError.fromJson(reader1));
                    deserializedVCenterProperties.healthErrors = healthErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVCenterProperties;
        });
    }
}
