// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationMigrationItemsClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.MigrationItemInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.EnableMigrationInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.MigrateInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.MigrationItemCollection;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PauseReplicationInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResumeReplicationInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResyncInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestMigrateCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestMigrateInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateMigrationItemInput;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ReplicationMigrationItemsClient.
 */
public final class ReplicationMigrationItemsClientImpl implements ReplicationMigrationItemsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ReplicationMigrationItemsService service;

    /**
     * The service client containing this operation class.
     */
    private final SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationMigrationItemsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ReplicationMigrationItemsClientImpl(SiteRecoveryManagementClientImpl client) {
        this.service = RestProxy.create(ReplicationMigrationItemsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SiteRecoveryManagementClientReplicationMigrationItems to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SiteRecoveryManageme")
    public interface ReplicationMigrationItemsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MigrationItemCollection>> listByReplicationProtectionContainers(
            @HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceName") String resourceName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @QueryParam("skipToken") String skipToken, @QueryParam("takeToken") String takeToken,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MigrationItemInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName,
            @BodyParam("application/json") EnableMigrationInput input, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName, @QueryParam("deleteOption") String deleteOption,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName,
            @BodyParam("application/json") UpdateMigrationItemInput input, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> migrate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName,
            @BodyParam("application/json") MigrateInput migrateInput, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/pauseReplication")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> pauseReplication(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName,
            @BodyParam("application/json") PauseReplicationInput pauseReplicationInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resumeReplication")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> resumeReplication(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName,
            @BodyParam("application/json") ResumeReplicationInput resumeReplicationInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resync")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> resync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName, @BodyParam("application/json") ResyncInput input,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> testMigrate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName,
            @BodyParam("application/json") TestMigrateInput testMigrateInput, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> testMigrateCleanup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("migrationItemName") String migrationItemName,
            @BodyParam("application/json") TestMigrateCleanupInput testMigrateCleanupInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MigrationItemCollection>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("skipToken") String skipToken, @QueryParam("takeToken") String takeToken,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MigrationItemCollection>> listByReplicationProtectionContainersNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MigrationItemCollection>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the list of migration items in the protection container.
     * 
     * Gets the list of ASR migration items in the protection container.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR migration items in the protection container along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>> listByReplicationProtectionContainersSinglePageAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String skipToken, String takeToken, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByReplicationProtectionContainers(this.client.getEndpoint(),
                this.client.getApiVersion(), resourceGroupName, resourceName, this.client.getSubscriptionId(),
                fabricName, protectionContainerName, skipToken, takeToken, filter, accept, context))
            .<PagedResponse<MigrationItemInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the list of migration items in the protection container.
     * 
     * Gets the list of ASR migration items in the protection container.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR migration items in the protection container along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>> listByReplicationProtectionContainersSinglePageAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String skipToken, String takeToken, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByReplicationProtectionContainers(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                skipToken, takeToken, filter, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets the list of migration items in the protection container.
     * 
     * Gets the list of ASR migration items in the protection container.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR migration items in the protection container as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MigrationItemInner> listByReplicationProtectionContainersAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String skipToken, String takeToken,
        String filter) {
        return new PagedFlux<>(
            () -> listByReplicationProtectionContainersSinglePageAsync(resourceGroupName, resourceName, fabricName,
                protectionContainerName, skipToken, takeToken, filter),
            nextLink -> listByReplicationProtectionContainersNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of migration items in the protection container.
     * 
     * Gets the list of ASR migration items in the protection container.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR migration items in the protection container as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MigrationItemInner> listByReplicationProtectionContainersAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName) {
        final String skipToken = null;
        final String takeToken = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listByReplicationProtectionContainersSinglePageAsync(resourceGroupName, resourceName, fabricName,
                protectionContainerName, skipToken, takeToken, filter),
            nextLink -> listByReplicationProtectionContainersNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of migration items in the protection container.
     * 
     * Gets the list of ASR migration items in the protection container.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR migration items in the protection container as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MigrationItemInner> listByReplicationProtectionContainersAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String skipToken, String takeToken,
        String filter, Context context) {
        return new PagedFlux<>(
            () -> listByReplicationProtectionContainersSinglePageAsync(resourceGroupName, resourceName, fabricName,
                protectionContainerName, skipToken, takeToken, filter, context),
            nextLink -> listByReplicationProtectionContainersNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the list of migration items in the protection container.
     * 
     * Gets the list of ASR migration items in the protection container.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR migration items in the protection container as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MigrationItemInner> listByReplicationProtectionContainers(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName) {
        final String skipToken = null;
        final String takeToken = null;
        final String filter = null;
        return new PagedIterable<>(listByReplicationProtectionContainersAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, skipToken, takeToken, filter));
    }

    /**
     * Gets the list of migration items in the protection container.
     * 
     * Gets the list of ASR migration items in the protection container.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR migration items in the protection container as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MigrationItemInner> listByReplicationProtectionContainers(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String skipToken, String takeToken,
        String filter, Context context) {
        return new PagedIterable<>(listByReplicationProtectionContainersAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, skipToken, takeToken, filter, context));
    }

    /**
     * Gets the details of a migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MigrationItemInner>> getWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the details of a migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MigrationItemInner>> getWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName, resourceName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName, accept, context);
    }

    /**
     * Gets the details of a migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> getAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName) {
        return getWithResponseAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the details of a migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a migration item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MigrationItemInner> getWithResponse(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, Context context) {
        return getWithResponseAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, context).block();
    }

    /**
     * Gets the details of a migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner get(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName) {
        return getWithResponse(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            Context.NONE).getValue();
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, input, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName, resourceName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName, input, accept,
            context);
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginCreateAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        EnableMigrationInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, input);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginCreateAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        EnableMigrationInput input, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, input, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginCreate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        EnableMigrationInput input) {
        return this
            .beginCreateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                input)
            .getSyncPoller();
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginCreate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        EnableMigrationInput input, Context context) {
        return this
            .beginCreateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                input, context)
            .getSyncPoller();
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> createAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, EnableMigrationInput input) {
        return beginCreateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> createAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, EnableMigrationInput input, Context context) {
        return beginCreateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner create(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, EnableMigrationInput input) {
        return createAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input).block();
    }

    /**
     * Enables migration.
     * 
     * The operation to create an ASR migration item (enable migration).
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner create(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, EnableMigrationInput input, Context context) {
        return createAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input, context).block();
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, deleteOption, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, String deleteOption,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName, resourceName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName, deleteOption,
            context);
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, deleteOption);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName) {
        final String deleteOption = null;
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, deleteOption);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, String deleteOption,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, deleteOption, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName) {
        final String deleteOption = null;
        return this
            .beginDeleteAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                deleteOption)
            .getSyncPoller();
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, String deleteOption,
        Context context) {
        return this
            .beginDeleteAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                deleteOption, context)
            .getSyncPoller();
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, String deleteOption) {
        return beginDeleteAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            deleteOption).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName) {
        final String deleteOption = null;
        return beginDeleteAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            deleteOption).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, String deleteOption, Context context) {
        return beginDeleteAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            deleteOption, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName) {
        final String deleteOption = null;
        deleteAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            deleteOption).block();
    }

    /**
     * Delete the migration item.
     * 
     * The operation to delete an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, String deleteOption, Context context) {
        deleteAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            deleteOption, context).block();
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, input, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName, resourceName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName, input, accept,
            context);
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginUpdateAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        UpdateMigrationItemInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, input);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginUpdateAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        UpdateMigrationItemInput input, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, input, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginUpdate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        UpdateMigrationItemInput input) {
        return this
            .beginUpdateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                input)
            .getSyncPoller();
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginUpdate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        UpdateMigrationItemInput input, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                input, context)
            .getSyncPoller();
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> updateAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input) {
        return beginUpdateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> updateAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input, Context context) {
        return beginUpdateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner update(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input) {
        return updateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input).block();
    }

    /**
     * Updates migration item.
     * 
     * The operation to update the recovery settings of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner update(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input, Context context) {
        return updateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input, context).block();
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> migrateWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, MigrateInput migrateInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (migrateInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter migrateInput is required and cannot be null."));
        } else {
            migrateInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.migrate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, migrateInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> migrateWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, MigrateInput migrateInput,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (migrateInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter migrateInput is required and cannot be null."));
        } else {
            migrateInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.migrate(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName, resourceName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName, migrateInput,
            accept, context);
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginMigrateAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        MigrateInput migrateInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = migrateWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, migrateInput);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginMigrateAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        MigrateInput migrateInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = migrateWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, migrateInput, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginMigrate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        MigrateInput migrateInput) {
        return this
            .beginMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                migrateInput)
            .getSyncPoller();
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginMigrate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        MigrateInput migrateInput, Context context) {
        return this
            .beginMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                migrateInput, context)
            .getSyncPoller();
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> migrateAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, MigrateInput migrateInput) {
        return beginMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, migrateInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> migrateAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, MigrateInput migrateInput, Context context) {
        return beginMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, migrateInput, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner migrate(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, MigrateInput migrateInput) {
        return migrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            migrateInput).block();
    }

    /**
     * Migrate item.
     * 
     * The operation to initiate migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner migrate(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, MigrateInput migrateInput, Context context) {
        return migrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            migrateInput, context).block();
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> pauseReplicationWithResponseAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        PauseReplicationInput pauseReplicationInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (pauseReplicationInput == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter pauseReplicationInput is required and cannot be null."));
        } else {
            pauseReplicationInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.pauseReplication(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, pauseReplicationInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> pauseReplicationWithResponseAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        PauseReplicationInput pauseReplicationInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (pauseReplicationInput == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter pauseReplicationInput is required and cannot be null."));
        } else {
            pauseReplicationInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.pauseReplication(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName,
            resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName,
            pauseReplicationInput, accept, context);
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginPauseReplicationAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, PauseReplicationInput pauseReplicationInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = pauseReplicationWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, pauseReplicationInput);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginPauseReplicationAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, PauseReplicationInput pauseReplicationInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = pauseReplicationWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, pauseReplicationInput, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginPauseReplication(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, PauseReplicationInput pauseReplicationInput) {
        return this
            .beginPauseReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, pauseReplicationInput)
            .getSyncPoller();
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginPauseReplication(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, PauseReplicationInput pauseReplicationInput, Context context) {
        return this
            .beginPauseReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, pauseReplicationInput, context)
            .getSyncPoller();
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> pauseReplicationAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName,
        PauseReplicationInput pauseReplicationInput) {
        return beginPauseReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, pauseReplicationInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> pauseReplicationAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName,
        PauseReplicationInput pauseReplicationInput, Context context) {
        return beginPauseReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, pauseReplicationInput, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner pauseReplication(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, PauseReplicationInput pauseReplicationInput) {
        return pauseReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, pauseReplicationInput).block();
    }

    /**
     * Pause replication.
     * 
     * The operation to initiate pause replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner pauseReplication(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, PauseReplicationInput pauseReplicationInput,
        Context context) {
        return pauseReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, pauseReplicationInput, context).block();
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resumeReplicationWithResponseAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        ResumeReplicationInput resumeReplicationInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (resumeReplicationInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter resumeReplicationInput is required and cannot be null."));
        } else {
            resumeReplicationInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.resumeReplication(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, resumeReplicationInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resumeReplicationWithResponseAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        ResumeReplicationInput resumeReplicationInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (resumeReplicationInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter resumeReplicationInput is required and cannot be null."));
        } else {
            resumeReplicationInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.resumeReplication(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName,
            resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName,
            resumeReplicationInput, accept, context);
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginResumeReplicationAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, ResumeReplicationInput resumeReplicationInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = resumeReplicationWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, resumeReplicationInput);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginResumeReplicationAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, ResumeReplicationInput resumeReplicationInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = resumeReplicationWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, resumeReplicationInput, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginResumeReplication(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, ResumeReplicationInput resumeReplicationInput) {
        return this
            .beginResumeReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, resumeReplicationInput)
            .getSyncPoller();
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginResumeReplication(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, ResumeReplicationInput resumeReplicationInput, Context context) {
        return this
            .beginResumeReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, resumeReplicationInput, context)
            .getSyncPoller();
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> resumeReplicationAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName,
        ResumeReplicationInput resumeReplicationInput) {
        return beginResumeReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, resumeReplicationInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> resumeReplicationAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName,
        ResumeReplicationInput resumeReplicationInput, Context context) {
        return beginResumeReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, resumeReplicationInput, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner resumeReplication(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, ResumeReplicationInput resumeReplicationInput) {
        return resumeReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, resumeReplicationInput).block();
    }

    /**
     * Resume replication.
     * 
     * The operation to initiate resume replication of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner resumeReplication(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, ResumeReplicationInput resumeReplicationInput,
        Context context) {
        return resumeReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, resumeReplicationInput, context).block();
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resyncWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, ResyncInput input) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.resync(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, input, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resyncWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, ResyncInput input,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.resync(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName, resourceName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName, input, accept,
            context);
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginResyncAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        ResyncInput input) {
        Mono<Response<Flux<ByteBuffer>>> mono = resyncWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, input);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginResyncAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        ResyncInput input, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = resyncWithResponseAsync(resourceGroupName, resourceName, fabricName,
            protectionContainerName, migrationItemName, input, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginResync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        ResyncInput input) {
        return this
            .beginResyncAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                input)
            .getSyncPoller();
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginResync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        ResyncInput input, Context context) {
        return this
            .beginResyncAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
                input, context)
            .getSyncPoller();
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> resyncAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, ResyncInput input) {
        return beginResyncAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> resyncAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, ResyncInput input, Context context) {
        return beginResyncAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner resync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, ResyncInput input) {
        return resyncAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input).block();
    }

    /**
     * Resynchronizes replication.
     * 
     * The operation to resynchronize replication of an ASR migration item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner resync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, ResyncInput input, Context context) {
        return resyncAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            input, context).block();
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testMigrateWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName,
        TestMigrateInput testMigrateInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (testMigrateInput == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testMigrateInput is required and cannot be null."));
        } else {
            testMigrateInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.testMigrate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, testMigrateInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testMigrateWithResponseAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (testMigrateInput == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter testMigrateInput is required and cannot be null."));
        } else {
            testMigrateInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.testMigrate(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName,
            resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName,
            testMigrateInput, accept, context);
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrateAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, TestMigrateInput testMigrateInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = testMigrateWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, testMigrateInput);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrateAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, TestMigrateInput testMigrateInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = testMigrateWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, testMigrateInput, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        TestMigrateInput testMigrateInput) {
        return this
            .beginTestMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, testMigrateInput)
            .getSyncPoller();
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrate(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        TestMigrateInput testMigrateInput, Context context) {
        return this
            .beginTestMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, testMigrateInput, context)
            .getSyncPoller();
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> testMigrateAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput) {
        return beginTestMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, testMigrateInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> testMigrateAsync(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput, Context context) {
        return beginTestMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, testMigrateInput, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner testMigrate(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput) {
        return testMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            testMigrateInput).block();
    }

    /**
     * Test migrate item.
     * 
     * The operation to initiate test migration of the item.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner testMigrate(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput, Context context) {
        return testMigrateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, migrationItemName,
            testMigrateInput, context).block();
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testMigrateCleanupWithResponseAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        TestMigrateCleanupInput testMigrateCleanupInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (testMigrateCleanupInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter testMigrateCleanupInput is required and cannot be null."));
        } else {
            testMigrateCleanupInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.testMigrateCleanup(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceGroupName, resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                migrationItemName, testMigrateCleanupInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testMigrateCleanupWithResponseAsync(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName, String migrationItemName,
        TestMigrateCleanupInput testMigrateCleanupInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (migrationItemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter migrationItemName is required and cannot be null."));
        }
        if (testMigrateCleanupInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter testMigrateCleanupInput is required and cannot be null."));
        } else {
            testMigrateCleanupInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.testMigrateCleanup(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName,
            resourceName, this.client.getSubscriptionId(), fabricName, protectionContainerName, migrationItemName,
            testMigrateCleanupInput, accept, context);
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrateCleanupAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = testMigrateCleanupWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, this.client.getContext());
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrateCleanupAsync(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = testMigrateCleanupWithResponseAsync(resourceGroupName, resourceName,
            fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, context);
        return this.client.<MigrationItemInner, MigrationItemInner>getLroResult(mono, this.client.getHttpPipeline(),
            MigrationItemInner.class, MigrationItemInner.class, context);
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrateCleanup(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput) {
        return this
            .beginTestMigrateCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, testMigrateCleanupInput)
            .getSyncPoller();
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of migration item.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MigrationItemInner>, MigrationItemInner> beginTestMigrateCleanup(
        String resourceGroupName, String resourceName, String fabricName, String protectionContainerName,
        String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput, Context context) {
        return this
            .beginTestMigrateCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
                migrationItemName, testMigrateCleanupInput, context)
            .getSyncPoller();
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> testMigrateCleanupAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName,
        TestMigrateCleanupInput testMigrateCleanupInput) {
        return beginTestMigrateCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, testMigrateCleanupInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MigrationItemInner> testMigrateCleanupAsync(String resourceGroupName, String resourceName,
        String fabricName, String protectionContainerName, String migrationItemName,
        TestMigrateCleanupInput testMigrateCleanupInput, Context context) {
        return beginTestMigrateCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, testMigrateCleanupInput, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner testMigrateCleanup(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput) {
        return testMigrateCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, testMigrateCleanupInput).block();
    }

    /**
     * Test migrate cleanup.
     * 
     * The operation to initiate test migrate cleanup.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrationItemInner testMigrateCleanup(String resourceGroupName, String resourceName, String fabricName,
        String protectionContainerName, String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput,
        Context context) {
        return testMigrateCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName,
            migrationItemName, testMigrateCleanupInput, context).block();
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of migration items in the vault along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>> listSinglePageAsync(String resourceGroupName, String resourceName,
        String skipToken, String takeToken, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName,
                    resourceName, this.client.getSubscriptionId(), skipToken, takeToken, filter, accept, context))
            .<PagedResponse<MigrationItemInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of migration items in the vault along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>> listSinglePageAsync(String resourceGroupName, String resourceName,
        String skipToken, String takeToken, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), resourceGroupName, resourceName,
                this.client.getSubscriptionId(), skipToken, takeToken, filter, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of migration items in the vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MigrationItemInner> listAsync(String resourceGroupName, String resourceName, String skipToken,
        String takeToken, String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, resourceName, skipToken, takeToken, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of migration items in the vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MigrationItemInner> listAsync(String resourceGroupName, String resourceName) {
        final String skipToken = null;
        final String takeToken = null;
        final String filter = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, resourceName, skipToken, takeToken, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of migration items in the vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MigrationItemInner> listAsync(String resourceGroupName, String resourceName, String skipToken,
        String takeToken, String filter, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, resourceName, skipToken, takeToken, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of migration items in the vault as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MigrationItemInner> list(String resourceGroupName, String resourceName) {
        final String skipToken = null;
        final String takeToken = null;
        final String filter = null;
        return new PagedIterable<>(listAsync(resourceGroupName, resourceName, skipToken, takeToken, filter));
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param resourceName The name of the recovery services vault.
     * @param skipToken The pagination token.
     * @param takeToken The page size.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of migration items in the vault as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MigrationItemInner> list(String resourceGroupName, String resourceName, String skipToken,
        String takeToken, String filter, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, resourceName, skipToken, takeToken, filter, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item collection along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>>
        listByReplicationProtectionContainersNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByReplicationProtectionContainersNext(nextLink,
                this.client.getEndpoint(), accept, context))
            .<PagedResponse<MigrationItemInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item collection along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>>
        listByReplicationProtectionContainersNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByReplicationProtectionContainersNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item collection along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MigrationItemInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return migration item collection along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MigrationItemInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
