// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * InMageRcm protected disk details.
 */
@Fluent
public final class InMageRcmProtectedDiskDetails implements JsonSerializable<InMageRcmProtectedDiskDetails> {
    /*
     * The disk Id.
     */
    private String diskId;

    /*
     * The disk name.
     */
    private String diskName;

    /*
     * A value indicating whether the disk is the OS disk.
     */
    private String isOSDisk;

    /*
     * The disk capacity in bytes.
     */
    private Long capacityInBytes;

    /*
     * The log storage account ARM Id.
     */
    private String logStorageAccountId;

    /*
     * The DiskEncryptionSet ARM Id.
     */
    private String diskEncryptionSetId;

    /*
     * The ARM Id of the seed managed disk.
     */
    private String seedManagedDiskId;

    /*
     * The uri of the seed blob.
     */
    private String seedBlobUri;

    /*
     * The ARM Id of the target managed disk.
     */
    private String targetManagedDiskId;

    /*
     * The disk type.
     */
    private DiskAccountType diskType;

    /*
     * The data pending in log data store in MB.
     */
    private Double dataPendingInLogDataStoreInMB;

    /*
     * The data pending at source agent in MB.
     */
    private Double dataPendingAtSourceAgentInMB;

    /*
     * A value indicating whether initial replication is complete or not.
     */
    private String isInitialReplicationComplete;

    /*
     * The initial replication details.
     */
    private InMageRcmSyncDetails irDetails;

    /*
     * The resync details.
     */
    private InMageRcmSyncDetails resyncDetails;

    /**
     * Creates an instance of InMageRcmProtectedDiskDetails class.
     */
    public InMageRcmProtectedDiskDetails() {
    }

    /**
     * Get the diskId property: The disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Get the diskName property: The disk name.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Get the isOSDisk property: A value indicating whether the disk is the OS disk.
     * 
     * @return the isOSDisk value.
     */
    public String isOSDisk() {
        return this.isOSDisk;
    }

    /**
     * Get the capacityInBytes property: The disk capacity in bytes.
     * 
     * @return the capacityInBytes value.
     */
    public Long capacityInBytes() {
        return this.capacityInBytes;
    }

    /**
     * Get the logStorageAccountId property: The log storage account ARM Id.
     * 
     * @return the logStorageAccountId value.
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * Get the diskEncryptionSetId property: The DiskEncryptionSet ARM Id.
     * 
     * @return the diskEncryptionSetId value.
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * Get the seedManagedDiskId property: The ARM Id of the seed managed disk.
     * 
     * @return the seedManagedDiskId value.
     */
    public String seedManagedDiskId() {
        return this.seedManagedDiskId;
    }

    /**
     * Get the seedBlobUri property: The uri of the seed blob.
     * 
     * @return the seedBlobUri value.
     */
    public String seedBlobUri() {
        return this.seedBlobUri;
    }

    /**
     * Get the targetManagedDiskId property: The ARM Id of the target managed disk.
     * 
     * @return the targetManagedDiskId value.
     */
    public String targetManagedDiskId() {
        return this.targetManagedDiskId;
    }

    /**
     * Get the diskType property: The disk type.
     * 
     * @return the diskType value.
     */
    public DiskAccountType diskType() {
        return this.diskType;
    }

    /**
     * Set the diskType property: The disk type.
     * 
     * @param diskType the diskType value to set.
     * @return the InMageRcmProtectedDiskDetails object itself.
     */
    public InMageRcmProtectedDiskDetails withDiskType(DiskAccountType diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Get the dataPendingInLogDataStoreInMB property: The data pending in log data store in MB.
     * 
     * @return the dataPendingInLogDataStoreInMB value.
     */
    public Double dataPendingInLogDataStoreInMB() {
        return this.dataPendingInLogDataStoreInMB;
    }

    /**
     * Get the dataPendingAtSourceAgentInMB property: The data pending at source agent in MB.
     * 
     * @return the dataPendingAtSourceAgentInMB value.
     */
    public Double dataPendingAtSourceAgentInMB() {
        return this.dataPendingAtSourceAgentInMB;
    }

    /**
     * Get the isInitialReplicationComplete property: A value indicating whether initial replication is complete or not.
     * 
     * @return the isInitialReplicationComplete value.
     */
    public String isInitialReplicationComplete() {
        return this.isInitialReplicationComplete;
    }

    /**
     * Get the irDetails property: The initial replication details.
     * 
     * @return the irDetails value.
     */
    public InMageRcmSyncDetails irDetails() {
        return this.irDetails;
    }

    /**
     * Set the irDetails property: The initial replication details.
     * 
     * @param irDetails the irDetails value to set.
     * @return the InMageRcmProtectedDiskDetails object itself.
     */
    public InMageRcmProtectedDiskDetails withIrDetails(InMageRcmSyncDetails irDetails) {
        this.irDetails = irDetails;
        return this;
    }

    /**
     * Get the resyncDetails property: The resync details.
     * 
     * @return the resyncDetails value.
     */
    public InMageRcmSyncDetails resyncDetails() {
        return this.resyncDetails;
    }

    /**
     * Set the resyncDetails property: The resync details.
     * 
     * @param resyncDetails the resyncDetails value to set.
     * @return the InMageRcmProtectedDiskDetails object itself.
     */
    public InMageRcmProtectedDiskDetails withResyncDetails(InMageRcmSyncDetails resyncDetails) {
        this.resyncDetails = resyncDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (irDetails() != null) {
            irDetails().validate();
        }
        if (resyncDetails() != null) {
            resyncDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskType", this.diskType == null ? null : this.diskType.toString());
        jsonWriter.writeJsonField("irDetails", this.irDetails);
        jsonWriter.writeJsonField("resyncDetails", this.resyncDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmProtectedDiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmProtectedDiskDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageRcmProtectedDiskDetails.
     */
    public static InMageRcmProtectedDiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmProtectedDiskDetails deserializedInMageRcmProtectedDiskDetails
                = new InMageRcmProtectedDiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.diskId = reader.getString();
                } else if ("diskName".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.diskName = reader.getString();
                } else if ("isOSDisk".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.isOSDisk = reader.getString();
                } else if ("capacityInBytes".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.capacityInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("logStorageAccountId".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.logStorageAccountId = reader.getString();
                } else if ("diskEncryptionSetId".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.diskEncryptionSetId = reader.getString();
                } else if ("seedManagedDiskId".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.seedManagedDiskId = reader.getString();
                } else if ("seedBlobUri".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.seedBlobUri = reader.getString();
                } else if ("targetManagedDiskId".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.targetManagedDiskId = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.diskType = DiskAccountType.fromString(reader.getString());
                } else if ("dataPendingInLogDataStoreInMB".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.dataPendingInLogDataStoreInMB
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("dataPendingAtSourceAgentInMB".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.dataPendingAtSourceAgentInMB
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("isInitialReplicationComplete".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.isInitialReplicationComplete = reader.getString();
                } else if ("irDetails".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.irDetails = InMageRcmSyncDetails.fromJson(reader);
                } else if ("resyncDetails".equals(fieldName)) {
                    deserializedInMageRcmProtectedDiskDetails.resyncDetails = InMageRcmSyncDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmProtectedDiskDetails;
        });
    }
}
