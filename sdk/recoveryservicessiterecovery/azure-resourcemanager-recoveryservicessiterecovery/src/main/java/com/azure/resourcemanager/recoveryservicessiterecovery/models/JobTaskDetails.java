// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This class represents a task which is actually a workflow so that one can navigate to its individual drill down.
 */
@Fluent
public class JobTaskDetails extends TaskTypeDetails {
    /*
     * The type of task details.
     */
    private String instanceType = "JobTaskDetails";

    /*
     * The job entity.
     */
    private JobEntity jobTask;

    /**
     * Creates an instance of JobTaskDetails class.
     */
    public JobTaskDetails() {
    }

    /**
     * Get the instanceType property: The type of task details.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the jobTask property: The job entity.
     * 
     * @return the jobTask value.
     */
    public JobEntity jobTask() {
        return this.jobTask;
    }

    /**
     * Set the jobTask property: The job entity.
     * 
     * @param jobTask the jobTask value to set.
     * @return the JobTaskDetails object itself.
     */
    public JobTaskDetails withJobTask(JobEntity jobTask) {
        this.jobTask = jobTask;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (jobTask() != null) {
            jobTask().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeJsonField("jobTask", this.jobTask);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobTaskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobTaskDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobTaskDetails.
     */
    public static JobTaskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("instanceType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("FabricReplicationGroupTaskDetails".equals(discriminatorValue)) {
                    return FabricReplicationGroupTaskDetails.fromJson(readerToUse.reset());
                } else if ("VirtualMachineTaskDetails".equals(discriminatorValue)) {
                    return VirtualMachineTaskDetails.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static JobTaskDetails fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobTaskDetails deserializedJobTaskDetails = new JobTaskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedJobTaskDetails.instanceType = reader.getString();
                } else if ("jobTask".equals(fieldName)) {
                    deserializedJobTaskDetails.jobTask = JobEntity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobTaskDetails;
        });
    }
}
