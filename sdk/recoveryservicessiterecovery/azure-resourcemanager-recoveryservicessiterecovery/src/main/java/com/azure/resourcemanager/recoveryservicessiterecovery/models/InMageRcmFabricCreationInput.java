// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * InMageRcm fabric provider specific settings.
 */
@Fluent
public final class InMageRcmFabricCreationInput extends FabricSpecificCreationInput {
    /*
     * Gets the class type.
     */
    private String instanceType = "InMageRcm";

    /*
     * The ARM Id of the VMware site.
     */
    private String vmwareSiteId;

    /*
     * The ARM Id of the physical site.
     */
    private String physicalSiteId;

    /*
     * The identity provider input for source agent authentication.
     */
    private IdentityProviderInput sourceAgentIdentity;

    /**
     * Creates an instance of InMageRcmFabricCreationInput class.
     */
    public InMageRcmFabricCreationInput() {
    }

    /**
     * Get the instanceType property: Gets the class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the vmwareSiteId property: The ARM Id of the VMware site.
     * 
     * @return the vmwareSiteId value.
     */
    public String vmwareSiteId() {
        return this.vmwareSiteId;
    }

    /**
     * Set the vmwareSiteId property: The ARM Id of the VMware site.
     * 
     * @param vmwareSiteId the vmwareSiteId value to set.
     * @return the InMageRcmFabricCreationInput object itself.
     */
    public InMageRcmFabricCreationInput withVmwareSiteId(String vmwareSiteId) {
        this.vmwareSiteId = vmwareSiteId;
        return this;
    }

    /**
     * Get the physicalSiteId property: The ARM Id of the physical site.
     * 
     * @return the physicalSiteId value.
     */
    public String physicalSiteId() {
        return this.physicalSiteId;
    }

    /**
     * Set the physicalSiteId property: The ARM Id of the physical site.
     * 
     * @param physicalSiteId the physicalSiteId value to set.
     * @return the InMageRcmFabricCreationInput object itself.
     */
    public InMageRcmFabricCreationInput withPhysicalSiteId(String physicalSiteId) {
        this.physicalSiteId = physicalSiteId;
        return this;
    }

    /**
     * Get the sourceAgentIdentity property: The identity provider input for source agent authentication.
     * 
     * @return the sourceAgentIdentity value.
     */
    public IdentityProviderInput sourceAgentIdentity() {
        return this.sourceAgentIdentity;
    }

    /**
     * Set the sourceAgentIdentity property: The identity provider input for source agent authentication.
     * 
     * @param sourceAgentIdentity the sourceAgentIdentity value to set.
     * @return the InMageRcmFabricCreationInput object itself.
     */
    public InMageRcmFabricCreationInput withSourceAgentIdentity(IdentityProviderInput sourceAgentIdentity) {
        this.sourceAgentIdentity = sourceAgentIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (vmwareSiteId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vmwareSiteId in model InMageRcmFabricCreationInput"));
        }
        if (physicalSiteId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property physicalSiteId in model InMageRcmFabricCreationInput"));
        }
        if (sourceAgentIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceAgentIdentity in model InMageRcmFabricCreationInput"));
        } else {
            sourceAgentIdentity().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InMageRcmFabricCreationInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmwareSiteId", this.vmwareSiteId);
        jsonWriter.writeStringField("physicalSiteId", this.physicalSiteId);
        jsonWriter.writeJsonField("sourceAgentIdentity", this.sourceAgentIdentity);
        jsonWriter.writeStringField("instanceType", this.instanceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmFabricCreationInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmFabricCreationInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InMageRcmFabricCreationInput.
     */
    public static InMageRcmFabricCreationInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmFabricCreationInput deserializedInMageRcmFabricCreationInput = new InMageRcmFabricCreationInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmwareSiteId".equals(fieldName)) {
                    deserializedInMageRcmFabricCreationInput.vmwareSiteId = reader.getString();
                } else if ("physicalSiteId".equals(fieldName)) {
                    deserializedInMageRcmFabricCreationInput.physicalSiteId = reader.getString();
                } else if ("sourceAgentIdentity".equals(fieldName)) {
                    deserializedInMageRcmFabricCreationInput.sourceAgentIdentity
                        = IdentityProviderInput.fromJson(reader);
                } else if ("instanceType".equals(fieldName)) {
                    deserializedInMageRcmFabricCreationInput.instanceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmFabricCreationInput;
        });
    }
}
