// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Migration item properties.
 */
@Fluent
public final class MigrationItemProperties implements JsonSerializable<MigrationItemProperties> {
    /*
     * The on-premise virtual machine name.
     */
    private String machineName;

    /*
     * The ARM Id of policy governing this item.
     */
    private String policyId;

    /*
     * The name of policy governing this item.
     */
    private String policyFriendlyName;

    /*
     * The recovery services provider ARM Id.
     */
    private String recoveryServicesProviderId;

    /*
     * The replication status.
     */
    private String replicationStatus;

    /*
     * The migration status.
     */
    private MigrationState migrationState;

    /*
     * The migration state description.
     */
    private String migrationStateDescription;

    /*
     * The last test migration time.
     */
    private OffsetDateTime lastTestMigrationTime;

    /*
     * The status of the last test migration.
     */
    private String lastTestMigrationStatus;

    /*
     * The last migration time.
     */
    private OffsetDateTime lastMigrationTime;

    /*
     * The status of the last migration.
     */
    private String lastMigrationStatus;

    /*
     * The test migrate state.
     */
    private TestMigrationState testMigrateState;

    /*
     * The test migrate state description.
     */
    private String testMigrateStateDescription;

    /*
     * The consolidated health.
     */
    private ProtectionHealth health;

    /*
     * The list of health errors.
     */
    private List<HealthError> healthErrors;

    /*
     * The allowed operations on the migration item based on the current migration state of the item.
     */
    private List<MigrationItemOperation> allowedOperations;

    /*
     * The current job details.
     */
    private CurrentJobDetails currentJob;

    /*
     * The critical past job details.
     */
    private List<CriticalJobHistoryDetails> criticalJobHistory;

    /*
     * The correlation Id for events associated with this migration item.
     */
    private String eventCorrelationId;

    /*
     * The migration provider custom settings.
     */
    private MigrationProviderSpecificSettings providerSpecificDetails;

    /**
     * Creates an instance of MigrationItemProperties class.
     */
    public MigrationItemProperties() {
    }

    /**
     * Get the machineName property: The on-premise virtual machine name.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Get the policyId property: The ARM Id of policy governing this item.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Get the policyFriendlyName property: The name of policy governing this item.
     * 
     * @return the policyFriendlyName value.
     */
    public String policyFriendlyName() {
        return this.policyFriendlyName;
    }

    /**
     * Get the recoveryServicesProviderId property: The recovery services provider ARM Id.
     * 
     * @return the recoveryServicesProviderId value.
     */
    public String recoveryServicesProviderId() {
        return this.recoveryServicesProviderId;
    }

    /**
     * Get the replicationStatus property: The replication status.
     * 
     * @return the replicationStatus value.
     */
    public String replicationStatus() {
        return this.replicationStatus;
    }

    /**
     * Get the migrationState property: The migration status.
     * 
     * @return the migrationState value.
     */
    public MigrationState migrationState() {
        return this.migrationState;
    }

    /**
     * Get the migrationStateDescription property: The migration state description.
     * 
     * @return the migrationStateDescription value.
     */
    public String migrationStateDescription() {
        return this.migrationStateDescription;
    }

    /**
     * Get the lastTestMigrationTime property: The last test migration time.
     * 
     * @return the lastTestMigrationTime value.
     */
    public OffsetDateTime lastTestMigrationTime() {
        return this.lastTestMigrationTime;
    }

    /**
     * Get the lastTestMigrationStatus property: The status of the last test migration.
     * 
     * @return the lastTestMigrationStatus value.
     */
    public String lastTestMigrationStatus() {
        return this.lastTestMigrationStatus;
    }

    /**
     * Get the lastMigrationTime property: The last migration time.
     * 
     * @return the lastMigrationTime value.
     */
    public OffsetDateTime lastMigrationTime() {
        return this.lastMigrationTime;
    }

    /**
     * Get the lastMigrationStatus property: The status of the last migration.
     * 
     * @return the lastMigrationStatus value.
     */
    public String lastMigrationStatus() {
        return this.lastMigrationStatus;
    }

    /**
     * Get the testMigrateState property: The test migrate state.
     * 
     * @return the testMigrateState value.
     */
    public TestMigrationState testMigrateState() {
        return this.testMigrateState;
    }

    /**
     * Get the testMigrateStateDescription property: The test migrate state description.
     * 
     * @return the testMigrateStateDescription value.
     */
    public String testMigrateStateDescription() {
        return this.testMigrateStateDescription;
    }

    /**
     * Get the health property: The consolidated health.
     * 
     * @return the health value.
     */
    public ProtectionHealth health() {
        return this.health;
    }

    /**
     * Get the healthErrors property: The list of health errors.
     * 
     * @return the healthErrors value.
     */
    public List<HealthError> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the allowedOperations property: The allowed operations on the migration item based on the current migration
     * state of the item.
     * 
     * @return the allowedOperations value.
     */
    public List<MigrationItemOperation> allowedOperations() {
        return this.allowedOperations;
    }

    /**
     * Get the currentJob property: The current job details.
     * 
     * @return the currentJob value.
     */
    public CurrentJobDetails currentJob() {
        return this.currentJob;
    }

    /**
     * Get the criticalJobHistory property: The critical past job details.
     * 
     * @return the criticalJobHistory value.
     */
    public List<CriticalJobHistoryDetails> criticalJobHistory() {
        return this.criticalJobHistory;
    }

    /**
     * Get the eventCorrelationId property: The correlation Id for events associated with this migration item.
     * 
     * @return the eventCorrelationId value.
     */
    public String eventCorrelationId() {
        return this.eventCorrelationId;
    }

    /**
     * Get the providerSpecificDetails property: The migration provider custom settings.
     * 
     * @return the providerSpecificDetails value.
     */
    public MigrationProviderSpecificSettings providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: The migration provider custom settings.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the MigrationItemProperties object itself.
     */
    public MigrationItemProperties
        withProviderSpecificDetails(MigrationProviderSpecificSettings providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (currentJob() != null) {
            currentJob().validate();
        }
        if (criticalJobHistory() != null) {
            criticalJobHistory().forEach(e -> e.validate());
        }
        if (providerSpecificDetails() != null) {
            providerSpecificDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationItemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationItemProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationItemProperties.
     */
    public static MigrationItemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationItemProperties deserializedMigrationItemProperties = new MigrationItemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("machineName".equals(fieldName)) {
                    deserializedMigrationItemProperties.machineName = reader.getString();
                } else if ("policyId".equals(fieldName)) {
                    deserializedMigrationItemProperties.policyId = reader.getString();
                } else if ("policyFriendlyName".equals(fieldName)) {
                    deserializedMigrationItemProperties.policyFriendlyName = reader.getString();
                } else if ("recoveryServicesProviderId".equals(fieldName)) {
                    deserializedMigrationItemProperties.recoveryServicesProviderId = reader.getString();
                } else if ("replicationStatus".equals(fieldName)) {
                    deserializedMigrationItemProperties.replicationStatus = reader.getString();
                } else if ("migrationState".equals(fieldName)) {
                    deserializedMigrationItemProperties.migrationState = MigrationState.fromString(reader.getString());
                } else if ("migrationStateDescription".equals(fieldName)) {
                    deserializedMigrationItemProperties.migrationStateDescription = reader.getString();
                } else if ("lastTestMigrationTime".equals(fieldName)) {
                    deserializedMigrationItemProperties.lastTestMigrationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastTestMigrationStatus".equals(fieldName)) {
                    deserializedMigrationItemProperties.lastTestMigrationStatus = reader.getString();
                } else if ("lastMigrationTime".equals(fieldName)) {
                    deserializedMigrationItemProperties.lastMigrationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastMigrationStatus".equals(fieldName)) {
                    deserializedMigrationItemProperties.lastMigrationStatus = reader.getString();
                } else if ("testMigrateState".equals(fieldName)) {
                    deserializedMigrationItemProperties.testMigrateState
                        = TestMigrationState.fromString(reader.getString());
                } else if ("testMigrateStateDescription".equals(fieldName)) {
                    deserializedMigrationItemProperties.testMigrateStateDescription = reader.getString();
                } else if ("health".equals(fieldName)) {
                    deserializedMigrationItemProperties.health = ProtectionHealth.fromString(reader.getString());
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthError> healthErrors = reader.readArray(reader1 -> HealthError.fromJson(reader1));
                    deserializedMigrationItemProperties.healthErrors = healthErrors;
                } else if ("allowedOperations".equals(fieldName)) {
                    List<MigrationItemOperation> allowedOperations
                        = reader.readArray(reader1 -> MigrationItemOperation.fromString(reader1.getString()));
                    deserializedMigrationItemProperties.allowedOperations = allowedOperations;
                } else if ("currentJob".equals(fieldName)) {
                    deserializedMigrationItemProperties.currentJob = CurrentJobDetails.fromJson(reader);
                } else if ("criticalJobHistory".equals(fieldName)) {
                    List<CriticalJobHistoryDetails> criticalJobHistory
                        = reader.readArray(reader1 -> CriticalJobHistoryDetails.fromJson(reader1));
                    deserializedMigrationItemProperties.criticalJobHistory = criticalJobHistory;
                } else if ("eventCorrelationId".equals(fieldName)) {
                    deserializedMigrationItemProperties.eventCorrelationId = reader.getString();
                } else if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedMigrationItemProperties.providerSpecificDetails
                        = MigrationProviderSpecificSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationItemProperties;
        });
    }
}
