// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This class represents the script action task details.
 */
@Fluent
public final class ScriptActionTaskDetails extends TaskTypeDetails {
    /*
     * The type of task details.
     */
    private String instanceType = "ScriptActionTaskDetails";

    /*
     * The name.
     */
    private String name;

    /*
     * The path.
     */
    private String path;

    /*
     * The output.
     */
    private String output;

    /*
     * A value indicating whether it is a primary side script or not.
     */
    private Boolean isPrimarySideScript;

    /**
     * Creates an instance of ScriptActionTaskDetails class.
     */
    public ScriptActionTaskDetails() {
    }

    /**
     * Get the instanceType property: The type of task details.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the name property: The name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name.
     * 
     * @param name the name value to set.
     * @return the ScriptActionTaskDetails object itself.
     */
    public ScriptActionTaskDetails withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the path property: The path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path.
     * 
     * @param path the path value to set.
     * @return the ScriptActionTaskDetails object itself.
     */
    public ScriptActionTaskDetails withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the output property: The output.
     * 
     * @return the output value.
     */
    public String output() {
        return this.output;
    }

    /**
     * Set the output property: The output.
     * 
     * @param output the output value to set.
     * @return the ScriptActionTaskDetails object itself.
     */
    public ScriptActionTaskDetails withOutput(String output) {
        this.output = output;
        return this;
    }

    /**
     * Get the isPrimarySideScript property: A value indicating whether it is a primary side script or not.
     * 
     * @return the isPrimarySideScript value.
     */
    public Boolean isPrimarySideScript() {
        return this.isPrimarySideScript;
    }

    /**
     * Set the isPrimarySideScript property: A value indicating whether it is a primary side script or not.
     * 
     * @param isPrimarySideScript the isPrimarySideScript value to set.
     * @return the ScriptActionTaskDetails object itself.
     */
    public ScriptActionTaskDetails withIsPrimarySideScript(Boolean isPrimarySideScript) {
        this.isPrimarySideScript = isPrimarySideScript;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("output", this.output);
        jsonWriter.writeBooleanField("isPrimarySideScript", this.isPrimarySideScript);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptActionTaskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptActionTaskDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptActionTaskDetails.
     */
    public static ScriptActionTaskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptActionTaskDetails deserializedScriptActionTaskDetails = new ScriptActionTaskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedScriptActionTaskDetails.instanceType = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedScriptActionTaskDetails.name = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedScriptActionTaskDetails.path = reader.getString();
                } else if ("output".equals(fieldName)) {
                    deserializedScriptActionTaskDetails.output = reader.getString();
                } else if ("isPrimarySideScript".equals(fieldName)) {
                    deserializedScriptActionTaskDetails.isPrimarySideScript
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptActionTaskDetails;
        });
    }
}
