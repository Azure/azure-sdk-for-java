// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationFabricsClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.FabricInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Fabric;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverProcessServerRequest;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RenewCertificateInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationFabrics;

public final class ReplicationFabricsImpl implements ReplicationFabrics {
    private static final ClientLogger LOGGER = new ClientLogger(ReplicationFabricsImpl.class);

    private final ReplicationFabricsClient innerClient;

    private final com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager;

    public ReplicationFabricsImpl(ReplicationFabricsClient innerClient,
        com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Fabric> list(String resourceGroupName, String resourceName) {
        PagedIterable<FabricInner> inner = this.serviceClient().list(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricImpl(inner1, this.manager()));
    }

    public PagedIterable<Fabric> list(String resourceGroupName, String resourceName, Context context) {
        PagedIterable<FabricInner> inner = this.serviceClient().list(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricImpl(inner1, this.manager()));
    }

    public Response<Fabric> getWithResponse(String resourceGroupName, String resourceName, String fabricName,
        String filter, Context context) {
        Response<FabricInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, resourceName, fabricName, filter, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FabricImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Fabric get(String resourceGroupName, String resourceName, String fabricName) {
        FabricInner inner = this.serviceClient().get(resourceGroupName, resourceName, fabricName);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void purge(String resourceGroupName, String resourceName, String fabricName) {
        this.serviceClient().purge(resourceGroupName, resourceName, fabricName);
    }

    public void purge(String resourceGroupName, String resourceName, String fabricName, Context context) {
        this.serviceClient().purge(resourceGroupName, resourceName, fabricName, context);
    }

    public Fabric checkConsistency(String resourceGroupName, String resourceName, String fabricName) {
        FabricInner inner = this.serviceClient().checkConsistency(resourceGroupName, resourceName, fabricName);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Fabric checkConsistency(String resourceGroupName, String resourceName, String fabricName, Context context) {
        FabricInner inner = this.serviceClient().checkConsistency(resourceGroupName, resourceName, fabricName, context);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void migrateToAad(String resourceGroupName, String resourceName, String fabricName) {
        this.serviceClient().migrateToAad(resourceGroupName, resourceName, fabricName);
    }

    public void migrateToAad(String resourceGroupName, String resourceName, String fabricName, Context context) {
        this.serviceClient().migrateToAad(resourceGroupName, resourceName, fabricName, context);
    }

    public Fabric reassociateGateway(String resourceGroupName, String resourceName, String fabricName,
        FailoverProcessServerRequest failoverProcessServerRequest) {
        FabricInner inner = this.serviceClient()
            .reassociateGateway(resourceGroupName, resourceName, fabricName, failoverProcessServerRequest);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Fabric reassociateGateway(String resourceGroupName, String resourceName, String fabricName,
        FailoverProcessServerRequest failoverProcessServerRequest, Context context) {
        FabricInner inner = this.serviceClient()
            .reassociateGateway(resourceGroupName, resourceName, fabricName, failoverProcessServerRequest, context);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String resourceName, String fabricName) {
        this.serviceClient().delete(resourceGroupName, resourceName, fabricName);
    }

    public void delete(String resourceGroupName, String resourceName, String fabricName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, fabricName, context);
    }

    public Fabric renewCertificate(String resourceGroupName, String resourceName, String fabricName,
        RenewCertificateInput renewCertificate) {
        FabricInner inner
            = this.serviceClient().renewCertificate(resourceGroupName, resourceName, fabricName, renewCertificate);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Fabric renewCertificate(String resourceGroupName, String resourceName, String fabricName,
        RenewCertificateInput renewCertificate, Context context) {
        FabricInner inner = this.serviceClient()
            .renewCertificate(resourceGroupName, resourceName, fabricName, renewCertificate, context);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void removeInfra(String resourceGroupName, String resourceName, String fabricName) {
        this.serviceClient().removeInfra(resourceGroupName, resourceName, fabricName);
    }

    public void removeInfra(String resourceGroupName, String resourceName, String fabricName, Context context) {
        this.serviceClient().removeInfra(resourceGroupName, resourceName, fabricName, context);
    }

    public Fabric getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String localFilter = null;
        return this.getWithResponse(resourceGroupName, resourceName, fabricName, localFilter, Context.NONE).getValue();
    }

    public Response<Fabric> getByIdWithResponse(String id, String filter, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, fabricName, filter, context);
    }

    private ReplicationFabricsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public FabricImpl define(String name) {
        return new FabricImpl(name, this.manager());
    }
}
