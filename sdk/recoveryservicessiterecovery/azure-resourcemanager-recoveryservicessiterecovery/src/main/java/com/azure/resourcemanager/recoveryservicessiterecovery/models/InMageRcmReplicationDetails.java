// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * InMageRcm provider specific details.
 */
@Fluent
public final class InMageRcmReplicationDetails extends ReplicationProviderSpecificSettings {
    /*
     * Gets the Instance type.
     */
    private String instanceType = "InMageRcm";

    /*
     * The virtual machine internal identifier.
     */
    private String internalIdentifier;

    /*
     * The ARM Id of the discovered VM.
     */
    private String fabricDiscoveryMachineId;

    /*
     * The multi VM group name.
     */
    private String multiVmGroupName;

    /*
     * The type of the discovered VM.
     */
    private String discoveryType;

    /*
     * The process server Id.
     */
    private String processServerId;

    /*
     * The processor core count.
     */
    private Integer processorCoreCount;

    /*
     * The allocated memory in MB.
     */
    private Double allocatedMemoryInMB;

    /*
     * The process server name.
     */
    private String processServerName;

    /*
     * The run-as account Id.
     */
    private String runAsAccountId;

    /*
     * The type of the OS on the VM.
     */
    private String osType;

    /*
     * The firmware type.
     */
    private String firmwareType;

    /*
     * The IP address of the primary network interface.
     */
    private String primaryNicIpAddress;

    /*
     * The target generation.
     */
    private String targetGeneration;

    /*
     * License Type of the VM to be used.
     */
    private String licenseType;

    /*
     * The replication storage account ARM Id. This is applicable only for the blob based replication test hook.
     */
    private String storageAccountId;

    /*
     * Target VM name.
     */
    private String targetVmName;

    /*
     * The target VM size.
     */
    private String targetVmSize;

    /*
     * The target resource group Id.
     */
    private String targetResourceGroupId;

    /*
     * The target location.
     */
    private String targetLocation;

    /*
     * The target availability set Id.
     */
    private String targetAvailabilitySetId;

    /*
     * The target availability zone.
     */
    private String targetAvailabilityZone;

    /*
     * The target proximity placement group Id.
     */
    private String targetProximityPlacementGroupId;

    /*
     * The target boot diagnostics storage account ARM Id.
     */
    private String targetBootDiagnosticsStorageAccountId;

    /*
     * The target network Id.
     */
    private String targetNetworkId;

    /*
     * The test network Id.
     */
    private String testNetworkId;

    /*
     * The recovery point Id to which the VM was failed over.
     */
    private String failoverRecoveryPointId;

    /*
     * The last recovery point received time.
     */
    private OffsetDateTime lastRecoveryPointReceived;

    /*
     * The last recovery point objective value.
     */
    private Long lastRpoInSeconds;

    /*
     * The last recovery point objective calculated time.
     */
    private OffsetDateTime lastRpoCalculatedTime;

    /*
     * The last recovery point Id.
     */
    private String lastRecoveryPointId;

    /*
     * The initial replication progress percentage. This is calculated based on total bytes processed for all disks in
     * the source VM.
     */
    private Integer initialReplicationProgressPercentage;

    /*
     * The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all
     * selected disks in source VM.
     */
    private Long initialReplicationProcessedBytes;

    /*
     * The initial replication transferred bytes from source VM to azure for all selected disks on source VM.
     */
    private Long initialReplicationTransferredBytes;

    /*
     * The initial replication progress health.
     */
    private VmReplicationProgressHealth initialReplicationProgressHealth;

    /*
     * The resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     */
    private Integer resyncProgressPercentage;

    /*
     * The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks
     * in source VM.
     */
    private Long resyncProcessedBytes;

    /*
     * The resync transferred bytes from source VM to azure for all selected disks on source VM.
     */
    private Long resyncTransferredBytes;

    /*
     * The resync progress health.
     */
    private VmReplicationProgressHealth resyncProgressHealth;

    /*
     * A value indicating whether resync is required.
     */
    private String resyncRequired;

    /*
     * The resync state.
     */
    private ResyncState resyncState;

    /*
     * The agent auto upgrade state.
     */
    private MobilityAgentUpgradeState agentUpgradeState;

    /*
     * The last agent upgrade type.
     */
    private String lastAgentUpgradeType;

    /*
     * The agent upgrade job Id.
     */
    private String agentUpgradeJobId;

    /*
     * The agent version to which last agent upgrade was attempted.
     */
    private String agentUpgradeAttemptToVersion;

    /*
     * The list of protected disks.
     */
    private List<InMageRcmProtectedDiskDetails> protectedDisks;

    /*
     * A value indicating whether last agent upgrade was successful or not.
     */
    private String isLastUpgradeSuccessful;

    /*
     * A value indicating whether agent registration was successful after failover.
     */
    private Boolean isAgentRegistrationSuccessfulAfterFailover;

    /*
     * The mobility agent information.
     */
    private InMageRcmMobilityAgentDetails mobilityAgentDetails;

    /*
     * The last agent upgrade error information.
     */
    private List<InMageRcmLastAgentUpgradeErrorDetails> lastAgentUpgradeErrorDetails;

    /*
     * The agent upgrade blocking error information.
     */
    private List<InMageRcmAgentUpgradeBlockingErrorDetails> agentUpgradeBlockingErrorDetails;

    /*
     * The network details.
     */
    private List<InMageRcmNicDetails> vmNics;

    /*
     * The discovered VM details.
     */
    private InMageRcmDiscoveredProtectedVmDetails discoveredVmDetails;

    /**
     * Creates an instance of InMageRcmReplicationDetails class.
     */
    public InMageRcmReplicationDetails() {
    }

    /**
     * Get the instanceType property: Gets the Instance type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the internalIdentifier property: The virtual machine internal identifier.
     * 
     * @return the internalIdentifier value.
     */
    public String internalIdentifier() {
        return this.internalIdentifier;
    }

    /**
     * Get the fabricDiscoveryMachineId property: The ARM Id of the discovered VM.
     * 
     * @return the fabricDiscoveryMachineId value.
     */
    public String fabricDiscoveryMachineId() {
        return this.fabricDiscoveryMachineId;
    }

    /**
     * Get the multiVmGroupName property: The multi VM group name.
     * 
     * @return the multiVmGroupName value.
     */
    public String multiVmGroupName() {
        return this.multiVmGroupName;
    }

    /**
     * Get the discoveryType property: The type of the discovered VM.
     * 
     * @return the discoveryType value.
     */
    public String discoveryType() {
        return this.discoveryType;
    }

    /**
     * Get the processServerId property: The process server Id.
     * 
     * @return the processServerId value.
     */
    public String processServerId() {
        return this.processServerId;
    }

    /**
     * Get the processorCoreCount property: The processor core count.
     * 
     * @return the processorCoreCount value.
     */
    public Integer processorCoreCount() {
        return this.processorCoreCount;
    }

    /**
     * Get the allocatedMemoryInMB property: The allocated memory in MB.
     * 
     * @return the allocatedMemoryInMB value.
     */
    public Double allocatedMemoryInMB() {
        return this.allocatedMemoryInMB;
    }

    /**
     * Get the processServerName property: The process server name.
     * 
     * @return the processServerName value.
     */
    public String processServerName() {
        return this.processServerName;
    }

    /**
     * Get the runAsAccountId property: The run-as account Id.
     * 
     * @return the runAsAccountId value.
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }

    /**
     * Get the osType property: The type of the OS on the VM.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Get the firmwareType property: The firmware type.
     * 
     * @return the firmwareType value.
     */
    public String firmwareType() {
        return this.firmwareType;
    }

    /**
     * Get the primaryNicIpAddress property: The IP address of the primary network interface.
     * 
     * @return the primaryNicIpAddress value.
     */
    public String primaryNicIpAddress() {
        return this.primaryNicIpAddress;
    }

    /**
     * Get the targetGeneration property: The target generation.
     * 
     * @return the targetGeneration value.
     */
    public String targetGeneration() {
        return this.targetGeneration;
    }

    /**
     * Get the licenseType property: License Type of the VM to be used.
     * 
     * @return the licenseType value.
     */
    public String licenseType() {
        return this.licenseType;
    }

    /**
     * Set the licenseType property: License Type of the VM to be used.
     * 
     * @param licenseType the licenseType value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withLicenseType(String licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get the storageAccountId property: The replication storage account ARM Id. This is applicable only for the blob
     * based replication test hook.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Get the targetVmName property: Target VM name.
     * 
     * @return the targetVmName value.
     */
    public String targetVmName() {
        return this.targetVmName;
    }

    /**
     * Set the targetVmName property: Target VM name.
     * 
     * @param targetVmName the targetVmName value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetVmName(String targetVmName) {
        this.targetVmName = targetVmName;
        return this;
    }

    /**
     * Get the targetVmSize property: The target VM size.
     * 
     * @return the targetVmSize value.
     */
    public String targetVmSize() {
        return this.targetVmSize;
    }

    /**
     * Set the targetVmSize property: The target VM size.
     * 
     * @param targetVmSize the targetVmSize value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetVmSize(String targetVmSize) {
        this.targetVmSize = targetVmSize;
        return this;
    }

    /**
     * Get the targetResourceGroupId property: The target resource group Id.
     * 
     * @return the targetResourceGroupId value.
     */
    public String targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    /**
     * Set the targetResourceGroupId property: The target resource group Id.
     * 
     * @param targetResourceGroupId the targetResourceGroupId value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetResourceGroupId(String targetResourceGroupId) {
        this.targetResourceGroupId = targetResourceGroupId;
        return this;
    }

    /**
     * Get the targetLocation property: The target location.
     * 
     * @return the targetLocation value.
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * Set the targetLocation property: The target location.
     * 
     * @param targetLocation the targetLocation value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetLocation(String targetLocation) {
        this.targetLocation = targetLocation;
        return this;
    }

    /**
     * Get the targetAvailabilitySetId property: The target availability set Id.
     * 
     * @return the targetAvailabilitySetId value.
     */
    public String targetAvailabilitySetId() {
        return this.targetAvailabilitySetId;
    }

    /**
     * Set the targetAvailabilitySetId property: The target availability set Id.
     * 
     * @param targetAvailabilitySetId the targetAvailabilitySetId value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetAvailabilitySetId(String targetAvailabilitySetId) {
        this.targetAvailabilitySetId = targetAvailabilitySetId;
        return this;
    }

    /**
     * Get the targetAvailabilityZone property: The target availability zone.
     * 
     * @return the targetAvailabilityZone value.
     */
    public String targetAvailabilityZone() {
        return this.targetAvailabilityZone;
    }

    /**
     * Set the targetAvailabilityZone property: The target availability zone.
     * 
     * @param targetAvailabilityZone the targetAvailabilityZone value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetAvailabilityZone(String targetAvailabilityZone) {
        this.targetAvailabilityZone = targetAvailabilityZone;
        return this;
    }

    /**
     * Get the targetProximityPlacementGroupId property: The target proximity placement group Id.
     * 
     * @return the targetProximityPlacementGroupId value.
     */
    public String targetProximityPlacementGroupId() {
        return this.targetProximityPlacementGroupId;
    }

    /**
     * Set the targetProximityPlacementGroupId property: The target proximity placement group Id.
     * 
     * @param targetProximityPlacementGroupId the targetProximityPlacementGroupId value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetProximityPlacementGroupId(String targetProximityPlacementGroupId) {
        this.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
        return this;
    }

    /**
     * Get the targetBootDiagnosticsStorageAccountId property: The target boot diagnostics storage account ARM Id.
     * 
     * @return the targetBootDiagnosticsStorageAccountId value.
     */
    public String targetBootDiagnosticsStorageAccountId() {
        return this.targetBootDiagnosticsStorageAccountId;
    }

    /**
     * Set the targetBootDiagnosticsStorageAccountId property: The target boot diagnostics storage account ARM Id.
     * 
     * @param targetBootDiagnosticsStorageAccountId the targetBootDiagnosticsStorageAccountId value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails
        withTargetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
        this.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
        return this;
    }

    /**
     * Get the targetNetworkId property: The target network Id.
     * 
     * @return the targetNetworkId value.
     */
    public String targetNetworkId() {
        return this.targetNetworkId;
    }

    /**
     * Set the targetNetworkId property: The target network Id.
     * 
     * @param targetNetworkId the targetNetworkId value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTargetNetworkId(String targetNetworkId) {
        this.targetNetworkId = targetNetworkId;
        return this;
    }

    /**
     * Get the testNetworkId property: The test network Id.
     * 
     * @return the testNetworkId value.
     */
    public String testNetworkId() {
        return this.testNetworkId;
    }

    /**
     * Set the testNetworkId property: The test network Id.
     * 
     * @param testNetworkId the testNetworkId value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withTestNetworkId(String testNetworkId) {
        this.testNetworkId = testNetworkId;
        return this;
    }

    /**
     * Get the failoverRecoveryPointId property: The recovery point Id to which the VM was failed over.
     * 
     * @return the failoverRecoveryPointId value.
     */
    public String failoverRecoveryPointId() {
        return this.failoverRecoveryPointId;
    }

    /**
     * Get the lastRecoveryPointReceived property: The last recovery point received time.
     * 
     * @return the lastRecoveryPointReceived value.
     */
    public OffsetDateTime lastRecoveryPointReceived() {
        return this.lastRecoveryPointReceived;
    }

    /**
     * Get the lastRpoInSeconds property: The last recovery point objective value.
     * 
     * @return the lastRpoInSeconds value.
     */
    public Long lastRpoInSeconds() {
        return this.lastRpoInSeconds;
    }

    /**
     * Get the lastRpoCalculatedTime property: The last recovery point objective calculated time.
     * 
     * @return the lastRpoCalculatedTime value.
     */
    public OffsetDateTime lastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime;
    }

    /**
     * Get the lastRecoveryPointId property: The last recovery point Id.
     * 
     * @return the lastRecoveryPointId value.
     */
    public String lastRecoveryPointId() {
        return this.lastRecoveryPointId;
    }

    /**
     * Get the initialReplicationProgressPercentage property: The initial replication progress percentage. This is
     * calculated based on total bytes processed for all disks in the source VM.
     * 
     * @return the initialReplicationProgressPercentage value.
     */
    public Integer initialReplicationProgressPercentage() {
        return this.initialReplicationProgressPercentage;
    }

    /**
     * Get the initialReplicationProcessedBytes property: The initial replication processed bytes. This includes sum of
     * total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     * @return the initialReplicationProcessedBytes value.
     */
    public Long initialReplicationProcessedBytes() {
        return this.initialReplicationProcessedBytes;
    }

    /**
     * Get the initialReplicationTransferredBytes property: The initial replication transferred bytes from source VM to
     * azure for all selected disks on source VM.
     * 
     * @return the initialReplicationTransferredBytes value.
     */
    public Long initialReplicationTransferredBytes() {
        return this.initialReplicationTransferredBytes;
    }

    /**
     * Get the initialReplicationProgressHealth property: The initial replication progress health.
     * 
     * @return the initialReplicationProgressHealth value.
     */
    public VmReplicationProgressHealth initialReplicationProgressHealth() {
        return this.initialReplicationProgressHealth;
    }

    /**
     * Get the resyncProgressPercentage property: The resync progress percentage. This is calculated based on total
     * bytes processed for all disks in the source VM.
     * 
     * @return the resyncProgressPercentage value.
     */
    public Integer resyncProgressPercentage() {
        return this.resyncProgressPercentage;
    }

    /**
     * Get the resyncProcessedBytes property: The resync processed bytes. This includes sum of total bytes transferred
     * and matched bytes on all selected disks in source VM.
     * 
     * @return the resyncProcessedBytes value.
     */
    public Long resyncProcessedBytes() {
        return this.resyncProcessedBytes;
    }

    /**
     * Get the resyncTransferredBytes property: The resync transferred bytes from source VM to azure for all selected
     * disks on source VM.
     * 
     * @return the resyncTransferredBytes value.
     */
    public Long resyncTransferredBytes() {
        return this.resyncTransferredBytes;
    }

    /**
     * Get the resyncProgressHealth property: The resync progress health.
     * 
     * @return the resyncProgressHealth value.
     */
    public VmReplicationProgressHealth resyncProgressHealth() {
        return this.resyncProgressHealth;
    }

    /**
     * Get the resyncRequired property: A value indicating whether resync is required.
     * 
     * @return the resyncRequired value.
     */
    public String resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Get the resyncState property: The resync state.
     * 
     * @return the resyncState value.
     */
    public ResyncState resyncState() {
        return this.resyncState;
    }

    /**
     * Get the agentUpgradeState property: The agent auto upgrade state.
     * 
     * @return the agentUpgradeState value.
     */
    public MobilityAgentUpgradeState agentUpgradeState() {
        return this.agentUpgradeState;
    }

    /**
     * Get the lastAgentUpgradeType property: The last agent upgrade type.
     * 
     * @return the lastAgentUpgradeType value.
     */
    public String lastAgentUpgradeType() {
        return this.lastAgentUpgradeType;
    }

    /**
     * Get the agentUpgradeJobId property: The agent upgrade job Id.
     * 
     * @return the agentUpgradeJobId value.
     */
    public String agentUpgradeJobId() {
        return this.agentUpgradeJobId;
    }

    /**
     * Get the agentUpgradeAttemptToVersion property: The agent version to which last agent upgrade was attempted.
     * 
     * @return the agentUpgradeAttemptToVersion value.
     */
    public String agentUpgradeAttemptToVersion() {
        return this.agentUpgradeAttemptToVersion;
    }

    /**
     * Get the protectedDisks property: The list of protected disks.
     * 
     * @return the protectedDisks value.
     */
    public List<InMageRcmProtectedDiskDetails> protectedDisks() {
        return this.protectedDisks;
    }

    /**
     * Set the protectedDisks property: The list of protected disks.
     * 
     * @param protectedDisks the protectedDisks value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withProtectedDisks(List<InMageRcmProtectedDiskDetails> protectedDisks) {
        this.protectedDisks = protectedDisks;
        return this;
    }

    /**
     * Get the isLastUpgradeSuccessful property: A value indicating whether last agent upgrade was successful or not.
     * 
     * @return the isLastUpgradeSuccessful value.
     */
    public String isLastUpgradeSuccessful() {
        return this.isLastUpgradeSuccessful;
    }

    /**
     * Get the isAgentRegistrationSuccessfulAfterFailover property: A value indicating whether agent registration was
     * successful after failover.
     * 
     * @return the isAgentRegistrationSuccessfulAfterFailover value.
     */
    public Boolean isAgentRegistrationSuccessfulAfterFailover() {
        return this.isAgentRegistrationSuccessfulAfterFailover;
    }

    /**
     * Get the mobilityAgentDetails property: The mobility agent information.
     * 
     * @return the mobilityAgentDetails value.
     */
    public InMageRcmMobilityAgentDetails mobilityAgentDetails() {
        return this.mobilityAgentDetails;
    }

    /**
     * Set the mobilityAgentDetails property: The mobility agent information.
     * 
     * @param mobilityAgentDetails the mobilityAgentDetails value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withMobilityAgentDetails(InMageRcmMobilityAgentDetails mobilityAgentDetails) {
        this.mobilityAgentDetails = mobilityAgentDetails;
        return this;
    }

    /**
     * Get the lastAgentUpgradeErrorDetails property: The last agent upgrade error information.
     * 
     * @return the lastAgentUpgradeErrorDetails value.
     */
    public List<InMageRcmLastAgentUpgradeErrorDetails> lastAgentUpgradeErrorDetails() {
        return this.lastAgentUpgradeErrorDetails;
    }

    /**
     * Set the lastAgentUpgradeErrorDetails property: The last agent upgrade error information.
     * 
     * @param lastAgentUpgradeErrorDetails the lastAgentUpgradeErrorDetails value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails
        withLastAgentUpgradeErrorDetails(List<InMageRcmLastAgentUpgradeErrorDetails> lastAgentUpgradeErrorDetails) {
        this.lastAgentUpgradeErrorDetails = lastAgentUpgradeErrorDetails;
        return this;
    }

    /**
     * Get the agentUpgradeBlockingErrorDetails property: The agent upgrade blocking error information.
     * 
     * @return the agentUpgradeBlockingErrorDetails value.
     */
    public List<InMageRcmAgentUpgradeBlockingErrorDetails> agentUpgradeBlockingErrorDetails() {
        return this.agentUpgradeBlockingErrorDetails;
    }

    /**
     * Set the agentUpgradeBlockingErrorDetails property: The agent upgrade blocking error information.
     * 
     * @param agentUpgradeBlockingErrorDetails the agentUpgradeBlockingErrorDetails value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withAgentUpgradeBlockingErrorDetails(
        List<InMageRcmAgentUpgradeBlockingErrorDetails> agentUpgradeBlockingErrorDetails) {
        this.agentUpgradeBlockingErrorDetails = agentUpgradeBlockingErrorDetails;
        return this;
    }

    /**
     * Get the vmNics property: The network details.
     * 
     * @return the vmNics value.
     */
    public List<InMageRcmNicDetails> vmNics() {
        return this.vmNics;
    }

    /**
     * Set the vmNics property: The network details.
     * 
     * @param vmNics the vmNics value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails withVmNics(List<InMageRcmNicDetails> vmNics) {
        this.vmNics = vmNics;
        return this;
    }

    /**
     * Get the discoveredVmDetails property: The discovered VM details.
     * 
     * @return the discoveredVmDetails value.
     */
    public InMageRcmDiscoveredProtectedVmDetails discoveredVmDetails() {
        return this.discoveredVmDetails;
    }

    /**
     * Set the discoveredVmDetails property: The discovered VM details.
     * 
     * @param discoveredVmDetails the discoveredVmDetails value to set.
     * @return the InMageRcmReplicationDetails object itself.
     */
    public InMageRcmReplicationDetails
        withDiscoveredVmDetails(InMageRcmDiscoveredProtectedVmDetails discoveredVmDetails) {
        this.discoveredVmDetails = discoveredVmDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (protectedDisks() != null) {
            protectedDisks().forEach(e -> e.validate());
        }
        if (mobilityAgentDetails() != null) {
            mobilityAgentDetails().validate();
        }
        if (lastAgentUpgradeErrorDetails() != null) {
            lastAgentUpgradeErrorDetails().forEach(e -> e.validate());
        }
        if (agentUpgradeBlockingErrorDetails() != null) {
            agentUpgradeBlockingErrorDetails().forEach(e -> e.validate());
        }
        if (vmNics() != null) {
            vmNics().forEach(e -> e.validate());
        }
        if (discoveredVmDetails() != null) {
            discoveredVmDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("licenseType", this.licenseType);
        jsonWriter.writeStringField("targetVmName", this.targetVmName);
        jsonWriter.writeStringField("targetVmSize", this.targetVmSize);
        jsonWriter.writeStringField("targetResourceGroupId", this.targetResourceGroupId);
        jsonWriter.writeStringField("targetLocation", this.targetLocation);
        jsonWriter.writeStringField("targetAvailabilitySetId", this.targetAvailabilitySetId);
        jsonWriter.writeStringField("targetAvailabilityZone", this.targetAvailabilityZone);
        jsonWriter.writeStringField("targetProximityPlacementGroupId", this.targetProximityPlacementGroupId);
        jsonWriter.writeStringField("targetBootDiagnosticsStorageAccountId",
            this.targetBootDiagnosticsStorageAccountId);
        jsonWriter.writeStringField("targetNetworkId", this.targetNetworkId);
        jsonWriter.writeStringField("testNetworkId", this.testNetworkId);
        jsonWriter.writeArrayField("protectedDisks", this.protectedDisks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("mobilityAgentDetails", this.mobilityAgentDetails);
        jsonWriter.writeArrayField("lastAgentUpgradeErrorDetails", this.lastAgentUpgradeErrorDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("agentUpgradeBlockingErrorDetails", this.agentUpgradeBlockingErrorDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("vmNics", this.vmNics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("discoveredVmDetails", this.discoveredVmDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageRcmReplicationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageRcmReplicationDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageRcmReplicationDetails.
     */
    public static InMageRcmReplicationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageRcmReplicationDetails deserializedInMageRcmReplicationDetails = new InMageRcmReplicationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.instanceType = reader.getString();
                } else if ("internalIdentifier".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.internalIdentifier = reader.getString();
                } else if ("fabricDiscoveryMachineId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.fabricDiscoveryMachineId = reader.getString();
                } else if ("multiVmGroupName".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.multiVmGroupName = reader.getString();
                } else if ("discoveryType".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.discoveryType = reader.getString();
                } else if ("processServerId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.processServerId = reader.getString();
                } else if ("processorCoreCount".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.processorCoreCount = reader.getNullable(JsonReader::getInt);
                } else if ("allocatedMemoryInMB".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.allocatedMemoryInMB
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("processServerName".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.processServerName = reader.getString();
                } else if ("runAsAccountId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.runAsAccountId = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.osType = reader.getString();
                } else if ("firmwareType".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.firmwareType = reader.getString();
                } else if ("primaryNicIpAddress".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.primaryNicIpAddress = reader.getString();
                } else if ("targetGeneration".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetGeneration = reader.getString();
                } else if ("licenseType".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.licenseType = reader.getString();
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.storageAccountId = reader.getString();
                } else if ("targetVmName".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetVmName = reader.getString();
                } else if ("targetVmSize".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetVmSize = reader.getString();
                } else if ("targetResourceGroupId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetResourceGroupId = reader.getString();
                } else if ("targetLocation".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetLocation = reader.getString();
                } else if ("targetAvailabilitySetId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetAvailabilitySetId = reader.getString();
                } else if ("targetAvailabilityZone".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetAvailabilityZone = reader.getString();
                } else if ("targetProximityPlacementGroupId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetProximityPlacementGroupId = reader.getString();
                } else if ("targetBootDiagnosticsStorageAccountId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetBootDiagnosticsStorageAccountId = reader.getString();
                } else if ("targetNetworkId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.targetNetworkId = reader.getString();
                } else if ("testNetworkId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.testNetworkId = reader.getString();
                } else if ("failoverRecoveryPointId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.failoverRecoveryPointId = reader.getString();
                } else if ("lastRecoveryPointReceived".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.lastRecoveryPointReceived = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastRpoInSeconds".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.lastRpoInSeconds = reader.getNullable(JsonReader::getLong);
                } else if ("lastRpoCalculatedTime".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.lastRpoCalculatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastRecoveryPointId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.lastRecoveryPointId = reader.getString();
                } else if ("initialReplicationProgressPercentage".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.initialReplicationProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("initialReplicationProcessedBytes".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.initialReplicationProcessedBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("initialReplicationTransferredBytes".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.initialReplicationTransferredBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("initialReplicationProgressHealth".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.initialReplicationProgressHealth
                        = VmReplicationProgressHealth.fromString(reader.getString());
                } else if ("resyncProgressPercentage".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.resyncProgressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("resyncProcessedBytes".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.resyncProcessedBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("resyncTransferredBytes".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.resyncTransferredBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("resyncProgressHealth".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.resyncProgressHealth
                        = VmReplicationProgressHealth.fromString(reader.getString());
                } else if ("resyncRequired".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.resyncRequired = reader.getString();
                } else if ("resyncState".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.resyncState = ResyncState.fromString(reader.getString());
                } else if ("agentUpgradeState".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.agentUpgradeState
                        = MobilityAgentUpgradeState.fromString(reader.getString());
                } else if ("lastAgentUpgradeType".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.lastAgentUpgradeType = reader.getString();
                } else if ("agentUpgradeJobId".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.agentUpgradeJobId = reader.getString();
                } else if ("agentUpgradeAttemptToVersion".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.agentUpgradeAttemptToVersion = reader.getString();
                } else if ("protectedDisks".equals(fieldName)) {
                    List<InMageRcmProtectedDiskDetails> protectedDisks
                        = reader.readArray(reader1 -> InMageRcmProtectedDiskDetails.fromJson(reader1));
                    deserializedInMageRcmReplicationDetails.protectedDisks = protectedDisks;
                } else if ("isLastUpgradeSuccessful".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.isLastUpgradeSuccessful = reader.getString();
                } else if ("isAgentRegistrationSuccessfulAfterFailover".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.isAgentRegistrationSuccessfulAfterFailover
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("mobilityAgentDetails".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.mobilityAgentDetails
                        = InMageRcmMobilityAgentDetails.fromJson(reader);
                } else if ("lastAgentUpgradeErrorDetails".equals(fieldName)) {
                    List<InMageRcmLastAgentUpgradeErrorDetails> lastAgentUpgradeErrorDetails
                        = reader.readArray(reader1 -> InMageRcmLastAgentUpgradeErrorDetails.fromJson(reader1));
                    deserializedInMageRcmReplicationDetails.lastAgentUpgradeErrorDetails = lastAgentUpgradeErrorDetails;
                } else if ("agentUpgradeBlockingErrorDetails".equals(fieldName)) {
                    List<InMageRcmAgentUpgradeBlockingErrorDetails> agentUpgradeBlockingErrorDetails
                        = reader.readArray(reader1 -> InMageRcmAgentUpgradeBlockingErrorDetails.fromJson(reader1));
                    deserializedInMageRcmReplicationDetails.agentUpgradeBlockingErrorDetails
                        = agentUpgradeBlockingErrorDetails;
                } else if ("vmNics".equals(fieldName)) {
                    List<InMageRcmNicDetails> vmNics
                        = reader.readArray(reader1 -> InMageRcmNicDetails.fromJson(reader1));
                    deserializedInMageRcmReplicationDetails.vmNics = vmNics;
                } else if ("discoveredVmDetails".equals(fieldName)) {
                    deserializedInMageRcmReplicationDetails.discoveredVmDetails
                        = InMageRcmDiscoveredProtectedVmDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageRcmReplicationDetails;
        });
    }
}
