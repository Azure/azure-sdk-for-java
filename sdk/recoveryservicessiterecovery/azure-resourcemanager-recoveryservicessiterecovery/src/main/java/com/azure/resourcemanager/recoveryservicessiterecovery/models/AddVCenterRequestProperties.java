// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of an add vCenter request.
 */
@Fluent
public final class AddVCenterRequestProperties implements JsonSerializable<AddVCenterRequestProperties> {
    /*
     * The friendly name of the vCenter.
     */
    private String friendlyName;

    /*
     * The IP address of the vCenter to be discovered.
     */
    private String ipAddress;

    /*
     * The process server Id from where the discovery is orchestrated.
     */
    private String processServerId;

    /*
     * The port number for discovery.
     */
    private String port;

    /*
     * The account Id which has privileges to discover the vCenter.
     */
    private String runAsAccountId;

    /**
     * Creates an instance of AddVCenterRequestProperties class.
     */
    public AddVCenterRequestProperties() {
    }

    /**
     * Get the friendlyName property: The friendly name of the vCenter.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The friendly name of the vCenter.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the AddVCenterRequestProperties object itself.
     */
    public AddVCenterRequestProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the ipAddress property: The IP address of the vCenter to be discovered.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: The IP address of the vCenter to be discovered.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the AddVCenterRequestProperties object itself.
     */
    public AddVCenterRequestProperties withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the processServerId property: The process server Id from where the discovery is orchestrated.
     * 
     * @return the processServerId value.
     */
    public String processServerId() {
        return this.processServerId;
    }

    /**
     * Set the processServerId property: The process server Id from where the discovery is orchestrated.
     * 
     * @param processServerId the processServerId value to set.
     * @return the AddVCenterRequestProperties object itself.
     */
    public AddVCenterRequestProperties withProcessServerId(String processServerId) {
        this.processServerId = processServerId;
        return this;
    }

    /**
     * Get the port property: The port number for discovery.
     * 
     * @return the port value.
     */
    public String port() {
        return this.port;
    }

    /**
     * Set the port property: The port number for discovery.
     * 
     * @param port the port value to set.
     * @return the AddVCenterRequestProperties object itself.
     */
    public AddVCenterRequestProperties withPort(String port) {
        this.port = port;
        return this;
    }

    /**
     * Get the runAsAccountId property: The account Id which has privileges to discover the vCenter.
     * 
     * @return the runAsAccountId value.
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }

    /**
     * Set the runAsAccountId property: The account Id which has privileges to discover the vCenter.
     * 
     * @param runAsAccountId the runAsAccountId value to set.
     * @return the AddVCenterRequestProperties object itself.
     */
    public AddVCenterRequestProperties withRunAsAccountId(String runAsAccountId) {
        this.runAsAccountId = runAsAccountId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("processServerId", this.processServerId);
        jsonWriter.writeStringField("port", this.port);
        jsonWriter.writeStringField("runAsAccountId", this.runAsAccountId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddVCenterRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddVCenterRequestProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddVCenterRequestProperties.
     */
    public static AddVCenterRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddVCenterRequestProperties deserializedAddVCenterRequestProperties = new AddVCenterRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedAddVCenterRequestProperties.friendlyName = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedAddVCenterRequestProperties.ipAddress = reader.getString();
                } else if ("processServerId".equals(fieldName)) {
                    deserializedAddVCenterRequestProperties.processServerId = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedAddVCenterRequestProperties.port = reader.getString();
                } else if ("runAsAccountId".equals(fieldName)) {
                    deserializedAddVCenterRequestProperties.runAsAccountId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddVCenterRequestProperties;
        });
    }
}
