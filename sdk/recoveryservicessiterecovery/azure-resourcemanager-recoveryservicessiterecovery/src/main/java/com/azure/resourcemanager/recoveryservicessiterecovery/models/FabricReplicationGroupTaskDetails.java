// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This class represents the fabric replication group task details.
 */
@Fluent
public final class FabricReplicationGroupTaskDetails extends JobTaskDetails {
    /*
     * The type of task details.
     */
    private String instanceType = "FabricReplicationGroupTaskDetails";

    /*
     * The skipped reason.
     */
    private String skippedReason;

    /*
     * The skipped reason string.
     */
    private String skippedReasonString;

    /**
     * Creates an instance of FabricReplicationGroupTaskDetails class.
     */
    public FabricReplicationGroupTaskDetails() {
    }

    /**
     * Get the instanceType property: The type of task details.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the skippedReason property: The skipped reason.
     * 
     * @return the skippedReason value.
     */
    public String skippedReason() {
        return this.skippedReason;
    }

    /**
     * Set the skippedReason property: The skipped reason.
     * 
     * @param skippedReason the skippedReason value to set.
     * @return the FabricReplicationGroupTaskDetails object itself.
     */
    public FabricReplicationGroupTaskDetails withSkippedReason(String skippedReason) {
        this.skippedReason = skippedReason;
        return this;
    }

    /**
     * Get the skippedReasonString property: The skipped reason string.
     * 
     * @return the skippedReasonString value.
     */
    public String skippedReasonString() {
        return this.skippedReasonString;
    }

    /**
     * Set the skippedReasonString property: The skipped reason string.
     * 
     * @param skippedReasonString the skippedReasonString value to set.
     * @return the FabricReplicationGroupTaskDetails object itself.
     */
    public FabricReplicationGroupTaskDetails withSkippedReasonString(String skippedReasonString) {
        this.skippedReasonString = skippedReasonString;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FabricReplicationGroupTaskDetails withJobTask(JobEntity jobTask) {
        super.withJobTask(jobTask);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (jobTask() != null) {
            jobTask().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("jobTask", jobTask());
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("skippedReason", this.skippedReason);
        jsonWriter.writeStringField("skippedReasonString", this.skippedReasonString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricReplicationGroupTaskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricReplicationGroupTaskDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FabricReplicationGroupTaskDetails.
     */
    public static FabricReplicationGroupTaskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricReplicationGroupTaskDetails deserializedFabricReplicationGroupTaskDetails
                = new FabricReplicationGroupTaskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobTask".equals(fieldName)) {
                    deserializedFabricReplicationGroupTaskDetails.withJobTask(JobEntity.fromJson(reader));
                } else if ("instanceType".equals(fieldName)) {
                    deserializedFabricReplicationGroupTaskDetails.instanceType = reader.getString();
                } else if ("skippedReason".equals(fieldName)) {
                    deserializedFabricReplicationGroupTaskDetails.skippedReason = reader.getString();
                } else if ("skippedReasonString".equals(fieldName)) {
                    deserializedFabricReplicationGroupTaskDetails.skippedReasonString = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFabricReplicationGroupTaskDetails;
        });
    }
}
