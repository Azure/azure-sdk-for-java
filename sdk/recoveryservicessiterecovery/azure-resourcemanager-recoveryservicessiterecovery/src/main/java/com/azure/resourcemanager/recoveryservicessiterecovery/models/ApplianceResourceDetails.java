// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the appliance resource.
 */
@Immutable
public final class ApplianceResourceDetails implements JsonSerializable<ApplianceResourceDetails> {
    /*
     * A value indicating the total capacity of appliance resource.
     */
    private Long capacity;

    /*
     * A value indicating the utilization percentage by gateway agent on appliance.
     */
    private Double processUtilization;

    /*
     * A value indicating the total utilization percentage for all processes on the appliance.
     */
    private Double totalUtilization;

    /*
     * A value indicating the status of appliance resource.
     */
    private String status;

    /**
     * Creates an instance of ApplianceResourceDetails class.
     */
    public ApplianceResourceDetails() {
    }

    /**
     * Get the capacity property: A value indicating the total capacity of appliance resource.
     * 
     * @return the capacity value.
     */
    public Long capacity() {
        return this.capacity;
    }

    /**
     * Get the processUtilization property: A value indicating the utilization percentage by gateway agent on appliance.
     * 
     * @return the processUtilization value.
     */
    public Double processUtilization() {
        return this.processUtilization;
    }

    /**
     * Get the totalUtilization property: A value indicating the total utilization percentage for all processes on the
     * appliance.
     * 
     * @return the totalUtilization value.
     */
    public Double totalUtilization() {
        return this.totalUtilization;
    }

    /**
     * Get the status property: A value indicating the status of appliance resource.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplianceResourceDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplianceResourceDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplianceResourceDetails.
     */
    public static ApplianceResourceDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplianceResourceDetails deserializedApplianceResourceDetails = new ApplianceResourceDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("capacity".equals(fieldName)) {
                    deserializedApplianceResourceDetails.capacity = reader.getNullable(JsonReader::getLong);
                } else if ("processUtilization".equals(fieldName)) {
                    deserializedApplianceResourceDetails.processUtilization = reader.getNullable(JsonReader::getDouble);
                } else if ("totalUtilization".equals(fieldName)) {
                    deserializedApplianceResourceDetails.totalUtilization = reader.getNullable(JsonReader::getDouble);
                } else if ("status".equals(fieldName)) {
                    deserializedApplianceResourceDetails.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplianceResourceDetails;
        });
    }
}
