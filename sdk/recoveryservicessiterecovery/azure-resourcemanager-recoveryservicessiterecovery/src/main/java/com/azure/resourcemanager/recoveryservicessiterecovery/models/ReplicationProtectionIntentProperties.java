// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Replication protection intent custom data details.
 */
@Fluent
public final class ReplicationProtectionIntentProperties
    implements JsonSerializable<ReplicationProtectionIntentProperties> {
    /*
     * The name.
     */
    private String friendlyName;

    /*
     * The job Id.
     */
    private String jobId;

    /*
     * The job state.
     */
    private String jobState;

    /*
     * A value indicating whether the intent object is active.
     */
    private Boolean isActive;

    /*
     * The creation time in UTC.
     */
    private String creationTimeUtc;

    /*
     * The Replication provider custom settings.
     */
    private ReplicationProtectionIntentProviderSpecificSettings providerSpecificDetails;

    /**
     * Creates an instance of ReplicationProtectionIntentProperties class.
     */
    public ReplicationProtectionIntentProperties() {
    }

    /**
     * Get the friendlyName property: The name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the ReplicationProtectionIntentProperties object itself.
     */
    public ReplicationProtectionIntentProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the jobId property: The job Id.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Get the jobState property: The job state.
     * 
     * @return the jobState value.
     */
    public String jobState() {
        return this.jobState;
    }

    /**
     * Get the isActive property: A value indicating whether the intent object is active.
     * 
     * @return the isActive value.
     */
    public Boolean isActive() {
        return this.isActive;
    }

    /**
     * Get the creationTimeUtc property: The creation time in UTC.
     * 
     * @return the creationTimeUtc value.
     */
    public String creationTimeUtc() {
        return this.creationTimeUtc;
    }

    /**
     * Get the providerSpecificDetails property: The Replication provider custom settings.
     * 
     * @return the providerSpecificDetails value.
     */
    public ReplicationProtectionIntentProviderSpecificSettings providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: The Replication provider custom settings.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the ReplicationProtectionIntentProperties object itself.
     */
    public ReplicationProtectionIntentProperties
        withProviderSpecificDetails(ReplicationProtectionIntentProviderSpecificSettings providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerSpecificDetails() != null) {
            providerSpecificDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationProtectionIntentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationProtectionIntentProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationProtectionIntentProperties.
     */
    public static ReplicationProtectionIntentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationProtectionIntentProperties deserializedReplicationProtectionIntentProperties
                = new ReplicationProtectionIntentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("friendlyName".equals(fieldName)) {
                    deserializedReplicationProtectionIntentProperties.friendlyName = reader.getString();
                } else if ("jobId".equals(fieldName)) {
                    deserializedReplicationProtectionIntentProperties.jobId = reader.getString();
                } else if ("jobState".equals(fieldName)) {
                    deserializedReplicationProtectionIntentProperties.jobState = reader.getString();
                } else if ("isActive".equals(fieldName)) {
                    deserializedReplicationProtectionIntentProperties.isActive
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("creationTimeUTC".equals(fieldName)) {
                    deserializedReplicationProtectionIntentProperties.creationTimeUtc = reader.getString();
                } else if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedReplicationProtectionIntentProperties.providerSpecificDetails
                        = ReplicationProtectionIntentProviderSpecificSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationProtectionIntentProperties;
        });
    }
}
