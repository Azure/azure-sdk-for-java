// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Security profile input.
 */
@Fluent
public final class SecurityProfileProperties implements JsonSerializable<SecurityProfileProperties> {
    /*
     * The target VM security type.
     */
    private SecurityType targetVmSecurityType;

    /*
     * A value indicating whether secure boot to be enabled.
     */
    private SecurityConfiguration targetVmSecureBoot;

    /*
     * A value indicating whether trusted platform module to be enabled.
     */
    private SecurityConfiguration targetVmTpm;

    /*
     * A value indicating whether integrity monitoring to be enabled.
     */
    private SecurityConfiguration targetVmMonitoring;

    /*
     * A value indicating whether confidential compute encryption to be enabled.
     */
    private SecurityConfiguration targetVmConfidentialEncryption;

    /**
     * Creates an instance of SecurityProfileProperties class.
     */
    public SecurityProfileProperties() {
    }

    /**
     * Get the targetVmSecurityType property: The target VM security type.
     * 
     * @return the targetVmSecurityType value.
     */
    public SecurityType targetVmSecurityType() {
        return this.targetVmSecurityType;
    }

    /**
     * Set the targetVmSecurityType property: The target VM security type.
     * 
     * @param targetVmSecurityType the targetVmSecurityType value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmSecurityType(SecurityType targetVmSecurityType) {
        this.targetVmSecurityType = targetVmSecurityType;
        return this;
    }

    /**
     * Get the targetVmSecureBoot property: A value indicating whether secure boot to be enabled.
     * 
     * @return the targetVmSecureBoot value.
     */
    public SecurityConfiguration targetVmSecureBoot() {
        return this.targetVmSecureBoot;
    }

    /**
     * Set the targetVmSecureBoot property: A value indicating whether secure boot to be enabled.
     * 
     * @param targetVmSecureBoot the targetVmSecureBoot value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmSecureBoot(SecurityConfiguration targetVmSecureBoot) {
        this.targetVmSecureBoot = targetVmSecureBoot;
        return this;
    }

    /**
     * Get the targetVmTpm property: A value indicating whether trusted platform module to be enabled.
     * 
     * @return the targetVmTpm value.
     */
    public SecurityConfiguration targetVmTpm() {
        return this.targetVmTpm;
    }

    /**
     * Set the targetVmTpm property: A value indicating whether trusted platform module to be enabled.
     * 
     * @param targetVmTpm the targetVmTpm value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmTpm(SecurityConfiguration targetVmTpm) {
        this.targetVmTpm = targetVmTpm;
        return this;
    }

    /**
     * Get the targetVmMonitoring property: A value indicating whether integrity monitoring to be enabled.
     * 
     * @return the targetVmMonitoring value.
     */
    public SecurityConfiguration targetVmMonitoring() {
        return this.targetVmMonitoring;
    }

    /**
     * Set the targetVmMonitoring property: A value indicating whether integrity monitoring to be enabled.
     * 
     * @param targetVmMonitoring the targetVmMonitoring value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmMonitoring(SecurityConfiguration targetVmMonitoring) {
        this.targetVmMonitoring = targetVmMonitoring;
        return this;
    }

    /**
     * Get the targetVmConfidentialEncryption property: A value indicating whether confidential compute encryption to be
     * enabled.
     * 
     * @return the targetVmConfidentialEncryption value.
     */
    public SecurityConfiguration targetVmConfidentialEncryption() {
        return this.targetVmConfidentialEncryption;
    }

    /**
     * Set the targetVmConfidentialEncryption property: A value indicating whether confidential compute encryption to be
     * enabled.
     * 
     * @param targetVmConfidentialEncryption the targetVmConfidentialEncryption value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties
        withTargetVmConfidentialEncryption(SecurityConfiguration targetVmConfidentialEncryption) {
        this.targetVmConfidentialEncryption = targetVmConfidentialEncryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetVmSecurityType",
            this.targetVmSecurityType == null ? null : this.targetVmSecurityType.toString());
        jsonWriter.writeStringField("targetVmSecureBoot",
            this.targetVmSecureBoot == null ? null : this.targetVmSecureBoot.toString());
        jsonWriter.writeStringField("targetVmTpm", this.targetVmTpm == null ? null : this.targetVmTpm.toString());
        jsonWriter.writeStringField("targetVmMonitoring",
            this.targetVmMonitoring == null ? null : this.targetVmMonitoring.toString());
        jsonWriter.writeStringField("targetVmConfidentialEncryption",
            this.targetVmConfidentialEncryption == null ? null : this.targetVmConfidentialEncryption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityProfileProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecurityProfileProperties.
     */
    public static SecurityProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityProfileProperties deserializedSecurityProfileProperties = new SecurityProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetVmSecurityType".equals(fieldName)) {
                    deserializedSecurityProfileProperties.targetVmSecurityType
                        = SecurityType.fromString(reader.getString());
                } else if ("targetVmSecureBoot".equals(fieldName)) {
                    deserializedSecurityProfileProperties.targetVmSecureBoot
                        = SecurityConfiguration.fromString(reader.getString());
                } else if ("targetVmTpm".equals(fieldName)) {
                    deserializedSecurityProfileProperties.targetVmTpm
                        = SecurityConfiguration.fromString(reader.getString());
                } else if ("targetVmMonitoring".equals(fieldName)) {
                    deserializedSecurityProfileProperties.targetVmMonitoring
                        = SecurityConfiguration.fromString(reader.getString());
                } else if ("targetVmConfidentialEncryption".equals(fieldName)) {
                    deserializedSecurityProfileProperties.targetVmConfidentialEncryption
                        = SecurityConfiguration.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityProfileProperties;
        });
    }
}
