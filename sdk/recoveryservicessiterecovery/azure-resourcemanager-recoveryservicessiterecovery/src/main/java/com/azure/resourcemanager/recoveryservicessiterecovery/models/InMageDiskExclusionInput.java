// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DiskExclusionInput when doing enable protection of virtual machine in InMage provider.
 */
@Fluent
public final class InMageDiskExclusionInput implements JsonSerializable<InMageDiskExclusionInput> {
    /*
     * The volume label based option for disk exclusion.
     */
    private List<InMageVolumeExclusionOptions> volumeOptions;

    /*
     * The guest disk signature based option for disk exclusion.
     */
    private List<InMageDiskSignatureExclusionOptions> diskSignatureOptions;

    /**
     * Creates an instance of InMageDiskExclusionInput class.
     */
    public InMageDiskExclusionInput() {
    }

    /**
     * Get the volumeOptions property: The volume label based option for disk exclusion.
     * 
     * @return the volumeOptions value.
     */
    public List<InMageVolumeExclusionOptions> volumeOptions() {
        return this.volumeOptions;
    }

    /**
     * Set the volumeOptions property: The volume label based option for disk exclusion.
     * 
     * @param volumeOptions the volumeOptions value to set.
     * @return the InMageDiskExclusionInput object itself.
     */
    public InMageDiskExclusionInput withVolumeOptions(List<InMageVolumeExclusionOptions> volumeOptions) {
        this.volumeOptions = volumeOptions;
        return this;
    }

    /**
     * Get the diskSignatureOptions property: The guest disk signature based option for disk exclusion.
     * 
     * @return the diskSignatureOptions value.
     */
    public List<InMageDiskSignatureExclusionOptions> diskSignatureOptions() {
        return this.diskSignatureOptions;
    }

    /**
     * Set the diskSignatureOptions property: The guest disk signature based option for disk exclusion.
     * 
     * @param diskSignatureOptions the diskSignatureOptions value to set.
     * @return the InMageDiskExclusionInput object itself.
     */
    public InMageDiskExclusionInput
        withDiskSignatureOptions(List<InMageDiskSignatureExclusionOptions> diskSignatureOptions) {
        this.diskSignatureOptions = diskSignatureOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (volumeOptions() != null) {
            volumeOptions().forEach(e -> e.validate());
        }
        if (diskSignatureOptions() != null) {
            diskSignatureOptions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("volumeOptions", this.volumeOptions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("diskSignatureOptions", this.diskSignatureOptions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InMageDiskExclusionInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InMageDiskExclusionInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InMageDiskExclusionInput.
     */
    public static InMageDiskExclusionInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InMageDiskExclusionInput deserializedInMageDiskExclusionInput = new InMageDiskExclusionInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("volumeOptions".equals(fieldName)) {
                    List<InMageVolumeExclusionOptions> volumeOptions
                        = reader.readArray(reader1 -> InMageVolumeExclusionOptions.fromJson(reader1));
                    deserializedInMageDiskExclusionInput.volumeOptions = volumeOptions;
                } else if ("diskSignatureOptions".equals(fieldName)) {
                    List<InMageDiskSignatureExclusionOptions> diskSignatureOptions
                        = reader.readArray(reader1 -> InMageDiskSignatureExclusionOptions.fromJson(reader1));
                    deserializedInMageDiskExclusionInput.diskSignatureOptions = diskSignatureOptions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInMageDiskExclusionInput;
        });
    }
}
