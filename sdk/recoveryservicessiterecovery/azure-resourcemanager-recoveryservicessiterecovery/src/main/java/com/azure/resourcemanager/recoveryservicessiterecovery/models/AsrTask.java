// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Task of the Job.
 */
@Fluent
public final class AsrTask implements JsonSerializable<AsrTask> {
    /*
     * The Id.
     */
    private String taskId;

    /*
     * The unique Task name.
     */
    private String name;

    /*
     * The start time.
     */
    private OffsetDateTime startTime;

    /*
     * The end time.
     */
    private OffsetDateTime endTime;

    /*
     * The state/actions applicable on this task.
     */
    private List<String> allowedActions;

    /*
     * The name.
     */
    private String friendlyName;

    /*
     * The State. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other.
     */
    private String state;

    /*
     * The description of the task state. For example - For Succeeded state, description can be Completed,
     * PartiallySucceeded, CompletedWithInformation or Skipped.
     */
    private String stateDescription;

    /*
     * The type of task. Details in CustomDetails property depend on this type.
     */
    private String taskType;

    /*
     * The custom task details based on the task type.
     */
    private TaskTypeDetails customDetails;

    /*
     * The custom task details based on the task type, if the task type is GroupTaskDetails or one of the types derived
     * from it.
     */
    private GroupTaskDetails groupTaskCustomDetails;

    /*
     * The task error details.
     */
    private List<JobErrorDetails> errors;

    /**
     * Creates an instance of AsrTask class.
     */
    public AsrTask() {
    }

    /**
     * Get the taskId property: The Id.
     * 
     * @return the taskId value.
     */
    public String taskId() {
        return this.taskId;
    }

    /**
     * Set the taskId property: The Id.
     * 
     * @param taskId the taskId value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withTaskId(String taskId) {
        this.taskId = taskId;
        return this;
    }

    /**
     * Get the name property: The unique Task name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The unique Task name.
     * 
     * @param name the name value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the startTime property: The start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time.
     * 
     * @param startTime the startTime value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time.
     * 
     * @param endTime the endTime value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the allowedActions property: The state/actions applicable on this task.
     * 
     * @return the allowedActions value.
     */
    public List<String> allowedActions() {
        return this.allowedActions;
    }

    /**
     * Set the allowedActions property: The state/actions applicable on this task.
     * 
     * @param allowedActions the allowedActions value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withAllowedActions(List<String> allowedActions) {
        this.allowedActions = allowedActions;
        return this;
    }

    /**
     * Get the friendlyName property: The name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the state property: The State. It is one of these values - NotStarted, InProgress, Succeeded, Failed,
     * Cancelled, Suspended or Other.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: The State. It is one of these values - NotStarted, InProgress, Succeeded, Failed,
     * Cancelled, Suspended or Other.
     * 
     * @param state the state value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the stateDescription property: The description of the task state. For example - For Succeeded state,
     * description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.
     * 
     * @return the stateDescription value.
     */
    public String stateDescription() {
        return this.stateDescription;
    }

    /**
     * Set the stateDescription property: The description of the task state. For example - For Succeeded state,
     * description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.
     * 
     * @param stateDescription the stateDescription value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withStateDescription(String stateDescription) {
        this.stateDescription = stateDescription;
        return this;
    }

    /**
     * Get the taskType property: The type of task. Details in CustomDetails property depend on this type.
     * 
     * @return the taskType value.
     */
    public String taskType() {
        return this.taskType;
    }

    /**
     * Set the taskType property: The type of task. Details in CustomDetails property depend on this type.
     * 
     * @param taskType the taskType value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withTaskType(String taskType) {
        this.taskType = taskType;
        return this;
    }

    /**
     * Get the customDetails property: The custom task details based on the task type.
     * 
     * @return the customDetails value.
     */
    public TaskTypeDetails customDetails() {
        return this.customDetails;
    }

    /**
     * Set the customDetails property: The custom task details based on the task type.
     * 
     * @param customDetails the customDetails value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withCustomDetails(TaskTypeDetails customDetails) {
        this.customDetails = customDetails;
        return this;
    }

    /**
     * Get the groupTaskCustomDetails property: The custom task details based on the task type, if the task type is
     * GroupTaskDetails or one of the types derived from it.
     * 
     * @return the groupTaskCustomDetails value.
     */
    public GroupTaskDetails groupTaskCustomDetails() {
        return this.groupTaskCustomDetails;
    }

    /**
     * Set the groupTaskCustomDetails property: The custom task details based on the task type, if the task type is
     * GroupTaskDetails or one of the types derived from it.
     * 
     * @param groupTaskCustomDetails the groupTaskCustomDetails value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withGroupTaskCustomDetails(GroupTaskDetails groupTaskCustomDetails) {
        this.groupTaskCustomDetails = groupTaskCustomDetails;
        return this;
    }

    /**
     * Get the errors property: The task error details.
     * 
     * @return the errors value.
     */
    public List<JobErrorDetails> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The task error details.
     * 
     * @param errors the errors value to set.
     * @return the AsrTask object itself.
     */
    public AsrTask withErrors(List<JobErrorDetails> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customDetails() != null) {
            customDetails().validate();
        }
        if (groupTaskCustomDetails() != null) {
            groupTaskCustomDetails().validate();
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("taskId", this.taskId);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeArrayField("allowedActions", this.allowedActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("stateDescription", this.stateDescription);
        jsonWriter.writeStringField("taskType", this.taskType);
        jsonWriter.writeJsonField("customDetails", this.customDetails);
        jsonWriter.writeJsonField("groupTaskCustomDetails", this.groupTaskCustomDetails);
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AsrTask from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AsrTask if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the AsrTask.
     */
    public static AsrTask fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AsrTask deserializedAsrTask = new AsrTask();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("taskId".equals(fieldName)) {
                    deserializedAsrTask.taskId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAsrTask.name = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedAsrTask.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedAsrTask.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("allowedActions".equals(fieldName)) {
                    List<String> allowedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAsrTask.allowedActions = allowedActions;
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedAsrTask.friendlyName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedAsrTask.state = reader.getString();
                } else if ("stateDescription".equals(fieldName)) {
                    deserializedAsrTask.stateDescription = reader.getString();
                } else if ("taskType".equals(fieldName)) {
                    deserializedAsrTask.taskType = reader.getString();
                } else if ("customDetails".equals(fieldName)) {
                    deserializedAsrTask.customDetails = TaskTypeDetails.fromJson(reader);
                } else if ("groupTaskCustomDetails".equals(fieldName)) {
                    deserializedAsrTask.groupTaskCustomDetails = GroupTaskDetails.fromJson(reader);
                } else if ("errors".equals(fieldName)) {
                    List<JobErrorDetails> errors = reader.readArray(reader1 -> JobErrorDetails.fromJson(reader1));
                    deserializedAsrTask.errors = errors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAsrTask;
        });
    }
}
