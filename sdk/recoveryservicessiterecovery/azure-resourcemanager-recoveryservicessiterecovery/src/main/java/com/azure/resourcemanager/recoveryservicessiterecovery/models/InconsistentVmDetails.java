// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This class stores the monitoring details for consistency check of inconsistent Protected Entity.
 */
@Fluent
public final class InconsistentVmDetails implements JsonSerializable<InconsistentVmDetails> {
    /*
     * The Vm name.
     */
    private String vmName;

    /*
     * The Cloud name.
     */
    private String cloudName;

    /*
     * The list of details regarding state of the Protected Entity in SRS and On prem.
     */
    private List<String> details;

    /*
     * The list of error ids.
     */
    private List<String> errorIds;

    /**
     * Creates an instance of InconsistentVmDetails class.
     */
    public InconsistentVmDetails() {
    }

    /**
     * Get the vmName property: The Vm name.
     * 
     * @return the vmName value.
     */
    public String vmName() {
        return this.vmName;
    }

    /**
     * Set the vmName property: The Vm name.
     * 
     * @param vmName the vmName value to set.
     * @return the InconsistentVmDetails object itself.
     */
    public InconsistentVmDetails withVmName(String vmName) {
        this.vmName = vmName;
        return this;
    }

    /**
     * Get the cloudName property: The Cloud name.
     * 
     * @return the cloudName value.
     */
    public String cloudName() {
        return this.cloudName;
    }

    /**
     * Set the cloudName property: The Cloud name.
     * 
     * @param cloudName the cloudName value to set.
     * @return the InconsistentVmDetails object itself.
     */
    public InconsistentVmDetails withCloudName(String cloudName) {
        this.cloudName = cloudName;
        return this;
    }

    /**
     * Get the details property: The list of details regarding state of the Protected Entity in SRS and On prem.
     * 
     * @return the details value.
     */
    public List<String> details() {
        return this.details;
    }

    /**
     * Set the details property: The list of details regarding state of the Protected Entity in SRS and On prem.
     * 
     * @param details the details value to set.
     * @return the InconsistentVmDetails object itself.
     */
    public InconsistentVmDetails withDetails(List<String> details) {
        this.details = details;
        return this;
    }

    /**
     * Get the errorIds property: The list of error ids.
     * 
     * @return the errorIds value.
     */
    public List<String> errorIds() {
        return this.errorIds;
    }

    /**
     * Set the errorIds property: The list of error ids.
     * 
     * @param errorIds the errorIds value to set.
     * @return the InconsistentVmDetails object itself.
     */
    public InconsistentVmDetails withErrorIds(List<String> errorIds) {
        this.errorIds = errorIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmName", this.vmName);
        jsonWriter.writeStringField("cloudName", this.cloudName);
        jsonWriter.writeArrayField("details", this.details, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("errorIds", this.errorIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InconsistentVmDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InconsistentVmDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InconsistentVmDetails.
     */
    public static InconsistentVmDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InconsistentVmDetails deserializedInconsistentVmDetails = new InconsistentVmDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmName".equals(fieldName)) {
                    deserializedInconsistentVmDetails.vmName = reader.getString();
                } else if ("cloudName".equals(fieldName)) {
                    deserializedInconsistentVmDetails.cloudName = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<String> details = reader.readArray(reader1 -> reader1.getString());
                    deserializedInconsistentVmDetails.details = details;
                } else if ("errorIds".equals(fieldName)) {
                    List<String> errorIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedInconsistentVmDetails.errorIds = errorIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInconsistentVmDetails;
        });
    }
}
