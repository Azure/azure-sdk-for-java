// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Protection profile custom data details.
 */
@Fluent
public final class ProtectionContainerProperties implements JsonSerializable<ProtectionContainerProperties> {
    /*
     * Fabric friendly name.
     */
    private String fabricFriendlyName;

    /*
     * The name.
     */
    private String friendlyName;

    /*
     * The fabric type.
     */
    private String fabricType;

    /*
     * Number of protected PEs.
     */
    private Integer protectedItemCount;

    /*
     * The pairing status of this cloud.
     */
    private String pairingStatus;

    /*
     * The role of this cloud.
     */
    private String role;

    /*
     * Fabric specific details.
     */
    private ProtectionContainerFabricSpecificDetails fabricSpecificDetails;

    /**
     * Creates an instance of ProtectionContainerProperties class.
     */
    public ProtectionContainerProperties() {
    }

    /**
     * Get the fabricFriendlyName property: Fabric friendly name.
     * 
     * @return the fabricFriendlyName value.
     */
    public String fabricFriendlyName() {
        return this.fabricFriendlyName;
    }

    /**
     * Set the fabricFriendlyName property: Fabric friendly name.
     * 
     * @param fabricFriendlyName the fabricFriendlyName value to set.
     * @return the ProtectionContainerProperties object itself.
     */
    public ProtectionContainerProperties withFabricFriendlyName(String fabricFriendlyName) {
        this.fabricFriendlyName = fabricFriendlyName;
        return this;
    }

    /**
     * Get the friendlyName property: The name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the ProtectionContainerProperties object itself.
     */
    public ProtectionContainerProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the fabricType property: The fabric type.
     * 
     * @return the fabricType value.
     */
    public String fabricType() {
        return this.fabricType;
    }

    /**
     * Set the fabricType property: The fabric type.
     * 
     * @param fabricType the fabricType value to set.
     * @return the ProtectionContainerProperties object itself.
     */
    public ProtectionContainerProperties withFabricType(String fabricType) {
        this.fabricType = fabricType;
        return this;
    }

    /**
     * Get the protectedItemCount property: Number of protected PEs.
     * 
     * @return the protectedItemCount value.
     */
    public Integer protectedItemCount() {
        return this.protectedItemCount;
    }

    /**
     * Set the protectedItemCount property: Number of protected PEs.
     * 
     * @param protectedItemCount the protectedItemCount value to set.
     * @return the ProtectionContainerProperties object itself.
     */
    public ProtectionContainerProperties withProtectedItemCount(Integer protectedItemCount) {
        this.protectedItemCount = protectedItemCount;
        return this;
    }

    /**
     * Get the pairingStatus property: The pairing status of this cloud.
     * 
     * @return the pairingStatus value.
     */
    public String pairingStatus() {
        return this.pairingStatus;
    }

    /**
     * Set the pairingStatus property: The pairing status of this cloud.
     * 
     * @param pairingStatus the pairingStatus value to set.
     * @return the ProtectionContainerProperties object itself.
     */
    public ProtectionContainerProperties withPairingStatus(String pairingStatus) {
        this.pairingStatus = pairingStatus;
        return this;
    }

    /**
     * Get the role property: The role of this cloud.
     * 
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: The role of this cloud.
     * 
     * @param role the role value to set.
     * @return the ProtectionContainerProperties object itself.
     */
    public ProtectionContainerProperties withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Get the fabricSpecificDetails property: Fabric specific details.
     * 
     * @return the fabricSpecificDetails value.
     */
    public ProtectionContainerFabricSpecificDetails fabricSpecificDetails() {
        return this.fabricSpecificDetails;
    }

    /**
     * Set the fabricSpecificDetails property: Fabric specific details.
     * 
     * @param fabricSpecificDetails the fabricSpecificDetails value to set.
     * @return the ProtectionContainerProperties object itself.
     */
    public ProtectionContainerProperties
        withFabricSpecificDetails(ProtectionContainerFabricSpecificDetails fabricSpecificDetails) {
        this.fabricSpecificDetails = fabricSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fabricSpecificDetails() != null) {
            fabricSpecificDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fabricFriendlyName", this.fabricFriendlyName);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("fabricType", this.fabricType);
        jsonWriter.writeNumberField("protectedItemCount", this.protectedItemCount);
        jsonWriter.writeStringField("pairingStatus", this.pairingStatus);
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeJsonField("fabricSpecificDetails", this.fabricSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProtectionContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProtectionContainerProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProtectionContainerProperties.
     */
    public static ProtectionContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProtectionContainerProperties deserializedProtectionContainerProperties
                = new ProtectionContainerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fabricFriendlyName".equals(fieldName)) {
                    deserializedProtectionContainerProperties.fabricFriendlyName = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedProtectionContainerProperties.friendlyName = reader.getString();
                } else if ("fabricType".equals(fieldName)) {
                    deserializedProtectionContainerProperties.fabricType = reader.getString();
                } else if ("protectedItemCount".equals(fieldName)) {
                    deserializedProtectionContainerProperties.protectedItemCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("pairingStatus".equals(fieldName)) {
                    deserializedProtectionContainerProperties.pairingStatus = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedProtectionContainerProperties.role = reader.getString();
                } else if ("fabricSpecificDetails".equals(fieldName)) {
                    deserializedProtectionContainerProperties.fabricSpecificDetails
                        = ProtectionContainerFabricSpecificDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProtectionContainerProperties;
        });
    }
}
