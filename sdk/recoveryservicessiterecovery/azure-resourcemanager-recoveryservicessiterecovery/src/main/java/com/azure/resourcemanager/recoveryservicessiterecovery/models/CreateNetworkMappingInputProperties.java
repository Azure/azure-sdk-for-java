// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Common input details for network mapping operation.
 */
@Fluent
public final class CreateNetworkMappingInputProperties
    implements JsonSerializable<CreateNetworkMappingInputProperties> {
    /*
     * Recovery fabric Name.
     */
    private String recoveryFabricName;

    /*
     * Recovery network Id.
     */
    private String recoveryNetworkId;

    /*
     * Fabric specific input properties.
     */
    private FabricSpecificCreateNetworkMappingInput fabricSpecificDetails;

    /**
     * Creates an instance of CreateNetworkMappingInputProperties class.
     */
    public CreateNetworkMappingInputProperties() {
    }

    /**
     * Get the recoveryFabricName property: Recovery fabric Name.
     * 
     * @return the recoveryFabricName value.
     */
    public String recoveryFabricName() {
        return this.recoveryFabricName;
    }

    /**
     * Set the recoveryFabricName property: Recovery fabric Name.
     * 
     * @param recoveryFabricName the recoveryFabricName value to set.
     * @return the CreateNetworkMappingInputProperties object itself.
     */
    public CreateNetworkMappingInputProperties withRecoveryFabricName(String recoveryFabricName) {
        this.recoveryFabricName = recoveryFabricName;
        return this;
    }

    /**
     * Get the recoveryNetworkId property: Recovery network Id.
     * 
     * @return the recoveryNetworkId value.
     */
    public String recoveryNetworkId() {
        return this.recoveryNetworkId;
    }

    /**
     * Set the recoveryNetworkId property: Recovery network Id.
     * 
     * @param recoveryNetworkId the recoveryNetworkId value to set.
     * @return the CreateNetworkMappingInputProperties object itself.
     */
    public CreateNetworkMappingInputProperties withRecoveryNetworkId(String recoveryNetworkId) {
        this.recoveryNetworkId = recoveryNetworkId;
        return this;
    }

    /**
     * Get the fabricSpecificDetails property: Fabric specific input properties.
     * 
     * @return the fabricSpecificDetails value.
     */
    public FabricSpecificCreateNetworkMappingInput fabricSpecificDetails() {
        return this.fabricSpecificDetails;
    }

    /**
     * Set the fabricSpecificDetails property: Fabric specific input properties.
     * 
     * @param fabricSpecificDetails the fabricSpecificDetails value to set.
     * @return the CreateNetworkMappingInputProperties object itself.
     */
    public CreateNetworkMappingInputProperties
        withFabricSpecificDetails(FabricSpecificCreateNetworkMappingInput fabricSpecificDetails) {
        this.fabricSpecificDetails = fabricSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recoveryNetworkId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recoveryNetworkId in model CreateNetworkMappingInputProperties"));
        }
        if (fabricSpecificDetails() != null) {
            fabricSpecificDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CreateNetworkMappingInputProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recoveryNetworkId", this.recoveryNetworkId);
        jsonWriter.writeStringField("recoveryFabricName", this.recoveryFabricName);
        jsonWriter.writeJsonField("fabricSpecificDetails", this.fabricSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateNetworkMappingInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateNetworkMappingInputProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateNetworkMappingInputProperties.
     */
    public static CreateNetworkMappingInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateNetworkMappingInputProperties deserializedCreateNetworkMappingInputProperties
                = new CreateNetworkMappingInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recoveryNetworkId".equals(fieldName)) {
                    deserializedCreateNetworkMappingInputProperties.recoveryNetworkId = reader.getString();
                } else if ("recoveryFabricName".equals(fieldName)) {
                    deserializedCreateNetworkMappingInputProperties.recoveryFabricName = reader.getString();
                } else if ("fabricSpecificDetails".equals(fieldName)) {
                    deserializedCreateNetworkMappingInputProperties.fabricSpecificDetails
                        = FabricSpecificCreateNetworkMappingInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateNetworkMappingInputProperties;
        });
    }
}
