// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ASR error model.
 */
@Fluent
public final class ServiceError implements JsonSerializable<ServiceError> {
    /*
     * Error code.
     */
    private String code;

    /*
     * Error message.
     */
    private String message;

    /*
     * Possible causes of error.
     */
    private String possibleCauses;

    /*
     * Recommended action to resolve error.
     */
    private String recommendedAction;

    /*
     * Activity Id.
     */
    private String activityId;

    /**
     * Creates an instance of ServiceError class.
     */
    public ServiceError() {
    }

    /**
     * Get the code property: Error code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: Error code.
     * 
     * @param code the code value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the message property: Error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Error message.
     * 
     * @param message the message value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the possibleCauses property: Possible causes of error.
     * 
     * @return the possibleCauses value.
     */
    public String possibleCauses() {
        return this.possibleCauses;
    }

    /**
     * Set the possibleCauses property: Possible causes of error.
     * 
     * @param possibleCauses the possibleCauses value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError withPossibleCauses(String possibleCauses) {
        this.possibleCauses = possibleCauses;
        return this;
    }

    /**
     * Get the recommendedAction property: Recommended action to resolve error.
     * 
     * @return the recommendedAction value.
     */
    public String recommendedAction() {
        return this.recommendedAction;
    }

    /**
     * Set the recommendedAction property: Recommended action to resolve error.
     * 
     * @param recommendedAction the recommendedAction value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError withRecommendedAction(String recommendedAction) {
        this.recommendedAction = recommendedAction;
        return this;
    }

    /**
     * Get the activityId property: Activity Id.
     * 
     * @return the activityId value.
     */
    public String activityId() {
        return this.activityId;
    }

    /**
     * Set the activityId property: Activity Id.
     * 
     * @param activityId the activityId value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError withActivityId(String activityId) {
        this.activityId = activityId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("possibleCauses", this.possibleCauses);
        jsonWriter.writeStringField("recommendedAction", this.recommendedAction);
        jsonWriter.writeStringField("activityId", this.activityId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceError.
     */
    public static ServiceError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceError deserializedServiceError = new ServiceError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedServiceError.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedServiceError.message = reader.getString();
                } else if ("possibleCauses".equals(fieldName)) {
                    deserializedServiceError.possibleCauses = reader.getString();
                } else if ("recommendedAction".equals(fieldName)) {
                    deserializedServiceError.recommendedAction = reader.getString();
                } else if ("activityId".equals(fieldName)) {
                    deserializedServiceError.activityId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceError;
        });
    }
}
