// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input definition for switch provider input properties.
 */
@Fluent
public final class SwitchProviderInputProperties implements JsonSerializable<SwitchProviderInputProperties> {
    /*
     * Target provider type.
     */
    private String targetInstanceType;

    /*
     * Provider specific settings.
     */
    private SwitchProviderSpecificInput providerSpecificDetails;

    /**
     * Creates an instance of SwitchProviderInputProperties class.
     */
    public SwitchProviderInputProperties() {
    }

    /**
     * Get the targetInstanceType property: Target provider type.
     * 
     * @return the targetInstanceType value.
     */
    public String targetInstanceType() {
        return this.targetInstanceType;
    }

    /**
     * Set the targetInstanceType property: Target provider type.
     * 
     * @param targetInstanceType the targetInstanceType value to set.
     * @return the SwitchProviderInputProperties object itself.
     */
    public SwitchProviderInputProperties withTargetInstanceType(String targetInstanceType) {
        this.targetInstanceType = targetInstanceType;
        return this;
    }

    /**
     * Get the providerSpecificDetails property: Provider specific settings.
     * 
     * @return the providerSpecificDetails value.
     */
    public SwitchProviderSpecificInput providerSpecificDetails() {
        return this.providerSpecificDetails;
    }

    /**
     * Set the providerSpecificDetails property: Provider specific settings.
     * 
     * @param providerSpecificDetails the providerSpecificDetails value to set.
     * @return the SwitchProviderInputProperties object itself.
     */
    public SwitchProviderInputProperties
        withProviderSpecificDetails(SwitchProviderSpecificInput providerSpecificDetails) {
        this.providerSpecificDetails = providerSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerSpecificDetails() != null) {
            providerSpecificDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetInstanceType", this.targetInstanceType);
        jsonWriter.writeJsonField("providerSpecificDetails", this.providerSpecificDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwitchProviderInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwitchProviderInputProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwitchProviderInputProperties.
     */
    public static SwitchProviderInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwitchProviderInputProperties deserializedSwitchProviderInputProperties
                = new SwitchProviderInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetInstanceType".equals(fieldName)) {
                    deserializedSwitchProviderInputProperties.targetInstanceType = reader.getString();
                } else if ("providerSpecificDetails".equals(fieldName)) {
                    deserializedSwitchProviderInputProperties.providerSpecificDetails
                        = SwitchProviderSpecificInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwitchProviderInputProperties;
        });
    }
}
