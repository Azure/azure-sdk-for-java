// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Hyper V Replica Azure provider specific settings.
 */
@Fluent
public final class HyperVReplicaAzureReplicationDetails extends ReplicationProviderSpecificSettings {
    /*
     * Gets the Instance type.
     */
    private String instanceType = "HyperVReplicaAzure";

    /*
     * Azure VM Disk details.
     */
    private List<AzureVmDiskDetails> azureVmDiskDetails;

    /*
     * Recovery Azure given name.
     */
    private String recoveryAzureVmName;

    /*
     * The Recovery Azure VM size.
     */
    private String recoveryAzureVMSize;

    /*
     * The recovery Azure storage account.
     */
    private String recoveryAzureStorageAccount;

    /*
     * The ARM id of the log storage account used for replication. This will be set to null if no log storage account
     * was provided during enable protection.
     */
    private String recoveryAzureLogStorageAccountId;

    /*
     * The Last replication time.
     */
    private OffsetDateTime lastReplicatedTime;

    /*
     * Last RPO value.
     */
    private Long rpoInSeconds;

    /*
     * The last RPO calculated time.
     */
    private OffsetDateTime lastRpoCalculatedTime;

    /*
     * The virtual machine Id.
     */
    private String vmId;

    /*
     * The protection state for the vm.
     */
    private String vmProtectionState;

    /*
     * The protection state description for the vm.
     */
    private String vmProtectionStateDescription;

    /*
     * Initial replication details.
     */
    private InitialReplicationDetails initialReplicationDetails;

    /*
     * The PE Network details.
     */
    private List<VMNicDetails> vmNics;

    /*
     * The selected recovery azure network Id.
     */
    private String selectedRecoveryAzureNetworkId;

    /*
     * The selected source nic Id which will be used as the primary nic during failover.
     */
    private String selectedSourceNicId;

    /*
     * The encryption info.
     */
    private String encryption;

    /*
     * The operating system info.
     */
    private OSDetails oSDetails;

    /*
     * The RAM size of the VM on the primary side.
     */
    private Integer sourceVmRamSizeInMB;

    /*
     * The CPU count of the VM on the primary side.
     */
    private Integer sourceVmCpuCount;

    /*
     * The selected option to enable RDP\SSH on target vm after failover. String value of
     * SrsDataContract.EnableRDPOnTargetOption enum.
     */
    private String enableRdpOnTargetOption;

    /*
     * The target resource group Id.
     */
    private String recoveryAzureResourceGroupId;

    /*
     * The recovery availability set Id.
     */
    private String recoveryAvailabilitySetId;

    /*
     * The target availability zone.
     */
    private String targetAvailabilityZone;

    /*
     * The target proximity placement group Id.
     */
    private String targetProximityPlacementGroupId;

    /*
     * A value indicating whether managed disks should be used during failover.
     */
    private String useManagedDisks;

    /*
     * License Type of the VM to be used.
     */
    private String licenseType;

    /*
     * The SQL Server license type.
     */
    private String sqlServerLicenseType;

    /*
     * The last recovery point received time.
     */
    private OffsetDateTime lastRecoveryPointReceived;

    /*
     * The target VM tags.
     */
    private Map<String, String> targetVmTags;

    /*
     * The tags for the seed managed disks.
     */
    private Map<String, String> seedManagedDiskTags;

    /*
     * The tags for the target managed disks.
     */
    private Map<String, String> targetManagedDiskTags;

    /*
     * The tags for the target NICs.
     */
    private Map<String, String> targetNicTags;

    /*
     * The list of protected managed disks.
     */
    private List<HyperVReplicaAzureManagedDiskDetails> protectedManagedDisks;

    /*
     * A value indicating all available inplace OS Upgrade configurations.
     */
    private List<OSUpgradeSupportedVersions> allAvailableOSUpgradeConfigurations;

    /**
     * Creates an instance of HyperVReplicaAzureReplicationDetails class.
     */
    public HyperVReplicaAzureReplicationDetails() {
    }

    /**
     * Get the instanceType property: Gets the Instance type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the azureVmDiskDetails property: Azure VM Disk details.
     * 
     * @return the azureVmDiskDetails value.
     */
    public List<AzureVmDiskDetails> azureVmDiskDetails() {
        return this.azureVmDiskDetails;
    }

    /**
     * Set the azureVmDiskDetails property: Azure VM Disk details.
     * 
     * @param azureVmDiskDetails the azureVmDiskDetails value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withAzureVmDiskDetails(List<AzureVmDiskDetails> azureVmDiskDetails) {
        this.azureVmDiskDetails = azureVmDiskDetails;
        return this;
    }

    /**
     * Get the recoveryAzureVmName property: Recovery Azure given name.
     * 
     * @return the recoveryAzureVmName value.
     */
    public String recoveryAzureVmName() {
        return this.recoveryAzureVmName;
    }

    /**
     * Set the recoveryAzureVmName property: Recovery Azure given name.
     * 
     * @param recoveryAzureVmName the recoveryAzureVmName value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withRecoveryAzureVmName(String recoveryAzureVmName) {
        this.recoveryAzureVmName = recoveryAzureVmName;
        return this;
    }

    /**
     * Get the recoveryAzureVMSize property: The Recovery Azure VM size.
     * 
     * @return the recoveryAzureVMSize value.
     */
    public String recoveryAzureVMSize() {
        return this.recoveryAzureVMSize;
    }

    /**
     * Set the recoveryAzureVMSize property: The Recovery Azure VM size.
     * 
     * @param recoveryAzureVMSize the recoveryAzureVMSize value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withRecoveryAzureVMSize(String recoveryAzureVMSize) {
        this.recoveryAzureVMSize = recoveryAzureVMSize;
        return this;
    }

    /**
     * Get the recoveryAzureStorageAccount property: The recovery Azure storage account.
     * 
     * @return the recoveryAzureStorageAccount value.
     */
    public String recoveryAzureStorageAccount() {
        return this.recoveryAzureStorageAccount;
    }

    /**
     * Set the recoveryAzureStorageAccount property: The recovery Azure storage account.
     * 
     * @param recoveryAzureStorageAccount the recoveryAzureStorageAccount value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withRecoveryAzureStorageAccount(String recoveryAzureStorageAccount) {
        this.recoveryAzureStorageAccount = recoveryAzureStorageAccount;
        return this;
    }

    /**
     * Get the recoveryAzureLogStorageAccountId property: The ARM id of the log storage account used for replication.
     * This will be set to null if no log storage account was provided during enable protection.
     * 
     * @return the recoveryAzureLogStorageAccountId value.
     */
    public String recoveryAzureLogStorageAccountId() {
        return this.recoveryAzureLogStorageAccountId;
    }

    /**
     * Set the recoveryAzureLogStorageAccountId property: The ARM id of the log storage account used for replication.
     * This will be set to null if no log storage account was provided during enable protection.
     * 
     * @param recoveryAzureLogStorageAccountId the recoveryAzureLogStorageAccountId value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails
        withRecoveryAzureLogStorageAccountId(String recoveryAzureLogStorageAccountId) {
        this.recoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
        return this;
    }

    /**
     * Get the lastReplicatedTime property: The Last replication time.
     * 
     * @return the lastReplicatedTime value.
     */
    public OffsetDateTime lastReplicatedTime() {
        return this.lastReplicatedTime;
    }

    /**
     * Set the lastReplicatedTime property: The Last replication time.
     * 
     * @param lastReplicatedTime the lastReplicatedTime value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withLastReplicatedTime(OffsetDateTime lastReplicatedTime) {
        this.lastReplicatedTime = lastReplicatedTime;
        return this;
    }

    /**
     * Get the rpoInSeconds property: Last RPO value.
     * 
     * @return the rpoInSeconds value.
     */
    public Long rpoInSeconds() {
        return this.rpoInSeconds;
    }

    /**
     * Set the rpoInSeconds property: Last RPO value.
     * 
     * @param rpoInSeconds the rpoInSeconds value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withRpoInSeconds(Long rpoInSeconds) {
        this.rpoInSeconds = rpoInSeconds;
        return this;
    }

    /**
     * Get the lastRpoCalculatedTime property: The last RPO calculated time.
     * 
     * @return the lastRpoCalculatedTime value.
     */
    public OffsetDateTime lastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime;
    }

    /**
     * Set the lastRpoCalculatedTime property: The last RPO calculated time.
     * 
     * @param lastRpoCalculatedTime the lastRpoCalculatedTime value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withLastRpoCalculatedTime(OffsetDateTime lastRpoCalculatedTime) {
        this.lastRpoCalculatedTime = lastRpoCalculatedTime;
        return this;
    }

    /**
     * Get the vmId property: The virtual machine Id.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Set the vmId property: The virtual machine Id.
     * 
     * @param vmId the vmId value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withVmId(String vmId) {
        this.vmId = vmId;
        return this;
    }

    /**
     * Get the vmProtectionState property: The protection state for the vm.
     * 
     * @return the vmProtectionState value.
     */
    public String vmProtectionState() {
        return this.vmProtectionState;
    }

    /**
     * Set the vmProtectionState property: The protection state for the vm.
     * 
     * @param vmProtectionState the vmProtectionState value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withVmProtectionState(String vmProtectionState) {
        this.vmProtectionState = vmProtectionState;
        return this;
    }

    /**
     * Get the vmProtectionStateDescription property: The protection state description for the vm.
     * 
     * @return the vmProtectionStateDescription value.
     */
    public String vmProtectionStateDescription() {
        return this.vmProtectionStateDescription;
    }

    /**
     * Set the vmProtectionStateDescription property: The protection state description for the vm.
     * 
     * @param vmProtectionStateDescription the vmProtectionStateDescription value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withVmProtectionStateDescription(String vmProtectionStateDescription) {
        this.vmProtectionStateDescription = vmProtectionStateDescription;
        return this;
    }

    /**
     * Get the initialReplicationDetails property: Initial replication details.
     * 
     * @return the initialReplicationDetails value.
     */
    public InitialReplicationDetails initialReplicationDetails() {
        return this.initialReplicationDetails;
    }

    /**
     * Set the initialReplicationDetails property: Initial replication details.
     * 
     * @param initialReplicationDetails the initialReplicationDetails value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails
        withInitialReplicationDetails(InitialReplicationDetails initialReplicationDetails) {
        this.initialReplicationDetails = initialReplicationDetails;
        return this;
    }

    /**
     * Get the vmNics property: The PE Network details.
     * 
     * @return the vmNics value.
     */
    public List<VMNicDetails> vmNics() {
        return this.vmNics;
    }

    /**
     * Set the vmNics property: The PE Network details.
     * 
     * @param vmNics the vmNics value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withVmNics(List<VMNicDetails> vmNics) {
        this.vmNics = vmNics;
        return this;
    }

    /**
     * Get the selectedRecoveryAzureNetworkId property: The selected recovery azure network Id.
     * 
     * @return the selectedRecoveryAzureNetworkId value.
     */
    public String selectedRecoveryAzureNetworkId() {
        return this.selectedRecoveryAzureNetworkId;
    }

    /**
     * Set the selectedRecoveryAzureNetworkId property: The selected recovery azure network Id.
     * 
     * @param selectedRecoveryAzureNetworkId the selectedRecoveryAzureNetworkId value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails
        withSelectedRecoveryAzureNetworkId(String selectedRecoveryAzureNetworkId) {
        this.selectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
        return this;
    }

    /**
     * Get the selectedSourceNicId property: The selected source nic Id which will be used as the primary nic during
     * failover.
     * 
     * @return the selectedSourceNicId value.
     */
    public String selectedSourceNicId() {
        return this.selectedSourceNicId;
    }

    /**
     * Set the selectedSourceNicId property: The selected source nic Id which will be used as the primary nic during
     * failover.
     * 
     * @param selectedSourceNicId the selectedSourceNicId value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withSelectedSourceNicId(String selectedSourceNicId) {
        this.selectedSourceNicId = selectedSourceNicId;
        return this;
    }

    /**
     * Get the encryption property: The encryption info.
     * 
     * @return the encryption value.
     */
    public String encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption info.
     * 
     * @param encryption the encryption value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withEncryption(String encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the oSDetails property: The operating system info.
     * 
     * @return the oSDetails value.
     */
    public OSDetails oSDetails() {
        return this.oSDetails;
    }

    /**
     * Set the oSDetails property: The operating system info.
     * 
     * @param oSDetails the oSDetails value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withOSDetails(OSDetails oSDetails) {
        this.oSDetails = oSDetails;
        return this;
    }

    /**
     * Get the sourceVmRamSizeInMB property: The RAM size of the VM on the primary side.
     * 
     * @return the sourceVmRamSizeInMB value.
     */
    public Integer sourceVmRamSizeInMB() {
        return this.sourceVmRamSizeInMB;
    }

    /**
     * Set the sourceVmRamSizeInMB property: The RAM size of the VM on the primary side.
     * 
     * @param sourceVmRamSizeInMB the sourceVmRamSizeInMB value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withSourceVmRamSizeInMB(Integer sourceVmRamSizeInMB) {
        this.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
        return this;
    }

    /**
     * Get the sourceVmCpuCount property: The CPU count of the VM on the primary side.
     * 
     * @return the sourceVmCpuCount value.
     */
    public Integer sourceVmCpuCount() {
        return this.sourceVmCpuCount;
    }

    /**
     * Set the sourceVmCpuCount property: The CPU count of the VM on the primary side.
     * 
     * @param sourceVmCpuCount the sourceVmCpuCount value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withSourceVmCpuCount(Integer sourceVmCpuCount) {
        this.sourceVmCpuCount = sourceVmCpuCount;
        return this;
    }

    /**
     * Get the enableRdpOnTargetOption property: The selected option to enable RDP\SSH on target vm after failover.
     * String value of SrsDataContract.EnableRDPOnTargetOption enum.
     * 
     * @return the enableRdpOnTargetOption value.
     */
    public String enableRdpOnTargetOption() {
        return this.enableRdpOnTargetOption;
    }

    /**
     * Set the enableRdpOnTargetOption property: The selected option to enable RDP\SSH on target vm after failover.
     * String value of SrsDataContract.EnableRDPOnTargetOption enum.
     * 
     * @param enableRdpOnTargetOption the enableRdpOnTargetOption value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withEnableRdpOnTargetOption(String enableRdpOnTargetOption) {
        this.enableRdpOnTargetOption = enableRdpOnTargetOption;
        return this;
    }

    /**
     * Get the recoveryAzureResourceGroupId property: The target resource group Id.
     * 
     * @return the recoveryAzureResourceGroupId value.
     */
    public String recoveryAzureResourceGroupId() {
        return this.recoveryAzureResourceGroupId;
    }

    /**
     * Set the recoveryAzureResourceGroupId property: The target resource group Id.
     * 
     * @param recoveryAzureResourceGroupId the recoveryAzureResourceGroupId value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withRecoveryAzureResourceGroupId(String recoveryAzureResourceGroupId) {
        this.recoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
        return this;
    }

    /**
     * Get the recoveryAvailabilitySetId property: The recovery availability set Id.
     * 
     * @return the recoveryAvailabilitySetId value.
     */
    public String recoveryAvailabilitySetId() {
        return this.recoveryAvailabilitySetId;
    }

    /**
     * Set the recoveryAvailabilitySetId property: The recovery availability set Id.
     * 
     * @param recoveryAvailabilitySetId the recoveryAvailabilitySetId value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withRecoveryAvailabilitySetId(String recoveryAvailabilitySetId) {
        this.recoveryAvailabilitySetId = recoveryAvailabilitySetId;
        return this;
    }

    /**
     * Get the targetAvailabilityZone property: The target availability zone.
     * 
     * @return the targetAvailabilityZone value.
     */
    public String targetAvailabilityZone() {
        return this.targetAvailabilityZone;
    }

    /**
     * Set the targetAvailabilityZone property: The target availability zone.
     * 
     * @param targetAvailabilityZone the targetAvailabilityZone value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withTargetAvailabilityZone(String targetAvailabilityZone) {
        this.targetAvailabilityZone = targetAvailabilityZone;
        return this;
    }

    /**
     * Get the targetProximityPlacementGroupId property: The target proximity placement group Id.
     * 
     * @return the targetProximityPlacementGroupId value.
     */
    public String targetProximityPlacementGroupId() {
        return this.targetProximityPlacementGroupId;
    }

    /**
     * Set the targetProximityPlacementGroupId property: The target proximity placement group Id.
     * 
     * @param targetProximityPlacementGroupId the targetProximityPlacementGroupId value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails
        withTargetProximityPlacementGroupId(String targetProximityPlacementGroupId) {
        this.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
        return this;
    }

    /**
     * Get the useManagedDisks property: A value indicating whether managed disks should be used during failover.
     * 
     * @return the useManagedDisks value.
     */
    public String useManagedDisks() {
        return this.useManagedDisks;
    }

    /**
     * Set the useManagedDisks property: A value indicating whether managed disks should be used during failover.
     * 
     * @param useManagedDisks the useManagedDisks value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withUseManagedDisks(String useManagedDisks) {
        this.useManagedDisks = useManagedDisks;
        return this;
    }

    /**
     * Get the licenseType property: License Type of the VM to be used.
     * 
     * @return the licenseType value.
     */
    public String licenseType() {
        return this.licenseType;
    }

    /**
     * Set the licenseType property: License Type of the VM to be used.
     * 
     * @param licenseType the licenseType value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withLicenseType(String licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get the sqlServerLicenseType property: The SQL Server license type.
     * 
     * @return the sqlServerLicenseType value.
     */
    public String sqlServerLicenseType() {
        return this.sqlServerLicenseType;
    }

    /**
     * Set the sqlServerLicenseType property: The SQL Server license type.
     * 
     * @param sqlServerLicenseType the sqlServerLicenseType value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withSqlServerLicenseType(String sqlServerLicenseType) {
        this.sqlServerLicenseType = sqlServerLicenseType;
        return this;
    }

    /**
     * Get the lastRecoveryPointReceived property: The last recovery point received time.
     * 
     * @return the lastRecoveryPointReceived value.
     */
    public OffsetDateTime lastRecoveryPointReceived() {
        return this.lastRecoveryPointReceived;
    }

    /**
     * Get the targetVmTags property: The target VM tags.
     * 
     * @return the targetVmTags value.
     */
    public Map<String, String> targetVmTags() {
        return this.targetVmTags;
    }

    /**
     * Set the targetVmTags property: The target VM tags.
     * 
     * @param targetVmTags the targetVmTags value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withTargetVmTags(Map<String, String> targetVmTags) {
        this.targetVmTags = targetVmTags;
        return this;
    }

    /**
     * Get the seedManagedDiskTags property: The tags for the seed managed disks.
     * 
     * @return the seedManagedDiskTags value.
     */
    public Map<String, String> seedManagedDiskTags() {
        return this.seedManagedDiskTags;
    }

    /**
     * Set the seedManagedDiskTags property: The tags for the seed managed disks.
     * 
     * @param seedManagedDiskTags the seedManagedDiskTags value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withSeedManagedDiskTags(Map<String, String> seedManagedDiskTags) {
        this.seedManagedDiskTags = seedManagedDiskTags;
        return this;
    }

    /**
     * Get the targetManagedDiskTags property: The tags for the target managed disks.
     * 
     * @return the targetManagedDiskTags value.
     */
    public Map<String, String> targetManagedDiskTags() {
        return this.targetManagedDiskTags;
    }

    /**
     * Set the targetManagedDiskTags property: The tags for the target managed disks.
     * 
     * @param targetManagedDiskTags the targetManagedDiskTags value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withTargetManagedDiskTags(Map<String, String> targetManagedDiskTags) {
        this.targetManagedDiskTags = targetManagedDiskTags;
        return this;
    }

    /**
     * Get the targetNicTags property: The tags for the target NICs.
     * 
     * @return the targetNicTags value.
     */
    public Map<String, String> targetNicTags() {
        return this.targetNicTags;
    }

    /**
     * Set the targetNicTags property: The tags for the target NICs.
     * 
     * @param targetNicTags the targetNicTags value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails withTargetNicTags(Map<String, String> targetNicTags) {
        this.targetNicTags = targetNicTags;
        return this;
    }

    /**
     * Get the protectedManagedDisks property: The list of protected managed disks.
     * 
     * @return the protectedManagedDisks value.
     */
    public List<HyperVReplicaAzureManagedDiskDetails> protectedManagedDisks() {
        return this.protectedManagedDisks;
    }

    /**
     * Set the protectedManagedDisks property: The list of protected managed disks.
     * 
     * @param protectedManagedDisks the protectedManagedDisks value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails
        withProtectedManagedDisks(List<HyperVReplicaAzureManagedDiskDetails> protectedManagedDisks) {
        this.protectedManagedDisks = protectedManagedDisks;
        return this;
    }

    /**
     * Get the allAvailableOSUpgradeConfigurations property: A value indicating all available inplace OS Upgrade
     * configurations.
     * 
     * @return the allAvailableOSUpgradeConfigurations value.
     */
    public List<OSUpgradeSupportedVersions> allAvailableOSUpgradeConfigurations() {
        return this.allAvailableOSUpgradeConfigurations;
    }

    /**
     * Set the allAvailableOSUpgradeConfigurations property: A value indicating all available inplace OS Upgrade
     * configurations.
     * 
     * @param allAvailableOSUpgradeConfigurations the allAvailableOSUpgradeConfigurations value to set.
     * @return the HyperVReplicaAzureReplicationDetails object itself.
     */
    public HyperVReplicaAzureReplicationDetails
        withAllAvailableOSUpgradeConfigurations(List<OSUpgradeSupportedVersions> allAvailableOSUpgradeConfigurations) {
        this.allAvailableOSUpgradeConfigurations = allAvailableOSUpgradeConfigurations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (azureVmDiskDetails() != null) {
            azureVmDiskDetails().forEach(e -> e.validate());
        }
        if (initialReplicationDetails() != null) {
            initialReplicationDetails().validate();
        }
        if (vmNics() != null) {
            vmNics().forEach(e -> e.validate());
        }
        if (oSDetails() != null) {
            oSDetails().validate();
        }
        if (protectedManagedDisks() != null) {
            protectedManagedDisks().forEach(e -> e.validate());
        }
        if (allAvailableOSUpgradeConfigurations() != null) {
            allAvailableOSUpgradeConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeArrayField("azureVmDiskDetails", this.azureVmDiskDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("recoveryAzureVmName", this.recoveryAzureVmName);
        jsonWriter.writeStringField("recoveryAzureVMSize", this.recoveryAzureVMSize);
        jsonWriter.writeStringField("recoveryAzureStorageAccount", this.recoveryAzureStorageAccount);
        jsonWriter.writeStringField("recoveryAzureLogStorageAccountId", this.recoveryAzureLogStorageAccountId);
        jsonWriter.writeStringField("lastReplicatedTime",
            this.lastReplicatedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastReplicatedTime));
        jsonWriter.writeNumberField("rpoInSeconds", this.rpoInSeconds);
        jsonWriter.writeStringField("lastRpoCalculatedTime",
            this.lastRpoCalculatedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastRpoCalculatedTime));
        jsonWriter.writeStringField("vmId", this.vmId);
        jsonWriter.writeStringField("vmProtectionState", this.vmProtectionState);
        jsonWriter.writeStringField("vmProtectionStateDescription", this.vmProtectionStateDescription);
        jsonWriter.writeJsonField("initialReplicationDetails", this.initialReplicationDetails);
        jsonWriter.writeArrayField("vmNics", this.vmNics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("selectedRecoveryAzureNetworkId", this.selectedRecoveryAzureNetworkId);
        jsonWriter.writeStringField("selectedSourceNicId", this.selectedSourceNicId);
        jsonWriter.writeStringField("encryption", this.encryption);
        jsonWriter.writeJsonField("oSDetails", this.oSDetails);
        jsonWriter.writeNumberField("sourceVmRamSizeInMB", this.sourceVmRamSizeInMB);
        jsonWriter.writeNumberField("sourceVmCpuCount", this.sourceVmCpuCount);
        jsonWriter.writeStringField("enableRdpOnTargetOption", this.enableRdpOnTargetOption);
        jsonWriter.writeStringField("recoveryAzureResourceGroupId", this.recoveryAzureResourceGroupId);
        jsonWriter.writeStringField("recoveryAvailabilitySetId", this.recoveryAvailabilitySetId);
        jsonWriter.writeStringField("targetAvailabilityZone", this.targetAvailabilityZone);
        jsonWriter.writeStringField("targetProximityPlacementGroupId", this.targetProximityPlacementGroupId);
        jsonWriter.writeStringField("useManagedDisks", this.useManagedDisks);
        jsonWriter.writeStringField("licenseType", this.licenseType);
        jsonWriter.writeStringField("sqlServerLicenseType", this.sqlServerLicenseType);
        jsonWriter.writeMapField("targetVmTags", this.targetVmTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("seedManagedDiskTags", this.seedManagedDiskTags,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("targetManagedDiskTags", this.targetManagedDiskTags,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("targetNicTags", this.targetNicTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("protectedManagedDisks", this.protectedManagedDisks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("allAvailableOSUpgradeConfigurations", this.allAvailableOSUpgradeConfigurations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVReplicaAzureReplicationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVReplicaAzureReplicationDetails if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVReplicaAzureReplicationDetails.
     */
    public static HyperVReplicaAzureReplicationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVReplicaAzureReplicationDetails deserializedHyperVReplicaAzureReplicationDetails
                = new HyperVReplicaAzureReplicationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.instanceType = reader.getString();
                } else if ("azureVmDiskDetails".equals(fieldName)) {
                    List<AzureVmDiskDetails> azureVmDiskDetails
                        = reader.readArray(reader1 -> AzureVmDiskDetails.fromJson(reader1));
                    deserializedHyperVReplicaAzureReplicationDetails.azureVmDiskDetails = azureVmDiskDetails;
                } else if ("recoveryAzureVmName".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.recoveryAzureVmName = reader.getString();
                } else if ("recoveryAzureVMSize".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.recoveryAzureVMSize = reader.getString();
                } else if ("recoveryAzureStorageAccount".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.recoveryAzureStorageAccount = reader.getString();
                } else if ("recoveryAzureLogStorageAccountId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.recoveryAzureLogStorageAccountId
                        = reader.getString();
                } else if ("lastReplicatedTime".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.lastReplicatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("rpoInSeconds".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.rpoInSeconds
                        = reader.getNullable(JsonReader::getLong);
                } else if ("lastRpoCalculatedTime".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.lastRpoCalculatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("vmId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.vmId = reader.getString();
                } else if ("vmProtectionState".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.vmProtectionState = reader.getString();
                } else if ("vmProtectionStateDescription".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.vmProtectionStateDescription = reader.getString();
                } else if ("initialReplicationDetails".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.initialReplicationDetails
                        = InitialReplicationDetails.fromJson(reader);
                } else if ("vmNics".equals(fieldName)) {
                    List<VMNicDetails> vmNics = reader.readArray(reader1 -> VMNicDetails.fromJson(reader1));
                    deserializedHyperVReplicaAzureReplicationDetails.vmNics = vmNics;
                } else if ("selectedRecoveryAzureNetworkId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.selectedRecoveryAzureNetworkId
                        = reader.getString();
                } else if ("selectedSourceNicId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.selectedSourceNicId = reader.getString();
                } else if ("encryption".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.encryption = reader.getString();
                } else if ("oSDetails".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.oSDetails = OSDetails.fromJson(reader);
                } else if ("sourceVmRamSizeInMB".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.sourceVmRamSizeInMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("sourceVmCpuCount".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.sourceVmCpuCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("enableRdpOnTargetOption".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.enableRdpOnTargetOption = reader.getString();
                } else if ("recoveryAzureResourceGroupId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.recoveryAzureResourceGroupId = reader.getString();
                } else if ("recoveryAvailabilitySetId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.recoveryAvailabilitySetId = reader.getString();
                } else if ("targetAvailabilityZone".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.targetAvailabilityZone = reader.getString();
                } else if ("targetProximityPlacementGroupId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.targetProximityPlacementGroupId
                        = reader.getString();
                } else if ("useManagedDisks".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.useManagedDisks = reader.getString();
                } else if ("licenseType".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.licenseType = reader.getString();
                } else if ("sqlServerLicenseType".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.sqlServerLicenseType = reader.getString();
                } else if ("lastRecoveryPointReceived".equals(fieldName)) {
                    deserializedHyperVReplicaAzureReplicationDetails.lastRecoveryPointReceived = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("targetVmTags".equals(fieldName)) {
                    Map<String, String> targetVmTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedHyperVReplicaAzureReplicationDetails.targetVmTags = targetVmTags;
                } else if ("seedManagedDiskTags".equals(fieldName)) {
                    Map<String, String> seedManagedDiskTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedHyperVReplicaAzureReplicationDetails.seedManagedDiskTags = seedManagedDiskTags;
                } else if ("targetManagedDiskTags".equals(fieldName)) {
                    Map<String, String> targetManagedDiskTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedHyperVReplicaAzureReplicationDetails.targetManagedDiskTags = targetManagedDiskTags;
                } else if ("targetNicTags".equals(fieldName)) {
                    Map<String, String> targetNicTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedHyperVReplicaAzureReplicationDetails.targetNicTags = targetNicTags;
                } else if ("protectedManagedDisks".equals(fieldName)) {
                    List<HyperVReplicaAzureManagedDiskDetails> protectedManagedDisks
                        = reader.readArray(reader1 -> HyperVReplicaAzureManagedDiskDetails.fromJson(reader1));
                    deserializedHyperVReplicaAzureReplicationDetails.protectedManagedDisks = protectedManagedDisks;
                } else if ("allAvailableOSUpgradeConfigurations".equals(fieldName)) {
                    List<OSUpgradeSupportedVersions> allAvailableOSUpgradeConfigurations
                        = reader.readArray(reader1 -> OSUpgradeSupportedVersions.fromJson(reader1));
                    deserializedHyperVReplicaAzureReplicationDetails.allAvailableOSUpgradeConfigurations
                        = allAvailableOSUpgradeConfigurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVReplicaAzureReplicationDetails;
        });
    }
}
