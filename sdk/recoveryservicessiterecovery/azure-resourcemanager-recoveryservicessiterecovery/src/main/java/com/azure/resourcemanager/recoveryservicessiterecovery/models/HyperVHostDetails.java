// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Hyper-V host details.
 */
@Immutable
public final class HyperVHostDetails implements JsonSerializable<HyperVHostDetails> {
    /*
     * The Hyper-V host Id.
     */
    private String id;

    /*
     * The Hyper-V host name.
     */
    private String name;

    /*
     * The Mars agent version.
     */
    private String marsAgentVersion;

    /**
     * Creates an instance of HyperVHostDetails class.
     */
    public HyperVHostDetails() {
    }

    /**
     * Get the id property: The Hyper-V host Id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The Hyper-V host name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the marsAgentVersion property: The Mars agent version.
     * 
     * @return the marsAgentVersion value.
     */
    public String marsAgentVersion() {
        return this.marsAgentVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVHostDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVHostDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVHostDetails.
     */
    public static HyperVHostDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVHostDetails deserializedHyperVHostDetails = new HyperVHostDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedHyperVHostDetails.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedHyperVHostDetails.name = reader.getString();
                } else if ("marsAgentVersion".equals(fieldName)) {
                    deserializedHyperVHostDetails.marsAgentVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVHostDetails;
        });
    }
}
