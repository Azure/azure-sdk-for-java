// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Onprem disk details data.
 */
@Fluent
public final class DiskDetails implements JsonSerializable<DiskDetails> {
    /*
     * The hard disk max size in MB.
     */
    private Long maxSizeMB;

    /*
     * The type of the volume.
     */
    private String vhdType;

    /*
     * The VHD Id.
     */
    private String vhdId;

    /*
     * The VHD name.
     */
    private String vhdName;

    /**
     * Creates an instance of DiskDetails class.
     */
    public DiskDetails() {
    }

    /**
     * Get the maxSizeMB property: The hard disk max size in MB.
     * 
     * @return the maxSizeMB value.
     */
    public Long maxSizeMB() {
        return this.maxSizeMB;
    }

    /**
     * Set the maxSizeMB property: The hard disk max size in MB.
     * 
     * @param maxSizeMB the maxSizeMB value to set.
     * @return the DiskDetails object itself.
     */
    public DiskDetails withMaxSizeMB(Long maxSizeMB) {
        this.maxSizeMB = maxSizeMB;
        return this;
    }

    /**
     * Get the vhdType property: The type of the volume.
     * 
     * @return the vhdType value.
     */
    public String vhdType() {
        return this.vhdType;
    }

    /**
     * Set the vhdType property: The type of the volume.
     * 
     * @param vhdType the vhdType value to set.
     * @return the DiskDetails object itself.
     */
    public DiskDetails withVhdType(String vhdType) {
        this.vhdType = vhdType;
        return this;
    }

    /**
     * Get the vhdId property: The VHD Id.
     * 
     * @return the vhdId value.
     */
    public String vhdId() {
        return this.vhdId;
    }

    /**
     * Set the vhdId property: The VHD Id.
     * 
     * @param vhdId the vhdId value to set.
     * @return the DiskDetails object itself.
     */
    public DiskDetails withVhdId(String vhdId) {
        this.vhdId = vhdId;
        return this;
    }

    /**
     * Get the vhdName property: The VHD name.
     * 
     * @return the vhdName value.
     */
    public String vhdName() {
        return this.vhdName;
    }

    /**
     * Set the vhdName property: The VHD name.
     * 
     * @param vhdName the vhdName value to set.
     * @return the DiskDetails object itself.
     */
    public DiskDetails withVhdName(String vhdName) {
        this.vhdName = vhdName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxSizeMB", this.maxSizeMB);
        jsonWriter.writeStringField("vhdType", this.vhdType);
        jsonWriter.writeStringField("vhdId", this.vhdId);
        jsonWriter.writeStringField("vhdName", this.vhdName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskDetails.
     */
    public static DiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskDetails deserializedDiskDetails = new DiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxSizeMB".equals(fieldName)) {
                    deserializedDiskDetails.maxSizeMB = reader.getNullable(JsonReader::getLong);
                } else if ("vhdType".equals(fieldName)) {
                    deserializedDiskDetails.vhdType = reader.getString();
                } else if ("vhdId".equals(fieldName)) {
                    deserializedDiskDetails.vhdId = reader.getString();
                } else if ("vhdName".equals(fieldName)) {
                    deserializedDiskDetails.vhdName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskDetails;
        });
    }
}
