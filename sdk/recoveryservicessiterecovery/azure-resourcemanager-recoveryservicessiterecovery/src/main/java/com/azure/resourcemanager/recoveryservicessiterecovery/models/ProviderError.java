// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This class contains the error details per object.
 */
@Fluent
public final class ProviderError implements JsonSerializable<ProviderError> {
    /*
     * The Error code.
     */
    private Integer errorCode;

    /*
     * The Error message.
     */
    private String errorMessage;

    /*
     * The Provider error Id.
     */
    private String errorId;

    /*
     * The possible causes for the error.
     */
    private String possibleCauses;

    /*
     * The recommended action to resolve the error.
     */
    private String recommendedAction;

    /**
     * Creates an instance of ProviderError class.
     */
    public ProviderError() {
    }

    /**
     * Get the errorCode property: The Error code.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Set the errorCode property: The Error code.
     * 
     * @param errorCode the errorCode value to set.
     * @return the ProviderError object itself.
     */
    public ProviderError withErrorCode(Integer errorCode) {
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Get the errorMessage property: The Error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: The Error message.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the ProviderError object itself.
     */
    public ProviderError withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the errorId property: The Provider error Id.
     * 
     * @return the errorId value.
     */
    public String errorId() {
        return this.errorId;
    }

    /**
     * Set the errorId property: The Provider error Id.
     * 
     * @param errorId the errorId value to set.
     * @return the ProviderError object itself.
     */
    public ProviderError withErrorId(String errorId) {
        this.errorId = errorId;
        return this;
    }

    /**
     * Get the possibleCauses property: The possible causes for the error.
     * 
     * @return the possibleCauses value.
     */
    public String possibleCauses() {
        return this.possibleCauses;
    }

    /**
     * Set the possibleCauses property: The possible causes for the error.
     * 
     * @param possibleCauses the possibleCauses value to set.
     * @return the ProviderError object itself.
     */
    public ProviderError withPossibleCauses(String possibleCauses) {
        this.possibleCauses = possibleCauses;
        return this;
    }

    /**
     * Get the recommendedAction property: The recommended action to resolve the error.
     * 
     * @return the recommendedAction value.
     */
    public String recommendedAction() {
        return this.recommendedAction;
    }

    /**
     * Set the recommendedAction property: The recommended action to resolve the error.
     * 
     * @param recommendedAction the recommendedAction value to set.
     * @return the ProviderError object itself.
     */
    public ProviderError withRecommendedAction(String recommendedAction) {
        this.recommendedAction = recommendedAction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("errorCode", this.errorCode);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeStringField("errorId", this.errorId);
        jsonWriter.writeStringField("possibleCauses", this.possibleCauses);
        jsonWriter.writeStringField("recommendedAction", this.recommendedAction);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderError.
     */
    public static ProviderError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderError deserializedProviderError = new ProviderError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedProviderError.errorCode = reader.getNullable(JsonReader::getInt);
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedProviderError.errorMessage = reader.getString();
                } else if ("errorId".equals(fieldName)) {
                    deserializedProviderError.errorId = reader.getString();
                } else if ("possibleCauses".equals(fieldName)) {
                    deserializedProviderError.possibleCauses = reader.getString();
                } else if ("recommendedAction".equals(fieldName)) {
                    deserializedProviderError.recommendedAction = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderError;
        });
    }
}
