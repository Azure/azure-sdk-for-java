// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This class contains the minimal job details required to navigate to the desired drill down.
 */
@Fluent
public final class JobEntity implements JsonSerializable<JobEntity> {
    /*
     * The job id.
     */
    private String jobId;

    /*
     * The job display name.
     */
    private String jobFriendlyName;

    /*
     * The object id.
     */
    private String targetObjectId;

    /*
     * The object name.
     */
    private String targetObjectName;

    /*
     * The workflow affected object type.
     */
    private String targetInstanceType;

    /*
     * The job name. Enum type ScenarioName.
     */
    private String jobScenarioName;

    /**
     * Creates an instance of JobEntity class.
     */
    public JobEntity() {
    }

    /**
     * Get the jobId property: The job id.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: The job id.
     * 
     * @param jobId the jobId value to set.
     * @return the JobEntity object itself.
     */
    public JobEntity withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the jobFriendlyName property: The job display name.
     * 
     * @return the jobFriendlyName value.
     */
    public String jobFriendlyName() {
        return this.jobFriendlyName;
    }

    /**
     * Set the jobFriendlyName property: The job display name.
     * 
     * @param jobFriendlyName the jobFriendlyName value to set.
     * @return the JobEntity object itself.
     */
    public JobEntity withJobFriendlyName(String jobFriendlyName) {
        this.jobFriendlyName = jobFriendlyName;
        return this;
    }

    /**
     * Get the targetObjectId property: The object id.
     * 
     * @return the targetObjectId value.
     */
    public String targetObjectId() {
        return this.targetObjectId;
    }

    /**
     * Set the targetObjectId property: The object id.
     * 
     * @param targetObjectId the targetObjectId value to set.
     * @return the JobEntity object itself.
     */
    public JobEntity withTargetObjectId(String targetObjectId) {
        this.targetObjectId = targetObjectId;
        return this;
    }

    /**
     * Get the targetObjectName property: The object name.
     * 
     * @return the targetObjectName value.
     */
    public String targetObjectName() {
        return this.targetObjectName;
    }

    /**
     * Set the targetObjectName property: The object name.
     * 
     * @param targetObjectName the targetObjectName value to set.
     * @return the JobEntity object itself.
     */
    public JobEntity withTargetObjectName(String targetObjectName) {
        this.targetObjectName = targetObjectName;
        return this;
    }

    /**
     * Get the targetInstanceType property: The workflow affected object type.
     * 
     * @return the targetInstanceType value.
     */
    public String targetInstanceType() {
        return this.targetInstanceType;
    }

    /**
     * Set the targetInstanceType property: The workflow affected object type.
     * 
     * @param targetInstanceType the targetInstanceType value to set.
     * @return the JobEntity object itself.
     */
    public JobEntity withTargetInstanceType(String targetInstanceType) {
        this.targetInstanceType = targetInstanceType;
        return this;
    }

    /**
     * Get the jobScenarioName property: The job name. Enum type ScenarioName.
     * 
     * @return the jobScenarioName value.
     */
    public String jobScenarioName() {
        return this.jobScenarioName;
    }

    /**
     * Set the jobScenarioName property: The job name. Enum type ScenarioName.
     * 
     * @param jobScenarioName the jobScenarioName value to set.
     * @return the JobEntity object itself.
     */
    public JobEntity withJobScenarioName(String jobScenarioName) {
        this.jobScenarioName = jobScenarioName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobId", this.jobId);
        jsonWriter.writeStringField("jobFriendlyName", this.jobFriendlyName);
        jsonWriter.writeStringField("targetObjectId", this.targetObjectId);
        jsonWriter.writeStringField("targetObjectName", this.targetObjectName);
        jsonWriter.writeStringField("targetInstanceType", this.targetInstanceType);
        jsonWriter.writeStringField("jobScenarioName", this.jobScenarioName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobEntity if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JobEntity.
     */
    public static JobEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobEntity deserializedJobEntity = new JobEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobId".equals(fieldName)) {
                    deserializedJobEntity.jobId = reader.getString();
                } else if ("jobFriendlyName".equals(fieldName)) {
                    deserializedJobEntity.jobFriendlyName = reader.getString();
                } else if ("targetObjectId".equals(fieldName)) {
                    deserializedJobEntity.targetObjectId = reader.getString();
                } else if ("targetObjectName".equals(fieldName)) {
                    deserializedJobEntity.targetObjectName = reader.getString();
                } else if ("targetInstanceType".equals(fieldName)) {
                    deserializedJobEntity.targetInstanceType = reader.getString();
                } else if ("jobScenarioName".equals(fieldName)) {
                    deserializedJobEntity.jobScenarioName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobEntity;
        });
    }
}
