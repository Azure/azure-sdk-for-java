// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Recovery plan creation properties.
 */
@Fluent
public final class CreateRecoveryPlanInputProperties implements JsonSerializable<CreateRecoveryPlanInputProperties> {
    /*
     * The primary fabric Id.
     */
    private String primaryFabricId;

    /*
     * The recovery fabric Id.
     */
    private String recoveryFabricId;

    /*
     * The failover deployment model.
     */
    private FailoverDeploymentModel failoverDeploymentModel;

    /*
     * The recovery plan groups.
     */
    private List<RecoveryPlanGroup> groups;

    /*
     * The provider specific input.
     */
    private List<RecoveryPlanProviderSpecificInput> providerSpecificInput;

    /**
     * Creates an instance of CreateRecoveryPlanInputProperties class.
     */
    public CreateRecoveryPlanInputProperties() {
    }

    /**
     * Get the primaryFabricId property: The primary fabric Id.
     * 
     * @return the primaryFabricId value.
     */
    public String primaryFabricId() {
        return this.primaryFabricId;
    }

    /**
     * Set the primaryFabricId property: The primary fabric Id.
     * 
     * @param primaryFabricId the primaryFabricId value to set.
     * @return the CreateRecoveryPlanInputProperties object itself.
     */
    public CreateRecoveryPlanInputProperties withPrimaryFabricId(String primaryFabricId) {
        this.primaryFabricId = primaryFabricId;
        return this;
    }

    /**
     * Get the recoveryFabricId property: The recovery fabric Id.
     * 
     * @return the recoveryFabricId value.
     */
    public String recoveryFabricId() {
        return this.recoveryFabricId;
    }

    /**
     * Set the recoveryFabricId property: The recovery fabric Id.
     * 
     * @param recoveryFabricId the recoveryFabricId value to set.
     * @return the CreateRecoveryPlanInputProperties object itself.
     */
    public CreateRecoveryPlanInputProperties withRecoveryFabricId(String recoveryFabricId) {
        this.recoveryFabricId = recoveryFabricId;
        return this;
    }

    /**
     * Get the failoverDeploymentModel property: The failover deployment model.
     * 
     * @return the failoverDeploymentModel value.
     */
    public FailoverDeploymentModel failoverDeploymentModel() {
        return this.failoverDeploymentModel;
    }

    /**
     * Set the failoverDeploymentModel property: The failover deployment model.
     * 
     * @param failoverDeploymentModel the failoverDeploymentModel value to set.
     * @return the CreateRecoveryPlanInputProperties object itself.
     */
    public CreateRecoveryPlanInputProperties
        withFailoverDeploymentModel(FailoverDeploymentModel failoverDeploymentModel) {
        this.failoverDeploymentModel = failoverDeploymentModel;
        return this;
    }

    /**
     * Get the groups property: The recovery plan groups.
     * 
     * @return the groups value.
     */
    public List<RecoveryPlanGroup> groups() {
        return this.groups;
    }

    /**
     * Set the groups property: The recovery plan groups.
     * 
     * @param groups the groups value to set.
     * @return the CreateRecoveryPlanInputProperties object itself.
     */
    public CreateRecoveryPlanInputProperties withGroups(List<RecoveryPlanGroup> groups) {
        this.groups = groups;
        return this;
    }

    /**
     * Get the providerSpecificInput property: The provider specific input.
     * 
     * @return the providerSpecificInput value.
     */
    public List<RecoveryPlanProviderSpecificInput> providerSpecificInput() {
        return this.providerSpecificInput;
    }

    /**
     * Set the providerSpecificInput property: The provider specific input.
     * 
     * @param providerSpecificInput the providerSpecificInput value to set.
     * @return the CreateRecoveryPlanInputProperties object itself.
     */
    public CreateRecoveryPlanInputProperties
        withProviderSpecificInput(List<RecoveryPlanProviderSpecificInput> providerSpecificInput) {
        this.providerSpecificInput = providerSpecificInput;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (primaryFabricId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property primaryFabricId in model CreateRecoveryPlanInputProperties"));
        }
        if (recoveryFabricId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recoveryFabricId in model CreateRecoveryPlanInputProperties"));
        }
        if (groups() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groups in model CreateRecoveryPlanInputProperties"));
        } else {
            groups().forEach(e -> e.validate());
        }
        if (providerSpecificInput() != null) {
            providerSpecificInput().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CreateRecoveryPlanInputProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("primaryFabricId", this.primaryFabricId);
        jsonWriter.writeStringField("recoveryFabricId", this.recoveryFabricId);
        jsonWriter.writeArrayField("groups", this.groups, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("failoverDeploymentModel",
            this.failoverDeploymentModel == null ? null : this.failoverDeploymentModel.toString());
        jsonWriter.writeArrayField("providerSpecificInput", this.providerSpecificInput,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateRecoveryPlanInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateRecoveryPlanInputProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateRecoveryPlanInputProperties.
     */
    public static CreateRecoveryPlanInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateRecoveryPlanInputProperties deserializedCreateRecoveryPlanInputProperties
                = new CreateRecoveryPlanInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("primaryFabricId".equals(fieldName)) {
                    deserializedCreateRecoveryPlanInputProperties.primaryFabricId = reader.getString();
                } else if ("recoveryFabricId".equals(fieldName)) {
                    deserializedCreateRecoveryPlanInputProperties.recoveryFabricId = reader.getString();
                } else if ("groups".equals(fieldName)) {
                    List<RecoveryPlanGroup> groups = reader.readArray(reader1 -> RecoveryPlanGroup.fromJson(reader1));
                    deserializedCreateRecoveryPlanInputProperties.groups = groups;
                } else if ("failoverDeploymentModel".equals(fieldName)) {
                    deserializedCreateRecoveryPlanInputProperties.failoverDeploymentModel
                        = FailoverDeploymentModel.fromString(reader.getString());
                } else if ("providerSpecificInput".equals(fieldName)) {
                    List<RecoveryPlanProviderSpecificInput> providerSpecificInput
                        = reader.readArray(reader1 -> RecoveryPlanProviderSpecificInput.fromJson(reader1));
                    deserializedCreateRecoveryPlanInputProperties.providerSpecificInput = providerSpecificInput;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateRecoveryPlanInputProperties;
        });
    }
}
