// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This class represents the inline workflow task details.
 */
@Fluent
public final class InlineWorkflowTaskDetails extends GroupTaskDetails {
    /*
     * The type of task details.
     */
    private String instanceType = "InlineWorkflowTaskDetails";

    /*
     * The list of child workflow ids.
     */
    private List<String> workflowIds;

    /**
     * Creates an instance of InlineWorkflowTaskDetails class.
     */
    public InlineWorkflowTaskDetails() {
    }

    /**
     * Get the instanceType property: The type of task details.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the workflowIds property: The list of child workflow ids.
     * 
     * @return the workflowIds value.
     */
    public List<String> workflowIds() {
        return this.workflowIds;
    }

    /**
     * Set the workflowIds property: The list of child workflow ids.
     * 
     * @param workflowIds the workflowIds value to set.
     * @return the InlineWorkflowTaskDetails object itself.
     */
    public InlineWorkflowTaskDetails withWorkflowIds(List<String> workflowIds) {
        this.workflowIds = workflowIds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InlineWorkflowTaskDetails withChildTasks(List<AsrTask> childTasks) {
        super.withChildTasks(childTasks);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (childTasks() != null) {
            childTasks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("childTasks", childTasks(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeArrayField("workflowIds", this.workflowIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InlineWorkflowTaskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InlineWorkflowTaskDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InlineWorkflowTaskDetails.
     */
    public static InlineWorkflowTaskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InlineWorkflowTaskDetails deserializedInlineWorkflowTaskDetails = new InlineWorkflowTaskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("childTasks".equals(fieldName)) {
                    List<AsrTask> childTasks = reader.readArray(reader1 -> AsrTask.fromJson(reader1));
                    deserializedInlineWorkflowTaskDetails.withChildTasks(childTasks);
                } else if ("instanceType".equals(fieldName)) {
                    deserializedInlineWorkflowTaskDetails.instanceType = reader.getString();
                } else if ("workflowIds".equals(fieldName)) {
                    List<String> workflowIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedInlineWorkflowTaskDetails.workflowIds = workflowIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInlineWorkflowTaskDetails;
        });
    }
}
