// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Recovery plan update properties.
 */
@Fluent
public final class UpdateRecoveryPlanInputProperties implements JsonSerializable<UpdateRecoveryPlanInputProperties> {
    /*
     * The recovery plan groups.
     */
    private List<RecoveryPlanGroup> groups;

    /**
     * Creates an instance of UpdateRecoveryPlanInputProperties class.
     */
    public UpdateRecoveryPlanInputProperties() {
    }

    /**
     * Get the groups property: The recovery plan groups.
     * 
     * @return the groups value.
     */
    public List<RecoveryPlanGroup> groups() {
        return this.groups;
    }

    /**
     * Set the groups property: The recovery plan groups.
     * 
     * @param groups the groups value to set.
     * @return the UpdateRecoveryPlanInputProperties object itself.
     */
    public UpdateRecoveryPlanInputProperties withGroups(List<RecoveryPlanGroup> groups) {
        this.groups = groups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (groups() != null) {
            groups().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("groups", this.groups, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateRecoveryPlanInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateRecoveryPlanInputProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateRecoveryPlanInputProperties.
     */
    public static UpdateRecoveryPlanInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateRecoveryPlanInputProperties deserializedUpdateRecoveryPlanInputProperties
                = new UpdateRecoveryPlanInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("groups".equals(fieldName)) {
                    List<RecoveryPlanGroup> groups = reader.readArray(reader1 -> RecoveryPlanGroup.fromJson(reader1));
                    deserializedUpdateRecoveryPlanInputProperties.groups = groups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateRecoveryPlanInputProperties;
        });
    }
}
