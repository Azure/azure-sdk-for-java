// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resolve health errors input properties.
 */
@Fluent
public final class ResolveHealthError implements JsonSerializable<ResolveHealthError> {
    /*
     * Health error id.
     */
    private String healthErrorId;

    /**
     * Creates an instance of ResolveHealthError class.
     */
    public ResolveHealthError() {
    }

    /**
     * Get the healthErrorId property: Health error id.
     * 
     * @return the healthErrorId value.
     */
    public String healthErrorId() {
        return this.healthErrorId;
    }

    /**
     * Set the healthErrorId property: Health error id.
     * 
     * @param healthErrorId the healthErrorId value to set.
     * @return the ResolveHealthError object itself.
     */
    public ResolveHealthError withHealthErrorId(String healthErrorId) {
        this.healthErrorId = healthErrorId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("healthErrorId", this.healthErrorId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResolveHealthError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResolveHealthError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResolveHealthError.
     */
    public static ResolveHealthError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResolveHealthError deserializedResolveHealthError = new ResolveHealthError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("healthErrorId".equals(fieldName)) {
                    deserializedResolveHealthError.healthErrorId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResolveHealthError;
        });
    }
}
