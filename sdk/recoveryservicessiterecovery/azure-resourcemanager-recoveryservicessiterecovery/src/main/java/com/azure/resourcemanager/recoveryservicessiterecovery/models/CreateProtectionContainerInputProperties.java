// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Create protection container input properties.
 */
@Fluent
public final class CreateProtectionContainerInputProperties
    implements JsonSerializable<CreateProtectionContainerInputProperties> {
    /*
     * Provider specific inputs for container creation.
     */
    private List<ReplicationProviderSpecificContainerCreationInput> providerSpecificInput;

    /**
     * Creates an instance of CreateProtectionContainerInputProperties class.
     */
    public CreateProtectionContainerInputProperties() {
    }

    /**
     * Get the providerSpecificInput property: Provider specific inputs for container creation.
     * 
     * @return the providerSpecificInput value.
     */
    public List<ReplicationProviderSpecificContainerCreationInput> providerSpecificInput() {
        return this.providerSpecificInput;
    }

    /**
     * Set the providerSpecificInput property: Provider specific inputs for container creation.
     * 
     * @param providerSpecificInput the providerSpecificInput value to set.
     * @return the CreateProtectionContainerInputProperties object itself.
     */
    public CreateProtectionContainerInputProperties
        withProviderSpecificInput(List<ReplicationProviderSpecificContainerCreationInput> providerSpecificInput) {
        this.providerSpecificInput = providerSpecificInput;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerSpecificInput() != null) {
            providerSpecificInput().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("providerSpecificInput", this.providerSpecificInput,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateProtectionContainerInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateProtectionContainerInputProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateProtectionContainerInputProperties.
     */
    public static CreateProtectionContainerInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateProtectionContainerInputProperties deserializedCreateProtectionContainerInputProperties
                = new CreateProtectionContainerInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerSpecificInput".equals(fieldName)) {
                    List<ReplicationProviderSpecificContainerCreationInput> providerSpecificInput = reader
                        .readArray(reader1 -> ReplicationProviderSpecificContainerCreationInput.fromJson(reader1));
                    deserializedCreateProtectionContainerInputProperties.providerSpecificInput = providerSpecificInput;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateProtectionContainerInputProperties;
        });
    }
}
