// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * HyperV Replica Blue policy input.
 */
@Fluent
public final class HyperVReplicaBluePolicyInput extends HyperVReplicaPolicyInput {
    /*
     * The class type.
     */
    private String instanceType = "HyperVReplica2012R2";

    /*
     * A value indicating the replication interval.
     */
    private Integer replicationFrequencyInSeconds;

    /**
     * Creates an instance of HyperVReplicaBluePolicyInput class.
     */
    public HyperVReplicaBluePolicyInput() {
    }

    /**
     * Get the instanceType property: The class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the replicationFrequencyInSeconds property: A value indicating the replication interval.
     * 
     * @return the replicationFrequencyInSeconds value.
     */
    public Integer replicationFrequencyInSeconds() {
        return this.replicationFrequencyInSeconds;
    }

    /**
     * Set the replicationFrequencyInSeconds property: A value indicating the replication interval.
     * 
     * @param replicationFrequencyInSeconds the replicationFrequencyInSeconds value to set.
     * @return the HyperVReplicaBluePolicyInput object itself.
     */
    public HyperVReplicaBluePolicyInput withReplicationFrequencyInSeconds(Integer replicationFrequencyInSeconds) {
        this.replicationFrequencyInSeconds = replicationFrequencyInSeconds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withRecoveryPoints(Integer recoveryPoints) {
        super.withRecoveryPoints(recoveryPoints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput
        withApplicationConsistentSnapshotFrequencyInHours(Integer applicationConsistentSnapshotFrequencyInHours) {
        super.withApplicationConsistentSnapshotFrequencyInHours(applicationConsistentSnapshotFrequencyInHours);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withCompression(String compression) {
        super.withCompression(compression);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withInitialReplicationMethod(String initialReplicationMethod) {
        super.withInitialReplicationMethod(initialReplicationMethod);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withOnlineReplicationStartTime(String onlineReplicationStartTime) {
        super.withOnlineReplicationStartTime(onlineReplicationStartTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withOfflineReplicationImportPath(String offlineReplicationImportPath) {
        super.withOfflineReplicationImportPath(offlineReplicationImportPath);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withOfflineReplicationExportPath(String offlineReplicationExportPath) {
        super.withOfflineReplicationExportPath(offlineReplicationExportPath);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withReplicationPort(Integer replicationPort) {
        super.withReplicationPort(replicationPort);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withAllowedAuthenticationType(Integer allowedAuthenticationType) {
        super.withAllowedAuthenticationType(allowedAuthenticationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperVReplicaBluePolicyInput withReplicaDeletion(String replicaDeletion) {
        super.withReplicaDeletion(replicaDeletion);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("recoveryPoints", recoveryPoints());
        jsonWriter.writeNumberField("applicationConsistentSnapshotFrequencyInHours",
            applicationConsistentSnapshotFrequencyInHours());
        jsonWriter.writeStringField("compression", compression());
        jsonWriter.writeStringField("initialReplicationMethod", initialReplicationMethod());
        jsonWriter.writeStringField("onlineReplicationStartTime", onlineReplicationStartTime());
        jsonWriter.writeStringField("offlineReplicationImportPath", offlineReplicationImportPath());
        jsonWriter.writeStringField("offlineReplicationExportPath", offlineReplicationExportPath());
        jsonWriter.writeNumberField("replicationPort", replicationPort());
        jsonWriter.writeNumberField("allowedAuthenticationType", allowedAuthenticationType());
        jsonWriter.writeStringField("replicaDeletion", replicaDeletion());
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeNumberField("replicationFrequencyInSeconds", this.replicationFrequencyInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVReplicaBluePolicyInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVReplicaBluePolicyInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVReplicaBluePolicyInput.
     */
    public static HyperVReplicaBluePolicyInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVReplicaBluePolicyInput deserializedHyperVReplicaBluePolicyInput = new HyperVReplicaBluePolicyInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recoveryPoints".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.withRecoveryPoints(reader.getNullable(JsonReader::getInt));
                } else if ("applicationConsistentSnapshotFrequencyInHours".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput
                        .withApplicationConsistentSnapshotFrequencyInHours(reader.getNullable(JsonReader::getInt));
                } else if ("compression".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.withCompression(reader.getString());
                } else if ("initialReplicationMethod".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.withInitialReplicationMethod(reader.getString());
                } else if ("onlineReplicationStartTime".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.withOnlineReplicationStartTime(reader.getString());
                } else if ("offlineReplicationImportPath".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.withOfflineReplicationImportPath(reader.getString());
                } else if ("offlineReplicationExportPath".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.withOfflineReplicationExportPath(reader.getString());
                } else if ("replicationPort".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput
                        .withReplicationPort(reader.getNullable(JsonReader::getInt));
                } else if ("allowedAuthenticationType".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput
                        .withAllowedAuthenticationType(reader.getNullable(JsonReader::getInt));
                } else if ("replicaDeletion".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.withReplicaDeletion(reader.getString());
                } else if ("instanceType".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.instanceType = reader.getString();
                } else if ("replicationFrequencyInSeconds".equals(fieldName)) {
                    deserializedHyperVReplicaBluePolicyInput.replicationFrequencyInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVReplicaBluePolicyInput;
        });
    }
}
