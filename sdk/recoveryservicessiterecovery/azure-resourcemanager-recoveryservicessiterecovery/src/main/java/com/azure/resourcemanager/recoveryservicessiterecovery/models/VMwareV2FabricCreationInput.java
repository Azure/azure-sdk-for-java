// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VMwareV2 fabric provider specific settings.
 */
@Fluent
public final class VMwareV2FabricCreationInput extends FabricSpecificCreationInput {
    /*
     * Gets the class type.
     */
    private String instanceType = "VMwareV2";

    /*
     * The ARM Id of the VMware site.
     */
    private String vmwareSiteId;

    /*
     * The ARM Id of the physical site.
     */
    private String physicalSiteId;

    /*
     * The ARM Id of the migration solution.
     */
    private String migrationSolutionId;

    /**
     * Creates an instance of VMwareV2FabricCreationInput class.
     */
    public VMwareV2FabricCreationInput() {
    }

    /**
     * Get the instanceType property: Gets the class type.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the vmwareSiteId property: The ARM Id of the VMware site.
     * 
     * @return the vmwareSiteId value.
     */
    public String vmwareSiteId() {
        return this.vmwareSiteId;
    }

    /**
     * Set the vmwareSiteId property: The ARM Id of the VMware site.
     * 
     * @param vmwareSiteId the vmwareSiteId value to set.
     * @return the VMwareV2FabricCreationInput object itself.
     */
    public VMwareV2FabricCreationInput withVmwareSiteId(String vmwareSiteId) {
        this.vmwareSiteId = vmwareSiteId;
        return this;
    }

    /**
     * Get the physicalSiteId property: The ARM Id of the physical site.
     * 
     * @return the physicalSiteId value.
     */
    public String physicalSiteId() {
        return this.physicalSiteId;
    }

    /**
     * Set the physicalSiteId property: The ARM Id of the physical site.
     * 
     * @param physicalSiteId the physicalSiteId value to set.
     * @return the VMwareV2FabricCreationInput object itself.
     */
    public VMwareV2FabricCreationInput withPhysicalSiteId(String physicalSiteId) {
        this.physicalSiteId = physicalSiteId;
        return this;
    }

    /**
     * Get the migrationSolutionId property: The ARM Id of the migration solution.
     * 
     * @return the migrationSolutionId value.
     */
    public String migrationSolutionId() {
        return this.migrationSolutionId;
    }

    /**
     * Set the migrationSolutionId property: The ARM Id of the migration solution.
     * 
     * @param migrationSolutionId the migrationSolutionId value to set.
     * @return the VMwareV2FabricCreationInput object itself.
     */
    public VMwareV2FabricCreationInput withMigrationSolutionId(String migrationSolutionId) {
        this.migrationSolutionId = migrationSolutionId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (migrationSolutionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property migrationSolutionId in model VMwareV2FabricCreationInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VMwareV2FabricCreationInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("migrationSolutionId", this.migrationSolutionId);
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeStringField("vmwareSiteId", this.vmwareSiteId);
        jsonWriter.writeStringField("physicalSiteId", this.physicalSiteId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareV2FabricCreationInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareV2FabricCreationInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VMwareV2FabricCreationInput.
     */
    public static VMwareV2FabricCreationInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareV2FabricCreationInput deserializedVMwareV2FabricCreationInput = new VMwareV2FabricCreationInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("migrationSolutionId".equals(fieldName)) {
                    deserializedVMwareV2FabricCreationInput.migrationSolutionId = reader.getString();
                } else if ("instanceType".equals(fieldName)) {
                    deserializedVMwareV2FabricCreationInput.instanceType = reader.getString();
                } else if ("vmwareSiteId".equals(fieldName)) {
                    deserializedVMwareV2FabricCreationInput.vmwareSiteId = reader.getString();
                } else if ("physicalSiteId".equals(fieldName)) {
                    deserializedVMwareV2FabricCreationInput.physicalSiteId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareV2FabricCreationInput;
        });
    }
}
