// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Supported OS upgrade versions.
 */
@Immutable
public final class OSUpgradeSupportedVersions implements JsonSerializable<OSUpgradeSupportedVersions> {
    /*
     * The source OS version name.
     */
    private String supportedSourceOsVersion;

    /*
     * The target OS version names.
     */
    private List<String> supportedTargetOsVersions;

    /**
     * Creates an instance of OSUpgradeSupportedVersions class.
     */
    public OSUpgradeSupportedVersions() {
    }

    /**
     * Get the supportedSourceOsVersion property: The source OS version name.
     * 
     * @return the supportedSourceOsVersion value.
     */
    public String supportedSourceOsVersion() {
        return this.supportedSourceOsVersion;
    }

    /**
     * Get the supportedTargetOsVersions property: The target OS version names.
     * 
     * @return the supportedTargetOsVersions value.
     */
    public List<String> supportedTargetOsVersions() {
        return this.supportedTargetOsVersions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OSUpgradeSupportedVersions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OSUpgradeSupportedVersions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OSUpgradeSupportedVersions.
     */
    public static OSUpgradeSupportedVersions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OSUpgradeSupportedVersions deserializedOSUpgradeSupportedVersions = new OSUpgradeSupportedVersions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("supportedSourceOsVersion".equals(fieldName)) {
                    deserializedOSUpgradeSupportedVersions.supportedSourceOsVersion = reader.getString();
                } else if ("supportedTargetOsVersions".equals(fieldName)) {
                    List<String> supportedTargetOsVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedOSUpgradeSupportedVersions.supportedTargetOsVersions = supportedTargetOsVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOSUpgradeSupportedVersions;
        });
    }
}
