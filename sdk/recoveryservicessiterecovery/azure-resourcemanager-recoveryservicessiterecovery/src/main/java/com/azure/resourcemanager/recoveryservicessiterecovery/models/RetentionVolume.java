// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The retention details of the MT.
 */
@Fluent
public final class RetentionVolume implements JsonSerializable<RetentionVolume> {
    /*
     * The volume name.
     */
    private String volumeName;

    /*
     * The volume capacity.
     */
    private Long capacityInBytes;

    /*
     * The free space available in this volume.
     */
    private Long freeSpaceInBytes;

    /*
     * The threshold percentage.
     */
    private Integer thresholdPercentage;

    /**
     * Creates an instance of RetentionVolume class.
     */
    public RetentionVolume() {
    }

    /**
     * Get the volumeName property: The volume name.
     * 
     * @return the volumeName value.
     */
    public String volumeName() {
        return this.volumeName;
    }

    /**
     * Set the volumeName property: The volume name.
     * 
     * @param volumeName the volumeName value to set.
     * @return the RetentionVolume object itself.
     */
    public RetentionVolume withVolumeName(String volumeName) {
        this.volumeName = volumeName;
        return this;
    }

    /**
     * Get the capacityInBytes property: The volume capacity.
     * 
     * @return the capacityInBytes value.
     */
    public Long capacityInBytes() {
        return this.capacityInBytes;
    }

    /**
     * Set the capacityInBytes property: The volume capacity.
     * 
     * @param capacityInBytes the capacityInBytes value to set.
     * @return the RetentionVolume object itself.
     */
    public RetentionVolume withCapacityInBytes(Long capacityInBytes) {
        this.capacityInBytes = capacityInBytes;
        return this;
    }

    /**
     * Get the freeSpaceInBytes property: The free space available in this volume.
     * 
     * @return the freeSpaceInBytes value.
     */
    public Long freeSpaceInBytes() {
        return this.freeSpaceInBytes;
    }

    /**
     * Set the freeSpaceInBytes property: The free space available in this volume.
     * 
     * @param freeSpaceInBytes the freeSpaceInBytes value to set.
     * @return the RetentionVolume object itself.
     */
    public RetentionVolume withFreeSpaceInBytes(Long freeSpaceInBytes) {
        this.freeSpaceInBytes = freeSpaceInBytes;
        return this;
    }

    /**
     * Get the thresholdPercentage property: The threshold percentage.
     * 
     * @return the thresholdPercentage value.
     */
    public Integer thresholdPercentage() {
        return this.thresholdPercentage;
    }

    /**
     * Set the thresholdPercentage property: The threshold percentage.
     * 
     * @param thresholdPercentage the thresholdPercentage value to set.
     * @return the RetentionVolume object itself.
     */
    public RetentionVolume withThresholdPercentage(Integer thresholdPercentage) {
        this.thresholdPercentage = thresholdPercentage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("volumeName", this.volumeName);
        jsonWriter.writeNumberField("capacityInBytes", this.capacityInBytes);
        jsonWriter.writeNumberField("freeSpaceInBytes", this.freeSpaceInBytes);
        jsonWriter.writeNumberField("thresholdPercentage", this.thresholdPercentage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RetentionVolume from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RetentionVolume if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RetentionVolume.
     */
    public static RetentionVolume fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RetentionVolume deserializedRetentionVolume = new RetentionVolume();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("volumeName".equals(fieldName)) {
                    deserializedRetentionVolume.volumeName = reader.getString();
                } else if ("capacityInBytes".equals(fieldName)) {
                    deserializedRetentionVolume.capacityInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("freeSpaceInBytes".equals(fieldName)) {
                    deserializedRetentionVolume.freeSpaceInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("thresholdPercentage".equals(fieldName)) {
                    deserializedRetentionVolume.thresholdPercentage = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRetentionVolume;
        });
    }
}
