// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * VMM fabric provider specific VM settings.
 */
@Fluent
public final class VmmVirtualMachineDetails extends HyperVVirtualMachineDetails {
    /*
     * Gets the class type. Overridden in derived classes.
     */
    private String instanceType = "VmmVirtualMachine";

    /**
     * Creates an instance of VmmVirtualMachineDetails class.
     */
    public VmmVirtualMachineDetails() {
    }

    /**
     * Get the instanceType property: Gets the class type. Overridden in derived classes.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withSourceItemId(String sourceItemId) {
        super.withSourceItemId(sourceItemId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withGeneration(String generation) {
        super.withGeneration(generation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withOsDetails(OSDetails osDetails) {
        super.withOsDetails(osDetails);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withDiskDetails(List<DiskDetails> diskDetails) {
        super.withDiskDetails(diskDetails);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withHasPhysicalDisk(PresenceStatus hasPhysicalDisk) {
        super.withHasPhysicalDisk(hasPhysicalDisk);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withHasFibreChannelAdapter(PresenceStatus hasFibreChannelAdapter) {
        super.withHasFibreChannelAdapter(hasFibreChannelAdapter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withHasSharedVhd(PresenceStatus hasSharedVhd) {
        super.withHasSharedVhd(hasSharedVhd);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmmVirtualMachineDetails withHyperVHostId(String hyperVHostId) {
        super.withHyperVHostId(hyperVHostId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (osDetails() != null) {
            osDetails().validate();
        }
        if (diskDetails() != null) {
            diskDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceItemId", sourceItemId());
        jsonWriter.writeStringField("generation", generation());
        jsonWriter.writeJsonField("osDetails", osDetails());
        jsonWriter.writeArrayField("diskDetails", diskDetails(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("hasPhysicalDisk", hasPhysicalDisk() == null ? null : hasPhysicalDisk().toString());
        jsonWriter.writeStringField("hasFibreChannelAdapter",
            hasFibreChannelAdapter() == null ? null : hasFibreChannelAdapter().toString());
        jsonWriter.writeStringField("hasSharedVhd", hasSharedVhd() == null ? null : hasSharedVhd().toString());
        jsonWriter.writeStringField("hyperVHostId", hyperVHostId());
        jsonWriter.writeStringField("instanceType", this.instanceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmmVirtualMachineDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmmVirtualMachineDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VmmVirtualMachineDetails.
     */
    public static VmmVirtualMachineDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmmVirtualMachineDetails deserializedVmmVirtualMachineDetails = new VmmVirtualMachineDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceItemId".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails.withSourceItemId(reader.getString());
                } else if ("generation".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails.withGeneration(reader.getString());
                } else if ("osDetails".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails.withOsDetails(OSDetails.fromJson(reader));
                } else if ("diskDetails".equals(fieldName)) {
                    List<DiskDetails> diskDetails = reader.readArray(reader1 -> DiskDetails.fromJson(reader1));
                    deserializedVmmVirtualMachineDetails.withDiskDetails(diskDetails);
                } else if ("hasPhysicalDisk".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails
                        .withHasPhysicalDisk(PresenceStatus.fromString(reader.getString()));
                } else if ("hasFibreChannelAdapter".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails
                        .withHasFibreChannelAdapter(PresenceStatus.fromString(reader.getString()));
                } else if ("hasSharedVhd".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails
                        .withHasSharedVhd(PresenceStatus.fromString(reader.getString()));
                } else if ("hyperVHostId".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails.withHyperVHostId(reader.getString());
                } else if ("instanceType".equals(fieldName)) {
                    deserializedVmmVirtualMachineDetails.instanceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmmVirtualMachineDetails;
        });
    }
}
