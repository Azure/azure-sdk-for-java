// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.ReplicationProtectionClusterInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ApplyClusterRecoveryPointInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterTestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterTestFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterUnplannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectionCluster;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectionClusterProperties;

public final class ReplicationProtectionClusterImpl
    implements ReplicationProtectionCluster, ReplicationProtectionCluster.Definition {
    private ReplicationProtectionClusterInner innerObject;

    private final com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager;

    ReplicationProtectionClusterImpl(ReplicationProtectionClusterInner innerObject,
        com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ReplicationProtectionClusterProperties properties() {
        return this.innerModel().properties();
    }

    public ReplicationProtectionClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String resourceName;

    private String fabricName;

    private String protectionContainerName;

    private String replicationProtectionClusterName;

    public ReplicationProtectionClusterImpl withExistingReplicationProtectionContainer(String resourceGroupName,
        String resourceName, String fabricName, String protectionContainerName) {
        this.resourceGroupName = resourceGroupName;
        this.resourceName = resourceName;
        this.fabricName = fabricName;
        this.protectionContainerName = protectionContainerName;
        return this;
    }

    public ReplicationProtectionCluster create() {
        this.innerObject = serviceManager.serviceClient()
            .getReplicationProtectionClusters()
            .create(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, this.innerModel(), Context.NONE);
        return this;
    }

    public ReplicationProtectionCluster create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getReplicationProtectionClusters()
            .create(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, this.innerModel(), context);
        return this;
    }

    ReplicationProtectionClusterImpl(String name,
        com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager) {
        this.innerObject = new ReplicationProtectionClusterInner();
        this.serviceManager = serviceManager;
        this.replicationProtectionClusterName = name;
    }

    public ReplicationProtectionCluster refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getReplicationProtectionClusters()
            .getWithResponse(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, Context.NONE)
            .getValue();
        return this;
    }

    public ReplicationProtectionCluster refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getReplicationProtectionClusters()
            .getWithResponse(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context)
            .getValue();
        return this;
    }

    public ReplicationProtectionCluster
        applyRecoveryPoint(ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput) {
        return serviceManager.replicationProtectionClusters()
            .applyRecoveryPoint(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput);
    }

    public ReplicationProtectionCluster
        applyRecoveryPoint(ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput, Context context) {
        return serviceManager.replicationProtectionClusters()
            .applyRecoveryPoint(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput, context);
    }

    public ReplicationProtectionCluster failoverCommit() {
        return serviceManager.replicationProtectionClusters()
            .failoverCommit(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName);
    }

    public ReplicationProtectionCluster failoverCommit(Context context) {
        return serviceManager.replicationProtectionClusters()
            .failoverCommit(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context);
    }

    public ReplicationProtectionCluster repairReplication() {
        return serviceManager.replicationProtectionClusters()
            .repairReplication(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName);
    }

    public ReplicationProtectionCluster repairReplication(Context context) {
        return serviceManager.replicationProtectionClusters()
            .repairReplication(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context);
    }

    public ReplicationProtectionCluster testFailover(ClusterTestFailoverInput failoverInput) {
        return serviceManager.replicationProtectionClusters()
            .testFailover(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput);
    }

    public ReplicationProtectionCluster testFailover(ClusterTestFailoverInput failoverInput, Context context) {
        return serviceManager.replicationProtectionClusters()
            .testFailover(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, context);
    }

    public ReplicationProtectionCluster testFailoverCleanup(ClusterTestFailoverCleanupInput cleanupInput) {
        return serviceManager.replicationProtectionClusters()
            .testFailoverCleanup(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, cleanupInput);
    }

    public ReplicationProtectionCluster testFailoverCleanup(ClusterTestFailoverCleanupInput cleanupInput,
        Context context) {
        return serviceManager.replicationProtectionClusters()
            .testFailoverCleanup(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, cleanupInput, context);
    }

    public ReplicationProtectionCluster unplannedFailover(ClusterUnplannedFailoverInput failoverInput) {
        return serviceManager.replicationProtectionClusters()
            .unplannedFailover(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput);
    }

    public ReplicationProtectionCluster unplannedFailover(ClusterUnplannedFailoverInput failoverInput,
        Context context) {
        return serviceManager.replicationProtectionClusters()
            .unplannedFailover(resourceGroupName, resourceName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, context);
    }

    public ReplicationProtectionClusterImpl withProperties(ReplicationProtectionClusterProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
