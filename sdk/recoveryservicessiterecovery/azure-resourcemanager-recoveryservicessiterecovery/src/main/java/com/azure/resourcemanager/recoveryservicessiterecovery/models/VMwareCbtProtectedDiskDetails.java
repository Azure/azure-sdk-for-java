// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VMwareCbt protected disk details.
 */
@Fluent
public final class VMwareCbtProtectedDiskDetails implements JsonSerializable<VMwareCbtProtectedDiskDetails> {
    /*
     * The disk id.
     */
    private String diskId;

    /*
     * The disk name.
     */
    private String diskName;

    /*
     * The disk type.
     */
    private DiskAccountType diskType;

    /*
     * The disk path.
     */
    private String diskPath;

    /*
     * A value indicating whether the disk is the OS disk.
     */
    private String isOSDisk;

    /*
     * The disk capacity in bytes.
     */
    private Long capacityInBytes;

    /*
     * The log storage account ARM Id.
     */
    private String logStorageAccountId;

    /*
     * The key vault secret name of the log storage account.
     */
    private String logStorageAccountSasSecretName;

    /*
     * The DiskEncryptionSet ARM Id.
     */
    private String diskEncryptionSetId;

    /*
     * The ARM Id of the seed managed disk.
     */
    private String seedManagedDiskId;

    /*
     * The uri of the seed blob.
     */
    private String seedBlobUri;

    /*
     * The ARM Id of the target managed disk.
     */
    private String targetManagedDiskId;

    /*
     * The uri of the target blob.
     */
    private String targetBlobUri;

    /*
     * The name for the target managed disk.
     */
    private String targetDiskName;

    /*
     * A value indicating the gateway operation details.
     */
    private GatewayOperationDetails gatewayOperationDetails;

    /**
     * Creates an instance of VMwareCbtProtectedDiskDetails class.
     */
    public VMwareCbtProtectedDiskDetails() {
    }

    /**
     * Get the diskId property: The disk id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Get the diskName property: The disk name.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Get the diskType property: The disk type.
     * 
     * @return the diskType value.
     */
    public DiskAccountType diskType() {
        return this.diskType;
    }

    /**
     * Set the diskType property: The disk type.
     * 
     * @param diskType the diskType value to set.
     * @return the VMwareCbtProtectedDiskDetails object itself.
     */
    public VMwareCbtProtectedDiskDetails withDiskType(DiskAccountType diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Get the diskPath property: The disk path.
     * 
     * @return the diskPath value.
     */
    public String diskPath() {
        return this.diskPath;
    }

    /**
     * Get the isOSDisk property: A value indicating whether the disk is the OS disk.
     * 
     * @return the isOSDisk value.
     */
    public String isOSDisk() {
        return this.isOSDisk;
    }

    /**
     * Get the capacityInBytes property: The disk capacity in bytes.
     * 
     * @return the capacityInBytes value.
     */
    public Long capacityInBytes() {
        return this.capacityInBytes;
    }

    /**
     * Get the logStorageAccountId property: The log storage account ARM Id.
     * 
     * @return the logStorageAccountId value.
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * Get the logStorageAccountSasSecretName property: The key vault secret name of the log storage account.
     * 
     * @return the logStorageAccountSasSecretName value.
     */
    public String logStorageAccountSasSecretName() {
        return this.logStorageAccountSasSecretName;
    }

    /**
     * Get the diskEncryptionSetId property: The DiskEncryptionSet ARM Id.
     * 
     * @return the diskEncryptionSetId value.
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * Get the seedManagedDiskId property: The ARM Id of the seed managed disk.
     * 
     * @return the seedManagedDiskId value.
     */
    public String seedManagedDiskId() {
        return this.seedManagedDiskId;
    }

    /**
     * Get the seedBlobUri property: The uri of the seed blob.
     * 
     * @return the seedBlobUri value.
     */
    public String seedBlobUri() {
        return this.seedBlobUri;
    }

    /**
     * Get the targetManagedDiskId property: The ARM Id of the target managed disk.
     * 
     * @return the targetManagedDiskId value.
     */
    public String targetManagedDiskId() {
        return this.targetManagedDiskId;
    }

    /**
     * Get the targetBlobUri property: The uri of the target blob.
     * 
     * @return the targetBlobUri value.
     */
    public String targetBlobUri() {
        return this.targetBlobUri;
    }

    /**
     * Get the targetDiskName property: The name for the target managed disk.
     * 
     * @return the targetDiskName value.
     */
    public String targetDiskName() {
        return this.targetDiskName;
    }

    /**
     * Set the targetDiskName property: The name for the target managed disk.
     * 
     * @param targetDiskName the targetDiskName value to set.
     * @return the VMwareCbtProtectedDiskDetails object itself.
     */
    public VMwareCbtProtectedDiskDetails withTargetDiskName(String targetDiskName) {
        this.targetDiskName = targetDiskName;
        return this;
    }

    /**
     * Get the gatewayOperationDetails property: A value indicating the gateway operation details.
     * 
     * @return the gatewayOperationDetails value.
     */
    public GatewayOperationDetails gatewayOperationDetails() {
        return this.gatewayOperationDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (gatewayOperationDetails() != null) {
            gatewayOperationDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskType", this.diskType == null ? null : this.diskType.toString());
        jsonWriter.writeStringField("targetDiskName", this.targetDiskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareCbtProtectedDiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareCbtProtectedDiskDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMwareCbtProtectedDiskDetails.
     */
    public static VMwareCbtProtectedDiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareCbtProtectedDiskDetails deserializedVMwareCbtProtectedDiskDetails
                = new VMwareCbtProtectedDiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.diskId = reader.getString();
                } else if ("diskName".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.diskName = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.diskType = DiskAccountType.fromString(reader.getString());
                } else if ("diskPath".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.diskPath = reader.getString();
                } else if ("isOSDisk".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.isOSDisk = reader.getString();
                } else if ("capacityInBytes".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.capacityInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("logStorageAccountId".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.logStorageAccountId = reader.getString();
                } else if ("logStorageAccountSasSecretName".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.logStorageAccountSasSecretName = reader.getString();
                } else if ("diskEncryptionSetId".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.diskEncryptionSetId = reader.getString();
                } else if ("seedManagedDiskId".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.seedManagedDiskId = reader.getString();
                } else if ("seedBlobUri".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.seedBlobUri = reader.getString();
                } else if ("targetManagedDiskId".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.targetManagedDiskId = reader.getString();
                } else if ("targetBlobUri".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.targetBlobUri = reader.getString();
                } else if ("targetDiskName".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.targetDiskName = reader.getString();
                } else if ("gatewayOperationDetails".equals(fieldName)) {
                    deserializedVMwareCbtProtectedDiskDetails.gatewayOperationDetails
                        = GatewayOperationDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareCbtProtectedDiskDetails;
        });
    }
}
