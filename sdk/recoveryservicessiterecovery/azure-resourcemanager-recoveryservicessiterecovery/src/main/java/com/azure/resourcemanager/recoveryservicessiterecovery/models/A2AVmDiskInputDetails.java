// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A2A disk input details.
 */
@Fluent
public final class A2AVmDiskInputDetails implements JsonSerializable<A2AVmDiskInputDetails> {
    /*
     * The disk Uri.
     */
    private String diskUri;

    /*
     * The recovery VHD storage account Id.
     */
    private String recoveryAzureStorageAccountId;

    /*
     * The primary staging storage account Id.
     */
    private String primaryStagingAzureStorageAccountId;

    /**
     * Creates an instance of A2AVmDiskInputDetails class.
     */
    public A2AVmDiskInputDetails() {
    }

    /**
     * Get the diskUri property: The disk Uri.
     * 
     * @return the diskUri value.
     */
    public String diskUri() {
        return this.diskUri;
    }

    /**
     * Set the diskUri property: The disk Uri.
     * 
     * @param diskUri the diskUri value to set.
     * @return the A2AVmDiskInputDetails object itself.
     */
    public A2AVmDiskInputDetails withDiskUri(String diskUri) {
        this.diskUri = diskUri;
        return this;
    }

    /**
     * Get the recoveryAzureStorageAccountId property: The recovery VHD storage account Id.
     * 
     * @return the recoveryAzureStorageAccountId value.
     */
    public String recoveryAzureStorageAccountId() {
        return this.recoveryAzureStorageAccountId;
    }

    /**
     * Set the recoveryAzureStorageAccountId property: The recovery VHD storage account Id.
     * 
     * @param recoveryAzureStorageAccountId the recoveryAzureStorageAccountId value to set.
     * @return the A2AVmDiskInputDetails object itself.
     */
    public A2AVmDiskInputDetails withRecoveryAzureStorageAccountId(String recoveryAzureStorageAccountId) {
        this.recoveryAzureStorageAccountId = recoveryAzureStorageAccountId;
        return this;
    }

    /**
     * Get the primaryStagingAzureStorageAccountId property: The primary staging storage account Id.
     * 
     * @return the primaryStagingAzureStorageAccountId value.
     */
    public String primaryStagingAzureStorageAccountId() {
        return this.primaryStagingAzureStorageAccountId;
    }

    /**
     * Set the primaryStagingAzureStorageAccountId property: The primary staging storage account Id.
     * 
     * @param primaryStagingAzureStorageAccountId the primaryStagingAzureStorageAccountId value to set.
     * @return the A2AVmDiskInputDetails object itself.
     */
    public A2AVmDiskInputDetails withPrimaryStagingAzureStorageAccountId(String primaryStagingAzureStorageAccountId) {
        this.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property diskUri in model A2AVmDiskInputDetails"));
        }
        if (recoveryAzureStorageAccountId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recoveryAzureStorageAccountId in model A2AVmDiskInputDetails"));
        }
        if (primaryStagingAzureStorageAccountId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property primaryStagingAzureStorageAccountId in model A2AVmDiskInputDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(A2AVmDiskInputDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskUri", this.diskUri);
        jsonWriter.writeStringField("recoveryAzureStorageAccountId", this.recoveryAzureStorageAccountId);
        jsonWriter.writeStringField("primaryStagingAzureStorageAccountId", this.primaryStagingAzureStorageAccountId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of A2AVmDiskInputDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of A2AVmDiskInputDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the A2AVmDiskInputDetails.
     */
    public static A2AVmDiskInputDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            A2AVmDiskInputDetails deserializedA2AVmDiskInputDetails = new A2AVmDiskInputDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskUri".equals(fieldName)) {
                    deserializedA2AVmDiskInputDetails.diskUri = reader.getString();
                } else if ("recoveryAzureStorageAccountId".equals(fieldName)) {
                    deserializedA2AVmDiskInputDetails.recoveryAzureStorageAccountId = reader.getString();
                } else if ("primaryStagingAzureStorageAccountId".equals(fieldName)) {
                    deserializedA2AVmDiskInputDetails.primaryStagingAzureStorageAccountId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedA2AVmDiskInputDetails;
        });
    }
}
