// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.NetworkMappingInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkMappingFabricSpecificSettings;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkMappingProperties;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class NetworkMappingInnerTests {
    @Test
    public void testDeserialize() {
        NetworkMappingInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"state\":\"xc\",\"primaryNetworkFriendlyName\":\"npc\",\"primaryNetworkId\":\"ocohslkevleg\",\"primaryFabricFriendlyName\":\"fbuhfmvfaxkffe\",\"recoveryNetworkFriendlyName\":\"th\",\"recoveryNetworkId\":\"m\",\"recoveryFabricArmId\":\"yvshxmz\",\"recoveryFabricFriendlyName\":\"bzoggigrx\",\"fabricSpecificSettings\":{\"instanceType\":\"NetworkMappingFabricSpecificSettings\"}},\"location\":\"rvjx\",\"id\":\"jnspydp\",\"name\":\"koen\",\"type\":\"ou\"}")
                .toObject(NetworkMappingInner.class);
        Assertions.assertEquals("xc", model.properties().state());
        Assertions.assertEquals("npc", model.properties().primaryNetworkFriendlyName());
        Assertions.assertEquals("ocohslkevleg", model.properties().primaryNetworkId());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("th", model.properties().recoveryNetworkFriendlyName());
        Assertions.assertEquals("m", model.properties().recoveryNetworkId());
        Assertions.assertEquals("yvshxmz", model.properties().recoveryFabricArmId());
        Assertions.assertEquals("bzoggigrx", model.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("rvjx", model.location());
    }

    @Test
    public void testSerialize() {
        NetworkMappingInner model =
            new NetworkMappingInner()
                .withProperties(
                    new NetworkMappingProperties()
                        .withState("xc")
                        .withPrimaryNetworkFriendlyName("npc")
                        .withPrimaryNetworkId("ocohslkevleg")
                        .withPrimaryFabricFriendlyName("fbuhfmvfaxkffe")
                        .withRecoveryNetworkFriendlyName("th")
                        .withRecoveryNetworkId("m")
                        .withRecoveryFabricArmId("yvshxmz")
                        .withRecoveryFabricFriendlyName("bzoggigrx")
                        .withFabricSpecificSettings(new NetworkMappingFabricSpecificSettings()))
                .withLocation("rvjx");
        model = BinaryData.fromObject(model).toObject(NetworkMappingInner.class);
        Assertions.assertEquals("xc", model.properties().state());
        Assertions.assertEquals("npc", model.properties().primaryNetworkFriendlyName());
        Assertions.assertEquals("ocohslkevleg", model.properties().primaryNetworkId());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("th", model.properties().recoveryNetworkFriendlyName());
        Assertions.assertEquals("m", model.properties().recoveryNetworkId());
        Assertions.assertEquals("yvshxmz", model.properties().recoveryFabricArmId());
        Assertions.assertEquals("bzoggigrx", model.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("rvjx", model.location());
    }
}
