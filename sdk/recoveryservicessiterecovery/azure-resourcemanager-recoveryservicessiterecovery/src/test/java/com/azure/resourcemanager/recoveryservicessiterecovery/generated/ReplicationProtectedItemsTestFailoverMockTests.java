// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestFailoverInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestFailoverProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsTestFailoverMockTests {
    @Test
    public void testTestFailover() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"euybu\",\"protectedItemType\":\"dzjfjtvpeyxdyuxu\",\"protectableItemId\":\"rltqmmij\",\"recoveryServicesProviderId\":\"qfkwnaeikczscymq\",\"primaryFabricFriendlyName\":\"xgwpq\",\"primaryFabricProvider\":\"umz\",\"recoveryFabricFriendlyName\":\"dokez\",\"recoveryFabricId\":\"ezknfzqnzbflbqmh\",\"primaryProtectionContainerFriendlyName\":\"yxxvwedhagqbbse\",\"recoveryProtectionContainerFriendlyName\":\"ayuflmsyz\",\"protectionState\":\"crolrzesbomp\",\"protectionStateDescription\":\"kymunwjivtb\",\"activeLocation\":\"zbdjrdfeujywdal\",\"testFailoverState\":\"deqngc\",\"testFailoverStateDescription\":\"dz\",\"switchProviderState\":\"looulpozm\",\"switchProviderStateDescription\":\"hyclxrsidoebldp\",\"allowedOperations\":[\"ffjk\",\"tnhrevimxmaxcj\",\"pitygv\"],\"replicationHealth\":\"dsoqtbfkvuo\",\"failoverHealth\":\"zchnqekwanklp\",\"healthErrors\":[],\"policyId\":\"ydjhtkjserwi\",\"policyFriendlyName\":\"d\",\"lastSuccessfulFailoverTime\":\"2021-11-05T08:15:11Z\",\"lastSuccessfulTestFailoverTime\":\"2021-06-01T03:56:56Z\",\"currentScenario\":{\"scenarioName\":\"o\",\"jobId\":\"blrdolenr\",\"startTime\":\"2021-02-23T17:01:46Z\"},\"failoverRecoveryPointId\":\"p\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"nmzaofro\",\"eventCorrelationId\":\"qckievyrejyoy\"},\"location\":\"qftusdwmnrtvvbuc\",\"id\":\"nrovome\",\"name\":\"xwsicvwqzocsfshe\",\"type\":\"nmsg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .testFailover(
                    "uqjpzh",
                    "ahuvkqxqkvadmjh",
                    "mud",
                    "maajzd",
                    "bhsermclyqwwu",
                    new TestFailoverInput()
                        .withProperties(
                            new TestFailoverInputProperties()
                                .withFailoverDirection("qkaaptbssvkbcbpt")
                                .withNetworkType("bloccu")
                                .withNetworkId("lxzbnsshvqn")
                                .withProviderSpecificDetails(new TestFailoverProviderSpecificInput())),
                    Context.NONE);

        Assertions.assertEquals("euybu", response.properties().friendlyName());
        Assertions.assertEquals("dzjfjtvpeyxdyuxu", response.properties().protectedItemType());
        Assertions.assertEquals("rltqmmij", response.properties().protectableItemId());
        Assertions.assertEquals("qfkwnaeikczscymq", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("xgwpq", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("umz", response.properties().primaryFabricProvider());
        Assertions.assertEquals("dokez", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("ezknfzqnzbflbqmh", response.properties().recoveryFabricId());
        Assertions.assertEquals("yxxvwedhagqbbse", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("ayuflmsyz", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("crolrzesbomp", response.properties().protectionState());
        Assertions.assertEquals("kymunwjivtb", response.properties().protectionStateDescription());
        Assertions.assertEquals("zbdjrdfeujywdal", response.properties().activeLocation());
        Assertions.assertEquals("deqngc", response.properties().testFailoverState());
        Assertions.assertEquals("dz", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("looulpozm", response.properties().switchProviderState());
        Assertions.assertEquals("hyclxrsidoebldp", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("ffjk", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("dsoqtbfkvuo", response.properties().replicationHealth());
        Assertions.assertEquals("zchnqekwanklp", response.properties().failoverHealth());
        Assertions.assertEquals("ydjhtkjserwi", response.properties().policyId());
        Assertions.assertEquals("d", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-05T08:15:11Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-01T03:56:56Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("o", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("blrdolenr", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-23T17:01:46Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("p", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("nmzaofro", response.properties().recoveryContainerId());
        Assertions.assertEquals("qckievyrejyoy", response.properties().eventCorrelationId());
        Assertions.assertEquals("qftusdwmnrtvvbuc", response.location());
    }
}
