// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestFailoverCleanupInputProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsTestFailoverCleanupMockTests {
    @Test
    public void testTestFailoverCleanup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"mwefcbyb\",\"protectedItemType\":\"hrtczwjcujyz\",\"protectableItemId\":\"yrjq\",\"recoveryServicesProviderId\":\"lgkuirxxeuwi\",\"primaryFabricFriendlyName\":\"rcvnfg\",\"primaryFabricProvider\":\"viwxohktxagfuj\",\"recoveryFabricFriendlyName\":\"qj\",\"recoveryFabricId\":\"exbvxgxq\",\"primaryProtectionContainerFriendlyName\":\"asfeooq\",\"recoveryProtectionContainerFriendlyName\":\"pvevtarphklql\",\"protectionState\":\"q\",\"protectionStateDescription\":\"n\",\"activeLocation\":\"gjn\",\"testFailoverState\":\"gijydg\",\"testFailoverStateDescription\":\"bjuymtevaebzmw\",\"switchProviderState\":\"hrjkejvaedogz\",\"switchProviderStateDescription\":\"gxbxxgj\",\"allowedOperations\":[\"phivfh\"],\"replicationHealth\":\"tenfdvdoearywusr\",\"failoverHealth\":\"hdtrsyfez\",\"healthErrors\":[],\"policyId\":\"ljdzyyrwnmwtqi\",\"policyFriendlyName\":\"knnkyn\",\"lastSuccessfulFailoverTime\":\"2021-07-25T01:06:54Z\",\"lastSuccessfulTestFailoverTime\":\"2021-08-06T18:34:01Z\",\"currentScenario\":{\"scenarioName\":\"hjfphfxaqjyihjc\",\"jobId\":\"vao\",\"startTime\":\"2021-06-08T05:17:38Z\"},\"failoverRecoveryPointId\":\"avh\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"spwweifdyfa\",\"eventCorrelationId\":\"xnguwn\"},\"location\":\"pu\",\"id\":\"laihsujtggybsz\",\"name\":\"mijxejpd\",\"type\":\"liqwzutiyelrnhh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .testFailoverCleanup(
                    "ywdibugvnrgalvw",
                    "hry",
                    "brbknuubxcwoj",
                    "upqdv",
                    "py",
                    new TestFailoverCleanupInput()
                        .withProperties(new TestFailoverCleanupInputProperties().withComments("vffifujgtdo")),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mwefcbyb", response.properties().friendlyName());
        Assertions.assertEquals("hrtczwjcujyz", response.properties().protectedItemType());
        Assertions.assertEquals("yrjq", response.properties().protectableItemId());
        Assertions.assertEquals("lgkuirxxeuwi", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("rcvnfg", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("viwxohktxagfuj", response.properties().primaryFabricProvider());
        Assertions.assertEquals("qj", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("exbvxgxq", response.properties().recoveryFabricId());
        Assertions.assertEquals("asfeooq", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("pvevtarphklql", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("q", response.properties().protectionState());
        Assertions.assertEquals("n", response.properties().protectionStateDescription());
        Assertions.assertEquals("gjn", response.properties().activeLocation());
        Assertions.assertEquals("gijydg", response.properties().testFailoverState());
        Assertions.assertEquals("bjuymtevaebzmw", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("hrjkejvaedogz", response.properties().switchProviderState());
        Assertions.assertEquals("gxbxxgj", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("phivfh", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("tenfdvdoearywusr", response.properties().replicationHealth());
        Assertions.assertEquals("hdtrsyfez", response.properties().failoverHealth());
        Assertions.assertEquals("ljdzyyrwnmwtqi", response.properties().policyId());
        Assertions.assertEquals("knnkyn", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-25T01:06:54Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-06T18:34:01Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("hjfphfxaqjyihjc", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("vao", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-08T05:17:38Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("avh", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("spwweifdyfa", response.properties().recoveryContainerId());
        Assertions.assertEquals("xnguwn", response.properties().eventCorrelationId());
        Assertions.assertEquals("pu", response.location());
    }
}
