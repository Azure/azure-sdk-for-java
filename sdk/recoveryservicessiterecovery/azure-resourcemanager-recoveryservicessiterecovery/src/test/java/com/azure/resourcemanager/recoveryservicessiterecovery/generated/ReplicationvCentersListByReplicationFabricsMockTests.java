// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VCenter;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationvCentersListByReplicationFabricsMockTests {
    @Test
    public void testListByReplicationFabrics() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"friendlyName\":\"aqifepdureevi\",\"internalId\":\"iglioklsuff\",\"lastHeartbeat\":\"2021-06-15T16:02:23Z\",\"discoveryStatus\":\"wctl\",\"processServerId\":\"tbltytvnpbgcesfd\",\"ipAddress\":\"clmowurofo\",\"infrastructureId\":\"b\",\"port\":\"zzwweoblb\",\"runAsAccountId\":\"q\",\"fabricArmResourceName\":\"ixccnkfsog\",\"healthErrors\":[]},\"location\":\"myqzyqepgbbzdsl\",\"id\":\"okcevoxdddpwmg\",\"name\":\"xwukfjvqglaxseis\",\"type\":\"vvgyphheo\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<VCenter> response =
            manager.replicationvCenters().listByReplicationFabrics("pgdcidp", "aqermnddlir", "q", Context.NONE);

        Assertions.assertEquals("aqifepdureevi", response.iterator().next().properties().friendlyName());
        Assertions.assertEquals("iglioklsuff", response.iterator().next().properties().internalId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-15T16:02:23Z"), response.iterator().next().properties().lastHeartbeat());
        Assertions.assertEquals("wctl", response.iterator().next().properties().discoveryStatus());
        Assertions.assertEquals("tbltytvnpbgcesfd", response.iterator().next().properties().processServerId());
        Assertions.assertEquals("clmowurofo", response.iterator().next().properties().ipAddress());
        Assertions.assertEquals("b", response.iterator().next().properties().infrastructureId());
        Assertions.assertEquals("zzwweoblb", response.iterator().next().properties().port());
        Assertions.assertEquals("q", response.iterator().next().properties().runAsAccountId());
        Assertions.assertEquals("ixccnkfsog", response.iterator().next().properties().fabricArmResourceName());
        Assertions.assertEquals("myqzyqepgbbzdsl", response.iterator().next().location());
    }
}
