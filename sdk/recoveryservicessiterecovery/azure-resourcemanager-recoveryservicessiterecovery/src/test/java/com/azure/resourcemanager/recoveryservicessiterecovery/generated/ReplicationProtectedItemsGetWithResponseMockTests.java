// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"rwkampyhw\",\"protectedItemType\":\"ldzniudrcycm\",\"protectableItemId\":\"uzymhlhihqknlv\",\"recoveryServicesProviderId\":\"n\",\"primaryFabricFriendlyName\":\"kopaiildcp\",\"primaryFabricProvider\":\"khquxsy\",\"recoveryFabricFriendlyName\":\"fpgvedrobujnjgyb\",\"recoveryFabricId\":\"mqx\",\"primaryProtectionContainerFriendlyName\":\"idullnjgcpskg\",\"recoveryProtectionContainerFriendlyName\":\"nytslgsazuqznghx\",\"protectionState\":\"yqz\",\"protectionStateDescription\":\"dkpvnrvzw\",\"activeLocation\":\"fxsfybntmveho\",\"testFailoverState\":\"lyuvbgtzqzqwe\",\"testFailoverStateDescription\":\"dybnairvhpqsvb\",\"switchProviderState\":\"ogeatrcnqnvn\",\"switchProviderStateDescription\":\"rfcs\",\"allowedOperations\":[\"nkoiz\",\"zsqbibaaugicovj\"],\"replicationHealth\":\"vwrmjx\",\"failoverHealth\":\"uod\",\"healthErrors\":[],\"policyId\":\"bassqfyylwpp\",\"policyFriendlyName\":\"gkbzbloas\",\"lastSuccessfulFailoverTime\":\"2021-02-09T23:18:17Z\",\"lastSuccessfulTestFailoverTime\":\"2021-04-15T14:01:39Z\",\"currentScenario\":{\"scenarioName\":\"vdpmhttuvsqjs\",\"jobId\":\"jnqtaqg\",\"startTime\":\"2021-01-02T18:29:22Z\"},\"failoverRecoveryPointId\":\"kceincnrec\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"ywevsfgdrmnszdo\",\"eventCorrelationId\":\"j\"},\"location\":\"svz\",\"id\":\"mxtc\",\"name\":\"ghndae\",\"type\":\"hgsulwvgs\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .getWithResponse(
                    "hdyxz", "vwywjvrlgqpwwlzp", "darcb", "dwhslxebaj", "dknmstb", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("rwkampyhw", response.properties().friendlyName());
        Assertions.assertEquals("ldzniudrcycm", response.properties().protectedItemType());
        Assertions.assertEquals("uzymhlhihqknlv", response.properties().protectableItemId());
        Assertions.assertEquals("n", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("kopaiildcp", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("khquxsy", response.properties().primaryFabricProvider());
        Assertions.assertEquals("fpgvedrobujnjgyb", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("mqx", response.properties().recoveryFabricId());
        Assertions.assertEquals("idullnjgcpskg", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("nytslgsazuqznghx", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("yqz", response.properties().protectionState());
        Assertions.assertEquals("dkpvnrvzw", response.properties().protectionStateDescription());
        Assertions.assertEquals("fxsfybntmveho", response.properties().activeLocation());
        Assertions.assertEquals("lyuvbgtzqzqwe", response.properties().testFailoverState());
        Assertions.assertEquals("dybnairvhpqsvb", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("ogeatrcnqnvn", response.properties().switchProviderState());
        Assertions.assertEquals("rfcs", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("nkoiz", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("vwrmjx", response.properties().replicationHealth());
        Assertions.assertEquals("uod", response.properties().failoverHealth());
        Assertions.assertEquals("bassqfyylwpp", response.properties().policyId());
        Assertions.assertEquals("gkbzbloas", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-09T23:18:17Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-15T14:01:39Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("vdpmhttuvsqjs", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("jnqtaqg", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-02T18:29:22Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("kceincnrec", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("ywevsfgdrmnszdo", response.properties().recoveryContainerId());
        Assertions.assertEquals("j", response.properties().eventCorrelationId());
        Assertions.assertEquals("svz", response.location());
    }
}
