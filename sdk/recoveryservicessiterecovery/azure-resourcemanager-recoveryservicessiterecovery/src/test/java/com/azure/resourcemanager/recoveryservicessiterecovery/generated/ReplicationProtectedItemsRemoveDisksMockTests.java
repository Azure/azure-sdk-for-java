// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RemoveDisksInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RemoveDisksInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RemoveDisksProviderSpecificInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsRemoveDisksMockTests {
    @Test
    public void testRemoveDisks() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"vqxvw\",\"protectedItemType\":\"ocxoerjwbuo\",\"protectableItemId\":\"flmn\",\"recoveryServicesProviderId\":\"lqxbctatezyo\",\"primaryFabricFriendlyName\":\"bcqqnlsjxcs\",\"primaryFabricProvider\":\"it\",\"recoveryFabricFriendlyName\":\"mra\",\"recoveryFabricId\":\"jido\",\"primaryProtectionContainerFriendlyName\":\"vltcvmahpuwku\",\"recoveryProtectionContainerFriendlyName\":\"bnhi\",\"protectionState\":\"hyzhrcqdfwbifn\",\"protectionStateDescription\":\"lsfo\",\"activeLocation\":\"imtfcqmmynbrpel\",\"testFailoverState\":\"ijte\",\"testFailoverStateDescription\":\"xmpeszamad\",\"switchProviderState\":\"rzinfuivczktll\",\"switchProviderStateDescription\":\"wtdapsmirmnrijef\",\"allowedOperations\":[\"wxcevdspt\",\"gffmwtblgmkokq\",\"i\",\"xie\"],\"replicationHealth\":\"lnml\",\"failoverHealth\":\"fcnuestbsli\",\"healthErrors\":[],\"policyId\":\"ccote\",\"policyFriendlyName\":\"kjiytehh\",\"lastSuccessfulFailoverTime\":\"2021-03-19T02:22:51Z\",\"lastSuccessfulTestFailoverTime\":\"2021-08-02T13:10:21Z\",\"currentScenario\":{\"scenarioName\":\"bymuqlngnc\",\"jobId\":\"orctyse\",\"startTime\":\"2021-06-09T03:00:47Z\"},\"failoverRecoveryPointId\":\"hxdbyhqtzcvi\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"ckozvlf\",\"eventCorrelationId\":\"trtsvx\"},\"location\":\"qtzckjbcbkgnrf\",\"id\":\"j\",\"name\":\"chj\",\"type\":\"nc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .removeDisks(
                    "wjalw",
                    "sofxc",
                    "crmvjfmr",
                    "uydldp",
                    "elsxfkzr",
                    new RemoveDisksInput()
                        .withProperties(
                            new RemoveDisksInputProperties()
                                .withProviderSpecificDetails(new RemoveDisksProviderSpecificInput())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("vqxvw", response.properties().friendlyName());
        Assertions.assertEquals("ocxoerjwbuo", response.properties().protectedItemType());
        Assertions.assertEquals("flmn", response.properties().protectableItemId());
        Assertions.assertEquals("lqxbctatezyo", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("bcqqnlsjxcs", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("it", response.properties().primaryFabricProvider());
        Assertions.assertEquals("mra", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("jido", response.properties().recoveryFabricId());
        Assertions.assertEquals("vltcvmahpuwku", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("bnhi", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("hyzhrcqdfwbifn", response.properties().protectionState());
        Assertions.assertEquals("lsfo", response.properties().protectionStateDescription());
        Assertions.assertEquals("imtfcqmmynbrpel", response.properties().activeLocation());
        Assertions.assertEquals("ijte", response.properties().testFailoverState());
        Assertions.assertEquals("xmpeszamad", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("rzinfuivczktll", response.properties().switchProviderState());
        Assertions.assertEquals("wtdapsmirmnrijef", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("wxcevdspt", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("lnml", response.properties().replicationHealth());
        Assertions.assertEquals("fcnuestbsli", response.properties().failoverHealth());
        Assertions.assertEquals("ccote", response.properties().policyId());
        Assertions.assertEquals("kjiytehh", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-19T02:22:51Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-02T13:10:21Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("bymuqlngnc", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("orctyse", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-09T03:00:47Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("hxdbyhqtzcvi", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("ckozvlf", response.properties().recoveryContainerId());
        Assertions.assertEquals("trtsvx", response.properties().eventCorrelationId());
        Assertions.assertEquals("qtzckjbcbkgnrf", response.location());
    }
}
