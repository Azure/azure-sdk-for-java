// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Fabric;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationFabricsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"pxjhxzubfjzabbwz\",\"encryptionDetails\":{\"kekState\":\"uaixcdckix\",\"kekCertThumbprint\":\"saigavkmvyxzer\",\"kekCertExpiryDate\":\"2021-05-07T02:31:33Z\"},\"rolloverEncryptionDetails\":{\"kekState\":\"zjbyetjxryopta\",\"kekCertThumbprint\":\"twhlbecgih\",\"kekCertExpiryDate\":\"2021-08-08T16:57:03Z\"},\"internalIdentifier\":\"mnrrabo\",\"bcdrState\":\"wwxywpjhspboxhi\",\"customDetails\":{\"instanceType\":\"FabricSpecificDetails\"},\"healthErrorDetails\":[],\"health\":\"peswyhhmifjuajx\"},\"location\":\"vcmmpeglyuq\",\"id\":\"cmlae\",\"name\":\"bzbqufpnezsjzaym\",\"type\":\"dror\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Fabric response =
            manager
                .replicationFabrics()
                .getWithResponse("pijpkhc", "oa", "xukuicjuftekio", "anduew", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("pxjhxzubfjzabbwz", response.properties().friendlyName());
        Assertions.assertEquals("uaixcdckix", response.properties().encryptionDetails().kekState());
        Assertions.assertEquals("saigavkmvyxzer", response.properties().encryptionDetails().kekCertThumbprint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-07T02:31:33Z"),
                response.properties().encryptionDetails().kekCertExpiryDate());
        Assertions.assertEquals("zjbyetjxryopta", response.properties().rolloverEncryptionDetails().kekState());
        Assertions.assertEquals("twhlbecgih", response.properties().rolloverEncryptionDetails().kekCertThumbprint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-08T16:57:03Z"),
                response.properties().rolloverEncryptionDetails().kekCertExpiryDate());
        Assertions.assertEquals("mnrrabo", response.properties().internalIdentifier());
        Assertions.assertEquals("wwxywpjhspboxhi", response.properties().bcdrState());
        Assertions.assertEquals("peswyhhmifjuajx", response.properties().health());
        Assertions.assertEquals("vcmmpeglyuq", response.location());
    }
}
