// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AddRecoveryServicesProviderInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AddRecoveryServicesProviderInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.IdentityProviderInput;
import org.junit.jupiter.api.Assertions;

public final class AddRecoveryServicesProviderInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AddRecoveryServicesProviderInput model = BinaryData.fromString(
            "{\"properties\":{\"machineName\":\"tkgdojbmxva\",\"machineId\":\"efdeesve\",\"biosId\":\"ijpxtx\",\"authenticationIdentityInput\":{\"tenantId\":\"uwprtujwsawd\",\"applicationId\":\"jibabxvititvtze\",\"objectId\":\"xavo\",\"audience\":\"tfgle\",\"aadAuthority\":\"dmdqb\"},\"resourceAccessIdentityInput\":{\"tenantId\":\"pypqtgsfj\",\"applicationId\":\"cbslhhx\",\"objectId\":\"db\",\"audience\":\"vodhtn\",\"aadAuthority\":\"irudh\"},\"dataPlaneAuthenticationIdentityInput\":{\"tenantId\":\"mes\",\"applicationId\":\"kdlpa\",\"objectId\":\"zrcxfailcfxwmdbo\",\"audience\":\"dfgsftufqobrj\",\"aadAuthority\":\"nac\"}}}")
            .toObject(AddRecoveryServicesProviderInput.class);
        Assertions.assertEquals("tkgdojbmxva", model.properties().machineName());
        Assertions.assertEquals("efdeesve", model.properties().machineId());
        Assertions.assertEquals("ijpxtx", model.properties().biosId());
        Assertions.assertEquals("uwprtujwsawd", model.properties().authenticationIdentityInput().tenantId());
        Assertions.assertEquals("jibabxvititvtze", model.properties().authenticationIdentityInput().applicationId());
        Assertions.assertEquals("xavo", model.properties().authenticationIdentityInput().objectId());
        Assertions.assertEquals("tfgle", model.properties().authenticationIdentityInput().audience());
        Assertions.assertEquals("dmdqb", model.properties().authenticationIdentityInput().aadAuthority());
        Assertions.assertEquals("pypqtgsfj", model.properties().resourceAccessIdentityInput().tenantId());
        Assertions.assertEquals("cbslhhx", model.properties().resourceAccessIdentityInput().applicationId());
        Assertions.assertEquals("db", model.properties().resourceAccessIdentityInput().objectId());
        Assertions.assertEquals("vodhtn", model.properties().resourceAccessIdentityInput().audience());
        Assertions.assertEquals("irudh", model.properties().resourceAccessIdentityInput().aadAuthority());
        Assertions.assertEquals("mes", model.properties().dataPlaneAuthenticationIdentityInput().tenantId());
        Assertions.assertEquals("kdlpa", model.properties().dataPlaneAuthenticationIdentityInput().applicationId());
        Assertions.assertEquals("zrcxfailcfxwmdbo",
            model.properties().dataPlaneAuthenticationIdentityInput().objectId());
        Assertions.assertEquals("dfgsftufqobrj", model.properties().dataPlaneAuthenticationIdentityInput().audience());
        Assertions.assertEquals("nac", model.properties().dataPlaneAuthenticationIdentityInput().aadAuthority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AddRecoveryServicesProviderInput model = new AddRecoveryServicesProviderInput()
            .withProperties(new AddRecoveryServicesProviderInputProperties().withMachineName("tkgdojbmxva")
                .withMachineId("efdeesve")
                .withBiosId("ijpxtx")
                .withAuthenticationIdentityInput(new IdentityProviderInput().withTenantId("uwprtujwsawd")
                    .withApplicationId("jibabxvititvtze")
                    .withObjectId("xavo")
                    .withAudience("tfgle")
                    .withAadAuthority("dmdqb"))
                .withResourceAccessIdentityInput(new IdentityProviderInput().withTenantId("pypqtgsfj")
                    .withApplicationId("cbslhhx")
                    .withObjectId("db")
                    .withAudience("vodhtn")
                    .withAadAuthority("irudh"))
                .withDataPlaneAuthenticationIdentityInput(new IdentityProviderInput().withTenantId("mes")
                    .withApplicationId("kdlpa")
                    .withObjectId("zrcxfailcfxwmdbo")
                    .withAudience("dfgsftufqobrj")
                    .withAadAuthority("nac")));
        model = BinaryData.fromObject(model).toObject(AddRecoveryServicesProviderInput.class);
        Assertions.assertEquals("tkgdojbmxva", model.properties().machineName());
        Assertions.assertEquals("efdeesve", model.properties().machineId());
        Assertions.assertEquals("ijpxtx", model.properties().biosId());
        Assertions.assertEquals("uwprtujwsawd", model.properties().authenticationIdentityInput().tenantId());
        Assertions.assertEquals("jibabxvititvtze", model.properties().authenticationIdentityInput().applicationId());
        Assertions.assertEquals("xavo", model.properties().authenticationIdentityInput().objectId());
        Assertions.assertEquals("tfgle", model.properties().authenticationIdentityInput().audience());
        Assertions.assertEquals("dmdqb", model.properties().authenticationIdentityInput().aadAuthority());
        Assertions.assertEquals("pypqtgsfj", model.properties().resourceAccessIdentityInput().tenantId());
        Assertions.assertEquals("cbslhhx", model.properties().resourceAccessIdentityInput().applicationId());
        Assertions.assertEquals("db", model.properties().resourceAccessIdentityInput().objectId());
        Assertions.assertEquals("vodhtn", model.properties().resourceAccessIdentityInput().audience());
        Assertions.assertEquals("irudh", model.properties().resourceAccessIdentityInput().aadAuthority());
        Assertions.assertEquals("mes", model.properties().dataPlaneAuthenticationIdentityInput().tenantId());
        Assertions.assertEquals("kdlpa", model.properties().dataPlaneAuthenticationIdentityInput().applicationId());
        Assertions.assertEquals("zrcxfailcfxwmdbo",
            model.properties().dataPlaneAuthenticationIdentityInput().objectId());
        Assertions.assertEquals("dfgsftufqobrj", model.properties().dataPlaneAuthenticationIdentityInput().audience());
        Assertions.assertEquals("nac", model.properties().dataPlaneAuthenticationIdentityInput().aadAuthority());
    }
}
