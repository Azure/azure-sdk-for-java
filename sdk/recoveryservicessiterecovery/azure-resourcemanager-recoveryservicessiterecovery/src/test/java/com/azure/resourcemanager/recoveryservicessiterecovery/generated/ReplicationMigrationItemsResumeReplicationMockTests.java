// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.MigrationItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResumeReplicationInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResumeReplicationInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResumeReplicationProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationMigrationItemsResumeReplicationMockTests {
    @Test
    public void testResumeReplication() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"machineName\":\"uk\",\"policyId\":\"goojjfuk\",\"policyFriendlyName\":\"bc\",\"recoveryServicesProviderId\":\"nhgbtzvxxvsbc\",\"replicationStatus\":\"fkrfnkcni\",\"migrationState\":\"InitialSeedingInProgress\",\"migrationStateDescription\":\"xmfurqmwmwwpnt\",\"lastTestMigrationTime\":\"2021-07-11T21:24Z\",\"lastTestMigrationStatus\":\"ahbqsvnkxm\",\"lastMigrationTime\":\"2021-08-29T15:41:17Z\",\"lastMigrationStatus\":\"aed\",\"testMigrateState\":\"TestMigrationSucceeded\",\"testMigrateStateDescription\":\"gc\",\"health\":\"Warning\",\"healthErrors\":[],\"allowedOperations\":[\"PauseReplication\",\"Migrate\",\"PauseReplication\"],\"currentJob\":{\"jobName\":\"emqyftgpqoswgfq\",\"jobId\":\"mghpakbqyh\",\"startTime\":\"2021-07-23T08:55:34Z\"},\"criticalJobHistory\":[],\"eventCorrelationId\":\"b\",\"providerSpecificDetails\":{\"instanceType\":\"MigrationProviderSpecificSettings\"}},\"location\":\"agkncjmybnyevz\",\"id\":\"njawrh\",\"name\":\"lemmqmbwppxirxb\",\"type\":\"itzmnhitaxj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MigrationItem response =
            manager
                .replicationMigrationItems()
                .resumeReplication(
                    "qk",
                    "yqjvzvc",
                    "rdspzesfkqqxu",
                    "vzflbrous",
                    "xa",
                    new ResumeReplicationInput()
                        .withProperties(
                            new ResumeReplicationInputProperties()
                                .withProviderSpecificDetails(new ResumeReplicationProviderSpecificInput())),
                    Context.NONE);

        Assertions.assertEquals("agkncjmybnyevz", response.location());
    }
}
