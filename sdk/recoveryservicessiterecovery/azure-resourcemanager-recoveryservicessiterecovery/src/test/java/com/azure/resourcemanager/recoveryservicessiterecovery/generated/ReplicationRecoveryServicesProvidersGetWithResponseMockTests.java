// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AgentVersionStatus;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryServicesProvider;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryServicesProvidersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"fabricType\":\"cowlrmbdctqx\",\"friendlyName\":\"ej\",\"providerVersion\":\"zvwkryzgavplndm\",\"serverVersion\":\"iekkiskyyyaekn\",\"providerVersionState\":\"fys\",\"providerVersionExpiryDate\":\"2021-09-12T11:56:31Z\",\"fabricFriendlyName\":\"jlmlcufbbji\",\"lastHeartBeat\":\"2021-10-27T10:05:03Z\",\"connectionStatus\":\"fhoajjylsyqyjn\",\"protectedItemCount\":573229734,\"allowedScenarios\":[\"qquyhbcee\"],\"healthErrorDetails\":[],\"draIdentifier\":\"rrp\",\"machineId\":\"qtvuxeujmdssijua\",\"machineName\":\"fdlypk\",\"biosId\":\"wsrqnnmjundtlxcl\",\"authenticationIdentityDetails\":{\"tenantId\":\"bcyc\",\"applicationId\":\"a\",\"objectId\":\"sihxvtac\",\"audience\":\"fopxpryxnsbubw\",\"aadAuthority\":\"qqgugwluxahtq\"},\"resourceAccessIdentityDetails\":{\"tenantId\":\"dhwqcqwebagm\",\"applicationId\":\"kephujeucos\",\"objectId\":\"keer\",\"audience\":\"ypaxpjp\",\"aadAuthority\":\"llgnueezfpffb\"},\"dataPlaneAuthenticationIdentityDetails\":{\"tenantId\":\"knv\",\"applicationId\":\"g\",\"objectId\":\"gzyojfchicpare\",\"audience\":\"o\",\"aadAuthority\":\"gqh\"},\"providerVersionDetails\":{\"version\":\"juxilozbl\",\"expiryDate\":\"2021-09-14T03:18:36Z\",\"status\":\"Deprecated\"}},\"location\":\"flj\",\"id\":\"tkb\",\"name\":\"tsflotumbm\",\"type\":\"gftshfgmuxuqiags\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RecoveryServicesProvider response =
            manager
                .replicationRecoveryServicesProviders()
                .getWithResponse("uvbtcuhj", "g", "tjkntomnlzthc", "bszsbzrrxey", Context.NONE)
                .getValue();

        Assertions.assertEquals("cowlrmbdctqx", response.properties().fabricType());
        Assertions.assertEquals("ej", response.properties().friendlyName());
        Assertions.assertEquals("zvwkryzgavplndm", response.properties().providerVersion());
        Assertions.assertEquals("iekkiskyyyaekn", response.properties().serverVersion());
        Assertions.assertEquals("fys", response.properties().providerVersionState());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-12T11:56:31Z"), response.properties().providerVersionExpiryDate());
        Assertions.assertEquals("jlmlcufbbji", response.properties().fabricFriendlyName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-27T10:05:03Z"), response.properties().lastHeartBeat());
        Assertions.assertEquals("fhoajjylsyqyjn", response.properties().connectionStatus());
        Assertions.assertEquals(573229734, response.properties().protectedItemCount());
        Assertions.assertEquals("qquyhbcee", response.properties().allowedScenarios().get(0));
        Assertions.assertEquals("rrp", response.properties().draIdentifier());
        Assertions.assertEquals("qtvuxeujmdssijua", response.properties().machineId());
        Assertions.assertEquals("fdlypk", response.properties().machineName());
        Assertions.assertEquals("wsrqnnmjundtlxcl", response.properties().biosId());
        Assertions.assertEquals("bcyc", response.properties().authenticationIdentityDetails().tenantId());
        Assertions.assertEquals("a", response.properties().authenticationIdentityDetails().applicationId());
        Assertions.assertEquals("sihxvtac", response.properties().authenticationIdentityDetails().objectId());
        Assertions.assertEquals("fopxpryxnsbubw", response.properties().authenticationIdentityDetails().audience());
        Assertions.assertEquals("qqgugwluxahtq", response.properties().authenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("dhwqcqwebagm", response.properties().resourceAccessIdentityDetails().tenantId());
        Assertions.assertEquals("kephujeucos", response.properties().resourceAccessIdentityDetails().applicationId());
        Assertions.assertEquals("keer", response.properties().resourceAccessIdentityDetails().objectId());
        Assertions.assertEquals("ypaxpjp", response.properties().resourceAccessIdentityDetails().audience());
        Assertions.assertEquals("llgnueezfpffb", response.properties().resourceAccessIdentityDetails().aadAuthority());
        Assertions.assertEquals("knv", response.properties().dataPlaneAuthenticationIdentityDetails().tenantId());
        Assertions.assertEquals("g", response.properties().dataPlaneAuthenticationIdentityDetails().applicationId());
        Assertions
            .assertEquals("gzyojfchicpare", response.properties().dataPlaneAuthenticationIdentityDetails().objectId());
        Assertions.assertEquals("o", response.properties().dataPlaneAuthenticationIdentityDetails().audience());
        Assertions.assertEquals("gqh", response.properties().dataPlaneAuthenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("juxilozbl", response.properties().providerVersionDetails().version());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-14T03:18:36Z"),
                response.properties().providerVersionDetails().expiryDate());
        Assertions.assertEquals(AgentVersionStatus.DEPRECATED, response.properties().providerVersionDetails().status());
        Assertions.assertEquals("flj", response.location());
    }
}
