// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.OSDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PresenceStatus;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VmmVirtualMachineDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VmmVirtualMachineDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VmmVirtualMachineDetails model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"VmmVirtualMachine\",\"sourceItemId\":\"pjyyqmkwlhvc\",\"generation\":\"oqdejkluxxr\",\"osDetails\":{\"osType\":\"buzm\",\"productType\":\"g\",\"osEdition\":\"tdtkwppthuz\",\"oSVersion\":\"rmimrljdpoqfxyem\",\"oSMajorVersion\":\"ftb\",\"oSMinorVersion\":\"whtecloamfmxtll\"},\"diskDetails\":[{\"maxSizeMB\":1500411696037148636,\"vhdType\":\"nrrfijhggabqb\",\"vhdId\":\"mkli\",\"vhdName\":\"rwdvffhsdpzou\"},{\"maxSizeMB\":5751114623552027659,\"vhdType\":\"xqwqnjxr\",\"vhdId\":\"ddtullygta\",\"vhdName\":\"zcxdfweapyfmlxrl\"},{\"maxSizeMB\":774670682306733475,\"vhdType\":\"spi\",\"vhdId\":\"eimixlmdbgicehf\",\"vhdName\":\"mdrjuqbpxt\"},{\"maxSizeMB\":1989032892918936742,\"vhdType\":\"tz\",\"vhdId\":\"axwfqtyyqip\",\"vhdName\":\"ltungbsolj\"}],\"hasPhysicalDisk\":\"NotPresent\",\"hasFibreChannelAdapter\":\"Present\",\"hasSharedVhd\":\"NotPresent\",\"hyperVHostId\":\"kuckgkdskswtiiq\"}")
                .toObject(VmmVirtualMachineDetails.class);
        Assertions.assertEquals("pjyyqmkwlhvc", model.sourceItemId());
        Assertions.assertEquals("oqdejkluxxr", model.generation());
        Assertions.assertEquals("buzm", model.osDetails().osType());
        Assertions.assertEquals("g", model.osDetails().productType());
        Assertions.assertEquals("tdtkwppthuz", model.osDetails().osEdition());
        Assertions.assertEquals("rmimrljdpoqfxyem", model.osDetails().oSVersion());
        Assertions.assertEquals("ftb", model.osDetails().oSMajorVersion());
        Assertions.assertEquals("whtecloamfmxtll", model.osDetails().oSMinorVersion());
        Assertions.assertEquals(1500411696037148636L, model.diskDetails().get(0).maxSizeMB());
        Assertions.assertEquals("nrrfijhggabqb", model.diskDetails().get(0).vhdType());
        Assertions.assertEquals("mkli", model.diskDetails().get(0).vhdId());
        Assertions.assertEquals("rwdvffhsdpzou", model.diskDetails().get(0).vhdName());
        Assertions.assertEquals(PresenceStatus.NOT_PRESENT, model.hasPhysicalDisk());
        Assertions.assertEquals(PresenceStatus.PRESENT, model.hasFibreChannelAdapter());
        Assertions.assertEquals(PresenceStatus.NOT_PRESENT, model.hasSharedVhd());
        Assertions.assertEquals("kuckgkdskswtiiq", model.hyperVHostId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VmmVirtualMachineDetails model =
            new VmmVirtualMachineDetails()
                .withSourceItemId("pjyyqmkwlhvc")
                .withGeneration("oqdejkluxxr")
                .withOsDetails(
                    new OSDetails()
                        .withOsType("buzm")
                        .withProductType("g")
                        .withOsEdition("tdtkwppthuz")
                        .withOSVersion("rmimrljdpoqfxyem")
                        .withOSMajorVersion("ftb")
                        .withOSMinorVersion("whtecloamfmxtll"))
                .withDiskDetails(
                    Arrays
                        .asList(
                            new DiskDetails()
                                .withMaxSizeMB(1500411696037148636L)
                                .withVhdType("nrrfijhggabqb")
                                .withVhdId("mkli")
                                .withVhdName("rwdvffhsdpzou"),
                            new DiskDetails()
                                .withMaxSizeMB(5751114623552027659L)
                                .withVhdType("xqwqnjxr")
                                .withVhdId("ddtullygta")
                                .withVhdName("zcxdfweapyfmlxrl"),
                            new DiskDetails()
                                .withMaxSizeMB(774670682306733475L)
                                .withVhdType("spi")
                                .withVhdId("eimixlmdbgicehf")
                                .withVhdName("mdrjuqbpxt"),
                            new DiskDetails()
                                .withMaxSizeMB(1989032892918936742L)
                                .withVhdType("tz")
                                .withVhdId("axwfqtyyqip")
                                .withVhdName("ltungbsolj")))
                .withHasPhysicalDisk(PresenceStatus.NOT_PRESENT)
                .withHasFibreChannelAdapter(PresenceStatus.PRESENT)
                .withHasSharedVhd(PresenceStatus.NOT_PRESENT)
                .withHyperVHostId("kuckgkdskswtiiq");
        model = BinaryData.fromObject(model).toObject(VmmVirtualMachineDetails.class);
        Assertions.assertEquals("pjyyqmkwlhvc", model.sourceItemId());
        Assertions.assertEquals("oqdejkluxxr", model.generation());
        Assertions.assertEquals("buzm", model.osDetails().osType());
        Assertions.assertEquals("g", model.osDetails().productType());
        Assertions.assertEquals("tdtkwppthuz", model.osDetails().osEdition());
        Assertions.assertEquals("rmimrljdpoqfxyem", model.osDetails().oSVersion());
        Assertions.assertEquals("ftb", model.osDetails().oSMajorVersion());
        Assertions.assertEquals("whtecloamfmxtll", model.osDetails().oSMinorVersion());
        Assertions.assertEquals(1500411696037148636L, model.diskDetails().get(0).maxSizeMB());
        Assertions.assertEquals("nrrfijhggabqb", model.diskDetails().get(0).vhdType());
        Assertions.assertEquals("mkli", model.diskDetails().get(0).vhdId());
        Assertions.assertEquals("rwdvffhsdpzou", model.diskDetails().get(0).vhdName());
        Assertions.assertEquals(PresenceStatus.NOT_PRESENT, model.hasPhysicalDisk());
        Assertions.assertEquals(PresenceStatus.PRESENT, model.hasFibreChannelAdapter());
        Assertions.assertEquals(PresenceStatus.NOT_PRESENT, model.hasSharedVhd());
        Assertions.assertEquals("kuckgkdskswtiiq", model.hyperVHostId());
    }
}
