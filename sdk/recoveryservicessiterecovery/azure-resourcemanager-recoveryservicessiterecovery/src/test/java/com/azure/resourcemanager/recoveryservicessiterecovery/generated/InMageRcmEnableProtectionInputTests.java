// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskAccountType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageRcmDiskInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageRcmDisksDefaultInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageRcmEnableProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LicenseType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class InMageRcmEnableProtectionInputTests {
    @Test
    public void testDeserialize() {
        InMageRcmEnableProtectionInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"InMageRcm\",\"fabricDiscoveryMachineId\":\"db\",\"disksToInclude\":[{\"diskId\":\"bkixvvlwyn\",\"logStorageAccountId\":\"bb\",\"diskType\":\"Premium_LRS\",\"diskEncryptionSetId\":\"zfjmsp\"}],\"disksDefault\":{\"logStorageAccountId\":\"zfe\",\"diskType\":\"Premium_LRS\",\"diskEncryptionSetId\":\"ljmphfkyezolg\"},\"targetResourceGroupId\":\"zmicuydoccnxsha\",\"targetNetworkId\":\"bui\",\"testNetworkId\":\"hbatecaatsdohzni\",\"targetSubnetName\":\"bdaombwi\",\"testSubnetName\":\"jdllwktle\",\"targetVmName\":\"wavvqxuajgcqwuly\",\"targetVmSize\":\"gfcfdruwsik\",\"licenseType\":\"NoLicenseType\",\"targetAvailabilitySetId\":\"lhuulriqb\",\"targetAvailabilityZone\":\"kvjgbzs\",\"targetProximityPlacementGroupId\":\"br\",\"targetBootDiagnosticsStorageAccountId\":\"ttfyhcdjwsuoard\",\"runAsAccountId\":\"gttpufpbpgnrho\",\"processServerId\":\"hujbfwxiplk\",\"multiVmGroupName\":\"olsyjprxsl\"}")
                .toObject(InMageRcmEnableProtectionInput.class);
        Assertions.assertEquals("db", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("bkixvvlwyn", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("bb", model.disksToInclude().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_LRS, model.disksToInclude().get(0).diskType());
        Assertions.assertEquals("zfjmsp", model.disksToInclude().get(0).diskEncryptionSetId());
        Assertions.assertEquals("zfe", model.disksDefault().logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_LRS, model.disksDefault().diskType());
        Assertions.assertEquals("ljmphfkyezolg", model.disksDefault().diskEncryptionSetId());
        Assertions.assertEquals("zmicuydoccnxsha", model.targetResourceGroupId());
        Assertions.assertEquals("bui", model.targetNetworkId());
        Assertions.assertEquals("hbatecaatsdohzni", model.testNetworkId());
        Assertions.assertEquals("bdaombwi", model.targetSubnetName());
        Assertions.assertEquals("jdllwktle", model.testSubnetName());
        Assertions.assertEquals("wavvqxuajgcqwuly", model.targetVmName());
        Assertions.assertEquals("gfcfdruwsik", model.targetVmSize());
        Assertions.assertEquals(LicenseType.NO_LICENSE_TYPE, model.licenseType());
        Assertions.assertEquals("lhuulriqb", model.targetAvailabilitySetId());
        Assertions.assertEquals("kvjgbzs", model.targetAvailabilityZone());
        Assertions.assertEquals("br", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("ttfyhcdjwsuoard", model.targetBootDiagnosticsStorageAccountId());
        Assertions.assertEquals("gttpufpbpgnrho", model.runAsAccountId());
        Assertions.assertEquals("hujbfwxiplk", model.processServerId());
        Assertions.assertEquals("olsyjprxsl", model.multiVmGroupName());
    }

    @Test
    public void testSerialize() {
        InMageRcmEnableProtectionInput model =
            new InMageRcmEnableProtectionInput()
                .withFabricDiscoveryMachineId("db")
                .withDisksToInclude(
                    Arrays
                        .asList(
                            new InMageRcmDiskInput()
                                .withDiskId("bkixvvlwyn")
                                .withLogStorageAccountId("bb")
                                .withDiskType(DiskAccountType.PREMIUM_LRS)
                                .withDiskEncryptionSetId("zfjmsp")))
                .withDisksDefault(
                    new InMageRcmDisksDefaultInput()
                        .withLogStorageAccountId("zfe")
                        .withDiskType(DiskAccountType.PREMIUM_LRS)
                        .withDiskEncryptionSetId("ljmphfkyezolg"))
                .withTargetResourceGroupId("zmicuydoccnxsha")
                .withTargetNetworkId("bui")
                .withTestNetworkId("hbatecaatsdohzni")
                .withTargetSubnetName("bdaombwi")
                .withTestSubnetName("jdllwktle")
                .withTargetVmName("wavvqxuajgcqwuly")
                .withTargetVmSize("gfcfdruwsik")
                .withLicenseType(LicenseType.NO_LICENSE_TYPE)
                .withTargetAvailabilitySetId("lhuulriqb")
                .withTargetAvailabilityZone("kvjgbzs")
                .withTargetProximityPlacementGroupId("br")
                .withTargetBootDiagnosticsStorageAccountId("ttfyhcdjwsuoard")
                .withRunAsAccountId("gttpufpbpgnrho")
                .withProcessServerId("hujbfwxiplk")
                .withMultiVmGroupName("olsyjprxsl");
        model = BinaryData.fromObject(model).toObject(InMageRcmEnableProtectionInput.class);
        Assertions.assertEquals("db", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("bkixvvlwyn", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("bb", model.disksToInclude().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_LRS, model.disksToInclude().get(0).diskType());
        Assertions.assertEquals("zfjmsp", model.disksToInclude().get(0).diskEncryptionSetId());
        Assertions.assertEquals("zfe", model.disksDefault().logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_LRS, model.disksDefault().diskType());
        Assertions.assertEquals("ljmphfkyezolg", model.disksDefault().diskEncryptionSetId());
        Assertions.assertEquals("zmicuydoccnxsha", model.targetResourceGroupId());
        Assertions.assertEquals("bui", model.targetNetworkId());
        Assertions.assertEquals("hbatecaatsdohzni", model.testNetworkId());
        Assertions.assertEquals("bdaombwi", model.targetSubnetName());
        Assertions.assertEquals("jdllwktle", model.testSubnetName());
        Assertions.assertEquals("wavvqxuajgcqwuly", model.targetVmName());
        Assertions.assertEquals("gfcfdruwsik", model.targetVmSize());
        Assertions.assertEquals(LicenseType.NO_LICENSE_TYPE, model.licenseType());
        Assertions.assertEquals("lhuulriqb", model.targetAvailabilitySetId());
        Assertions.assertEquals("kvjgbzs", model.targetAvailabilityZone());
        Assertions.assertEquals("br", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("ttfyhcdjwsuoard", model.targetBootDiagnosticsStorageAccountId());
        Assertions.assertEquals("gttpufpbpgnrho", model.runAsAccountId());
        Assertions.assertEquals("hujbfwxiplk", model.processServerId());
        Assertions.assertEquals("olsyjprxsl", model.multiVmGroupName());
    }
}
