// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UnplannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UnplannedFailoverInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UnplannedFailoverProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsUnplannedFailoverMockTests {
    @Test
    public void testUnplannedFailover() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"njmo\",\"protectedItemType\":\"mxuktdrsjtmnkxj\",\"protectableItemId\":\"w\",\"recoveryServicesProviderId\":\"cfdts\",\"primaryFabricFriendlyName\":\"axtyrnuh\",\"primaryFabricProvider\":\"hepisq\",\"recoveryFabricFriendlyName\":\"mlroiommemsoqgb\",\"recoveryFabricId\":\"yeqdob\",\"primaryProtectionContainerFriendlyName\":\"aqcabe\",\"recoveryProtectionContainerFriendlyName\":\"kcesrsi\",\"protectionState\":\"nl\",\"protectionStateDescription\":\"cxbjgfmyqyyfrri\",\"activeLocation\":\"fpsfyakidfhmlxr\",\"testFailoverState\":\"ekn\",\"testFailoverStateDescription\":\"kqafzvptriysjrgt\",\"switchProviderState\":\"wpuqpsrc\",\"switchProviderStateDescription\":\"dvvoydwedggwgcl\",\"allowedOperations\":[\"at\",\"adrjbjng\",\"arsrdrw\",\"emzcyniapypimrx\"],\"replicationHealth\":\"qwipzesstuin\",\"failoverHealth\":\"kmlf\",\"healthErrors\":[],\"policyId\":\"cxxvzjoyxjgahx\",\"policyFriendlyName\":\"rr\",\"lastSuccessfulFailoverTime\":\"2021-07-12T05:26:08Z\",\"lastSuccessfulTestFailoverTime\":\"2021-04-04T08:06:41Z\",\"currentScenario\":{\"scenarioName\":\"kbcerf\",\"jobId\":\"cpvfqjckmp\",\"startTime\":\"2021-07-13T22:05:54Z\"},\"failoverRecoveryPointId\":\"hnhhcikh\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"gjgylsacagifl\",\"eventCorrelationId\":\"ygotoh\"},\"location\":\"toidhb\",\"id\":\"i\",\"name\":\"rapwzhlutjsj\",\"type\":\"elsriemvupmeako\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .unplannedFailover(
                    "t",
                    "hqsznsyov",
                    "mqcudptoqw",
                    "nf",
                    "kjthl",
                    new UnplannedFailoverInput()
                        .withProperties(
                            new UnplannedFailoverInputProperties()
                                .withFailoverDirection("m")
                                .withSourceSiteOperations("awfubkngejjxu")
                                .withProviderSpecificDetails(new UnplannedFailoverProviderSpecificInput())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("njmo", response.properties().friendlyName());
        Assertions.assertEquals("mxuktdrsjtmnkxj", response.properties().protectedItemType());
        Assertions.assertEquals("w", response.properties().protectableItemId());
        Assertions.assertEquals("cfdts", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("axtyrnuh", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("hepisq", response.properties().primaryFabricProvider());
        Assertions.assertEquals("mlroiommemsoqgb", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("yeqdob", response.properties().recoveryFabricId());
        Assertions.assertEquals("aqcabe", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("kcesrsi", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("nl", response.properties().protectionState());
        Assertions.assertEquals("cxbjgfmyqyyfrri", response.properties().protectionStateDescription());
        Assertions.assertEquals("fpsfyakidfhmlxr", response.properties().activeLocation());
        Assertions.assertEquals("ekn", response.properties().testFailoverState());
        Assertions.assertEquals("kqafzvptriysjrgt", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("wpuqpsrc", response.properties().switchProviderState());
        Assertions.assertEquals("dvvoydwedggwgcl", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("at", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("qwipzesstuin", response.properties().replicationHealth());
        Assertions.assertEquals("kmlf", response.properties().failoverHealth());
        Assertions.assertEquals("cxxvzjoyxjgahx", response.properties().policyId());
        Assertions.assertEquals("rr", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-12T05:26:08Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-04T08:06:41Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("kbcerf", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("cpvfqjckmp", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-13T22:05:54Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("hnhhcikh", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("gjgylsacagifl", response.properties().recoveryContainerId());
        Assertions.assertEquals("ygotoh", response.properties().eventCorrelationId());
        Assertions.assertEquals("toidhb", response.location());
    }
}
