// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AgentVersionStatus;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryServicesProvider;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryServicesProvidersListByReplicationFabricsMockTests {
    @Test
    public void testListByReplicationFabrics() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"fabricType\":\"xoxvimdvetqh\",\"friendlyName\":\"itqsbyuj\",\"providerVersion\":\"omr\",\"serverVersion\":\"u\",\"providerVersionState\":\"rmsdbvqxgfyg\",\"providerVersionExpiryDate\":\"2021-01-07T12:38:24Z\",\"fabricFriendlyName\":\"bdpbcehwbdp\",\"lastHeartBeat\":\"2021-03-13T14:25:30Z\",\"connectionStatus\":\"oynpytporrvkxtf\",\"protectedItemCount\":1617136991,\"allowedScenarios\":[\"tinqxdh\",\"pjnezjighduml\",\"pmrzwvwetqf\"],\"healthErrorDetails\":[],\"draIdentifier\":\"fhuqhngqqxjbsoto\",\"machineId\":\"mrttujyd\",\"machineName\":\"twxpxbxedhxbboc\",\"biosId\":\"sramqc\",\"authenticationIdentityDetails\":{\"tenantId\":\"gfnlvvkswurxd\",\"applicationId\":\"vhauimnntfkqp\",\"objectId\":\"cnbnwiv\",\"audience\":\"cwy\",\"aadAuthority\":\"ndqkzstz\"},\"resourceAccessIdentityDetails\":{\"tenantId\":\"c\",\"applicationId\":\"ceirtahtuwcimtca\",\"objectId\":\"viudzpsj\",\"audience\":\"mluj\",\"aadAuthority\":\"unlofwuzebfq\"},\"dataPlaneAuthenticationIdentityDetails\":{\"tenantId\":\"jbhzyenf\",\"applicationId\":\"etxeudw\",\"objectId\":\"dlckdoxocjcdevz\",\"audience\":\"reortwwyj\",\"aadAuthority\":\"vrlhfxmrhjn\"},\"providerVersionDetails\":{\"version\":\"cjywkdy\",\"expiryDate\":\"2021-08-12T13:49:20Z\",\"status\":\"UpdateRequired\"}},\"location\":\"uafanefictp\",\"id\":\"plkossjbzvxp\",\"name\":\"wdqzuhfgt\",\"type\":\"aczhfjdccjn\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RecoveryServicesProvider> response =
            manager
                .replicationRecoveryServicesProviders()
                .listByReplicationFabrics("hq", "gebzqzmcsviujo", "zdvmsnao", Context.NONE);

        Assertions.assertEquals("xoxvimdvetqh", response.iterator().next().properties().fabricType());
        Assertions.assertEquals("itqsbyuj", response.iterator().next().properties().friendlyName());
        Assertions.assertEquals("omr", response.iterator().next().properties().providerVersion());
        Assertions.assertEquals("u", response.iterator().next().properties().serverVersion());
        Assertions.assertEquals("rmsdbvqxgfyg", response.iterator().next().properties().providerVersionState());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-07T12:38:24Z"),
                response.iterator().next().properties().providerVersionExpiryDate());
        Assertions.assertEquals("bdpbcehwbdp", response.iterator().next().properties().fabricFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-13T14:25:30Z"), response.iterator().next().properties().lastHeartBeat());
        Assertions.assertEquals("oynpytporrvkxtf", response.iterator().next().properties().connectionStatus());
        Assertions.assertEquals(1617136991, response.iterator().next().properties().protectedItemCount());
        Assertions.assertEquals("tinqxdh", response.iterator().next().properties().allowedScenarios().get(0));
        Assertions.assertEquals("fhuqhngqqxjbsoto", response.iterator().next().properties().draIdentifier());
        Assertions.assertEquals("mrttujyd", response.iterator().next().properties().machineId());
        Assertions.assertEquals("twxpxbxedhxbboc", response.iterator().next().properties().machineName());
        Assertions.assertEquals("sramqc", response.iterator().next().properties().biosId());
        Assertions
            .assertEquals(
                "gfnlvvkswurxd", response.iterator().next().properties().authenticationIdentityDetails().tenantId());
        Assertions
            .assertEquals(
                "vhauimnntfkqp",
                response.iterator().next().properties().authenticationIdentityDetails().applicationId());
        Assertions
            .assertEquals(
                "cnbnwiv", response.iterator().next().properties().authenticationIdentityDetails().objectId());
        Assertions
            .assertEquals("cwy", response.iterator().next().properties().authenticationIdentityDetails().audience());
        Assertions
            .assertEquals(
                "ndqkzstz", response.iterator().next().properties().authenticationIdentityDetails().aadAuthority());
        Assertions
            .assertEquals("c", response.iterator().next().properties().resourceAccessIdentityDetails().tenantId());
        Assertions
            .assertEquals(
                "ceirtahtuwcimtca",
                response.iterator().next().properties().resourceAccessIdentityDetails().applicationId());
        Assertions
            .assertEquals(
                "viudzpsj", response.iterator().next().properties().resourceAccessIdentityDetails().objectId());
        Assertions
            .assertEquals("mluj", response.iterator().next().properties().resourceAccessIdentityDetails().audience());
        Assertions
            .assertEquals(
                "unlofwuzebfq", response.iterator().next().properties().resourceAccessIdentityDetails().aadAuthority());
        Assertions
            .assertEquals(
                "jbhzyenf",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().tenantId());
        Assertions
            .assertEquals(
                "etxeudw",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().applicationId());
        Assertions
            .assertEquals(
                "dlckdoxocjcdevz",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().objectId());
        Assertions
            .assertEquals(
                "reortwwyj",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().audience());
        Assertions
            .assertEquals(
                "vrlhfxmrhjn",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("cjywkdy", response.iterator().next().properties().providerVersionDetails().version());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-12T13:49:20Z"),
                response.iterator().next().properties().providerVersionDetails().expiryDate());
        Assertions
            .assertEquals(
                AgentVersionStatus.UPDATE_REQUIRED,
                response.iterator().next().properties().providerVersionDetails().status());
        Assertions.assertEquals("uafanefictp", response.iterator().next().location());
    }
}
