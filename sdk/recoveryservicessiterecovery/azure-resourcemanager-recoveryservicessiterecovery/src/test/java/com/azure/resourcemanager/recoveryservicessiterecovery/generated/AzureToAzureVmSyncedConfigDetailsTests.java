// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AzureToAzureVmSyncedConfigDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InputEndpoint;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureToAzureVmSyncedConfigDetailsTests {
    @Test
    public void testDeserialize() {
        AzureToAzureVmSyncedConfigDetails model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"ngrebwg\":\"tzuuvb\",\"x\":\"ahttzlswvajqfut\"},\"inputEndpoints\":[{\"endpointName\":\"asunwqrjzfrgq\",\"privatePort\":1577962880,\"publicPort\":1623468487,\"protocol\":\"buocnjr\"},{\"endpointName\":\"mbpyryxamebly\",\"privatePort\":1356441160,\"publicPort\":1346613912,\"protocol\":\"m\"},{\"endpointName\":\"cxneh\",\"privatePort\":1148200701,\"publicPort\":1484760487,\"protocol\":\"lfpya\"},{\"endpointName\":\"cygvoavyunssx\",\"privatePort\":345129004,\"publicPort\":279977636,\"protocol\":\"gjlgvvpase\"}]}")
                .toObject(AzureToAzureVmSyncedConfigDetails.class);
        Assertions.assertEquals("tzuuvb", model.tags().get("ngrebwg"));
        Assertions.assertEquals("asunwqrjzfrgq", model.inputEndpoints().get(0).endpointName());
        Assertions.assertEquals(1577962880, model.inputEndpoints().get(0).privatePort());
        Assertions.assertEquals(1623468487, model.inputEndpoints().get(0).publicPort());
        Assertions.assertEquals("buocnjr", model.inputEndpoints().get(0).protocol());
    }

    @Test
    public void testSerialize() {
        AzureToAzureVmSyncedConfigDetails model =
            new AzureToAzureVmSyncedConfigDetails()
                .withTags(mapOf("ngrebwg", "tzuuvb", "x", "ahttzlswvajqfut"))
                .withInputEndpoints(
                    Arrays
                        .asList(
                            new InputEndpoint()
                                .withEndpointName("asunwqrjzfrgq")
                                .withPrivatePort(1577962880)
                                .withPublicPort(1623468487)
                                .withProtocol("buocnjr"),
                            new InputEndpoint()
                                .withEndpointName("mbpyryxamebly")
                                .withPrivatePort(1356441160)
                                .withPublicPort(1346613912)
                                .withProtocol("m"),
                            new InputEndpoint()
                                .withEndpointName("cxneh")
                                .withPrivatePort(1148200701)
                                .withPublicPort(1484760487)
                                .withProtocol("lfpya"),
                            new InputEndpoint()
                                .withEndpointName("cygvoavyunssx")
                                .withPrivatePort(345129004)
                                .withPublicPort(279977636)
                                .withProtocol("gjlgvvpase")));
        model = BinaryData.fromObject(model).toObject(AzureToAzureVmSyncedConfigDetails.class);
        Assertions.assertEquals("tzuuvb", model.tags().get("ngrebwg"));
        Assertions.assertEquals("asunwqrjzfrgq", model.inputEndpoints().get(0).endpointName());
        Assertions.assertEquals(1577962880, model.inputEndpoints().get(0).privatePort());
        Assertions.assertEquals(1623468487, model.inputEndpoints().get(0).publicPort());
        Assertions.assertEquals("buocnjr", model.inputEndpoints().get(0).protocol());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
