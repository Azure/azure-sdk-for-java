// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Fabric;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RenewCertificateInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RenewCertificateInputProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationFabricsRenewCertificateMockTests {
    @Test
    public void testRenewCertificate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"cvsvk\",\"encryptionDetails\":{\"kekState\":\"jolpyoklkvuz\",\"kekCertThumbprint\":\"dvhml\",\"kekCertExpiryDate\":\"2021-10-22T19:20Z\"},\"rolloverEncryptionDetails\":{\"kekState\":\"owxxbh\",\"kekCertThumbprint\":\"syio\",\"kekCertExpiryDate\":\"2021-08-22T16:52:20Z\"},\"internalIdentifier\":\"w\",\"bcdrState\":\"szzgyk\",\"customDetails\":{\"instanceType\":\"FabricSpecificDetails\"},\"healthErrorDetails\":[],\"health\":\"anvmwdv\"},\"location\":\"qcrbkompnbnfgywe\",\"id\":\"jbepgcmah\",\"name\":\"wfryawkchkap\",\"type\":\"tsk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Fabric response =
            manager
                .replicationFabrics()
                .renewCertificate(
                    "tcqraq",
                    "ojpsucm",
                    "imcwqxynqjgsa",
                    new RenewCertificateInput()
                        .withProperties(
                            new RenewCertificateInputProperties().withRenewCertificateType("vscbgngcrusxhir")),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("cvsvk", response.properties().friendlyName());
        Assertions.assertEquals("jolpyoklkvuz", response.properties().encryptionDetails().kekState());
        Assertions.assertEquals("dvhml", response.properties().encryptionDetails().kekCertThumbprint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-22T19:20Z"),
                response.properties().encryptionDetails().kekCertExpiryDate());
        Assertions.assertEquals("owxxbh", response.properties().rolloverEncryptionDetails().kekState());
        Assertions.assertEquals("syio", response.properties().rolloverEncryptionDetails().kekCertThumbprint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-22T16:52:20Z"),
                response.properties().rolloverEncryptionDetails().kekCertExpiryDate());
        Assertions.assertEquals("w", response.properties().internalIdentifier());
        Assertions.assertEquals("szzgyk", response.properties().bcdrState());
        Assertions.assertEquals("anvmwdv", response.properties().health());
        Assertions.assertEquals("qcrbkompnbnfgywe", response.location());
    }
}
