// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageDiskExclusionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageDiskSignatureExclusionOptions;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageReprotectInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageVolumeExclusionOptions;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InMageReprotectInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageReprotectInput model = BinaryData.fromString(
            "{\"instanceType\":\"InMage\",\"masterTargetId\":\"crjixiujzkcs\",\"processServerId\":\"xgkrswksykkbxk\",\"retentionDrive\":\"xbbwlmnwz\",\"runAsAccountId\":\"nvuqddlggbqaolgz\",\"datastoreName\":\"akdlkvggc\",\"diskExclusionInput\":{\"volumeOptions\":[{\"volumeLabel\":\"f\",\"onlyExcludeIfSingleVolume\":\"pkmixwewzl\"},{\"volumeLabel\":\"gsmepnqvxgvoh\",\"onlyExcludeIfSingleVolume\":\"thhx\"}],\"diskSignatureOptions\":[{\"diskSignature\":\"vudeep\"}]},\"profileId\":\"hgannvwxqhpjhub\",\"disksToInclude\":[\"vzgaybvr\"]}")
            .toObject(InMageReprotectInput.class);
        Assertions.assertEquals("crjixiujzkcs", model.masterTargetId());
        Assertions.assertEquals("xgkrswksykkbxk", model.processServerId());
        Assertions.assertEquals("xbbwlmnwz", model.retentionDrive());
        Assertions.assertEquals("nvuqddlggbqaolgz", model.runAsAccountId());
        Assertions.assertEquals("akdlkvggc", model.datastoreName());
        Assertions.assertEquals("f", model.diskExclusionInput().volumeOptions().get(0).volumeLabel());
        Assertions.assertEquals("pkmixwewzl",
            model.diskExclusionInput().volumeOptions().get(0).onlyExcludeIfSingleVolume());
        Assertions.assertEquals("vudeep", model.diskExclusionInput().diskSignatureOptions().get(0).diskSignature());
        Assertions.assertEquals("hgannvwxqhpjhub", model.profileId());
        Assertions.assertEquals("vzgaybvr", model.disksToInclude().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageReprotectInput model = new InMageReprotectInput().withMasterTargetId("crjixiujzkcs")
            .withProcessServerId("xgkrswksykkbxk")
            .withRetentionDrive("xbbwlmnwz")
            .withRunAsAccountId("nvuqddlggbqaolgz")
            .withDatastoreName("akdlkvggc")
            .withDiskExclusionInput(new InMageDiskExclusionInput()
                .withVolumeOptions(Arrays.asList(
                    new InMageVolumeExclusionOptions().withVolumeLabel("f").withOnlyExcludeIfSingleVolume("pkmixwewzl"),
                    new InMageVolumeExclusionOptions().withVolumeLabel("gsmepnqvxgvoh")
                        .withOnlyExcludeIfSingleVolume("thhx")))
                .withDiskSignatureOptions(
                    Arrays.asList(new InMageDiskSignatureExclusionOptions().withDiskSignature("vudeep"))))
            .withProfileId("hgannvwxqhpjhub")
            .withDisksToInclude(Arrays.asList("vzgaybvr"));
        model = BinaryData.fromObject(model).toObject(InMageReprotectInput.class);
        Assertions.assertEquals("crjixiujzkcs", model.masterTargetId());
        Assertions.assertEquals("xgkrswksykkbxk", model.processServerId());
        Assertions.assertEquals("xbbwlmnwz", model.retentionDrive());
        Assertions.assertEquals("nvuqddlggbqaolgz", model.runAsAccountId());
        Assertions.assertEquals("akdlkvggc", model.datastoreName());
        Assertions.assertEquals("f", model.diskExclusionInput().volumeOptions().get(0).volumeLabel());
        Assertions.assertEquals("pkmixwewzl",
            model.diskExclusionInput().volumeOptions().get(0).onlyExcludeIfSingleVolume());
        Assertions.assertEquals("vudeep", model.diskExclusionInput().diskSignatureOptions().get(0).diskSignature());
        Assertions.assertEquals("hgannvwxqhpjhub", model.profileId());
        Assertions.assertEquals("vzgaybvr", model.disksToInclude().get(0));
    }
}
