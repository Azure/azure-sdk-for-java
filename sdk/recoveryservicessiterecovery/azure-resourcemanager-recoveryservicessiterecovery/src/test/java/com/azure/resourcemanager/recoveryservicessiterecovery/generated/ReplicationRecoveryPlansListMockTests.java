// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlan;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryPlansListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"friendlyName\":\"xydgzfoi\",\"primaryFabricId\":\"su\",\"primaryFabricFriendlyName\":\"aywvslqeronze\",\"recoveryFabricId\":\"kxfmu\",\"recoveryFabricFriendlyName\":\"bvyt\",\"failoverDeploymentModel\":\"v\",\"replicationProviders\":[\"mkdeuqxlvzpfdka\"],\"allowedOperations\":[\"iw\"],\"lastPlannedFailoverTime\":\"2021-01-01T13:54:24Z\",\"lastUnplannedFailoverTime\":\"2021-04-15T18:32:31Z\",\"lastTestFailoverTime\":\"2021-11-09T11:08:29Z\",\"currentScenario\":{\"scenarioName\":\"hbmrrmtrxgjmpdv\",\"jobId\":\"zwawpewajc\",\"startTime\":\"2021-06-01T11:10:36Z\"},\"currentScenarioStatus\":\"uzm\",\"currentScenarioStatusDescription\":\"jtickzovguzpr\",\"groups\":[],\"providerSpecificDetails\":[]},\"location\":\"ig\",\"id\":\"xkopqlrz\",\"name\":\"tocjzfppexuvatz\",\"type\":\"nkjwgiitvjcmimb\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RecoveryPlan> response =
            manager.replicationRecoveryPlans().list("femiwfhhawbabhz", "fcdi", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("xydgzfoi", response.iterator().next().properties().friendlyName());
        Assertions.assertEquals("su", response.iterator().next().properties().primaryFabricId());
        Assertions.assertEquals("aywvslqeronze", response.iterator().next().properties().primaryFabricFriendlyName());
        Assertions.assertEquals("kxfmu", response.iterator().next().properties().recoveryFabricId());
        Assertions.assertEquals("bvyt", response.iterator().next().properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("v", response.iterator().next().properties().failoverDeploymentModel());
        Assertions
            .assertEquals("mkdeuqxlvzpfdka", response.iterator().next().properties().replicationProviders().get(0));
        Assertions.assertEquals("iw", response.iterator().next().properties().allowedOperations().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-01T13:54:24Z"),
                response.iterator().next().properties().lastPlannedFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-15T18:32:31Z"),
                response.iterator().next().properties().lastUnplannedFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-09T11:08:29Z"),
                response.iterator().next().properties().lastTestFailoverTime());
        Assertions
            .assertEquals("hbmrrmtrxgjmpdv", response.iterator().next().properties().currentScenario().scenarioName());
        Assertions.assertEquals("zwawpewajc", response.iterator().next().properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-01T11:10:36Z"),
                response.iterator().next().properties().currentScenario().startTime());
        Assertions.assertEquals("uzm", response.iterator().next().properties().currentScenarioStatus());
        Assertions
            .assertEquals("jtickzovguzpr", response.iterator().next().properties().currentScenarioStatusDescription());
        Assertions.assertEquals("ig", response.iterator().next().location());
    }
}
