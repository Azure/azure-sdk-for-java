// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PossibleOperationsDirections;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlan;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanPlannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanPlannedFailoverInputProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryPlansPlannedFailoverMockTests {
    @Test
    public void testPlannedFailover() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"w\",\"primaryFabricId\":\"hlmtsnvonvb\",\"primaryFabricFriendlyName\":\"swcdopnseptvdt\",\"recoveryFabricId\":\"caflgzw\",\"recoveryFabricFriendlyName\":\"pxdkbtwoqhgppwxn\",\"failoverDeploymentModel\":\"fzrxxfnduvqz\",\"replicationProviders\":[\"uw\",\"vjzrfxajtbcqjk\",\"kj\",\"urxrjwyz\"],\"allowedOperations\":[\"itq\",\"lzuwtbdzqajxkmp\"],\"lastPlannedFailoverTime\":\"2021-06-05T17:59:31Z\",\"lastUnplannedFailoverTime\":\"2021-10-22T22:15:19Z\",\"lastTestFailoverTime\":\"2021-07-23T04:21:38Z\",\"currentScenario\":{\"scenarioName\":\"bdjg\",\"jobId\":\"nlx\",\"startTime\":\"2021-11-26T22:36:23Z\"},\"currentScenarioStatus\":\"zunbua\",\"currentScenarioStatusDescription\":\"oubukqmie\",\"groups\":[],\"providerSpecificDetails\":[]},\"location\":\"vvequz\",\"id\":\"tapgz\",\"name\":\"hzbjecdsysxnkuhv\",\"type\":\"nlsevzcrrwnkk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RecoveryPlan response =
            manager
                .replicationRecoveryPlans()
                .plannedFailover(
                    "hgqwbbxiw",
                    "wfgoclalvemnnzu",
                    "ab",
                    new RecoveryPlanPlannedFailoverInput()
                        .withProperties(
                            new RecoveryPlanPlannedFailoverInputProperties()
                                .withFailoverDirection(PossibleOperationsDirections.RECOVERY_TO_PRIMARY)
                                .withProviderSpecificDetails(Arrays.asList())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("w", response.properties().friendlyName());
        Assertions.assertEquals("hlmtsnvonvb", response.properties().primaryFabricId());
        Assertions.assertEquals("swcdopnseptvdt", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("caflgzw", response.properties().recoveryFabricId());
        Assertions.assertEquals("pxdkbtwoqhgppwxn", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("fzrxxfnduvqz", response.properties().failoverDeploymentModel());
        Assertions.assertEquals("uw", response.properties().replicationProviders().get(0));
        Assertions.assertEquals("itq", response.properties().allowedOperations().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-05T17:59:31Z"), response.properties().lastPlannedFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-22T22:15:19Z"), response.properties().lastUnplannedFailoverTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-23T04:21:38Z"), response.properties().lastTestFailoverTime());
        Assertions.assertEquals("bdjg", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("nlx", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-26T22:36:23Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("zunbua", response.properties().currentScenarioStatus());
        Assertions.assertEquals("oubukqmie", response.properties().currentScenarioStatusDescription());
        Assertions.assertEquals("vvequz", response.location());
    }
}
