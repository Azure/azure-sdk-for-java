// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsRepairReplicationMockTests {
    @Test
    public void testRepairReplication() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"sqosecxlngou\",\"protectedItemType\":\"izp\",\"protectableItemId\":\"fxzspfyvslazippl\",\"recoveryServicesProviderId\":\"tdumjtycildrzn\",\"primaryFabricFriendlyName\":\"xozqthkwxfugfziz\",\"primaryFabricProvider\":\"duyjnqzbr\",\"recoveryFabricFriendlyName\":\"akmfc\",\"recoveryFabricId\":\"iyjucamnsbqoi\",\"primaryProtectionContainerFriendlyName\":\"hmucji\",\"recoveryProtectionContainerFriendlyName\":\"cxyvehykl\",\"protectionState\":\"yqdvpq\",\"protectionStateDescription\":\"xgycudusdmtx\",\"activeLocation\":\"ef\",\"testFailoverState\":\"heywvfopkyllrey\",\"testFailoverStateDescription\":\"jpwdmsfwtwrsvev\",\"switchProviderState\":\"e\",\"switchProviderStateDescription\":\"wxhqhgkh\",\"allowedOperations\":[\"vul\",\"evvjncpmyhtxg\"],\"replicationHealth\":\"vghcmi\",\"failoverHealth\":\"lwkfef\",\"healthErrors\":[],\"policyId\":\"rtalqee\",\"policyFriendlyName\":\"dfyimooaezk\",\"lastSuccessfulFailoverTime\":\"2021-05-03T12:52:46Z\",\"lastSuccessfulTestFailoverTime\":\"2021-06-26T16:15:14Z\",\"currentScenario\":{\"scenarioName\":\"hlqwbywa\",\"jobId\":\"baeeekfztv\",\"startTime\":\"2021-10-12T11:49:58Z\"},\"failoverRecoveryPointId\":\"bbt\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"oljdkxhmew\",\"eventCorrelationId\":\"olclzxkrd\"},\"location\":\"yytbpkrpkhq\",\"id\":\"tpoenefnoafpcnrx\",\"name\":\"yrxowv\",\"type\":\"ufcmuajwblxp\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .repairReplication(
                    "zahgtv", "gdobimor", "olxosgihtrxueqb", "xqfg", "znjqswshe", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sqosecxlngou", response.properties().friendlyName());
        Assertions.assertEquals("izp", response.properties().protectedItemType());
        Assertions.assertEquals("fxzspfyvslazippl", response.properties().protectableItemId());
        Assertions.assertEquals("tdumjtycildrzn", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("xozqthkwxfugfziz", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("duyjnqzbr", response.properties().primaryFabricProvider());
        Assertions.assertEquals("akmfc", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("iyjucamnsbqoi", response.properties().recoveryFabricId());
        Assertions.assertEquals("hmucji", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("cxyvehykl", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("yqdvpq", response.properties().protectionState());
        Assertions.assertEquals("xgycudusdmtx", response.properties().protectionStateDescription());
        Assertions.assertEquals("ef", response.properties().activeLocation());
        Assertions.assertEquals("heywvfopkyllrey", response.properties().testFailoverState());
        Assertions.assertEquals("jpwdmsfwtwrsvev", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("e", response.properties().switchProviderState());
        Assertions.assertEquals("wxhqhgkh", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("vul", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("vghcmi", response.properties().replicationHealth());
        Assertions.assertEquals("lwkfef", response.properties().failoverHealth());
        Assertions.assertEquals("rtalqee", response.properties().policyId());
        Assertions.assertEquals("dfyimooaezk", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-03T12:52:46Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-26T16:15:14Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("hlqwbywa", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("baeeekfztv", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-12T11:49:58Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("bbt", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("oljdkxhmew", response.properties().recoveryContainerId());
        Assertions.assertEquals("olclzxkrd", response.properties().eventCorrelationId());
        Assertions.assertEquals("yytbpkrpkhq", response.location());
    }
}
