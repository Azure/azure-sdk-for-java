// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AgentVersionStatus;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryServicesProvider;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryServicesProvidersRefreshProviderMockTests {
    @Test
    public void testRefreshProvider() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"fabricType\":\"rllld\",\"friendlyName\":\"nbdzwils\",\"providerVersion\":\"yiqjz\",\"serverVersion\":\"rd\",\"providerVersionState\":\"ntpfxxgjahyxfw\",\"providerVersionExpiryDate\":\"2021-11-11T10:05:28Z\",\"fabricFriendlyName\":\"veyfbkqynlzxeme\",\"lastHeartBeat\":\"2021-05-16T03:47:58Z\",\"connectionStatus\":\"ckiehdmvfoyr\",\"protectedItemCount\":873742526,\"allowedScenarios\":[\"gmcuanszee\",\"vgcgcsa\"],\"healthErrorDetails\":[],\"draIdentifier\":\"qp\",\"machineId\":\"sekijhminenkb\",\"machineName\":\"p\",\"biosId\":\"kvorlfqm\",\"authenticationIdentityDetails\":{\"tenantId\":\"wynbfvvc\",\"applicationId\":\"urkmjufavvlnpbso\",\"objectId\":\"ynk\",\"audience\":\"mrznmtvrkk\",\"aadAuthority\":\"wxizkstxneykei\"},\"resourceAccessIdentityDetails\":{\"tenantId\":\"tc\",\"applicationId\":\"riuvnfazxtv\",\"objectId\":\"yyaeiivj\",\"audience\":\"qtjwrvewojoq\",\"aadAuthority\":\"qetxtdqiuspguzlj\"},\"dataPlaneAuthenticationIdentityDetails\":{\"tenantId\":\"ijzqjhljsa\",\"applicationId\":\"jsisfqqhcmec\",\"objectId\":\"sbfe\",\"audience\":\"rpnjygllfkchhgsj\",\"aadAuthority\":\"zcajlwmqc\"},\"providerVersionDetails\":{\"version\":\"baamkkhdhpmk\",\"expiryDate\":\"2020-12-23T14:44:01Z\",\"status\":\"NotSupported\"}},\"location\":\"puqzdy\",\"id\":\"qywsuarp\",\"name\":\"hryhe\",\"type\":\"xizdsyxbfj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RecoveryServicesProvider response =
            manager
                .replicationRecoveryServicesProviders()
                .refreshProvider(
                    "oikuqirhsk", "paowkgvnlfueyxfz", "brlrjugcfebpi", "ce", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rllld", response.properties().fabricType());
        Assertions.assertEquals("nbdzwils", response.properties().friendlyName());
        Assertions.assertEquals("yiqjz", response.properties().providerVersion());
        Assertions.assertEquals("rd", response.properties().serverVersion());
        Assertions.assertEquals("ntpfxxgjahyxfw", response.properties().providerVersionState());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-11T10:05:28Z"), response.properties().providerVersionExpiryDate());
        Assertions.assertEquals("veyfbkqynlzxeme", response.properties().fabricFriendlyName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-16T03:47:58Z"), response.properties().lastHeartBeat());
        Assertions.assertEquals("ckiehdmvfoyr", response.properties().connectionStatus());
        Assertions.assertEquals(873742526, response.properties().protectedItemCount());
        Assertions.assertEquals("gmcuanszee", response.properties().allowedScenarios().get(0));
        Assertions.assertEquals("qp", response.properties().draIdentifier());
        Assertions.assertEquals("sekijhminenkb", response.properties().machineId());
        Assertions.assertEquals("p", response.properties().machineName());
        Assertions.assertEquals("kvorlfqm", response.properties().biosId());
        Assertions.assertEquals("wynbfvvc", response.properties().authenticationIdentityDetails().tenantId());
        Assertions
            .assertEquals("urkmjufavvlnpbso", response.properties().authenticationIdentityDetails().applicationId());
        Assertions.assertEquals("ynk", response.properties().authenticationIdentityDetails().objectId());
        Assertions.assertEquals("mrznmtvrkk", response.properties().authenticationIdentityDetails().audience());
        Assertions.assertEquals("wxizkstxneykei", response.properties().authenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("tc", response.properties().resourceAccessIdentityDetails().tenantId());
        Assertions.assertEquals("riuvnfazxtv", response.properties().resourceAccessIdentityDetails().applicationId());
        Assertions.assertEquals("yyaeiivj", response.properties().resourceAccessIdentityDetails().objectId());
        Assertions.assertEquals("qtjwrvewojoq", response.properties().resourceAccessIdentityDetails().audience());
        Assertions
            .assertEquals("qetxtdqiuspguzlj", response.properties().resourceAccessIdentityDetails().aadAuthority());
        Assertions
            .assertEquals("ijzqjhljsa", response.properties().dataPlaneAuthenticationIdentityDetails().tenantId());
        Assertions
            .assertEquals(
                "jsisfqqhcmec", response.properties().dataPlaneAuthenticationIdentityDetails().applicationId());
        Assertions.assertEquals("sbfe", response.properties().dataPlaneAuthenticationIdentityDetails().objectId());
        Assertions
            .assertEquals(
                "rpnjygllfkchhgsj", response.properties().dataPlaneAuthenticationIdentityDetails().audience());
        Assertions
            .assertEquals("zcajlwmqc", response.properties().dataPlaneAuthenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("baamkkhdhpmk", response.properties().providerVersionDetails().version());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2020-12-23T14:44:01Z"),
                response.properties().providerVersionDetails().expiryDate());
        Assertions
            .assertEquals(AgentVersionStatus.NOT_SUPPORTED, response.properties().providerVersionDetails().status());
        Assertions.assertEquals("puqzdy", response.location());
    }
}
