// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobEntity;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VirtualMachineTaskDetails;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineTaskDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineTaskDetails model = BinaryData.fromString(
            "{\"instanceType\":\"VirtualMachineTaskDetails\",\"skippedReason\":\"izt\",\"skippedReasonString\":\"stahhhsaaxxsritr\",\"jobTask\":{\"jobId\":\"aaesyyefmxwoqot\",\"jobFriendlyName\":\"qb\",\"targetObjectId\":\"asrvrmtist\",\"targetObjectName\":\"kjhorlxkpy\",\"targetInstanceType\":\"ennycntr\",\"jobScenarioName\":\"xwtdmbqjtsuhqh\"}}")
            .toObject(VirtualMachineTaskDetails.class);
        Assertions.assertEquals("aaesyyefmxwoqot", model.jobTask().jobId());
        Assertions.assertEquals("qb", model.jobTask().jobFriendlyName());
        Assertions.assertEquals("asrvrmtist", model.jobTask().targetObjectId());
        Assertions.assertEquals("kjhorlxkpy", model.jobTask().targetObjectName());
        Assertions.assertEquals("ennycntr", model.jobTask().targetInstanceType());
        Assertions.assertEquals("xwtdmbqjtsuhqh", model.jobTask().jobScenarioName());
        Assertions.assertEquals("izt", model.skippedReason());
        Assertions.assertEquals("stahhhsaaxxsritr", model.skippedReasonString());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineTaskDetails model = new VirtualMachineTaskDetails()
            .withJobTask(new JobEntity().withJobId("aaesyyefmxwoqot")
                .withJobFriendlyName("qb")
                .withTargetObjectId("asrvrmtist")
                .withTargetObjectName("kjhorlxkpy")
                .withTargetInstanceType("ennycntr")
                .withJobScenarioName("xwtdmbqjtsuhqh"))
            .withSkippedReason("izt")
            .withSkippedReasonString("stahhhsaaxxsritr");
        model = BinaryData.fromObject(model).toObject(VirtualMachineTaskDetails.class);
        Assertions.assertEquals("aaesyyefmxwoqot", model.jobTask().jobId());
        Assertions.assertEquals("qb", model.jobTask().jobFriendlyName());
        Assertions.assertEquals("asrvrmtist", model.jobTask().targetObjectId());
        Assertions.assertEquals("kjhorlxkpy", model.jobTask().targetObjectName());
        Assertions.assertEquals("ennycntr", model.jobTask().targetInstanceType());
        Assertions.assertEquals("xwtdmbqjtsuhqh", model.jobTask().jobScenarioName());
        Assertions.assertEquals("izt", model.skippedReason());
        Assertions.assertEquals("stahhhsaaxxsritr", model.skippedReasonString());
    }
}
