// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobEntity;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VirtualMachineTaskDetails;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineTaskDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineTaskDetails model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"VirtualMachineTaskDetails\",\"skippedReason\":\"pfqpgaixw\",\"skippedReasonString\":\"rkkderfrswqikw\",\"jobTask\":{\"jobId\":\"ogggicwnxhtfm\",\"jobFriendlyName\":\"bsudzpgchzpgfqu\",\"targetObjectId\":\"djxh\",\"targetObjectName\":\"hgod\",\"targetInstanceType\":\"nrceqavfdbdfmmx\",\"jobScenarioName\":\"naj\"}}")
                .toObject(VirtualMachineTaskDetails.class);
        Assertions.assertEquals("ogggicwnxhtfm", model.jobTask().jobId());
        Assertions.assertEquals("bsudzpgchzpgfqu", model.jobTask().jobFriendlyName());
        Assertions.assertEquals("djxh", model.jobTask().targetObjectId());
        Assertions.assertEquals("hgod", model.jobTask().targetObjectName());
        Assertions.assertEquals("nrceqavfdbdfmmx", model.jobTask().targetInstanceType());
        Assertions.assertEquals("naj", model.jobTask().jobScenarioName());
        Assertions.assertEquals("pfqpgaixw", model.skippedReason());
        Assertions.assertEquals("rkkderfrswqikw", model.skippedReasonString());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineTaskDetails model =
            new VirtualMachineTaskDetails()
                .withJobTask(
                    new JobEntity()
                        .withJobId("ogggicwnxhtfm")
                        .withJobFriendlyName("bsudzpgchzpgfqu")
                        .withTargetObjectId("djxh")
                        .withTargetObjectName("hgod")
                        .withTargetInstanceType("nrceqavfdbdfmmx")
                        .withJobScenarioName("naj"))
                .withSkippedReason("pfqpgaixw")
                .withSkippedReasonString("rkkderfrswqikw");
        model = BinaryData.fromObject(model).toObject(VirtualMachineTaskDetails.class);
        Assertions.assertEquals("ogggicwnxhtfm", model.jobTask().jobId());
        Assertions.assertEquals("bsudzpgchzpgfqu", model.jobTask().jobFriendlyName());
        Assertions.assertEquals("djxh", model.jobTask().targetObjectId());
        Assertions.assertEquals("hgod", model.jobTask().targetObjectName());
        Assertions.assertEquals("nrceqavfdbdfmmx", model.jobTask().targetInstanceType());
        Assertions.assertEquals("naj", model.jobTask().jobScenarioName());
        Assertions.assertEquals("pfqpgaixw", model.skippedReason());
        Assertions.assertEquals("rkkderfrswqikw", model.skippedReasonString());
    }
}
