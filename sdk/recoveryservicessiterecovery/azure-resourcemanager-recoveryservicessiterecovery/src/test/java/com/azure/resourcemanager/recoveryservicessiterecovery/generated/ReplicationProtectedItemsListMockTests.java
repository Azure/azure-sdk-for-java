// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"friendlyName\":\"rvhtv\",\"protectedItemType\":\"vwmrgcnzhrplc\",\"protectableItemId\":\"mbzquu\",\"recoveryServicesProviderId\":\"q\",\"primaryFabricFriendlyName\":\"btqyzycgcmbkygv\",\"primaryFabricProvider\":\"dqosxzmdzly\",\"recoveryFabricFriendlyName\":\"fufkekzfk\",\"recoveryFabricId\":\"xh\",\"primaryProtectionContainerFriendlyName\":\"vmnkgghvsryjok\",\"recoveryProtectionContainerFriendlyName\":\"wvb\",\"protectionState\":\"arxsvmfpabw\",\"protectionStateDescription\":\"zgfgqpudhgxgi\",\"activeLocation\":\"bbfpxxa\",\"testFailoverState\":\"oz\",\"testFailoverStateDescription\":\"gsnuhwy\",\"switchProviderState\":\"sfmaxcebnbeo\",\"switchProviderStateDescription\":\"emqqerwqx\",\"allowedOperations\":[\"v\",\"mdfkhttuobr\",\"zmhytebjkjgee\"],\"replicationHealth\":\"t\",\"failoverHealth\":\"abvbmnhtwofx\",\"healthErrors\":[],\"policyId\":\"vyqnslbqrmlq\",\"policyFriendlyName\":\"ekhjgq\",\"lastSuccessfulFailoverTime\":\"2021-08-17T04:00:25Z\",\"lastSuccessfulTestFailoverTime\":\"2021-03-08T03:03:52Z\",\"currentScenario\":{\"scenarioName\":\"pscvsm\",\"jobId\":\"tluwozfvzasupc\",\"startTime\":\"2021-02-22T03:45:30Z\"},\"failoverRecoveryPointId\":\"cvwioq\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"cgmlmpn\",\"eventCorrelationId\":\"xuyi\"},\"location\":\"z\",\"id\":\"hdqseyp\",\"name\":\"lmajpuyxoafrmz\",\"type\":\"ccynbuv\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ReplicationProtectedItem> response =
            manager
                .replicationProtectedItems()
                .list("n", "rxlexoweorocr", "icgym", "gbq", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rvhtv", response.iterator().next().properties().friendlyName());
        Assertions.assertEquals("vwmrgcnzhrplc", response.iterator().next().properties().protectedItemType());
        Assertions.assertEquals("mbzquu", response.iterator().next().properties().protectableItemId());
        Assertions.assertEquals("q", response.iterator().next().properties().recoveryServicesProviderId());
        Assertions.assertEquals("btqyzycgcmbkygv", response.iterator().next().properties().primaryFabricFriendlyName());
        Assertions.assertEquals("dqosxzmdzly", response.iterator().next().properties().primaryFabricProvider());
        Assertions.assertEquals("fufkekzfk", response.iterator().next().properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("xh", response.iterator().next().properties().recoveryFabricId());
        Assertions
            .assertEquals(
                "vmnkgghvsryjok", response.iterator().next().properties().primaryProtectionContainerFriendlyName());
        Assertions
            .assertEquals("wvb", response.iterator().next().properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("arxsvmfpabw", response.iterator().next().properties().protectionState());
        Assertions.assertEquals("zgfgqpudhgxgi", response.iterator().next().properties().protectionStateDescription());
        Assertions.assertEquals("bbfpxxa", response.iterator().next().properties().activeLocation());
        Assertions.assertEquals("oz", response.iterator().next().properties().testFailoverState());
        Assertions.assertEquals("gsnuhwy", response.iterator().next().properties().testFailoverStateDescription());
        Assertions.assertEquals("sfmaxcebnbeo", response.iterator().next().properties().switchProviderState());
        Assertions.assertEquals("emqqerwqx", response.iterator().next().properties().switchProviderStateDescription());
        Assertions.assertEquals("v", response.iterator().next().properties().allowedOperations().get(0));
        Assertions.assertEquals("t", response.iterator().next().properties().replicationHealth());
        Assertions.assertEquals("abvbmnhtwofx", response.iterator().next().properties().failoverHealth());
        Assertions.assertEquals("vyqnslbqrmlq", response.iterator().next().properties().policyId());
        Assertions.assertEquals("ekhjgq", response.iterator().next().properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-17T04:00:25Z"),
                response.iterator().next().properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-08T03:03:52Z"),
                response.iterator().next().properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("pscvsm", response.iterator().next().properties().currentScenario().scenarioName());
        Assertions.assertEquals("tluwozfvzasupc", response.iterator().next().properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-22T03:45:30Z"),
                response.iterator().next().properties().currentScenario().startTime());
        Assertions.assertEquals("cvwioq", response.iterator().next().properties().failoverRecoveryPointId());
        Assertions.assertEquals("cgmlmpn", response.iterator().next().properties().recoveryContainerId());
        Assertions.assertEquals("xuyi", response.iterator().next().properties().eventCorrelationId());
        Assertions.assertEquals("z", response.iterator().next().location());
    }
}
