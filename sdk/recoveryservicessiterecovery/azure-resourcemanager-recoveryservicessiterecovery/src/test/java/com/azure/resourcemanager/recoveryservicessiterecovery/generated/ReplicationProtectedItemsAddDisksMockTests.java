// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AddDisksInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AddDisksInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AddDisksProviderSpecificInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsAddDisksMockTests {
    @Test
    public void testAddDisks() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"bhanz\",\"protectedItemType\":\"sfhshag\",\"protectableItemId\":\"hnezpbyfyv\",\"recoveryServicesProviderId\":\"pmggqgagenvqbug\",\"primaryFabricFriendlyName\":\"cd\",\"primaryFabricProvider\":\"oizorbloe\",\"recoveryFabricFriendlyName\":\"sax\",\"recoveryFabricId\":\"kq\",\"primaryProtectionContainerFriendlyName\":\"deppjnaphi\",\"recoveryProtectionContainerFriendlyName\":\"fr\",\"protectionState\":\"p\",\"protectionStateDescription\":\"bpebrmj\",\"activeLocation\":\"fpghtbttpkim\",\"testFailoverState\":\"hnkkhbykrs\",\"testFailoverStateDescription\":\"rcmelycpgokut\",\"switchProviderState\":\"vybnzbnvmshfuzz\",\"switchProviderStateDescription\":\"pyixlv\",\"allowedOperations\":[\"ulaebx\",\"auqsuptessjlwjt\",\"tpvb\"],\"replicationHealth\":\"kx\",\"failoverHealth\":\"qaygas\",\"healthErrors\":[],\"policyId\":\"vwpvlcj\",\"policyFriendlyName\":\"yezj\",\"lastSuccessfulFailoverTime\":\"2021-01-10T18:57:49Z\",\"lastSuccessfulTestFailoverTime\":\"2021-06-06T02:08:44Z\",\"currentScenario\":{\"scenarioName\":\"whiieyozv\",\"jobId\":\"wfpucwnbcgqe\",\"startTime\":\"2021-04-13T04:53:30Z\"},\"failoverRecoveryPointId\":\"vbxqcbgo\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"tuuciagvkd\",\"eventCorrelationId\":\"uduklbjoafmj\"},\"location\":\"xul\",\"id\":\"oepkn\",\"name\":\"rseianc\",\"type\":\"qoacbuqdgsap\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .addDisks(
                    "ufigvfjjuzki",
                    "mciwu",
                    "yzekypyovl",
                    "lbzdlbybpaxh",
                    "zyso",
                    new AddDisksInput()
                        .withProperties(
                            new AddDisksInputProperties()
                                .withProviderSpecificDetails(new AddDisksProviderSpecificInput())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bhanz", response.properties().friendlyName());
        Assertions.assertEquals("sfhshag", response.properties().protectedItemType());
        Assertions.assertEquals("hnezpbyfyv", response.properties().protectableItemId());
        Assertions.assertEquals("pmggqgagenvqbug", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("cd", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("oizorbloe", response.properties().primaryFabricProvider());
        Assertions.assertEquals("sax", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("kq", response.properties().recoveryFabricId());
        Assertions.assertEquals("deppjnaphi", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("fr", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("p", response.properties().protectionState());
        Assertions.assertEquals("bpebrmj", response.properties().protectionStateDescription());
        Assertions.assertEquals("fpghtbttpkim", response.properties().activeLocation());
        Assertions.assertEquals("hnkkhbykrs", response.properties().testFailoverState());
        Assertions.assertEquals("rcmelycpgokut", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("vybnzbnvmshfuzz", response.properties().switchProviderState());
        Assertions.assertEquals("pyixlv", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("ulaebx", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("kx", response.properties().replicationHealth());
        Assertions.assertEquals("qaygas", response.properties().failoverHealth());
        Assertions.assertEquals("vwpvlcj", response.properties().policyId());
        Assertions.assertEquals("yezj", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-10T18:57:49Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-06T02:08:44Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("whiieyozv", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("wfpucwnbcgqe", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-13T04:53:30Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("vbxqcbgo", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("tuuciagvkd", response.properties().recoveryContainerId());
        Assertions.assertEquals("uduklbjoafmj", response.properties().eventCorrelationId());
        Assertions.assertEquals("xul", response.location());
    }
}
