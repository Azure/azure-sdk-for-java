// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VCenter;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationvCentersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"rqefnquollouurm\",\"internalId\":\"embqqiehdhjofy\",\"lastHeartbeat\":\"2021-09-02T06:08:16Z\",\"discoveryStatus\":\"xoxlorxgslqcxu\",\"processServerId\":\"vpaglyyh\",\"ipAddress\":\"mabspm\",\"infrastructureId\":\"tyjukk\",\"port\":\"putocr\",\"runAsAccountId\":\"gqicmdrgcuzjmvkr\",\"fabricArmResourceName\":\"jcqhgcmljzksqim\",\"healthErrors\":[]},\"location\":\"vfiomhc\",\"id\":\"qpvhszopeukufds\",\"name\":\"bsskgqjemosq\",\"type\":\"fsjbpwjwz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        VCenter response =
            manager
                .replicationvCenters()
                .getWithResponse("ejk", "aleczt", "thrtzpuv", "s", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("rqefnquollouurm", response.properties().friendlyName());
        Assertions.assertEquals("embqqiehdhjofy", response.properties().internalId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T06:08:16Z"), response.properties().lastHeartbeat());
        Assertions.assertEquals("xoxlorxgslqcxu", response.properties().discoveryStatus());
        Assertions.assertEquals("vpaglyyh", response.properties().processServerId());
        Assertions.assertEquals("mabspm", response.properties().ipAddress());
        Assertions.assertEquals("tyjukk", response.properties().infrastructureId());
        Assertions.assertEquals("putocr", response.properties().port());
        Assertions.assertEquals("gqicmdrgcuzjmvkr", response.properties().runAsAccountId());
        Assertions.assertEquals("jcqhgcmljzksqim", response.properties().fabricArmResourceName());
        Assertions.assertEquals("vfiomhc", response.location());
    }
}
