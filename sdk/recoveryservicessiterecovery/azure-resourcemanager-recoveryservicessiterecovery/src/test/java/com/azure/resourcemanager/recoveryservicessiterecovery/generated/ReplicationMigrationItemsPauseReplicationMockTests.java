// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.MigrationItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PauseReplicationInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PauseReplicationInputProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationMigrationItemsPauseReplicationMockTests {
    @Test
    public void testPauseReplication() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"machineName\":\"ttwknhajksbsyo\",\"policyId\":\"mqjhgcydijnmc\",\"policyFriendlyName\":\"bssfcriqx\",\"recoveryServicesProviderId\":\"xtdlxwmvcdkucp\",\"replicationStatus\":\"yafrwr\",\"migrationState\":\"MigrationSucceeded\",\"migrationStateDescription\":\"ge\",\"lastTestMigrationTime\":\"2021-04-22T09:22:41Z\",\"lastTestMigrationStatus\":\"rspnrsjsem\",\"lastMigrationTime\":\"2021-08-01T02:38:23Z\",\"lastMigrationStatus\":\"rsnqpljpetex\",\"testMigrateState\":\"TestMigrationCleanupInProgress\",\"testMigrateStateDescription\":\"elpmwgrpubwudhv\",\"health\":\"Warning\",\"healthErrors\":[],\"allowedOperations\":[\"TestMigrate\",\"PauseReplication\",\"TestMigrate\",\"ResumeReplication\"],\"currentJob\":{\"jobName\":\"vdfwgqjhewcffrx\",\"jobId\":\"ezkhzp\",\"startTime\":\"2021-03-03T20:49:56Z\"},\"criticalJobHistory\":[],\"eventCorrelationId\":\"enerr\",\"providerSpecificDetails\":{\"instanceType\":\"MigrationProviderSpecificSettings\"}},\"location\":\"zaivnpsjnpc\",\"id\":\"plujyduonb\",\"name\":\"awsaoplvvmnbkx\",\"type\":\"arsbbdddwokqxail\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MigrationItem response =
            manager
                .replicationMigrationItems()
                .pauseReplication(
                    "j",
                    "lgrcavqcwyzoqzkm",
                    "cwwsj",
                    "kiixepbntqqwwgfg",
                    "qxilefejs",
                    new PauseReplicationInput()
                        .withProperties(new PauseReplicationInputProperties().withInstanceType("wrznequ")),
                    Context.NONE);

        Assertions.assertEquals("zaivnpsjnpc", response.location());
    }
}
