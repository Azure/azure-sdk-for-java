// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResolveHealthInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ResolveHealthInputProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsResolveHealthErrorsMockTests {
    @Test
    public void testResolveHealthErrors() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"evlahxczywyw\",\"protectedItemType\":\"hwcorew\",\"protectableItemId\":\"naaxqjfdajr\",\"recoveryServicesProviderId\":\"imomggewdqbxex\",\"primaryFabricFriendlyName\":\"z\",\"primaryFabricProvider\":\"ussuq\",\"recoveryFabricFriendlyName\":\"lwsfxayzqbyeywpm\",\"recoveryFabricId\":\"nrtlikffy\",\"primaryProtectionContainerFriendlyName\":\"tkqrfbgyn\",\"recoveryProtectionContainerFriendlyName\":\"wvzdte\",\"protectionState\":\"myqxuhgka\",\"protectionStateDescription\":\"yprij\",\"activeLocation\":\"x\",\"testFailoverState\":\"xbsowrrlcck\",\"testFailoverStateDescription\":\"fpjmspau\",\"switchProviderState\":\"qom\",\"switchProviderStateDescription\":\"alknuyapvibzic\",\"allowedOperations\":[\"chcaptkhjxnrk\",\"nvfcckl\"],\"replicationHealth\":\"znfgvlx\",\"failoverHealth\":\"mnctigp\",\"healthErrors\":[],\"policyId\":\"icklktgkdprtq\",\"policyFriendlyName\":\"tdcf\",\"lastSuccessfulFailoverTime\":\"2021-07-22T05:16:27Z\",\"lastSuccessfulTestFailoverTime\":\"2021-03-31T22:08:37Z\",\"currentScenario\":{\"scenarioName\":\"bvjsbgmlamoax\",\"jobId\":\"ytn\",\"startTime\":\"2021-08-14T07:38:34Z\"},\"failoverRecoveryPointId\":\"pbltc\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"xheeocnqo\",\"eventCorrelationId\":\"vepvlryszfhdxyf\"},\"location\":\"ohzbzhhavzfuxnvk\",\"id\":\"slcof\",\"name\":\"vtf\",\"type\":\"ehoui\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .resolveHealthErrors(
                    "xok",
                    "xamqecjrzvlcivqx",
                    "emklphx",
                    "wwlojkbgnf",
                    "rzjv",
                    new ResolveHealthInput()
                        .withProperties(new ResolveHealthInputProperties().withHealthErrors(Arrays.asList())),
                    Context.NONE);

        Assertions.assertEquals("evlahxczywyw", response.properties().friendlyName());
        Assertions.assertEquals("hwcorew", response.properties().protectedItemType());
        Assertions.assertEquals("naaxqjfdajr", response.properties().protectableItemId());
        Assertions.assertEquals("imomggewdqbxex", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("z", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("ussuq", response.properties().primaryFabricProvider());
        Assertions.assertEquals("lwsfxayzqbyeywpm", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("nrtlikffy", response.properties().recoveryFabricId());
        Assertions.assertEquals("tkqrfbgyn", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("wvzdte", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("myqxuhgka", response.properties().protectionState());
        Assertions.assertEquals("yprij", response.properties().protectionStateDescription());
        Assertions.assertEquals("x", response.properties().activeLocation());
        Assertions.assertEquals("xbsowrrlcck", response.properties().testFailoverState());
        Assertions.assertEquals("fpjmspau", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("qom", response.properties().switchProviderState());
        Assertions.assertEquals("alknuyapvibzic", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("chcaptkhjxnrk", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("znfgvlx", response.properties().replicationHealth());
        Assertions.assertEquals("mnctigp", response.properties().failoverHealth());
        Assertions.assertEquals("icklktgkdprtq", response.properties().policyId());
        Assertions.assertEquals("tdcf", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-22T05:16:27Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-31T22:08:37Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("bvjsbgmlamoax", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("ytn", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-14T07:38:34Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("pbltc", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("xheeocnqo", response.properties().recoveryContainerId());
        Assertions.assertEquals("vepvlryszfhdxyf", response.properties().eventCorrelationId());
        Assertions.assertEquals("ohzbzhhavzfuxnvk", response.location());
    }
}
