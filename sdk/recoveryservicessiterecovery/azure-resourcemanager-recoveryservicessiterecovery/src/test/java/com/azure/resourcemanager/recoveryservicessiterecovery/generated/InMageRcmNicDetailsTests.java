// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.EthernetAddressType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageRcmNicDetails;
import org.junit.jupiter.api.Assertions;

public final class InMageRcmNicDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageRcmNicDetails model = BinaryData.fromString(
            "{\"nicId\":\"tadopgfzdg\",\"isPrimaryNic\":\"c\",\"isSelectedForFailover\":\"rsvloy\",\"sourceIPAddress\":\"igqkzjuqwqa\",\"sourceIPAddressType\":\"Dynamic\",\"sourceNetworkId\":\"x\",\"sourceSubnetName\":\"xhyoip\",\"targetIPAddress\":\"dbgsosc\",\"targetIPAddressType\":\"Static\",\"targetSubnetName\":\"zfvbennmfkbpj\",\"testSubnetName\":\"tekwwnthropm\",\"testIPAddress\":\"d\",\"testIPAddressType\":\"Dynamic\"}")
            .toObject(InMageRcmNicDetails.class);
        Assertions.assertEquals("c", model.isPrimaryNic());
        Assertions.assertEquals("rsvloy", model.isSelectedForFailover());
        Assertions.assertEquals("dbgsosc", model.targetIpAddress());
        Assertions.assertEquals(EthernetAddressType.STATIC, model.targetIpAddressType());
        Assertions.assertEquals("zfvbennmfkbpj", model.targetSubnetName());
        Assertions.assertEquals("tekwwnthropm", model.testSubnetName());
        Assertions.assertEquals("d", model.testIpAddress());
        Assertions.assertEquals(EthernetAddressType.DYNAMIC, model.testIpAddressType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageRcmNicDetails model = new InMageRcmNicDetails().withIsPrimaryNic("c").withIsSelectedForFailover("rsvloy")
            .withTargetIpAddress("dbgsosc").withTargetIpAddressType(EthernetAddressType.STATIC)
            .withTargetSubnetName("zfvbennmfkbpj").withTestSubnetName("tekwwnthropm").withTestIpAddress("d")
            .withTestIpAddressType(EthernetAddressType.DYNAMIC);
        model = BinaryData.fromObject(model).toObject(InMageRcmNicDetails.class);
        Assertions.assertEquals("c", model.isPrimaryNic());
        Assertions.assertEquals("rsvloy", model.isSelectedForFailover());
        Assertions.assertEquals("dbgsosc", model.targetIpAddress());
        Assertions.assertEquals(EthernetAddressType.STATIC, model.targetIpAddressType());
        Assertions.assertEquals("zfvbennmfkbpj", model.targetSubnetName());
        Assertions.assertEquals("tekwwnthropm", model.testSubnetName());
        Assertions.assertEquals("d", model.testIpAddress());
        Assertions.assertEquals(EthernetAddressType.DYNAMIC, model.testIpAddressType());
    }
}
