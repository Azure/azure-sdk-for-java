// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.EthernetAddressType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageRcmNicDetails;
import org.junit.jupiter.api.Assertions;

public final class InMageRcmNicDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageRcmNicDetails model = BinaryData.fromString(
            "{\"nicId\":\"haahntofelfhpfi\",\"isPrimaryNic\":\"skkzdfivsujybsr\",\"isSelectedForFailover\":\"zmrgtxdhmfppinmg\",\"sourceIPAddress\":\"esmkwtzgf\",\"sourceIPAddressType\":\"Dynamic\",\"sourceNetworkId\":\"hxerxlobkdbtq\",\"sourceSubnetName\":\"mmniiqyholhjnskb\",\"targetIPAddress\":\"icnq\",\"targetIPAddressType\":\"Dynamic\",\"targetSubnetName\":\"m\",\"testSubnetName\":\"blxk\",\"testIPAddress\":\"qgvxrktjcjigcw\",\"testIPAddressType\":\"Static\",\"targetNicName\":\"nbqx\"}")
            .toObject(InMageRcmNicDetails.class);
        Assertions.assertEquals("skkzdfivsujybsr", model.isPrimaryNic());
        Assertions.assertEquals("zmrgtxdhmfppinmg", model.isSelectedForFailover());
        Assertions.assertEquals("icnq", model.targetIpAddress());
        Assertions.assertEquals(EthernetAddressType.DYNAMIC, model.targetIpAddressType());
        Assertions.assertEquals("m", model.targetSubnetName());
        Assertions.assertEquals("blxk", model.testSubnetName());
        Assertions.assertEquals("qgvxrktjcjigcw", model.testIpAddress());
        Assertions.assertEquals(EthernetAddressType.STATIC, model.testIpAddressType());
        Assertions.assertEquals("nbqx", model.targetNicName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageRcmNicDetails model = new InMageRcmNicDetails().withIsPrimaryNic("skkzdfivsujybsr")
            .withIsSelectedForFailover("zmrgtxdhmfppinmg")
            .withTargetIpAddress("icnq")
            .withTargetIpAddressType(EthernetAddressType.DYNAMIC)
            .withTargetSubnetName("m")
            .withTestSubnetName("blxk")
            .withTestIpAddress("qgvxrktjcjigcw")
            .withTestIpAddressType(EthernetAddressType.STATIC)
            .withTargetNicName("nbqx");
        model = BinaryData.fromObject(model).toObject(InMageRcmNicDetails.class);
        Assertions.assertEquals("skkzdfivsujybsr", model.isPrimaryNic());
        Assertions.assertEquals("zmrgtxdhmfppinmg", model.isSelectedForFailover());
        Assertions.assertEquals("icnq", model.targetIpAddress());
        Assertions.assertEquals(EthernetAddressType.DYNAMIC, model.targetIpAddressType());
        Assertions.assertEquals("m", model.targetSubnetName());
        Assertions.assertEquals("blxk", model.testSubnetName());
        Assertions.assertEquals("qgvxrktjcjigcw", model.testIpAddress());
        Assertions.assertEquals(EthernetAddressType.STATIC, model.testIpAddressType());
        Assertions.assertEquals("nbqx", model.targetNicName());
    }
}
