// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskAccountType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageAzureV2DiskInputDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageAzureV2EnableProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InMageAzureV2EnableProtectionInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageAzureV2EnableProtectionInput model = BinaryData.fromString(
            "{\"instanceType\":\"InMageAzureV2\",\"masterTargetId\":\"yryefqm\",\"processServerId\":\"vyztxlno\",\"storageAccountId\":\"pbjceegvy\",\"runAsAccountId\":\"ztkutnj\",\"multiVmGroupId\":\"l\",\"multiVmGroupName\":\"krehyhtmj\",\"disksToInclude\":[{\"diskId\":\"fvulxfaryr\",\"logStorageAccountId\":\"lgdezvjqw\",\"diskType\":\"Standard_LRS\",\"diskEncryptionSetId\":\"iyaxqvjweiwt\"}],\"targetAzureNetworkId\":\"kddn\",\"targetAzureSubnetId\":\"vbooqbmdqrxy\",\"enableRdpOnTargetOption\":\"ae\",\"targetAzureVmName\":\"cflwtjdtlr\",\"logStorageAccountId\":\"fooy\",\"targetAzureV1ResourceGroupId\":\"uxdtzcq\",\"targetAzureV2ResourceGroupId\":\"sdudgcoz\",\"diskType\":\"Standard_LRS\",\"targetAvailabilitySetId\":\"hxlantolaml\",\"targetAvailabilityZone\":\"juxkqll\",\"targetProximityPlacementGroupId\":\"i\",\"licenseType\":\"WindowsServer\",\"sqlServerLicenseType\":\"PAYG\",\"targetVmSize\":\"ckzdqiqdlra\",\"diskEncryptionSetId\":\"kwx\",\"targetVmTags\":{\"znhrf\":\"wxsuy\",\"ry\":\"slglh\",\"ihuioaeo\":\"f\",\"dd\":\"pajtfeyvkbd\"},\"seedManagedDiskTags\":{\"kzwtjwwguzytij\":\"dccxbeuuqu\",\"ndegjdydhqkkkbj\":\"xfn\"},\"targetManagedDiskTags\":{\"pzdlyseidtoak\":\"catuqbhpowcnx\"},\"targetNicTags\":{\"tvcshtkutzcttb\":\"rytgrhzbqfdpfawr\",\"m\":\"gdirda\"}}")
            .toObject(InMageAzureV2EnableProtectionInput.class);
        Assertions.assertEquals("yryefqm", model.masterTargetId());
        Assertions.assertEquals("vyztxlno", model.processServerId());
        Assertions.assertEquals("pbjceegvy", model.storageAccountId());
        Assertions.assertEquals("ztkutnj", model.runAsAccountId());
        Assertions.assertEquals("l", model.multiVmGroupId());
        Assertions.assertEquals("krehyhtmj", model.multiVmGroupName());
        Assertions.assertEquals("fvulxfaryr", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("lgdezvjqw", model.disksToInclude().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.STANDARD_LRS, model.disksToInclude().get(0).diskType());
        Assertions.assertEquals("iyaxqvjweiwt", model.disksToInclude().get(0).diskEncryptionSetId());
        Assertions.assertEquals("kddn", model.targetAzureNetworkId());
        Assertions.assertEquals("vbooqbmdqrxy", model.targetAzureSubnetId());
        Assertions.assertEquals("ae", model.enableRdpOnTargetOption());
        Assertions.assertEquals("cflwtjdtlr", model.targetAzureVmName());
        Assertions.assertEquals("fooy", model.logStorageAccountId());
        Assertions.assertEquals("uxdtzcq", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("sdudgcoz", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals(DiskAccountType.STANDARD_LRS, model.diskType());
        Assertions.assertEquals("hxlantolaml", model.targetAvailabilitySetId());
        Assertions.assertEquals("juxkqll", model.targetAvailabilityZone());
        Assertions.assertEquals("i", model.targetProximityPlacementGroupId());
        Assertions.assertEquals(LicenseType.WINDOWS_SERVER, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals("ckzdqiqdlra", model.targetVmSize());
        Assertions.assertEquals("kwx", model.diskEncryptionSetId());
        Assertions.assertEquals("wxsuy", model.targetVmTags().get("znhrf"));
        Assertions.assertEquals("dccxbeuuqu", model.seedManagedDiskTags().get("kzwtjwwguzytij"));
        Assertions.assertEquals("catuqbhpowcnx", model.targetManagedDiskTags().get("pzdlyseidtoak"));
        Assertions.assertEquals("rytgrhzbqfdpfawr", model.targetNicTags().get("tvcshtkutzcttb"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageAzureV2EnableProtectionInput model
            = new InMageAzureV2EnableProtectionInput().withMasterTargetId("yryefqm")
                .withProcessServerId("vyztxlno")
                .withStorageAccountId("pbjceegvy")
                .withRunAsAccountId("ztkutnj")
                .withMultiVmGroupId("l")
                .withMultiVmGroupName("krehyhtmj")
                .withDisksToInclude(Arrays.asList(new InMageAzureV2DiskInputDetails().withDiskId("fvulxfaryr")
                    .withLogStorageAccountId("lgdezvjqw")
                    .withDiskType(DiskAccountType.STANDARD_LRS)
                    .withDiskEncryptionSetId("iyaxqvjweiwt")))
                .withTargetAzureNetworkId("kddn")
                .withTargetAzureSubnetId("vbooqbmdqrxy")
                .withEnableRdpOnTargetOption("ae")
                .withTargetAzureVmName("cflwtjdtlr")
                .withLogStorageAccountId("fooy")
                .withTargetAzureV1ResourceGroupId("uxdtzcq")
                .withTargetAzureV2ResourceGroupId("sdudgcoz")
                .withDiskType(DiskAccountType.STANDARD_LRS)
                .withTargetAvailabilitySetId("hxlantolaml")
                .withTargetAvailabilityZone("juxkqll")
                .withTargetProximityPlacementGroupId("i")
                .withLicenseType(LicenseType.WINDOWS_SERVER)
                .withSqlServerLicenseType(SqlServerLicenseType.PAYG)
                .withTargetVmSize("ckzdqiqdlra")
                .withDiskEncryptionSetId("kwx")
                .withTargetVmTags(mapOf("znhrf", "wxsuy", "ry", "slglh", "ihuioaeo", "f", "dd", "pajtfeyvkbd"))
                .withSeedManagedDiskTags(mapOf("kzwtjwwguzytij", "dccxbeuuqu", "ndegjdydhqkkkbj", "xfn"))
                .withTargetManagedDiskTags(mapOf("pzdlyseidtoak", "catuqbhpowcnx"))
                .withTargetNicTags(mapOf("tvcshtkutzcttb", "rytgrhzbqfdpfawr", "m", "gdirda"));
        model = BinaryData.fromObject(model).toObject(InMageAzureV2EnableProtectionInput.class);
        Assertions.assertEquals("yryefqm", model.masterTargetId());
        Assertions.assertEquals("vyztxlno", model.processServerId());
        Assertions.assertEquals("pbjceegvy", model.storageAccountId());
        Assertions.assertEquals("ztkutnj", model.runAsAccountId());
        Assertions.assertEquals("l", model.multiVmGroupId());
        Assertions.assertEquals("krehyhtmj", model.multiVmGroupName());
        Assertions.assertEquals("fvulxfaryr", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("lgdezvjqw", model.disksToInclude().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.STANDARD_LRS, model.disksToInclude().get(0).diskType());
        Assertions.assertEquals("iyaxqvjweiwt", model.disksToInclude().get(0).diskEncryptionSetId());
        Assertions.assertEquals("kddn", model.targetAzureNetworkId());
        Assertions.assertEquals("vbooqbmdqrxy", model.targetAzureSubnetId());
        Assertions.assertEquals("ae", model.enableRdpOnTargetOption());
        Assertions.assertEquals("cflwtjdtlr", model.targetAzureVmName());
        Assertions.assertEquals("fooy", model.logStorageAccountId());
        Assertions.assertEquals("uxdtzcq", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("sdudgcoz", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals(DiskAccountType.STANDARD_LRS, model.diskType());
        Assertions.assertEquals("hxlantolaml", model.targetAvailabilitySetId());
        Assertions.assertEquals("juxkqll", model.targetAvailabilityZone());
        Assertions.assertEquals("i", model.targetProximityPlacementGroupId());
        Assertions.assertEquals(LicenseType.WINDOWS_SERVER, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals("ckzdqiqdlra", model.targetVmSize());
        Assertions.assertEquals("kwx", model.diskEncryptionSetId());
        Assertions.assertEquals("wxsuy", model.targetVmTags().get("znhrf"));
        Assertions.assertEquals("dccxbeuuqu", model.seedManagedDiskTags().get("kzwtjwwguzytij"));
        Assertions.assertEquals("catuqbhpowcnx", model.targetManagedDiskTags().get("pzdlyseidtoak"));
        Assertions.assertEquals("rytgrhzbqfdpfawr", model.targetNicTags().get("tvcshtkutzcttb"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
