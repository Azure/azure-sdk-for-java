// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskAccountType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageAzureV2DiskInputDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageAzureV2EnableProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class InMageAzureV2EnableProtectionInputTests {
    @Test
    public void testDeserialize() {
        InMageAzureV2EnableProtectionInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"InMageAzureV2\",\"masterTargetId\":\"tlzm\",\"processServerId\":\"syjdeolctae\",\"storageAccountId\":\"syrled\",\"runAsAccountId\":\"ustbvtqigdx\",\"multiVmGroupId\":\"sgeafgfosehx\",\"multiVmGroupName\":\"sxezppkkwaa\",\"disksToInclude\":[{\"diskId\":\"fjlpze\",\"logStorageAccountId\":\"oyrplixl\",\"diskType\":\"StandardSSD_LRS\",\"diskEncryptionSetId\":\"lpquevhamfow\"}],\"targetAzureNetworkId\":\"btmkekxpkzwaq\",\"targetAzureSubnetId\":\"fqovc\",\"enableRdpOnTargetOption\":\"qbplvfiduszte\",\"targetAzureVmName\":\"byjgmsfepx\",\"logStorageAccountId\":\"hpqadagrhrdicxdw\",\"targetAzureV1ResourceGroupId\":\"fowxwyovcxjsgbi\",\"targetAzureV2ResourceGroupId\":\"ukdveksbuhoduc\",\"diskType\":\"Premium_LRS\",\"targetAvailabilitySetId\":\"crdpibfdyjduss\",\"targetAvailabilityZone\":\"szekbh\",\"targetProximityPlacementGroupId\":\"kaaggkreh\",\"licenseType\":\"NoLicenseType\",\"sqlServerLicenseType\":\"PAYG\",\"targetVmSize\":\"bffljfiimreoag\",\"diskEncryptionSetId\":\"taadu\",\"targetVmTags\":{\"nl\":\"xxfavsqwudohzilf\"},\"seedManagedDiskTags\":{\"yqgs\":\"simsfeypofqpmb\",\"gerhsmvg\":\"rmmttjxop\"},\"targetManagedDiskTags\":{\"ilrixysf\":\"wzm\",\"uwaedrympmlqoi\":\"imsqywwwmhk\",\"ihapfjiiknjdiq\":\"hzdue\",\"bi\":\"liejhpc\"},\"targetNicTags\":{\"eivbvz\":\"sbw\"}}")
                .toObject(InMageAzureV2EnableProtectionInput.class);
        Assertions.assertEquals("tlzm", model.masterTargetId());
        Assertions.assertEquals("syjdeolctae", model.processServerId());
        Assertions.assertEquals("syrled", model.storageAccountId());
        Assertions.assertEquals("ustbvtqigdx", model.runAsAccountId());
        Assertions.assertEquals("sgeafgfosehx", model.multiVmGroupId());
        Assertions.assertEquals("sxezppkkwaa", model.multiVmGroupName());
        Assertions.assertEquals("fjlpze", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("oyrplixl", model.disksToInclude().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.STANDARD_SSD_LRS, model.disksToInclude().get(0).diskType());
        Assertions.assertEquals("lpquevhamfow", model.disksToInclude().get(0).diskEncryptionSetId());
        Assertions.assertEquals("btmkekxpkzwaq", model.targetAzureNetworkId());
        Assertions.assertEquals("fqovc", model.targetAzureSubnetId());
        Assertions.assertEquals("qbplvfiduszte", model.enableRdpOnTargetOption());
        Assertions.assertEquals("byjgmsfepx", model.targetAzureVmName());
        Assertions.assertEquals("hpqadagrhrdicxdw", model.logStorageAccountId());
        Assertions.assertEquals("fowxwyovcxjsgbi", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("ukdveksbuhoduc", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_LRS, model.diskType());
        Assertions.assertEquals("crdpibfdyjduss", model.targetAvailabilitySetId());
        Assertions.assertEquals("szekbh", model.targetAvailabilityZone());
        Assertions.assertEquals("kaaggkreh", model.targetProximityPlacementGroupId());
        Assertions.assertEquals(LicenseType.NO_LICENSE_TYPE, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals("bffljfiimreoag", model.targetVmSize());
        Assertions.assertEquals("taadu", model.diskEncryptionSetId());
        Assertions.assertEquals("xxfavsqwudohzilf", model.targetVmTags().get("nl"));
        Assertions.assertEquals("simsfeypofqpmb", model.seedManagedDiskTags().get("yqgs"));
        Assertions.assertEquals("wzm", model.targetManagedDiskTags().get("ilrixysf"));
        Assertions.assertEquals("sbw", model.targetNicTags().get("eivbvz"));
    }

    @Test
    public void testSerialize() {
        InMageAzureV2EnableProtectionInput model =
            new InMageAzureV2EnableProtectionInput()
                .withMasterTargetId("tlzm")
                .withProcessServerId("syjdeolctae")
                .withStorageAccountId("syrled")
                .withRunAsAccountId("ustbvtqigdx")
                .withMultiVmGroupId("sgeafgfosehx")
                .withMultiVmGroupName("sxezppkkwaa")
                .withDisksToInclude(
                    Arrays
                        .asList(
                            new InMageAzureV2DiskInputDetails()
                                .withDiskId("fjlpze")
                                .withLogStorageAccountId("oyrplixl")
                                .withDiskType(DiskAccountType.STANDARD_SSD_LRS)
                                .withDiskEncryptionSetId("lpquevhamfow")))
                .withTargetAzureNetworkId("btmkekxpkzwaq")
                .withTargetAzureSubnetId("fqovc")
                .withEnableRdpOnTargetOption("qbplvfiduszte")
                .withTargetAzureVmName("byjgmsfepx")
                .withLogStorageAccountId("hpqadagrhrdicxdw")
                .withTargetAzureV1ResourceGroupId("fowxwyovcxjsgbi")
                .withTargetAzureV2ResourceGroupId("ukdveksbuhoduc")
                .withDiskType(DiskAccountType.PREMIUM_LRS)
                .withTargetAvailabilitySetId("crdpibfdyjduss")
                .withTargetAvailabilityZone("szekbh")
                .withTargetProximityPlacementGroupId("kaaggkreh")
                .withLicenseType(LicenseType.NO_LICENSE_TYPE)
                .withSqlServerLicenseType(SqlServerLicenseType.PAYG)
                .withTargetVmSize("bffljfiimreoag")
                .withDiskEncryptionSetId("taadu")
                .withTargetVmTags(mapOf("nl", "xxfavsqwudohzilf"))
                .withSeedManagedDiskTags(mapOf("yqgs", "simsfeypofqpmb", "gerhsmvg", "rmmttjxop"))
                .withTargetManagedDiskTags(
                    mapOf(
                        "ilrixysf", "wzm", "uwaedrympmlqoi", "imsqywwwmhk", "ihapfjiiknjdiq", "hzdue", "bi", "liejhpc"))
                .withTargetNicTags(mapOf("eivbvz", "sbw"));
        model = BinaryData.fromObject(model).toObject(InMageAzureV2EnableProtectionInput.class);
        Assertions.assertEquals("tlzm", model.masterTargetId());
        Assertions.assertEquals("syjdeolctae", model.processServerId());
        Assertions.assertEquals("syrled", model.storageAccountId());
        Assertions.assertEquals("ustbvtqigdx", model.runAsAccountId());
        Assertions.assertEquals("sgeafgfosehx", model.multiVmGroupId());
        Assertions.assertEquals("sxezppkkwaa", model.multiVmGroupName());
        Assertions.assertEquals("fjlpze", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("oyrplixl", model.disksToInclude().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.STANDARD_SSD_LRS, model.disksToInclude().get(0).diskType());
        Assertions.assertEquals("lpquevhamfow", model.disksToInclude().get(0).diskEncryptionSetId());
        Assertions.assertEquals("btmkekxpkzwaq", model.targetAzureNetworkId());
        Assertions.assertEquals("fqovc", model.targetAzureSubnetId());
        Assertions.assertEquals("qbplvfiduszte", model.enableRdpOnTargetOption());
        Assertions.assertEquals("byjgmsfepx", model.targetAzureVmName());
        Assertions.assertEquals("hpqadagrhrdicxdw", model.logStorageAccountId());
        Assertions.assertEquals("fowxwyovcxjsgbi", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("ukdveksbuhoduc", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_LRS, model.diskType());
        Assertions.assertEquals("crdpibfdyjduss", model.targetAvailabilitySetId());
        Assertions.assertEquals("szekbh", model.targetAvailabilityZone());
        Assertions.assertEquals("kaaggkreh", model.targetProximityPlacementGroupId());
        Assertions.assertEquals(LicenseType.NO_LICENSE_TYPE, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals("bffljfiimreoag", model.targetVmSize());
        Assertions.assertEquals("taadu", model.diskEncryptionSetId());
        Assertions.assertEquals("xxfavsqwudohzilf", model.targetVmTags().get("nl"));
        Assertions.assertEquals("simsfeypofqpmb", model.seedManagedDiskTags().get("yqgs"));
        Assertions.assertEquals("wzm", model.targetManagedDiskTags().get("ilrixysf"));
        Assertions.assertEquals("sbw", model.targetNicTags().get("eivbvz"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
