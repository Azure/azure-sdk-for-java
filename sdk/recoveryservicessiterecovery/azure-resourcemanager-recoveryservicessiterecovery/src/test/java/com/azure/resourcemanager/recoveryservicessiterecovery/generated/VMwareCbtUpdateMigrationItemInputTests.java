// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LinuxLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VMwareCbtNicInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VMwareCbtUpdateDiskInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VMwareCbtUpdateMigrationItemInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VMwareCbtUpdateMigrationItemInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMwareCbtUpdateMigrationItemInput model = BinaryData.fromString(
            "{\"instanceType\":\"VMwareCbt\",\"targetVmName\":\"nnepkwzzzku\",\"targetVmSize\":\"uwcjomip\",\"targetResourceGroupId\":\"kaujttwykoxv\",\"targetAvailabilitySetId\":\"ofxxdplrelfk\",\"targetAvailabilityZone\":\"ahcbtuxlbp\",\"targetProximityPlacementGroupId\":\"hrfjenrazwefiktl\",\"targetBootDiagnosticsStorageAccountId\":\"ashtostjixyzseci\",\"targetNetworkId\":\"zdwjtacfvvtdpcbp\",\"testNetworkId\":\"omcsaugbrhfiwltk\",\"vmNics\":[{\"nicId\":\"untethklxwh\",\"isPrimaryNic\":\"vasyyhgqok\",\"targetSubnetName\":\"msrkixyxxhwrlq\",\"targetStaticIPAddress\":\"aqsy\",\"isSelectedForMigration\":\"pzzbrwn\",\"targetNicName\":\"ozsxagyso\",\"testSubnetName\":\"iiksybvrrbnhyl\",\"testStaticIPAddress\":\"hujc\"}],\"vmDisks\":[{\"diskId\":\"llmxvpstiz\",\"targetDiskName\":\"qag\",\"isOSDisk\":\"lcbrvaidylky\"}],\"licenseType\":\"NotSpecified\",\"sqlServerLicenseType\":\"PAYG\",\"linuxLicenseType\":\"NotSpecified\",\"userSelectedOSName\":\"ybptmjjrnogykug\",\"performAutoResync\":\"avsavgthkslgeuuf\",\"targetVmTags\":{\"lajybdnb\":\"bfbxj\"},\"targetDiskTags\":{\"zdjmofsvpzxgny\":\"btois\",\"fj\":\"xuym\",\"qregfurdpagknx\":\"mgwtmszcfyzqp\"},\"targetNicTags\":{\"zffewvqkyc\":\"vrgihl\",\"tydsmm\":\"cgeipqxxsdyaf\"}}")
            .toObject(VMwareCbtUpdateMigrationItemInput.class);
        Assertions.assertEquals("nnepkwzzzku", model.targetVmName());
        Assertions.assertEquals("uwcjomip", model.targetVmSize());
        Assertions.assertEquals("kaujttwykoxv", model.targetResourceGroupId());
        Assertions.assertEquals("ofxxdplrelfk", model.targetAvailabilitySetId());
        Assertions.assertEquals("ahcbtuxlbp", model.targetAvailabilityZone());
        Assertions.assertEquals("hrfjenrazwefiktl", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("ashtostjixyzseci", model.targetBootDiagnosticsStorageAccountId());
        Assertions.assertEquals("zdwjtacfvvtdpcbp", model.targetNetworkId());
        Assertions.assertEquals("omcsaugbrhfiwltk", model.testNetworkId());
        Assertions.assertEquals("untethklxwh", model.vmNics().get(0).nicId());
        Assertions.assertEquals("vasyyhgqok", model.vmNics().get(0).isPrimaryNic());
        Assertions.assertEquals("msrkixyxxhwrlq", model.vmNics().get(0).targetSubnetName());
        Assertions.assertEquals("aqsy", model.vmNics().get(0).targetStaticIpAddress());
        Assertions.assertEquals("pzzbrwn", model.vmNics().get(0).isSelectedForMigration());
        Assertions.assertEquals("ozsxagyso", model.vmNics().get(0).targetNicName());
        Assertions.assertEquals("iiksybvrrbnhyl", model.vmNics().get(0).testSubnetName());
        Assertions.assertEquals("hujc", model.vmNics().get(0).testStaticIpAddress());
        Assertions.assertEquals("llmxvpstiz", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("qag", model.vmDisks().get(0).targetDiskName());
        Assertions.assertEquals("lcbrvaidylky", model.vmDisks().get(0).isOSDisk());
        Assertions.assertEquals(LicenseType.NOT_SPECIFIED, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals(LinuxLicenseType.NOT_SPECIFIED, model.linuxLicenseType());
        Assertions.assertEquals("ybptmjjrnogykug", model.userSelectedOSName());
        Assertions.assertEquals("avsavgthkslgeuuf", model.performAutoResync());
        Assertions.assertEquals("bfbxj", model.targetVmTags().get("lajybdnb"));
        Assertions.assertEquals("btois", model.targetDiskTags().get("zdjmofsvpzxgny"));
        Assertions.assertEquals("vrgihl", model.targetNicTags().get("zffewvqkyc"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMwareCbtUpdateMigrationItemInput model
            = new VMwareCbtUpdateMigrationItemInput().withTargetVmName("nnepkwzzzku")
                .withTargetVmSize("uwcjomip")
                .withTargetResourceGroupId("kaujttwykoxv")
                .withTargetAvailabilitySetId("ofxxdplrelfk")
                .withTargetAvailabilityZone("ahcbtuxlbp")
                .withTargetProximityPlacementGroupId("hrfjenrazwefiktl")
                .withTargetBootDiagnosticsStorageAccountId("ashtostjixyzseci")
                .withTargetNetworkId("zdwjtacfvvtdpcbp")
                .withTestNetworkId("omcsaugbrhfiwltk")
                .withVmNics(Arrays.asList(new VMwareCbtNicInput().withNicId("untethklxwh")
                    .withIsPrimaryNic("vasyyhgqok")
                    .withTargetSubnetName("msrkixyxxhwrlq")
                    .withTargetStaticIpAddress("aqsy")
                    .withIsSelectedForMigration("pzzbrwn")
                    .withTargetNicName("ozsxagyso")
                    .withTestSubnetName("iiksybvrrbnhyl")
                    .withTestStaticIpAddress("hujc")))
                .withVmDisks(Arrays.asList(new VMwareCbtUpdateDiskInput().withDiskId("llmxvpstiz")
                    .withTargetDiskName("qag")
                    .withIsOSDisk("lcbrvaidylky")))
                .withLicenseType(LicenseType.NOT_SPECIFIED)
                .withSqlServerLicenseType(SqlServerLicenseType.PAYG)
                .withLinuxLicenseType(LinuxLicenseType.NOT_SPECIFIED)
                .withUserSelectedOSName("ybptmjjrnogykug")
                .withPerformAutoResync("avsavgthkslgeuuf")
                .withTargetVmTags(mapOf("lajybdnb", "bfbxj"))
                .withTargetDiskTags(mapOf("zdjmofsvpzxgny", "btois", "fj", "xuym", "qregfurdpagknx", "mgwtmszcfyzqp"))
                .withTargetNicTags(mapOf("zffewvqkyc", "vrgihl", "tydsmm", "cgeipqxxsdyaf"));
        model = BinaryData.fromObject(model).toObject(VMwareCbtUpdateMigrationItemInput.class);
        Assertions.assertEquals("nnepkwzzzku", model.targetVmName());
        Assertions.assertEquals("uwcjomip", model.targetVmSize());
        Assertions.assertEquals("kaujttwykoxv", model.targetResourceGroupId());
        Assertions.assertEquals("ofxxdplrelfk", model.targetAvailabilitySetId());
        Assertions.assertEquals("ahcbtuxlbp", model.targetAvailabilityZone());
        Assertions.assertEquals("hrfjenrazwefiktl", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("ashtostjixyzseci", model.targetBootDiagnosticsStorageAccountId());
        Assertions.assertEquals("zdwjtacfvvtdpcbp", model.targetNetworkId());
        Assertions.assertEquals("omcsaugbrhfiwltk", model.testNetworkId());
        Assertions.assertEquals("untethklxwh", model.vmNics().get(0).nicId());
        Assertions.assertEquals("vasyyhgqok", model.vmNics().get(0).isPrimaryNic());
        Assertions.assertEquals("msrkixyxxhwrlq", model.vmNics().get(0).targetSubnetName());
        Assertions.assertEquals("aqsy", model.vmNics().get(0).targetStaticIpAddress());
        Assertions.assertEquals("pzzbrwn", model.vmNics().get(0).isSelectedForMigration());
        Assertions.assertEquals("ozsxagyso", model.vmNics().get(0).targetNicName());
        Assertions.assertEquals("iiksybvrrbnhyl", model.vmNics().get(0).testSubnetName());
        Assertions.assertEquals("hujc", model.vmNics().get(0).testStaticIpAddress());
        Assertions.assertEquals("llmxvpstiz", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("qag", model.vmDisks().get(0).targetDiskName());
        Assertions.assertEquals("lcbrvaidylky", model.vmDisks().get(0).isOSDisk());
        Assertions.assertEquals(LicenseType.NOT_SPECIFIED, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals(LinuxLicenseType.NOT_SPECIFIED, model.linuxLicenseType());
        Assertions.assertEquals("ybptmjjrnogykug", model.userSelectedOSName());
        Assertions.assertEquals("avsavgthkslgeuuf", model.performAutoResync());
        Assertions.assertEquals("bfbxj", model.targetVmTags().get("lajybdnb"));
        Assertions.assertEquals("btois", model.targetDiskTags().get("zdjmofsvpzxgny"));
        Assertions.assertEquals("vrgihl", model.targetNicTags().get("zffewvqkyc"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
