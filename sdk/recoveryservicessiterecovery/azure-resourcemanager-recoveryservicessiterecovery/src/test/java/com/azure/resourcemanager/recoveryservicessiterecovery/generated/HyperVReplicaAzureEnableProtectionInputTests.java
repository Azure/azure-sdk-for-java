// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskAccountType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaAzureDiskInputDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaAzureEnableProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaAzureEnableProtectionInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaAzureEnableProtectionInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"HyperVReplicaAzure\",\"hvHostVmId\":\"fhzag\",\"vmName\":\"vhycvdimwrzregzg\",\"osType\":\"futrwpweryekzkd\",\"vhdId\":\"eotta\",\"targetStorageAccountId\":\"yos\",\"targetAzureNetworkId\":\"whnhjtfv\",\"targetAzureSubnetId\":\"dpmiljpn\",\"enableRdpOnTargetOption\":\"nudqllz\",\"targetAzureVmName\":\"uzpjlxeehux\",\"logStorageAccountId\":\"hzlraymezxlsk\",\"disksToInclude\":[\"xrfdsajre\",\"nw\"],\"targetAzureV1ResourceGroupId\":\"shtuwgm\",\"targetAzureV2ResourceGroupId\":\"uafpwzyifrk\",\"useManagedDisks\":\"ltxeqip\",\"targetAvailabilitySetId\":\"zdyi\",\"targetAvailabilityZone\":\"fayorpravkjoges\",\"licenseType\":\"WindowsServer\",\"sqlServerLicenseType\":\"AHUB\",\"targetVmSize\":\"jkwynqxaekqsykv\",\"targetProximityPlacementGroupId\":\"tqpkevmy\",\"useManagedDisksForReplication\":\"jcrspxklurcclfgx\",\"diskType\":\"StandardSSD_LRS\",\"disksToIncludeForManagedDisks\":[{\"diskId\":\"t\",\"logStorageAccountId\":\"osewxi\",\"diskType\":\"StandardSSD_LRS\",\"diskEncryptionSetId\":\"kqma\"},{\"diskId\":\"xvpif\",\"logStorageAccountId\":\"aifyzyzeyuubeids\",\"diskType\":\"StandardSSD_LRS\",\"diskEncryptionSetId\":\"toi\"}],\"diskEncryptionSetId\":\"gygvfltgvdiho\",\"targetVmTags\":{\"wkd\":\"rxwe\",\"ucpcunnuzdqumoen\":\"cy\"},\"seedManagedDiskTags\":{\"elqkaadlkn\":\"aienhqhsknd\"},\"targetManagedDiskTags\":{\"yxnu\":\"anniyopetxivcnr\",\"pat\":\"aephblkw\",\"uzqymtuowog\":\"bqsdtcjbctvi\"},\"targetNicTags\":{\"zndscxmxeatkdbmw\":\"tsqhzvbrzcdban\"}}")
                .toObject(HyperVReplicaAzureEnableProtectionInput.class);
        Assertions.assertEquals("fhzag", model.hvHostVmId());
        Assertions.assertEquals("vhycvdimwrzregzg", model.vmName());
        Assertions.assertEquals("futrwpweryekzkd", model.osType());
        Assertions.assertEquals("eotta", model.vhdId());
        Assertions.assertEquals("yos", model.targetStorageAccountId());
        Assertions.assertEquals("whnhjtfv", model.targetAzureNetworkId());
        Assertions.assertEquals("dpmiljpn", model.targetAzureSubnetId());
        Assertions.assertEquals("nudqllz", model.enableRdpOnTargetOption());
        Assertions.assertEquals("uzpjlxeehux", model.targetAzureVmName());
        Assertions.assertEquals("hzlraymezxlsk", model.logStorageAccountId());
        Assertions.assertEquals("xrfdsajre", model.disksToInclude().get(0));
        Assertions.assertEquals("shtuwgm", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("uafpwzyifrk", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals("ltxeqip", model.useManagedDisks());
        Assertions.assertEquals("zdyi", model.targetAvailabilitySetId());
        Assertions.assertEquals("fayorpravkjoges", model.targetAvailabilityZone());
        Assertions.assertEquals(LicenseType.WINDOWS_SERVER, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.AHUB, model.sqlServerLicenseType());
        Assertions.assertEquals("jkwynqxaekqsykv", model.targetVmSize());
        Assertions.assertEquals("tqpkevmy", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("jcrspxklurcclfgx", model.useManagedDisksForReplication());
        Assertions.assertEquals(DiskAccountType.STANDARD_SSD_LRS, model.diskType());
        Assertions.assertEquals("t", model.disksToIncludeForManagedDisks().get(0).diskId());
        Assertions.assertEquals("osewxi", model.disksToIncludeForManagedDisks().get(0).logStorageAccountId());
        Assertions
            .assertEquals(DiskAccountType.STANDARD_SSD_LRS, model.disksToIncludeForManagedDisks().get(0).diskType());
        Assertions.assertEquals("kqma", model.disksToIncludeForManagedDisks().get(0).diskEncryptionSetId());
        Assertions.assertEquals("gygvfltgvdiho", model.diskEncryptionSetId());
        Assertions.assertEquals("rxwe", model.targetVmTags().get("wkd"));
        Assertions.assertEquals("aienhqhsknd", model.seedManagedDiskTags().get("elqkaadlkn"));
        Assertions.assertEquals("anniyopetxivcnr", model.targetManagedDiskTags().get("yxnu"));
        Assertions.assertEquals("tsqhzvbrzcdban", model.targetNicTags().get("zndscxmxeatkdbmw"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaAzureEnableProtectionInput model =
            new HyperVReplicaAzureEnableProtectionInput()
                .withHvHostVmId("fhzag")
                .withVmName("vhycvdimwrzregzg")
                .withOsType("futrwpweryekzkd")
                .withVhdId("eotta")
                .withTargetStorageAccountId("yos")
                .withTargetAzureNetworkId("whnhjtfv")
                .withTargetAzureSubnetId("dpmiljpn")
                .withEnableRdpOnTargetOption("nudqllz")
                .withTargetAzureVmName("uzpjlxeehux")
                .withLogStorageAccountId("hzlraymezxlsk")
                .withDisksToInclude(Arrays.asList("xrfdsajre", "nw"))
                .withTargetAzureV1ResourceGroupId("shtuwgm")
                .withTargetAzureV2ResourceGroupId("uafpwzyifrk")
                .withUseManagedDisks("ltxeqip")
                .withTargetAvailabilitySetId("zdyi")
                .withTargetAvailabilityZone("fayorpravkjoges")
                .withLicenseType(LicenseType.WINDOWS_SERVER)
                .withSqlServerLicenseType(SqlServerLicenseType.AHUB)
                .withTargetVmSize("jkwynqxaekqsykv")
                .withTargetProximityPlacementGroupId("tqpkevmy")
                .withUseManagedDisksForReplication("jcrspxklurcclfgx")
                .withDiskType(DiskAccountType.STANDARD_SSD_LRS)
                .withDisksToIncludeForManagedDisks(
                    Arrays
                        .asList(
                            new HyperVReplicaAzureDiskInputDetails()
                                .withDiskId("t")
                                .withLogStorageAccountId("osewxi")
                                .withDiskType(DiskAccountType.STANDARD_SSD_LRS)
                                .withDiskEncryptionSetId("kqma"),
                            new HyperVReplicaAzureDiskInputDetails()
                                .withDiskId("xvpif")
                                .withLogStorageAccountId("aifyzyzeyuubeids")
                                .withDiskType(DiskAccountType.STANDARD_SSD_LRS)
                                .withDiskEncryptionSetId("toi")))
                .withDiskEncryptionSetId("gygvfltgvdiho")
                .withTargetVmTags(mapOf("wkd", "rxwe", "ucpcunnuzdqumoen", "cy"))
                .withSeedManagedDiskTags(mapOf("elqkaadlkn", "aienhqhsknd"))
                .withTargetManagedDiskTags(
                    mapOf("yxnu", "anniyopetxivcnr", "pat", "aephblkw", "uzqymtuowog", "bqsdtcjbctvi"))
                .withTargetNicTags(mapOf("zndscxmxeatkdbmw", "tsqhzvbrzcdban"));
        model = BinaryData.fromObject(model).toObject(HyperVReplicaAzureEnableProtectionInput.class);
        Assertions.assertEquals("fhzag", model.hvHostVmId());
        Assertions.assertEquals("vhycvdimwrzregzg", model.vmName());
        Assertions.assertEquals("futrwpweryekzkd", model.osType());
        Assertions.assertEquals("eotta", model.vhdId());
        Assertions.assertEquals("yos", model.targetStorageAccountId());
        Assertions.assertEquals("whnhjtfv", model.targetAzureNetworkId());
        Assertions.assertEquals("dpmiljpn", model.targetAzureSubnetId());
        Assertions.assertEquals("nudqllz", model.enableRdpOnTargetOption());
        Assertions.assertEquals("uzpjlxeehux", model.targetAzureVmName());
        Assertions.assertEquals("hzlraymezxlsk", model.logStorageAccountId());
        Assertions.assertEquals("xrfdsajre", model.disksToInclude().get(0));
        Assertions.assertEquals("shtuwgm", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("uafpwzyifrk", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals("ltxeqip", model.useManagedDisks());
        Assertions.assertEquals("zdyi", model.targetAvailabilitySetId());
        Assertions.assertEquals("fayorpravkjoges", model.targetAvailabilityZone());
        Assertions.assertEquals(LicenseType.WINDOWS_SERVER, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.AHUB, model.sqlServerLicenseType());
        Assertions.assertEquals("jkwynqxaekqsykv", model.targetVmSize());
        Assertions.assertEquals("tqpkevmy", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("jcrspxklurcclfgx", model.useManagedDisksForReplication());
        Assertions.assertEquals(DiskAccountType.STANDARD_SSD_LRS, model.diskType());
        Assertions.assertEquals("t", model.disksToIncludeForManagedDisks().get(0).diskId());
        Assertions.assertEquals("osewxi", model.disksToIncludeForManagedDisks().get(0).logStorageAccountId());
        Assertions
            .assertEquals(DiskAccountType.STANDARD_SSD_LRS, model.disksToIncludeForManagedDisks().get(0).diskType());
        Assertions.assertEquals("kqma", model.disksToIncludeForManagedDisks().get(0).diskEncryptionSetId());
        Assertions.assertEquals("gygvfltgvdiho", model.diskEncryptionSetId());
        Assertions.assertEquals("rxwe", model.targetVmTags().get("wkd"));
        Assertions.assertEquals("aienhqhsknd", model.seedManagedDiskTags().get("elqkaadlkn"));
        Assertions.assertEquals("anniyopetxivcnr", model.targetManagedDiskTags().get("yxnu"));
        Assertions.assertEquals("tsqhzvbrzcdban", model.targetNicTags().get("zndscxmxeatkdbmw"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
