// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskAccountType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaAzureDiskInputDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaAzureEnableProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaAzureEnableProtectionInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaAzureEnableProtectionInput model = BinaryData.fromString(
            "{\"instanceType\":\"HyperVReplicaAzure\",\"hvHostVmId\":\"adxkxeqbwpntghy\",\"vmName\":\"a\",\"osType\":\"drnxsluvlzla\",\"vhdId\":\"t\",\"targetStorageAccountId\":\"pbqhvfdqqjwkr\",\"targetAzureNetworkId\":\"zdanojis\",\"targetAzureSubnetId\":\"lmvokat\",\"enableRdpOnTargetOption\":\"tjctibpvbkaeh\",\"targetAzureVmName\":\"mzy\",\"logStorageAccountId\":\"fwakw\",\"disksToInclude\":[\"vmakxhysowljuxl\",\"bectvtfjmskdch\"],\"targetAzureV1ResourceGroupId\":\"iubavlzwpvgm\",\"targetAzureV2ResourceGroupId\":\"lkzazmgok\",\"useManagedDisks\":\"gjqafkmkrokzr\",\"targetAvailabilitySetId\":\"qetwpqrtvaozn\",\"targetAvailabilityZone\":\"ixiezeag\",\"licenseType\":\"NotSpecified\",\"sqlServerLicenseType\":\"NotSpecified\",\"targetVmSize\":\"ugedh\",\"targetProximityPlacementGroupId\":\"jstlzmblsyj\",\"useManagedDisksForReplication\":\"olctae\",\"diskType\":\"Standard_LRS\",\"disksToIncludeForManagedDisks\":[{\"diskId\":\"edjc\",\"logStorageAccountId\":\"tb\",\"diskType\":\"StandardSSD_LRS\",\"diskEncryptionSetId\":\"gdxzvsgeafgfoseh\"},{\"diskId\":\"zsxezppkkwaae\",\"logStorageAccountId\":\"yfjlpzeqto\",\"diskType\":\"Premium_LRS\",\"diskEncryptionSetId\":\"ixlajmllpquevham\"}],\"diskEncryptionSetId\":\"wg\",\"targetVmTags\":{\"qovchiqbp\":\"mkekxpkzwaqxo\"},\"seedManagedDiskTags\":{\"ztekxbyjgmsfep\":\"idu\",\"dicxdw\":\"yihpqadagrh\",\"vcxjsgbipcukdvek\":\"jfowxwy\",\"scrdp\":\"buhoduchv\"},\"targetManagedDiskTags\":{\"szekbh\":\"dyjdussp\",\"hbfrnuybfflj\":\"lkaaggkr\"},\"targetNicTags\":{\"srexxfavs\":\"mreoagsqtaad\",\"l\":\"wudohzilfm\"}}")
            .toObject(HyperVReplicaAzureEnableProtectionInput.class);
        Assertions.assertEquals("adxkxeqbwpntghy", model.hvHostVmId());
        Assertions.assertEquals("a", model.vmName());
        Assertions.assertEquals("drnxsluvlzla", model.osType());
        Assertions.assertEquals("t", model.vhdId());
        Assertions.assertEquals("pbqhvfdqqjwkr", model.targetStorageAccountId());
        Assertions.assertEquals("zdanojis", model.targetAzureNetworkId());
        Assertions.assertEquals("lmvokat", model.targetAzureSubnetId());
        Assertions.assertEquals("tjctibpvbkaeh", model.enableRdpOnTargetOption());
        Assertions.assertEquals("mzy", model.targetAzureVmName());
        Assertions.assertEquals("fwakw", model.logStorageAccountId());
        Assertions.assertEquals("vmakxhysowljuxl", model.disksToInclude().get(0));
        Assertions.assertEquals("iubavlzwpvgm", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("lkzazmgok", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals("gjqafkmkrokzr", model.useManagedDisks());
        Assertions.assertEquals("qetwpqrtvaozn", model.targetAvailabilitySetId());
        Assertions.assertEquals("ixiezeag", model.targetAvailabilityZone());
        Assertions.assertEquals(LicenseType.NOT_SPECIFIED, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals("ugedh", model.targetVmSize());
        Assertions.assertEquals("jstlzmblsyj", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("olctae", model.useManagedDisksForReplication());
        Assertions.assertEquals(DiskAccountType.STANDARD_LRS, model.diskType());
        Assertions.assertEquals("edjc", model.disksToIncludeForManagedDisks().get(0).diskId());
        Assertions.assertEquals("tb", model.disksToIncludeForManagedDisks().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.STANDARD_SSD_LRS,
            model.disksToIncludeForManagedDisks().get(0).diskType());
        Assertions.assertEquals("gdxzvsgeafgfoseh", model.disksToIncludeForManagedDisks().get(0).diskEncryptionSetId());
        Assertions.assertEquals("wg", model.diskEncryptionSetId());
        Assertions.assertEquals("mkekxpkzwaqxo", model.targetVmTags().get("qovchiqbp"));
        Assertions.assertEquals("idu", model.seedManagedDiskTags().get("ztekxbyjgmsfep"));
        Assertions.assertEquals("dyjdussp", model.targetManagedDiskTags().get("szekbh"));
        Assertions.assertEquals("mreoagsqtaad", model.targetNicTags().get("srexxfavs"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaAzureEnableProtectionInput model
            = new HyperVReplicaAzureEnableProtectionInput().withHvHostVmId("adxkxeqbwpntghy").withVmName("a")
                .withOsType("drnxsluvlzla").withVhdId("t").withTargetStorageAccountId("pbqhvfdqqjwkr")
                .withTargetAzureNetworkId("zdanojis").withTargetAzureSubnetId("lmvokat")
                .withEnableRdpOnTargetOption("tjctibpvbkaeh").withTargetAzureVmName("mzy")
                .withLogStorageAccountId("fwakw").withDisksToInclude(Arrays.asList("vmakxhysowljuxl", "bectvtfjmskdch"))
                .withTargetAzureV1ResourceGroupId("iubavlzwpvgm").withTargetAzureV2ResourceGroupId("lkzazmgok")
                .withUseManagedDisks("gjqafkmkrokzr").withTargetAvailabilitySetId("qetwpqrtvaozn")
                .withTargetAvailabilityZone("ixiezeag").withLicenseType(LicenseType.NOT_SPECIFIED)
                .withSqlServerLicenseType(SqlServerLicenseType.NOT_SPECIFIED).withTargetVmSize("ugedh")
                .withTargetProximityPlacementGroupId("jstlzmblsyj").withUseManagedDisksForReplication("olctae")
                .withDiskType(DiskAccountType.STANDARD_LRS)
                .withDisksToIncludeForManagedDisks(Arrays.asList(
                    new HyperVReplicaAzureDiskInputDetails().withDiskId("edjc").withLogStorageAccountId("tb")
                        .withDiskType(DiskAccountType.STANDARD_SSD_LRS).withDiskEncryptionSetId("gdxzvsgeafgfoseh"),
                    new HyperVReplicaAzureDiskInputDetails().withDiskId("zsxezppkkwaae")
                        .withLogStorageAccountId("yfjlpzeqto").withDiskType(DiskAccountType.PREMIUM_LRS)
                        .withDiskEncryptionSetId("ixlajmllpquevham")))
                .withDiskEncryptionSetId("wg").withTargetVmTags(mapOf("qovchiqbp", "mkekxpkzwaqxo"))
                .withSeedManagedDiskTags(mapOf("ztekxbyjgmsfep", "idu", "dicxdw", "yihpqadagrh", "vcxjsgbipcukdvek",
                    "jfowxwy", "scrdp", "buhoduchv"))
                .withTargetManagedDiskTags(mapOf("szekbh", "dyjdussp", "hbfrnuybfflj", "lkaaggkr"))
                .withTargetNicTags(mapOf("srexxfavs", "mreoagsqtaad", "l", "wudohzilfm"));
        model = BinaryData.fromObject(model).toObject(HyperVReplicaAzureEnableProtectionInput.class);
        Assertions.assertEquals("adxkxeqbwpntghy", model.hvHostVmId());
        Assertions.assertEquals("a", model.vmName());
        Assertions.assertEquals("drnxsluvlzla", model.osType());
        Assertions.assertEquals("t", model.vhdId());
        Assertions.assertEquals("pbqhvfdqqjwkr", model.targetStorageAccountId());
        Assertions.assertEquals("zdanojis", model.targetAzureNetworkId());
        Assertions.assertEquals("lmvokat", model.targetAzureSubnetId());
        Assertions.assertEquals("tjctibpvbkaeh", model.enableRdpOnTargetOption());
        Assertions.assertEquals("mzy", model.targetAzureVmName());
        Assertions.assertEquals("fwakw", model.logStorageAccountId());
        Assertions.assertEquals("vmakxhysowljuxl", model.disksToInclude().get(0));
        Assertions.assertEquals("iubavlzwpvgm", model.targetAzureV1ResourceGroupId());
        Assertions.assertEquals("lkzazmgok", model.targetAzureV2ResourceGroupId());
        Assertions.assertEquals("gjqafkmkrokzr", model.useManagedDisks());
        Assertions.assertEquals("qetwpqrtvaozn", model.targetAvailabilitySetId());
        Assertions.assertEquals("ixiezeag", model.targetAvailabilityZone());
        Assertions.assertEquals(LicenseType.NOT_SPECIFIED, model.licenseType());
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals("ugedh", model.targetVmSize());
        Assertions.assertEquals("jstlzmblsyj", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("olctae", model.useManagedDisksForReplication());
        Assertions.assertEquals(DiskAccountType.STANDARD_LRS, model.diskType());
        Assertions.assertEquals("edjc", model.disksToIncludeForManagedDisks().get(0).diskId());
        Assertions.assertEquals("tb", model.disksToIncludeForManagedDisks().get(0).logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.STANDARD_SSD_LRS,
            model.disksToIncludeForManagedDisks().get(0).diskType());
        Assertions.assertEquals("gdxzvsgeafgfoseh", model.disksToIncludeForManagedDisks().get(0).diskEncryptionSetId());
        Assertions.assertEquals("wg", model.diskEncryptionSetId());
        Assertions.assertEquals("mkekxpkzwaqxo", model.targetVmTags().get("qovchiqbp"));
        Assertions.assertEquals("idu", model.seedManagedDiskTags().get("ztekxbyjgmsfep"));
        Assertions.assertEquals("dyjdussp", model.targetManagedDiskTags().get("szekbh"));
        Assertions.assertEquals("mreoagsqtaad", model.targetNicTags().get("srexxfavs"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
