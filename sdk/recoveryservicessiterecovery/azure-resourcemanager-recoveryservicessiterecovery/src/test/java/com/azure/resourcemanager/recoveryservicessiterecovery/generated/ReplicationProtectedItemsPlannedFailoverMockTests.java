// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PlannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PlannedFailoverInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PlannedFailoverProviderSpecificFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsPlannedFailoverMockTests {
    @Test
    public void testPlannedFailover() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"sjbi\",\"protectedItemType\":\"gwviqehmdq\",\"protectableItemId\":\"olidx\",\"recoveryServicesProviderId\":\"sfvkjcimbrsvxpht\",\"primaryFabricFriendlyName\":\"hptjlrkdcyzhimm\",\"primaryFabricProvider\":\"tdtftmizuzjd\",\"recoveryFabricFriendlyName\":\"gyzcslazprkq\",\"recoveryFabricId\":\"imxpggktteagb\",\"primaryProtectionContainerFriendlyName\":\"cnqpjuytvudeylp\",\"recoveryProtectionContainerFriendlyName\":\"bkisb\",\"protectionState\":\"fmxgl\",\"protectionStateDescription\":\"dj\",\"activeLocation\":\"urfshzn\",\"testFailoverState\":\"ttuhaaax\",\"testFailoverStateDescription\":\"c\",\"switchProviderState\":\"mdkqtxfrm\",\"switchProviderStateDescription\":\"cxstowageh\",\"allowedOperations\":[\"hwesrtja\"],\"replicationHealth\":\"blkkncypmtevs\",\"failoverHealth\":\"aneyvae\",\"healthErrors\":[],\"policyId\":\"bnhrfbrjokjwq\",\"policyFriendlyName\":\"raq\",\"lastSuccessfulFailoverTime\":\"2021-05-27T13:34:54Z\",\"lastSuccessfulTestFailoverTime\":\"2021-10-13T00:03:05Z\",\"currentScenario\":{\"scenarioName\":\"aigazwf\",\"jobId\":\"rfd\",\"startTime\":\"2021-07-28T02:17:24Z\"},\"failoverRecoveryPointId\":\"seodtqfdrslzymqx\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"wycuhyt\",\"eventCorrelationId\":\"getfigwneqjxzi\"},\"location\":\"bjrahgdstubw\",\"id\":\"gxzss\",\"name\":\"xliqmsck\",\"type\":\"hfmdoiiyobq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .plannedFailover(
                    "sbtwskkfkuyikmx",
                    "hqsxjbjkewrig",
                    "bqtrefeclflxc",
                    "ffzw",
                    "cvdefxonztpcjpt",
                    new PlannedFailoverInput()
                        .withProperties(
                            new PlannedFailoverInputProperties()
                                .withFailoverDirection("qrcjqpzjvnpjr")
                                .withProviderSpecificDetails(new PlannedFailoverProviderSpecificFailoverInput())),
                    Context.NONE);

        Assertions.assertEquals("sjbi", response.properties().friendlyName());
        Assertions.assertEquals("gwviqehmdq", response.properties().protectedItemType());
        Assertions.assertEquals("olidx", response.properties().protectableItemId());
        Assertions.assertEquals("sfvkjcimbrsvxpht", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("hptjlrkdcyzhimm", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("tdtftmizuzjd", response.properties().primaryFabricProvider());
        Assertions.assertEquals("gyzcslazprkq", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("imxpggktteagb", response.properties().recoveryFabricId());
        Assertions.assertEquals("cnqpjuytvudeylp", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("bkisb", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("fmxgl", response.properties().protectionState());
        Assertions.assertEquals("dj", response.properties().protectionStateDescription());
        Assertions.assertEquals("urfshzn", response.properties().activeLocation());
        Assertions.assertEquals("ttuhaaax", response.properties().testFailoverState());
        Assertions.assertEquals("c", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("mdkqtxfrm", response.properties().switchProviderState());
        Assertions.assertEquals("cxstowageh", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("hwesrtja", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("blkkncypmtevs", response.properties().replicationHealth());
        Assertions.assertEquals("aneyvae", response.properties().failoverHealth());
        Assertions.assertEquals("bnhrfbrjokjwq", response.properties().policyId());
        Assertions.assertEquals("raq", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-27T13:34:54Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-13T00:03:05Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("aigazwf", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("rfd", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-28T02:17:24Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("seodtqfdrslzymqx", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("wycuhyt", response.properties().recoveryContainerId());
        Assertions.assertEquals("getfigwneqjxzi", response.properties().eventCorrelationId());
        Assertions.assertEquals("bjrahgdstubw", response.location());
    }
}
