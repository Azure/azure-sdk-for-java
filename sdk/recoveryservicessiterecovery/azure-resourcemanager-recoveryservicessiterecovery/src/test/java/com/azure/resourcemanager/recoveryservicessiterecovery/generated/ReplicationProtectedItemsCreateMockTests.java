// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.EnableProtectionInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.EnableProtectionProviderSpecificInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"dnuehxwltssjdywb\",\"protectedItemType\":\"lgerxactsawvxci\",\"protectableItemId\":\"thjrmplzmsl\",\"recoveryServicesProviderId\":\"nkn\",\"primaryFabricFriendlyName\":\"uysjhvrr\",\"primaryFabricProvider\":\"fswarmybw\",\"recoveryFabricFriendlyName\":\"otgeysyqnipe\",\"recoveryFabricId\":\"wwcbfnxiaj\",\"primaryProtectionContainerFriendlyName\":\"jucfj\",\"recoveryProtectionContainerFriendlyName\":\"osfzlnraxnfyzgua\",\"protectionState\":\"hvjixgo\",\"protectionStateDescription\":\"dqwsjmihuvrqp\",\"activeLocation\":\"do\",\"testFailoverState\":\"qpkntlydpr\",\"testFailoverStateDescription\":\"nsbmzjritukoym\",\"switchProviderState\":\"f\",\"switchProviderStateDescription\":\"m\",\"allowedOperations\":[\"jxwjoqfzwanduhdu\",\"dvolxtqmricdsf\"],\"replicationHealth\":\"bkiumjf\",\"failoverHealth\":\"xedrmr\",\"healthErrors\":[],\"policyId\":\"chvvoyiogbntnwz\",\"policyFriendlyName\":\"zsoowxcsmxtlcapp\",\"lastSuccessfulFailoverTime\":\"2021-09-01T02:32:31Z\",\"lastSuccessfulTestFailoverTime\":\"2020-12-22T06:10:50Z\",\"currentScenario\":{\"scenarioName\":\"ciryomhkdwu\",\"jobId\":\"dupbkmzkwhjjsqw\",\"startTime\":\"2021-04-18T01:29:16Z\"},\"failoverRecoveryPointId\":\"efvvkxdb\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"vaqycdzdobuesd\",\"eventCorrelationId\":\"fxnzp\"},\"location\":\"fupktw\",\"id\":\"dpsegivytabvbbk\",\"name\":\"lewgsltut\",\"type\":\"uvedwuuqbmen\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .define("blsplzdss")
                .withExistingReplicationProtectionContainer("si", "hedmm", "oneeyrxpa", "xtzayqwddig")
                .withProperties(
                    new EnableProtectionInputProperties()
                        .withPolicyId("vee")
                        .withProtectableItemId("bjkj")
                        .withProviderSpecificDetails(new EnableProtectionProviderSpecificInput()))
                .create();

        Assertions.assertEquals("dnuehxwltssjdywb", response.properties().friendlyName());
        Assertions.assertEquals("lgerxactsawvxci", response.properties().protectedItemType());
        Assertions.assertEquals("thjrmplzmsl", response.properties().protectableItemId());
        Assertions.assertEquals("nkn", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("uysjhvrr", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("fswarmybw", response.properties().primaryFabricProvider());
        Assertions.assertEquals("otgeysyqnipe", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("wwcbfnxiaj", response.properties().recoveryFabricId());
        Assertions.assertEquals("jucfj", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("osfzlnraxnfyzgua", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("hvjixgo", response.properties().protectionState());
        Assertions.assertEquals("dqwsjmihuvrqp", response.properties().protectionStateDescription());
        Assertions.assertEquals("do", response.properties().activeLocation());
        Assertions.assertEquals("qpkntlydpr", response.properties().testFailoverState());
        Assertions.assertEquals("nsbmzjritukoym", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("f", response.properties().switchProviderState());
        Assertions.assertEquals("m", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("jxwjoqfzwanduhdu", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("bkiumjf", response.properties().replicationHealth());
        Assertions.assertEquals("xedrmr", response.properties().failoverHealth());
        Assertions.assertEquals("chvvoyiogbntnwz", response.properties().policyId());
        Assertions.assertEquals("zsoowxcsmxtlcapp", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-01T02:32:31Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2020-12-22T06:10:50Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("ciryomhkdwu", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("dupbkmzkwhjjsqw", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-18T01:29:16Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("efvvkxdb", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("vaqycdzdobuesd", response.properties().recoveryContainerId());
        Assertions.assertEquals("fxnzp", response.properties().eventCorrelationId());
        Assertions.assertEquals("fupktw", response.location());
    }
}
