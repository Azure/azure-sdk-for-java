// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaBasePolicyDetails;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaBasePolicyDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaBasePolicyDetails model = BinaryData.fromString(
            "{\"instanceType\":\"HyperVReplicaBasePolicyDetails\",\"recoveryPoints\":138620748,\"applicationConsistentSnapshotFrequencyInHours\":1936300582,\"compression\":\"wetjtdrhutf\",\"initialReplicationMethod\":\"a\",\"onlineReplicationStartTime\":\"xopgehpadkmd\",\"offlineReplicationImportPath\":\"sszxvctkbbxuh\",\"offlineReplicationExportPath\":\"lsi\",\"replicationPort\":815863959,\"allowedAuthenticationType\":1249706984,\"replicaDeletionOption\":\"bvoyng\"}")
            .toObject(HyperVReplicaBasePolicyDetails.class);
        Assertions.assertEquals(138620748, model.recoveryPoints());
        Assertions.assertEquals(1936300582, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("wetjtdrhutf", model.compression());
        Assertions.assertEquals("a", model.initialReplicationMethod());
        Assertions.assertEquals("xopgehpadkmd", model.onlineReplicationStartTime());
        Assertions.assertEquals("sszxvctkbbxuh", model.offlineReplicationImportPath());
        Assertions.assertEquals("lsi", model.offlineReplicationExportPath());
        Assertions.assertEquals(815863959, model.replicationPort());
        Assertions.assertEquals(1249706984, model.allowedAuthenticationType());
        Assertions.assertEquals("bvoyng", model.replicaDeletionOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaBasePolicyDetails model = new HyperVReplicaBasePolicyDetails().withRecoveryPoints(138620748)
            .withApplicationConsistentSnapshotFrequencyInHours(1936300582)
            .withCompression("wetjtdrhutf")
            .withInitialReplicationMethod("a")
            .withOnlineReplicationStartTime("xopgehpadkmd")
            .withOfflineReplicationImportPath("sszxvctkbbxuh")
            .withOfflineReplicationExportPath("lsi")
            .withReplicationPort(815863959)
            .withAllowedAuthenticationType(1249706984)
            .withReplicaDeletionOption("bvoyng");
        model = BinaryData.fromObject(model).toObject(HyperVReplicaBasePolicyDetails.class);
        Assertions.assertEquals(138620748, model.recoveryPoints());
        Assertions.assertEquals(1936300582, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("wetjtdrhutf", model.compression());
        Assertions.assertEquals("a", model.initialReplicationMethod());
        Assertions.assertEquals("xopgehpadkmd", model.onlineReplicationStartTime());
        Assertions.assertEquals("sszxvctkbbxuh", model.offlineReplicationImportPath());
        Assertions.assertEquals("lsi", model.offlineReplicationExportPath());
        Assertions.assertEquals(815863959, model.replicationPort());
        Assertions.assertEquals(1249706984, model.allowedAuthenticationType());
        Assertions.assertEquals("bvoyng", model.replicaDeletionOption());
    }
}
