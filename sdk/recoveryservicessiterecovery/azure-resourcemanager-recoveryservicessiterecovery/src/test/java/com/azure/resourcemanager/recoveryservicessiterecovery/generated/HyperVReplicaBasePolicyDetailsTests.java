// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaBasePolicyDetails;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaBasePolicyDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaBasePolicyDetails model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"HyperVReplicaBasePolicyDetails\",\"recoveryPoints\":543709562,\"applicationConsistentSnapshotFrequencyInHours\":848455814,\"compression\":\"ckze\",\"initialReplicationMethod\":\"xak\",\"onlineReplicationStartTime\":\"ywymxgaabj\",\"offlineReplicationImportPath\":\"tfohf\",\"offlineReplicationExportPath\":\"gzvkiwrsiwdyj\",\"replicationPort\":1777315141,\"allowedAuthenticationType\":980511476,\"replicaDeletionOption\":\"rra\"}")
                .toObject(HyperVReplicaBasePolicyDetails.class);
        Assertions.assertEquals(543709562, model.recoveryPoints());
        Assertions.assertEquals(848455814, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("ckze", model.compression());
        Assertions.assertEquals("xak", model.initialReplicationMethod());
        Assertions.assertEquals("ywymxgaabj", model.onlineReplicationStartTime());
        Assertions.assertEquals("tfohf", model.offlineReplicationImportPath());
        Assertions.assertEquals("gzvkiwrsiwdyj", model.offlineReplicationExportPath());
        Assertions.assertEquals(1777315141, model.replicationPort());
        Assertions.assertEquals(980511476, model.allowedAuthenticationType());
        Assertions.assertEquals("rra", model.replicaDeletionOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaBasePolicyDetails model =
            new HyperVReplicaBasePolicyDetails()
                .withRecoveryPoints(543709562)
                .withApplicationConsistentSnapshotFrequencyInHours(848455814)
                .withCompression("ckze")
                .withInitialReplicationMethod("xak")
                .withOnlineReplicationStartTime("ywymxgaabj")
                .withOfflineReplicationImportPath("tfohf")
                .withOfflineReplicationExportPath("gzvkiwrsiwdyj")
                .withReplicationPort(1777315141)
                .withAllowedAuthenticationType(980511476)
                .withReplicaDeletionOption("rra");
        model = BinaryData.fromObject(model).toObject(HyperVReplicaBasePolicyDetails.class);
        Assertions.assertEquals(543709562, model.recoveryPoints());
        Assertions.assertEquals(848455814, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("ckze", model.compression());
        Assertions.assertEquals("xak", model.initialReplicationMethod());
        Assertions.assertEquals("ywymxgaabj", model.onlineReplicationStartTime());
        Assertions.assertEquals("tfohf", model.offlineReplicationImportPath());
        Assertions.assertEquals("gzvkiwrsiwdyj", model.offlineReplicationExportPath());
        Assertions.assertEquals(1777315141, model.replicationPort());
        Assertions.assertEquals(980511476, model.allowedAuthenticationType());
        Assertions.assertEquals("rra", model.replicaDeletionOption());
    }
}
