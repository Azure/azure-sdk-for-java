// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.JobInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobCollection;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobCollectionTests {
    @Test
    public void testDeserialize() {
        JobCollection model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"activityId\":\"dgh\",\"scenarioName\":\"euutlwxezwzh\",\"friendlyName\":\"vbwnhhtq\",\"state\":\"ehgpp\",\"stateDescription\":\"ifhpf\",\"tasks\":[],\"errors\":[],\"startTime\":\"2021-06-21T01:53:23Z\",\"endTime\":\"2021-07-22T11:56:16Z\",\"allowedActions\":[],\"targetObjectId\":\"xjcsheafidltu\",\"targetObjectName\":\"resmkssjhoiftxfk\",\"targetInstanceType\":\"egprhptil\"},\"location\":\"biqtgdq\",\"id\":\"hm\",\"name\":\"wsldrizetpwbr\",\"type\":\"lllibph\"},{\"properties\":{\"activityId\":\"mizak\",\"scenarioName\":\"ankjpdnjzh\",\"friendlyName\":\"oylhjlmuoyxprimr\",\"state\":\"pteecjme\",\"stateDescription\":\"ls\",\"tasks\":[],\"errors\":[],\"startTime\":\"2021-10-17T18:13:46Z\",\"endTime\":\"2021-09-18T17:37:15Z\",\"allowedActions\":[],\"targetObjectId\":\"zaum\",\"targetObjectName\":\"oohgu\",\"targetInstanceType\":\"uzboyjathw\"},\"location\":\"lbaemwmdxmeb\",\"id\":\"jscjpahl\",\"name\":\"veabfqxnmwmqtib\",\"type\":\"yijddtvqcttad\"},{\"properties\":{\"activityId\":\"eukmr\",\"scenarioName\":\"eekpndz\",\"friendlyName\":\"pmudqmeqwig\",\"state\":\"bu\",\"stateDescription\":\"wyxebeybpmzz\",\"tasks\":[],\"errors\":[],\"startTime\":\"2021-06-08T10:06:39Z\",\"endTime\":\"2021-05-11T12:32:46Z\",\"allowedActions\":[],\"targetObjectId\":\"tmhheioqa\",\"targetObjectName\":\"v\",\"targetInstanceType\":\"ufuqyrx\"},\"location\":\"cgq\",\"id\":\"sismjqfrddga\",\"name\":\"quhiosrsjuivf\",\"type\":\"disyirnxz\"}],\"nextLink\":\"zexrxzbujrt\"}")
                .toObject(JobCollection.class);
        Assertions.assertEquals("dgh", model.value().get(0).properties().activityId());
        Assertions.assertEquals("euutlwxezwzh", model.value().get(0).properties().scenarioName());
        Assertions.assertEquals("vbwnhhtq", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("ehgpp", model.value().get(0).properties().state());
        Assertions.assertEquals("ifhpf", model.value().get(0).properties().stateDescription());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-21T01:53:23Z"), model.value().get(0).properties().startTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-22T11:56:16Z"), model.value().get(0).properties().endTime());
        Assertions.assertEquals("xjcsheafidltu", model.value().get(0).properties().targetObjectId());
        Assertions.assertEquals("resmkssjhoiftxfk", model.value().get(0).properties().targetObjectName());
        Assertions.assertEquals("egprhptil", model.value().get(0).properties().targetInstanceType());
        Assertions.assertEquals("biqtgdq", model.value().get(0).location());
        Assertions.assertEquals("zexrxzbujrt", model.nextLink());
    }

    @Test
    public void testSerialize() {
        JobCollection model =
            new JobCollection()
                .withValue(
                    Arrays
                        .asList(
                            new JobInner()
                                .withProperties(
                                    new JobProperties()
                                        .withActivityId("dgh")
                                        .withScenarioName("euutlwxezwzh")
                                        .withFriendlyName("vbwnhhtq")
                                        .withState("ehgpp")
                                        .withStateDescription("ifhpf")
                                        .withTasks(Arrays.asList())
                                        .withErrors(Arrays.asList())
                                        .withStartTime(OffsetDateTime.parse("2021-06-21T01:53:23Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-07-22T11:56:16Z"))
                                        .withAllowedActions(Arrays.asList())
                                        .withTargetObjectId("xjcsheafidltu")
                                        .withTargetObjectName("resmkssjhoiftxfk")
                                        .withTargetInstanceType("egprhptil"))
                                .withLocation("biqtgdq"),
                            new JobInner()
                                .withProperties(
                                    new JobProperties()
                                        .withActivityId("mizak")
                                        .withScenarioName("ankjpdnjzh")
                                        .withFriendlyName("oylhjlmuoyxprimr")
                                        .withState("pteecjme")
                                        .withStateDescription("ls")
                                        .withTasks(Arrays.asList())
                                        .withErrors(Arrays.asList())
                                        .withStartTime(OffsetDateTime.parse("2021-10-17T18:13:46Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-09-18T17:37:15Z"))
                                        .withAllowedActions(Arrays.asList())
                                        .withTargetObjectId("zaum")
                                        .withTargetObjectName("oohgu")
                                        .withTargetInstanceType("uzboyjathw"))
                                .withLocation("lbaemwmdxmeb"),
                            new JobInner()
                                .withProperties(
                                    new JobProperties()
                                        .withActivityId("eukmr")
                                        .withScenarioName("eekpndz")
                                        .withFriendlyName("pmudqmeqwig")
                                        .withState("bu")
                                        .withStateDescription("wyxebeybpmzz")
                                        .withTasks(Arrays.asList())
                                        .withErrors(Arrays.asList())
                                        .withStartTime(OffsetDateTime.parse("2021-06-08T10:06:39Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-05-11T12:32:46Z"))
                                        .withAllowedActions(Arrays.asList())
                                        .withTargetObjectId("tmhheioqa")
                                        .withTargetObjectName("v")
                                        .withTargetInstanceType("ufuqyrx"))
                                .withLocation("cgq")))
                .withNextLink("zexrxzbujrt");
        model = BinaryData.fromObject(model).toObject(JobCollection.class);
        Assertions.assertEquals("dgh", model.value().get(0).properties().activityId());
        Assertions.assertEquals("euutlwxezwzh", model.value().get(0).properties().scenarioName());
        Assertions.assertEquals("vbwnhhtq", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("ehgpp", model.value().get(0).properties().state());
        Assertions.assertEquals("ifhpf", model.value().get(0).properties().stateDescription());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-21T01:53:23Z"), model.value().get(0).properties().startTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-22T11:56:16Z"), model.value().get(0).properties().endTime());
        Assertions.assertEquals("xjcsheafidltu", model.value().get(0).properties().targetObjectId());
        Assertions.assertEquals("resmkssjhoiftxfk", model.value().get(0).properties().targetObjectName());
        Assertions.assertEquals("egprhptil", model.value().get(0).properties().targetInstanceType());
        Assertions.assertEquals("biqtgdq", model.value().get(0).location());
        Assertions.assertEquals("zexrxzbujrt", model.nextLink());
    }
}
