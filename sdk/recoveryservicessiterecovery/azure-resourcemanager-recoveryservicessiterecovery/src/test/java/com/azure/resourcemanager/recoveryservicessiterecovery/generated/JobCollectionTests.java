// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.JobInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AsrTask;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.GroupTaskDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobCollection;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobErrorDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ProviderError;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ServiceError;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TaskTypeDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"activityId\":\"jeuut\",\"scenarioName\":\"xezw\",\"friendlyName\":\"okvbwnhhtqlgehg\",\"state\":\"ipifhpfeoajvg\",\"stateDescription\":\"txjcsheafidlt\",\"tasks\":[{\"taskId\":\"esmkssjhoiftxfkf\",\"name\":\"gpr\",\"startTime\":\"2021-06-29T04:06:59Z\",\"endTime\":\"2021-04-05T10:55:26Z\",\"allowedActions\":[\"cbiqtgdqoh\"],\"friendlyName\":\"wsldrizetpwbr\",\"state\":\"llibphbqzmizak\",\"stateDescription\":\"ankjpdnjzh\",\"taskType\":\"oylhjlmuoyxprimr\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{}]}],\"errors\":[{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"islstv\",\"creationTime\":\"2021-10-17T18:13:46Z\",\"taskId\":\"wxdzaumweoohgu\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"boyjathwt\",\"creationTime\":\"2021-03-19T17:17:36Z\",\"taskId\":\"a\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"dxmeb\",\"creationTime\":\"2021-01-03T03:25:45Z\",\"taskId\":\"jpahlxvea\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"nmwmqtibx\",\"creationTime\":\"2021-03-01T23:53:32Z\",\"taskId\":\"dt\"}],\"startTime\":\"2021-11-15T06:45:30Z\",\"endTime\":\"2021-02-14T10:50:47Z\",\"allowedActions\":[\"ijaeukm\"],\"targetObjectId\":\"ieekpndzaa\",\"targetObjectName\":\"udqmeqwigpibudq\",\"targetInstanceType\":\"xebeybpmz\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"aqi\":\"ff\",\"ioqaqhvs\":\"mhh\"}}},\"location\":\"fuqyrxpdlcgqlsi\",\"id\":\"mjqfrddgamquhio\",\"name\":\"rsjuivfcdisyir\",\"type\":\"xzhczexrxz\"},{\"properties\":{\"activityId\":\"rtrhqvwrevkhgnl\",\"scenarioName\":\"onzlr\",\"friendlyName\":\"qywncvjtsz\",\"state\":\"fizehtdhgbjk\",\"stateDescription\":\"eljeamurvzmlovua\",\"tasks\":[{\"taskId\":\"cxlpmjerb\",\"name\":\"elvidizozsdbccx\",\"startTime\":\"2021-04-03T14:05:40Z\",\"endTime\":\"2021-06-04T20:01:35Z\",\"allowedActions\":[\"nwncypuuw\",\"ltv\",\"qjctzenkeif\",\"zhmkdasvflyh\"],\"friendlyName\":\"cu\",\"state\":\"hxgsrboldfor\",\"stateDescription\":\"wjlvizbfhfov\",\"taskType\":\"cqpbtuo\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{}]},{\"taskId\":\"bbelawumuaslzk\",\"name\":\"rwoycqucwyh\",\"startTime\":\"2021-12-05T11:23:21Z\",\"endTime\":\"2021-01-03T22:26:02Z\",\"allowedActions\":[\"kywuhpsvfuu\",\"utlwexxwla\",\"niexzsrzpgepq\"],\"friendlyName\":\"bb\",\"state\":\"pgdakchzyvli\",\"stateDescription\":\"nrkcxkj\",\"taskType\":\"nxm\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{},{}]},{\"taskId\":\"qrntv\",\"name\":\"ijpstte\",\"startTime\":\"2021-11-08T06:52:34Z\",\"endTime\":\"2021-02-04T20:26:02Z\",\"allowedActions\":[\"yyufmhruncuw\",\"qspkcdqzhlctd\"],\"friendlyName\":\"nqndyfpchrqbn\",\"state\":\"rcgegydcwboxjum\",\"stateDescription\":\"qoli\",\"taskType\":\"raiouaubrjtl\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{},{}]},{\"taskId\":\"jrngif\",\"name\":\"z\",\"startTime\":\"2021-09-29T00:55:24Z\",\"endTime\":\"2021-10-27T11:43:24Z\",\"allowedActions\":[\"uimzdlyjd\"],\"friendlyName\":\"wmkyoqufdvruzsl\",\"state\":\"j\",\"stateDescription\":\"ctfnmdxotng\",\"taskType\":\"gugey\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{}]}],\"errors\":[{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"absnmfpp\",\"creationTime\":\"2021-09-09T02:17:02Z\",\"taskId\":\"evy\"}],\"startTime\":\"2021-01-30T15:37:24Z\",\"endTime\":\"2021-07-27T14:52:36Z\",\"allowedActions\":[\"czbgomfgbeg\",\"qgleohibetnluank\"],\"targetObjectId\":\"fxeeebtijvacvbm\",\"targetObjectName\":\"bqqxlaj\",\"targetInstanceType\":\"wxacevehj\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"faey\":\"oafgaoql\",\"hriypoqeyhlqhy\":\"inmfgvxirp\",\"nuciqdsmexiit\":\"prlpy\",\"stgnl\":\"fuxtyasiibmiybnn\"}}},\"location\":\"nmgixh\",\"id\":\"mavmq\",\"name\":\"oudorhcgyyp\",\"type\":\"otwypundmb\"},{\"properties\":{\"activityId\":\"gcmjkavl\",\"scenarioName\":\"rb\",\"friendlyName\":\"tp\",\"state\":\"tzfjltf\",\"stateDescription\":\"zcyjtot\",\"tasks\":[{\"taskId\":\"vpbdbzqgq\",\"name\":\"hedsvqwthmkyib\",\"startTime\":\"2021-03-21T07:03:22Z\",\"endTime\":\"2021-11-13T09:58:30Z\",\"allowedActions\":[\"qcwdhoh\",\"dtmcd\",\"sufco\",\"dxbzlmcmuap\"],\"friendlyName\":\"hdbevwqqxeyskon\",\"state\":\"inkfkbgbz\",\"stateDescription\":\"wxeqocljmygvkzqk\",\"taskType\":\"eokbze\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{}]}],\"errors\":[{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"tleipqxbkw\",\"creationTime\":\"2021-04-24T16:12:29Z\",\"taskId\":\"zvd\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"ixz\",\"creationTime\":\"2021-05-22T10:48:30Z\",\"taskId\":\"odawopqhewjptmcg\"}],\"startTime\":\"2021-04-24T18:57:19Z\",\"endTime\":\"2021-03-17T12:43:28Z\",\"allowedActions\":[\"lnd\"],\"targetObjectId\":\"tutmzl\",\"targetObjectName\":\"ojlvfhrbbpneqvc\",\"targetInstanceType\":\"yyurmochpprprsnm\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"kpbz\":\"zejnhl\",\"a\":\"cpilj\",\"chndbnwie\":\"zv\"}}},\"location\":\"lewjwiuubwef\",\"id\":\"sfapaqtferrq\",\"name\":\"ex\",\"type\":\"kmfx\"}],\"nextLink\":\"jwogqqnobpudc\"}")
            .toObject(JobCollection.class);
        Assertions.assertEquals("jeuut", model.value().get(0).properties().activityId());
        Assertions.assertEquals("xezw", model.value().get(0).properties().scenarioName());
        Assertions.assertEquals("okvbwnhhtqlgehg", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("ipifhpfeoajvg", model.value().get(0).properties().state());
        Assertions.assertEquals("txjcsheafidlt", model.value().get(0).properties().stateDescription());
        Assertions.assertEquals("esmkssjhoiftxfkf", model.value().get(0).properties().tasks().get(0).taskId());
        Assertions.assertEquals("gpr", model.value().get(0).properties().tasks().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-29T04:06:59Z"),
            model.value().get(0).properties().tasks().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-05T10:55:26Z"),
            model.value().get(0).properties().tasks().get(0).endTime());
        Assertions.assertEquals("cbiqtgdqoh", model.value().get(0).properties().tasks().get(0).allowedActions().get(0));
        Assertions.assertEquals("wsldrizetpwbr", model.value().get(0).properties().tasks().get(0).friendlyName());
        Assertions.assertEquals("llibphbqzmizak", model.value().get(0).properties().tasks().get(0).state());
        Assertions.assertEquals("ankjpdnjzh", model.value().get(0).properties().tasks().get(0).stateDescription());
        Assertions.assertEquals("oylhjlmuoyxprimr", model.value().get(0).properties().tasks().get(0).taskType());
        Assertions.assertEquals("islstv", model.value().get(0).properties().errors().get(0).errorLevel());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T18:13:46Z"),
            model.value().get(0).properties().errors().get(0).creationTime());
        Assertions.assertEquals("wxdzaumweoohgu", model.value().get(0).properties().errors().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-15T06:45:30Z"),
            model.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-14T10:50:47Z"),
            model.value().get(0).properties().endTime());
        Assertions.assertEquals("ijaeukm", model.value().get(0).properties().allowedActions().get(0));
        Assertions.assertEquals("ieekpndzaa", model.value().get(0).properties().targetObjectId());
        Assertions.assertEquals("udqmeqwigpibudq", model.value().get(0).properties().targetObjectName());
        Assertions.assertEquals("xebeybpmz", model.value().get(0).properties().targetInstanceType());
        Assertions.assertEquals("ff",
            model.value().get(0).properties().customDetails().affectedObjectDetails().get("aqi"));
        Assertions.assertEquals("fuqyrxpdlcgqlsi", model.value().get(0).location());
        Assertions.assertEquals("jwogqqnobpudc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobCollection model
            = new JobCollection()
                .withValue(
                    Arrays.asList(
                        new JobInner().withProperties(new JobProperties().withActivityId("jeuut")
                            .withScenarioName("xezw").withFriendlyName("okvbwnhhtqlgehg").withState("ipifhpfeoajvg")
                            .withStateDescription("txjcsheafidlt")
                            .withTasks(Arrays.asList(new AsrTask().withTaskId("esmkssjhoiftxfkf").withName("gpr")
                                .withStartTime(OffsetDateTime.parse("2021-06-29T04:06:59Z"))
                                .withEndTime(OffsetDateTime.parse("2021-04-05T10:55:26Z"))
                                .withAllowedActions(Arrays.asList("cbiqtgdqoh")).withFriendlyName("wsldrizetpwbr")
                                .withState("llibphbqzmizak").withStateDescription("ankjpdnjzh")
                                .withTaskType("oylhjlmuoyxprimr").withCustomDetails(new TaskTypeDetails())
                                .withGroupTaskCustomDetails(new GroupTaskDetails())
                                .withErrors(Arrays.asList(new JobErrorDetails(), new JobErrorDetails()))))
                            .withErrors(Arrays.asList(
                                new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                    .withProviderErrorDetails(new ProviderError()).withErrorLevel("islstv")
                                    .withCreationTime(OffsetDateTime.parse("2021-10-17T18:13:46Z"))
                                    .withTaskId("wxdzaumweoohgu"),
                                new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                    .withProviderErrorDetails(new ProviderError()).withErrorLevel("boyjathwt")
                                    .withCreationTime(OffsetDateTime.parse("2021-03-19T17:17:36Z")).withTaskId("a"),
                                new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                    .withProviderErrorDetails(new ProviderError()).withErrorLevel("dxmeb")
                                    .withCreationTime(OffsetDateTime.parse("2021-01-03T03:25:45Z"))
                                    .withTaskId("jpahlxvea"),
                                new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                    .withProviderErrorDetails(new ProviderError()).withErrorLevel("nmwmqtibx")
                                    .withCreationTime(OffsetDateTime.parse("2021-03-01T23:53:32Z")).withTaskId("dt")))
                            .withStartTime(OffsetDateTime.parse("2021-11-15T06:45:30Z"))
                            .withEndTime(OffsetDateTime.parse("2021-02-14T10:50:47Z"))
                            .withAllowedActions(
                                Arrays.asList("ijaeukm"))
                            .withTargetObjectId("ieekpndzaa").withTargetObjectName("udqmeqwigpibudq")
                            .withTargetInstanceType("xebeybpmz")
                            .withCustomDetails(new JobDetails().withAffectedObjectDetails(
                                mapOf("aqi", "ff", "ioqaqhvs", "mhh"))))
                            .withLocation("fuqyrxpdlcgqlsi"),
                        new JobInner()
                            .withProperties(
                                new JobProperties().withActivityId("rtrhqvwrevkhgnl").withScenarioName("onzlr")
                                    .withFriendlyName("qywncvjtsz").withState("fizehtdhgbjk")
                                    .withStateDescription("eljeamurvzmlovua")
                                    .withTasks(
                                        Arrays
                                            .asList(
                                                new AsrTask().withTaskId("cxlpmjerb").withName("elvidizozsdbccx")
                                                    .withStartTime(OffsetDateTime.parse("2021-04-03T14:05:40Z"))
                                                    .withEndTime(OffsetDateTime.parse("2021-06-04T20:01:35Z"))
                                                    .withAllowedActions(Arrays.asList("nwncypuuw", "ltv", "qjctzenkeif",
                                                        "zhmkdasvflyh"))
                                                    .withFriendlyName("cu").withState("hxgsrboldfor")
                                                    .withStateDescription("wjlvizbfhfov").withTaskType("cqpbtuo")
                                                    .withCustomDetails(new TaskTypeDetails())
                                                    .withGroupTaskCustomDetails(new GroupTaskDetails())
                                                    .withErrors(Arrays.asList(new JobErrorDetails())),
                                                new AsrTask().withTaskId("bbelawumuaslzk").withName("rwoycqucwyh")
                                                    .withStartTime(OffsetDateTime.parse("2021-12-05T11:23:21Z"))
                                                    .withEndTime(OffsetDateTime.parse("2021-01-03T22:26:02Z"))
                                                    .withAllowedActions(
                                                        Arrays.asList("kywuhpsvfuu", "utlwexxwla", "niexzsrzpgepq"))
                                                    .withFriendlyName("bb").withState("pgdakchzyvli")
                                                    .withStateDescription("nrkcxkj").withTaskType("nxm")
                                                    .withCustomDetails(new TaskTypeDetails())
                                                    .withGroupTaskCustomDetails(new GroupTaskDetails())
                                                    .withErrors(Arrays.asList(new JobErrorDetails(),
                                                        new JobErrorDetails(), new JobErrorDetails())),
                                                new AsrTask().withTaskId("qrntv").withName("ijpstte")
                                                    .withStartTime(OffsetDateTime.parse("2021-11-08T06:52:34Z"))
                                                    .withEndTime(OffsetDateTime.parse("2021-02-04T20:26:02Z"))
                                                    .withAllowedActions(Arrays.asList("yyufmhruncuw", "qspkcdqzhlctd"))
                                                    .withFriendlyName("nqndyfpchrqbn").withState("rcgegydcwboxjum")
                                                    .withStateDescription("qoli").withTaskType("raiouaubrjtl")
                                                    .withCustomDetails(new TaskTypeDetails())
                                                    .withGroupTaskCustomDetails(new GroupTaskDetails())
                                                    .withErrors(
                                                        Arrays.asList(new JobErrorDetails(), new JobErrorDetails(),
                                                            new JobErrorDetails())),
                                                new AsrTask().withTaskId("jrngif").withName("z")
                                                    .withStartTime(OffsetDateTime.parse("2021-09-29T00:55:24Z"))
                                                    .withEndTime(OffsetDateTime.parse("2021-10-27T11:43:24Z"))
                                                    .withAllowedActions(Arrays.asList("uimzdlyjd"))
                                                    .withFriendlyName("wmkyoqufdvruzsl").withState("j")
                                                    .withStateDescription("ctfnmdxotng").withTaskType("gugey")
                                                    .withCustomDetails(new TaskTypeDetails())
                                                    .withGroupTaskCustomDetails(new GroupTaskDetails()).withErrors(
                                                        Arrays.asList(new JobErrorDetails(), new JobErrorDetails()))))
                                    .withErrors(
                                        Arrays.asList(new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                            .withProviderErrorDetails(new ProviderError()).withErrorLevel("absnmfpp")
                                            .withCreationTime(OffsetDateTime.parse("2021-09-09T02:17:02Z"))
                                            .withTaskId("evy")))
                                    .withStartTime(OffsetDateTime.parse("2021-01-30T15:37:24Z"))
                                    .withEndTime(OffsetDateTime.parse("2021-07-27T14:52:36Z"))
                                    .withAllowedActions(Arrays.asList("czbgomfgbeg", "qgleohibetnluank"))
                                    .withTargetObjectId("fxeeebtijvacvbm").withTargetObjectName("bqqxlaj")
                                    .withTargetInstanceType("wxacevehj")
                                    .withCustomDetails(
                                        new JobDetails().withAffectedObjectDetails(mapOf(
                                            "faey", "oafgaoql", "hriypoqeyhlqhy", "inmfgvxirp", "nuciqdsmexiit",
                                            "prlpy", "stgnl", "fuxtyasiibmiybnn"))))
                            .withLocation("nmgixh"),
                        new JobInner()
                            .withProperties(
                                new JobProperties().withActivityId("gcmjkavl").withScenarioName("rb")
                                    .withFriendlyName("tp").withState("tzfjltf").withStateDescription("zcyjtot")
                                    .withTasks(Arrays.asList(new AsrTask().withTaskId("vpbdbzqgq")
                                        .withName("hedsvqwthmkyib")
                                        .withStartTime(OffsetDateTime.parse("2021-03-21T07:03:22Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-11-13T09:58:30Z"))
                                        .withAllowedActions(Arrays.asList("qcwdhoh", "dtmcd", "sufco", "dxbzlmcmuap"))
                                        .withFriendlyName("hdbevwqqxeyskon").withState("inkfkbgbz")
                                        .withStateDescription("wxeqocljmygvkzqk").withTaskType("eokbze")
                                        .withCustomDetails(new TaskTypeDetails())
                                        .withGroupTaskCustomDetails(new GroupTaskDetails())
                                        .withErrors(Arrays.asList(new JobErrorDetails(), new JobErrorDetails()))))
                                    .withErrors(Arrays.asList(
                                        new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                            .withProviderErrorDetails(new ProviderError()).withErrorLevel("tleipqxbkw")
                                            .withCreationTime(OffsetDateTime.parse("2021-04-24T16:12:29Z"))
                                            .withTaskId("zvd"),
                                        new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                            .withProviderErrorDetails(new ProviderError()).withErrorLevel("ixz")
                                            .withCreationTime(OffsetDateTime.parse("2021-05-22T10:48:30Z"))
                                            .withTaskId("odawopqhewjptmcg")))
                                    .withStartTime(OffsetDateTime.parse("2021-04-24T18:57:19Z"))
                                    .withEndTime(OffsetDateTime.parse("2021-03-17T12:43:28Z"))
                                    .withAllowedActions(Arrays.asList("lnd")).withTargetObjectId("tutmzl")
                                    .withTargetObjectName("ojlvfhrbbpneqvc").withTargetInstanceType("yyurmochpprprsnm")
                                    .withCustomDetails(new JobDetails().withAffectedObjectDetails(
                                        mapOf("kpbz", "zejnhl", "a", "cpilj", "chndbnwie", "zv"))))
                            .withLocation("lewjwiuubwef")))
                .withNextLink("jwogqqnobpudc");
        model = BinaryData.fromObject(model).toObject(JobCollection.class);
        Assertions.assertEquals("jeuut", model.value().get(0).properties().activityId());
        Assertions.assertEquals("xezw", model.value().get(0).properties().scenarioName());
        Assertions.assertEquals("okvbwnhhtqlgehg", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("ipifhpfeoajvg", model.value().get(0).properties().state());
        Assertions.assertEquals("txjcsheafidlt", model.value().get(0).properties().stateDescription());
        Assertions.assertEquals("esmkssjhoiftxfkf", model.value().get(0).properties().tasks().get(0).taskId());
        Assertions.assertEquals("gpr", model.value().get(0).properties().tasks().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-29T04:06:59Z"),
            model.value().get(0).properties().tasks().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-05T10:55:26Z"),
            model.value().get(0).properties().tasks().get(0).endTime());
        Assertions.assertEquals("cbiqtgdqoh", model.value().get(0).properties().tasks().get(0).allowedActions().get(0));
        Assertions.assertEquals("wsldrizetpwbr", model.value().get(0).properties().tasks().get(0).friendlyName());
        Assertions.assertEquals("llibphbqzmizak", model.value().get(0).properties().tasks().get(0).state());
        Assertions.assertEquals("ankjpdnjzh", model.value().get(0).properties().tasks().get(0).stateDescription());
        Assertions.assertEquals("oylhjlmuoyxprimr", model.value().get(0).properties().tasks().get(0).taskType());
        Assertions.assertEquals("islstv", model.value().get(0).properties().errors().get(0).errorLevel());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T18:13:46Z"),
            model.value().get(0).properties().errors().get(0).creationTime());
        Assertions.assertEquals("wxdzaumweoohgu", model.value().get(0).properties().errors().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-15T06:45:30Z"),
            model.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-14T10:50:47Z"),
            model.value().get(0).properties().endTime());
        Assertions.assertEquals("ijaeukm", model.value().get(0).properties().allowedActions().get(0));
        Assertions.assertEquals("ieekpndzaa", model.value().get(0).properties().targetObjectId());
        Assertions.assertEquals("udqmeqwigpibudq", model.value().get(0).properties().targetObjectName());
        Assertions.assertEquals("xebeybpmz", model.value().get(0).properties().targetInstanceType());
        Assertions.assertEquals("ff",
            model.value().get(0).properties().customDetails().affectedObjectDetails().get("aqi"));
        Assertions.assertEquals("fuqyrxpdlcgqlsi", model.value().get(0).location());
        Assertions.assertEquals("jwogqqnobpudc", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
