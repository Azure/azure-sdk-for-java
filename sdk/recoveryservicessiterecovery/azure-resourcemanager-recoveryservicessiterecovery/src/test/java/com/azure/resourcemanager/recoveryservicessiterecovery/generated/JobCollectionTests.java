// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.JobInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AsrTask;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.GroupTaskDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobCollection;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobErrorDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ProviderError;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ServiceError;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TaskTypeDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"activityId\":\"svqwthmkyibc\",\"scenarioName\":\"ihsgq\",\"friendlyName\":\"dhohsdtmcdzsuf\",\"state\":\"hdxbzlm\",\"stateDescription\":\"uapcvhdbevwqqxe\",\"tasks\":[{\"taskId\":\"nqzi\",\"name\":\"fkbg\",\"startTime\":\"2021-05-14T20:37:59Z\",\"endTime\":\"2021-06-13T05:29:48Z\",\"allowedActions\":[\"qocl\",\"mygvkzqkj\",\"eokbze\"],\"friendlyName\":\"zrxcczurt\",\"state\":\"ipqxbkwvzgnzv\",\"stateDescription\":\"bzdixzmq\",\"taskType\":\"odawopqhewjptmcg\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{}]}],\"errors\":[{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"la\",\"creationTime\":\"2021-11-08T13:33:16Z\",\"taskId\":\"zlbiojlvfhrbbpn\"}],\"startTime\":\"2021-01-05T16:49:28Z\",\"endTime\":\"2021-09-18T08:32:48Z\",\"allowedActions\":[\"yurmochpprprs\",\"mo\",\"ayzejnhlbkpbz\",\"cpilj\"],\"targetObjectId\":\"hzvechndbnwieho\",\"targetObjectName\":\"wjwiuub\",\"targetInstanceType\":\"fqsfa\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"wexjkmfxapjwogq\":\"ferr\"}}},\"location\":\"o\",\"id\":\"pud\",\"name\":\"dabtqwp\",\"type\":\"yawbzasqbu\"},{\"properties\":{\"activityId\":\"gkyexaoguy\",\"scenarioName\":\"p\",\"friendlyName\":\"sdaultxij\",\"state\":\"mfqwa\",\"stateDescription\":\"nqnm\",\"tasks\":[{\"taskId\":\"zqdqxt\",\"name\":\"wgnyfusfzsvtui\",\"startTime\":\"2021-03-01T07:50:01Z\",\"endTime\":\"2021-03-02T02:07:50Z\",\"allowedActions\":[\"lcfhmlrqryxy\",\"qnzrd\",\"sovwxznptgoeiyb\",\"abpfhvfs\"],\"friendlyName\":\"vntjlrigjk\",\"state\":\"yrio\",\"stateDescription\":\"zid\",\"taskType\":\"waabzmifrygzn\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{}]}],\"errors\":[{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"bgopxlhslnel\",\"creationTime\":\"2021-05-24T14:46:14Z\",\"taskId\":\"xynl\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"wcrojphslhcaw\",\"creationTime\":\"2021-07-06T17:22:34Z\",\"taskId\":\"fdwfmvigorqj\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"h\",\"creationTime\":\"2021-01-05T10:30:14Z\",\"taskId\":\"kafhonqj\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"ckpzvcpopmxeln\",\"creationTime\":\"2021-11-06T15:55:48Z\",\"taskId\":\"yjede\"}],\"startTime\":\"2021-05-24T09:24:11Z\",\"endTime\":\"2021-04-24T06:30:07Z\",\"allowedActions\":[\"qscazuawxtz\",\"puamwabzxr\",\"xcushs\",\"haivm\"],\"targetObjectId\":\"asflvg\",\"targetObjectName\":\"zwywako\",\"targetInstanceType\":\"knsmjblmljhlnymz\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"mv\":\"ryuzcbmqqv\",\"ujlzqnhcvsqltn\":\"fgtayxonsup\"}}},\"location\":\"ibg\",\"id\":\"xgnxfyqonmpqoxwd\",\"name\":\"fdbxiqxeiiqbim\",\"type\":\"tmwwi\"},{\"properties\":{\"activityId\":\"hfqpofv\",\"scenarioName\":\"cblembnkbwv\",\"friendlyName\":\"xk\",\"state\":\"vqihebwtswbzuwf\",\"stateDescription\":\"urageg\",\"tasks\":[{\"taskId\":\"jfelisdjubggbqig\",\"name\":\"kbsazgak\",\"startTime\":\"2021-01-31T02:25:12Z\",\"endTime\":\"2021-03-26T20:47:06Z\",\"allowedActions\":[\"jdmspofapvuhryln\"],\"friendlyName\":\"frzgbzjed\",\"state\":\"tkvnlvxbcuiiznkt\",\"stateDescription\":\"ansnvp\",\"taskType\":\"bmikost\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{}]},{\"taskId\":\"buqny\",\"name\":\"hzfylsgcrpfbc\",\"startTime\":\"2021-03-23T04:41:37Z\",\"endTime\":\"2021-07-31T19:50:05Z\",\"allowedActions\":[\"zelfwyfwl\"],\"friendlyName\":\"jwetnpsihcla\",\"state\":\"va\",\"stateDescription\":\"pt\",\"taskType\":\"qqwzt\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{}]},{\"taskId\":\"hcxwaxfewzjk\",\"name\":\"xfdeqvhpsyl\",\"startTime\":\"2021-04-17T08:49:18Z\",\"endTime\":\"2021-03-18T21:28:39Z\",\"allowedActions\":[\"f\",\"bmxzjrgywwpg\",\"xs\"],\"friendlyName\":\"tf\",\"state\":\"gicgaaoepttaq\",\"stateDescription\":\"dewemxswv\",\"taskType\":\"unzzjgehk\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{}]},{\"taskId\":\"ixokffqyin\",\"name\":\"qepqwhixmon\",\"startTime\":\"2021-01-17T19:00:27Z\",\"endTime\":\"2021-09-25T05:57:05Z\",\"allowedActions\":[\"gvelfc\",\"du\",\"cb\",\"rds\"],\"friendlyName\":\"wcobie\",\"state\":\"tmninw\",\"stateDescription\":\"zcilnghg\",\"taskType\":\"ejjtbxqmul\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{},{},{}]}],\"errors\":[{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"sbycucrwnamikz\",\"creationTime\":\"2021-05-25T11:34:45Z\",\"taskId\":\"bsmswziqgf\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"zruswh\",\"creationTime\":\"2021-08-09T18:56:19Z\",\"taskId\":\"znvfbycjsxjww\"},{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"umwmxqhnd\",\"creationTime\":\"2021-01-21T17:32:59Z\",\"taskId\":\"mldsehaohdj\"}],\"startTime\":\"2021-09-08T22:46:23Z\",\"endTime\":\"2021-06-11T02:03:13Z\",\"allowedActions\":[\"xcoxpelnjet\",\"gltsxoat\",\"tgzpnpb\"],\"targetObjectId\":\"vefloccsrmozihmi\",\"targetObjectName\":\"awtxxpk\",\"targetInstanceType\":\"cxcjxgry\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"ilrmcaykggnox\":\"cy\",\"pfnznthjtwkj\":\"ztrksxwpndf\",\"ktcqio\":\"osrxuzvoa\",\"laprlt\":\"mgbzahgxqdlyrtl\"}}},\"location\":\"atbhjmznn\",\"id\":\"s\",\"name\":\"qeqala\",\"type\":\"vlagun\"},{\"properties\":{\"activityId\":\"febwlnbmhyreeudz\",\"scenarioName\":\"vbpdqmjxlyyzglgo\",\"friendlyName\":\"tlmj\",\"state\":\"uojqt\",\"stateDescription\":\"axkjeytunlbfjk\",\"tasks\":[{\"taskId\":\"nkqbhsyrq\",\"name\":\"jqhden\",\"startTime\":\"2021-08-07T05:25:40Z\",\"endTime\":\"2021-05-29T00:38:23Z\",\"allowedActions\":[\"kdk\",\"fmjnnawtqa\",\"pxuckpggq\",\"wey\"],\"friendlyName\":\"dhlisngwflqqmpi\",\"state\":\"uwnpqxpxiwfcng\",\"stateDescription\":\"aas\",\"taskType\":\"xtmkzjvkviir\",\"customDetails\":{\"instanceType\":\"TaskTypeDetails\"},\"groupTaskCustomDetails\":{\"instanceType\":\"GroupTaskDetails\"},\"errors\":[{},{}]}],\"errors\":[{\"serviceErrorDetails\":{},\"providerErrorDetails\":{},\"errorLevel\":\"ra\",\"creationTime\":\"2021-03-02T16:22:17Z\",\"taskId\":\"bglbyvict\"}],\"startTime\":\"2021-03-31T05:55:27Z\",\"endTime\":\"2021-10-06T10:18:17Z\",\"allowedActions\":[\"zwrgxffmshkwfbk\"],\"targetObjectId\":\"zxwopdbydpizq\",\"targetObjectName\":\"lnapxbiygn\",\"targetInstanceType\":\"j\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"uyilflqoiquvrehm\":\"mfcttux\",\"ytqj\":\"njhvsujztc\",\"auunfprnjletlx\":\"w\",\"ddoui\":\"mr\"}}},\"location\":\"mowaziynknlqwzdv\",\"id\":\"iwhxqszdtmaajq\",\"name\":\"huxy\",\"type\":\"rjvmtygjbmzyosp\"}],\"nextLink\":\"shck\"}")
            .toObject(JobCollection.class);
        Assertions.assertEquals("svqwthmkyibc", model.value().get(0).properties().activityId());
        Assertions.assertEquals("ihsgq", model.value().get(0).properties().scenarioName());
        Assertions.assertEquals("dhohsdtmcdzsuf", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("hdxbzlm", model.value().get(0).properties().state());
        Assertions.assertEquals("uapcvhdbevwqqxe", model.value().get(0).properties().stateDescription());
        Assertions.assertEquals("nqzi", model.value().get(0).properties().tasks().get(0).taskId());
        Assertions.assertEquals("fkbg", model.value().get(0).properties().tasks().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-14T20:37:59Z"),
            model.value().get(0).properties().tasks().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T05:29:48Z"),
            model.value().get(0).properties().tasks().get(0).endTime());
        Assertions.assertEquals("qocl", model.value().get(0).properties().tasks().get(0).allowedActions().get(0));
        Assertions.assertEquals("zrxcczurt", model.value().get(0).properties().tasks().get(0).friendlyName());
        Assertions.assertEquals("ipqxbkwvzgnzv", model.value().get(0).properties().tasks().get(0).state());
        Assertions.assertEquals("bzdixzmq", model.value().get(0).properties().tasks().get(0).stateDescription());
        Assertions.assertEquals("odawopqhewjptmcg", model.value().get(0).properties().tasks().get(0).taskType());
        Assertions.assertEquals("la", model.value().get(0).properties().errors().get(0).errorLevel());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-08T13:33:16Z"),
            model.value().get(0).properties().errors().get(0).creationTime());
        Assertions.assertEquals("zlbiojlvfhrbbpn", model.value().get(0).properties().errors().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T16:49:28Z"),
            model.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T08:32:48Z"),
            model.value().get(0).properties().endTime());
        Assertions.assertEquals("yurmochpprprs", model.value().get(0).properties().allowedActions().get(0));
        Assertions.assertEquals("hzvechndbnwieho", model.value().get(0).properties().targetObjectId());
        Assertions.assertEquals("wjwiuub", model.value().get(0).properties().targetObjectName());
        Assertions.assertEquals("fqsfa", model.value().get(0).properties().targetInstanceType());
        Assertions.assertEquals("ferr",
            model.value().get(0).properties().customDetails().affectedObjectDetails().get("wexjkmfxapjwogq"));
        Assertions.assertEquals("o", model.value().get(0).location());
        Assertions.assertEquals("shck", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobCollection model
            = new JobCollection()
                .withValue(
                    Arrays.asList(
                        new JobInner().withProperties(new JobProperties().withActivityId("svqwthmkyibc")
                            .withScenarioName("ihsgq")
                            .withFriendlyName("dhohsdtmcdzsuf")
                            .withState("hdxbzlm")
                            .withStateDescription("uapcvhdbevwqqxe")
                            .withTasks(Arrays.asList(new AsrTask().withTaskId("nqzi")
                                .withName("fkbg")
                                .withStartTime(OffsetDateTime.parse("2021-05-14T20:37:59Z"))
                                .withEndTime(OffsetDateTime.parse("2021-06-13T05:29:48Z"))
                                .withAllowedActions(Arrays.asList("qocl", "mygvkzqkj", "eokbze"))
                                .withFriendlyName("zrxcczurt")
                                .withState("ipqxbkwvzgnzv")
                                .withStateDescription("bzdixzmq")
                                .withTaskType("odawopqhewjptmcg")
                                .withCustomDetails(new TaskTypeDetails())
                                .withGroupTaskCustomDetails(new GroupTaskDetails())
                                .withErrors(Arrays.asList(new JobErrorDetails()))))
                            .withErrors(Arrays.asList(new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                .withProviderErrorDetails(new ProviderError())
                                .withErrorLevel("la")
                                .withCreationTime(OffsetDateTime.parse("2021-11-08T13:33:16Z"))
                                .withTaskId("zlbiojlvfhrbbpn")))
                            .withStartTime(OffsetDateTime.parse("2021-01-05T16:49:28Z"))
                            .withEndTime(OffsetDateTime.parse("2021-09-18T08:32:48Z"))
                            .withAllowedActions(Arrays.asList("yurmochpprprs", "mo", "ayzejnhlbkpbz", "cpilj"))
                            .withTargetObjectId("hzvechndbnwieho")
                            .withTargetObjectName("wjwiuub")
                            .withTargetInstanceType("fqsfa")
                            .withCustomDetails(new JobDetails().withAffectedObjectDetails(
                                mapOf("wexjkmfxapjwogq", "ferr"))))
                            .withLocation("o"),
                        new JobInner()
                            .withProperties(
                                new JobProperties().withActivityId("gkyexaoguy")
                                    .withScenarioName("p")
                                    .withFriendlyName("sdaultxij")
                                    .withState("mfqwa")
                                    .withStateDescription("nqnm")
                                    .withTasks(
                                        Arrays
                                            .asList(new AsrTask().withTaskId("zqdqxt")
                                                .withName("wgnyfusfzsvtui")
                                                .withStartTime(OffsetDateTime.parse("2021-03-01T07:50:01Z"))
                                                .withEndTime(OffsetDateTime.parse("2021-03-02T02:07:50Z"))
                                                .withAllowedActions(Arrays.asList("lcfhmlrqryxy", "qnzrd",
                                                    "sovwxznptgoeiyb", "abpfhvfs"))
                                                .withFriendlyName("vntjlrigjk")
                                                .withState("yrio")
                                                .withStateDescription("zid")
                                                .withTaskType("waabzmifrygzn")
                                                .withCustomDetails(new TaskTypeDetails())
                                                .withGroupTaskCustomDetails(new GroupTaskDetails())
                                                .withErrors(Arrays.asList(new JobErrorDetails()))))
                                    .withErrors(Arrays.asList(
                                        new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                            .withProviderErrorDetails(new ProviderError())
                                            .withErrorLevel("bgopxlhslnel")
                                            .withCreationTime(OffsetDateTime.parse("2021-05-24T14:46:14Z"))
                                            .withTaskId("xynl"),
                                        new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                            .withProviderErrorDetails(new ProviderError())
                                            .withErrorLevel("wcrojphslhcaw")
                                            .withCreationTime(OffsetDateTime.parse("2021-07-06T17:22:34Z"))
                                            .withTaskId("fdwfmvigorqj"),
                                        new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                            .withProviderErrorDetails(new ProviderError())
                                            .withErrorLevel("h")
                                            .withCreationTime(OffsetDateTime.parse("2021-01-05T10:30:14Z"))
                                            .withTaskId("kafhonqj"),
                                        new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                            .withProviderErrorDetails(new ProviderError())
                                            .withErrorLevel("ckpzvcpopmxeln")
                                            .withCreationTime(OffsetDateTime.parse("2021-11-06T15:55:48Z"))
                                            .withTaskId("yjede")))
                                    .withStartTime(OffsetDateTime.parse("2021-05-24T09:24:11Z"))
                                    .withEndTime(OffsetDateTime.parse("2021-04-24T06:30:07Z"))
                                    .withAllowedActions(Arrays.asList("qscazuawxtz", "puamwabzxr", "xcushs", "haivm"))
                                    .withTargetObjectId("asflvg")
                                    .withTargetObjectName("zwywako")
                                    .withTargetInstanceType("knsmjblmljhlnymz")
                                    .withCustomDetails(
                                        new JobDetails()
                                            .withAffectedObjectDetails(mapOf("mv", "ryuzcbmqqv", "ujlzqnhcvsqltn",
                                                "fgtayxonsup"))))
                            .withLocation("ibg"),
                        new JobInner()
                            .withProperties(new JobProperties().withActivityId("hfqpofv")
                                .withScenarioName("cblembnkbwv")
                                .withFriendlyName("xk")
                                .withState("vqihebwtswbzuwf")
                                .withStateDescription("urageg")
                                .withTasks(Arrays.asList(
                                    new AsrTask().withTaskId("jfelisdjubggbqig")
                                        .withName("kbsazgak")
                                        .withStartTime(OffsetDateTime.parse("2021-01-31T02:25:12Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-03-26T20:47:06Z"))
                                        .withAllowedActions(Arrays.asList("jdmspofapvuhryln"))
                                        .withFriendlyName("frzgbzjed")
                                        .withState("tkvnlvxbcuiiznkt")
                                        .withStateDescription("ansnvp")
                                        .withTaskType("bmikost")
                                        .withCustomDetails(new TaskTypeDetails())
                                        .withGroupTaskCustomDetails(new GroupTaskDetails())
                                        .withErrors(Arrays.asList(new JobErrorDetails(), new JobErrorDetails())),
                                    new AsrTask().withTaskId("buqny")
                                        .withName("hzfylsgcrpfbc")
                                        .withStartTime(OffsetDateTime.parse("2021-03-23T04:41:37Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-07-31T19:50:05Z"))
                                        .withAllowedActions(Arrays.asList("zelfwyfwl"))
                                        .withFriendlyName("jwetnpsihcla")
                                        .withState("va")
                                        .withStateDescription("pt")
                                        .withTaskType("qqwzt")
                                        .withCustomDetails(new TaskTypeDetails())
                                        .withGroupTaskCustomDetails(new GroupTaskDetails())
                                        .withErrors(Arrays.asList(new JobErrorDetails(), new JobErrorDetails())),
                                    new AsrTask().withTaskId("hcxwaxfewzjk")
                                        .withName("xfdeqvhpsyl")
                                        .withStartTime(OffsetDateTime.parse("2021-04-17T08:49:18Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-03-18T21:28:39Z"))
                                        .withAllowedActions(Arrays.asList("f", "bmxzjrgywwpg", "xs"))
                                        .withFriendlyName("tf")
                                        .withState("gicgaaoepttaq")
                                        .withStateDescription("dewemxswv")
                                        .withTaskType("unzzjgehk")
                                        .withCustomDetails(new TaskTypeDetails())
                                        .withGroupTaskCustomDetails(new GroupTaskDetails())
                                        .withErrors(Arrays.asList(new JobErrorDetails(), new JobErrorDetails())),
                                    new AsrTask().withTaskId("ixokffqyin")
                                        .withName("qepqwhixmon")
                                        .withStartTime(OffsetDateTime.parse("2021-01-17T19:00:27Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-09-25T05:57:05Z"))
                                        .withAllowedActions(Arrays.asList("gvelfc", "du", "cb", "rds"))
                                        .withFriendlyName("wcobie")
                                        .withState("tmninw")
                                        .withStateDescription("zcilnghg")
                                        .withTaskType("ejjtbxqmul")
                                        .withCustomDetails(new TaskTypeDetails())
                                        .withGroupTaskCustomDetails(new GroupTaskDetails())
                                        .withErrors(Arrays.asList(new JobErrorDetails(), new JobErrorDetails(),
                                            new JobErrorDetails(), new JobErrorDetails()))))
                                .withErrors(Arrays.asList(
                                    new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                        .withProviderErrorDetails(new ProviderError())
                                        .withErrorLevel("sbycucrwnamikz")
                                        .withCreationTime(OffsetDateTime.parse("2021-05-25T11:34:45Z"))
                                        .withTaskId("bsmswziqgf"),
                                    new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                        .withProviderErrorDetails(new ProviderError())
                                        .withErrorLevel("zruswh")
                                        .withCreationTime(OffsetDateTime.parse("2021-08-09T18:56:19Z"))
                                        .withTaskId("znvfbycjsxjww"),
                                    new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                        .withProviderErrorDetails(new ProviderError())
                                        .withErrorLevel("umwmxqhnd")
                                        .withCreationTime(OffsetDateTime.parse("2021-01-21T17:32:59Z"))
                                        .withTaskId("mldsehaohdj")))
                                .withStartTime(OffsetDateTime.parse("2021-09-08T22:46:23Z"))
                                .withEndTime(OffsetDateTime.parse("2021-06-11T02:03:13Z"))
                                .withAllowedActions(Arrays.asList("xcoxpelnjet", "gltsxoat", "tgzpnpb"))
                                .withTargetObjectId("vefloccsrmozihmi")
                                .withTargetObjectName("awtxxpk")
                                .withTargetInstanceType("cxcjxgry")
                                .withCustomDetails(
                                    new JobDetails()
                                        .withAffectedObjectDetails(mapOf("ilrmcaykggnox", "cy", "pfnznthjtwkj",
                                            "ztrksxwpndf", "ktcqio", "osrxuzvoa", "laprlt", "mgbzahgxqdlyrtl"))))
                            .withLocation("atbhjmznn"),
                        new JobInner()
                            .withProperties(new JobProperties().withActivityId("febwlnbmhyreeudz")
                                .withScenarioName("vbpdqmjxlyyzglgo")
                                .withFriendlyName("tlmj")
                                .withState("uojqt")
                                .withStateDescription("axkjeytunlbfjk")
                                .withTasks(Arrays.asList(new AsrTask().withTaskId("nkqbhsyrq")
                                    .withName("jqhden")
                                    .withStartTime(OffsetDateTime.parse("2021-08-07T05:25:40Z"))
                                    .withEndTime(OffsetDateTime.parse("2021-05-29T00:38:23Z"))
                                    .withAllowedActions(Arrays.asList("kdk", "fmjnnawtqa", "pxuckpggq", "wey"))
                                    .withFriendlyName("dhlisngwflqqmpi")
                                    .withState("uwnpqxpxiwfcng")
                                    .withStateDescription("aas")
                                    .withTaskType("xtmkzjvkviir")
                                    .withCustomDetails(new TaskTypeDetails())
                                    .withGroupTaskCustomDetails(new GroupTaskDetails())
                                    .withErrors(Arrays.asList(new JobErrorDetails(), new JobErrorDetails()))))
                                .withErrors(
                                    Arrays.asList(new JobErrorDetails().withServiceErrorDetails(new ServiceError())
                                        .withProviderErrorDetails(new ProviderError())
                                        .withErrorLevel("ra")
                                        .withCreationTime(OffsetDateTime.parse("2021-03-02T16:22:17Z"))
                                        .withTaskId("bglbyvict")))
                                .withStartTime(OffsetDateTime.parse("2021-03-31T05:55:27Z"))
                                .withEndTime(OffsetDateTime.parse("2021-10-06T10:18:17Z"))
                                .withAllowedActions(Arrays.asList("zwrgxffmshkwfbk"))
                                .withTargetObjectId("zxwopdbydpizq")
                                .withTargetObjectName("lnapxbiygn")
                                .withTargetInstanceType("j")
                                .withCustomDetails(new JobDetails().withAffectedObjectDetails(mapOf("uyilflqoiquvrehm",
                                    "mfcttux", "ytqj", "njhvsujztc", "auunfprnjletlx", "w", "ddoui", "mr"))))
                            .withLocation("mowaziynknlqwzdv")))
                .withNextLink("shck");
        model = BinaryData.fromObject(model).toObject(JobCollection.class);
        Assertions.assertEquals("svqwthmkyibc", model.value().get(0).properties().activityId());
        Assertions.assertEquals("ihsgq", model.value().get(0).properties().scenarioName());
        Assertions.assertEquals("dhohsdtmcdzsuf", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("hdxbzlm", model.value().get(0).properties().state());
        Assertions.assertEquals("uapcvhdbevwqqxe", model.value().get(0).properties().stateDescription());
        Assertions.assertEquals("nqzi", model.value().get(0).properties().tasks().get(0).taskId());
        Assertions.assertEquals("fkbg", model.value().get(0).properties().tasks().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-14T20:37:59Z"),
            model.value().get(0).properties().tasks().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T05:29:48Z"),
            model.value().get(0).properties().tasks().get(0).endTime());
        Assertions.assertEquals("qocl", model.value().get(0).properties().tasks().get(0).allowedActions().get(0));
        Assertions.assertEquals("zrxcczurt", model.value().get(0).properties().tasks().get(0).friendlyName());
        Assertions.assertEquals("ipqxbkwvzgnzv", model.value().get(0).properties().tasks().get(0).state());
        Assertions.assertEquals("bzdixzmq", model.value().get(0).properties().tasks().get(0).stateDescription());
        Assertions.assertEquals("odawopqhewjptmcg", model.value().get(0).properties().tasks().get(0).taskType());
        Assertions.assertEquals("la", model.value().get(0).properties().errors().get(0).errorLevel());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-08T13:33:16Z"),
            model.value().get(0).properties().errors().get(0).creationTime());
        Assertions.assertEquals("zlbiojlvfhrbbpn", model.value().get(0).properties().errors().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T16:49:28Z"),
            model.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T08:32:48Z"),
            model.value().get(0).properties().endTime());
        Assertions.assertEquals("yurmochpprprs", model.value().get(0).properties().allowedActions().get(0));
        Assertions.assertEquals("hzvechndbnwieho", model.value().get(0).properties().targetObjectId());
        Assertions.assertEquals("wjwiuub", model.value().get(0).properties().targetObjectName());
        Assertions.assertEquals("fqsfa", model.value().get(0).properties().targetInstanceType());
        Assertions.assertEquals("ferr",
            model.value().get(0).properties().customDetails().affectedObjectDetails().get("wexjkmfxapjwogq"));
        Assertions.assertEquals("o", model.value().get(0).location());
        Assertions.assertEquals("shck", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
