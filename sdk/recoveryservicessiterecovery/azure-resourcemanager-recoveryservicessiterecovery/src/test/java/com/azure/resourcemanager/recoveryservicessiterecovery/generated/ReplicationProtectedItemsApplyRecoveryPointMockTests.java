// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ApplyRecoveryPointInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ApplyRecoveryPointInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ApplyRecoveryPointProviderSpecificInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsApplyRecoveryPointMockTests {
    @Test
    public void testApplyRecoveryPoint() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"epkwzzzkueruwcj\",\"protectedItemType\":\"ipvwkauj\",\"protectableItemId\":\"w\",\"recoveryServicesProviderId\":\"ox\",\"primaryFabricFriendlyName\":\"wofxxdplrel\",\"primaryFabricProvider\":\"vga\",\"recoveryFabricFriendlyName\":\"btuxlbpxrhrfje\",\"recoveryFabricId\":\"azwef\",\"primaryProtectionContainerFriendlyName\":\"tlhqas\",\"recoveryProtectionContainerFriendlyName\":\"ostjixyz\",\"protectionState\":\"cigz\",\"protectionStateDescription\":\"wjtacfvv\",\"activeLocation\":\"pcbpzfom\",\"testFailoverState\":\"augbrhfiwltk\",\"testFailoverStateDescription\":\"su\",\"switchProviderState\":\"ethklxwhcv\",\"switchProviderStateDescription\":\"yyhgqokjbmsr\",\"allowedOperations\":[\"yxxhwrlqom\",\"qsyilpzzbrwnr\"],\"replicationHealth\":\"zsxagysokli\",\"failoverHealth\":\"s\",\"healthErrors\":[],\"policyId\":\"rbnhylsbhu\",\"policyFriendlyName\":\"ydy\",\"lastSuccessfulFailoverTime\":\"2021-09-16T11:52:07Z\",\"lastSuccessfulTestFailoverTime\":\"2021-02-09T06:14:23Z\",\"currentScenario\":{\"scenarioName\":\"tizsyqagqllc\",\"jobId\":\"vaidy\",\"startTime\":\"2021-09-29T05:51:06Z\"},\"failoverRecoveryPointId\":\"trrqwfyybptm\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"nogykugdla\",\"eventCorrelationId\":\"avgthkslge\"},\"location\":\"fkbzbfbxjblajy\",\"id\":\"dnbycsbtoisa\",\"name\":\"dj\",\"type\":\"ofsv\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .applyRecoveryPoint(
                    "eqfgkxe",
                    "vsz",
                    "lvyakeszsuuvul",
                    "qcwggchxvl",
                    "gfbrv",
                    new ApplyRecoveryPointInput()
                        .withProperties(
                            new ApplyRecoveryPointInputProperties()
                                .withRecoveryPointId("icaovphirlzbipi")
                                .withProviderSpecificDetails(new ApplyRecoveryPointProviderSpecificInput())),
                    Context.NONE);

        Assertions.assertEquals("epkwzzzkueruwcj", response.properties().friendlyName());
        Assertions.assertEquals("ipvwkauj", response.properties().protectedItemType());
        Assertions.assertEquals("w", response.properties().protectableItemId());
        Assertions.assertEquals("ox", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("wofxxdplrel", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("vga", response.properties().primaryFabricProvider());
        Assertions.assertEquals("btuxlbpxrhrfje", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("azwef", response.properties().recoveryFabricId());
        Assertions.assertEquals("tlhqas", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("ostjixyz", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("cigz", response.properties().protectionState());
        Assertions.assertEquals("wjtacfvv", response.properties().protectionStateDescription());
        Assertions.assertEquals("pcbpzfom", response.properties().activeLocation());
        Assertions.assertEquals("augbrhfiwltk", response.properties().testFailoverState());
        Assertions.assertEquals("su", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("ethklxwhcv", response.properties().switchProviderState());
        Assertions.assertEquals("yyhgqokjbmsr", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("yxxhwrlqom", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("zsxagysokli", response.properties().replicationHealth());
        Assertions.assertEquals("s", response.properties().failoverHealth());
        Assertions.assertEquals("rbnhylsbhu", response.properties().policyId());
        Assertions.assertEquals("ydy", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-16T11:52:07Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-09T06:14:23Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("tizsyqagqllc", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("vaidy", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-29T05:51:06Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("trrqwfyybptm", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("nogykugdla", response.properties().recoveryContainerId());
        Assertions.assertEquals("avgthkslge", response.properties().eventCorrelationId());
        Assertions.assertEquals("fkbzbfbxjblajy", response.location());
    }
}
