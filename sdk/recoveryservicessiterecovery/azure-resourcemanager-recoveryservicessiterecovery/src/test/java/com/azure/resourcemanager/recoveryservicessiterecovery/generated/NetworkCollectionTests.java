// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.NetworkInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkCollection;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkCollection model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"fabricType\":\"yb\",\"subnets\":[],\"friendlyName\":\"h\",\"networkType\":\"fbowskanyk\"},\"location\":\"lcuiywgqywgndr\",\"id\":\"ynhz\",\"name\":\"pphrcgynco\",\"type\":\"pec\"}],\"nextLink\":\"m\"}")
                .toObject(NetworkCollection.class);
        Assertions.assertEquals("yb", model.value().get(0).properties().fabricType());
        Assertions.assertEquals("h", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("fbowskanyk", model.value().get(0).properties().networkType());
        Assertions.assertEquals("lcuiywgqywgndr", model.value().get(0).location());
        Assertions.assertEquals("m", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkCollection model =
            new NetworkCollection()
                .withValue(
                    Arrays
                        .asList(
                            new NetworkInner()
                                .withProperties(
                                    new NetworkProperties()
                                        .withFabricType("yb")
                                        .withSubnets(Arrays.asList())
                                        .withFriendlyName("h")
                                        .withNetworkType("fbowskanyk"))
                                .withLocation("lcuiywgqywgndr")))
                .withNextLink("m");
        model = BinaryData.fromObject(model).toObject(NetworkCollection.class);
        Assertions.assertEquals("yb", model.value().get(0).properties().fabricType());
        Assertions.assertEquals("h", model.value().get(0).properties().friendlyName());
        Assertions.assertEquals("fbowskanyk", model.value().get(0).properties().networkType());
        Assertions.assertEquals("lcuiywgqywgndr", model.value().get(0).location());
        Assertions.assertEquals("m", model.nextLink());
    }
}
