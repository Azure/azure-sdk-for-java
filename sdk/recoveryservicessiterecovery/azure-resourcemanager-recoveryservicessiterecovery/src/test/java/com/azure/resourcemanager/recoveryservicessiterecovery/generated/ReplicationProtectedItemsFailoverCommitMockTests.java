// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsFailoverCommitMockTests {
    @Test
    public void testFailoverCommit() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"sjwyfixirgcjfai\",\"protectedItemType\":\"lpj\",\"protectableItemId\":\"krxifqn\",\"recoveryServicesProviderId\":\"orxsqtzngxbsale\",\"primaryFabricFriendlyName\":\"uxcmmhipbvskc\",\"primaryFabricProvider\":\"ly\",\"recoveryFabricFriendlyName\":\"wfsaa\",\"recoveryFabricId\":\"fgb\",\"primaryProtectionContainerFriendlyName\":\"vm\",\"recoveryProtectionContainerFriendlyName\":\"d\",\"protectionState\":\"iuajklnacgdn\",\"protectionStateDescription\":\"eonmzrjjaojp\",\"activeLocation\":\"gdrzige\",\"testFailoverState\":\"sadsqyuddkhwqdm\",\"testFailoverStateDescription\":\"heuyuunxmyevyi\",\"switchProviderState\":\"eip\",\"switchProviderStateDescription\":\"izej\",\"allowedOperations\":[\"iacndjzwh\",\"jodapqok\",\"dyncradxsewbe\"],\"replicationHealth\":\"fapmqnmelyksy\",\"failoverHealth\":\"hiclmslnunk\",\"healthErrors\":[],\"policyId\":\"bbba\",\"policyFriendlyName\":\"exquawexizbf\",\"lastSuccessfulFailoverTime\":\"2021-06-11T14:57:52Z\",\"lastSuccessfulTestFailoverTime\":\"2021-02-17T11:26:49Z\",\"currentScenario\":{\"scenarioName\":\"hpnbm\",\"jobId\":\"vvyxtvvxnakzi\",\"startTime\":\"2021-04-14T05:23:59Z\"},\"failoverRecoveryPointId\":\"ybfmlngfwhrmvl\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"ujmwxnrzblxna\",\"eventCorrelationId\":\"smfndcbsyhludzjk\"},\"location\":\"vohwvprjf\",\"id\":\"vtdu\",\"name\":\"mdtacntjn\",\"type\":\"ffhvqii\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .failoverCommit("dvhzfkdn", "ysodcikgx", "k", "zfzdjekeb", "w", Context.NONE);

        Assertions.assertEquals("sjwyfixirgcjfai", response.properties().friendlyName());
        Assertions.assertEquals("lpj", response.properties().protectedItemType());
        Assertions.assertEquals("krxifqn", response.properties().protectableItemId());
        Assertions.assertEquals("orxsqtzngxbsale", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("uxcmmhipbvskc", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("ly", response.properties().primaryFabricProvider());
        Assertions.assertEquals("wfsaa", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("fgb", response.properties().recoveryFabricId());
        Assertions.assertEquals("vm", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("d", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("iuajklnacgdn", response.properties().protectionState());
        Assertions.assertEquals("eonmzrjjaojp", response.properties().protectionStateDescription());
        Assertions.assertEquals("gdrzige", response.properties().activeLocation());
        Assertions.assertEquals("sadsqyuddkhwqdm", response.properties().testFailoverState());
        Assertions.assertEquals("heuyuunxmyevyi", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("eip", response.properties().switchProviderState());
        Assertions.assertEquals("izej", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("iacndjzwh", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("fapmqnmelyksy", response.properties().replicationHealth());
        Assertions.assertEquals("hiclmslnunk", response.properties().failoverHealth());
        Assertions.assertEquals("bbba", response.properties().policyId());
        Assertions.assertEquals("exquawexizbf", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-11T14:57:52Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-17T11:26:49Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("hpnbm", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("vvyxtvvxnakzi", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-14T05:23:59Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("ybfmlngfwhrmvl", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("ujmwxnrzblxna", response.properties().recoveryContainerId());
        Assertions.assertEquals("smfndcbsyhludzjk", response.properties().eventCorrelationId());
        Assertions.assertEquals("vohwvprjf", response.location());
    }
}
