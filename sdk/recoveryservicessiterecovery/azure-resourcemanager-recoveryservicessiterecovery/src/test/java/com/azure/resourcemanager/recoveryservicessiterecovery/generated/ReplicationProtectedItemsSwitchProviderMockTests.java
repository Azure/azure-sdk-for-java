// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SwitchProviderInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SwitchProviderInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SwitchProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsSwitchProviderMockTests {
    @Test
    public void testSwitchProvider() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"hcnsdyl\",\"protectedItemType\":\"qunkygb\",\"protectableItemId\":\"msgkwedwlxtzhg\",\"recoveryServicesProviderId\":\"bh\",\"primaryFabricFriendlyName\":\"hrpji\",\"primaryFabricProvider\":\"rr\",\"recoveryFabricFriendlyName\":\"ibpkwmamr\",\"recoveryFabricId\":\"izj\",\"primaryProtectionContainerFriendlyName\":\"dndihupngy\",\"recoveryProtectionContainerFriendlyName\":\"lqy\",\"protectionState\":\"ewcmodxwuuytxnxr\",\"protectionStateDescription\":\"rtzea\",\"activeLocation\":\"vf\",\"testFailoverState\":\"hbjhmvpjxsd\",\"testFailoverStateDescription\":\"eignybffqc\",\"switchProviderState\":\"ynepkt\",\"switchProviderStateDescription\":\"wgvco\",\"allowedOperations\":[\"eb\",\"ijfhpxnikouoxfal\"],\"replicationHealth\":\"bskkypor\",\"failoverHealth\":\"nieu\",\"healthErrors\":[],\"policyId\":\"lgfaphwuu\",\"policyFriendlyName\":\"tsaynr\",\"lastSuccessfulFailoverTime\":\"2021-01-26T15:12:51Z\",\"lastSuccessfulTestFailoverTime\":\"2021-07-09T17:11:51Z\",\"currentScenario\":{\"scenarioName\":\"e\",\"jobId\":\"vqjmrnblihs\",\"startTime\":\"2021-08-14T16:41:29Z\"},\"failoverRecoveryPointId\":\"md\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"xzhpjgqzmiaoawea\",\"eventCorrelationId\":\"xaubu\"},\"location\":\"uetcnx\",\"id\":\"iqzzdckhsqdrrjsu\",\"name\":\"nowobwx\",\"type\":\"xmyokohlsfjf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .switchProvider(
                    "aklhjfddxqfuss",
                    "bzsspmjvail",
                    "auyvxpqwlkqdgwbz",
                    "rthldwvoglff",
                    "dhg",
                    new SwitchProviderInput()
                        .withProperties(
                            new SwitchProviderInputProperties()
                                .withTargetInstanceType("rmhbtofcv")
                                .withProviderSpecificDetails(new SwitchProviderSpecificInput())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hcnsdyl", response.properties().friendlyName());
        Assertions.assertEquals("qunkygb", response.properties().protectedItemType());
        Assertions.assertEquals("msgkwedwlxtzhg", response.properties().protectableItemId());
        Assertions.assertEquals("bh", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("hrpji", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("rr", response.properties().primaryFabricProvider());
        Assertions.assertEquals("ibpkwmamr", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("izj", response.properties().recoveryFabricId());
        Assertions.assertEquals("dndihupngy", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("lqy", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("ewcmodxwuuytxnxr", response.properties().protectionState());
        Assertions.assertEquals("rtzea", response.properties().protectionStateDescription());
        Assertions.assertEquals("vf", response.properties().activeLocation());
        Assertions.assertEquals("hbjhmvpjxsd", response.properties().testFailoverState());
        Assertions.assertEquals("eignybffqc", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("ynepkt", response.properties().switchProviderState());
        Assertions.assertEquals("wgvco", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("eb", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("bskkypor", response.properties().replicationHealth());
        Assertions.assertEquals("nieu", response.properties().failoverHealth());
        Assertions.assertEquals("lgfaphwuu", response.properties().policyId());
        Assertions.assertEquals("tsaynr", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-26T15:12:51Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-09T17:11:51Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("e", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("vqjmrnblihs", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-14T16:41:29Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("md", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("xzhpjgqzmiaoawea", response.properties().recoveryContainerId());
        Assertions.assertEquals("xaubu", response.properties().eventCorrelationId());
        Assertions.assertEquals("uetcnx", response.location());
    }
}
