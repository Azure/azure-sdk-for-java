// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.RecoveryPlanInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.CurrentScenarioDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanGroup;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanGroupType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanProviderSpecificDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RecoveryPlanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecoveryPlanInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"friendlyName\":\"ozihmipgawt\",\"primaryFabricId\":\"pkyjcxcjxgrytfm\",\"primaryFabricFriendlyName\":\"ycilrmcaykggnox\",\"recoveryFabricId\":\"t\",\"recoveryFabricFriendlyName\":\"sxwpndfcpfnznthj\",\"failoverDeploymentModel\":\"kjaosrxuzv\",\"replicationProviders\":[\"ktcqio\",\"mgbzahgxqdlyrtl\",\"laprlt\",\"katbhjm\"],\"allowedOperations\":[\"bsoqeqala\",\"vlagun\",\"tgfebwln\"],\"lastPlannedFailoverTime\":\"2021-08-19T19:49:36Z\",\"lastUnplannedFailoverTime\":\"2021-02-09T00:26:12Z\",\"lastTestFailoverTime\":\"2021-12-01T07:49:22Z\",\"currentScenario\":{\"scenarioName\":\"zqavbpdqmjx\",\"jobId\":\"yzglgo\",\"startTime\":\"2021-04-10T20:18:26Z\"},\"currentScenarioStatus\":\"mjjyuojq\",\"currentScenarioStatusDescription\":\"baxk\",\"groups\":[{\"groupType\":\"Shutdown\",\"replicationProtectedItems\":[],\"startGroupActions\":[],\"endGroupActions\":[]},{\"groupType\":\"Failover\",\"replicationProtectedItems\":[],\"startGroupActions\":[],\"endGroupActions\":[]},{\"groupType\":\"Failover\",\"replicationProtectedItems\":[],\"startGroupActions\":[],\"endGroupActions\":[]}],\"providerSpecificDetails\":[{\"instanceType\":\"RecoveryPlanProviderSpecificDetails\"}]},\"location\":\"bhsy\",\"id\":\"qunjqh\",\"name\":\"enx\",\"type\":\"ulkpakd\"}")
                .toObject(RecoveryPlanInner.class);
        Assertions.assertEquals("ozihmipgawt", model.properties().friendlyName());
        Assertions.assertEquals("pkyjcxcjxgrytfm", model.properties().primaryFabricId());
        Assertions.assertEquals("ycilrmcaykggnox", model.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("t", model.properties().recoveryFabricId());
        Assertions.assertEquals("sxwpndfcpfnznthj", model.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("kjaosrxuzv", model.properties().failoverDeploymentModel());
        Assertions.assertEquals("ktcqio", model.properties().replicationProviders().get(0));
        Assertions.assertEquals("bsoqeqala", model.properties().allowedOperations().get(0));
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-19T19:49:36Z"), model.properties().lastPlannedFailoverTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-02-09T00:26:12Z"), model.properties().lastUnplannedFailoverTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-12-01T07:49:22Z"), model.properties().lastTestFailoverTime());
        Assertions.assertEquals("zqavbpdqmjx", model.properties().currentScenario().scenarioName());
        Assertions.assertEquals("yzglgo", model.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-10T20:18:26Z"), model.properties().currentScenario().startTime());
        Assertions.assertEquals("mjjyuojq", model.properties().currentScenarioStatus());
        Assertions.assertEquals("baxk", model.properties().currentScenarioStatusDescription());
        Assertions.assertEquals(RecoveryPlanGroupType.SHUTDOWN, model.properties().groups().get(0).groupType());
        Assertions.assertEquals("bhsy", model.location());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecoveryPlanInner model =
            new RecoveryPlanInner()
                .withProperties(
                    new RecoveryPlanProperties()
                        .withFriendlyName("ozihmipgawt")
                        .withPrimaryFabricId("pkyjcxcjxgrytfm")
                        .withPrimaryFabricFriendlyName("ycilrmcaykggnox")
                        .withRecoveryFabricId("t")
                        .withRecoveryFabricFriendlyName("sxwpndfcpfnznthj")
                        .withFailoverDeploymentModel("kjaosrxuzv")
                        .withReplicationProviders(Arrays.asList("ktcqio", "mgbzahgxqdlyrtl", "laprlt", "katbhjm"))
                        .withAllowedOperations(Arrays.asList("bsoqeqala", "vlagun", "tgfebwln"))
                        .withLastPlannedFailoverTime(OffsetDateTime.parse("2021-08-19T19:49:36Z"))
                        .withLastUnplannedFailoverTime(OffsetDateTime.parse("2021-02-09T00:26:12Z"))
                        .withLastTestFailoverTime(OffsetDateTime.parse("2021-12-01T07:49:22Z"))
                        .withCurrentScenario(
                            new CurrentScenarioDetails()
                                .withScenarioName("zqavbpdqmjx")
                                .withJobId("yzglgo")
                                .withStartTime(OffsetDateTime.parse("2021-04-10T20:18:26Z")))
                        .withCurrentScenarioStatus("mjjyuojq")
                        .withCurrentScenarioStatusDescription("baxk")
                        .withGroups(
                            Arrays
                                .asList(
                                    new RecoveryPlanGroup()
                                        .withGroupType(RecoveryPlanGroupType.SHUTDOWN)
                                        .withReplicationProtectedItems(Arrays.asList())
                                        .withStartGroupActions(Arrays.asList())
                                        .withEndGroupActions(Arrays.asList()),
                                    new RecoveryPlanGroup()
                                        .withGroupType(RecoveryPlanGroupType.FAILOVER)
                                        .withReplicationProtectedItems(Arrays.asList())
                                        .withStartGroupActions(Arrays.asList())
                                        .withEndGroupActions(Arrays.asList()),
                                    new RecoveryPlanGroup()
                                        .withGroupType(RecoveryPlanGroupType.FAILOVER)
                                        .withReplicationProtectedItems(Arrays.asList())
                                        .withStartGroupActions(Arrays.asList())
                                        .withEndGroupActions(Arrays.asList())))
                        .withProviderSpecificDetails(Arrays.asList(new RecoveryPlanProviderSpecificDetails())))
                .withLocation("bhsy");
        model = BinaryData.fromObject(model).toObject(RecoveryPlanInner.class);
        Assertions.assertEquals("ozihmipgawt", model.properties().friendlyName());
        Assertions.assertEquals("pkyjcxcjxgrytfm", model.properties().primaryFabricId());
        Assertions.assertEquals("ycilrmcaykggnox", model.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("t", model.properties().recoveryFabricId());
        Assertions.assertEquals("sxwpndfcpfnznthj", model.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("kjaosrxuzv", model.properties().failoverDeploymentModel());
        Assertions.assertEquals("ktcqio", model.properties().replicationProviders().get(0));
        Assertions.assertEquals("bsoqeqala", model.properties().allowedOperations().get(0));
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-19T19:49:36Z"), model.properties().lastPlannedFailoverTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-02-09T00:26:12Z"), model.properties().lastUnplannedFailoverTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-12-01T07:49:22Z"), model.properties().lastTestFailoverTime());
        Assertions.assertEquals("zqavbpdqmjx", model.properties().currentScenario().scenarioName());
        Assertions.assertEquals("yzglgo", model.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-10T20:18:26Z"), model.properties().currentScenario().startTime());
        Assertions.assertEquals("mjjyuojq", model.properties().currentScenarioStatus());
        Assertions.assertEquals("baxk", model.properties().currentScenarioStatusDescription());
        Assertions.assertEquals(RecoveryPlanGroupType.SHUTDOWN, model.properties().groups().get(0).groupType());
        Assertions.assertEquals("bhsy", model.location());
    }
}
