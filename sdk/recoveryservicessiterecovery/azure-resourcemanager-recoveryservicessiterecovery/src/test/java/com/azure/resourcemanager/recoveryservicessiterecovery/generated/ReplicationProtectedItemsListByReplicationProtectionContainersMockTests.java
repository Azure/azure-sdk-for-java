// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsListByReplicationProtectionContainersMockTests {
    @Test
    public void testListByReplicationProtectionContainers() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"friendlyName\":\"nkteiidlbovwbclp\",\"protectedItemType\":\"eganihk\",\"protectableItemId\":\"n\",\"recoveryServicesProviderId\":\"ekyjulskwwnq\",\"primaryFabricFriendlyName\":\"lqgpwxtvceba\",\"primaryFabricProvider\":\"bvxwvegenlrjcsmw\",\"recoveryFabricFriendlyName\":\"guyflnxelrjkf\",\"recoveryFabricId\":\"detowwezhyfkdilb\",\"primaryProtectionContainerFriendlyName\":\"lqacsfqbi\",\"recoveryProtectionContainerFriendlyName\":\"ybcelfjnxodnjy\",\"protectionState\":\"faxs\",\"protectionStateDescription\":\"vuelumodpegqxso\",\"activeLocation\":\"hazrqoxz\",\"testFailoverState\":\"lbeqvh\",\"testFailoverStateDescription\":\"b\",\"switchProviderState\":\"wxs\",\"switchProviderStateDescription\":\"jgg\",\"allowedOperations\":[\"ae\"],\"replicationHealth\":\"awkmibu\",\"failoverHealth\":\"wi\",\"healthErrors\":[],\"policyId\":\"c\",\"policyFriendlyName\":\"dyttq\",\"lastSuccessfulFailoverTime\":\"2021-05-23T11:28:42Z\",\"lastSuccessfulTestFailoverTime\":\"2021-08-18T20:45:19Z\",\"currentScenario\":{\"scenarioName\":\"osebmhht\",\"jobId\":\"mt\",\"startTime\":\"2021-11-29T08:34:34Z\"},\"failoverRecoveryPointId\":\"flqobfix\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"ebihex\",\"eventCorrelationId\":\"kingiqcdolrpgu\"},\"location\":\"jlbsmndafbncuyj\",\"id\":\"ykcnhpplzhc\",\"name\":\"zxjziuu\",\"type\":\"rlnewnuwkkfzzetl\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ReplicationProtectedItem> response =
            manager
                .replicationProtectedItems()
                .listByReplicationProtectionContainers(
                    "pba", "vyrkljqkq", "sy", "tvjkowggxawwdm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nkteiidlbovwbclp", response.iterator().next().properties().friendlyName());
        Assertions.assertEquals("eganihk", response.iterator().next().properties().protectedItemType());
        Assertions.assertEquals("n", response.iterator().next().properties().protectableItemId());
        Assertions.assertEquals("ekyjulskwwnq", response.iterator().next().properties().recoveryServicesProviderId());
        Assertions.assertEquals("lqgpwxtvceba", response.iterator().next().properties().primaryFabricFriendlyName());
        Assertions.assertEquals("bvxwvegenlrjcsmw", response.iterator().next().properties().primaryFabricProvider());
        Assertions.assertEquals("guyflnxelrjkf", response.iterator().next().properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("detowwezhyfkdilb", response.iterator().next().properties().recoveryFabricId());
        Assertions
            .assertEquals(
                "lqacsfqbi", response.iterator().next().properties().primaryProtectionContainerFriendlyName());
        Assertions
            .assertEquals(
                "ybcelfjnxodnjy", response.iterator().next().properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("faxs", response.iterator().next().properties().protectionState());
        Assertions
            .assertEquals("vuelumodpegqxso", response.iterator().next().properties().protectionStateDescription());
        Assertions.assertEquals("hazrqoxz", response.iterator().next().properties().activeLocation());
        Assertions.assertEquals("lbeqvh", response.iterator().next().properties().testFailoverState());
        Assertions.assertEquals("b", response.iterator().next().properties().testFailoverStateDescription());
        Assertions.assertEquals("wxs", response.iterator().next().properties().switchProviderState());
        Assertions.assertEquals("jgg", response.iterator().next().properties().switchProviderStateDescription());
        Assertions.assertEquals("ae", response.iterator().next().properties().allowedOperations().get(0));
        Assertions.assertEquals("awkmibu", response.iterator().next().properties().replicationHealth());
        Assertions.assertEquals("wi", response.iterator().next().properties().failoverHealth());
        Assertions.assertEquals("c", response.iterator().next().properties().policyId());
        Assertions.assertEquals("dyttq", response.iterator().next().properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-23T11:28:42Z"),
                response.iterator().next().properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-18T20:45:19Z"),
                response.iterator().next().properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("osebmhht", response.iterator().next().properties().currentScenario().scenarioName());
        Assertions.assertEquals("mt", response.iterator().next().properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-29T08:34:34Z"),
                response.iterator().next().properties().currentScenario().startTime());
        Assertions.assertEquals("flqobfix", response.iterator().next().properties().failoverRecoveryPointId());
        Assertions.assertEquals("ebihex", response.iterator().next().properties().recoveryContainerId());
        Assertions.assertEquals("kingiqcdolrpgu", response.iterator().next().properties().eventCorrelationId());
        Assertions.assertEquals("jlbsmndafbncuyj", response.iterator().next().location());
    }
}
