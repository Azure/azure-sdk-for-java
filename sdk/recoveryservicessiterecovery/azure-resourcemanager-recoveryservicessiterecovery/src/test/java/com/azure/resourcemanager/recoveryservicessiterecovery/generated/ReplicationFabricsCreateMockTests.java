// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Fabric;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FabricCreationInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FabricSpecificCreationInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationFabricsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"bggcj\",\"encryptionDetails\":{\"kekState\":\"blivw\",\"kekCertThumbprint\":\"sudy\",\"kekCertExpiryDate\":\"2021-06-02T14:30:50Z\"},\"rolloverEncryptionDetails\":{\"kekState\":\"dosmbn\",\"kekCertThumbprint\":\"q\",\"kekCertExpiryDate\":\"2021-05-10T21:48:56Z\"},\"internalIdentifier\":\"duvxd\",\"bcdrState\":\"exatmdmnrsen\",\"customDetails\":{\"instanceType\":\"FabricSpecificDetails\"},\"healthErrorDetails\":[],\"health\":\"yddmiploisjkz\"},\"location\":\"xznntwgkvyohp\",\"id\":\"apzupz\",\"name\":\"wytb\",\"type\":\"jzghximkg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Fabric response =
            manager
                .replicationFabrics()
                .define("bjepzwhj")
                .withExistingVault("hfyf", "t")
                .withProperties(
                    new FabricCreationInputProperties().withCustomDetails(new FabricSpecificCreationInput()))
                .create();

        Assertions.assertEquals("bggcj", response.properties().friendlyName());
        Assertions.assertEquals("blivw", response.properties().encryptionDetails().kekState());
        Assertions.assertEquals("sudy", response.properties().encryptionDetails().kekCertThumbprint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-02T14:30:50Z"),
                response.properties().encryptionDetails().kekCertExpiryDate());
        Assertions.assertEquals("dosmbn", response.properties().rolloverEncryptionDetails().kekState());
        Assertions.assertEquals("q", response.properties().rolloverEncryptionDetails().kekCertThumbprint());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-10T21:48:56Z"),
                response.properties().rolloverEncryptionDetails().kekCertExpiryDate());
        Assertions.assertEquals("duvxd", response.properties().internalIdentifier());
        Assertions.assertEquals("exatmdmnrsen", response.properties().bcdrState());
        Assertions.assertEquals("yddmiploisjkz", response.properties().health());
        Assertions.assertEquals("xznntwgkvyohp", response.location());
    }
}
