// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlan;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverCleanupInputProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryPlansTestFailoverCleanupMockTests {
    @Test
    public void testTestFailoverCleanup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"bgwcduyrg\",\"primaryFabricId\":\"ygumqeobrwreudgs\",\"primaryFabricFriendlyName\":\"hamigsqzmfk\",\"recoveryFabricId\":\"agw\",\"recoveryFabricFriendlyName\":\"xjkc\",\"failoverDeploymentModel\":\"enubrf\",\"replicationProviders\":[\"kxnwtz\",\"roeqcrjvcjskq\"],\"allowedOperations\":[\"miwapdunhdikatzm\",\"uvfnhitjkbibxl\",\"zlvkcm\"],\"lastPlannedFailoverTime\":\"2021-01-02T18:24:46Z\",\"lastUnplannedFailoverTime\":\"2021-10-12T05:14:22Z\",\"lastTestFailoverTime\":\"2021-02-22T01:08:07Z\",\"currentScenario\":{\"scenarioName\":\"in\",\"jobId\":\"baoboi\",\"startTime\":\"2021-12-07T14:50:15Z\"},\"currentScenarioStatus\":\"psvax\",\"currentScenarioStatusDescription\":\"sax\",\"groups\":[],\"providerSpecificDetails\":[]},\"location\":\"modk\",\"id\":\"dutydvv\",\"name\":\"km\",\"type\":\"rbpcj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RecoveryPlan response =
            manager
                .replicationRecoveryPlans()
                .testFailoverCleanup(
                    "kehojvmazuflfp",
                    "uufhpdncokqrg",
                    "vbhmnimjlyhb",
                    new RecoveryPlanTestFailoverCleanupInput()
                        .withProperties(new RecoveryPlanTestFailoverCleanupInputProperties().withComments("n")),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bgwcduyrg", response.properties().friendlyName());
        Assertions.assertEquals("ygumqeobrwreudgs", response.properties().primaryFabricId());
        Assertions.assertEquals("hamigsqzmfk", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("agw", response.properties().recoveryFabricId());
        Assertions.assertEquals("xjkc", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("enubrf", response.properties().failoverDeploymentModel());
        Assertions.assertEquals("kxnwtz", response.properties().replicationProviders().get(0));
        Assertions.assertEquals("miwapdunhdikatzm", response.properties().allowedOperations().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-02T18:24:46Z"), response.properties().lastPlannedFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-12T05:14:22Z"), response.properties().lastUnplannedFailoverTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-02-22T01:08:07Z"), response.properties().lastTestFailoverTime());
        Assertions.assertEquals("in", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("baoboi", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-12-07T14:50:15Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("psvax", response.properties().currentScenarioStatus());
        Assertions.assertEquals("sax", response.properties().currentScenarioStatusDescription());
        Assertions.assertEquals("modk", response.location());
    }
}
