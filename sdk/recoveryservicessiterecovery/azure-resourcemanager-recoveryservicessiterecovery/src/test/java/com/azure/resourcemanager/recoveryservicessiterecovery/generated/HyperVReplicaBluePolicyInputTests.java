// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaBluePolicyInput;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaBluePolicyInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaBluePolicyInput model = BinaryData.fromString(
            "{\"instanceType\":\"HyperVReplica2012R2\",\"replicationFrequencyInSeconds\":912906104,\"recoveryPoints\":555593471,\"applicationConsistentSnapshotFrequencyInHours\":2111418753,\"compression\":\"heu\",\"initialReplicationMethod\":\"nl\",\"onlineReplicationStartTime\":\"npqcc\",\"offlineReplicationImportPath\":\"iawzlzklaslgac\",\"offlineReplicationExportPath\":\"uxlrarwpe\",\"replicationPort\":1501943232,\"allowedAuthenticationType\":1534641072,\"replicaDeletion\":\"ejtig\"}")
            .toObject(HyperVReplicaBluePolicyInput.class);
        Assertions.assertEquals(555593471, model.recoveryPoints());
        Assertions.assertEquals(2111418753, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("heu", model.compression());
        Assertions.assertEquals("nl", model.initialReplicationMethod());
        Assertions.assertEquals("npqcc", model.onlineReplicationStartTime());
        Assertions.assertEquals("iawzlzklaslgac", model.offlineReplicationImportPath());
        Assertions.assertEquals("uxlrarwpe", model.offlineReplicationExportPath());
        Assertions.assertEquals(1501943232, model.replicationPort());
        Assertions.assertEquals(1534641072, model.allowedAuthenticationType());
        Assertions.assertEquals("ejtig", model.replicaDeletion());
        Assertions.assertEquals(912906104, model.replicationFrequencyInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaBluePolicyInput model = new HyperVReplicaBluePolicyInput().withRecoveryPoints(555593471)
            .withApplicationConsistentSnapshotFrequencyInHours(2111418753)
            .withCompression("heu")
            .withInitialReplicationMethod("nl")
            .withOnlineReplicationStartTime("npqcc")
            .withOfflineReplicationImportPath("iawzlzklaslgac")
            .withOfflineReplicationExportPath("uxlrarwpe")
            .withReplicationPort(1501943232)
            .withAllowedAuthenticationType(1534641072)
            .withReplicaDeletion("ejtig")
            .withReplicationFrequencyInSeconds(912906104);
        model = BinaryData.fromObject(model).toObject(HyperVReplicaBluePolicyInput.class);
        Assertions.assertEquals(555593471, model.recoveryPoints());
        Assertions.assertEquals(2111418753, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("heu", model.compression());
        Assertions.assertEquals("nl", model.initialReplicationMethod());
        Assertions.assertEquals("npqcc", model.onlineReplicationStartTime());
        Assertions.assertEquals("iawzlzklaslgac", model.offlineReplicationImportPath());
        Assertions.assertEquals("uxlrarwpe", model.offlineReplicationExportPath());
        Assertions.assertEquals(1501943232, model.replicationPort());
        Assertions.assertEquals(1534641072, model.allowedAuthenticationType());
        Assertions.assertEquals("ejtig", model.replicaDeletion());
        Assertions.assertEquals(912906104, model.replicationFrequencyInSeconds());
    }
}
