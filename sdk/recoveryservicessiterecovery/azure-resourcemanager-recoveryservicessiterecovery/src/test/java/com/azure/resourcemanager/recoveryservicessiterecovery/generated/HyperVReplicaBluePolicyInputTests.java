// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaBluePolicyInput;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HyperVReplicaBluePolicyInputTests {
    @Test
    public void testDeserialize() {
        HyperVReplicaBluePolicyInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"HyperVReplica2012R2\",\"replicationFrequencyInSeconds\":2081028827,\"recoveryPoints\":145468447,\"applicationConsistentSnapshotFrequencyInHours\":698852842,\"compression\":\"czshnuqndaizu\",\"initialReplicationMethod\":\"kh\",\"onlineReplicationStartTime\":\"tu\",\"offlineReplicationImportPath\":\"xhmt\",\"offlineReplicationExportPath\":\"vegwqiukvz\",\"replicationPort\":1561461404,\"allowedAuthenticationType\":798786113,\"replicaDeletion\":\"haokgkskjiv\"}")
                .toObject(HyperVReplicaBluePolicyInput.class);
        Assertions.assertEquals(145468447, model.recoveryPoints());
        Assertions.assertEquals(698852842, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("czshnuqndaizu", model.compression());
        Assertions.assertEquals("kh", model.initialReplicationMethod());
        Assertions.assertEquals("tu", model.onlineReplicationStartTime());
        Assertions.assertEquals("xhmt", model.offlineReplicationImportPath());
        Assertions.assertEquals("vegwqiukvz", model.offlineReplicationExportPath());
        Assertions.assertEquals(1561461404, model.replicationPort());
        Assertions.assertEquals(798786113, model.allowedAuthenticationType());
        Assertions.assertEquals("haokgkskjiv", model.replicaDeletion());
        Assertions.assertEquals(2081028827, model.replicationFrequencyInSeconds());
    }

    @Test
    public void testSerialize() {
        HyperVReplicaBluePolicyInput model =
            new HyperVReplicaBluePolicyInput()
                .withRecoveryPoints(145468447)
                .withApplicationConsistentSnapshotFrequencyInHours(698852842)
                .withCompression("czshnuqndaizu")
                .withInitialReplicationMethod("kh")
                .withOnlineReplicationStartTime("tu")
                .withOfflineReplicationImportPath("xhmt")
                .withOfflineReplicationExportPath("vegwqiukvz")
                .withReplicationPort(1561461404)
                .withAllowedAuthenticationType(798786113)
                .withReplicaDeletion("haokgkskjiv")
                .withReplicationFrequencyInSeconds(2081028827);
        model = BinaryData.fromObject(model).toObject(HyperVReplicaBluePolicyInput.class);
        Assertions.assertEquals(145468447, model.recoveryPoints());
        Assertions.assertEquals(698852842, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("czshnuqndaizu", model.compression());
        Assertions.assertEquals("kh", model.initialReplicationMethod());
        Assertions.assertEquals("tu", model.onlineReplicationStartTime());
        Assertions.assertEquals("xhmt", model.offlineReplicationImportPath());
        Assertions.assertEquals("vegwqiukvz", model.offlineReplicationExportPath());
        Assertions.assertEquals(1561461404, model.replicationPort());
        Assertions.assertEquals(798786113, model.allowedAuthenticationType());
        Assertions.assertEquals("haokgkskjiv", model.replicaDeletion());
        Assertions.assertEquals(2081028827, model.replicationFrequencyInSeconds());
    }
}
