// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FabricReplicationGroupTaskDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobEntity;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FabricReplicationGroupTaskDetailsTests {
    @Test
    public void testDeserialize() {
        FabricReplicationGroupTaskDetails model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"FabricReplicationGroupTaskDetails\",\"skippedReason\":\"ch\",\"skippedReasonString\":\"fnkf\",\"jobTask\":{\"jobId\":\"v\",\"jobFriendlyName\":\"oakizvoai\",\"targetObjectId\":\"a\",\"targetObjectName\":\"nuwiguyxlykwph\",\"targetInstanceType\":\"zc\",\"jobScenarioName\":\"hmpejtlkexaonw\"}}")
                .toObject(FabricReplicationGroupTaskDetails.class);
        Assertions.assertEquals("v", model.jobTask().jobId());
        Assertions.assertEquals("oakizvoai", model.jobTask().jobFriendlyName());
        Assertions.assertEquals("a", model.jobTask().targetObjectId());
        Assertions.assertEquals("nuwiguyxlykwph", model.jobTask().targetObjectName());
        Assertions.assertEquals("zc", model.jobTask().targetInstanceType());
        Assertions.assertEquals("hmpejtlkexaonw", model.jobTask().jobScenarioName());
        Assertions.assertEquals("ch", model.skippedReason());
        Assertions.assertEquals("fnkf", model.skippedReasonString());
    }

    @Test
    public void testSerialize() {
        FabricReplicationGroupTaskDetails model =
            new FabricReplicationGroupTaskDetails()
                .withJobTask(
                    new JobEntity()
                        .withJobId("v")
                        .withJobFriendlyName("oakizvoai")
                        .withTargetObjectId("a")
                        .withTargetObjectName("nuwiguyxlykwph")
                        .withTargetInstanceType("zc")
                        .withJobScenarioName("hmpejtlkexaonw"))
                .withSkippedReason("ch")
                .withSkippedReasonString("fnkf");
        model = BinaryData.fromObject(model).toObject(FabricReplicationGroupTaskDetails.class);
        Assertions.assertEquals("v", model.jobTask().jobId());
        Assertions.assertEquals("oakizvoai", model.jobTask().jobFriendlyName());
        Assertions.assertEquals("a", model.jobTask().targetObjectId());
        Assertions.assertEquals("nuwiguyxlykwph", model.jobTask().targetObjectName());
        Assertions.assertEquals("zc", model.jobTask().targetInstanceType());
        Assertions.assertEquals("hmpejtlkexaonw", model.jobTask().jobScenarioName());
        Assertions.assertEquals("ch", model.skippedReason());
        Assertions.assertEquals("fnkf", model.skippedReasonString());
    }
}
