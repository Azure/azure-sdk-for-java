// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsFailoverCancelMockTests {
    @Test
    public void testFailoverCancel() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"gfurdpagknx\",\"protectedItemType\":\"ovrgih\",\"protectableItemId\":\"zffewvqkyc\",\"recoveryServicesProviderId\":\"geipqxxs\",\"primaryFabricFriendlyName\":\"afwtydsmmab\",\"primaryFabricProvider\":\"clejqzhpv\",\"recoveryFabricFriendlyName\":\"pbadjzeul\",\"recoveryFabricId\":\"f\",\"primaryProtectionContainerFriendlyName\":\"gtqscjpvqerq\",\"recoveryProtectionContainerFriendlyName\":\"omwdzpzl\",\"protectionState\":\"uexlqpww\",\"protectionStateDescription\":\"bjecfwl\",\"activeLocation\":\"hnkfrwxohly\",\"testFailoverState\":\"njzpchiypbfhmi\",\"testFailoverStateDescription\":\"ktqoze\",\"switchProviderState\":\"rsrj\",\"switchProviderStateDescription\":\"kbrauxboufq\",\"allowedOperations\":[\"bjxgj\",\"srerukbuudriz\",\"kwkjxlaace\",\"ik\"],\"replicationHealth\":\"lssybzbev\",\"failoverHealth\":\"nrommki\",\"healthErrors\":[],\"policyId\":\"w\",\"policyFriendlyName\":\"zyjj\",\"lastSuccessfulFailoverTime\":\"2021-02-08T20:25:12Z\",\"lastSuccessfulTestFailoverTime\":\"2021-04-04T18:56:52Z\",\"currentScenario\":{\"scenarioName\":\"l\",\"jobId\":\"agwiijc\",\"startTime\":\"2021-07-06T08:13:20Z\"},\"failoverRecoveryPointId\":\"whxpsbapial\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"ydp\",\"eventCorrelationId\":\"udegefxlieggoto\"},\"location\":\"hssfnwh\",\"id\":\"kahhec\",\"name\":\"nfmkcuft\",\"type\":\"dgwuzron\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .failoverCancel("zxgnywxu", "mlfjymgw", "mszcfy", "q", "e", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gfurdpagknx", response.properties().friendlyName());
        Assertions.assertEquals("ovrgih", response.properties().protectedItemType());
        Assertions.assertEquals("zffewvqkyc", response.properties().protectableItemId());
        Assertions.assertEquals("geipqxxs", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("afwtydsmmab", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("clejqzhpv", response.properties().primaryFabricProvider());
        Assertions.assertEquals("pbadjzeul", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("f", response.properties().recoveryFabricId());
        Assertions.assertEquals("gtqscjpvqerq", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("omwdzpzl", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("uexlqpww", response.properties().protectionState());
        Assertions.assertEquals("bjecfwl", response.properties().protectionStateDescription());
        Assertions.assertEquals("hnkfrwxohly", response.properties().activeLocation());
        Assertions.assertEquals("njzpchiypbfhmi", response.properties().testFailoverState());
        Assertions.assertEquals("ktqoze", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("rsrj", response.properties().switchProviderState());
        Assertions.assertEquals("kbrauxboufq", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("bjxgj", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("lssybzbev", response.properties().replicationHealth());
        Assertions.assertEquals("nrommki", response.properties().failoverHealth());
        Assertions.assertEquals("w", response.properties().policyId());
        Assertions.assertEquals("zyjj", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-08T20:25:12Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-04T18:56:52Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("l", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("agwiijc", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-06T08:13:20Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("whxpsbapial", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("ydp", response.properties().recoveryContainerId());
        Assertions.assertEquals("udegefxlieggoto", response.properties().eventCorrelationId());
        Assertions.assertEquals("hssfnwh", response.location());
    }
}
