// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageAzureV2UpdateReplicationProtectedItemInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateDiskInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InMageAzureV2UpdateReplicationProtectedItemInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageAzureV2UpdateReplicationProtectedItemInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"InMageAzureV2\",\"recoveryAzureV1ResourceGroupId\":\"kvfruwkudr\",\"recoveryAzureV2ResourceGroupId\":\"pftxudqyeme\",\"useManagedDisks\":\"naucmcirtnee\",\"targetProximityPlacementGroupId\":\"jauwcgxefnohaitr\",\"targetAvailabilityZone\":\"izerw\",\"targetVmTags\":{\"ocefhpriylfmpzt\":\"asmxubvfbngf\",\"vhl\":\"aud\"},\"targetManagedDiskTags\":{\"egpqtmo\":\"ul\",\"shqrdgrt\":\"hvrztnvg\",\"fa\":\"mewjzlpyk\"},\"targetNicTags\":{\"polwzrghsrlei\":\"jcayerzrransyby\",\"ag\":\"kfscjfncjwv\",\"klzmijajw\":\"qwtltngvmreupt\"},\"sqlServerLicenseType\":\"NotSpecified\",\"vmDisks\":[{\"diskId\":\"vaghmpy\",\"targetDiskName\":\"lslrcigtzjc\"}]}")
                .toObject(InMageAzureV2UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("kvfruwkudr", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("pftxudqyeme", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("naucmcirtnee", model.useManagedDisks());
        Assertions.assertEquals("jauwcgxefnohaitr", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("izerw", model.targetAvailabilityZone());
        Assertions.assertEquals("asmxubvfbngf", model.targetVmTags().get("ocefhpriylfmpzt"));
        Assertions.assertEquals("ul", model.targetManagedDiskTags().get("egpqtmo"));
        Assertions.assertEquals("jcayerzrransyby", model.targetNicTags().get("polwzrghsrlei"));
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals("vaghmpy", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("lslrcigtzjc", model.vmDisks().get(0).targetDiskName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageAzureV2UpdateReplicationProtectedItemInput model =
            new InMageAzureV2UpdateReplicationProtectedItemInput()
                .withRecoveryAzureV1ResourceGroupId("kvfruwkudr")
                .withRecoveryAzureV2ResourceGroupId("pftxudqyeme")
                .withUseManagedDisks("naucmcirtnee")
                .withTargetProximityPlacementGroupId("jauwcgxefnohaitr")
                .withTargetAvailabilityZone("izerw")
                .withTargetVmTags(mapOf("ocefhpriylfmpzt", "asmxubvfbngf", "vhl", "aud"))
                .withTargetManagedDiskTags(mapOf("egpqtmo", "ul", "shqrdgrt", "hvrztnvg", "fa", "mewjzlpyk"))
                .withTargetNicTags(
                    mapOf("polwzrghsrlei", "jcayerzrransyby", "ag", "kfscjfncjwv", "klzmijajw", "qwtltngvmreupt"))
                .withSqlServerLicenseType(SqlServerLicenseType.NOT_SPECIFIED)
                .withVmDisks(
                    Arrays.asList(new UpdateDiskInput().withDiskId("vaghmpy").withTargetDiskName("lslrcigtzjc")));
        model = BinaryData.fromObject(model).toObject(InMageAzureV2UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("kvfruwkudr", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("pftxudqyeme", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("naucmcirtnee", model.useManagedDisks());
        Assertions.assertEquals("jauwcgxefnohaitr", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("izerw", model.targetAvailabilityZone());
        Assertions.assertEquals("asmxubvfbngf", model.targetVmTags().get("ocefhpriylfmpzt"));
        Assertions.assertEquals("ul", model.targetManagedDiskTags().get("egpqtmo"));
        Assertions.assertEquals("jcayerzrransyby", model.targetNicTags().get("polwzrghsrlei"));
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals("vaghmpy", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("lslrcigtzjc", model.vmDisks().get(0).targetDiskName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
