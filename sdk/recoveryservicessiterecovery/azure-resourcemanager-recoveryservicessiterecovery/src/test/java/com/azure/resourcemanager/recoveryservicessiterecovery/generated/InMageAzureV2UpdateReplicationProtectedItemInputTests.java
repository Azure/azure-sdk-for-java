// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageAzureV2UpdateReplicationProtectedItemInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateDiskInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InMageAzureV2UpdateReplicationProtectedItemInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageAzureV2UpdateReplicationProtectedItemInput model = BinaryData.fromString(
            "{\"instanceType\":\"InMageAzureV2\",\"recoveryAzureV1ResourceGroupId\":\"hsxrznmgsdaluyc\",\"recoveryAzureV2ResourceGroupId\":\"efrbhseuerbg\",\"useManagedDisks\":\"ebjludc\",\"targetProximityPlacementGroupId\":\"tujraxdtpryjm\",\"targetAvailabilityZone\":\"nsewouxl\",\"targetVmTags\":{\"qqylmpctwjwds\":\"vvyljurkepose\"},\"targetManagedDiskTags\":{\"howgomvvhxo\":\"mkxerxxxoteeh\"},\"targetNicTags\":{\"pxraqaw\":\"bap\"},\"sqlServerLicenseType\":\"PAYG\",\"vmDisks\":[{\"diskId\":\"fey\",\"targetDiskName\":\"locvvujexayglx\"}]}")
            .toObject(InMageAzureV2UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("hsxrznmgsdaluyc", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("efrbhseuerbg", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("ebjludc", model.useManagedDisks());
        Assertions.assertEquals("tujraxdtpryjm", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("nsewouxl", model.targetAvailabilityZone());
        Assertions.assertEquals("vvyljurkepose", model.targetVmTags().get("qqylmpctwjwds"));
        Assertions.assertEquals("mkxerxxxoteeh", model.targetManagedDiskTags().get("howgomvvhxo"));
        Assertions.assertEquals("bap", model.targetNicTags().get("pxraqaw"));
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals("fey", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("locvvujexayglx", model.vmDisks().get(0).targetDiskName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageAzureV2UpdateReplicationProtectedItemInput model = new InMageAzureV2UpdateReplicationProtectedItemInput()
            .withRecoveryAzureV1ResourceGroupId("hsxrznmgsdaluyc")
            .withRecoveryAzureV2ResourceGroupId("efrbhseuerbg")
            .withUseManagedDisks("ebjludc")
            .withTargetProximityPlacementGroupId("tujraxdtpryjm")
            .withTargetAvailabilityZone("nsewouxl")
            .withTargetVmTags(mapOf("qqylmpctwjwds", "vvyljurkepose"))
            .withTargetManagedDiskTags(mapOf("howgomvvhxo", "mkxerxxxoteeh"))
            .withTargetNicTags(mapOf("pxraqaw", "bap"))
            .withSqlServerLicenseType(SqlServerLicenseType.PAYG)
            .withVmDisks(Arrays.asList(new UpdateDiskInput().withDiskId("fey").withTargetDiskName("locvvujexayglx")));
        model = BinaryData.fromObject(model).toObject(InMageAzureV2UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("hsxrznmgsdaluyc", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("efrbhseuerbg", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("ebjludc", model.useManagedDisks());
        Assertions.assertEquals("tujraxdtpryjm", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("nsewouxl", model.targetAvailabilityZone());
        Assertions.assertEquals("vvyljurkepose", model.targetVmTags().get("qqylmpctwjwds"));
        Assertions.assertEquals("mkxerxxxoteeh", model.targetManagedDiskTags().get("howgomvvhxo"));
        Assertions.assertEquals("bap", model.targetNicTags().get("pxraqaw"));
        Assertions.assertEquals(SqlServerLicenseType.PAYG, model.sqlServerLicenseType());
        Assertions.assertEquals("fey", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("locvvujexayglx", model.vmDisks().get(0).targetDiskName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
