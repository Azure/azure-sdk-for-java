// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageAzureV2UpdateReplicationProtectedItemInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateDiskInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InMageAzureV2UpdateReplicationProtectedItemInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageAzureV2UpdateReplicationProtectedItemInput model = BinaryData.fromString(
            "{\"instanceType\":\"InMageAzureV2\",\"recoveryAzureV1ResourceGroupId\":\"llrqmtlpbyxro\",\"recoveryAzureV2ResourceGroupId\":\"uyqyp\",\"useManagedDisks\":\"mnoiicsudy\",\"targetProximityPlacementGroupId\":\"rjjtalxrdsjrho\",\"targetAvailabilityZone\":\"qwgusxxhdo\",\"targetVmTags\":{\"bdmvsby\":\"wyblv\",\"kmkwjfbo\":\"daelqpv\",\"v\":\"loggdusxursu\",\"qrizfwihvaan\":\"xcjkcoqwczsy\"},\"targetManagedDiskTags\":{\"bbaex\":\"nhjrfdmfd\",\"vmuafmc\":\"jfwtgdfkkaui\",\"vpltidajjvy\":\"fedyuep\"},\"targetNicTags\":{\"yelsyasvfnk\":\"cfkumcfjxo\",\"jekrknfd\":\"myg\",\"lcr\":\"ugjqyckgtxkrdt\",\"tcsubmzoo\":\"jdkl\"},\"sqlServerLicenseType\":\"NotSpecified\",\"vmDisks\":[{\"diskId\":\"chkxfpwhdysl\",\"targetDiskName\":\"lglmnnkkwayqsh\"}]}")
            .toObject(InMageAzureV2UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("llrqmtlpbyxro", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("uyqyp", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("mnoiicsudy", model.useManagedDisks());
        Assertions.assertEquals("rjjtalxrdsjrho", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("qwgusxxhdo", model.targetAvailabilityZone());
        Assertions.assertEquals("wyblv", model.targetVmTags().get("bdmvsby"));
        Assertions.assertEquals("nhjrfdmfd", model.targetManagedDiskTags().get("bbaex"));
        Assertions.assertEquals("cfkumcfjxo", model.targetNicTags().get("yelsyasvfnk"));
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals("chkxfpwhdysl", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("lglmnnkkwayqsh", model.vmDisks().get(0).targetDiskName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageAzureV2UpdateReplicationProtectedItemInput model = new InMageAzureV2UpdateReplicationProtectedItemInput()
            .withRecoveryAzureV1ResourceGroupId("llrqmtlpbyxro").withRecoveryAzureV2ResourceGroupId("uyqyp")
            .withUseManagedDisks("mnoiicsudy").withTargetProximityPlacementGroupId("rjjtalxrdsjrho")
            .withTargetAvailabilityZone("qwgusxxhdo")
            .withTargetVmTags(
                mapOf("bdmvsby", "wyblv", "kmkwjfbo", "daelqpv", "v", "loggdusxursu", "qrizfwihvaan", "xcjkcoqwczsy"))
            .withTargetManagedDiskTags(mapOf("bbaex", "nhjrfdmfd", "vmuafmc", "jfwtgdfkkaui", "vpltidajjvy", "fedyuep"))
            .withTargetNicTags(
                mapOf("yelsyasvfnk", "cfkumcfjxo", "jekrknfd", "myg", "lcr", "ugjqyckgtxkrdt", "tcsubmzoo", "jdkl"))
            .withSqlServerLicenseType(SqlServerLicenseType.NOT_SPECIFIED).withVmDisks(
                Arrays.asList(new UpdateDiskInput().withDiskId("chkxfpwhdysl").withTargetDiskName("lglmnnkkwayqsh")));
        model = BinaryData.fromObject(model).toObject(InMageAzureV2UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("llrqmtlpbyxro", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("uyqyp", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("mnoiicsudy", model.useManagedDisks());
        Assertions.assertEquals("rjjtalxrdsjrho", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("qwgusxxhdo", model.targetAvailabilityZone());
        Assertions.assertEquals("wyblv", model.targetVmTags().get("bdmvsby"));
        Assertions.assertEquals("nhjrfdmfd", model.targetManagedDiskTags().get("bbaex"));
        Assertions.assertEquals("cfkumcfjxo", model.targetNicTags().get("yelsyasvfnk"));
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals("chkxfpwhdysl", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("lglmnnkkwayqsh", model.vmDisks().get(0).targetDiskName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
