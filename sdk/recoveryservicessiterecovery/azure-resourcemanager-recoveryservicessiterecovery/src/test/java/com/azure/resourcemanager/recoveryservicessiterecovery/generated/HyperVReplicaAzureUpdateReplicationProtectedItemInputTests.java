// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaAzureUpdateReplicationProtectedItemInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateDiskInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaAzureUpdateReplicationProtectedItemInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaAzureUpdateReplicationProtectedItemInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"HyperVReplicaAzure\",\"recoveryAzureV1ResourceGroupId\":\"iubmom\",\"recoveryAzureV2ResourceGroupId\":\"vvjhvvlrlohewjj\",\"useManagedDisks\":\"jnkdflqion\",\"diskIdToDiskEncryptionMap\":{\"zfz\":\"eq\",\"xrmexznlw\":\"xjoshohtotryegpk\",\"ze\":\"bfokxkhu\",\"yfcemftz\":\"ufgjblcdr\"},\"targetProximityPlacementGroupId\":\"ykyalugek\",\"targetAvailabilityZone\":\"qnhttwdowrczfj\",\"targetVmTags\":{\"cifrhjulrsulwzpf\":\"uxxrkkmhmnulwemp\",\"hhgzotf\":\"usnaw\"},\"targetManagedDiskTags\":{\"ighctxbxmo\":\"rgkoekvzwxxyx\",\"cz\":\"pcqydeykvsk\"},\"targetNicTags\":{\"ikgqaboohxbms\":\"jei\",\"d\":\"ycqsxr\"},\"sqlServerLicenseType\":\"NoLicenseType\",\"vmDisks\":[{\"diskId\":\"qaeo\",\"targetDiskName\":\"jh\"},{\"diskId\":\"ejkbvhhdaurgho\",\"targetDiskName\":\"aexbkhxjxjo\"},{\"diskId\":\"zlqxrkdknk\",\"targetDiskName\":\"ektm\"},{\"diskId\":\"o\",\"targetDiskName\":\"m\"}]}")
                .toObject(HyperVReplicaAzureUpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("iubmom", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("vvjhvvlrlohewjj", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("jnkdflqion", model.useManagedDisks());
        Assertions.assertEquals("eq", model.diskIdToDiskEncryptionMap().get("zfz"));
        Assertions.assertEquals("ykyalugek", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("qnhttwdowrczfj", model.targetAvailabilityZone());
        Assertions.assertEquals("uxxrkkmhmnulwemp", model.targetVmTags().get("cifrhjulrsulwzpf"));
        Assertions.assertEquals("rgkoekvzwxxyx", model.targetManagedDiskTags().get("ighctxbxmo"));
        Assertions.assertEquals("jei", model.targetNicTags().get("ikgqaboohxbms"));
        Assertions.assertEquals(SqlServerLicenseType.NO_LICENSE_TYPE, model.sqlServerLicenseType());
        Assertions.assertEquals("qaeo", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("jh", model.vmDisks().get(0).targetDiskName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaAzureUpdateReplicationProtectedItemInput model =
            new HyperVReplicaAzureUpdateReplicationProtectedItemInput()
                .withRecoveryAzureV1ResourceGroupId("iubmom")
                .withRecoveryAzureV2ResourceGroupId("vvjhvvlrlohewjj")
                .withUseManagedDisks("jnkdflqion")
                .withDiskIdToDiskEncryptionMap(
                    mapOf("zfz", "eq", "xrmexznlw", "xjoshohtotryegpk", "ze", "bfokxkhu", "yfcemftz", "ufgjblcdr"))
                .withTargetProximityPlacementGroupId("ykyalugek")
                .withTargetAvailabilityZone("qnhttwdowrczfj")
                .withTargetVmTags(mapOf("cifrhjulrsulwzpf", "uxxrkkmhmnulwemp", "hhgzotf", "usnaw"))
                .withTargetManagedDiskTags(mapOf("ighctxbxmo", "rgkoekvzwxxyx", "cz", "pcqydeykvsk"))
                .withTargetNicTags(mapOf("ikgqaboohxbms", "jei", "d", "ycqsxr"))
                .withSqlServerLicenseType(SqlServerLicenseType.NO_LICENSE_TYPE)
                .withVmDisks(
                    Arrays
                        .asList(
                            new UpdateDiskInput().withDiskId("qaeo").withTargetDiskName("jh"),
                            new UpdateDiskInput().withDiskId("ejkbvhhdaurgho").withTargetDiskName("aexbkhxjxjo"),
                            new UpdateDiskInput().withDiskId("zlqxrkdknk").withTargetDiskName("ektm"),
                            new UpdateDiskInput().withDiskId("o").withTargetDiskName("m")));
        model = BinaryData.fromObject(model).toObject(HyperVReplicaAzureUpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("iubmom", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("vvjhvvlrlohewjj", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("jnkdflqion", model.useManagedDisks());
        Assertions.assertEquals("eq", model.diskIdToDiskEncryptionMap().get("zfz"));
        Assertions.assertEquals("ykyalugek", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("qnhttwdowrczfj", model.targetAvailabilityZone());
        Assertions.assertEquals("uxxrkkmhmnulwemp", model.targetVmTags().get("cifrhjulrsulwzpf"));
        Assertions.assertEquals("rgkoekvzwxxyx", model.targetManagedDiskTags().get("ighctxbxmo"));
        Assertions.assertEquals("jei", model.targetNicTags().get("ikgqaboohxbms"));
        Assertions.assertEquals(SqlServerLicenseType.NO_LICENSE_TYPE, model.sqlServerLicenseType());
        Assertions.assertEquals("qaeo", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("jh", model.vmDisks().get(0).targetDiskName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
