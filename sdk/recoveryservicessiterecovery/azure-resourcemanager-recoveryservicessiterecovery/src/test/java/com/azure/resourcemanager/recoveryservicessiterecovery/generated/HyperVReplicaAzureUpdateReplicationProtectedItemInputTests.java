// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaAzureUpdateReplicationProtectedItemInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LinuxLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SqlServerLicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateDiskInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaAzureUpdateReplicationProtectedItemInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaAzureUpdateReplicationProtectedItemInput model = BinaryData.fromString(
            "{\"instanceType\":\"HyperVReplicaAzure\",\"recoveryAzureV1ResourceGroupId\":\"ddhlrufzcqyj\",\"recoveryAzureV2ResourceGroupId\":\"rfuiocusel\",\"useManagedDisks\":\"rsazrhxud\",\"diskIdToDiskEncryptionMap\":{\"dmdlgyqixokw\":\"dtffisjmrkkhm\",\"ag\":\"jawh\"},\"targetProximityPlacementGroupId\":\"fqqdl\",\"targetAvailabilityZone\":\"myolcaymjchtvs\",\"targetVmTags\":{\"okbczothymgob\":\"aqdnzyzawatuwq\"},\"targetManagedDiskTags\":{\"eakhtmhobcya\":\"snwgwimaa\"},\"targetNicTags\":{\"vkhgv\":\"vq\",\"ymhcctopuo\":\"ogxkfnaoa\",\"hquhczygxvhajp\":\"yrnskb\"},\"sqlServerLicenseType\":\"NotSpecified\",\"linuxLicenseType\":\"NotSpecified\",\"userSelectedOSName\":\"whscozawmv\",\"vmDisks\":[{\"diskId\":\"mpk\",\"targetDiskName\":\"wirfljf\"},{\"diskId\":\"wxqouoxudnmc\",\"targetDiskName\":\"prhknqiijg\"}]}")
            .toObject(HyperVReplicaAzureUpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("ddhlrufzcqyj", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("rfuiocusel", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("rsazrhxud", model.useManagedDisks());
        Assertions.assertEquals("dtffisjmrkkhm", model.diskIdToDiskEncryptionMap().get("dmdlgyqixokw"));
        Assertions.assertEquals("fqqdl", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("myolcaymjchtvs", model.targetAvailabilityZone());
        Assertions.assertEquals("aqdnzyzawatuwq", model.targetVmTags().get("okbczothymgob"));
        Assertions.assertEquals("snwgwimaa", model.targetManagedDiskTags().get("eakhtmhobcya"));
        Assertions.assertEquals("vq", model.targetNicTags().get("vkhgv"));
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals(LinuxLicenseType.NOT_SPECIFIED, model.linuxLicenseType());
        Assertions.assertEquals("whscozawmv", model.userSelectedOSName());
        Assertions.assertEquals("mpk", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("wirfljf", model.vmDisks().get(0).targetDiskName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaAzureUpdateReplicationProtectedItemInput model
            = new HyperVReplicaAzureUpdateReplicationProtectedItemInput()
                .withRecoveryAzureV1ResourceGroupId("ddhlrufzcqyj")
                .withRecoveryAzureV2ResourceGroupId("rfuiocusel")
                .withUseManagedDisks("rsazrhxud")
                .withDiskIdToDiskEncryptionMap(mapOf("dmdlgyqixokw", "dtffisjmrkkhm", "ag", "jawh"))
                .withTargetProximityPlacementGroupId("fqqdl")
                .withTargetAvailabilityZone("myolcaymjchtvs")
                .withTargetVmTags(mapOf("okbczothymgob", "aqdnzyzawatuwq"))
                .withTargetManagedDiskTags(mapOf("eakhtmhobcya", "snwgwimaa"))
                .withTargetNicTags(mapOf("vkhgv", "vq", "ymhcctopuo", "ogxkfnaoa", "hquhczygxvhajp", "yrnskb"))
                .withSqlServerLicenseType(SqlServerLicenseType.NOT_SPECIFIED)
                .withLinuxLicenseType(LinuxLicenseType.NOT_SPECIFIED)
                .withUserSelectedOSName("whscozawmv")
                .withVmDisks(Arrays.asList(new UpdateDiskInput().withDiskId("mpk").withTargetDiskName("wirfljf"),
                    new UpdateDiskInput().withDiskId("wxqouoxudnmc").withTargetDiskName("prhknqiijg")));
        model = BinaryData.fromObject(model).toObject(HyperVReplicaAzureUpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("ddhlrufzcqyj", model.recoveryAzureV1ResourceGroupId());
        Assertions.assertEquals("rfuiocusel", model.recoveryAzureV2ResourceGroupId());
        Assertions.assertEquals("rsazrhxud", model.useManagedDisks());
        Assertions.assertEquals("dtffisjmrkkhm", model.diskIdToDiskEncryptionMap().get("dmdlgyqixokw"));
        Assertions.assertEquals("fqqdl", model.targetProximityPlacementGroupId());
        Assertions.assertEquals("myolcaymjchtvs", model.targetAvailabilityZone());
        Assertions.assertEquals("aqdnzyzawatuwq", model.targetVmTags().get("okbczothymgob"));
        Assertions.assertEquals("snwgwimaa", model.targetManagedDiskTags().get("eakhtmhobcya"));
        Assertions.assertEquals("vq", model.targetNicTags().get("vkhgv"));
        Assertions.assertEquals(SqlServerLicenseType.NOT_SPECIFIED, model.sqlServerLicenseType());
        Assertions.assertEquals(LinuxLicenseType.NOT_SPECIFIED, model.linuxLicenseType());
        Assertions.assertEquals("whscozawmv", model.userSelectedOSName());
        Assertions.assertEquals("mpk", model.vmDisks().get(0).diskId());
        Assertions.assertEquals("wirfljf", model.vmDisks().get(0).targetDiskName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
