// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AddRecoveryServicesProviderInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AgentVersionStatus;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.IdentityProviderInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryServicesProvider;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryServicesProvidersCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"fabricType\":\"se\",\"friendlyName\":\"pvesorsbegclmexa\",\"providerVersion\":\"qzyhzydyvtuqvi\",\"serverVersion\":\"unssky\",\"providerVersionState\":\"gtvjxsocsvje\",\"providerVersionExpiryDate\":\"2021-10-27T23:46:30Z\",\"fabricFriendlyName\":\"hxzjdcwuzs\",\"lastHeartBeat\":\"2021-07-24T02:05:08Z\",\"connectionStatus\":\"ixecmasjnfgn\",\"protectedItemCount\":407967322,\"allowedScenarios\":[\"eeyv\",\"xbfckmoal\"],\"healthErrorDetails\":[],\"draIdentifier\":\"wxtxuzhvojyf\",\"machineId\":\"flbkjcdz\",\"machineName\":\"ygtc\",\"biosId\":\"cj\",\"authenticationIdentityDetails\":{\"tenantId\":\"ubaldjcgldryvlr\",\"applicationId\":\"bhzirmx\",\"objectId\":\"ujbfomfboz\",\"audience\":\"yxefp\",\"aadAuthority\":\"c\"},\"resourceAccessIdentityDetails\":{\"tenantId\":\"njjthpsnxebycym\",\"applicationId\":\"hxu\",\"objectId\":\"n\",\"audience\":\"sebcxno\",\"aadAuthority\":\"pdyzssjlmykdy\"},\"dataPlaneAuthenticationIdentityDetails\":{\"tenantId\":\"gspjlf\",\"applicationId\":\"j\",\"objectId\":\"wqxcrb\",\"audience\":\"gyoimmsszz\",\"aadAuthority\":\"t\"},\"providerVersionDetails\":{\"version\":\"gnhtvagwnnwcnvp\",\"expiryDate\":\"2021-05-22T21:26:02Z\",\"status\":\"Deprecated\"}},\"location\":\"kjvdryknkxiox\",\"id\":\"nrjlqdoqejexf\",\"name\":\"lhuhdkubgyw\",\"type\":\"drklpdyehjrwc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RecoveryServicesProvider response =
            manager
                .replicationRecoveryServicesProviders()
                .define("nucqxhpaqo")
                .withExistingReplicationFabric("nxaj", "tcdf", "zxaoxlhmvjcnnls")
                .withProperties(
                    new AddRecoveryServicesProviderInputProperties()
                        .withMachineName("bvejo")
                        .withMachineId("oxovlz")
                        .withBiosId("le")
                        .withAuthenticationIdentityInput(
                            new IdentityProviderInput()
                                .withTenantId("dkqdlq")
                                .withApplicationId("hntqrykkxakruup")
                                .withObjectId("iicgvpz")
                                .withAudience("yxccnpxie")
                                .withAadAuthority("ac"))
                        .withResourceAccessIdentityInput(
                            new IdentityProviderInput()
                                .withTenantId("ztjekxsnnbrys")
                                .withApplicationId("ktfmocnq")
                                .withObjectId("blrtbofzghfuif")
                                .withAudience("xu")
                                .withAadAuthority("ynohocqxug"))
                        .withDataPlaneAuthenticationIdentityInput(
                            new IdentityProviderInput()
                                .withTenantId("ugdcr")
                                .withApplicationId("fbplv")
                                .withObjectId("mhurosdjlzbdmddg")
                                .withAudience("qe")
                                .withAadAuthority("y")))
                .create();

        Assertions.assertEquals("se", response.properties().fabricType());
        Assertions.assertEquals("pvesorsbegclmexa", response.properties().friendlyName());
        Assertions.assertEquals("qzyhzydyvtuqvi", response.properties().providerVersion());
        Assertions.assertEquals("unssky", response.properties().serverVersion());
        Assertions.assertEquals("gtvjxsocsvje", response.properties().providerVersionState());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-27T23:46:30Z"), response.properties().providerVersionExpiryDate());
        Assertions.assertEquals("hxzjdcwuzs", response.properties().fabricFriendlyName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T02:05:08Z"), response.properties().lastHeartBeat());
        Assertions.assertEquals("ixecmasjnfgn", response.properties().connectionStatus());
        Assertions.assertEquals(407967322, response.properties().protectedItemCount());
        Assertions.assertEquals("eeyv", response.properties().allowedScenarios().get(0));
        Assertions.assertEquals("wxtxuzhvojyf", response.properties().draIdentifier());
        Assertions.assertEquals("flbkjcdz", response.properties().machineId());
        Assertions.assertEquals("ygtc", response.properties().machineName());
        Assertions.assertEquals("cj", response.properties().biosId());
        Assertions.assertEquals("ubaldjcgldryvlr", response.properties().authenticationIdentityDetails().tenantId());
        Assertions.assertEquals("bhzirmx", response.properties().authenticationIdentityDetails().applicationId());
        Assertions.assertEquals("ujbfomfboz", response.properties().authenticationIdentityDetails().objectId());
        Assertions.assertEquals("yxefp", response.properties().authenticationIdentityDetails().audience());
        Assertions.assertEquals("c", response.properties().authenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("njjthpsnxebycym", response.properties().resourceAccessIdentityDetails().tenantId());
        Assertions.assertEquals("hxu", response.properties().resourceAccessIdentityDetails().applicationId());
        Assertions.assertEquals("n", response.properties().resourceAccessIdentityDetails().objectId());
        Assertions.assertEquals("sebcxno", response.properties().resourceAccessIdentityDetails().audience());
        Assertions.assertEquals("pdyzssjlmykdy", response.properties().resourceAccessIdentityDetails().aadAuthority());
        Assertions.assertEquals("gspjlf", response.properties().dataPlaneAuthenticationIdentityDetails().tenantId());
        Assertions.assertEquals("j", response.properties().dataPlaneAuthenticationIdentityDetails().applicationId());
        Assertions.assertEquals("wqxcrb", response.properties().dataPlaneAuthenticationIdentityDetails().objectId());
        Assertions
            .assertEquals("gyoimmsszz", response.properties().dataPlaneAuthenticationIdentityDetails().audience());
        Assertions.assertEquals("t", response.properties().dataPlaneAuthenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("gnhtvagwnnwcnvp", response.properties().providerVersionDetails().version());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-22T21:26:02Z"),
                response.properties().providerVersionDetails().expiryDate());
        Assertions.assertEquals(AgentVersionStatus.DEPRECATED, response.properties().providerVersionDetails().status());
        Assertions.assertEquals("kjvdryknkxiox", response.location());
    }
}
