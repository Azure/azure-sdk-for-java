// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.ProtectionContainerMappingInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ProtectionContainerMappingCollection;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ProtectionContainerMappingProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ProtectionContainerMappingCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProtectionContainerMappingCollection model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"targetProtectionContainerId\":\"luiqtqzfavyvnqq\",\"targetProtectionContainerFriendlyName\":\"aryeu\",\"health\":\"kq\",\"healthErrorDetails\":[],\"policyId\":\"gzslesjcbhernnti\",\"state\":\"djc\",\"sourceProtectionContainerFriendlyName\":\"quwrbehwag\",\"sourceFabricFriendlyName\":\"buffkmrqemvvhm\",\"targetFabricFriendlyName\":\"drjf\",\"policyFriendlyName\":\"acoebj\"},\"location\":\"wzcjznmwcpmgua\",\"id\":\"draufactkah\",\"name\":\"ovajjziuxxps\",\"type\":\"neekulfg\"},{\"properties\":{\"targetProtectionContainerId\":\"ubkwdle\",\"targetProtectionContainerFriendlyName\":\"d\",\"health\":\"ujbazpjuohminyfl\",\"healthErrorDetails\":[],\"policyId\":\"wmd\",\"state\":\"wpklvxw\",\"sourceProtectionContainerFriendlyName\":\"gdxpg\",\"sourceFabricFriendlyName\":\"chisze\",\"targetFabricFriendlyName\":\"nb\",\"policyFriendlyName\":\"rxgibbd\"},\"location\":\"confozauors\",\"id\":\"kokwbqplhlvnu\",\"name\":\"epzl\",\"type\":\"phwzsoldweyuqdu\"},{\"properties\":{\"targetProtectionContainerId\":\"nnrwrbiork\",\"targetProtectionContainerFriendlyName\":\"lywjhh\",\"health\":\"hxmsivfo\",\"healthErrorDetails\":[],\"policyId\":\"ox\",\"state\":\"dufiq\",\"sourceProtectionContainerFriendlyName\":\"ieuzaofjchvcyyy\",\"sourceFabricFriendlyName\":\"gdotcubiipuipwo\",\"targetFabricFriendlyName\":\"nmacj\",\"policyFriendlyName\":\"nizshqvcim\"},\"location\":\"vfgmblrrilby\",\"id\":\"dxsm\",\"name\":\"ccwr\",\"type\":\"fscjfnynszquji\"}],\"nextLink\":\"voqyt\"}")
                .toObject(ProtectionContainerMappingCollection.class);
        Assertions.assertEquals("luiqtqzfavyvnqq", model.value().get(0).properties().targetProtectionContainerId());
        Assertions.assertEquals("aryeu", model.value().get(0).properties().targetProtectionContainerFriendlyName());
        Assertions.assertEquals("kq", model.value().get(0).properties().health());
        Assertions.assertEquals("gzslesjcbhernnti", model.value().get(0).properties().policyId());
        Assertions.assertEquals("djc", model.value().get(0).properties().state());
        Assertions
            .assertEquals("quwrbehwag", model.value().get(0).properties().sourceProtectionContainerFriendlyName());
        Assertions.assertEquals("buffkmrqemvvhm", model.value().get(0).properties().sourceFabricFriendlyName());
        Assertions.assertEquals("drjf", model.value().get(0).properties().targetFabricFriendlyName());
        Assertions.assertEquals("acoebj", model.value().get(0).properties().policyFriendlyName());
        Assertions.assertEquals("wzcjznmwcpmgua", model.value().get(0).location());
        Assertions.assertEquals("voqyt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProtectionContainerMappingCollection model =
            new ProtectionContainerMappingCollection()
                .withValue(
                    Arrays
                        .asList(
                            new ProtectionContainerMappingInner()
                                .withProperties(
                                    new ProtectionContainerMappingProperties()
                                        .withTargetProtectionContainerId("luiqtqzfavyvnqq")
                                        .withTargetProtectionContainerFriendlyName("aryeu")
                                        .withHealth("kq")
                                        .withHealthErrorDetails(Arrays.asList())
                                        .withPolicyId("gzslesjcbhernnti")
                                        .withState("djc")
                                        .withSourceProtectionContainerFriendlyName("quwrbehwag")
                                        .withSourceFabricFriendlyName("buffkmrqemvvhm")
                                        .withTargetFabricFriendlyName("drjf")
                                        .withPolicyFriendlyName("acoebj"))
                                .withLocation("wzcjznmwcpmgua"),
                            new ProtectionContainerMappingInner()
                                .withProperties(
                                    new ProtectionContainerMappingProperties()
                                        .withTargetProtectionContainerId("ubkwdle")
                                        .withTargetProtectionContainerFriendlyName("d")
                                        .withHealth("ujbazpjuohminyfl")
                                        .withHealthErrorDetails(Arrays.asList())
                                        .withPolicyId("wmd")
                                        .withState("wpklvxw")
                                        .withSourceProtectionContainerFriendlyName("gdxpg")
                                        .withSourceFabricFriendlyName("chisze")
                                        .withTargetFabricFriendlyName("nb")
                                        .withPolicyFriendlyName("rxgibbd"))
                                .withLocation("confozauors"),
                            new ProtectionContainerMappingInner()
                                .withProperties(
                                    new ProtectionContainerMappingProperties()
                                        .withTargetProtectionContainerId("nnrwrbiork")
                                        .withTargetProtectionContainerFriendlyName("lywjhh")
                                        .withHealth("hxmsivfo")
                                        .withHealthErrorDetails(Arrays.asList())
                                        .withPolicyId("ox")
                                        .withState("dufiq")
                                        .withSourceProtectionContainerFriendlyName("ieuzaofjchvcyyy")
                                        .withSourceFabricFriendlyName("gdotcubiipuipwo")
                                        .withTargetFabricFriendlyName("nmacj")
                                        .withPolicyFriendlyName("nizshqvcim"))
                                .withLocation("vfgmblrrilby")))
                .withNextLink("voqyt");
        model = BinaryData.fromObject(model).toObject(ProtectionContainerMappingCollection.class);
        Assertions.assertEquals("luiqtqzfavyvnqq", model.value().get(0).properties().targetProtectionContainerId());
        Assertions.assertEquals("aryeu", model.value().get(0).properties().targetProtectionContainerFriendlyName());
        Assertions.assertEquals("kq", model.value().get(0).properties().health());
        Assertions.assertEquals("gzslesjcbhernnti", model.value().get(0).properties().policyId());
        Assertions.assertEquals("djc", model.value().get(0).properties().state());
        Assertions
            .assertEquals("quwrbehwag", model.value().get(0).properties().sourceProtectionContainerFriendlyName());
        Assertions.assertEquals("buffkmrqemvvhm", model.value().get(0).properties().sourceFabricFriendlyName());
        Assertions.assertEquals("drjf", model.value().get(0).properties().targetFabricFriendlyName());
        Assertions.assertEquals("acoebj", model.value().get(0).properties().policyFriendlyName());
        Assertions.assertEquals("wzcjznmwcpmgua", model.value().get(0).location());
        Assertions.assertEquals("voqyt", model.nextLink());
    }
}
