// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReverseReplicationInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReverseReplicationInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReverseReplicationProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsReprotectMockTests {
    @Test
    public void testReprotect() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"onebldxa\",\"protectedItemType\":\"d\",\"protectableItemId\":\"wcn\",\"recoveryServicesProviderId\":\"wxjsjquv\",\"primaryFabricFriendlyName\":\"ufzdtsrpju\",\"primaryFabricProvider\":\"zacrzhnsbylgmgbh\",\"recoveryFabricFriendlyName\":\"czouan\",\"recoveryFabricId\":\"u\",\"primaryProtectionContainerFriendlyName\":\"cxglxoqwb\",\"recoveryProtectionContainerFriendlyName\":\"ilqbzbwbgwzhb\",\"protectionState\":\"ljey\",\"protectionStateDescription\":\"piovnlh\",\"activeLocation\":\"yakzuafapwxsvd\",\"testFailoverState\":\"tjiobni\",\"testFailoverStateDescription\":\"oextqdnwtgntimz\",\"switchProviderState\":\"pbmtbsetkodsq\",\"switchProviderStateDescription\":\"edaakghcrzmm\",\"allowedOperations\":[\"vdhdgdiwmlgs\",\"mfetqjisjmo\",\"zcaqfkakhgk\"],\"replicationHealth\":\"tyycvytvjejqa\",\"failoverHealth\":\"usqpfzxkczbd\",\"healthErrors\":[],\"policyId\":\"imh\",\"policyFriendlyName\":\"ozvoort\",\"lastSuccessfulFailoverTime\":\"2021-08-13T21:54:07Z\",\"lastSuccessfulTestFailoverTime\":\"2021-04-10T00:31:23Z\",\"currentScenario\":{\"scenarioName\":\"yuzly\",\"jobId\":\"scibv\",\"startTime\":\"2021-07-26T15:14:37Z\"},\"failoverRecoveryPointId\":\"ckcafnwqh\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"cnviulby\",\"eventCorrelationId\":\"g\"},\"location\":\"rycwpbgumwhmxp\",\"id\":\"cknsastlpsmgomic\",\"name\":\"trvlv\",\"type\":\"j\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .reprotect(
                    "tozfrfa",
                    "tnnsvrfajy",
                    "ihtibufgz",
                    "zhl",
                    "ctblfehb",
                    new ReverseReplicationInput()
                        .withProperties(
                            new ReverseReplicationInputProperties()
                                .withFailoverDirection("yohrcmeqljxdum")
                                .withProviderSpecificDetails(new ReverseReplicationProviderSpecificInput())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("onebldxa", response.properties().friendlyName());
        Assertions.assertEquals("d", response.properties().protectedItemType());
        Assertions.assertEquals("wcn", response.properties().protectableItemId());
        Assertions.assertEquals("wxjsjquv", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("ufzdtsrpju", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("zacrzhnsbylgmgbh", response.properties().primaryFabricProvider());
        Assertions.assertEquals("czouan", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("u", response.properties().recoveryFabricId());
        Assertions.assertEquals("cxglxoqwb", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("ilqbzbwbgwzhb", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("ljey", response.properties().protectionState());
        Assertions.assertEquals("piovnlh", response.properties().protectionStateDescription());
        Assertions.assertEquals("yakzuafapwxsvd", response.properties().activeLocation());
        Assertions.assertEquals("tjiobni", response.properties().testFailoverState());
        Assertions.assertEquals("oextqdnwtgntimz", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("pbmtbsetkodsq", response.properties().switchProviderState());
        Assertions.assertEquals("edaakghcrzmm", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("vdhdgdiwmlgs", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("tyycvytvjejqa", response.properties().replicationHealth());
        Assertions.assertEquals("usqpfzxkczbd", response.properties().failoverHealth());
        Assertions.assertEquals("imh", response.properties().policyId());
        Assertions.assertEquals("ozvoort", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-13T21:54:07Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-10T00:31:23Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("yuzly", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("scibv", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-26T15:14:37Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("ckcafnwqh", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("cnviulby", response.properties().recoveryContainerId());
        Assertions.assertEquals("g", response.properties().eventCorrelationId());
        Assertions.assertEquals("rycwpbgumwhmxp", response.location());
    }
}
