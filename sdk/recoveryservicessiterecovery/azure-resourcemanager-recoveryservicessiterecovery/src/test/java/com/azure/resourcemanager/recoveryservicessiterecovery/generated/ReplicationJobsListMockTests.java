// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Job;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationJobsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"activityId\":\"pxldlnocs\",\"scenarioName\":\"gimizlukj\",\"friendlyName\":\"mgksrlmspppoeszt\",\"state\":\"tryjsk\",\"stateDescription\":\"ylgzzuqixpsy\",\"tasks\":[],\"errors\":[],\"startTime\":\"2021-01-07T17:00:13Z\",\"endTime\":\"2021-01-11T17:36:27Z\",\"allowedActions\":[\"hxdhko\"],\"targetObjectId\":\"brhgnaka\",\"targetObjectName\":\"scmne\",\"targetInstanceType\":\"lumqeumzyyhmgq\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{}}},\"location\":\"jqutx\",\"id\":\"bgbzgfhzdzahk\",\"name\":\"xvcbicfecthotbk\",\"type\":\"whz\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Job> response =
            manager.replicationJobs().list("abdjuljgxotu", "a", "kiyaosthulzugi", Context.NONE);

        Assertions.assertEquals("pxldlnocs", response.iterator().next().properties().activityId());
        Assertions.assertEquals("gimizlukj", response.iterator().next().properties().scenarioName());
        Assertions.assertEquals("mgksrlmspppoeszt", response.iterator().next().properties().friendlyName());
        Assertions.assertEquals("tryjsk", response.iterator().next().properties().state());
        Assertions.assertEquals("ylgzzuqixpsy", response.iterator().next().properties().stateDescription());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-07T17:00:13Z"), response.iterator().next().properties().startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-11T17:36:27Z"), response.iterator().next().properties().endTime());
        Assertions.assertEquals("hxdhko", response.iterator().next().properties().allowedActions().get(0));
        Assertions.assertEquals("brhgnaka", response.iterator().next().properties().targetObjectId());
        Assertions.assertEquals("scmne", response.iterator().next().properties().targetObjectName());
        Assertions.assertEquals("lumqeumzyyhmgq", response.iterator().next().properties().targetInstanceType());
        Assertions.assertEquals("jqutx", response.iterator().next().location());
    }
}
