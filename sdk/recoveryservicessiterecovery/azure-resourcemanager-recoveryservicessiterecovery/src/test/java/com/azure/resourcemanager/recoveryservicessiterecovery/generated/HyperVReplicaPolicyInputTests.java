// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaPolicyInput;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HyperVReplicaPolicyInputTests {
    @Test
    public void testDeserialize() {
        HyperVReplicaPolicyInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"HyperVReplica2012\",\"recoveryPoints\":1540498633,\"applicationConsistentSnapshotFrequencyInHours\":637412167,\"compression\":\"qfukpeexpgeumi\",\"initialReplicationMethod\":\"wuit\",\"onlineReplicationStartTime\":\"exyionofninbd\",\"offlineReplicationImportPath\":\"s\",\"offlineReplicationExportPath\":\"wqqrsmpcbbprtuga\",\"replicationPort\":2066287030,\"allowedAuthenticationType\":45512614,\"replicaDeletion\":\"ks\"}")
                .toObject(HyperVReplicaPolicyInput.class);
        Assertions.assertEquals(1540498633, model.recoveryPoints());
        Assertions.assertEquals(637412167, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("qfukpeexpgeumi", model.compression());
        Assertions.assertEquals("wuit", model.initialReplicationMethod());
        Assertions.assertEquals("exyionofninbd", model.onlineReplicationStartTime());
        Assertions.assertEquals("s", model.offlineReplicationImportPath());
        Assertions.assertEquals("wqqrsmpcbbprtuga", model.offlineReplicationExportPath());
        Assertions.assertEquals(2066287030, model.replicationPort());
        Assertions.assertEquals(45512614, model.allowedAuthenticationType());
        Assertions.assertEquals("ks", model.replicaDeletion());
    }

    @Test
    public void testSerialize() {
        HyperVReplicaPolicyInput model =
            new HyperVReplicaPolicyInput()
                .withRecoveryPoints(1540498633)
                .withApplicationConsistentSnapshotFrequencyInHours(637412167)
                .withCompression("qfukpeexpgeumi")
                .withInitialReplicationMethod("wuit")
                .withOnlineReplicationStartTime("exyionofninbd")
                .withOfflineReplicationImportPath("s")
                .withOfflineReplicationExportPath("wqqrsmpcbbprtuga")
                .withReplicationPort(2066287030)
                .withAllowedAuthenticationType(45512614)
                .withReplicaDeletion("ks");
        model = BinaryData.fromObject(model).toObject(HyperVReplicaPolicyInput.class);
        Assertions.assertEquals(1540498633, model.recoveryPoints());
        Assertions.assertEquals(637412167, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("qfukpeexpgeumi", model.compression());
        Assertions.assertEquals("wuit", model.initialReplicationMethod());
        Assertions.assertEquals("exyionofninbd", model.onlineReplicationStartTime());
        Assertions.assertEquals("s", model.offlineReplicationImportPath());
        Assertions.assertEquals("wqqrsmpcbbprtuga", model.offlineReplicationExportPath());
        Assertions.assertEquals(2066287030, model.replicationPort());
        Assertions.assertEquals(45512614, model.allowedAuthenticationType());
        Assertions.assertEquals("ks", model.replicaDeletion());
    }
}
