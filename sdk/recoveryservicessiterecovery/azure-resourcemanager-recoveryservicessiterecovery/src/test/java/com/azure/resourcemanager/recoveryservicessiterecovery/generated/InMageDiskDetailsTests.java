// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskVolumeDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageDiskDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class InMageDiskDetailsTests {
    @Test
    public void testDeserialize() {
        InMageDiskDetails model =
            BinaryData
                .fromString(
                    "{\"diskId\":\"yezslpu\",\"diskName\":\"cbdsvalpnptwtrk\",\"diskSizeInMB\":\"pazwug\",\"diskType\":\"qvn\",\"diskConfiguration\":\"bfe\",\"volumeList\":[{\"label\":\"iuhzzgqlmfa\",\"name\":\"z\"},{\"label\":\"udjpxpqht\",\"name\":\"hnmhkrezsdsux\"},{\"label\":\"qdgcrux\",\"name\":\"inymmqgwokmikp\"}]}")
                .toObject(InMageDiskDetails.class);
        Assertions.assertEquals("yezslpu", model.diskId());
        Assertions.assertEquals("cbdsvalpnptwtrk", model.diskName());
        Assertions.assertEquals("pazwug", model.diskSizeInMB());
        Assertions.assertEquals("qvn", model.diskType());
        Assertions.assertEquals("bfe", model.diskConfiguration());
        Assertions.assertEquals("iuhzzgqlmfa", model.volumeList().get(0).label());
        Assertions.assertEquals("z", model.volumeList().get(0).name());
    }

    @Test
    public void testSerialize() {
        InMageDiskDetails model =
            new InMageDiskDetails()
                .withDiskId("yezslpu")
                .withDiskName("cbdsvalpnptwtrk")
                .withDiskSizeInMB("pazwug")
                .withDiskType("qvn")
                .withDiskConfiguration("bfe")
                .withVolumeList(
                    Arrays
                        .asList(
                            new DiskVolumeDetails().withLabel("iuhzzgqlmfa").withName("z"),
                            new DiskVolumeDetails().withLabel("udjpxpqht").withName("hnmhkrezsdsux"),
                            new DiskVolumeDetails().withLabel("qdgcrux").withName("inymmqgwokmikp")));
        model = BinaryData.fromObject(model).toObject(InMageDiskDetails.class);
        Assertions.assertEquals("yezslpu", model.diskId());
        Assertions.assertEquals("cbdsvalpnptwtrk", model.diskName());
        Assertions.assertEquals("pazwug", model.diskSizeInMB());
        Assertions.assertEquals("qvn", model.diskType());
        Assertions.assertEquals("bfe", model.diskConfiguration());
        Assertions.assertEquals("iuhzzgqlmfa", model.volumeList().get(0).label());
        Assertions.assertEquals("z", model.volumeList().get(0).name());
    }
}
