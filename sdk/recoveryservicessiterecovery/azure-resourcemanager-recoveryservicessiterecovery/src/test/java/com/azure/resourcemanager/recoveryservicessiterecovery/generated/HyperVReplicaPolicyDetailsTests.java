// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaPolicyDetails;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HyperVReplicaPolicyDetailsTests {
    @Test
    public void testDeserialize() {
        HyperVReplicaPolicyDetails model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"HyperVReplica2012\",\"recoveryPoints\":885053430,\"applicationConsistentSnapshotFrequencyInHours\":158010790,\"compression\":\"abzfivf\",\"initialReplicationMethod\":\"pysthhz\",\"onlineReplicationStartTime\":\"jfwyyrlhgenuze\",\"offlineReplicationImportPath\":\"vkvebaqsz\",\"offlineReplicationExportPath\":\"rzl\",\"replicationPort\":1511536365,\"allowedAuthenticationType\":1995189335,\"replicaDeletionOption\":\"mihzpimcqrhn\"}")
                .toObject(HyperVReplicaPolicyDetails.class);
        Assertions.assertEquals(885053430, model.recoveryPoints());
        Assertions.assertEquals(158010790, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("abzfivf", model.compression());
        Assertions.assertEquals("pysthhz", model.initialReplicationMethod());
        Assertions.assertEquals("jfwyyrlhgenuze", model.onlineReplicationStartTime());
        Assertions.assertEquals("vkvebaqsz", model.offlineReplicationImportPath());
        Assertions.assertEquals("rzl", model.offlineReplicationExportPath());
        Assertions.assertEquals(1511536365, model.replicationPort());
        Assertions.assertEquals(1995189335, model.allowedAuthenticationType());
        Assertions.assertEquals("mihzpimcqrhn", model.replicaDeletionOption());
    }

    @Test
    public void testSerialize() {
        HyperVReplicaPolicyDetails model =
            new HyperVReplicaPolicyDetails()
                .withRecoveryPoints(885053430)
                .withApplicationConsistentSnapshotFrequencyInHours(158010790)
                .withCompression("abzfivf")
                .withInitialReplicationMethod("pysthhz")
                .withOnlineReplicationStartTime("jfwyyrlhgenuze")
                .withOfflineReplicationImportPath("vkvebaqsz")
                .withOfflineReplicationExportPath("rzl")
                .withReplicationPort(1511536365)
                .withAllowedAuthenticationType(1995189335)
                .withReplicaDeletionOption("mihzpimcqrhn");
        model = BinaryData.fromObject(model).toObject(HyperVReplicaPolicyDetails.class);
        Assertions.assertEquals(885053430, model.recoveryPoints());
        Assertions.assertEquals(158010790, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("abzfivf", model.compression());
        Assertions.assertEquals("pysthhz", model.initialReplicationMethod());
        Assertions.assertEquals("jfwyyrlhgenuze", model.onlineReplicationStartTime());
        Assertions.assertEquals("vkvebaqsz", model.offlineReplicationImportPath());
        Assertions.assertEquals("rzl", model.offlineReplicationExportPath());
        Assertions.assertEquals(1511536365, model.replicationPort());
        Assertions.assertEquals(1995189335, model.allowedAuthenticationType());
        Assertions.assertEquals("mihzpimcqrhn", model.replicaDeletionOption());
    }
}
