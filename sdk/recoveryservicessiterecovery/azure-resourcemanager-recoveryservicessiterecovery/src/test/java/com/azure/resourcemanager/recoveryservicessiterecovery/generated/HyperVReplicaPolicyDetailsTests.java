// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaPolicyDetails;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaPolicyDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaPolicyDetails model = BinaryData.fromString(
            "{\"instanceType\":\"HyperVReplica2012\",\"recoveryPoints\":1238631626,\"applicationConsistentSnapshotFrequencyInHours\":247631176,\"compression\":\"tkujsqycm\",\"initialReplicationMethod\":\"xfabl\",\"onlineReplicationStartTime\":\"pwbmwhria\",\"offlineReplicationImportPath\":\"wrycgnwpl\",\"offlineReplicationExportPath\":\"bphct\",\"replicationPort\":849665367,\"allowedAuthenticationType\":2023635865,\"replicaDeletionOption\":\"icuhqvumspb\"}")
            .toObject(HyperVReplicaPolicyDetails.class);
        Assertions.assertEquals(1238631626, model.recoveryPoints());
        Assertions.assertEquals(247631176, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("tkujsqycm", model.compression());
        Assertions.assertEquals("xfabl", model.initialReplicationMethod());
        Assertions.assertEquals("pwbmwhria", model.onlineReplicationStartTime());
        Assertions.assertEquals("wrycgnwpl", model.offlineReplicationImportPath());
        Assertions.assertEquals("bphct", model.offlineReplicationExportPath());
        Assertions.assertEquals(849665367, model.replicationPort());
        Assertions.assertEquals(2023635865, model.allowedAuthenticationType());
        Assertions.assertEquals("icuhqvumspb", model.replicaDeletionOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaPolicyDetails model = new HyperVReplicaPolicyDetails().withRecoveryPoints(1238631626)
            .withApplicationConsistentSnapshotFrequencyInHours(247631176)
            .withCompression("tkujsqycm")
            .withInitialReplicationMethod("xfabl")
            .withOnlineReplicationStartTime("pwbmwhria")
            .withOfflineReplicationImportPath("wrycgnwpl")
            .withOfflineReplicationExportPath("bphct")
            .withReplicationPort(849665367)
            .withAllowedAuthenticationType(2023635865)
            .withReplicaDeletionOption("icuhqvumspb");
        model = BinaryData.fromObject(model).toObject(HyperVReplicaPolicyDetails.class);
        Assertions.assertEquals(1238631626, model.recoveryPoints());
        Assertions.assertEquals(247631176, model.applicationConsistentSnapshotFrequencyInHours());
        Assertions.assertEquals("tkujsqycm", model.compression());
        Assertions.assertEquals("xfabl", model.initialReplicationMethod());
        Assertions.assertEquals("pwbmwhria", model.onlineReplicationStartTime());
        Assertions.assertEquals("wrycgnwpl", model.offlineReplicationImportPath());
        Assertions.assertEquals("bphct", model.offlineReplicationExportPath());
        Assertions.assertEquals(849665367, model.replicationPort());
        Assertions.assertEquals(2023635865, model.allowedAuthenticationType());
        Assertions.assertEquals("icuhqvumspb", model.replicaDeletionOption());
    }
}
