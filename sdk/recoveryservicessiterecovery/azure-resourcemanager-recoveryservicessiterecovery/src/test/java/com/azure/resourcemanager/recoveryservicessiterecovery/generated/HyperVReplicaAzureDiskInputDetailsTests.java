// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskAccountType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVReplicaAzureDiskInputDetails;
import org.junit.jupiter.api.Assertions;

public final class HyperVReplicaAzureDiskInputDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVReplicaAzureDiskInputDetails model = BinaryData.fromString(
            "{\"diskId\":\"jxljtxbusq\",\"logStorageAccountId\":\"xxniuisdzhgbd\",\"diskType\":\"Premium_ZRS\",\"diskEncryptionSetId\":\"gsecnadbuwqrgx\",\"sectorSizeInBytes\":630471294}")
            .toObject(HyperVReplicaAzureDiskInputDetails.class);
        Assertions.assertEquals("jxljtxbusq", model.diskId());
        Assertions.assertEquals("xxniuisdzhgbd", model.logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_ZRS, model.diskType());
        Assertions.assertEquals("gsecnadbuwqrgx", model.diskEncryptionSetId());
        Assertions.assertEquals(630471294, model.sectorSizeInBytes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVReplicaAzureDiskInputDetails model = new HyperVReplicaAzureDiskInputDetails().withDiskId("jxljtxbusq")
            .withLogStorageAccountId("xxniuisdzhgbd")
            .withDiskType(DiskAccountType.PREMIUM_ZRS)
            .withDiskEncryptionSetId("gsecnadbuwqrgx")
            .withSectorSizeInBytes(630471294);
        model = BinaryData.fromObject(model).toObject(HyperVReplicaAzureDiskInputDetails.class);
        Assertions.assertEquals("jxljtxbusq", model.diskId());
        Assertions.assertEquals("xxniuisdzhgbd", model.logStorageAccountId());
        Assertions.assertEquals(DiskAccountType.PREMIUM_ZRS, model.diskType());
        Assertions.assertEquals("gsecnadbuwqrgx", model.diskEncryptionSetId());
        Assertions.assertEquals(630471294, model.sectorSizeInBytes());
    }
}
