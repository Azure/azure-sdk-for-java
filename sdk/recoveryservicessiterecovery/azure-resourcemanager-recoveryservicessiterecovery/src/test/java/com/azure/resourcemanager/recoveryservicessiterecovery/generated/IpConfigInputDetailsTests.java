// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.IpConfigInputDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpConfigInputDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfigInputDetails model =
            BinaryData
                .fromString(
                    "{\"ipConfigName\":\"feo\",\"isPrimary\":false,\"isSeletedForFailover\":true,\"recoverySubnetName\":\"yhko\",\"recoveryStaticIPAddress\":\"pg\",\"recoveryPublicIPAddressId\":\"dkow\",\"recoveryLBBackendAddressPoolIds\":[\"qpcrf\"],\"tfoSubnetName\":\"wccsnjvcdwxlpqek\",\"tfoStaticIPAddress\":\"nkhtjsyingw\",\"tfoPublicIPAddressId\":\"atmtdhtmdvy\",\"tfoLBBackendAddressPoolIds\":[\"kdgszywkbirr\",\"uzhlhkjoqrv\",\"qaatjinrv\"]}")
                .toObject(IpConfigInputDetails.class);
        Assertions.assertEquals("feo", model.ipConfigName());
        Assertions.assertEquals(false, model.isPrimary());
        Assertions.assertEquals(true, model.isSeletedForFailover());
        Assertions.assertEquals("yhko", model.recoverySubnetName());
        Assertions.assertEquals("pg", model.recoveryStaticIpAddress());
        Assertions.assertEquals("dkow", model.recoveryPublicIpAddressId());
        Assertions.assertEquals("qpcrf", model.recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("wccsnjvcdwxlpqek", model.tfoSubnetName());
        Assertions.assertEquals("nkhtjsyingw", model.tfoStaticIpAddress());
        Assertions.assertEquals("atmtdhtmdvy", model.tfoPublicIpAddressId());
        Assertions.assertEquals("kdgszywkbirr", model.tfoLBBackendAddressPoolIds().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfigInputDetails model =
            new IpConfigInputDetails()
                .withIpConfigName("feo")
                .withIsPrimary(false)
                .withIsSeletedForFailover(true)
                .withRecoverySubnetName("yhko")
                .withRecoveryStaticIpAddress("pg")
                .withRecoveryPublicIpAddressId("dkow")
                .withRecoveryLBBackendAddressPoolIds(Arrays.asList("qpcrf"))
                .withTfoSubnetName("wccsnjvcdwxlpqek")
                .withTfoStaticIpAddress("nkhtjsyingw")
                .withTfoPublicIpAddressId("atmtdhtmdvy")
                .withTfoLBBackendAddressPoolIds(Arrays.asList("kdgszywkbirr", "uzhlhkjoqrv", "qaatjinrv"));
        model = BinaryData.fromObject(model).toObject(IpConfigInputDetails.class);
        Assertions.assertEquals("feo", model.ipConfigName());
        Assertions.assertEquals(false, model.isPrimary());
        Assertions.assertEquals(true, model.isSeletedForFailover());
        Assertions.assertEquals("yhko", model.recoverySubnetName());
        Assertions.assertEquals("pg", model.recoveryStaticIpAddress());
        Assertions.assertEquals("dkow", model.recoveryPublicIpAddressId());
        Assertions.assertEquals("qpcrf", model.recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("wccsnjvcdwxlpqek", model.tfoSubnetName());
        Assertions.assertEquals("nkhtjsyingw", model.tfoStaticIpAddress());
        Assertions.assertEquals("atmtdhtmdvy", model.tfoPublicIpAddressId());
        Assertions.assertEquals("kdgszywkbirr", model.tfoLBBackendAddressPoolIds().get(0));
    }
}
