// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ProtectionContainer;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SwitchProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SwitchProtectionInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.SwitchProtectionProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectionContainersSwitchProtectionMockTests {
    @Test
    public void testSwitchProtection() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"fabricFriendlyName\":\"dsqyuddkhwqdm\",\"friendlyName\":\"heuyuunxmyevyi\",\"fabricType\":\"eip\",\"protectedItemCount\":967066475,\"pairingStatus\":\"ejwli\",\"role\":\"cndjzwhajo\",\"fabricSpecificDetails\":{\"instanceType\":\"qokhdyncradxs\"}},\"location\":\"bempf\",\"id\":\"pmqnmelyksygih\",\"name\":\"clmslnunkqvz\",\"type\":\"bbba\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SiteRecoveryManager manager = SiteRecoveryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectionContainer response
            = manager.replicationProtectionContainers().switchProtection("vm", "idyli", "ajklnac", "dnxqeonm",
                new SwitchProtectionInput().withProperties(
                    new SwitchProtectionInputProperties().withReplicationProtectedItemName("jaojpzngdrzige")
                        .withProviderSpecificDetails(new SwitchProtectionProviderSpecificInput())),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dsqyuddkhwqdm", response.properties().fabricFriendlyName());
        Assertions.assertEquals("heuyuunxmyevyi", response.properties().friendlyName());
        Assertions.assertEquals("eip", response.properties().fabricType());
        Assertions.assertEquals(967066475, response.properties().protectedItemCount());
        Assertions.assertEquals("ejwli", response.properties().pairingStatus());
        Assertions.assertEquals("cndjzwhajo", response.properties().role());
        Assertions.assertEquals("bempf", response.location());
    }
}
