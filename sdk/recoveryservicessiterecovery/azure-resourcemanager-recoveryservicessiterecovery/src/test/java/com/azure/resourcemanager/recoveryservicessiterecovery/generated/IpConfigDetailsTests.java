// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.IpConfigDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class IpConfigDetailsTests {
    @Test
    public void testDeserialize() {
        IpConfigDetails model =
            BinaryData
                .fromString(
                    "{\"name\":\"d\",\"isPrimary\":true,\"subnetName\":\"wzkjopwbeonrlkw\",\"staticIPAddress\":\"qybxceakxcp\",\"ipAddressType\":\"oqfyiaseqch\",\"isSeletedForFailover\":true,\"recoverySubnetName\":\"zrazisgyk\",\"recoveryStaticIPAddress\":\"emv\",\"recoveryIPAddressType\":\"bwzohmnrxxbs\",\"recoveryPublicIPAddressId\":\"klinhmdptysprq\",\"recoveryLBBackendAddressPoolIds\":[\"zxojpslsv\",\"g\",\"liufiqwoyxq\",\"apcohhouc\"],\"tfoSubnetName\":\"q\",\"tfoStaticIPAddress\":\"xcxzrzdcgdzben\",\"tfoPublicIPAddressId\":\"bcawetz\",\"tfoLBBackendAddressPoolIds\":[\"tjwfljhznamtua\",\"mzwcjjncqt\",\"z\",\"izvg\"]}")
                .toObject(IpConfigDetails.class);
        Assertions.assertEquals("d", model.name());
        Assertions.assertEquals(true, model.isPrimary());
        Assertions.assertEquals("wzkjopwbeonrlkw", model.subnetName());
        Assertions.assertEquals("qybxceakxcp", model.staticIpAddress());
        Assertions.assertEquals("oqfyiaseqch", model.ipAddressType());
        Assertions.assertEquals(true, model.isSeletedForFailover());
        Assertions.assertEquals("zrazisgyk", model.recoverySubnetName());
        Assertions.assertEquals("emv", model.recoveryStaticIpAddress());
        Assertions.assertEquals("bwzohmnrxxbs", model.recoveryIpAddressType());
        Assertions.assertEquals("klinhmdptysprq", model.recoveryPublicIpAddressId());
        Assertions.assertEquals("zxojpslsv", model.recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("q", model.tfoSubnetName());
        Assertions.assertEquals("xcxzrzdcgdzben", model.tfoStaticIpAddress());
        Assertions.assertEquals("bcawetz", model.tfoPublicIpAddressId());
        Assertions.assertEquals("tjwfljhznamtua", model.tfoLBBackendAddressPoolIds().get(0));
    }

    @Test
    public void testSerialize() {
        IpConfigDetails model =
            new IpConfigDetails()
                .withName("d")
                .withIsPrimary(true)
                .withSubnetName("wzkjopwbeonrlkw")
                .withStaticIpAddress("qybxceakxcp")
                .withIpAddressType("oqfyiaseqch")
                .withIsSeletedForFailover(true)
                .withRecoverySubnetName("zrazisgyk")
                .withRecoveryStaticIpAddress("emv")
                .withRecoveryIpAddressType("bwzohmnrxxbs")
                .withRecoveryPublicIpAddressId("klinhmdptysprq")
                .withRecoveryLBBackendAddressPoolIds(Arrays.asList("zxojpslsv", "g", "liufiqwoyxq", "apcohhouc"))
                .withTfoSubnetName("q")
                .withTfoStaticIpAddress("xcxzrzdcgdzben")
                .withTfoPublicIpAddressId("bcawetz")
                .withTfoLBBackendAddressPoolIds(Arrays.asList("tjwfljhznamtua", "mzwcjjncqt", "z", "izvg"));
        model = BinaryData.fromObject(model).toObject(IpConfigDetails.class);
        Assertions.assertEquals("d", model.name());
        Assertions.assertEquals(true, model.isPrimary());
        Assertions.assertEquals("wzkjopwbeonrlkw", model.subnetName());
        Assertions.assertEquals("qybxceakxcp", model.staticIpAddress());
        Assertions.assertEquals("oqfyiaseqch", model.ipAddressType());
        Assertions.assertEquals(true, model.isSeletedForFailover());
        Assertions.assertEquals("zrazisgyk", model.recoverySubnetName());
        Assertions.assertEquals("emv", model.recoveryStaticIpAddress());
        Assertions.assertEquals("bwzohmnrxxbs", model.recoveryIpAddressType());
        Assertions.assertEquals("klinhmdptysprq", model.recoveryPublicIpAddressId());
        Assertions.assertEquals("zxojpslsv", model.recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("q", model.tfoSubnetName());
        Assertions.assertEquals("xcxzrzdcgdzben", model.tfoStaticIpAddress());
        Assertions.assertEquals("bcawetz", model.tfoPublicIpAddressId());
        Assertions.assertEquals("tjwfljhznamtua", model.tfoLBBackendAddressPoolIds().get(0));
    }
}
