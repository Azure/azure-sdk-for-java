// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AgentVersionStatus;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryServicesProvider;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryServicesProvidersListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"fabricType\":\"zepirtv\",\"friendlyName\":\"i\",\"providerVersion\":\"qbvxqtolpwbopv\",\"serverVersion\":\"btzaprjxco\",\"providerVersionState\":\"ick\",\"providerVersionExpiryDate\":\"2021-04-03T04:39:42Z\",\"fabricFriendlyName\":\"h\",\"lastHeartBeat\":\"2021-06-11T18:27:18Z\",\"connectionStatus\":\"sg\",\"protectedItemCount\":1502072665,\"allowedScenarios\":[\"bjwvrudm\",\"wewpmioleajabe\",\"g\"],\"healthErrorDetails\":[],\"draIdentifier\":\"hbj\",\"machineId\":\"cecmbaajdf\",\"machineName\":\"dkqlvzkf\",\"biosId\":\"des\",\"authenticationIdentityDetails\":{\"tenantId\":\"qtllbhjjpduibs\",\"applicationId\":\"rqnneqryp\",\"objectId\":\"rvshhovtuercpzh\",\"audience\":\"cxybtdzy\",\"aadAuthority\":\"haoegjzgpljb\"},\"resourceAccessIdentityDetails\":{\"tenantId\":\"zsrazcbybic\",\"applicationId\":\"xhjpuapasizzfm\",\"objectId\":\"ykwu\",\"audience\":\"uo\",\"aadAuthority\":\"nndzg\"},\"dataPlaneAuthenticationIdentityDetails\":{\"tenantId\":\"zitjzffpherwjq\",\"applicationId\":\"wtwona\",\"objectId\":\"zmzxvfybxmmrvnu\",\"audience\":\"krrs\",\"aadAuthority\":\"o\"},\"providerVersionDetails\":{\"version\":\"brotpya\",\"expiryDate\":\"2021-05-15T02:02:10Z\",\"status\":\"NotSupported\"}},\"location\":\"lwpftvvqtmv\",\"id\":\"fgcvs\",\"name\":\"mal\",\"type\":\"mticxgo\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RecoveryServicesProvider> response =
            manager.replicationRecoveryServicesProviders().list("lbuaz", "couhwivkdfvjskn", Context.NONE);

        Assertions.assertEquals("zepirtv", response.iterator().next().properties().fabricType());
        Assertions.assertEquals("i", response.iterator().next().properties().friendlyName());
        Assertions.assertEquals("qbvxqtolpwbopv", response.iterator().next().properties().providerVersion());
        Assertions.assertEquals("btzaprjxco", response.iterator().next().properties().serverVersion());
        Assertions.assertEquals("ick", response.iterator().next().properties().providerVersionState());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-03T04:39:42Z"),
                response.iterator().next().properties().providerVersionExpiryDate());
        Assertions.assertEquals("h", response.iterator().next().properties().fabricFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-11T18:27:18Z"), response.iterator().next().properties().lastHeartBeat());
        Assertions.assertEquals("sg", response.iterator().next().properties().connectionStatus());
        Assertions.assertEquals(1502072665, response.iterator().next().properties().protectedItemCount());
        Assertions.assertEquals("bjwvrudm", response.iterator().next().properties().allowedScenarios().get(0));
        Assertions.assertEquals("hbj", response.iterator().next().properties().draIdentifier());
        Assertions.assertEquals("cecmbaajdf", response.iterator().next().properties().machineId());
        Assertions.assertEquals("dkqlvzkf", response.iterator().next().properties().machineName());
        Assertions.assertEquals("des", response.iterator().next().properties().biosId());
        Assertions
            .assertEquals(
                "qtllbhjjpduibs", response.iterator().next().properties().authenticationIdentityDetails().tenantId());
        Assertions
            .assertEquals(
                "rqnneqryp", response.iterator().next().properties().authenticationIdentityDetails().applicationId());
        Assertions
            .assertEquals(
                "rvshhovtuercpzh", response.iterator().next().properties().authenticationIdentityDetails().objectId());
        Assertions
            .assertEquals(
                "cxybtdzy", response.iterator().next().properties().authenticationIdentityDetails().audience());
        Assertions
            .assertEquals(
                "haoegjzgpljb", response.iterator().next().properties().authenticationIdentityDetails().aadAuthority());
        Assertions
            .assertEquals(
                "zsrazcbybic", response.iterator().next().properties().resourceAccessIdentityDetails().tenantId());
        Assertions
            .assertEquals(
                "xhjpuapasizzfm",
                response.iterator().next().properties().resourceAccessIdentityDetails().applicationId());
        Assertions
            .assertEquals("ykwu", response.iterator().next().properties().resourceAccessIdentityDetails().objectId());
        Assertions
            .assertEquals("uo", response.iterator().next().properties().resourceAccessIdentityDetails().audience());
        Assertions
            .assertEquals(
                "nndzg", response.iterator().next().properties().resourceAccessIdentityDetails().aadAuthority());
        Assertions
            .assertEquals(
                "zitjzffpherwjq",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().tenantId());
        Assertions
            .assertEquals(
                "wtwona",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().applicationId());
        Assertions
            .assertEquals(
                "zmzxvfybxmmrvnu",
                response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().objectId());
        Assertions
            .assertEquals(
                "krrs", response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().audience());
        Assertions
            .assertEquals(
                "o", response.iterator().next().properties().dataPlaneAuthenticationIdentityDetails().aadAuthority());
        Assertions.assertEquals("brotpya", response.iterator().next().properties().providerVersionDetails().version());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-15T02:02:10Z"),
                response.iterator().next().properties().providerVersionDetails().expiryDate());
        Assertions
            .assertEquals(
                AgentVersionStatus.NOT_SUPPORTED,
                response.iterator().next().properties().providerVersionDetails().status());
        Assertions.assertEquals("lwpftvvqtmv", response.iterator().next().location());
    }
}
