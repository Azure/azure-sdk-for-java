// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageRcmNicInput;
import org.junit.jupiter.api.Assertions;

public final class InMageRcmNicInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageRcmNicInput model =
            BinaryData
                .fromString(
                    "{\"nicId\":\"urz\",\"isPrimaryNic\":\"vktjhffecqkoq\",\"isSelectedForFailover\":\"uergaghpuzxkpye\",\"targetSubnetName\":\"fdyldhgyed\",\"targetStaticIPAddress\":\"zqiyuqhtder\",\"testSubnetName\":\"n\",\"testStaticIPAddress\":\"a\"}")
                .toObject(InMageRcmNicInput.class);
        Assertions.assertEquals("urz", model.nicId());
        Assertions.assertEquals("vktjhffecqkoq", model.isPrimaryNic());
        Assertions.assertEquals("uergaghpuzxkpye", model.isSelectedForFailover());
        Assertions.assertEquals("fdyldhgyed", model.targetSubnetName());
        Assertions.assertEquals("zqiyuqhtder", model.targetStaticIpAddress());
        Assertions.assertEquals("n", model.testSubnetName());
        Assertions.assertEquals("a", model.testStaticIpAddress());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageRcmNicInput model =
            new InMageRcmNicInput()
                .withNicId("urz")
                .withIsPrimaryNic("vktjhffecqkoq")
                .withIsSelectedForFailover("uergaghpuzxkpye")
                .withTargetSubnetName("fdyldhgyed")
                .withTargetStaticIpAddress("zqiyuqhtder")
                .withTestSubnetName("n")
                .withTestStaticIpAddress("a");
        model = BinaryData.fromObject(model).toObject(InMageRcmNicInput.class);
        Assertions.assertEquals("urz", model.nicId());
        Assertions.assertEquals("vktjhffecqkoq", model.isPrimaryNic());
        Assertions.assertEquals("uergaghpuzxkpye", model.isSelectedForFailover());
        Assertions.assertEquals("fdyldhgyed", model.targetSubnetName());
        Assertions.assertEquals("zqiyuqhtder", model.targetStaticIpAddress());
        Assertions.assertEquals("n", model.testSubnetName());
        Assertions.assertEquals("a", model.testStaticIpAddress());
    }
}
