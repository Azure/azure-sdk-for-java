// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageRcmNicInput;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class InMageRcmNicInputTests {
    @Test
    public void testDeserialize() {
        InMageRcmNicInput model =
            BinaryData
                .fromString(
                    "{\"nicId\":\"dzxcouzfwo\",\"isPrimaryNic\":\"wakukzkdtzxs\",\"isSelectedForFailover\":\"dnlwglihezomuc\",\"targetSubnetName\":\"g\",\"targetStaticIPAddress\":\"nione\",\"testSubnetName\":\"zdrd\",\"testStaticIPAddress\":\"enx\"}")
                .toObject(InMageRcmNicInput.class);
        Assertions.assertEquals("dzxcouzfwo", model.nicId());
        Assertions.assertEquals("wakukzkdtzxs", model.isPrimaryNic());
        Assertions.assertEquals("dnlwglihezomuc", model.isSelectedForFailover());
        Assertions.assertEquals("g", model.targetSubnetName());
        Assertions.assertEquals("nione", model.targetStaticIpAddress());
        Assertions.assertEquals("zdrd", model.testSubnetName());
        Assertions.assertEquals("enx", model.testStaticIpAddress());
    }

    @Test
    public void testSerialize() {
        InMageRcmNicInput model =
            new InMageRcmNicInput()
                .withNicId("dzxcouzfwo")
                .withIsPrimaryNic("wakukzkdtzxs")
                .withIsSelectedForFailover("dnlwglihezomuc")
                .withTargetSubnetName("g")
                .withTargetStaticIpAddress("nione")
                .withTestSubnetName("zdrd")
                .withTestStaticIpAddress("enx");
        model = BinaryData.fromObject(model).toObject(InMageRcmNicInput.class);
        Assertions.assertEquals("dzxcouzfwo", model.nicId());
        Assertions.assertEquals("wakukzkdtzxs", model.isPrimaryNic());
        Assertions.assertEquals("dnlwglihezomuc", model.isSelectedForFailover());
        Assertions.assertEquals("g", model.targetSubnetName());
        Assertions.assertEquals("nione", model.targetStaticIpAddress());
        Assertions.assertEquals("zdrd", model.testSubnetName());
        Assertions.assertEquals("enx", model.testStaticIpAddress());
    }
}
