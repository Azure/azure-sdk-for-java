// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateApplianceForReplicationProtectedItemInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateApplianceForReplicationProtectedItemInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateReplicationProtectedItemProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsUpdateApplianceMockTests {
    @Test
    public void testUpdateAppliance() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"pbscboxr\",\"protectedItemType\":\"dczmrjgobekx\",\"protectableItemId\":\"eowse\",\"recoveryServicesProviderId\":\"fdr\",\"primaryFabricFriendlyName\":\"bskiwrj\",\"primaryFabricProvider\":\"db\",\"recoveryFabricFriendlyName\":\"eesacuicnvqiqsu\",\"recoveryFabricId\":\"mrfaptndr\",\"primaryProtectionContainerFriendlyName\":\"nlh\",\"recoveryProtectionContainerFriendlyName\":\"mxrqkekcdaviieb\",\"protectionState\":\"rfzav\",\"protectionStateDescription\":\"mc\",\"activeLocation\":\"siuc\",\"testFailoverState\":\"lbrzgk\",\"testFailoverStateDescription\":\"rwpqbstweobptsc\",\"switchProviderState\":\"ykk\",\"switchProviderStateDescription\":\"layynoyjy\",\"allowedOperations\":[\"msbnlyoifg\",\"fzjqthy\",\"cvoevcwfz\"],\"replicationHealth\":\"kxxlwwo\",\"failoverHealth\":\"gbsdz\",\"healthErrors\":[],\"policyId\":\"ypjh\",\"policyFriendlyName\":\"dmgobxehujcqg\",\"lastSuccessfulFailoverTime\":\"2021-04-22T05:04:26Z\",\"lastSuccessfulTestFailoverTime\":\"2021-01-06T18:48:21Z\",\"currentScenario\":{\"scenarioName\":\"aoibmjk\",\"jobId\":\"rljd\",\"startTime\":\"2021-01-09T09:08:38Z\"},\"failoverRecoveryPointId\":\"laxrji\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"ovq\",\"eventCorrelationId\":\"phgxuwudgcyqruv\"},\"location\":\"ryddnqivahf\",\"id\":\"qwnjzebpicciyo\",\"name\":\"poedksp\",\"type\":\"wi\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .updateAppliance(
                    "ysy",
                    "vldeehcbsaip",
                    "suo",
                    "kegbvbbdledf",
                    "lzvsluazzxfjveu",
                    new UpdateApplianceForReplicationProtectedItemInput()
                        .withProperties(
                            new UpdateApplianceForReplicationProtectedItemInputProperties()
                                .withTargetApplianceId("pxzee")
                                .withProviderSpecificDetails(
                                    new UpdateReplicationProtectedItemProviderSpecificInput())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pbscboxr", response.properties().friendlyName());
        Assertions.assertEquals("dczmrjgobekx", response.properties().protectedItemType());
        Assertions.assertEquals("eowse", response.properties().protectableItemId());
        Assertions.assertEquals("fdr", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("bskiwrj", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("db", response.properties().primaryFabricProvider());
        Assertions.assertEquals("eesacuicnvqiqsu", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("mrfaptndr", response.properties().recoveryFabricId());
        Assertions.assertEquals("nlh", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("mxrqkekcdaviieb", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("rfzav", response.properties().protectionState());
        Assertions.assertEquals("mc", response.properties().protectionStateDescription());
        Assertions.assertEquals("siuc", response.properties().activeLocation());
        Assertions.assertEquals("lbrzgk", response.properties().testFailoverState());
        Assertions.assertEquals("rwpqbstweobptsc", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("ykk", response.properties().switchProviderState());
        Assertions.assertEquals("layynoyjy", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("msbnlyoifg", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("kxxlwwo", response.properties().replicationHealth());
        Assertions.assertEquals("gbsdz", response.properties().failoverHealth());
        Assertions.assertEquals("ypjh", response.properties().policyId());
        Assertions.assertEquals("dmgobxehujcqg", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-22T05:04:26Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-06T18:48:21Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("aoibmjk", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("rljd", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-09T09:08:38Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("laxrji", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("ovq", response.properties().recoveryContainerId());
        Assertions.assertEquals("phgxuwudgcyqruv", response.properties().eventCorrelationId());
        Assertions.assertEquals("ryddnqivahf", response.location());
    }
}
