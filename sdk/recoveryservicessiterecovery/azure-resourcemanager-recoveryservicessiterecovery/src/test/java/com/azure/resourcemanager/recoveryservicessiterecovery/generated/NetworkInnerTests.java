// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.NetworkInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Subnet;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class NetworkInnerTests {
    @Test
    public void testDeserialize() {
        NetworkInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"fabricType\":\"ofsx\",\"subnets\":[{\"name\":\"gbmqjqabcypmiv\",\"friendlyName\":\"lzu\",\"addressList\":[]},{\"name\":\"fwnfnb\",\"friendlyName\":\"fionl\",\"addressList\":[]}],\"friendlyName\":\"etqgtzxdpnq\",\"networkType\":\"qwxrjfeallnw\"},\"location\":\"bisnja\",\"id\":\"pmng\",\"name\":\"zscxaqwo\",\"type\":\"chcbonqvpkvlrxnj\"}")
                .toObject(NetworkInner.class);
        Assertions.assertEquals("ofsx", model.properties().fabricType());
        Assertions.assertEquals("gbmqjqabcypmiv", model.properties().subnets().get(0).name());
        Assertions.assertEquals("lzu", model.properties().subnets().get(0).friendlyName());
        Assertions.assertEquals("etqgtzxdpnq", model.properties().friendlyName());
        Assertions.assertEquals("qwxrjfeallnw", model.properties().networkType());
        Assertions.assertEquals("bisnja", model.location());
    }

    @Test
    public void testSerialize() {
        NetworkInner model =
            new NetworkInner()
                .withProperties(
                    new NetworkProperties()
                        .withFabricType("ofsx")
                        .withSubnets(
                            Arrays
                                .asList(
                                    new Subnet()
                                        .withName("gbmqjqabcypmiv")
                                        .withFriendlyName("lzu")
                                        .withAddressList(Arrays.asList()),
                                    new Subnet()
                                        .withName("fwnfnb")
                                        .withFriendlyName("fionl")
                                        .withAddressList(Arrays.asList())))
                        .withFriendlyName("etqgtzxdpnq")
                        .withNetworkType("qwxrjfeallnw"))
                .withLocation("bisnja");
        model = BinaryData.fromObject(model).toObject(NetworkInner.class);
        Assertions.assertEquals("ofsx", model.properties().fabricType());
        Assertions.assertEquals("gbmqjqabcypmiv", model.properties().subnets().get(0).name());
        Assertions.assertEquals("lzu", model.properties().subnets().get(0).friendlyName());
        Assertions.assertEquals("etqgtzxdpnq", model.properties().friendlyName());
        Assertions.assertEquals("qwxrjfeallnw", model.properties().networkType());
        Assertions.assertEquals("bisnja", model.location());
    }
}
