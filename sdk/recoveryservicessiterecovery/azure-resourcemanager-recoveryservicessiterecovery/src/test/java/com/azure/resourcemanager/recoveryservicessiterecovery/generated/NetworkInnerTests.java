// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.NetworkInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Subnet;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkInner model = BinaryData.fromString(
            "{\"properties\":{\"fabricType\":\"eipheoflokeyy\",\"subnets\":[{\"name\":\"bdlwtgrhpdjpj\",\"friendlyName\":\"asxazjpqyegualhb\",\"addressList\":[\"e\",\"jzzvdud\"]}],\"friendlyName\":\"dslfhotwmcy\",\"networkType\":\"wlbjnpgacftade\"},\"location\":\"nltyfsoppusuesnz\",\"id\":\"dejbavo\",\"name\":\"xzdmohctb\",\"type\":\"vudwx\"}")
            .toObject(NetworkInner.class);
        Assertions.assertEquals("eipheoflokeyy", model.properties().fabricType());
        Assertions.assertEquals("bdlwtgrhpdjpj", model.properties().subnets().get(0).name());
        Assertions.assertEquals("asxazjpqyegualhb", model.properties().subnets().get(0).friendlyName());
        Assertions.assertEquals("e", model.properties().subnets().get(0).addressList().get(0));
        Assertions.assertEquals("dslfhotwmcy", model.properties().friendlyName());
        Assertions.assertEquals("wlbjnpgacftade", model.properties().networkType());
        Assertions.assertEquals("nltyfsoppusuesnz", model.location());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkInner model
            = new NetworkInner()
                .withProperties(new NetworkProperties().withFabricType("eipheoflokeyy")
                    .withSubnets(Arrays.asList(new Subnet().withName("bdlwtgrhpdjpj")
                        .withFriendlyName("asxazjpqyegualhb").withAddressList(Arrays.asList("e", "jzzvdud"))))
                    .withFriendlyName("dslfhotwmcy").withNetworkType("wlbjnpgacftade"))
                .withLocation("nltyfsoppusuesnz");
        model = BinaryData.fromObject(model).toObject(NetworkInner.class);
        Assertions.assertEquals("eipheoflokeyy", model.properties().fabricType());
        Assertions.assertEquals("bdlwtgrhpdjpj", model.properties().subnets().get(0).name());
        Assertions.assertEquals("asxazjpqyegualhb", model.properties().subnets().get(0).friendlyName());
        Assertions.assertEquals("e", model.properties().subnets().get(0).addressList().get(0));
        Assertions.assertEquals("dslfhotwmcy", model.properties().friendlyName());
        Assertions.assertEquals("wlbjnpgacftade", model.properties().networkType());
        Assertions.assertEquals("nltyfsoppusuesnz", model.location());
    }
}
