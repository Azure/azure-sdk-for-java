// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ExportJobOutputSerializationType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Job;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobQueryParameter;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationJobsExportMockTests {
    @Test
    public void testExport() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"activityId\":\"wvoqatdjkal\",\"scenarioName\":\"mecsmxfzyn\",\"friendlyName\":\"m\",\"state\":\"qkkp\",\"stateDescription\":\"gssdquupirnbnlq\",\"tasks\":[],\"errors\":[],\"startTime\":\"2021-04-13T18:25:09Z\",\"endTime\":\"2021-06-08T04:28:43Z\",\"allowedActions\":[\"pvirzyud\",\"qu\"],\"targetObjectId\":\"x\",\"targetObjectName\":\"mlfouqpskva\",\"targetInstanceType\":\"bpmr\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{}}},\"location\":\"xcqcaczzv\",\"id\":\"aeztt\",\"name\":\"jqyfy\",\"type\":\"qlyyslg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Job response =
            manager
                .replicationJobs()
                .export(
                    "b",
                    "nkpsvokkyankxvc",
                    new JobQueryParameter()
                        .withStartTime("fgfbhnkxaso")
                        .withEndTime("fe")
                        .withFabricId("z")
                        .withAffectedObjectTypes("rdxpcpautfzptr")
                        .withJobStatus("zytrt")
                        .withJobOutputType(ExportJobOutputSerializationType.JSON)
                        .withJobName("kdxcyuwen")
                        .withTimezoneOffset(96.82912807419738D),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wvoqatdjkal", response.properties().activityId());
        Assertions.assertEquals("mecsmxfzyn", response.properties().scenarioName());
        Assertions.assertEquals("m", response.properties().friendlyName());
        Assertions.assertEquals("qkkp", response.properties().state());
        Assertions.assertEquals("gssdquupirnbnlq", response.properties().stateDescription());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T18:25:09Z"), response.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-08T04:28:43Z"), response.properties().endTime());
        Assertions.assertEquals("pvirzyud", response.properties().allowedActions().get(0));
        Assertions.assertEquals("x", response.properties().targetObjectId());
        Assertions.assertEquals("mlfouqpskva", response.properties().targetObjectName());
        Assertions.assertEquals("bpmr", response.properties().targetInstanceType());
        Assertions.assertEquals("xcqcaczzv", response.location());
    }
}
