// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Subnet;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkProperties model = BinaryData.fromString(
            "{\"fabricType\":\"dnvowg\",\"subnets\":[{\"name\":\"gwdkcglhsl\",\"friendlyName\":\"jdyggdtji\",\"addressList\":[\"kuofqweykhme\"]},{\"name\":\"vfyexfw\",\"friendlyName\":\"bcibvyvdcsitynn\",\"addressList\":[\"dectehfiqsc\",\"eypvhezrkg\",\"hcjrefovgmk\",\"sle\"]},{\"name\":\"vxyqjpkcattpngjc\",\"friendlyName\":\"czsqpjhvm\",\"addressList\":[\"v\",\"ysou\",\"q\"]}],\"friendlyName\":\"a\",\"networkType\":\"ae\"}")
            .toObject(NetworkProperties.class);
        Assertions.assertEquals("dnvowg", model.fabricType());
        Assertions.assertEquals("gwdkcglhsl", model.subnets().get(0).name());
        Assertions.assertEquals("jdyggdtji", model.subnets().get(0).friendlyName());
        Assertions.assertEquals("kuofqweykhme", model.subnets().get(0).addressList().get(0));
        Assertions.assertEquals("a", model.friendlyName());
        Assertions.assertEquals("ae", model.networkType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkProperties model = new NetworkProperties().withFabricType("dnvowg")
            .withSubnets(Arrays.asList(
                new Subnet().withName("gwdkcglhsl").withFriendlyName("jdyggdtji")
                    .withAddressList(Arrays.asList("kuofqweykhme")),
                new Subnet().withName("vfyexfw").withFriendlyName("bcibvyvdcsitynn")
                    .withAddressList(Arrays.asList("dectehfiqsc", "eypvhezrkg", "hcjrefovgmk", "sle")),
                new Subnet().withName("vxyqjpkcattpngjc").withFriendlyName("czsqpjhvm")
                    .withAddressList(Arrays.asList("v", "ysou", "q"))))
            .withFriendlyName("a").withNetworkType("ae");
        model = BinaryData.fromObject(model).toObject(NetworkProperties.class);
        Assertions.assertEquals("dnvowg", model.fabricType());
        Assertions.assertEquals("gwdkcglhsl", model.subnets().get(0).name());
        Assertions.assertEquals("jdyggdtji", model.subnets().get(0).friendlyName());
        Assertions.assertEquals("kuofqweykhme", model.subnets().get(0).addressList().get(0));
        Assertions.assertEquals("a", model.friendlyName());
        Assertions.assertEquals("ae", model.networkType());
    }
}
