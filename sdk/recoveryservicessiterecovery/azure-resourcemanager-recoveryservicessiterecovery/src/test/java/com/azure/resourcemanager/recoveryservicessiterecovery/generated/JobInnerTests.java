// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.JobInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.AsrTask;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobErrorDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.JobProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"activityId\":\"vwrevkhgnlnzon\",\"scenarioName\":\"rpiqywncv\",\"friendlyName\":\"szcofizeht\",\"state\":\"gbjkvreljeamur\",\"stateDescription\":\"mlovuanashcxl\",\"tasks\":[{\"taskId\":\"rbdkelvidiz\",\"name\":\"sdbccxjmonfdgnwn\",\"startTime\":\"2021-02-06T18:22:42Z\",\"endTime\":\"2021-06-27T17:17:24Z\",\"allowedActions\":[],\"friendlyName\":\"ltv\",\"state\":\"jctzenkei\",\"stateDescription\":\"zhmkdasvflyh\",\"taskType\":\"cu\",\"errors\":[]},{\"taskId\":\"srboldforobw\",\"name\":\"vizbfhfo\",\"startTime\":\"2021-06-21T15:17:33Z\",\"endTime\":\"2021-03-01T23:44:24Z\",\"allowedActions\":[],\"friendlyName\":\"tuodxeszabbelaw\",\"state\":\"ua\",\"stateDescription\":\"zkwrrwoyc\",\"taskType\":\"cwyhahno\",\"errors\":[]},{\"taskId\":\"wuhpsvfuur\",\"name\":\"lwexxwl\",\"startTime\":\"2021-07-05T00:05:41Z\",\"endTime\":\"2020-12-24T15:11:38Z\",\"allowedActions\":[],\"friendlyName\":\"srzpgepqtybbww\",\"state\":\"dakchzyvl\",\"stateDescription\":\"q\",\"taskType\":\"kcxk\",\"errors\":[]},{\"taskId\":\"mysu\",\"name\":\"wq\",\"startTime\":\"2021-01-30T01:04:15Z\",\"endTime\":\"2021-10-20T20:49:39Z\",\"allowedActions\":[],\"friendlyName\":\"jpsttexoq\",\"state\":\"wcyyufmhruncu\",\"stateDescription\":\"qspkcdqzhlctd\",\"taskType\":\"nqndyfpchrqbn\",\"errors\":[]}],\"errors\":[{\"errorLevel\":\"cw\",\"creationTime\":\"2021-04-06T19:09:14Z\",\"taskId\":\"umvq\"}],\"startTime\":\"2021-10-07T14:13:44Z\",\"endTime\":\"2021-07-31T07:50:02Z\",\"allowedActions\":[\"aiouaubrjt\",\"oq\",\"fuojrngif\"],\"targetObjectId\":\"z\",\"targetObjectName\":\"sccbiuimzd\",\"targetInstanceType\":\"jdfqwmkyoqufdvr\",\"customDetails\":{\"instanceType\":\"JobDetails\",\"affectedObjectDetails\":{\"otngfdgu\":\"zojhpctfnmd\"}}},\"location\":\"yzihgrkyuizabsn\",\"id\":\"fpphoj\",\"name\":\"evy\",\"type\":\"yhsgz\"}")
                .toObject(JobInner.class);
        Assertions.assertEquals("vwrevkhgnlnzon", model.properties().activityId());
        Assertions.assertEquals("rpiqywncv", model.properties().scenarioName());
        Assertions.assertEquals("szcofizeht", model.properties().friendlyName());
        Assertions.assertEquals("gbjkvreljeamur", model.properties().state());
        Assertions.assertEquals("mlovuanashcxl", model.properties().stateDescription());
        Assertions.assertEquals("rbdkelvidiz", model.properties().tasks().get(0).taskId());
        Assertions.assertEquals("sdbccxjmonfdgnwn", model.properties().tasks().get(0).name());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-02-06T18:22:42Z"), model.properties().tasks().get(0).startTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-27T17:17:24Z"), model.properties().tasks().get(0).endTime());
        Assertions.assertEquals("ltv", model.properties().tasks().get(0).friendlyName());
        Assertions.assertEquals("jctzenkei", model.properties().tasks().get(0).state());
        Assertions.assertEquals("zhmkdasvflyh", model.properties().tasks().get(0).stateDescription());
        Assertions.assertEquals("cu", model.properties().tasks().get(0).taskType());
        Assertions.assertEquals("cw", model.properties().errors().get(0).errorLevel());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-06T19:09:14Z"), model.properties().errors().get(0).creationTime());
        Assertions.assertEquals("umvq", model.properties().errors().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T14:13:44Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T07:50:02Z"), model.properties().endTime());
        Assertions.assertEquals("aiouaubrjt", model.properties().allowedActions().get(0));
        Assertions.assertEquals("z", model.properties().targetObjectId());
        Assertions.assertEquals("sccbiuimzd", model.properties().targetObjectName());
        Assertions.assertEquals("jdfqwmkyoqufdvr", model.properties().targetInstanceType());
        Assertions
            .assertEquals("zojhpctfnmd", model.properties().customDetails().affectedObjectDetails().get("otngfdgu"));
        Assertions.assertEquals("yzihgrkyuizabsn", model.location());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobInner model =
            new JobInner()
                .withProperties(
                    new JobProperties()
                        .withActivityId("vwrevkhgnlnzon")
                        .withScenarioName("rpiqywncv")
                        .withFriendlyName("szcofizeht")
                        .withState("gbjkvreljeamur")
                        .withStateDescription("mlovuanashcxl")
                        .withTasks(
                            Arrays
                                .asList(
                                    new AsrTask()
                                        .withTaskId("rbdkelvidiz")
                                        .withName("sdbccxjmonfdgnwn")
                                        .withStartTime(OffsetDateTime.parse("2021-02-06T18:22:42Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-06-27T17:17:24Z"))
                                        .withAllowedActions(Arrays.asList())
                                        .withFriendlyName("ltv")
                                        .withState("jctzenkei")
                                        .withStateDescription("zhmkdasvflyh")
                                        .withTaskType("cu")
                                        .withErrors(Arrays.asList()),
                                    new AsrTask()
                                        .withTaskId("srboldforobw")
                                        .withName("vizbfhfo")
                                        .withStartTime(OffsetDateTime.parse("2021-06-21T15:17:33Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-03-01T23:44:24Z"))
                                        .withAllowedActions(Arrays.asList())
                                        .withFriendlyName("tuodxeszabbelaw")
                                        .withState("ua")
                                        .withStateDescription("zkwrrwoyc")
                                        .withTaskType("cwyhahno")
                                        .withErrors(Arrays.asList()),
                                    new AsrTask()
                                        .withTaskId("wuhpsvfuur")
                                        .withName("lwexxwl")
                                        .withStartTime(OffsetDateTime.parse("2021-07-05T00:05:41Z"))
                                        .withEndTime(OffsetDateTime.parse("2020-12-24T15:11:38Z"))
                                        .withAllowedActions(Arrays.asList())
                                        .withFriendlyName("srzpgepqtybbww")
                                        .withState("dakchzyvl")
                                        .withStateDescription("q")
                                        .withTaskType("kcxk")
                                        .withErrors(Arrays.asList()),
                                    new AsrTask()
                                        .withTaskId("mysu")
                                        .withName("wq")
                                        .withStartTime(OffsetDateTime.parse("2021-01-30T01:04:15Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-10-20T20:49:39Z"))
                                        .withAllowedActions(Arrays.asList())
                                        .withFriendlyName("jpsttexoq")
                                        .withState("wcyyufmhruncu")
                                        .withStateDescription("qspkcdqzhlctd")
                                        .withTaskType("nqndyfpchrqbn")
                                        .withErrors(Arrays.asList())))
                        .withErrors(
                            Arrays
                                .asList(
                                    new JobErrorDetails()
                                        .withErrorLevel("cw")
                                        .withCreationTime(OffsetDateTime.parse("2021-04-06T19:09:14Z"))
                                        .withTaskId("umvq")))
                        .withStartTime(OffsetDateTime.parse("2021-10-07T14:13:44Z"))
                        .withEndTime(OffsetDateTime.parse("2021-07-31T07:50:02Z"))
                        .withAllowedActions(Arrays.asList("aiouaubrjt", "oq", "fuojrngif"))
                        .withTargetObjectId("z")
                        .withTargetObjectName("sccbiuimzd")
                        .withTargetInstanceType("jdfqwmkyoqufdvr")
                        .withCustomDetails(
                            new JobDetails().withAffectedObjectDetails(mapOf("otngfdgu", "zojhpctfnmd"))))
                .withLocation("yzihgrkyuizabsn");
        model = BinaryData.fromObject(model).toObject(JobInner.class);
        Assertions.assertEquals("vwrevkhgnlnzon", model.properties().activityId());
        Assertions.assertEquals("rpiqywncv", model.properties().scenarioName());
        Assertions.assertEquals("szcofizeht", model.properties().friendlyName());
        Assertions.assertEquals("gbjkvreljeamur", model.properties().state());
        Assertions.assertEquals("mlovuanashcxl", model.properties().stateDescription());
        Assertions.assertEquals("rbdkelvidiz", model.properties().tasks().get(0).taskId());
        Assertions.assertEquals("sdbccxjmonfdgnwn", model.properties().tasks().get(0).name());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-02-06T18:22:42Z"), model.properties().tasks().get(0).startTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-27T17:17:24Z"), model.properties().tasks().get(0).endTime());
        Assertions.assertEquals("ltv", model.properties().tasks().get(0).friendlyName());
        Assertions.assertEquals("jctzenkei", model.properties().tasks().get(0).state());
        Assertions.assertEquals("zhmkdasvflyh", model.properties().tasks().get(0).stateDescription());
        Assertions.assertEquals("cu", model.properties().tasks().get(0).taskType());
        Assertions.assertEquals("cw", model.properties().errors().get(0).errorLevel());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-06T19:09:14Z"), model.properties().errors().get(0).creationTime());
        Assertions.assertEquals("umvq", model.properties().errors().get(0).taskId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T14:13:44Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T07:50:02Z"), model.properties().endTime());
        Assertions.assertEquals("aiouaubrjt", model.properties().allowedActions().get(0));
        Assertions.assertEquals("z", model.properties().targetObjectId());
        Assertions.assertEquals("sccbiuimzd", model.properties().targetObjectName());
        Assertions.assertEquals("jdfqwmkyoqufdvr", model.properties().targetInstanceType());
        Assertions
            .assertEquals("zojhpctfnmd", model.properties().customDetails().affectedObjectDetails().get("otngfdgu"));
        Assertions.assertEquals("yzihgrkyuizabsn", model.location());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
