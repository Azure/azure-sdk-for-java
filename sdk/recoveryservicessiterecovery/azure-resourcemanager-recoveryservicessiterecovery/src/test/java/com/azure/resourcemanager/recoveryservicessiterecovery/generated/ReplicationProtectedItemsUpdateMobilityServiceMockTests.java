// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectedItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateMobilityServiceRequest;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateMobilityServiceRequestProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectedItemsUpdateMobilityServiceMockTests {
    @Test
    public void testUpdateMobilityService() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"pbygbnbcmoiq\",\"protectedItemType\":\"zpvqewflwzhxzuxe\",\"protectableItemId\":\"hywlrkqsq\",\"recoveryServicesProviderId\":\"d\",\"primaryFabricFriendlyName\":\"pfjdajdqxymxxyf\",\"primaryFabricProvider\":\"j\",\"recoveryFabricFriendlyName\":\"cetfvgwfwsl\",\"recoveryFabricId\":\"gwouppvyddqsvc\",\"primaryProtectionContainerFriendlyName\":\"snxfrppwwqc\",\"recoveryProtectionContainerFriendlyName\":\"dmtfxxepzpxzxlc\",\"protectionState\":\"fxaitiq\",\"protectionStateDescription\":\"jbsmkirpqni\",\"activeLocation\":\"dmhk\",\"testFailoverState\":\"meobwkeuzltenlbf\",\"testFailoverStateDescription\":\"m\",\"switchProviderState\":\"zesndoduomtx\",\"switchProviderStateDescription\":\"ri\",\"allowedOperations\":[\"ckikkqy\",\"urhwishy\"],\"replicationHealth\":\"rzcqfevnkyakckte\",\"failoverHealth\":\"gns\",\"healthErrors\":[],\"policyId\":\"kde\",\"policyFriendlyName\":\"suaz\",\"lastSuccessfulFailoverTime\":\"2021-08-19T10:03:10Z\",\"lastSuccessfulTestFailoverTime\":\"2021-11-21T14:55:48Z\",\"currentScenario\":{\"scenarioName\":\"xgxumtcqxmyvk\",\"jobId\":\"xypav\",\"startTime\":\"2021-06-14T01:44:49Z\"},\"failoverRecoveryPointId\":\"zgohvp\",\"providerSpecificDetails\":{\"instanceType\":\"ReplicationProviderSpecificSettings\"},\"recoveryContainerId\":\"ichmxczbyfkoc\",\"eventCorrelationId\":\"zdct\"},\"location\":\"lwscrngtwgxrol\",\"id\":\"vplksdksutac\",\"name\":\"ctihavishbv\",\"type\":\"hxvpmqququxlp\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReplicationProtectedItem response =
            manager
                .replicationProtectedItems()
                .updateMobilityService(
                    "py",
                    "qeigxuyxsxteuik",
                    "znfffnhcgnaqsrm",
                    "fqderkr",
                    "sdcobpmgqlwy",
                    new UpdateMobilityServiceRequest()
                        .withProperties(new UpdateMobilityServiceRequestProperties().withRunAsAccountId("bbyzposzf")),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pbygbnbcmoiq", response.properties().friendlyName());
        Assertions.assertEquals("zpvqewflwzhxzuxe", response.properties().protectedItemType());
        Assertions.assertEquals("hywlrkqsq", response.properties().protectableItemId());
        Assertions.assertEquals("d", response.properties().recoveryServicesProviderId());
        Assertions.assertEquals("pfjdajdqxymxxyf", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("j", response.properties().primaryFabricProvider());
        Assertions.assertEquals("cetfvgwfwsl", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("gwouppvyddqsvc", response.properties().recoveryFabricId());
        Assertions.assertEquals("snxfrppwwqc", response.properties().primaryProtectionContainerFriendlyName());
        Assertions.assertEquals("dmtfxxepzpxzxlc", response.properties().recoveryProtectionContainerFriendlyName());
        Assertions.assertEquals("fxaitiq", response.properties().protectionState());
        Assertions.assertEquals("jbsmkirpqni", response.properties().protectionStateDescription());
        Assertions.assertEquals("dmhk", response.properties().activeLocation());
        Assertions.assertEquals("meobwkeuzltenlbf", response.properties().testFailoverState());
        Assertions.assertEquals("m", response.properties().testFailoverStateDescription());
        Assertions.assertEquals("zesndoduomtx", response.properties().switchProviderState());
        Assertions.assertEquals("ri", response.properties().switchProviderStateDescription());
        Assertions.assertEquals("ckikkqy", response.properties().allowedOperations().get(0));
        Assertions.assertEquals("rzcqfevnkyakckte", response.properties().replicationHealth());
        Assertions.assertEquals("gns", response.properties().failoverHealth());
        Assertions.assertEquals("kde", response.properties().policyId());
        Assertions.assertEquals("suaz", response.properties().policyFriendlyName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-19T10:03:10Z"), response.properties().lastSuccessfulFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-21T14:55:48Z"), response.properties().lastSuccessfulTestFailoverTime());
        Assertions.assertEquals("xgxumtcqxmyvk", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("xypav", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-14T01:44:49Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("zgohvp", response.properties().failoverRecoveryPointId());
        Assertions.assertEquals("ichmxczbyfkoc", response.properties().recoveryContainerId());
        Assertions.assertEquals("zdct", response.properties().eventCorrelationId());
        Assertions.assertEquals("lwscrngtwgxrol", response.location());
    }
}
