// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.CurrentScenarioDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanGroup;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanGroupType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanProviderSpecificDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RecoveryPlanPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecoveryPlanProperties model =
            BinaryData
                .fromString(
                    "{\"friendlyName\":\"fmjnnawtqa\",\"primaryFabricId\":\"xuckpggqoweyir\",\"primaryFabricFriendlyName\":\"lisn\",\"recoveryFabricId\":\"fl\",\"recoveryFabricFriendlyName\":\"mpizru\",\"failoverDeploymentModel\":\"pqxpx\",\"replicationProviders\":[\"cng\",\"saasiixtmkzj\"],\"allowedOperations\":[\"iirhgfgrwsd\",\"gratzvzbglbyvict\",\"tbrxkjz\"],\"lastPlannedFailoverTime\":\"2021-06-14T16:49:33Z\",\"lastUnplannedFailoverTime\":\"2021-11-19T17:33:25Z\",\"lastTestFailoverTime\":\"2021-02-15T19:51:57Z\",\"currentScenario\":{\"scenarioName\":\"kwfbkgo\",\"jobId\":\"wopdbydpiz\",\"startTime\":\"2021-11-06T08:13:32Z\"},\"currentScenarioStatus\":\"napxbiygnug\",\"currentScenarioStatusDescription\":\"nfsm\",\"groups\":[{\"groupType\":\"Failover\",\"replicationProtectedItems\":[],\"startGroupActions\":[],\"endGroupActions\":[]},{\"groupType\":\"Shutdown\",\"replicationProtectedItems\":[],\"startGroupActions\":[],\"endGroupActions\":[]},{\"groupType\":\"Boot\",\"replicationProtectedItems\":[],\"startGroupActions\":[],\"endGroupActions\":[]},{\"groupType\":\"Failover\",\"replicationProtectedItems\":[],\"startGroupActions\":[],\"endGroupActions\":[]}],\"providerSpecificDetails\":[{\"instanceType\":\"RecoveryPlanProviderSpecificDetails\"},{\"instanceType\":\"RecoveryPlanProviderSpecificDetails\"},{\"instanceType\":\"RecoveryPlanProviderSpecificDetails\"}]}")
                .toObject(RecoveryPlanProperties.class);
        Assertions.assertEquals("fmjnnawtqa", model.friendlyName());
        Assertions.assertEquals("xuckpggqoweyir", model.primaryFabricId());
        Assertions.assertEquals("lisn", model.primaryFabricFriendlyName());
        Assertions.assertEquals("fl", model.recoveryFabricId());
        Assertions.assertEquals("mpizru", model.recoveryFabricFriendlyName());
        Assertions.assertEquals("pqxpx", model.failoverDeploymentModel());
        Assertions.assertEquals("cng", model.replicationProviders().get(0));
        Assertions.assertEquals("iirhgfgrwsd", model.allowedOperations().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-14T16:49:33Z"), model.lastPlannedFailoverTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-19T17:33:25Z"), model.lastUnplannedFailoverTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-15T19:51:57Z"), model.lastTestFailoverTime());
        Assertions.assertEquals("kwfbkgo", model.currentScenario().scenarioName());
        Assertions.assertEquals("wopdbydpiz", model.currentScenario().jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T08:13:32Z"), model.currentScenario().startTime());
        Assertions.assertEquals("napxbiygnug", model.currentScenarioStatus());
        Assertions.assertEquals("nfsm", model.currentScenarioStatusDescription());
        Assertions.assertEquals(RecoveryPlanGroupType.FAILOVER, model.groups().get(0).groupType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecoveryPlanProperties model =
            new RecoveryPlanProperties()
                .withFriendlyName("fmjnnawtqa")
                .withPrimaryFabricId("xuckpggqoweyir")
                .withPrimaryFabricFriendlyName("lisn")
                .withRecoveryFabricId("fl")
                .withRecoveryFabricFriendlyName("mpizru")
                .withFailoverDeploymentModel("pqxpx")
                .withReplicationProviders(Arrays.asList("cng", "saasiixtmkzj"))
                .withAllowedOperations(Arrays.asList("iirhgfgrwsd", "gratzvzbglbyvict", "tbrxkjz"))
                .withLastPlannedFailoverTime(OffsetDateTime.parse("2021-06-14T16:49:33Z"))
                .withLastUnplannedFailoverTime(OffsetDateTime.parse("2021-11-19T17:33:25Z"))
                .withLastTestFailoverTime(OffsetDateTime.parse("2021-02-15T19:51:57Z"))
                .withCurrentScenario(
                    new CurrentScenarioDetails()
                        .withScenarioName("kwfbkgo")
                        .withJobId("wopdbydpiz")
                        .withStartTime(OffsetDateTime.parse("2021-11-06T08:13:32Z")))
                .withCurrentScenarioStatus("napxbiygnug")
                .withCurrentScenarioStatusDescription("nfsm")
                .withGroups(
                    Arrays
                        .asList(
                            new RecoveryPlanGroup()
                                .withGroupType(RecoveryPlanGroupType.FAILOVER)
                                .withReplicationProtectedItems(Arrays.asList())
                                .withStartGroupActions(Arrays.asList())
                                .withEndGroupActions(Arrays.asList()),
                            new RecoveryPlanGroup()
                                .withGroupType(RecoveryPlanGroupType.SHUTDOWN)
                                .withReplicationProtectedItems(Arrays.asList())
                                .withStartGroupActions(Arrays.asList())
                                .withEndGroupActions(Arrays.asList()),
                            new RecoveryPlanGroup()
                                .withGroupType(RecoveryPlanGroupType.BOOT)
                                .withReplicationProtectedItems(Arrays.asList())
                                .withStartGroupActions(Arrays.asList())
                                .withEndGroupActions(Arrays.asList()),
                            new RecoveryPlanGroup()
                                .withGroupType(RecoveryPlanGroupType.FAILOVER)
                                .withReplicationProtectedItems(Arrays.asList())
                                .withStartGroupActions(Arrays.asList())
                                .withEndGroupActions(Arrays.asList())))
                .withProviderSpecificDetails(
                    Arrays
                        .asList(
                            new RecoveryPlanProviderSpecificDetails(),
                            new RecoveryPlanProviderSpecificDetails(),
                            new RecoveryPlanProviderSpecificDetails()));
        model = BinaryData.fromObject(model).toObject(RecoveryPlanProperties.class);
        Assertions.assertEquals("fmjnnawtqa", model.friendlyName());
        Assertions.assertEquals("xuckpggqoweyir", model.primaryFabricId());
        Assertions.assertEquals("lisn", model.primaryFabricFriendlyName());
        Assertions.assertEquals("fl", model.recoveryFabricId());
        Assertions.assertEquals("mpizru", model.recoveryFabricFriendlyName());
        Assertions.assertEquals("pqxpx", model.failoverDeploymentModel());
        Assertions.assertEquals("cng", model.replicationProviders().get(0));
        Assertions.assertEquals("iirhgfgrwsd", model.allowedOperations().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-14T16:49:33Z"), model.lastPlannedFailoverTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-19T17:33:25Z"), model.lastUnplannedFailoverTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-15T19:51:57Z"), model.lastTestFailoverTime());
        Assertions.assertEquals("kwfbkgo", model.currentScenario().scenarioName());
        Assertions.assertEquals("wopdbydpiz", model.currentScenario().jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T08:13:32Z"), model.currentScenario().startTime());
        Assertions.assertEquals("napxbiygnug", model.currentScenarioStatus());
        Assertions.assertEquals("nfsm", model.currentScenarioStatusDescription());
        Assertions.assertEquals(RecoveryPlanGroupType.FAILOVER, model.groups().get(0).groupType());
    }
}
