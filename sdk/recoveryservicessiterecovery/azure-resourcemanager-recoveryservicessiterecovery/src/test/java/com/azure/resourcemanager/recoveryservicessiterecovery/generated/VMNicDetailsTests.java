// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.IpConfigDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VMNicDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VMNicDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMNicDetails model = BinaryData.fromString(
            "{\"nicId\":\"ndb\",\"replicaNicId\":\"yeofltfnnxrkad\",\"sourceNicArmId\":\"ynnfmuiii\",\"vMNetworkName\":\"pfoh\",\"recoveryVMNetworkId\":\"fkx\",\"ipConfigs\":[{\"name\":\"r\",\"isPrimary\":true,\"subnetName\":\"tgnjizbeewoiymrv\",\"staticIPAddress\":\"juyrsrziuctixg\",\"ipAddressType\":\"suif\",\"isSeletedForFailover\":false,\"recoverySubnetName\":\"aapezkiswqjmdghs\",\"recoveryStaticIPAddress\":\"arybjufptbjc\",\"recoveryIPAddressType\":\"nciuiyqvldaswvpp\",\"recoveryPublicIPAddressId\":\"qqzlgcndhz\",\"recoveryLBBackendAddressPoolIds\":[\"fcfsrhkhgsnx\"],\"tfoSubnetName\":\"wkpphefsb\",\"tfoStaticIPAddress\":\"lbzxomeikjc\",\"tfoPublicIPAddressId\":\"zacn\",\"tfoLBBackendAddressPoolIds\":[\"fsuqtaazyqbxy\",\"oyfpuq\",\"iqezxlhdj\"]},{\"name\":\"dcadwvpsozjiihjr\",\"isPrimary\":true,\"subnetName\":\"rz\",\"staticIPAddress\":\"pnx\",\"ipAddressType\":\"v\",\"isSeletedForFailover\":false,\"recoverySubnetName\":\"gv\",\"recoveryStaticIPAddress\":\"mxaursqftibtyi\",\"recoveryIPAddressType\":\"yvp\",\"recoveryPublicIPAddressId\":\"fqjpnqno\",\"recoveryLBBackendAddressPoolIds\":[\"bedenrexkx\",\"hxvucnu\"],\"tfoSubnetName\":\"mnhjevdyzn\",\"tfoStaticIPAddress\":\"jsvkskmqozzkivy\",\"tfoPublicIPAddressId\":\"rl\",\"tfoLBBackendAddressPoolIds\":[\"jixlqfhefkwabs\"]},{\"name\":\"ron\",\"isPrimary\":true,\"subnetName\":\"gn\",\"staticIPAddress\":\"xsjxtelexhvuqboz\",\"ipAddressType\":\"lzqocark\",\"isSeletedForFailover\":false,\"recoverySubnetName\":\"cnn\",\"recoveryStaticIPAddress\":\"snxawqyt\",\"recoveryIPAddressType\":\"hd\",\"recoveryPublicIPAddressId\":\"myck\",\"recoveryLBBackendAddressPoolIds\":[\"nxakckyw\"],\"tfoSubnetName\":\"x\",\"tfoStaticIPAddress\":\"abjkdtfohfao\",\"tfoPublicIPAddressId\":\"vkiwrsiwdyjqu\",\"tfoLBBackendAddressPoolIds\":[\"crraueekcsu\"]},{\"name\":\"ogd\",\"isPrimary\":true,\"subnetName\":\"cbgydlqi\",\"staticIPAddress\":\"wmhmptyrilkfbnr\",\"ipAddressType\":\"xvztpbnfnqtxj\",\"isSeletedForFailover\":false,\"recoverySubnetName\":\"lswbnf\",\"recoveryStaticIPAddress\":\"epl\",\"recoveryIPAddressType\":\"qjn\",\"recoveryPublicIPAddressId\":\"zygleexahvm\",\"recoveryLBBackendAddressPoolIds\":[\"sbrcary\",\"sjjzyvoaqajuveh\"],\"tfoSubnetName\":\"tdmkrrbhmpful\",\"tfoStaticIPAddress\":\"efgybpmfbfununmp\",\"tfoPublicIPAddressId\":\"rvfyifkdsch\",\"tfoLBBackendAddressPoolIds\":[\"fict\",\"kjjwgcwn\",\"hbkgfyrt\",\"gm\"]}],\"selectionType\":\"j\",\"recoveryNetworkSecurityGroupId\":\"scdfpdqw\",\"enableAcceleratedNetworkingOnRecovery\":false,\"tfoVMNetworkId\":\"vgwmseharxifvqnr\",\"tfoNetworkSecurityGroupId\":\"mbpjptnvwjh\",\"enableAcceleratedNetworkingOnTfo\":true,\"recoveryNicName\":\"qpxlb\",\"recoveryNicResourceGroupName\":\"akftng\",\"reuseExistingNic\":true,\"tfoRecoveryNicName\":\"ykyutrymdwmfj\",\"tfoRecoveryNicResourceGroupName\":\"y\",\"tfoReuseExistingNic\":true,\"targetNicName\":\"dvdwkqpldrl\"}")
            .toObject(VMNicDetails.class);
        Assertions.assertEquals("ndb", model.nicId());
        Assertions.assertEquals("yeofltfnnxrkad", model.replicaNicId());
        Assertions.assertEquals("ynnfmuiii", model.sourceNicArmId());
        Assertions.assertEquals("pfoh", model.vMNetworkName());
        Assertions.assertEquals("fkx", model.recoveryVMNetworkId());
        Assertions.assertEquals("r", model.ipConfigs().get(0).name());
        Assertions.assertTrue(model.ipConfigs().get(0).isPrimary());
        Assertions.assertEquals("tgnjizbeewoiymrv", model.ipConfigs().get(0).subnetName());
        Assertions.assertEquals("juyrsrziuctixg", model.ipConfigs().get(0).staticIpAddress());
        Assertions.assertEquals("suif", model.ipConfigs().get(0).ipAddressType());
        Assertions.assertFalse(model.ipConfigs().get(0).isSeletedForFailover());
        Assertions.assertEquals("aapezkiswqjmdghs", model.ipConfigs().get(0).recoverySubnetName());
        Assertions.assertEquals("arybjufptbjc", model.ipConfigs().get(0).recoveryStaticIpAddress());
        Assertions.assertEquals("nciuiyqvldaswvpp", model.ipConfigs().get(0).recoveryIpAddressType());
        Assertions.assertEquals("qqzlgcndhz", model.ipConfigs().get(0).recoveryPublicIpAddressId());
        Assertions.assertEquals("fcfsrhkhgsnx", model.ipConfigs().get(0).recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("wkpphefsb", model.ipConfigs().get(0).tfoSubnetName());
        Assertions.assertEquals("lbzxomeikjc", model.ipConfigs().get(0).tfoStaticIpAddress());
        Assertions.assertEquals("zacn", model.ipConfigs().get(0).tfoPublicIpAddressId());
        Assertions.assertEquals("fsuqtaazyqbxy", model.ipConfigs().get(0).tfoLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("j", model.selectionType());
        Assertions.assertEquals("scdfpdqw", model.recoveryNetworkSecurityGroupId());
        Assertions.assertFalse(model.enableAcceleratedNetworkingOnRecovery());
        Assertions.assertEquals("vgwmseharxifvqnr", model.tfoVMNetworkId());
        Assertions.assertEquals("mbpjptnvwjh", model.tfoNetworkSecurityGroupId());
        Assertions.assertTrue(model.enableAcceleratedNetworkingOnTfo());
        Assertions.assertEquals("qpxlb", model.recoveryNicName());
        Assertions.assertEquals("akftng", model.recoveryNicResourceGroupName());
        Assertions.assertTrue(model.reuseExistingNic());
        Assertions.assertEquals("ykyutrymdwmfj", model.tfoRecoveryNicName());
        Assertions.assertEquals("y", model.tfoRecoveryNicResourceGroupName());
        Assertions.assertTrue(model.tfoReuseExistingNic());
        Assertions.assertEquals("dvdwkqpldrl", model.targetNicName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMNicDetails model = new VMNicDetails().withNicId("ndb")
            .withReplicaNicId("yeofltfnnxrkad")
            .withSourceNicArmId("ynnfmuiii")
            .withVMNetworkName("pfoh")
            .withRecoveryVMNetworkId("fkx")
            .withIpConfigs(Arrays.asList(
                new IpConfigDetails().withName("r")
                    .withIsPrimary(true)
                    .withSubnetName("tgnjizbeewoiymrv")
                    .withStaticIpAddress("juyrsrziuctixg")
                    .withIpAddressType("suif")
                    .withIsSeletedForFailover(false)
                    .withRecoverySubnetName("aapezkiswqjmdghs")
                    .withRecoveryStaticIpAddress("arybjufptbjc")
                    .withRecoveryIpAddressType("nciuiyqvldaswvpp")
                    .withRecoveryPublicIpAddressId("qqzlgcndhz")
                    .withRecoveryLBBackendAddressPoolIds(Arrays.asList("fcfsrhkhgsnx"))
                    .withTfoSubnetName("wkpphefsb")
                    .withTfoStaticIpAddress("lbzxomeikjc")
                    .withTfoPublicIpAddressId("zacn")
                    .withTfoLBBackendAddressPoolIds(Arrays.asList("fsuqtaazyqbxy", "oyfpuq", "iqezxlhdj")),
                new IpConfigDetails().withName("dcadwvpsozjiihjr")
                    .withIsPrimary(true)
                    .withSubnetName("rz")
                    .withStaticIpAddress("pnx")
                    .withIpAddressType("v")
                    .withIsSeletedForFailover(false)
                    .withRecoverySubnetName("gv")
                    .withRecoveryStaticIpAddress("mxaursqftibtyi")
                    .withRecoveryIpAddressType("yvp")
                    .withRecoveryPublicIpAddressId("fqjpnqno")
                    .withRecoveryLBBackendAddressPoolIds(Arrays.asList("bedenrexkx", "hxvucnu"))
                    .withTfoSubnetName("mnhjevdyzn")
                    .withTfoStaticIpAddress("jsvkskmqozzkivy")
                    .withTfoPublicIpAddressId("rl")
                    .withTfoLBBackendAddressPoolIds(Arrays.asList("jixlqfhefkwabs")),
                new IpConfigDetails().withName("ron")
                    .withIsPrimary(true)
                    .withSubnetName("gn")
                    .withStaticIpAddress("xsjxtelexhvuqboz")
                    .withIpAddressType("lzqocark")
                    .withIsSeletedForFailover(false)
                    .withRecoverySubnetName("cnn")
                    .withRecoveryStaticIpAddress("snxawqyt")
                    .withRecoveryIpAddressType("hd")
                    .withRecoveryPublicIpAddressId("myck")
                    .withRecoveryLBBackendAddressPoolIds(Arrays.asList("nxakckyw"))
                    .withTfoSubnetName("x")
                    .withTfoStaticIpAddress("abjkdtfohfao")
                    .withTfoPublicIpAddressId("vkiwrsiwdyjqu")
                    .withTfoLBBackendAddressPoolIds(Arrays.asList("crraueekcsu")),
                new IpConfigDetails().withName("ogd")
                    .withIsPrimary(true)
                    .withSubnetName("cbgydlqi")
                    .withStaticIpAddress("wmhmptyrilkfbnr")
                    .withIpAddressType("xvztpbnfnqtxj")
                    .withIsSeletedForFailover(false)
                    .withRecoverySubnetName("lswbnf")
                    .withRecoveryStaticIpAddress("epl")
                    .withRecoveryIpAddressType("qjn")
                    .withRecoveryPublicIpAddressId("zygleexahvm")
                    .withRecoveryLBBackendAddressPoolIds(Arrays.asList("sbrcary", "sjjzyvoaqajuveh"))
                    .withTfoSubnetName("tdmkrrbhmpful")
                    .withTfoStaticIpAddress("efgybpmfbfununmp")
                    .withTfoPublicIpAddressId("rvfyifkdsch")
                    .withTfoLBBackendAddressPoolIds(Arrays.asList("fict", "kjjwgcwn", "hbkgfyrt", "gm"))))
            .withSelectionType("j")
            .withRecoveryNetworkSecurityGroupId("scdfpdqw")
            .withEnableAcceleratedNetworkingOnRecovery(false)
            .withTfoVMNetworkId("vgwmseharxifvqnr")
            .withTfoNetworkSecurityGroupId("mbpjptnvwjh")
            .withEnableAcceleratedNetworkingOnTfo(true)
            .withRecoveryNicName("qpxlb")
            .withRecoveryNicResourceGroupName("akftng")
            .withReuseExistingNic(true)
            .withTfoRecoveryNicName("ykyutrymdwmfj")
            .withTfoRecoveryNicResourceGroupName("y")
            .withTfoReuseExistingNic(true)
            .withTargetNicName("dvdwkqpldrl");
        model = BinaryData.fromObject(model).toObject(VMNicDetails.class);
        Assertions.assertEquals("ndb", model.nicId());
        Assertions.assertEquals("yeofltfnnxrkad", model.replicaNicId());
        Assertions.assertEquals("ynnfmuiii", model.sourceNicArmId());
        Assertions.assertEquals("pfoh", model.vMNetworkName());
        Assertions.assertEquals("fkx", model.recoveryVMNetworkId());
        Assertions.assertEquals("r", model.ipConfigs().get(0).name());
        Assertions.assertTrue(model.ipConfigs().get(0).isPrimary());
        Assertions.assertEquals("tgnjizbeewoiymrv", model.ipConfigs().get(0).subnetName());
        Assertions.assertEquals("juyrsrziuctixg", model.ipConfigs().get(0).staticIpAddress());
        Assertions.assertEquals("suif", model.ipConfigs().get(0).ipAddressType());
        Assertions.assertFalse(model.ipConfigs().get(0).isSeletedForFailover());
        Assertions.assertEquals("aapezkiswqjmdghs", model.ipConfigs().get(0).recoverySubnetName());
        Assertions.assertEquals("arybjufptbjc", model.ipConfigs().get(0).recoveryStaticIpAddress());
        Assertions.assertEquals("nciuiyqvldaswvpp", model.ipConfigs().get(0).recoveryIpAddressType());
        Assertions.assertEquals("qqzlgcndhz", model.ipConfigs().get(0).recoveryPublicIpAddressId());
        Assertions.assertEquals("fcfsrhkhgsnx", model.ipConfigs().get(0).recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("wkpphefsb", model.ipConfigs().get(0).tfoSubnetName());
        Assertions.assertEquals("lbzxomeikjc", model.ipConfigs().get(0).tfoStaticIpAddress());
        Assertions.assertEquals("zacn", model.ipConfigs().get(0).tfoPublicIpAddressId());
        Assertions.assertEquals("fsuqtaazyqbxy", model.ipConfigs().get(0).tfoLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("j", model.selectionType());
        Assertions.assertEquals("scdfpdqw", model.recoveryNetworkSecurityGroupId());
        Assertions.assertFalse(model.enableAcceleratedNetworkingOnRecovery());
        Assertions.assertEquals("vgwmseharxifvqnr", model.tfoVMNetworkId());
        Assertions.assertEquals("mbpjptnvwjh", model.tfoNetworkSecurityGroupId());
        Assertions.assertTrue(model.enableAcceleratedNetworkingOnTfo());
        Assertions.assertEquals("qpxlb", model.recoveryNicName());
        Assertions.assertEquals("akftng", model.recoveryNicResourceGroupName());
        Assertions.assertTrue(model.reuseExistingNic());
        Assertions.assertEquals("ykyutrymdwmfj", model.tfoRecoveryNicName());
        Assertions.assertEquals("y", model.tfoRecoveryNicResourceGroupName());
        Assertions.assertTrue(model.tfoReuseExistingNic());
        Assertions.assertEquals("dvdwkqpldrl", model.targetNicName());
    }
}
