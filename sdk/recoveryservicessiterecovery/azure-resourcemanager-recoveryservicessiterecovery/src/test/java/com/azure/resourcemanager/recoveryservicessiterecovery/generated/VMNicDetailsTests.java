// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.IpConfigDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VMNicDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VMNicDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMNicDetails model = BinaryData.fromString(
            "{\"nicId\":\"cbhhez\",\"replicaNicId\":\"u\",\"sourceNicArmId\":\"sqxutr\",\"vMNetworkName\":\"rruyuu\",\"recoveryVMNetworkId\":\"vlm\",\"ipConfigs\":[{\"name\":\"ol\",\"isPrimary\":false,\"subnetName\":\"b\",\"staticIPAddress\":\"tpc\",\"ipAddressType\":\"hprzrvxhmtfho\",\"isSeletedForFailover\":true,\"recoverySubnetName\":\"cmj\",\"recoveryStaticIPAddress\":\"gxnoqrxtdis\",\"recoveryIPAddressType\":\"evhdlmydid\",\"recoveryPublicIPAddressId\":\"epfwwt\",\"recoveryLBBackendAddressPoolIds\":[\"o\",\"sxxh\",\"wcdbckyoik\"],\"tfoSubnetName\":\"xhn\",\"tfoStaticIPAddress\":\"knjz\",\"tfoPublicIPAddressId\":\"h\",\"tfoLBBackendAddressPoolIds\":[\"plvukaobrlbpg\"]},{\"name\":\"bagn\",\"isPrimary\":false,\"subnetName\":\"g\",\"staticIPAddress\":\"uowakyw\",\"ipAddressType\":\"hjym\",\"isSeletedForFailover\":false,\"recoverySubnetName\":\"tagdrc\",\"recoveryStaticIPAddress\":\"soljome\",\"recoveryIPAddressType\":\"fycnlb\",\"recoveryPublicIPAddressId\":\"jcodkkgjiiytssi\",\"recoveryLBBackendAddressPoolIds\":[\"bcufqbvntn\"],\"tfoSubnetName\":\"mqso\",\"tfoStaticIPAddress\":\"cekxgnly\",\"tfoPublicIPAddressId\":\"xcpwzvmdok\",\"tfoLBBackendAddressPoolIds\":[\"tiwlwxlboncqb\"]}],\"selectionType\":\"qicqchygt\",\"recoveryNetworkSecurityGroupId\":\"byjanep\",\"enableAcceleratedNetworkingOnRecovery\":false,\"tfoVMNetworkId\":\"kxyqvgxiaodetv\",\"tfoNetworkSecurityGroupId\":\"kxdxuwsaifmcwn\",\"enableAcceleratedNetworkingOnTfo\":false,\"recoveryNicName\":\"lehgcvkbc\",\"recoveryNicResourceGroupName\":\"jolgjyyxpvels\",\"reuseExistingNic\":false,\"tfoRecoveryNicName\":\"zevxoqein\",\"tfoRecoveryNicResourceGroupName\":\"waljglzoblqwaaf\",\"tfoReuseExistingNic\":false,\"targetNicName\":\"hmzyqbhdvafjrqpj\"}")
            .toObject(VMNicDetails.class);
        Assertions.assertEquals("cbhhez", model.nicId());
        Assertions.assertEquals("u", model.replicaNicId());
        Assertions.assertEquals("sqxutr", model.sourceNicArmId());
        Assertions.assertEquals("rruyuu", model.vMNetworkName());
        Assertions.assertEquals("vlm", model.recoveryVMNetworkId());
        Assertions.assertEquals("ol", model.ipConfigs().get(0).name());
        Assertions.assertEquals(false, model.ipConfigs().get(0).isPrimary());
        Assertions.assertEquals("b", model.ipConfigs().get(0).subnetName());
        Assertions.assertEquals("tpc", model.ipConfigs().get(0).staticIpAddress());
        Assertions.assertEquals("hprzrvxhmtfho", model.ipConfigs().get(0).ipAddressType());
        Assertions.assertEquals(true, model.ipConfigs().get(0).isSeletedForFailover());
        Assertions.assertEquals("cmj", model.ipConfigs().get(0).recoverySubnetName());
        Assertions.assertEquals("gxnoqrxtdis", model.ipConfigs().get(0).recoveryStaticIpAddress());
        Assertions.assertEquals("evhdlmydid", model.ipConfigs().get(0).recoveryIpAddressType());
        Assertions.assertEquals("epfwwt", model.ipConfigs().get(0).recoveryPublicIpAddressId());
        Assertions.assertEquals("o", model.ipConfigs().get(0).recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("xhn", model.ipConfigs().get(0).tfoSubnetName());
        Assertions.assertEquals("knjz", model.ipConfigs().get(0).tfoStaticIpAddress());
        Assertions.assertEquals("h", model.ipConfigs().get(0).tfoPublicIpAddressId());
        Assertions.assertEquals("plvukaobrlbpg", model.ipConfigs().get(0).tfoLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("qicqchygt", model.selectionType());
        Assertions.assertEquals("byjanep", model.recoveryNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.enableAcceleratedNetworkingOnRecovery());
        Assertions.assertEquals("kxyqvgxiaodetv", model.tfoVMNetworkId());
        Assertions.assertEquals("kxdxuwsaifmcwn", model.tfoNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.enableAcceleratedNetworkingOnTfo());
        Assertions.assertEquals("lehgcvkbc", model.recoveryNicName());
        Assertions.assertEquals("jolgjyyxpvels", model.recoveryNicResourceGroupName());
        Assertions.assertEquals(false, model.reuseExistingNic());
        Assertions.assertEquals("zevxoqein", model.tfoRecoveryNicName());
        Assertions.assertEquals("waljglzoblqwaaf", model.tfoRecoveryNicResourceGroupName());
        Assertions.assertEquals(false, model.tfoReuseExistingNic());
        Assertions.assertEquals("hmzyqbhdvafjrqpj", model.targetNicName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMNicDetails model
            = new VMNicDetails()
                .withNicId("cbhhez").withReplicaNicId("u").withSourceNicArmId(
                    "sqxutr")
                .withVMNetworkName("rruyuu").withRecoveryVMNetworkId("vlm")
                .withIpConfigs(Arrays.asList(
                    new IpConfigDetails().withName("ol").withIsPrimary(false).withSubnetName("b")
                        .withStaticIpAddress("tpc").withIpAddressType("hprzrvxhmtfho").withIsSeletedForFailover(true)
                        .withRecoverySubnetName("cmj").withRecoveryStaticIpAddress("gxnoqrxtdis")
                        .withRecoveryIpAddressType("evhdlmydid").withRecoveryPublicIpAddressId("epfwwt")
                        .withRecoveryLBBackendAddressPoolIds(Arrays.asList("o", "sxxh", "wcdbckyoik"))
                        .withTfoSubnetName("xhn").withTfoStaticIpAddress("knjz").withTfoPublicIpAddressId("h")
                        .withTfoLBBackendAddressPoolIds(Arrays.asList("plvukaobrlbpg")),
                    new IpConfigDetails().withName("bagn").withIsPrimary(false).withSubnetName("g")
                        .withStaticIpAddress("uowakyw").withIpAddressType("hjym").withIsSeletedForFailover(false)
                        .withRecoverySubnetName("tagdrc").withRecoveryStaticIpAddress("soljome")
                        .withRecoveryIpAddressType("fycnlb").withRecoveryPublicIpAddressId("jcodkkgjiiytssi")
                        .withRecoveryLBBackendAddressPoolIds(Arrays.asList("bcufqbvntn")).withTfoSubnetName("mqso")
                        .withTfoStaticIpAddress("cekxgnly").withTfoPublicIpAddressId("xcpwzvmdok")
                        .withTfoLBBackendAddressPoolIds(Arrays.asList("tiwlwxlboncqb"))))
                .withSelectionType("qicqchygt").withRecoveryNetworkSecurityGroupId("byjanep")
                .withEnableAcceleratedNetworkingOnRecovery(false).withTfoVMNetworkId("kxyqvgxiaodetv")
                .withTfoNetworkSecurityGroupId("kxdxuwsaifmcwn").withEnableAcceleratedNetworkingOnTfo(false)
                .withRecoveryNicName("lehgcvkbc").withRecoveryNicResourceGroupName("jolgjyyxpvels")
                .withReuseExistingNic(false).withTfoRecoveryNicName("zevxoqein")
                .withTfoRecoveryNicResourceGroupName("waljglzoblqwaaf").withTfoReuseExistingNic(false)
                .withTargetNicName("hmzyqbhdvafjrqpj");
        model = BinaryData.fromObject(model).toObject(VMNicDetails.class);
        Assertions.assertEquals("cbhhez", model.nicId());
        Assertions.assertEquals("u", model.replicaNicId());
        Assertions.assertEquals("sqxutr", model.sourceNicArmId());
        Assertions.assertEquals("rruyuu", model.vMNetworkName());
        Assertions.assertEquals("vlm", model.recoveryVMNetworkId());
        Assertions.assertEquals("ol", model.ipConfigs().get(0).name());
        Assertions.assertEquals(false, model.ipConfigs().get(0).isPrimary());
        Assertions.assertEquals("b", model.ipConfigs().get(0).subnetName());
        Assertions.assertEquals("tpc", model.ipConfigs().get(0).staticIpAddress());
        Assertions.assertEquals("hprzrvxhmtfho", model.ipConfigs().get(0).ipAddressType());
        Assertions.assertEquals(true, model.ipConfigs().get(0).isSeletedForFailover());
        Assertions.assertEquals("cmj", model.ipConfigs().get(0).recoverySubnetName());
        Assertions.assertEquals("gxnoqrxtdis", model.ipConfigs().get(0).recoveryStaticIpAddress());
        Assertions.assertEquals("evhdlmydid", model.ipConfigs().get(0).recoveryIpAddressType());
        Assertions.assertEquals("epfwwt", model.ipConfigs().get(0).recoveryPublicIpAddressId());
        Assertions.assertEquals("o", model.ipConfigs().get(0).recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("xhn", model.ipConfigs().get(0).tfoSubnetName());
        Assertions.assertEquals("knjz", model.ipConfigs().get(0).tfoStaticIpAddress());
        Assertions.assertEquals("h", model.ipConfigs().get(0).tfoPublicIpAddressId());
        Assertions.assertEquals("plvukaobrlbpg", model.ipConfigs().get(0).tfoLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("qicqchygt", model.selectionType());
        Assertions.assertEquals("byjanep", model.recoveryNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.enableAcceleratedNetworkingOnRecovery());
        Assertions.assertEquals("kxyqvgxiaodetv", model.tfoVMNetworkId());
        Assertions.assertEquals("kxdxuwsaifmcwn", model.tfoNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.enableAcceleratedNetworkingOnTfo());
        Assertions.assertEquals("lehgcvkbc", model.recoveryNicName());
        Assertions.assertEquals("jolgjyyxpvels", model.recoveryNicResourceGroupName());
        Assertions.assertEquals(false, model.reuseExistingNic());
        Assertions.assertEquals("zevxoqein", model.tfoRecoveryNicName());
        Assertions.assertEquals("waljglzoblqwaaf", model.tfoRecoveryNicResourceGroupName());
        Assertions.assertEquals(false, model.tfoReuseExistingNic());
        Assertions.assertEquals("hmzyqbhdvafjrqpj", model.targetNicName());
    }
}
