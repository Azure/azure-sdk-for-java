// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.IpConfigInputDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.LicenseType;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateReplicationProtectedItemInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateReplicationProtectedItemInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateReplicationProtectedItemProviderInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.VMNicInputDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateReplicationProtectedItemInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateReplicationProtectedItemInput model = BinaryData.fromString(
            "{\"properties\":{\"recoveryAzureVMName\":\"wneaiv\",\"recoveryAzureVMSize\":\"czelpcirel\",\"selectedRecoveryAzureNetworkId\":\"eae\",\"selectedTfoAzureNetworkId\":\"abfatkl\",\"selectedSourceNicId\":\"xbjhwuaanozjosph\",\"enableRdpOnTargetOption\":\"ulpjr\",\"vmNics\":[{\"nicId\":\"l\",\"ipConfigs\":[{\"ipConfigName\":\"jwosytxitcskfck\",\"isPrimary\":true,\"isSeletedForFailover\":false,\"recoverySubnetName\":\"kkezzikhlyfjhdgq\",\"recoveryStaticIPAddress\":\"ebdunyg\",\"recoveryPublicIPAddressId\":\"qidbqfatpxllrxcy\",\"recoveryLBBackendAddressPoolIds\":[\"a\",\"su\"],\"tfoSubnetName\":\"r\",\"tfoStaticIPAddress\":\"wdmjsjqbjhhyx\",\"tfoPublicIPAddressId\":\"wlycoduhpkxkg\",\"tfoLBBackendAddressPoolIds\":[\"re\",\"n\"]},{\"ipConfigName\":\"xqugjhkycubedd\",\"isPrimary\":true,\"isSeletedForFailover\":true,\"recoverySubnetName\":\"qmzqalkrmnjijpx\",\"recoveryStaticIPAddress\":\"q\",\"recoveryPublicIPAddressId\":\"dfnbyxbaaabjyv\",\"recoveryLBBackendAddressPoolIds\":[\"fimrzrtuzqogse\",\"nevfdnw\",\"wmewzsyy\",\"euzsoi\"],\"tfoSubnetName\":\"ud\",\"tfoStaticIPAddress\":\"rx\",\"tfoPublicIPAddressId\":\"thzvaytdwkqbrqu\",\"tfoLBBackendAddressPoolIds\":[\"xhexiilivpdti\",\"r\",\"tdqoaxoruzfgsq\"]}],\"selectionType\":\"fxrxxle\",\"recoveryNetworkSecurityGroupId\":\"ramxjezwlwnw\",\"enableAcceleratedNetworkingOnRecovery\":false,\"tfoNetworkSecurityGroupId\":\"cvydypatdoo\",\"enableAcceleratedNetworkingOnTfo\":false,\"recoveryNicName\":\"niodkooeb\",\"recoveryNicResourceGroupName\":\"ujhemmsbvdkcrodt\",\"reuseExistingNic\":true,\"tfoNicName\":\"wj\",\"tfoNicResourceGroupName\":\"lt\",\"tfoReuseExistingNic\":true,\"targetNicName\":\"vefkdlfoakggk\"}],\"licenseType\":\"NotSpecified\",\"recoveryAvailabilitySetId\":\"ao\",\"providerSpecificDetails\":{\"instanceType\":\"UpdateReplicationProtectedItemProviderInput\"}}}")
            .toObject(UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("wneaiv", model.properties().recoveryAzureVMName());
        Assertions.assertEquals("czelpcirel", model.properties().recoveryAzureVMSize());
        Assertions.assertEquals("eae", model.properties().selectedRecoveryAzureNetworkId());
        Assertions.assertEquals("abfatkl", model.properties().selectedTfoAzureNetworkId());
        Assertions.assertEquals("xbjhwuaanozjosph", model.properties().selectedSourceNicId());
        Assertions.assertEquals("ulpjr", model.properties().enableRdpOnTargetOption());
        Assertions.assertEquals("l", model.properties().vmNics().get(0).nicId());
        Assertions.assertEquals("jwosytxitcskfck",
            model.properties().vmNics().get(0).ipConfigs().get(0).ipConfigName());
        Assertions.assertEquals(true, model.properties().vmNics().get(0).ipConfigs().get(0).isPrimary());
        Assertions.assertEquals(false, model.properties().vmNics().get(0).ipConfigs().get(0).isSeletedForFailover());
        Assertions.assertEquals("kkezzikhlyfjhdgq",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoverySubnetName());
        Assertions.assertEquals("ebdunyg",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoveryStaticIpAddress());
        Assertions.assertEquals("qidbqfatpxllrxcy",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoveryPublicIpAddressId());
        Assertions.assertEquals("a",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("r", model.properties().vmNics().get(0).ipConfigs().get(0).tfoSubnetName());
        Assertions.assertEquals("wdmjsjqbjhhyx",
            model.properties().vmNics().get(0).ipConfigs().get(0).tfoStaticIpAddress());
        Assertions.assertEquals("wlycoduhpkxkg",
            model.properties().vmNics().get(0).ipConfigs().get(0).tfoPublicIpAddressId());
        Assertions.assertEquals("re",
            model.properties().vmNics().get(0).ipConfigs().get(0).tfoLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("fxrxxle", model.properties().vmNics().get(0).selectionType());
        Assertions.assertEquals("ramxjezwlwnw", model.properties().vmNics().get(0).recoveryNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.properties().vmNics().get(0).enableAcceleratedNetworkingOnRecovery());
        Assertions.assertEquals("cvydypatdoo", model.properties().vmNics().get(0).tfoNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.properties().vmNics().get(0).enableAcceleratedNetworkingOnTfo());
        Assertions.assertEquals("niodkooeb", model.properties().vmNics().get(0).recoveryNicName());
        Assertions.assertEquals("ujhemmsbvdkcrodt", model.properties().vmNics().get(0).recoveryNicResourceGroupName());
        Assertions.assertEquals(true, model.properties().vmNics().get(0).reuseExistingNic());
        Assertions.assertEquals("wj", model.properties().vmNics().get(0).tfoNicName());
        Assertions.assertEquals("lt", model.properties().vmNics().get(0).tfoNicResourceGroupName());
        Assertions.assertEquals(true, model.properties().vmNics().get(0).tfoReuseExistingNic());
        Assertions.assertEquals("vefkdlfoakggk", model.properties().vmNics().get(0).targetNicName());
        Assertions.assertEquals(LicenseType.NOT_SPECIFIED, model.properties().licenseType());
        Assertions.assertEquals("ao", model.properties().recoveryAvailabilitySetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateReplicationProtectedItemInput model
            = new UpdateReplicationProtectedItemInput()
                .withProperties(
                    new UpdateReplicationProtectedItemInputProperties()
                        .withRecoveryAzureVMName("wneaiv").withRecoveryAzureVMSize(
                            "czelpcirel")
                        .withSelectedRecoveryAzureNetworkId("eae").withSelectedTfoAzureNetworkId("abfatkl")
                        .withSelectedSourceNicId("xbjhwuaanozjosph").withEnableRdpOnTargetOption("ulpjr")
                        .withVmNics(
                            Arrays
                                .asList(
                                    new VMNicInputDetails()
                                        .withNicId(
                                            "l")
                                        .withIpConfigs(Arrays.asList(new IpConfigInputDetails()
                                            .withIpConfigName("jwosytxitcskfck").withIsPrimary(true)
                                            .withIsSeletedForFailover(false).withRecoverySubnetName("kkezzikhlyfjhdgq")
                                            .withRecoveryStaticIpAddress("ebdunyg")
                                            .withRecoveryPublicIpAddressId("qidbqfatpxllrxcy")
                                            .withRecoveryLBBackendAddressPoolIds(Arrays.asList("a", "su"))
                                            .withTfoSubnetName("r").withTfoStaticIpAddress("wdmjsjqbjhhyx")
                                            .withTfoPublicIpAddressId("wlycoduhpkxkg")
                                            .withTfoLBBackendAddressPoolIds(Arrays.asList("re", "n")),
                                            new IpConfigInputDetails().withIpConfigName("xqugjhkycubedd")
                                                .withIsPrimary(true).withIsSeletedForFailover(true)
                                                .withRecoverySubnetName("qmzqalkrmnjijpx")
                                                .withRecoveryStaticIpAddress("q")
                                                .withRecoveryPublicIpAddressId("dfnbyxbaaabjyv")
                                                .withRecoveryLBBackendAddressPoolIds(
                                                    Arrays.asList("fimrzrtuzqogse", "nevfdnw", "wmewzsyy", "euzsoi"))
                                                .withTfoSubnetName("ud").withTfoStaticIpAddress("rx")
                                                .withTfoPublicIpAddressId("thzvaytdwkqbrqu")
                                                .withTfoLBBackendAddressPoolIds(
                                                    Arrays.asList("xhexiilivpdti", "r", "tdqoaxoruzfgsq"))))
                                        .withSelectionType("fxrxxle").withRecoveryNetworkSecurityGroupId("ramxjezwlwnw")
                                        .withEnableAcceleratedNetworkingOnRecovery(false)
                                        .withTfoNetworkSecurityGroupId("cvydypatdoo")
                                        .withEnableAcceleratedNetworkingOnTfo(false).withRecoveryNicName("niodkooeb")
                                        .withRecoveryNicResourceGroupName("ujhemmsbvdkcrodt").withReuseExistingNic(true)
                                        .withTfoNicName("wj").withTfoNicResourceGroupName("lt")
                                        .withTfoReuseExistingNic(true).withTargetNicName("vefkdlfoakggk")))
                        .withLicenseType(LicenseType.NOT_SPECIFIED).withRecoveryAvailabilitySetId("ao")
                        .withProviderSpecificDetails(new UpdateReplicationProtectedItemProviderInput()));
        model = BinaryData.fromObject(model).toObject(UpdateReplicationProtectedItemInput.class);
        Assertions.assertEquals("wneaiv", model.properties().recoveryAzureVMName());
        Assertions.assertEquals("czelpcirel", model.properties().recoveryAzureVMSize());
        Assertions.assertEquals("eae", model.properties().selectedRecoveryAzureNetworkId());
        Assertions.assertEquals("abfatkl", model.properties().selectedTfoAzureNetworkId());
        Assertions.assertEquals("xbjhwuaanozjosph", model.properties().selectedSourceNicId());
        Assertions.assertEquals("ulpjr", model.properties().enableRdpOnTargetOption());
        Assertions.assertEquals("l", model.properties().vmNics().get(0).nicId());
        Assertions.assertEquals("jwosytxitcskfck",
            model.properties().vmNics().get(0).ipConfigs().get(0).ipConfigName());
        Assertions.assertEquals(true, model.properties().vmNics().get(0).ipConfigs().get(0).isPrimary());
        Assertions.assertEquals(false, model.properties().vmNics().get(0).ipConfigs().get(0).isSeletedForFailover());
        Assertions.assertEquals("kkezzikhlyfjhdgq",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoverySubnetName());
        Assertions.assertEquals("ebdunyg",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoveryStaticIpAddress());
        Assertions.assertEquals("qidbqfatpxllrxcy",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoveryPublicIpAddressId());
        Assertions.assertEquals("a",
            model.properties().vmNics().get(0).ipConfigs().get(0).recoveryLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("r", model.properties().vmNics().get(0).ipConfigs().get(0).tfoSubnetName());
        Assertions.assertEquals("wdmjsjqbjhhyx",
            model.properties().vmNics().get(0).ipConfigs().get(0).tfoStaticIpAddress());
        Assertions.assertEquals("wlycoduhpkxkg",
            model.properties().vmNics().get(0).ipConfigs().get(0).tfoPublicIpAddressId());
        Assertions.assertEquals("re",
            model.properties().vmNics().get(0).ipConfigs().get(0).tfoLBBackendAddressPoolIds().get(0));
        Assertions.assertEquals("fxrxxle", model.properties().vmNics().get(0).selectionType());
        Assertions.assertEquals("ramxjezwlwnw", model.properties().vmNics().get(0).recoveryNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.properties().vmNics().get(0).enableAcceleratedNetworkingOnRecovery());
        Assertions.assertEquals("cvydypatdoo", model.properties().vmNics().get(0).tfoNetworkSecurityGroupId());
        Assertions.assertEquals(false, model.properties().vmNics().get(0).enableAcceleratedNetworkingOnTfo());
        Assertions.assertEquals("niodkooeb", model.properties().vmNics().get(0).recoveryNicName());
        Assertions.assertEquals("ujhemmsbvdkcrodt", model.properties().vmNics().get(0).recoveryNicResourceGroupName());
        Assertions.assertEquals(true, model.properties().vmNics().get(0).reuseExistingNic());
        Assertions.assertEquals("wj", model.properties().vmNics().get(0).tfoNicName());
        Assertions.assertEquals("lt", model.properties().vmNics().get(0).tfoNicResourceGroupName());
        Assertions.assertEquals(true, model.properties().vmNics().get(0).tfoReuseExistingNic());
        Assertions.assertEquals("vefkdlfoakggk", model.properties().vmNics().get(0).targetNicName());
        Assertions.assertEquals(LicenseType.NOT_SPECIFIED, model.properties().licenseType());
        Assertions.assertEquals("ao", model.properties().recoveryAvailabilitySetId());
    }
}
