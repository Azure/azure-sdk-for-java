// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.DiskDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.HyperVVirtualMachineDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.OSDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.PresenceStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class HyperVVirtualMachineDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVVirtualMachineDetails model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"HyperVVirtualMachine\",\"sourceItemId\":\"rzwnyk\",\"generation\":\"djchlr\",\"osDetails\":{\"osType\":\"ctofldseacdhztxk\",\"productType\":\"fg\",\"osEdition\":\"wjiyewhfjsrwq\",\"oSVersion\":\"etfgcwvrrmdqntyc\",\"oSMajorVersion\":\"wthv\",\"oSMinorVersion\":\"xgnuyeamcmhu\"},\"diskDetails\":[{\"maxSizeMB\":6639083640115121332,\"vhdType\":\"okwcpqtwl\",\"vhdId\":\"sqrggvrbnyruko\",\"vhdName\":\"aciduwjleip\"},{\"maxSizeMB\":1008696801865815383,\"vhdType\":\"xpzruzythqkk\",\"vhdId\":\"bg\",\"vhdName\":\"ellv\"},{\"maxSizeMB\":5113895630128192471,\"vhdType\":\"mnitmujd\",\"vhdId\":\"mcl\",\"vhdName\":\"mffhmjpddnyxfzuv\"}],\"hasPhysicalDisk\":\"Unknown\",\"hasFibreChannelAdapter\":\"NotPresent\",\"hasSharedVhd\":\"Unknown\",\"hyperVHostId\":\"qrbrpvnmdyfoeboj\"}")
                .toObject(HyperVVirtualMachineDetails.class);
        Assertions.assertEquals("rzwnyk", model.sourceItemId());
        Assertions.assertEquals("djchlr", model.generation());
        Assertions.assertEquals("ctofldseacdhztxk", model.osDetails().osType());
        Assertions.assertEquals("fg", model.osDetails().productType());
        Assertions.assertEquals("wjiyewhfjsrwq", model.osDetails().osEdition());
        Assertions.assertEquals("etfgcwvrrmdqntyc", model.osDetails().oSVersion());
        Assertions.assertEquals("wthv", model.osDetails().oSMajorVersion());
        Assertions.assertEquals("xgnuyeamcmhu", model.osDetails().oSMinorVersion());
        Assertions.assertEquals(6639083640115121332L, model.diskDetails().get(0).maxSizeMB());
        Assertions.assertEquals("okwcpqtwl", model.diskDetails().get(0).vhdType());
        Assertions.assertEquals("sqrggvrbnyruko", model.diskDetails().get(0).vhdId());
        Assertions.assertEquals("aciduwjleip", model.diskDetails().get(0).vhdName());
        Assertions.assertEquals(PresenceStatus.UNKNOWN, model.hasPhysicalDisk());
        Assertions.assertEquals(PresenceStatus.NOT_PRESENT, model.hasFibreChannelAdapter());
        Assertions.assertEquals(PresenceStatus.UNKNOWN, model.hasSharedVhd());
        Assertions.assertEquals("qrbrpvnmdyfoeboj", model.hyperVHostId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVVirtualMachineDetails model =
            new HyperVVirtualMachineDetails()
                .withSourceItemId("rzwnyk")
                .withGeneration("djchlr")
                .withOsDetails(
                    new OSDetails()
                        .withOsType("ctofldseacdhztxk")
                        .withProductType("fg")
                        .withOsEdition("wjiyewhfjsrwq")
                        .withOSVersion("etfgcwvrrmdqntyc")
                        .withOSMajorVersion("wthv")
                        .withOSMinorVersion("xgnuyeamcmhu"))
                .withDiskDetails(
                    Arrays
                        .asList(
                            new DiskDetails()
                                .withMaxSizeMB(6639083640115121332L)
                                .withVhdType("okwcpqtwl")
                                .withVhdId("sqrggvrbnyruko")
                                .withVhdName("aciduwjleip"),
                            new DiskDetails()
                                .withMaxSizeMB(1008696801865815383L)
                                .withVhdType("xpzruzythqkk")
                                .withVhdId("bg")
                                .withVhdName("ellv"),
                            new DiskDetails()
                                .withMaxSizeMB(5113895630128192471L)
                                .withVhdType("mnitmujd")
                                .withVhdId("mcl")
                                .withVhdName("mffhmjpddnyxfzuv")))
                .withHasPhysicalDisk(PresenceStatus.UNKNOWN)
                .withHasFibreChannelAdapter(PresenceStatus.NOT_PRESENT)
                .withHasSharedVhd(PresenceStatus.UNKNOWN)
                .withHyperVHostId("qrbrpvnmdyfoeboj");
        model = BinaryData.fromObject(model).toObject(HyperVVirtualMachineDetails.class);
        Assertions.assertEquals("rzwnyk", model.sourceItemId());
        Assertions.assertEquals("djchlr", model.generation());
        Assertions.assertEquals("ctofldseacdhztxk", model.osDetails().osType());
        Assertions.assertEquals("fg", model.osDetails().productType());
        Assertions.assertEquals("wjiyewhfjsrwq", model.osDetails().osEdition());
        Assertions.assertEquals("etfgcwvrrmdqntyc", model.osDetails().oSVersion());
        Assertions.assertEquals("wthv", model.osDetails().oSMajorVersion());
        Assertions.assertEquals("xgnuyeamcmhu", model.osDetails().oSMinorVersion());
        Assertions.assertEquals(6639083640115121332L, model.diskDetails().get(0).maxSizeMB());
        Assertions.assertEquals("okwcpqtwl", model.diskDetails().get(0).vhdType());
        Assertions.assertEquals("sqrggvrbnyruko", model.diskDetails().get(0).vhdId());
        Assertions.assertEquals("aciduwjleip", model.diskDetails().get(0).vhdName());
        Assertions.assertEquals(PresenceStatus.UNKNOWN, model.hasPhysicalDisk());
        Assertions.assertEquals(PresenceStatus.NOT_PRESENT, model.hasFibreChannelAdapter());
        Assertions.assertEquals(PresenceStatus.UNKNOWN, model.hasSharedVhd());
        Assertions.assertEquals("qrbrpvnmdyfoeboj", model.hyperVHostId());
    }
}
