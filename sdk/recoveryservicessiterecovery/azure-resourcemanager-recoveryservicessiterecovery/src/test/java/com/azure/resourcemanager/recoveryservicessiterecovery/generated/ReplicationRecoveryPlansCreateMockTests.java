// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.CreateRecoveryPlanInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverDeploymentModel;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlan;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationRecoveryPlansCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"friendlyName\":\"b\",\"primaryFabricId\":\"elued\",\"primaryFabricFriendlyName\":\"kryhh\",\"recoveryFabricId\":\"xzh\",\"recoveryFabricFriendlyName\":\"lxwknooxdjklfsdn\",\"failoverDeploymentModel\":\"qiymm\",\"replicationProviders\":[\"l\",\"nlgjdlhmkspybn\",\"nlpqd\"],\"allowedOperations\":[\"katupmrslwknrdv\"],\"lastPlannedFailoverTime\":\"2021-09-23T09:25:42Z\",\"lastUnplannedFailoverTime\":\"2021-07-06T07:33:46Z\",\"lastTestFailoverTime\":\"2021-09-27T04:40:37Z\",\"currentScenario\":{\"scenarioName\":\"ywxqr\",\"jobId\":\"xtkdeetnnefput\",\"startTime\":\"2021-05-31T11:52:54Z\"},\"currentScenarioStatus\":\"uxjmrzsxwasfwqj\",\"currentScenarioStatusDescription\":\"bmfqdn\",\"groups\":[],\"providerSpecificDetails\":[]},\"location\":\"uamrvamuvkgd\",\"id\":\"pjbblukgctv\",\"name\":\"spjvsyydjlhd\",\"type\":\"kcsqvyeegxhulo\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RecoveryPlan response =
            manager
                .replicationRecoveryPlans()
                .define("rchmetvzhuugd")
                .withExistingVault("nuvhgcgrllyyfsm", "cbx")
                .withProperties(
                    new CreateRecoveryPlanInputProperties()
                        .withPrimaryFabricId("kgdskwvb")
                        .withRecoveryFabricId("cawwayqtsrn")
                        .withFailoverDeploymentModel(FailoverDeploymentModel.NOT_APPLICABLE)
                        .withGroups(Arrays.asList())
                        .withProviderSpecificInput(Arrays.asList()))
                .create();

        Assertions.assertEquals("b", response.properties().friendlyName());
        Assertions.assertEquals("elued", response.properties().primaryFabricId());
        Assertions.assertEquals("kryhh", response.properties().primaryFabricFriendlyName());
        Assertions.assertEquals("xzh", response.properties().recoveryFabricId());
        Assertions.assertEquals("lxwknooxdjklfsdn", response.properties().recoveryFabricFriendlyName());
        Assertions.assertEquals("qiymm", response.properties().failoverDeploymentModel());
        Assertions.assertEquals("l", response.properties().replicationProviders().get(0));
        Assertions.assertEquals("katupmrslwknrdv", response.properties().allowedOperations().get(0));
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-23T09:25:42Z"), response.properties().lastPlannedFailoverTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-06T07:33:46Z"), response.properties().lastUnplannedFailoverTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-09-27T04:40:37Z"), response.properties().lastTestFailoverTime());
        Assertions.assertEquals("ywxqr", response.properties().currentScenario().scenarioName());
        Assertions.assertEquals("xtkdeetnnefput", response.properties().currentScenario().jobId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-31T11:52:54Z"), response.properties().currentScenario().startTime());
        Assertions.assertEquals("uxjmrzsxwasfwqj", response.properties().currentScenarioStatus());
        Assertions.assertEquals("bmfqdn", response.properties().currentScenarioStatusDescription());
        Assertions.assertEquals("uamrvamuvkgd", response.location());
    }
}
