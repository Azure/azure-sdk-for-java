// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.MigrationItem;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestMigrateInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestMigrateInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestMigrateProviderSpecificInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationMigrationItemsTestMigrateMockTests {
    @Test
    public void testTestMigrate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"machineName\":\"zjwaqdzqydewu\",\"policyId\":\"yllzzz\",\"policyFriendlyName\":\"tzqwcz\",\"recoveryServicesProviderId\":\"hwbekmuynf\",\"replicationStatus\":\"yvnhiysdhor\",\"migrationState\":\"DisableMigrationInProgress\",\"migrationStateDescription\":\"raqkiwlw\",\"lastTestMigrationTime\":\"2021-08-09T13:10:51Z\",\"lastTestMigrationStatus\":\"aqwmwqo\",\"lastMigrationTime\":\"2021-04-09T23:04:46Z\",\"lastMigrationStatus\":\"tea\",\"testMigrateState\":\"TestMigrationFailed\",\"testMigrateStateDescription\":\"ef\",\"health\":\"Warning\",\"healthErrors\":[],\"allowedOperations\":[\"TestMigrate\",\"TestMigrate\"],\"currentJob\":{\"jobName\":\"ibt\",\"jobId\":\"vxw\",\"startTime\":\"2021-10-16T01:53:43Z\"},\"criticalJobHistory\":[],\"eventCorrelationId\":\"jdbtqyhkxu\",\"providerSpecificDetails\":{\"instanceType\":\"MigrationProviderSpecificSettings\"}},\"location\":\"ujqgbbjvo\",\"id\":\"oawh\",\"name\":\"js\",\"type\":\"bc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MigrationItem response =
            manager
                .replicationMigrationItems()
                .testMigrate(
                    "kkvxu",
                    "dqzbvbpsuvqhx",
                    "ozf",
                    "dkwbkurklpiig",
                    "uzkeutuip",
                    new TestMigrateInput()
                        .withProperties(
                            new TestMigrateInputProperties()
                                .withProviderSpecificDetails(new TestMigrateProviderSpecificInput())),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ujqgbbjvo", response.location());
    }
}
