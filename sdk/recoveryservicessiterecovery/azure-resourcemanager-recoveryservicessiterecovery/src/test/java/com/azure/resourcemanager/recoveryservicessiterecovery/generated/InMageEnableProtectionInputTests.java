// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageDiskExclusionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageDiskSignatureExclusionOptions;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageEnableProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageVolumeExclusionOptions;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InMageEnableProtectionInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageEnableProtectionInput model = BinaryData.fromString(
            "{\"instanceType\":\"InMage\",\"vmFriendlyName\":\"osc\",\"masterTargetId\":\"lhwuusieckt\",\"processServerId\":\"bhjuxidhh\",\"retentionDrive\":\"om\",\"runAsAccountId\":\"ddx\",\"multiVmGroupId\":\"x\",\"multiVmGroupName\":\"ugxwjwilmqrslaat\",\"datastoreName\":\"twujjzgx\",\"diskExclusionInput\":{\"volumeOptions\":[{\"volumeLabel\":\"xr\",\"onlyExcludeIfSingleVolume\":\"tvhvtqqy\"},{\"volumeLabel\":\"kkt\",\"onlyExcludeIfSingleVolume\":\"zejogmkorvvmvm\"}],\"diskSignatureOptions\":[{\"diskSignature\":\"qhlbsnosnqliwkm\"}]},\"disksToInclude\":[\"fetya\"]}")
            .toObject(InMageEnableProtectionInput.class);
        Assertions.assertEquals("osc", model.vmFriendlyName());
        Assertions.assertEquals("lhwuusieckt", model.masterTargetId());
        Assertions.assertEquals("bhjuxidhh", model.processServerId());
        Assertions.assertEquals("om", model.retentionDrive());
        Assertions.assertEquals("ddx", model.runAsAccountId());
        Assertions.assertEquals("x", model.multiVmGroupId());
        Assertions.assertEquals("ugxwjwilmqrslaat", model.multiVmGroupName());
        Assertions.assertEquals("twujjzgx", model.datastoreName());
        Assertions.assertEquals("xr", model.diskExclusionInput().volumeOptions().get(0).volumeLabel());
        Assertions.assertEquals("tvhvtqqy",
            model.diskExclusionInput().volumeOptions().get(0).onlyExcludeIfSingleVolume());
        Assertions.assertEquals("qhlbsnosnqliwkm",
            model.diskExclusionInput().diskSignatureOptions().get(0).diskSignature());
        Assertions.assertEquals("fetya", model.disksToInclude().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageEnableProtectionInput model = new InMageEnableProtectionInput().withVmFriendlyName("osc")
            .withMasterTargetId("lhwuusieckt")
            .withProcessServerId("bhjuxidhh")
            .withRetentionDrive("om")
            .withRunAsAccountId("ddx")
            .withMultiVmGroupId("x")
            .withMultiVmGroupName("ugxwjwilmqrslaat")
            .withDatastoreName("twujjzgx")
            .withDiskExclusionInput(new InMageDiskExclusionInput()
                .withVolumeOptions(Arrays.asList(
                    new InMageVolumeExclusionOptions().withVolumeLabel("xr").withOnlyExcludeIfSingleVolume("tvhvtqqy"),
                    new InMageVolumeExclusionOptions().withVolumeLabel("kkt")
                        .withOnlyExcludeIfSingleVolume("zejogmkorvvmvm")))
                .withDiskSignatureOptions(
                    Arrays.asList(new InMageDiskSignatureExclusionOptions().withDiskSignature("qhlbsnosnqliwkm"))))
            .withDisksToInclude(Arrays.asList("fetya"));
        model = BinaryData.fromObject(model).toObject(InMageEnableProtectionInput.class);
        Assertions.assertEquals("osc", model.vmFriendlyName());
        Assertions.assertEquals("lhwuusieckt", model.masterTargetId());
        Assertions.assertEquals("bhjuxidhh", model.processServerId());
        Assertions.assertEquals("om", model.retentionDrive());
        Assertions.assertEquals("ddx", model.runAsAccountId());
        Assertions.assertEquals("x", model.multiVmGroupId());
        Assertions.assertEquals("ugxwjwilmqrslaat", model.multiVmGroupName());
        Assertions.assertEquals("twujjzgx", model.datastoreName());
        Assertions.assertEquals("xr", model.diskExclusionInput().volumeOptions().get(0).volumeLabel());
        Assertions.assertEquals("tvhvtqqy",
            model.diskExclusionInput().volumeOptions().get(0).onlyExcludeIfSingleVolume());
        Assertions.assertEquals("qhlbsnosnqliwkm",
            model.diskExclusionInput().diskSignatureOptions().get(0).diskSignature());
        Assertions.assertEquals("fetya", model.disksToInclude().get(0));
    }
}
