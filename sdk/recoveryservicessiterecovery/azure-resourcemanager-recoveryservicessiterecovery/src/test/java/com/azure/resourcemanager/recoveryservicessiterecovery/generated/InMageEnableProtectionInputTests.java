// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageDiskExclusionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageDiskSignatureExclusionOptions;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageEnableProtectionInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.InMageVolumeExclusionOptions;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InMageEnableProtectionInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InMageEnableProtectionInput model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"InMage\",\"vmFriendlyName\":\"otgkwsxnsrqorcg\",\"masterTargetId\":\"nmvceb\",\"processServerId\":\"eetqujxcxxq\",\"retentionDrive\":\"dcqjkedwqurc\",\"runAsAccountId\":\"jmrvvxwjongz\",\"multiVmGroupId\":\"ehqqrsilcchs\",\"multiVmGroupName\":\"xxkan\",\"datastoreName\":\"vri\",\"diskExclusionInput\":{\"volumeOptions\":[{\"volumeLabel\":\"ojrulfuctejrt\",\"onlyExcludeIfSingleVolume\":\"fjzhxl\"},{\"volumeLabel\":\"bqjr\",\"onlyExcludeIfSingleVolume\":\"tvrjeqmtz\"},{\"volumeLabel\":\"eqrztrxalxrdh\",\"onlyExcludeIfSingleVolume\":\"srwrsnrhpqati\"},{\"volumeLabel\":\"kvyanxkvvc\",\"onlyExcludeIfSingleVolume\":\"msvuvdjkqxetq\"}],\"diskSignatureOptions\":[{\"diskSignature\":\"vrjjxnw\"},{\"diskSignature\":\"chp\"},{\"diskSignature\":\"xlehzlxpgfquwzp\"}]},\"disksToInclude\":[\"belwcer\",\"kwbpjxljtxbusq\",\"bxxn\"]}")
                .toObject(InMageEnableProtectionInput.class);
        Assertions.assertEquals("otgkwsxnsrqorcg", model.vmFriendlyName());
        Assertions.assertEquals("nmvceb", model.masterTargetId());
        Assertions.assertEquals("eetqujxcxxq", model.processServerId());
        Assertions.assertEquals("dcqjkedwqurc", model.retentionDrive());
        Assertions.assertEquals("jmrvvxwjongz", model.runAsAccountId());
        Assertions.assertEquals("ehqqrsilcchs", model.multiVmGroupId());
        Assertions.assertEquals("xxkan", model.multiVmGroupName());
        Assertions.assertEquals("vri", model.datastoreName());
        Assertions.assertEquals("ojrulfuctejrt", model.diskExclusionInput().volumeOptions().get(0).volumeLabel());
        Assertions
            .assertEquals("fjzhxl", model.diskExclusionInput().volumeOptions().get(0).onlyExcludeIfSingleVolume());
        Assertions.assertEquals("vrjjxnw", model.diskExclusionInput().diskSignatureOptions().get(0).diskSignature());
        Assertions.assertEquals("belwcer", model.disksToInclude().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InMageEnableProtectionInput model =
            new InMageEnableProtectionInput()
                .withVmFriendlyName("otgkwsxnsrqorcg")
                .withMasterTargetId("nmvceb")
                .withProcessServerId("eetqujxcxxq")
                .withRetentionDrive("dcqjkedwqurc")
                .withRunAsAccountId("jmrvvxwjongz")
                .withMultiVmGroupId("ehqqrsilcchs")
                .withMultiVmGroupName("xxkan")
                .withDatastoreName("vri")
                .withDiskExclusionInput(
                    new InMageDiskExclusionInput()
                        .withVolumeOptions(
                            Arrays
                                .asList(
                                    new InMageVolumeExclusionOptions()
                                        .withVolumeLabel("ojrulfuctejrt")
                                        .withOnlyExcludeIfSingleVolume("fjzhxl"),
                                    new InMageVolumeExclusionOptions()
                                        .withVolumeLabel("bqjr")
                                        .withOnlyExcludeIfSingleVolume("tvrjeqmtz"),
                                    new InMageVolumeExclusionOptions()
                                        .withVolumeLabel("eqrztrxalxrdh")
                                        .withOnlyExcludeIfSingleVolume("srwrsnrhpqati"),
                                    new InMageVolumeExclusionOptions()
                                        .withVolumeLabel("kvyanxkvvc")
                                        .withOnlyExcludeIfSingleVolume("msvuvdjkqxetq")))
                        .withDiskSignatureOptions(
                            Arrays
                                .asList(
                                    new InMageDiskSignatureExclusionOptions().withDiskSignature("vrjjxnw"),
                                    new InMageDiskSignatureExclusionOptions().withDiskSignature("chp"),
                                    new InMageDiskSignatureExclusionOptions().withDiskSignature("xlehzlxpgfquwzp"))))
                .withDisksToInclude(Arrays.asList("belwcer", "kwbpjxljtxbusq", "bxxn"));
        model = BinaryData.fromObject(model).toObject(InMageEnableProtectionInput.class);
        Assertions.assertEquals("otgkwsxnsrqorcg", model.vmFriendlyName());
        Assertions.assertEquals("nmvceb", model.masterTargetId());
        Assertions.assertEquals("eetqujxcxxq", model.processServerId());
        Assertions.assertEquals("dcqjkedwqurc", model.retentionDrive());
        Assertions.assertEquals("jmrvvxwjongz", model.runAsAccountId());
        Assertions.assertEquals("ehqqrsilcchs", model.multiVmGroupId());
        Assertions.assertEquals("xxkan", model.multiVmGroupName());
        Assertions.assertEquals("vri", model.datastoreName());
        Assertions.assertEquals("ojrulfuctejrt", model.diskExclusionInput().volumeOptions().get(0).volumeLabel());
        Assertions
            .assertEquals("fjzhxl", model.diskExclusionInput().volumeOptions().get(0).onlyExcludeIfSingleVolume());
        Assertions.assertEquals("vrjjxnw", model.diskExclusionInput().diskSignatureOptions().get(0).diskSignature());
        Assertions.assertEquals("belwcer", model.disksToInclude().get(0));
    }
}
