// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverJobDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverReplicationProtectedItemDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FailoverJobDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FailoverJobDetails model = BinaryData.fromString(
            "{\"instanceType\":\"FailoverJobDetails\",\"protectedItemDetails\":[{\"name\":\"nmhkrezsd\",\"friendlyName\":\"xheq\",\"testVmName\":\"cruxspinym\",\"testVmFriendlyName\":\"gwokmikpazfbmjxu\",\"networkConnectionStatus\":\"ipfdvhaxdvwzaehp\",\"networkFriendlyName\":\"thd\",\"subnet\":\"mvetatlakfq\",\"recoveryPointId\":\"xwgiks\",\"recoveryPointTime\":\"2021-09-11T08:58:47Z\"},{\"name\":\"ooxr\",\"friendlyName\":\"gwphchgjtnht\",\"testVmName\":\"facihmbfntu\",\"testVmFriendlyName\":\"ezbxvqxbn\",\"networkConnectionStatus\":\"wcgasgom\",\"networkFriendlyName\":\"jzwxuqgovsxpwwz\",\"subnet\":\"fmkk\",\"recoveryPointId\":\"gfredmlscg\",\"recoveryPointTime\":\"2021-06-19T20:35:53Z\"}],\"affectedObjectDetails\":{\"vjowazhpabac\":\"na\",\"wsxnsrqor\":\"mlyotg\"}}")
            .toObject(FailoverJobDetails.class);
        Assertions.assertEquals("na", model.affectedObjectDetails().get("vjowazhpabac"));
        Assertions.assertEquals("nmhkrezsd", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("xheq", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("cruxspinym", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("gwokmikpazfbmjxu", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("ipfdvhaxdvwzaehp", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("thd", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("mvetatlakfq", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("xwgiks", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-11T08:58:47Z"),
            model.protectedItemDetails().get(0).recoveryPointTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FailoverJobDetails model
            = new FailoverJobDetails().withAffectedObjectDetails(mapOf("vjowazhpabac", "na", "wsxnsrqor", "mlyotg"))
                .withProtectedItemDetails(Arrays.asList(
                    new FailoverReplicationProtectedItemDetails().withName("nmhkrezsd")
                        .withFriendlyName("xheq")
                        .withTestVmName("cruxspinym")
                        .withTestVmFriendlyName("gwokmikpazfbmjxu")
                        .withNetworkConnectionStatus("ipfdvhaxdvwzaehp")
                        .withNetworkFriendlyName("thd")
                        .withSubnet("mvetatlakfq")
                        .withRecoveryPointId("xwgiks")
                        .withRecoveryPointTime(OffsetDateTime.parse("2021-09-11T08:58:47Z")),
                    new FailoverReplicationProtectedItemDetails().withName("ooxr")
                        .withFriendlyName("gwphchgjtnht")
                        .withTestVmName("facihmbfntu")
                        .withTestVmFriendlyName("ezbxvqxbn")
                        .withNetworkConnectionStatus("wcgasgom")
                        .withNetworkFriendlyName("jzwxuqgovsxpwwz")
                        .withSubnet("fmkk")
                        .withRecoveryPointId("gfredmlscg")
                        .withRecoveryPointTime(OffsetDateTime.parse("2021-06-19T20:35:53Z"))));
        model = BinaryData.fromObject(model).toObject(FailoverJobDetails.class);
        Assertions.assertEquals("na", model.affectedObjectDetails().get("vjowazhpabac"));
        Assertions.assertEquals("nmhkrezsd", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("xheq", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("cruxspinym", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("gwokmikpazfbmjxu", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("ipfdvhaxdvwzaehp", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("thd", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("mvetatlakfq", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("xwgiks", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-11T08:58:47Z"),
            model.protectedItemDetails().get(0).recoveryPointTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
