// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverJobDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverReplicationProtectedItemDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FailoverJobDetailsTests {
    @Test
    public void testDeserialize() {
        FailoverJobDetails model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"FailoverJobDetails\",\"protectedItemDetails\":[{\"name\":\"bczsulmdgglmepjp\",\"friendlyName\":\"eykgsangpszngaf\",\"testVmName\":\"ylkvecjuj\",\"testVmFriendlyName\":\"goadyedmzr\",\"networkConnectionStatus\":\"foknubnoitp\",\"networkFriendlyName\":\"ztrgdgxvcoq\",\"subnet\":\"sw\",\"recoveryPointId\":\"yxp\",\"recoveryPointTime\":\"2020-12-22T23:12:44Z\"},{\"name\":\"eialwvskb\",\"friendlyName\":\"z\",\"testVmName\":\"aq\",\"testVmFriendlyName\":\"ltcoqc\",\"networkConnectionStatus\":\"pdsxzakuejkm\",\"networkFriendlyName\":\"iztjof\",\"subnet\":\"vovjufycsjmlbe\",\"recoveryPointId\":\"ej\",\"recoveryPointTime\":\"2021-03-10T12:58:51Z\"},{\"name\":\"xeg\",\"friendlyName\":\"ortudawlpjfel\",\"testVmName\":\"rpptcbgqnzmnhiil\",\"testVmFriendlyName\":\"lwcjgckbbcccgzpr\",\"networkConnectionStatus\":\"xnyuffatsgftipwc\",\"networkFriendlyName\":\"yubhiqdx\",\"subnet\":\"rnpnuhzafccnuh\",\"recoveryPointId\":\"gbylbuig\",\"recoveryPointTime\":\"2021-11-05T02:21:15Z\"}],\"affectedObjectDetails\":{\"lbnb\":\"vcrk\",\"hzlwxaea\":\"xvhcs\",\"ndsbdw\":\"vurex\",\"t\":\"aderzmw\"}}")
                .toObject(FailoverJobDetails.class);
        Assertions.assertEquals("vcrk", model.affectedObjectDetails().get("lbnb"));
        Assertions.assertEquals("bczsulmdgglmepjp", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("eykgsangpszngaf", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("ylkvecjuj", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("goadyedmzr", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("foknubnoitp", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("ztrgdgxvcoq", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("sw", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("yxp", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2020-12-22T23:12:44Z"), model.protectedItemDetails().get(0).recoveryPointTime());
    }

    @Test
    public void testSerialize() {
        FailoverJobDetails model =
            new FailoverJobDetails()
                .withAffectedObjectDetails(
                    mapOf("lbnb", "vcrk", "hzlwxaea", "xvhcs", "ndsbdw", "vurex", "t", "aderzmw"))
                .withProtectedItemDetails(
                    Arrays
                        .asList(
                            new FailoverReplicationProtectedItemDetails()
                                .withName("bczsulmdgglmepjp")
                                .withFriendlyName("eykgsangpszngaf")
                                .withTestVmName("ylkvecjuj")
                                .withTestVmFriendlyName("goadyedmzr")
                                .withNetworkConnectionStatus("foknubnoitp")
                                .withNetworkFriendlyName("ztrgdgxvcoq")
                                .withSubnet("sw")
                                .withRecoveryPointId("yxp")
                                .withRecoveryPointTime(OffsetDateTime.parse("2020-12-22T23:12:44Z")),
                            new FailoverReplicationProtectedItemDetails()
                                .withName("eialwvskb")
                                .withFriendlyName("z")
                                .withTestVmName("aq")
                                .withTestVmFriendlyName("ltcoqc")
                                .withNetworkConnectionStatus("pdsxzakuejkm")
                                .withNetworkFriendlyName("iztjof")
                                .withSubnet("vovjufycsjmlbe")
                                .withRecoveryPointId("ej")
                                .withRecoveryPointTime(OffsetDateTime.parse("2021-03-10T12:58:51Z")),
                            new FailoverReplicationProtectedItemDetails()
                                .withName("xeg")
                                .withFriendlyName("ortudawlpjfel")
                                .withTestVmName("rpptcbgqnzmnhiil")
                                .withTestVmFriendlyName("lwcjgckbbcccgzpr")
                                .withNetworkConnectionStatus("xnyuffatsgftipwc")
                                .withNetworkFriendlyName("yubhiqdx")
                                .withSubnet("rnpnuhzafccnuh")
                                .withRecoveryPointId("gbylbuig")
                                .withRecoveryPointTime(OffsetDateTime.parse("2021-11-05T02:21:15Z"))));
        model = BinaryData.fromObject(model).toObject(FailoverJobDetails.class);
        Assertions.assertEquals("vcrk", model.affectedObjectDetails().get("lbnb"));
        Assertions.assertEquals("bczsulmdgglmepjp", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("eykgsangpszngaf", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("ylkvecjuj", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("goadyedmzr", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("foknubnoitp", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("ztrgdgxvcoq", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("sw", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("yxp", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2020-12-22T23:12:44Z"), model.protectedItemDetails().get(0).recoveryPointTime());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
