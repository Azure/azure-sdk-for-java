// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverReplicationProtectedItemDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestFailoverJobDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TestFailoverJobDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TestFailoverJobDetails model = BinaryData.fromString(
            "{\"instanceType\":\"TestFailoverJobDetails\",\"testFailoverStatus\":\"cant\",\"comments\":\"yxzxjmkanbclazof\",\"networkName\":\"xvtemaspm\",\"networkFriendlyName\":\"ydscdkxwd\",\"networkType\":\"jcbhaahnt\",\"protectedItemDetails\":[{\"name\":\"fh\",\"friendlyName\":\"ixo\",\"testVmName\":\"kzdfiv\",\"testVmFriendlyName\":\"jybsrwz\",\"networkConnectionStatus\":\"rgt\",\"networkFriendlyName\":\"hmfppinmgi\",\"subnet\":\"smkw\",\"recoveryPointId\":\"gfragjhxerxlobkd\",\"recoveryPointTime\":\"2021-10-17T16:42:23Z\"},{\"name\":\"vmmnii\",\"friendlyName\":\"ho\",\"testVmName\":\"jn\",\"testVmFriendlyName\":\"bggicnqwlctmw\",\"networkConnectionStatus\":\"lxkrk\",\"networkFriendlyName\":\"vxrktjcjigcwtsp\",\"subnet\":\"bqxasevchefpgee\",\"recoveryPointId\":\"ybruhola\",\"recoveryPointTime\":\"2021-05-29T12:11:44Z\"}],\"affectedObjectDetails\":{\"aowcahdkm\":\"immrimaabsqqlonb\",\"zglkvbgu\":\"jsmihrijezbfsjwf\",\"gnbknhj\":\"bsvbwyot\",\"ffaspsdzkucsz\":\"clxaxw\"}}")
            .toObject(TestFailoverJobDetails.class);
        Assertions.assertEquals("immrimaabsqqlonb", model.affectedObjectDetails().get("aowcahdkm"));
        Assertions.assertEquals("cant", model.testFailoverStatus());
        Assertions.assertEquals("yxzxjmkanbclazof", model.comments());
        Assertions.assertEquals("xvtemaspm", model.networkName());
        Assertions.assertEquals("ydscdkxwd", model.networkFriendlyName());
        Assertions.assertEquals("jcbhaahnt", model.networkType());
        Assertions.assertEquals("fh", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("ixo", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("kzdfiv", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("jybsrwz", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("rgt", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("hmfppinmgi", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("smkw", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("gfragjhxerxlobkd", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T16:42:23Z"),
            model.protectedItemDetails().get(0).recoveryPointTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TestFailoverJobDetails model = new TestFailoverJobDetails()
            .withAffectedObjectDetails(mapOf("aowcahdkm", "immrimaabsqqlonb", "zglkvbgu", "jsmihrijezbfsjwf", "gnbknhj",
                "bsvbwyot", "ffaspsdzkucsz", "clxaxw"))
            .withTestFailoverStatus("cant").withComments("yxzxjmkanbclazof").withNetworkName("xvtemaspm")
            .withNetworkFriendlyName("ydscdkxwd").withNetworkType("jcbhaahnt")
            .withProtectedItemDetails(Arrays.asList(
                new FailoverReplicationProtectedItemDetails().withName("fh").withFriendlyName("ixo")
                    .withTestVmName("kzdfiv").withTestVmFriendlyName("jybsrwz").withNetworkConnectionStatus("rgt")
                    .withNetworkFriendlyName("hmfppinmgi").withSubnet("smkw").withRecoveryPointId("gfragjhxerxlobkd")
                    .withRecoveryPointTime(OffsetDateTime.parse("2021-10-17T16:42:23Z")),
                new FailoverReplicationProtectedItemDetails().withName("vmmnii").withFriendlyName("ho")
                    .withTestVmName("jn").withTestVmFriendlyName("bggicnqwlctmw").withNetworkConnectionStatus("lxkrk")
                    .withNetworkFriendlyName("vxrktjcjigcwtsp").withSubnet("bqxasevchefpgee")
                    .withRecoveryPointId("ybruhola")
                    .withRecoveryPointTime(OffsetDateTime.parse("2021-05-29T12:11:44Z"))));
        model = BinaryData.fromObject(model).toObject(TestFailoverJobDetails.class);
        Assertions.assertEquals("immrimaabsqqlonb", model.affectedObjectDetails().get("aowcahdkm"));
        Assertions.assertEquals("cant", model.testFailoverStatus());
        Assertions.assertEquals("yxzxjmkanbclazof", model.comments());
        Assertions.assertEquals("xvtemaspm", model.networkName());
        Assertions.assertEquals("ydscdkxwd", model.networkFriendlyName());
        Assertions.assertEquals("jcbhaahnt", model.networkType());
        Assertions.assertEquals("fh", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("ixo", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("kzdfiv", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("jybsrwz", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("rgt", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("hmfppinmgi", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("smkw", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("gfragjhxerxlobkd", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T16:42:23Z"),
            model.protectedItemDetails().get(0).recoveryPointTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
