// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverReplicationProtectedItemDetails;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.TestFailoverJobDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TestFailoverJobDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TestFailoverJobDetails model = BinaryData.fromString(
            "{\"instanceType\":\"TestFailoverJobDetails\",\"testFailoverStatus\":\"wahcrxofgrutv\",\"comments\":\"ccxz\",\"networkName\":\"xpmhzghhhk\",\"networkFriendlyName\":\"njdtujqzvhnj\",\"networkType\":\"mxnhtm\",\"protectedItemDetails\":[{\"name\":\"lfxolr\",\"friendlyName\":\"tlgxyfjswequflz\",\"testVmName\":\"op\",\"testVmFriendlyName\":\"yt\",\"networkConnectionStatus\":\"gwqub\",\"networkFriendlyName\":\"bvufrkwjiemimdtn\",\"subnet\":\"wew\",\"recoveryPointId\":\"kreeeddd\",\"recoveryPointTime\":\"2021-07-27T15:57:21Z\"},{\"name\":\"quulpclhsiigeeu\",\"friendlyName\":\"rn\",\"testVmName\":\"xfedqnetdqw\",\"testVmFriendlyName\":\"xoqgvbzpggpw\",\"networkConnectionStatus\":\"y\",\"networkFriendlyName\":\"qajejirvavrvkgp\",\"subnet\":\"plbjuvlnhxnr\",\"recoveryPointId\":\"hinaegesbxnepq\",\"recoveryPointTime\":\"2021-08-07T08:40:53Z\"},{\"name\":\"pl\",\"friendlyName\":\"fykkfhsovadkrm\",\"testVmName\":\"mwqpdkesjqbzkqm\",\"testVmFriendlyName\":\"poriwbwggijtspzj\",\"networkConnectionStatus\":\"rhikwsbzrhdug\",\"networkFriendlyName\":\"htrgz\",\"subnet\":\"unjf\",\"recoveryPointId\":\"jhiycbauseqnczk\",\"recoveryPointTime\":\"2021-01-05T04:38:56Z\"}],\"affectedObjectDetails\":{\"jsqwzszoszjgz\":\"uw\",\"czavoj\":\"nkfnyskwwunq\",\"ukvbljpxpr\":\"slhip\",\"f\":\"vchyluqalpcufj\"}}")
            .toObject(TestFailoverJobDetails.class);
        Assertions.assertEquals("uw", model.affectedObjectDetails().get("jsqwzszoszjgz"));
        Assertions.assertEquals("wahcrxofgrutv", model.testFailoverStatus());
        Assertions.assertEquals("ccxz", model.comments());
        Assertions.assertEquals("xpmhzghhhk", model.networkName());
        Assertions.assertEquals("njdtujqzvhnj", model.networkFriendlyName());
        Assertions.assertEquals("mxnhtm", model.networkType());
        Assertions.assertEquals("lfxolr", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("tlgxyfjswequflz", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("op", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("yt", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("gwqub", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("bvufrkwjiemimdtn", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("wew", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("kreeeddd", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T15:57:21Z"),
            model.protectedItemDetails().get(0).recoveryPointTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TestFailoverJobDetails model = new TestFailoverJobDetails()
            .withAffectedObjectDetails(
                mapOf("jsqwzszoszjgz", "uw", "czavoj", "nkfnyskwwunq", "ukvbljpxpr", "slhip", "f", "vchyluqalpcufj"))
            .withTestFailoverStatus("wahcrxofgrutv")
            .withComments("ccxz")
            .withNetworkName("xpmhzghhhk")
            .withNetworkFriendlyName("njdtujqzvhnj")
            .withNetworkType("mxnhtm")
            .withProtectedItemDetails(Arrays.asList(
                new FailoverReplicationProtectedItemDetails().withName("lfxolr")
                    .withFriendlyName("tlgxyfjswequflz")
                    .withTestVmName("op")
                    .withTestVmFriendlyName("yt")
                    .withNetworkConnectionStatus("gwqub")
                    .withNetworkFriendlyName("bvufrkwjiemimdtn")
                    .withSubnet("wew")
                    .withRecoveryPointId("kreeeddd")
                    .withRecoveryPointTime(OffsetDateTime.parse("2021-07-27T15:57:21Z")),
                new FailoverReplicationProtectedItemDetails().withName("quulpclhsiigeeu")
                    .withFriendlyName("rn")
                    .withTestVmName("xfedqnetdqw")
                    .withTestVmFriendlyName("xoqgvbzpggpw")
                    .withNetworkConnectionStatus("y")
                    .withNetworkFriendlyName("qajejirvavrvkgp")
                    .withSubnet("plbjuvlnhxnr")
                    .withRecoveryPointId("hinaegesbxnepq")
                    .withRecoveryPointTime(OffsetDateTime.parse("2021-08-07T08:40:53Z")),
                new FailoverReplicationProtectedItemDetails().withName("pl")
                    .withFriendlyName("fykkfhsovadkrm")
                    .withTestVmName("mwqpdkesjqbzkqm")
                    .withTestVmFriendlyName("poriwbwggijtspzj")
                    .withNetworkConnectionStatus("rhikwsbzrhdug")
                    .withNetworkFriendlyName("htrgz")
                    .withSubnet("unjf")
                    .withRecoveryPointId("jhiycbauseqnczk")
                    .withRecoveryPointTime(OffsetDateTime.parse("2021-01-05T04:38:56Z"))));
        model = BinaryData.fromObject(model).toObject(TestFailoverJobDetails.class);
        Assertions.assertEquals("uw", model.affectedObjectDetails().get("jsqwzszoszjgz"));
        Assertions.assertEquals("wahcrxofgrutv", model.testFailoverStatus());
        Assertions.assertEquals("ccxz", model.comments());
        Assertions.assertEquals("xpmhzghhhk", model.networkName());
        Assertions.assertEquals("njdtujqzvhnj", model.networkFriendlyName());
        Assertions.assertEquals("mxnhtm", model.networkType());
        Assertions.assertEquals("lfxolr", model.protectedItemDetails().get(0).name());
        Assertions.assertEquals("tlgxyfjswequflz", model.protectedItemDetails().get(0).friendlyName());
        Assertions.assertEquals("op", model.protectedItemDetails().get(0).testVmName());
        Assertions.assertEquals("yt", model.protectedItemDetails().get(0).testVmFriendlyName());
        Assertions.assertEquals("gwqub", model.protectedItemDetails().get(0).networkConnectionStatus());
        Assertions.assertEquals("bvufrkwjiemimdtn", model.protectedItemDetails().get(0).networkFriendlyName());
        Assertions.assertEquals("wew", model.protectedItemDetails().get(0).subnet());
        Assertions.assertEquals("kreeeddd", model.protectedItemDetails().get(0).recoveryPointId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T15:57:21Z"),
            model.protectedItemDetails().get(0).recoveryPointTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
