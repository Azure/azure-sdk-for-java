// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.CreateProtectionContainerMappingInputProperties;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ProtectionContainerMapping;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProviderSpecificContainerMappingInput;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReplicationProtectionContainerMappingsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"targetProtectionContainerId\":\"ycymzrlcfgdwzauz\",\"targetProtectionContainerFriendlyName\":\"h\",\"providerSpecificDetails\":{\"instanceType\":\"ProtectionContainerMappingProviderSpecificDetails\"},\"health\":\"nyci\",\"healthErrorDetails\":[],\"policyId\":\"lykqadfge\",\"state\":\"zohabbrizm\",\"sourceProtectionContainerFriendlyName\":\"jrsbg\",\"sourceFabricFriendlyName\":\"ljqovqmxqsxo\",\"targetFabricFriendlyName\":\"qnkiu\",\"policyFriendlyName\":\"gltsxooiob\"},\"location\":\"ebruptlsrvqz\",\"id\":\"aqsos\",\"name\":\"njlvgrghnh\",\"type\":\"oxrqhjninpeswv\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SiteRecoveryManager manager =
            SiteRecoveryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ProtectionContainerMapping response =
            manager
                .replicationProtectionContainerMappings()
                .define("dowuwhdlri")
                .withExistingReplicationProtectionContainer("gkuobpwain", "gobot", "xiewhpnyjtuq", "zyvextchslro")
                .withProperties(
                    new CreateProtectionContainerMappingInputProperties()
                        .withTargetProtectionContainerId("zttcbiich")
                        .withPolicyId("udsozodwjcfqoy")
                        .withProviderSpecificInput(new ReplicationProviderSpecificContainerMappingInput()))
                .create();

        Assertions.assertEquals("ycymzrlcfgdwzauz", response.properties().targetProtectionContainerId());
        Assertions.assertEquals("h", response.properties().targetProtectionContainerFriendlyName());
        Assertions.assertEquals("nyci", response.properties().health());
        Assertions.assertEquals("lykqadfge", response.properties().policyId());
        Assertions.assertEquals("zohabbrizm", response.properties().state());
        Assertions.assertEquals("jrsbg", response.properties().sourceProtectionContainerFriendlyName());
        Assertions.assertEquals("ljqovqmxqsxo", response.properties().sourceFabricFriendlyName());
        Assertions.assertEquals("qnkiu", response.properties().targetFabricFriendlyName());
        Assertions.assertEquals("gltsxooiob", response.properties().policyFriendlyName());
        Assertions.assertEquals("ebruptlsrvqz", response.location());
    }
}
