// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.generated;

import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public final class CreateAnomalyDetectionConfigurationTests extends MetricsAdvisorClientTestBase {
    @Test
    @Disabled
    public void testCreateAnomalyDetectionConfigurationTests() {
        BinaryData body =
                BinaryData.fromString(
                        "{\"name\":\"Anomaly detection configuration name\",\"description\":\"Anomaly detection configuration description\",\"dimensionGroupOverrideConfigurations\":[{\"changeThresholdCondition\":{\"anomalyDetectorDirection\":\"Both\",\"changePercentage\":5,\"shiftPoint\":1,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100},\"withinRange\":false},\"conditionOperator\":\"AND\",\"group\":{\"dimension\":{\"city\":\"Beijing\"}},\"hardThresholdCondition\":{\"anomalyDetectorDirection\":\"Both\",\"lowerBound\":1,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100},\"upperBound\":100},\"smartDetectionCondition\":{\"anomalyDetectorDirection\":\"Both\",\"sensitivity\":91,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100}}}],\"metricId\":\"22222222-2222-2222-2222-000000000001\",\"seriesOverrideConfigurations\":[{\"changeThresholdCondition\":{\"anomalyDetectorDirection\":\"Both\",\"changePercentage\":5,\"shiftPoint\":1,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100},\"withinRange\":false},\"conditionOperator\":\"AND\",\"hardThresholdCondition\":{\"anomalyDetectorDirection\":\"Both\",\"lowerBound\":1,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100},\"upperBound\":100},\"series\":{\"dimension\":{\"category\":\"Jewelry\",\"city\":\"Beijing\"}},\"smartDetectionCondition\":{\"anomalyDetectorDirection\":\"Both\",\"sensitivity\":91,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100}}}],\"wholeMetricConfiguration\":{\"changeThresholdCondition\":{\"anomalyDetectorDirection\":\"Both\",\"changePercentage\":5,\"shiftPoint\":1,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100},\"withinRange\":false},\"conditionOperator\":\"AND\",\"hardThresholdCondition\":{\"anomalyDetectorDirection\":\"Both\",\"lowerBound\":1,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100},\"upperBound\":100},\"smartDetectionCondition\":{\"anomalyDetectorDirection\":\"Both\",\"sensitivity\":91,\"suppressCondition\":{\"minNumber\":1,\"minRatio\":100}}}}");
        RequestOptions requestOptions = new RequestOptions();
        Response<Void> response =
                metricsAdvisorClient.createAnomalyDetectionConfigurationWithResponse(body, requestOptions);
        Assertions.assertEquals(201, response.getStatusCode());
        Assertions.assertEquals("", response.getHeaders().get("Location").getValue());
    }
}
