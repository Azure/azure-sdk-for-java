// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

/**
 * The WebhookHookInfo model.
 */
@Fluent
public final class WebhookHookInfo extends HookInfo {
    /*
     * The hookParameter property.
     */
    private WebhookHookParameter hookParameter;

    /**
     * Creates an instance of WebhookHookInfo class.
     */
    public WebhookHookInfo() {
    }

    /**
     * Get the hookParameter property: The hookParameter property.
     * 
     * @return the hookParameter value.
     */
    public WebhookHookParameter getHookParameter() {
        return this.hookParameter;
    }

    /**
     * Set the hookParameter property: The hookParameter property.
     * 
     * @param hookParameter the hookParameter value to set.
     * @return the WebhookHookInfo object itself.
     */
    public WebhookHookInfo setHookParameter(WebhookHookParameter hookParameter) {
        this.hookParameter = hookParameter;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookHookInfo setHookName(String hookName) {
        super.setHookName(hookName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookHookInfo setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookHookInfo setExternalLink(String externalLink) {
        super.setExternalLink(externalLink);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookHookInfo setAdmins(List<String> admins) {
        super.setAdmins(admins);
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hookType", HookType.WEBHOOK == null ? null : HookType.WEBHOOK.toString());
        jsonWriter.writeStringField("hookName", getHookName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("externalLink", getExternalLink());
        jsonWriter.writeArrayField("admins", getAdmins(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("hookParameter", this.hookParameter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebhookHookInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebhookHookInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     * polymorphic discriminator.
     * @throws IOException If an error occurs while reading the WebhookHookInfo.
     */
    public static WebhookHookInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebhookHookInfo deserializedWebhookHookInfo = new WebhookHookInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hookType".equals(fieldName)) {
                    String hookType = reader.getString();
                    if (!"Webhook".equals(hookType)) {
                        throw new IllegalStateException(
                            "'hookType' was expected to be non-null and equal to 'Webhook'. The found 'hookType' was '"
                                + hookType + "'.");
                    }
                } else if ("hookName".equals(fieldName)) {
                    deserializedWebhookHookInfo.setHookName(reader.getString());
                } else if ("hookId".equals(fieldName)) {
                    deserializedWebhookHookInfo
                        .setHookId(reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString())));
                } else if ("description".equals(fieldName)) {
                    deserializedWebhookHookInfo.setDescription(reader.getString());
                } else if ("externalLink".equals(fieldName)) {
                    deserializedWebhookHookInfo.setExternalLink(reader.getString());
                } else if ("admins".equals(fieldName)) {
                    List<String> admins = reader.readArray(reader1 -> reader1.getString());
                    deserializedWebhookHookInfo.setAdmins(admins);
                } else if ("hookParameter".equals(fieldName)) {
                    deserializedWebhookHookInfo.hookParameter = WebhookHookParameter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebhookHookInfo;
        });
    }
}
