// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.ai.metricsadvisor.models.FeedbackType;
import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import java.util.UUID;

/**
 * The CommentFeedback model.
 */
@Fluent
public final class CommentFeedback extends MetricFeedback {
    /*
     * feedback type
     */
    private FeedbackType feedbackType = FeedbackType.COMMENT;

    /*
     * the start timestamp of feedback time range
     */
    private OffsetDateTime startTime;

    /*
     * the end timestamp of feedback time range, when equals to startTime means only one timestamp
     */
    private OffsetDateTime endTime;

    /*
     * The value property.
     */
    private CommentFeedbackValue value;

    /*
     * user who gives this feedback
     */
    private String userPrincipal;

    /*
     * feedback created time
     */
    private OffsetDateTime createdTime;

    /*
     * feedback unique id
     */
    private UUID feedbackId;

    /**
     * Creates an instance of CommentFeedback class.
     */
    public CommentFeedback() {
    }

    /**
     * Get the feedbackType property: feedback type.
     * 
     * @return the feedbackType value.
     */
    @Override
    public FeedbackType getFeedbackType() {
        return this.feedbackType;
    }

    /**
     * Get the startTime property: the start timestamp of feedback time range.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: the start timestamp of feedback time range.
     * 
     * @param startTime the startTime value to set.
     * @return the CommentFeedback object itself.
     */
    public CommentFeedback setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: the end timestamp of feedback time range, when equals to startTime means only one
     * timestamp.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: the end timestamp of feedback time range, when equals to startTime means only one
     * timestamp.
     * 
     * @param endTime the endTime value to set.
     * @return the CommentFeedback object itself.
     */
    public CommentFeedback setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the value property: The value property.
     * 
     * @return the value value.
     */
    public CommentFeedbackValue getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value property.
     * 
     * @param value the value value to set.
     * @return the CommentFeedback object itself.
     */
    public CommentFeedback setValue(CommentFeedbackValue value) {
        this.value = value;
        return this;
    }

    /**
     * Get the userPrincipal property: user who gives this feedback.
     * 
     * @return the userPrincipal value.
     */
    @Override
    public String getUserPrincipal() {
        return this.userPrincipal;
    }

    /**
     * Get the createdTime property: feedback created time.
     * 
     * @return the createdTime value.
     */
    @Override
    public OffsetDateTime getCreatedTime() {
        return this.createdTime;
    }

    /**
     * Get the feedbackId property: feedback unique id.
     * 
     * @return the feedbackId value.
     */
    @Override
    public UUID getFeedbackId() {
        return this.feedbackId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentFeedback setMetricId(UUID metricId) {
        super.setMetricId(metricId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentFeedback setDimensionFilter(FeedbackDimensionFilter dimensionFilter) {
        super.setDimensionFilter(dimensionFilter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metricId", Objects.toString(getMetricId(), null));
        jsonWriter.writeJsonField("dimensionFilter", getDimensionFilter());
        jsonWriter.writeJsonField("value", this.value);
        jsonWriter.writeStringField("feedbackType", this.feedbackType == null ? null : this.feedbackType.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommentFeedback from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommentFeedback if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommentFeedback.
     */
    public static CommentFeedback fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommentFeedback deserializedCommentFeedback = new CommentFeedback();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metricId".equals(fieldName)) {
                    deserializedCommentFeedback
                        .setMetricId(reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString())));
                } else if ("dimensionFilter".equals(fieldName)) {
                    deserializedCommentFeedback.setDimensionFilter(FeedbackDimensionFilter.fromJson(reader));
                } else if ("feedbackId".equals(fieldName)) {
                    deserializedCommentFeedback.feedbackId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("createdTime".equals(fieldName)) {
                    deserializedCommentFeedback.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("userPrincipal".equals(fieldName)) {
                    deserializedCommentFeedback.userPrincipal = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedCommentFeedback.value = CommentFeedbackValue.fromJson(reader);
                } else if ("feedbackType".equals(fieldName)) {
                    deserializedCommentFeedback.feedbackType = FeedbackType.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedCommentFeedback.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedCommentFeedback.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommentFeedback;
        });
    }
}
