// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.ai.metricsadvisor.models.FeedbackQueryTimeMode;
import com.azure.ai.metricsadvisor.models.FeedbackType;
import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import java.util.UUID;

/**
 * The MetricFeedbackFilter model.
 */
@Fluent
public final class MetricFeedbackFilter implements JsonSerializable<MetricFeedbackFilter> {
    /*
     * filter feedbacks by metric id
     */
    private UUID metricId;

    /*
     * The dimensionFilter property.
     */
    private FeedbackDimensionFilter dimensionFilter;

    /*
     * filter feedbacks by type
     */
    private FeedbackType feedbackType;

    /*
     * start time filter under chosen time mode
     */
    private OffsetDateTime startTime;

    /*
     * end time filter under chosen time mode
     */
    private OffsetDateTime endTime;

    /*
     * time mode to filter feedback
     */
    private FeedbackQueryTimeMode timeMode;

    /**
     * Creates an instance of MetricFeedbackFilter class.
     */
    public MetricFeedbackFilter() {
    }

    /**
     * Get the metricId property: filter feedbacks by metric id.
     * 
     * @return the metricId value.
     */
    public UUID getMetricId() {
        return this.metricId;
    }

    /**
     * Set the metricId property: filter feedbacks by metric id.
     * 
     * @param metricId the metricId value to set.
     * @return the MetricFeedbackFilter object itself.
     */
    public MetricFeedbackFilter setMetricId(UUID metricId) {
        this.metricId = metricId;
        return this;
    }

    /**
     * Get the dimensionFilter property: The dimensionFilter property.
     * 
     * @return the dimensionFilter value.
     */
    public FeedbackDimensionFilter getDimensionFilter() {
        return this.dimensionFilter;
    }

    /**
     * Set the dimensionFilter property: The dimensionFilter property.
     * 
     * @param dimensionFilter the dimensionFilter value to set.
     * @return the MetricFeedbackFilter object itself.
     */
    public MetricFeedbackFilter setDimensionFilter(FeedbackDimensionFilter dimensionFilter) {
        this.dimensionFilter = dimensionFilter;
        return this;
    }

    /**
     * Get the feedbackType property: filter feedbacks by type.
     * 
     * @return the feedbackType value.
     */
    public FeedbackType getFeedbackType() {
        return this.feedbackType;
    }

    /**
     * Set the feedbackType property: filter feedbacks by type.
     * 
     * @param feedbackType the feedbackType value to set.
     * @return the MetricFeedbackFilter object itself.
     */
    public MetricFeedbackFilter setFeedbackType(FeedbackType feedbackType) {
        this.feedbackType = feedbackType;
        return this;
    }

    /**
     * Get the startTime property: start time filter under chosen time mode.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: start time filter under chosen time mode.
     * 
     * @param startTime the startTime value to set.
     * @return the MetricFeedbackFilter object itself.
     */
    public MetricFeedbackFilter setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: end time filter under chosen time mode.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: end time filter under chosen time mode.
     * 
     * @param endTime the endTime value to set.
     * @return the MetricFeedbackFilter object itself.
     */
    public MetricFeedbackFilter setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the timeMode property: time mode to filter feedback.
     * 
     * @return the timeMode value.
     */
    public FeedbackQueryTimeMode getTimeMode() {
        return this.timeMode;
    }

    /**
     * Set the timeMode property: time mode to filter feedback.
     * 
     * @param timeMode the timeMode value to set.
     * @return the MetricFeedbackFilter object itself.
     */
    public MetricFeedbackFilter setTimeMode(FeedbackQueryTimeMode timeMode) {
        this.timeMode = timeMode;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metricId", Objects.toString(this.metricId, null));
        jsonWriter.writeJsonField("dimensionFilter", this.dimensionFilter);
        jsonWriter.writeStringField("feedbackType", this.feedbackType == null ? null : this.feedbackType.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("timeMode", this.timeMode == null ? null : this.timeMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricFeedbackFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricFeedbackFilter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricFeedbackFilter.
     */
    public static MetricFeedbackFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricFeedbackFilter deserializedMetricFeedbackFilter = new MetricFeedbackFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metricId".equals(fieldName)) {
                    deserializedMetricFeedbackFilter.metricId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("dimensionFilter".equals(fieldName)) {
                    deserializedMetricFeedbackFilter.dimensionFilter = FeedbackDimensionFilter.fromJson(reader);
                } else if ("feedbackType".equals(fieldName)) {
                    deserializedMetricFeedbackFilter.feedbackType = FeedbackType.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedMetricFeedbackFilter.startTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedMetricFeedbackFilter.endTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("timeMode".equals(fieldName)) {
                    deserializedMetricFeedbackFilter.timeMode = FeedbackQueryTimeMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricFeedbackFilter;
        });
    }
}
