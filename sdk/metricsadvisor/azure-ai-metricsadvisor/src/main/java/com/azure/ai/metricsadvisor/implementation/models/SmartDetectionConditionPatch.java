// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SmartDetectionConditionPatch model.
 */
@Fluent
public final class SmartDetectionConditionPatch implements JsonSerializable<SmartDetectionConditionPatch> {
    /*
     * sensitivity, value range : (0, 100]
     */
    private Double sensitivity;

    /*
     * detection direction
     */
    private AnomalyDetectorDirection anomalyDetectorDirection;

    /*
     * The suppressCondition property.
     */
    private SuppressConditionPatch suppressCondition;

    /**
     * Creates an instance of SmartDetectionConditionPatch class.
     */
    public SmartDetectionConditionPatch() {
    }

    /**
     * Get the sensitivity property: sensitivity, value range : (0, 100].
     * 
     * @return the sensitivity value.
     */
    public Double getSensitivity() {
        return this.sensitivity;
    }

    /**
     * Set the sensitivity property: sensitivity, value range : (0, 100].
     * 
     * @param sensitivity the sensitivity value to set.
     * @return the SmartDetectionConditionPatch object itself.
     */
    public SmartDetectionConditionPatch setSensitivity(Double sensitivity) {
        this.sensitivity = sensitivity;
        return this;
    }

    /**
     * Get the anomalyDetectorDirection property: detection direction.
     * 
     * @return the anomalyDetectorDirection value.
     */
    public AnomalyDetectorDirection getAnomalyDetectorDirection() {
        return this.anomalyDetectorDirection;
    }

    /**
     * Set the anomalyDetectorDirection property: detection direction.
     * 
     * @param anomalyDetectorDirection the anomalyDetectorDirection value to set.
     * @return the SmartDetectionConditionPatch object itself.
     */
    public SmartDetectionConditionPatch setAnomalyDetectorDirection(AnomalyDetectorDirection anomalyDetectorDirection) {
        this.anomalyDetectorDirection = anomalyDetectorDirection;
        return this;
    }

    /**
     * Get the suppressCondition property: The suppressCondition property.
     * 
     * @return the suppressCondition value.
     */
    public SuppressConditionPatch getSuppressCondition() {
        return this.suppressCondition;
    }

    /**
     * Set the suppressCondition property: The suppressCondition property.
     * 
     * @param suppressCondition the suppressCondition value to set.
     * @return the SmartDetectionConditionPatch object itself.
     */
    public SmartDetectionConditionPatch setSuppressCondition(SuppressConditionPatch suppressCondition) {
        this.suppressCondition = suppressCondition;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("sensitivity", this.sensitivity);
        jsonWriter.writeStringField("anomalyDetectorDirection",
            this.anomalyDetectorDirection == null ? null : this.anomalyDetectorDirection.toString());
        jsonWriter.writeJsonField("suppressCondition", this.suppressCondition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SmartDetectionConditionPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SmartDetectionConditionPatch if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SmartDetectionConditionPatch.
     */
    public static SmartDetectionConditionPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SmartDetectionConditionPatch deserializedSmartDetectionConditionPatch = new SmartDetectionConditionPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sensitivity".equals(fieldName)) {
                    deserializedSmartDetectionConditionPatch.sensitivity = reader.getNullable(JsonReader::getDouble);
                } else if ("anomalyDetectorDirection".equals(fieldName)) {
                    deserializedSmartDetectionConditionPatch.anomalyDetectorDirection
                        = AnomalyDetectorDirection.fromString(reader.getString());
                } else if ("suppressCondition".equals(fieldName)) {
                    deserializedSmartDetectionConditionPatch.suppressCondition
                        = SuppressConditionPatch.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSmartDetectionConditionPatch;
        });
    }
}
