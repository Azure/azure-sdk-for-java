// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.ai.metricsadvisor.models.FeedbackType;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * The PeriodFeedback model.
 */
@Fluent
public final class PeriodFeedback extends MetricFeedback {
    /*
     * feedback type
     */
    @Generated
    private FeedbackType feedbackType = FeedbackType.PERIOD;

    /*
     * The value property.
     */
    @Generated
    private PeriodFeedbackValue value;

    /**
     * Creates an instance of PeriodFeedback class.
     */
    @Generated
    public PeriodFeedback() {
    }

    /**
     * Get the feedbackType property: feedback type.
     * 
     * @return the feedbackType value.
     */
    @Generated
    @Override
    public FeedbackType getFeedbackType() {
        return this.feedbackType;
    }

    /**
     * Get the value property: The value property.
     * 
     * @return the value value.
     */
    @Generated
    public PeriodFeedbackValue getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value property.
     * 
     * @param value the value value to set.
     * @return the PeriodFeedback object itself.
     */
    @Generated
    public PeriodFeedback setValue(PeriodFeedbackValue value) {
        this.value = value;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PeriodFeedback setMetricId(UUID metricId) {
        super.setMetricId(metricId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PeriodFeedback setDimensionFilter(FeedbackDimensionFilter dimensionFilter) {
        super.setDimensionFilter(dimensionFilter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metricId", Objects.toString(getMetricId(), null));
        jsonWriter.writeJsonField("dimensionFilter", getDimensionFilter());
        jsonWriter.writeJsonField("value", this.value);
        jsonWriter.writeStringField("feedbackType", this.feedbackType == null ? null : this.feedbackType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeriodFeedback from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeriodFeedback if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PeriodFeedback.
     */
    @Generated
    public static PeriodFeedback fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeriodFeedback deserializedPeriodFeedback = new PeriodFeedback();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metricId".equals(fieldName)) {
                    deserializedPeriodFeedback
                        .setMetricId(reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString())));
                } else if ("dimensionFilter".equals(fieldName)) {
                    deserializedPeriodFeedback.setDimensionFilter(FeedbackDimensionFilter.fromJson(reader));
                } else if ("feedbackId".equals(fieldName)) {
                    deserializedPeriodFeedback
                        .setFeedbackId(reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString())));
                } else if ("createdTime".equals(fieldName)) {
                    deserializedPeriodFeedback.setCreatedTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("userPrincipal".equals(fieldName)) {
                    deserializedPeriodFeedback.setUserPrincipal(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedPeriodFeedback.value = PeriodFeedbackValue.fromJson(reader);
                } else if ("feedbackType".equals(fieldName)) {
                    deserializedPeriodFeedback.feedbackType = FeedbackType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeriodFeedback;
        });
    }
}
