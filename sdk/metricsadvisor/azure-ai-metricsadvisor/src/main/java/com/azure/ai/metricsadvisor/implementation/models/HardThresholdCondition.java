// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The HardThresholdCondition model.
 */
@Fluent
public final class HardThresholdCondition implements JsonSerializable<HardThresholdCondition> {
    /*
     * lower bound
     * 
     * should be specified when anomalyDetectorDirection is Both or Down
     */
    private Double lowerBound;

    /*
     * upper bound
     * 
     * should be specified when anomalyDetectorDirection is Both or Up
     */
    private Double upperBound;

    /*
     * detection direction
     */
    private AnomalyDetectorDirection anomalyDetectorDirection;

    /*
     * The suppressCondition property.
     */
    private SuppressCondition suppressCondition;

    /**
     * Creates an instance of HardThresholdCondition class.
     */
    public HardThresholdCondition() {
    }

    /**
     * Get the lowerBound property: lower bound
     * 
     * should be specified when anomalyDetectorDirection is Both or Down.
     * 
     * @return the lowerBound value.
     */
    public Double getLowerBound() {
        return this.lowerBound;
    }

    /**
     * Set the lowerBound property: lower bound
     * 
     * should be specified when anomalyDetectorDirection is Both or Down.
     * 
     * @param lowerBound the lowerBound value to set.
     * @return the HardThresholdCondition object itself.
     */
    public HardThresholdCondition setLowerBound(Double lowerBound) {
        this.lowerBound = lowerBound;
        return this;
    }

    /**
     * Get the upperBound property: upper bound
     * 
     * should be specified when anomalyDetectorDirection is Both or Up.
     * 
     * @return the upperBound value.
     */
    public Double getUpperBound() {
        return this.upperBound;
    }

    /**
     * Set the upperBound property: upper bound
     * 
     * should be specified when anomalyDetectorDirection is Both or Up.
     * 
     * @param upperBound the upperBound value to set.
     * @return the HardThresholdCondition object itself.
     */
    public HardThresholdCondition setUpperBound(Double upperBound) {
        this.upperBound = upperBound;
        return this;
    }

    /**
     * Get the anomalyDetectorDirection property: detection direction.
     * 
     * @return the anomalyDetectorDirection value.
     */
    public AnomalyDetectorDirection getAnomalyDetectorDirection() {
        return this.anomalyDetectorDirection;
    }

    /**
     * Set the anomalyDetectorDirection property: detection direction.
     * 
     * @param anomalyDetectorDirection the anomalyDetectorDirection value to set.
     * @return the HardThresholdCondition object itself.
     */
    public HardThresholdCondition setAnomalyDetectorDirection(AnomalyDetectorDirection anomalyDetectorDirection) {
        this.anomalyDetectorDirection = anomalyDetectorDirection;
        return this;
    }

    /**
     * Get the suppressCondition property: The suppressCondition property.
     * 
     * @return the suppressCondition value.
     */
    public SuppressCondition getSuppressCondition() {
        return this.suppressCondition;
    }

    /**
     * Set the suppressCondition property: The suppressCondition property.
     * 
     * @param suppressCondition the suppressCondition value to set.
     * @return the HardThresholdCondition object itself.
     */
    public HardThresholdCondition setSuppressCondition(SuppressCondition suppressCondition) {
        this.suppressCondition = suppressCondition;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("anomalyDetectorDirection",
            this.anomalyDetectorDirection == null ? null : this.anomalyDetectorDirection.toString());
        jsonWriter.writeJsonField("suppressCondition", this.suppressCondition);
        jsonWriter.writeNumberField("lowerBound", this.lowerBound);
        jsonWriter.writeNumberField("upperBound", this.upperBound);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HardThresholdCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HardThresholdCondition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HardThresholdCondition.
     */
    public static HardThresholdCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HardThresholdCondition deserializedHardThresholdCondition = new HardThresholdCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("anomalyDetectorDirection".equals(fieldName)) {
                    deserializedHardThresholdCondition.anomalyDetectorDirection
                        = AnomalyDetectorDirection.fromString(reader.getString());
                } else if ("suppressCondition".equals(fieldName)) {
                    deserializedHardThresholdCondition.suppressCondition = SuppressCondition.fromJson(reader);
                } else if ("lowerBound".equals(fieldName)) {
                    deserializedHardThresholdCondition.lowerBound = reader.getNullable(JsonReader::getDouble);
                } else if ("upperBound".equals(fieldName)) {
                    deserializedHardThresholdCondition.upperBound = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHardThresholdCondition;
        });
    }
}
