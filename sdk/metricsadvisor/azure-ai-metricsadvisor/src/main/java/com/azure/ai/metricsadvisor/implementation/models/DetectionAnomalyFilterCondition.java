// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The DetectionAnomalyFilterCondition model.
 */
@Fluent
public final class DetectionAnomalyFilterCondition implements JsonSerializable<DetectionAnomalyFilterCondition> {
    /*
     * dimension filter
     */
    private List<DimensionGroupIdentity> dimensionFilter;

    /*
     * The severityFilter property.
     */
    private SeverityFilterCondition severityFilter;

    /**
     * Creates an instance of DetectionAnomalyFilterCondition class.
     */
    public DetectionAnomalyFilterCondition() {
    }

    /**
     * Get the dimensionFilter property: dimension filter.
     * 
     * @return the dimensionFilter value.
     */
    public List<DimensionGroupIdentity> getDimensionFilter() {
        return this.dimensionFilter;
    }

    /**
     * Set the dimensionFilter property: dimension filter.
     * 
     * @param dimensionFilter the dimensionFilter value to set.
     * @return the DetectionAnomalyFilterCondition object itself.
     */
    public DetectionAnomalyFilterCondition setDimensionFilter(List<DimensionGroupIdentity> dimensionFilter) {
        this.dimensionFilter = dimensionFilter;
        return this;
    }

    /**
     * Get the severityFilter property: The severityFilter property.
     * 
     * @return the severityFilter value.
     */
    public SeverityFilterCondition getSeverityFilter() {
        return this.severityFilter;
    }

    /**
     * Set the severityFilter property: The severityFilter property.
     * 
     * @param severityFilter the severityFilter value to set.
     * @return the DetectionAnomalyFilterCondition object itself.
     */
    public DetectionAnomalyFilterCondition setSeverityFilter(SeverityFilterCondition severityFilter) {
        this.severityFilter = severityFilter;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dimensionFilter", this.dimensionFilter,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("severityFilter", this.severityFilter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DetectionAnomalyFilterCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DetectionAnomalyFilterCondition if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DetectionAnomalyFilterCondition.
     */
    public static DetectionAnomalyFilterCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DetectionAnomalyFilterCondition deserializedDetectionAnomalyFilterCondition
                = new DetectionAnomalyFilterCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dimensionFilter".equals(fieldName)) {
                    List<DimensionGroupIdentity> dimensionFilter
                        = reader.readArray(reader1 -> DimensionGroupIdentity.fromJson(reader1));
                    deserializedDetectionAnomalyFilterCondition.dimensionFilter = dimensionFilter;
                } else if ("severityFilter".equals(fieldName)) {
                    deserializedDetectionAnomalyFilterCondition.severityFilter
                        = SeverityFilterCondition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDetectionAnomalyFilterCondition;
        });
    }
}
