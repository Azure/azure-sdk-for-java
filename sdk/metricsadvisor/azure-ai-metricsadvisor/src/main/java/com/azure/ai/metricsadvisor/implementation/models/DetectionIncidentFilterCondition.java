// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The DetectionIncidentFilterCondition model.
 */
@Fluent
public final class DetectionIncidentFilterCondition implements JsonSerializable<DetectionIncidentFilterCondition> {
    /*
     * dimension filter
     */
    private List<DimensionGroupIdentity> dimensionFilter;

    /**
     * Creates an instance of DetectionIncidentFilterCondition class.
     */
    public DetectionIncidentFilterCondition() {
    }

    /**
     * Get the dimensionFilter property: dimension filter.
     * 
     * @return the dimensionFilter value.
     */
    public List<DimensionGroupIdentity> getDimensionFilter() {
        return this.dimensionFilter;
    }

    /**
     * Set the dimensionFilter property: dimension filter.
     * 
     * @param dimensionFilter the dimensionFilter value to set.
     * @return the DetectionIncidentFilterCondition object itself.
     */
    public DetectionIncidentFilterCondition setDimensionFilter(List<DimensionGroupIdentity> dimensionFilter) {
        this.dimensionFilter = dimensionFilter;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dimensionFilter", this.dimensionFilter,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DetectionIncidentFilterCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DetectionIncidentFilterCondition if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DetectionIncidentFilterCondition.
     */
    public static DetectionIncidentFilterCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DetectionIncidentFilterCondition deserializedDetectionIncidentFilterCondition
                = new DetectionIncidentFilterCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dimensionFilter".equals(fieldName)) {
                    List<DimensionGroupIdentity> dimensionFilter
                        = reader.readArray(reader1 -> DimensionGroupIdentity.fromJson(reader1));
                    deserializedDetectionIncidentFilterCondition.dimensionFilter = dimensionFilter;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDetectionIncidentFilterCondition;
        });
    }
}
