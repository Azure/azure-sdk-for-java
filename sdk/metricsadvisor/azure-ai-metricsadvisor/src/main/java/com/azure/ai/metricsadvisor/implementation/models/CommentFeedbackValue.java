// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CommentFeedbackValue model.
 */
@Fluent
public final class CommentFeedbackValue implements JsonSerializable<CommentFeedbackValue> {
    /*
     * the comment string
     */
    private String commentValue;

    /**
     * Creates an instance of CommentFeedbackValue class.
     */
    public CommentFeedbackValue() {
    }

    /**
     * Get the commentValue property: the comment string.
     * 
     * @return the commentValue value.
     */
    public String getCommentValue() {
        return this.commentValue;
    }

    /**
     * Set the commentValue property: the comment string.
     * 
     * @param commentValue the commentValue value to set.
     * @return the CommentFeedbackValue object itself.
     */
    public CommentFeedbackValue setCommentValue(String commentValue) {
        this.commentValue = commentValue;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("commentValue", this.commentValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommentFeedbackValue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommentFeedbackValue if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommentFeedbackValue.
     */
    public static CommentFeedbackValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommentFeedbackValue deserializedCommentFeedbackValue = new CommentFeedbackValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("commentValue".equals(fieldName)) {
                    deserializedCommentFeedbackValue.commentValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommentFeedbackValue;
        });
    }
}
