// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AzureSQLConnectionStringCredentialPatch model.
 */
@Fluent
public final class AzureSQLConnectionStringCredentialPatch extends DataSourceCredentialPatch {
    /*
     * Type of data source credential
     */
    private DataSourceCredentialType dataSourceCredentialType = DataSourceCredentialType.AZURE_SQLCONNECTION_STRING;

    /*
     * The parameters property.
     */
    private AzureSQLConnectionStringParamPatch parameters;

    /**
     * Creates an instance of AzureSQLConnectionStringCredentialPatch class.
     */
    public AzureSQLConnectionStringCredentialPatch() {
    }

    /**
     * Get the dataSourceCredentialType property: Type of data source credential.
     * 
     * @return the dataSourceCredentialType value.
     */
    @Override
    public DataSourceCredentialType getDataSourceCredentialType() {
        return this.dataSourceCredentialType;
    }

    /**
     * Get the parameters property: The parameters property.
     * 
     * @return the parameters value.
     */
    public AzureSQLConnectionStringParamPatch getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The parameters property.
     * 
     * @param parameters the parameters value to set.
     * @return the AzureSQLConnectionStringCredentialPatch object itself.
     */
    public AzureSQLConnectionStringCredentialPatch setParameters(AzureSQLConnectionStringParamPatch parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSQLConnectionStringCredentialPatch setDataSourceCredentialName(String dataSourceCredentialName) {
        super.setDataSourceCredentialName(dataSourceCredentialName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSQLConnectionStringCredentialPatch
        setDataSourceCredentialDescription(String dataSourceCredentialDescription) {
        super.setDataSourceCredentialDescription(dataSourceCredentialDescription);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataSourceCredentialName", getDataSourceCredentialName());
        jsonWriter.writeStringField("dataSourceCredentialDescription", getDataSourceCredentialDescription());
        jsonWriter.writeStringField("dataSourceCredentialType",
            this.dataSourceCredentialType == null ? null : this.dataSourceCredentialType.toString());
        jsonWriter.writeJsonField("parameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSQLConnectionStringCredentialPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSQLConnectionStringCredentialPatch if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSQLConnectionStringCredentialPatch.
     */
    public static AzureSQLConnectionStringCredentialPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSQLConnectionStringCredentialPatch deserializedAzureSQLConnectionStringCredentialPatch
                = new AzureSQLConnectionStringCredentialPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataSourceCredentialName".equals(fieldName)) {
                    deserializedAzureSQLConnectionStringCredentialPatch.setDataSourceCredentialName(reader.getString());
                } else if ("dataSourceCredentialDescription".equals(fieldName)) {
                    deserializedAzureSQLConnectionStringCredentialPatch
                        .setDataSourceCredentialDescription(reader.getString());
                } else if ("dataSourceCredentialType".equals(fieldName)) {
                    deserializedAzureSQLConnectionStringCredentialPatch.dataSourceCredentialType
                        = DataSourceCredentialType.fromString(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    deserializedAzureSQLConnectionStringCredentialPatch.parameters
                        = AzureSQLConnectionStringParamPatch.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSQLConnectionStringCredentialPatch;
        });
    }
}
