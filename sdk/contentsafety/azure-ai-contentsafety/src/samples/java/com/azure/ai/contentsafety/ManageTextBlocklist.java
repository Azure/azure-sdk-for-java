// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.contentsafety;

import com.azure.ai.contentsafety.models.TextBlockItem;
import com.azure.ai.contentsafety.models.TextBlocklistMatchResult;
import com.azure.ai.contentsafety.models.AddBlockItemsResult;
import com.azure.ai.contentsafety.models.TextBlockItemInfo;
import com.azure.ai.contentsafety.models.RemoveBlockItemsOptions;
import com.azure.ai.contentsafety.models.AnalyzeTextOptions;
import com.azure.ai.contentsafety.models.AnalyzeTextResult;
import com.azure.ai.contentsafety.models.TextBlocklist;
import com.azure.ai.contentsafety.models.AddBlockItemsOptions;
import com.azure.core.credential.KeyCredential;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;

public class ManageTextBlocklist {
    public static void main(String[] args) {
        // BEGIN:com.azure.ai.contentsafety.createClient
        String endpoint = Configuration.getGlobalConfiguration().get("CONTENT_SAFETY_ENDPOINT");
        String key = Configuration.getGlobalConfiguration().get("CONTENT_SAFETY_KEY");

        ContentSafetyClient contentSafetyClient = new ContentSafetyClientBuilder()
            .credential(new KeyCredential(key))
            .endpoint(endpoint).buildClient();
        // END:com.azure.ai.contentsafety.createClient

        // BEGIN:com.azure.ai.contentsafety.createtextblocklist
        String blocklistName = "TestBlocklist";
        Map<String, String> description = new HashMap<>();
        description.put("description", "Test Blocklist");
        BinaryData resource = BinaryData.fromObject(description);
        RequestOptions requestOptions = new RequestOptions();
        Response<BinaryData> response =
            contentSafetyClient.createOrUpdateTextBlocklistWithResponse(blocklistName, resource, requestOptions);
        if (response.getStatusCode() == 201) {
            System.out.println("\nBlocklist " + blocklistName + " created.");
        } else if (response.getStatusCode() == 200) {
            System.out.println("\nBlocklist " + blocklistName + " updated.");
        }
        // END:com.azure.ai.contentsafety.createtextblocklist

        // BEGIN:com.azure.ai.contentsafety.addblockitems
        String blockItemText1 = "k*ll";
        String blockItemText2 = "h*te";
        List<TextBlockItemInfo> blockItems = Arrays.asList(new TextBlockItemInfo(blockItemText1).setDescription("Kill word"),
            new TextBlockItemInfo(blockItemText2).setDescription("Hate word"));
        AddBlockItemsResult addedBlockItems = contentSafetyClient.addBlockItems(blocklistName, new AddBlockItemsOptions(blockItems));
        if (addedBlockItems != null && addedBlockItems.getValue() != null) {
            System.out.println("\nBlockItems added:");
            for (TextBlockItem addedBlockItem : addedBlockItems.getValue()) {
                System.out.println("BlockItemId: " + addedBlockItem.getBlockItemId() + ", Text: " + addedBlockItem.getText() + ", Description: " + addedBlockItem.getDescription());
            }
        }
        // END:com.azure.ai.contentsafety.addblockitems


        // BEGIN:com.azure.ai.contentsafety.analyzetextwithblocklist
        // After you edit your blocklist, it usually takes effect in 5 minutes, please wait some time before analyzing with blocklist after editing.
        AnalyzeTextOptions request = new AnalyzeTextOptions("I h*te you and I want to k*ll you");
        request.getBlocklistNames().add(blocklistName);
        request.setBreakByBlocklists(true);

        AnalyzeTextResult analyzeTextResult;
        try {
            analyzeTextResult = contentSafetyClient.analyzeText(request);
        } catch (HttpResponseException ex) {
            System.out.println("Analyze text failed.\nStatus code: " + ex.getResponse().getStatusCode() + ", Error message: " + ex.getMessage());
            throw ex;
        }

        if (analyzeTextResult.getBlocklistsMatchResults() != null) {
            System.out.println("\nBlocklist match result:");
            for (TextBlocklistMatchResult matchResult : analyzeTextResult.getBlocklistsMatchResults()) {
                System.out.println("Blockitem was hit in text: Offset: " + matchResult.getOffset() + ", Length: " + matchResult.getLength());
                System.out.println("BlocklistName: " + matchResult.getBlocklistName() + ", BlockItemId: " + matchResult.getBlockItemId() + ", BlockItemText: " + matchResult.getBlockItemText());
            }
        }
        // END:com.azure.ai.contentsafety.analyzetextwithblocklist

        // BEGIN:com.azure.ai.contentsafety.listtextblocklists
        PagedIterable<TextBlocklist> allTextBlocklists = contentSafetyClient.listTextBlocklists();
        System.out.println("\nList Blocklist:");
        for (TextBlocklist blocklist : allTextBlocklists) {
            System.out.println("Blocklist: " + blocklist.getBlocklistName() + ", Description: " + blocklist.getDescription());
        }
        // END:com.azure.ai.contentsafety.listtextblocklists

        // BEGIN:com.azure.ai.contentsafety.gettextblocklist
        TextBlocklist getBlocklist = contentSafetyClient.getTextBlocklist(blocklistName);
        if (getBlocklist != null) {
            System.out.println("\nGet blocklist:");
            System.out.println("BlocklistName: " + getBlocklist.getBlocklistName() + ", Description: " + getBlocklist.getDescription());
        }
        // END:com.azure.ai.contentsafety.gettextblocklist

        // BEGIN:com.azure.ai.contentsafety.listtextblocklistitems
        PagedIterable<TextBlockItem> allBlockitems = contentSafetyClient.listTextBlocklistItems(blocklistName);
        System.out.println("\nList BlockItems:");
        for (TextBlockItem blocklistItem : allBlockitems) {
            System.out.println("BlockItemId: " + blocklistItem.getBlockItemId() + ", Text: " + blocklistItem.getText() + ", Description: " + blocklistItem.getDescription());
        }
        // END:com.azure.ai.contentsafety.listtextblocklistitems

        // BEGIN:com.azure.ai.contentsafety.gettextblocklistitem
        String getBlockItemId = addedBlockItems.getValue().get(0).getBlockItemId();
        TextBlockItem getBlockItem = contentSafetyClient.getTextBlocklistItem(blocklistName, getBlockItemId);
        System.out.println("\nGet BlockItem:");
        System.out.println("BlockItemId: " + getBlockItem.getBlockItemId() + ", Text: " + getBlockItem.getText() + ", Description: " + getBlockItem.getDescription());
        // END:com.azure.ai.contentsafety.gettextblocklistitem

        // BEGIN:com.azure.ai.contentsafety.removeblockitems
        String removeBlockItemId = addedBlockItems.getValue().get(0).getBlockItemId();
        List<String> removeBlockItemIds = new ArrayList<>();
        removeBlockItemIds.add(removeBlockItemId);
        contentSafetyClient.removeBlockItems(blocklistName, new RemoveBlockItemsOptions(removeBlockItemIds));
        // END:com.azure.ai.contentsafety.removeblockitems

        // BEGIN:com.azure.ai.contentsafety.deletetextblocklist
        contentSafetyClient.deleteTextBlocklist(blocklistName);
        // END:com.azure.ai.contentsafety.deletetextblocklist

    }
}
