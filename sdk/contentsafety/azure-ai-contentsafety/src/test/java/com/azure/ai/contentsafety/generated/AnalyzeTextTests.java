// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.contentsafety.generated;

import com.azure.ai.contentsafety.models.AnalyzeTextOptions;
import com.azure.ai.contentsafety.models.AnalyzeTextResult;
import com.azure.ai.contentsafety.models.TextAnalyzeSeverityResult;
import com.azure.ai.contentsafety.models.TextBlocklistMatchResult;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class AnalyzeTextTests extends ContentSafetyClientTestBase {
    @Test
    @Disabled
    public void testAnalyzeTextTests() {
        // method invocation
        AnalyzeTextResult response = contentSafetyClient.analyzeText(new AnalyzeTextOptions("This is text example"));

        // response assertion
        Assertions.assertNotNull(response);

        List<TextBlocklistMatchResult> responseBlocklistsMatchResults = response.getBlocklistsMatchResults();
        Assertions.assertEquals(0, responseBlocklistsMatchResults.size());
        TextAnalyzeSeverityResult responseHateResult = response.getHateResult();
        Assertions.assertNotNull(responseHateResult);

        TextCategory responseHateResultCategory = responseHateResult.getCategory();
        Assertions.assertEquals(TextCategory.HATE, responseHateResultCategory);
        int responseHateResultSeverity = responseHateResult.getSeverity();
        Assertions.assertEquals(0, responseHateResultSeverity);
        TextAnalyzeSeverityResult responseSelfHarmResult = response.getSelfHarmResult();
        Assertions.assertNotNull(responseSelfHarmResult);

        TextCategory responseSelfHarmResultCategory = responseSelfHarmResult.getCategory();
        Assertions.assertEquals(TextCategory.SELF_HARM, responseSelfHarmResultCategory);
        int responseSelfHarmResultSeverity = responseSelfHarmResult.getSeverity();
        Assertions.assertEquals(0, responseSelfHarmResultSeverity);
        TextAnalyzeSeverityResult responseSexualResult = response.getSexualResult();
        Assertions.assertNotNull(responseSexualResult);

        TextCategory responseSexualResultCategory = responseSexualResult.getCategory();
        Assertions.assertEquals(TextCategory.SEXUAL, responseSexualResultCategory);
        int responseSexualResultSeverity = responseSexualResult.getSeverity();
        Assertions.assertEquals(0, responseSexualResultSeverity);
        TextAnalyzeSeverityResult responseViolenceResult = response.getViolenceResult();
        Assertions.assertNotNull(responseViolenceResult);

        TextCategory responseViolenceResultCategory = responseViolenceResult.getCategory();
        Assertions.assertEquals(TextCategory.VIOLENCE, responseViolenceResultCategory);
        int responseViolenceResultSeverity = responseViolenceResult.getSeverity();
        Assertions.assertEquals(0, responseViolenceResultSeverity);
    }
}
