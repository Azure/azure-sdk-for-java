// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.contentsafety;

import com.azure.ai.contentsafety.models.AddOrUpdateTextBlocklistItemsOptions;
import com.azure.ai.contentsafety.models.AddOrUpdateTextBlocklistItemsResult;
import com.azure.ai.contentsafety.models.RemoveTextBlocklistItemsOptions;
import com.azure.ai.contentsafety.models.TextBlocklist;
import com.azure.ai.contentsafety.models.TextBlocklistItem;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

import java.util.Arrays;
import java.util.List;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public final class ManageTextBlocklistAsyncTests extends ContentSafetyClientTestBase {
    private static String blocklistName = "blocklistTestAsync";
    private static String blocklistItemId = "";

    @Test
    @Order(1)
    public void testCreateOrUpdateTextBlocklistTests() {
        BinaryData resource = BinaryData.fromString("{\"description\":\"Test Blocklist\"}");
        RequestOptions requestOptions = new RequestOptions();
        Response<BinaryData> response =
            blocklistAsyncClient.createOrUpdateTextBlocklistWithResponse(blocklistName, resource, requestOptions).block();
        Assertions.assertEquals(201, response.getStatusCode());
    }


    @Test
    @Order(2)
    public void testGetAllTextBlocklistsTests() {
        // method invocation
        PagedFlux<TextBlocklist> response = blocklistAsyncClient.listTextBlocklists();

        // response assertion
        TextBlocklist firstItem = response.blockFirst();
        Assertions.assertNotNull(firstItem);

        String firstItemBlocklistName = firstItem.getName();
        Assertions.assertEquals(blocklistName, firstItemBlocklistName);
        String firstItemDescription = firstItem.getDescription();
        Assertions.assertEquals("Test Blocklist", firstItemDescription);

    }

    @Test
    @Order(3)
    public void testGetTextBlocklistByBlocklistNameTests() {
        // method invocation
        TextBlocklist response = blocklistAsyncClient.getTextBlocklist(blocklistName).block();

        // response assertion
        Assertions.assertNotNull(response);

        String responseBlocklistName = response.getName();
        Assertions.assertEquals(blocklistName, responseBlocklistName);
        String responseDescription = response.getDescription();
        Assertions.assertEquals("Test Blocklist", responseDescription);
    }

    @Test
    @Order(4)
    public void testAddBlockItemsToTextBlocklistTests() {
        // method invocation
        AddOrUpdateTextBlocklistItemsResult response =
            blocklistAsyncClient.addOrUpdateBlocklistItems(
                blocklistName,
                new AddOrUpdateTextBlocklistItemsOptions(
                    Arrays.asList(new TextBlocklistItem("fuck").setDescription("fuck word"),
                        new TextBlocklistItem("hate").setDescription("hate word"),
                        new TextBlocklistItem("violence").setDescription("violence word"),
                        new TextBlocklistItem("sex").setDescription("sex word")))).block();

        // response assertion
        Assertions.assertNotNull(response);
        Assertions.assertEquals(4, response.getBlocklistItems().size());

        List<TextBlocklistItem> responseValue = response.getBlocklistItems();
        TextBlocklistItem responseValueFirstItem = responseValue.get(0);

        Assertions.assertNotNull(responseValueFirstItem);
        Assertions.assertEquals("fuck word", responseValueFirstItem.getDescription());
        Assertions.assertEquals("fuck", responseValueFirstItem.getText());
        Assertions.assertNotNull(responseValueFirstItem.getBlocklistItemId());
        blocklistItemId = new String(responseValueFirstItem.getBlocklistItemId());
        System.out.println("debug blocklistItemId: " + blocklistItemId);
    }

    @Test
    @Order(5)
    public void testGetAllBlockItemsByBlocklistNameTests() {
        // method invocation
        PagedFlux<TextBlocklistItem> response = blocklistAsyncClient.listTextBlocklistItems(blocklistName, 2, 1);

        // response assertion
        TextBlocklistItem firstItem = response.blockFirst();
        Assertions.assertNotNull(firstItem);
        Assertions.assertEquals("violence word", firstItem.getDescription());
        Assertions.assertEquals("violence", firstItem.getText());
    }

    @Test
    @Order(6)
    public void testGetBlockItemByBlocklistNameAndBlockItemIdTests() {
        // method invocation
        System.out.println("debug blocklistItemId: " + blocklistItemId);
        TextBlocklistItem response =
            blocklistAsyncClient.getTextBlocklistItem(blocklistName, blocklistItemId).block();

        // response assertion
        Assertions.assertNotNull(response);

        String responseBlockItemId = response.getBlocklistItemId();
        Assertions.assertEquals(blocklistItemId, responseBlockItemId);
        String responseDescription = response.getDescription();
        Assertions.assertEquals("fuck word", responseDescription);
        String responseText = response.getText();
        Assertions.assertEquals("fuck", responseText);
    }

    @Test
    @Order(7)
    public void testRemoveBlockItemsFromTextBlocklistTests() {
        // method invocation
        System.out.println("debug blocklistItemId: " + blocklistItemId);
        blocklistAsyncClient.removeBlocklistItems(
            blocklistName, new RemoveTextBlocklistItemsOptions(Arrays.asList(blocklistItemId)));
    }

    @Test
    @Order(8)
    public void testDeleteTextBlocklistByBlocklistNameTests() {
        // method invocation
        blocklistAsyncClient.deleteTextBlocklist(blocklistName).block();
    }
}
