// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.implementation;

import com.azure.ai.contentsafety.ContentSafetyServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the BlocklistClient type. */
public final class BlocklistClientImpl {
    /** The proxy service used to perform REST calls. */
    private final BlocklistClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Service version. */
    private final ContentSafetyServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public ContentSafetyServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of BlocklistClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public BlocklistClientImpl(String endpoint, ContentSafetyServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                serviceVersion);
    }

    /**
     * Initializes an instance of BlocklistClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public BlocklistClientImpl(HttpPipeline httpPipeline, String endpoint, ContentSafetyServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of BlocklistClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public BlocklistClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            ContentSafetyServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(BlocklistClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for BlocklistClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}/contentsafety")
    @ServiceInterface(name = "BlocklistClient")
    public interface BlocklistClientService {
        @Post("/text/blocklists/{blocklistName}:addOrUpdateBlocklistItems")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addOrUpdateBlocklistItems(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData addOrUpdateTextBlocklistItemsOptions,
=======
                @PathParam("blocklistName") String name,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                RequestOptions requestOptions,
                Context context);

        @Post("/text/blocklists/{blocklistName}:addOrUpdateBlocklistItems")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> addOrUpdateBlocklistItemsSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData addOrUpdateTextBlocklistItemsOptions,
=======
                @PathParam("blocklistName") String name,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                RequestOptions requestOptions,
                Context context);

        @Patch("/text/blocklists/{blocklistName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateTextBlocklist(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("Content-Type") String contentType,
                @HeaderParam("accept") String accept,
                @BodyParam("application/merge-patch+json") BinaryData resource,
                RequestOptions requestOptions,
                Context context);

        @Patch("/text/blocklists/{blocklistName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateTextBlocklistSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("Content-Type") String contentType,
                @HeaderParam("accept") String accept,
                @BodyParam("application/merge-patch+json") BinaryData resource,
                RequestOptions requestOptions,
                Context context);

        @Delete("/text/blocklists/{blocklistName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTextBlocklist(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/text/blocklists/{blocklistName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteTextBlocklistSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists/{blocklistName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTextBlocklist(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists/{blocklistName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTextBlocklistSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists/{blocklistName}/blocklistItems/{blocklistItemId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTextBlocklistItem(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @PathParam("blocklistItemId") String blocklistItemId,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists/{blocklistName}/blocklistItems/{blocklistItemId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTextBlocklistItemSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @PathParam("blocklistItemId") String blocklistItemId,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists/{blocklistName}/blocklistItems")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTextBlocklistItems(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists/{blocklistName}/blocklistItems")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTextBlocklistItemsSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
=======
                @PathParam("blocklistName") String name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTextBlocklists(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/text/blocklists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTextBlocklistsSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/text/blocklists/{blocklistName}:removeBlocklistItems")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeBlocklistItems(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData removeTextBlocklistItemsOptions,
=======
                @PathParam("blocklistName") String name,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                RequestOptions requestOptions,
                Context context);

        @Post("/text/blocklists/{blocklistName}:removeBlocklistItems")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> removeBlocklistItemsSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
<<<<<<< HEAD
                @PathParam("blocklistName") String blocklistName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData removeTextBlocklistItemsOptions,
=======
                @PathParam("blocklistName") String name,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTextBlocklistItemsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTextBlocklistItemsNextSync(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTextBlocklistsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTextBlocklistsNextSync(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Add or update BlocklistItems To Text Blocklist
     *
     * <p>Add or update blocklistItems to a text blocklist. You can add or update at most 100 blocklistItems in one
     * request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItems (Required): [
     *          (Required){
     *             blocklistItemId: String (Required)
     *             description: String (Optional)
     *             text: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItems (Required): [
     *          (Required){
     *             blocklistItemId: String (Required)
     *             description: String (Optional)
     *             text: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
     * @param addOrUpdateTextBlocklistItemsOptions The request to add blocklistItems to a text blocklist.
=======
     * @param name Text blocklist name.
     * @param body Options for adding or updating blocklist items.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of adding blocklistItems to the text blocklist along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addOrUpdateBlocklistItemsWithResponseAsync(
<<<<<<< HEAD
            String blocklistName, BinaryData addOrUpdateTextBlocklistItemsOptions, RequestOptions requestOptions) {
=======
            String name, BinaryData body, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addOrUpdateBlocklistItems(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                                blocklistName,
                                accept,
                                addOrUpdateTextBlocklistItemsOptions,
=======
                                name,
                                accept,
                                body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                                requestOptions,
                                context));
    }

    /**
     * Add or update BlocklistItems To Text Blocklist
     *
     * <p>Add or update blocklistItems to a text blocklist. You can add or update at most 100 blocklistItems in one
     * request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItems (Required): [
     *          (Required){
     *             blocklistItemId: String (Required)
     *             description: String (Optional)
     *             text: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItems (Required): [
     *          (Required){
     *             blocklistItemId: String (Required)
     *             description: String (Optional)
     *             text: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
     * @param addOrUpdateTextBlocklistItemsOptions The request to add blocklistItems to a text blocklist.
=======
     * @param name Text blocklist name.
     * @param body Options for adding or updating blocklist items.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of adding blocklistItems to the text blocklist along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addOrUpdateBlocklistItemsWithResponse(
<<<<<<< HEAD
            String blocklistName, BinaryData addOrUpdateTextBlocklistItemsOptions, RequestOptions requestOptions) {
=======
            String name, BinaryData body, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return service.addOrUpdateBlocklistItemsSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                blocklistName,
                accept,
                addOrUpdateTextBlocklistItemsOptions,
=======
                name,
                accept,
                body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                requestOptions,
                Context.NONE);
    }

    /**
     * Create Or Update Text Blocklist
     *
     * <p>Updates a text blocklist. If the blocklistName does not exist, a new blocklist will be created.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return text Blocklist along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateTextBlocklistWithResponseAsync(
<<<<<<< HEAD
            String blocklistName, BinaryData resource, RequestOptions requestOptions) {
=======
            String name, BinaryData resource, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateTextBlocklist(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                                blocklistName,
=======
                                name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                                contentType,
                                accept,
                                resource,
                                requestOptions,
                                context));
    }

    /**
     * Create Or Update Text Blocklist
     *
     * <p>Updates a text blocklist. If the blocklistName does not exist, a new blocklist will be created.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return text Blocklist along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateTextBlocklistWithResponse(
<<<<<<< HEAD
            String blocklistName, BinaryData resource, RequestOptions requestOptions) {
=======
            String name, BinaryData resource, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.createOrUpdateTextBlocklistSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                blocklistName,
=======
                name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                contentType,
                accept,
                resource,
                requestOptions,
                Context.NONE);
    }

    /**
     * Delete Text Blocklist By blocklistName
     *
     * <p>Deletes a text blocklist.
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
<<<<<<< HEAD
    public Mono<Response<Void>> deleteTextBlocklistWithResponseAsync(
            String blocklistName, RequestOptions requestOptions) {
=======
    public Mono<Response<Void>> deleteTextBlocklistWithResponseAsync(String name, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteTextBlocklist(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                                blocklistName,
=======
                                name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete Text Blocklist By blocklistName
     *
     * <p>Deletes a text blocklist.
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
<<<<<<< HEAD
    public Response<Void> deleteTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteTextBlocklistSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                blocklistName,
                accept,
                requestOptions,
                Context.NONE);
=======
    public Response<Void> deleteTextBlocklistWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteTextBlocklistSync(
                this.getEndpoint(), this.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
    }

    /**
     * Get Text Blocklist By blocklistName
     *
     * <p>Returns text blocklist details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return text Blocklist along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
<<<<<<< HEAD
    public Mono<Response<BinaryData>> getTextBlocklistWithResponseAsync(
            String blocklistName, RequestOptions requestOptions) {
=======
    public Mono<Response<BinaryData>> getTextBlocklistWithResponseAsync(String name, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTextBlocklist(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                                blocklistName,
=======
                                name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get Text Blocklist By blocklistName
     *
     * <p>Returns text blocklist details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return text Blocklist along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
<<<<<<< HEAD
    public Response<BinaryData> getTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTextBlocklistSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                blocklistName,
                accept,
                requestOptions,
                Context.NONE);
=======
    public Response<BinaryData> getTextBlocklistWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTextBlocklistSync(
                this.getEndpoint(), this.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
    }

    /**
     * Get BlocklistItem By blocklistName And blocklistItemId
     *
     * <p>Get blocklistItem by blocklistName and blocklistItemId from a text blocklist.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param blocklistItemId The service will generate a BlocklistItemId, which will be a UUID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return blocklistItem by blocklistName and blocklistItemId from a text blocklist along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTextBlocklistItemWithResponseAsync(
<<<<<<< HEAD
            String blocklistName, String blocklistItemId, RequestOptions requestOptions) {
=======
            String name, String blocklistItemId, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTextBlocklistItem(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                                blocklistName,
=======
                                name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                                blocklistItemId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get BlocklistItem By blocklistName And blocklistItemId
     *
     * <p>Get blocklistItem by blocklistName and blocklistItemId from a text blocklist.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param blocklistItemId The service will generate a BlocklistItemId, which will be a UUID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return blocklistItem by blocklistName and blocklistItemId from a text blocklist along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTextBlocklistItemWithResponse(
<<<<<<< HEAD
            String blocklistName, String blocklistItemId, RequestOptions requestOptions) {
=======
            String name, String blocklistItemId, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return service.getTextBlocklistItemSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                blocklistName,
=======
                name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                blocklistItemId,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Get All BlocklistItems By blocklistName
     *
     * <p>Get all blocklistItems in a text blocklist.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all blocklistItems in a text blocklist along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTextBlocklistItemsSinglePageAsync(
<<<<<<< HEAD
            String blocklistName, RequestOptions requestOptions) {
=======
            String name, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listTextBlocklistItems(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                                        blocklistName,
=======
                                        name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get All BlocklistItems By blocklistName
     *
     * <p>Get all blocklistItems in a text blocklist.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all blocklistItems in a text blocklist as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
<<<<<<< HEAD
    public PagedFlux<BinaryData> listTextBlocklistItemsAsync(String blocklistName, RequestOptions requestOptions) {
=======
    public PagedFlux<BinaryData> listTextBlocklistItemsAsync(String name, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                (pageSize) -> {
                    RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
                    if (pageSize != null) {
                        requestOptionsLocal.addRequestCallback(
                                requestLocal -> {
                                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                                    requestLocal.setUrl(urlBuilder.toString());
                                });
                    }
<<<<<<< HEAD
                    return listTextBlocklistItemsSinglePageAsync(blocklistName, requestOptionsLocal);
=======
                    return listTextBlocklistItemsSinglePageAsync(name, requestOptionsLocal);
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                },
                (nextLink, pageSize) -> {
                    RequestOptions requestOptionsLocal = new RequestOptions();
                    requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
                    if (pageSize != null) {
                        requestOptionsLocal.addRequestCallback(
                                requestLocal -> {
                                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                                    requestLocal.setUrl(urlBuilder.toString());
                                });
                    }
                    return listTextBlocklistItemsNextSinglePageAsync(nextLink, requestOptionsLocal);
                });
    }

    /**
     * Get All BlocklistItems By blocklistName
     *
     * <p>Get all blocklistItems in a text blocklist.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all blocklistItems in a text blocklist along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
<<<<<<< HEAD
    private PagedResponse<BinaryData> listTextBlocklistItemsSinglePage(
            String blocklistName, RequestOptions requestOptions) {
=======
    private PagedResponse<BinaryData> listTextBlocklistItemsSinglePage(String name, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listTextBlocklistItemsSync(
                        this.getEndpoint(),
                        this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                        blocklistName,
=======
                        name,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                        accept,
                        requestOptions,
                        Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * Get All BlocklistItems By blocklistName
     *
     * <p>Get all blocklistItems in a text blocklist.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
=======
     * @param name Text blocklist name.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all blocklistItems in a text blocklist as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
<<<<<<< HEAD
    public PagedIterable<BinaryData> listTextBlocklistItems(String blocklistName, RequestOptions requestOptions) {
=======
    public PagedIterable<BinaryData> listTextBlocklistItems(String name, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedIterable<>(
                (pageSize) -> {
                    RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
                    if (pageSize != null) {
                        requestOptionsLocal.addRequestCallback(
                                requestLocal -> {
                                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                                    requestLocal.setUrl(urlBuilder.toString());
                                });
                    }
<<<<<<< HEAD
                    return listTextBlocklistItemsSinglePage(blocklistName, requestOptionsLocal);
=======
                    return listTextBlocklistItemsSinglePage(name, requestOptionsLocal);
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                },
                (nextLink, pageSize) -> {
                    RequestOptions requestOptionsLocal = new RequestOptions();
                    requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
                    if (pageSize != null) {
                        requestOptionsLocal.addRequestCallback(
                                requestLocal -> {
                                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                                    requestLocal.setUrl(urlBuilder.toString());
                                });
                    }
                    return listTextBlocklistItemsNextSinglePage(nextLink, requestOptionsLocal);
                });
    }

    /**
     * Get All Text Blocklists
     *
     * <p>Get all text blocklists details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all text blocklists details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTextBlocklistsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listTextBlocklists(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get All Text Blocklists
     *
     * <p>Get all text blocklists details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all text blocklists details as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTextBlocklistsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listTextBlocklistsSinglePageAsync(requestOptions),
                nextLink -> listTextBlocklistsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get All Text Blocklists
     *
     * <p>Get all text blocklists details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all text blocklists details along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTextBlocklistsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listTextBlocklistsSync(
                        this.getEndpoint(),
                        this.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * Get All Text Blocklists
     *
     * <p>Get all text blocklists details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all text blocklists details as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTextBlocklists(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedIterable<>(
                () -> listTextBlocklistsSinglePage(requestOptions),
                nextLink -> listTextBlocklistsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Remove BlocklistItems From Text Blocklist
     *
     * <p>Remove blocklistItems from a text blocklist. You can remove at most 100 BlocklistItems in one request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
     * @param removeTextBlocklistItemsOptions The request to remove blocklistItems from a text blocklist.
=======
     * @param name Text blocklist name.
     * @param body Options for removing blocklist items.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeBlocklistItemsWithResponseAsync(
<<<<<<< HEAD
            String blocklistName, BinaryData removeTextBlocklistItemsOptions, RequestOptions requestOptions) {
=======
            String name, BinaryData body, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeBlocklistItems(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                                blocklistName,
                                accept,
                                removeTextBlocklistItemsOptions,
=======
                                name,
                                accept,
                                body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                                requestOptions,
                                context));
    }

    /**
     * Remove BlocklistItems From Text Blocklist
     *
     * <p>Remove blocklistItems from a text blocklist. You can remove at most 100 BlocklistItems in one request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
<<<<<<< HEAD
     * @param blocklistName Text blocklist name.
     * @param removeTextBlocklistItemsOptions The request to remove blocklistItems from a text blocklist.
=======
     * @param name Text blocklist name.
     * @param body Options for removing blocklist items.
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeBlocklistItemsWithResponse(
<<<<<<< HEAD
            String blocklistName, BinaryData removeTextBlocklistItemsOptions, RequestOptions requestOptions) {
=======
            String name, BinaryData body, RequestOptions requestOptions) {
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
        final String accept = "application/json";
        return service.removeBlocklistItemsSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
<<<<<<< HEAD
                blocklistName,
                accept,
                removeTextBlocklistItemsOptions,
=======
                name,
                accept,
                body,
>>>>>>> 28a73a0e66f46fc022fa3d3fa8273e86ca34f630
                requestOptions,
                Context.NONE);
    }

    /**
     * Get All BlocklistItems By blocklistName
     *
     * <p>Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextBlocklistItem items along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTextBlocklistItemsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listTextBlocklistItemsNext(
                                        nextLink, this.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get All BlocklistItems By blocklistName
     *
     * <p>Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistItemId: String (Required)
     *     description: String (Optional)
     *     text: String (Required)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextBlocklistItem items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTextBlocklistItemsNextSinglePage(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listTextBlocklistItemsNextSync(
                        nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * Get All Text Blocklists
     *
     * <p>Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextBlocklist items along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTextBlocklistsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listTextBlocklistsNext(
                                        nextLink, this.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get All Text Blocklists
     *
     * <p>Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     blocklistName: String (Required)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextBlocklist items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTextBlocklistsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listTextBlocklistsNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
