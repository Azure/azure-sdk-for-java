// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The image analysis request.
 */
@Fluent
public final class AnalyzeImageOptions implements JsonSerializable<AnalyzeImageOptions> {

    /*
     * The image to be analyzed.
     */
    @Generated
    private final ContentSafetyImageData image;

    /*
     * The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories
     * will be returned.
     */
    @Generated
    private List<ImageCategory> categories;

    /*
     * This refers to the type of image analysis output. If no value is assigned, the default value will be
     * "FourSeverityLevels".
     */
    @Generated
    private AnalyzeImageOutputType outputType;

    /**
     * Creates an instance of AnalyzeImageOptions class.
     *
     * @param image the image value to set.
     */
    @Generated
    public AnalyzeImageOptions(ContentSafetyImageData image) {
        this.image = image;
    }

    /**
     * Get the image property: The image to be analyzed.
     *
     * @return the image value.
     */
    @Generated
    public ContentSafetyImageData getImage() {
        return this.image;
    }

    /**
     * Get the categories property: The categories will be analyzed. If they are not assigned, a default set of analysis
     * results for the categories will be returned.
     *
     * @return the categories value.
     */
    @Generated
    public List<ImageCategory> getCategories() {
        return this.categories;
    }

    /**
     * Set the categories property: The categories will be analyzed. If they are not assigned, a default set of analysis
     * results for the categories will be returned.
     *
     * @param categories the categories value to set.
     * @return the AnalyzeImageOptions object itself.
     */
    @Generated
    public AnalyzeImageOptions setCategories(List<ImageCategory> categories) {
        this.categories = categories;
        return this;
    }

    /**
     * Get the outputType property: This refers to the type of image analysis output. If no value is assigned, the
     * default value will be "FourSeverityLevels".
     *
     * @return the outputType value.
     */
    @Generated
    public AnalyzeImageOutputType getOutputType() {
        return this.outputType;
    }

    /**
     * Set the outputType property: This refers to the type of image analysis output. If no value is assigned, the
     * default value will be "FourSeverityLevels".
     *
     * @param outputType the outputType value to set.
     * @return the AnalyzeImageOptions object itself.
     */
    @Generated
    public AnalyzeImageOptions setOutputType(AnalyzeImageOutputType outputType) {
        this.outputType = outputType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("image", this.image);
        jsonWriter.writeArrayField("categories", this.categories,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("outputType", this.outputType == null ? null : this.outputType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeImageOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeImageOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeImageOptions.
     */
    @Generated
    public static AnalyzeImageOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentSafetyImageData image = null;
            List<ImageCategory> categories = null;
            AnalyzeImageOutputType outputType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("image".equals(fieldName)) {
                    image = ContentSafetyImageData.fromJson(reader);
                } else if ("categories".equals(fieldName)) {
                    categories = reader.readArray(reader1 -> ImageCategory.fromString(reader1.getString()));
                } else if ("outputType".equals(fieldName)) {
                    outputType = AnalyzeImageOutputType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeImageOptions deserializedAnalyzeImageOptions = new AnalyzeImageOptions(image);
            deserializedAnalyzeImageOptions.categories = categories;
            deserializedAnalyzeImageOptions.outputType = outputType;
            return deserializedAnalyzeImageOptions;
        });
    }
}
