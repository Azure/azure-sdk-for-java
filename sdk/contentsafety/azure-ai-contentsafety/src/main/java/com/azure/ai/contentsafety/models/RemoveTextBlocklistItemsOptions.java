// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The request to remove blocklistItems from a text blocklist.
 */
@Immutable
public final class RemoveTextBlocklistItemsOptions implements JsonSerializable<RemoveTextBlocklistItemsOptions> {

    /*
     * Array of blocklistItemIds to remove.
     */
    @Generated
    private final List<String> blocklistItemIds;

    /**
     * Creates an instance of RemoveTextBlocklistItemsOptions class.
     *
     * @param blocklistItemIds the blocklistItemIds value to set.
     */
    @Generated
    public RemoveTextBlocklistItemsOptions(List<String> blocklistItemIds) {
        this.blocklistItemIds = blocklistItemIds;
    }

    /**
     * Get the blocklistItemIds property: Array of blocklistItemIds to remove.
     *
     * @return the blocklistItemIds value.
     */
    @Generated
    public List<String> getBlocklistItemIds() {
        return this.blocklistItemIds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("blocklistItemIds", this.blocklistItemIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoveTextBlocklistItemsOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoveTextBlocklistItemsOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RemoveTextBlocklistItemsOptions.
     */
    @Generated
    public static RemoveTextBlocklistItemsOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> blocklistItemIds = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("blocklistItemIds".equals(fieldName)) {
                    blocklistItemIds = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new RemoveTextBlocklistItemsOptions(blocklistItemIds);
        });
    }
}
