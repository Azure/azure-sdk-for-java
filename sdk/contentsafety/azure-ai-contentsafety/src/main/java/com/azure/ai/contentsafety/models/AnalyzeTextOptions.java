// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The text analysis request.
 */
@Fluent
public final class AnalyzeTextOptions {

    /*
     * The text needs to be analyzed. We support a maximum of 10k Unicode characters (Unicode code points) in the text
     * of one request.
     */
    @Generated
    @JsonProperty(value = "text")
    private String text;

    /*
     * The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories
     * will be returned.
     */
    @Generated
    @JsonProperty(value = "categories")
    private List<TextCategory> categories;

    /*
     * The names of blocklists.
     */
    @Generated
    @JsonProperty(value = "blocklistNames")
    private List<String> blocklistNames;

    /*
     * When set to true, further analyses of harmful content will not be performed in cases where blocklists are hit.
     * When set to false, all analyses of harmful content will be performed, whether or not blocklists are hit.
     */
    @Generated
    @JsonProperty(value = "haltOnBlocklistHit")
    private Boolean haltOnBlocklistHit;

    /*
     * This refers to the type of text analysis output. If no value is assigned, the default value will be
     * "FourSeverityLevels".
     */
    @Generated
    @JsonProperty(value = "outputType")
    private AnalyzeTextOutputType outputType;

    /**
     * Creates an instance of AnalyzeTextOptions class.
     *
     * @param text the text value to set.
     */
    @Generated
    @JsonCreator
    public AnalyzeTextOptions(@JsonProperty(value = "text") String text) {
        this.text = text;
    }

    /**
     * Get the text property: The text needs to be analyzed. We support a maximum of 10k Unicode characters (Unicode
     * code points) in the text of one request.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the categories property: The categories will be analyzed. If they are not assigned, a default set of
     * analysis results for the categories will be returned.
     *
     * @return the categories value.
     */
    @Generated
    public List<TextCategory> getCategories() {
        return this.categories;
    }

    /**
     * Set the categories property: The categories will be analyzed. If they are not assigned, a default set of
     * analysis results for the categories will be returned.
     *
     * @param categories the categories value to set.
     * @return the AnalyzeTextOptions object itself.
     */
    @Generated
    public AnalyzeTextOptions setCategories(List<TextCategory> categories) {
        this.categories = categories;
        return this;
    }

    /**
     * Get the blocklistNames property: The names of blocklists.
     *
     * @return the blocklistNames value.
     */
    @Generated
    public List<String> getBlocklistNames() {
        return this.blocklistNames;
    }

    /**
     * Set the blocklistNames property: The names of blocklists.
     *
     * @param blocklistNames the blocklistNames value to set.
     * @return the AnalyzeTextOptions object itself.
     */
    @Generated
    public AnalyzeTextOptions setBlocklistNames(List<String> blocklistNames) {
        this.blocklistNames = blocklistNames;
        return this;
    }

    /**
     * Get the haltOnBlocklistHit property: When set to true, further analyses of harmful content will not be performed
     * in cases where blocklists are hit. When set to false, all analyses of harmful content will be performed, whether
     * or not blocklists are hit.
     *
     * @return the haltOnBlocklistHit value.
     */
    @Generated
    public Boolean isHaltOnBlocklistHit() {
        return this.haltOnBlocklistHit;
    }

    /**
     * Set the haltOnBlocklistHit property: When set to true, further analyses of harmful content will not be performed
     * in cases where blocklists are hit. When set to false, all analyses of harmful content will be performed, whether
     * or not blocklists are hit.
     *
     * @param haltOnBlocklistHit the haltOnBlocklistHit value to set.
     * @return the AnalyzeTextOptions object itself.
     */
    @Generated
    public AnalyzeTextOptions setHaltOnBlocklistHit(Boolean haltOnBlocklistHit) {
        this.haltOnBlocklistHit = haltOnBlocklistHit;
        return this;
    }

    /**
     * Get the outputType property: This refers to the type of text analysis output. If no value is assigned, the
     * default value will be "FourSeverityLevels".
     *
     * @return the outputType value.
     */
    @Generated
    public AnalyzeTextOutputType getOutputType() {
        return this.outputType;
    }

    /**
     * Set the outputType property: This refers to the type of text analysis output. If no value is assigned, the
     * default value will be "FourSeverityLevels".
     *
     * @param outputType the outputType value to set.
     * @return the AnalyzeTextOptions object itself.
     */
    @Generated
    public AnalyzeTextOptions setOutputType(AnalyzeTextOutputType outputType) {
        this.outputType = outputType;
        return this;
    }
}
