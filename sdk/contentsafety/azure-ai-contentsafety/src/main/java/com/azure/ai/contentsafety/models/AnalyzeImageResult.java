// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The image analysis response.
 */
@Immutable
public final class AnalyzeImageResult implements JsonSerializable<AnalyzeImageResult> {

    /*
     * Analysis result for categories.
     */
    @Generated
    private final List<ImageCategoriesAnalysis> categoriesAnalysis;

    /**
     * Creates an instance of AnalyzeImageResult class.
     *
     * @param categoriesAnalysis the categoriesAnalysis value to set.
     */
    @Generated
    private AnalyzeImageResult(List<ImageCategoriesAnalysis> categoriesAnalysis) {
        this.categoriesAnalysis = categoriesAnalysis;
    }

    /**
     * Get the categoriesAnalysis property: Analysis result for categories.
     *
     * @return the categoriesAnalysis value.
     */
    @Generated
    public List<ImageCategoriesAnalysis> getCategoriesAnalysis() {
        return this.categoriesAnalysis;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("categoriesAnalysis", this.categoriesAnalysis,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeImageResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeImageResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeImageResult.
     */
    @Generated
    public static AnalyzeImageResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ImageCategoriesAnalysis> categoriesAnalysis = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("categoriesAnalysis".equals(fieldName)) {
                    categoriesAnalysis = reader.readArray(reader1 -> ImageCategoriesAnalysis.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeImageResult(categoriesAnalysis);
        });
    }
}
